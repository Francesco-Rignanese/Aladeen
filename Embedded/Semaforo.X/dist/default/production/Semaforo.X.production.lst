

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Jul 12 17:50:29 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 2.10
    49                           ; Generated 31/07/2019 GMT
    50                           ; 
    51                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F877A Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000D                     	;# 
    96  000E                     	;# 
    97  000E                     	;# 
    98  000F                     	;# 
    99  0010                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0013                     	;# 
   103  0014                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001B                     	;# 
   113  001C                     	;# 
   114  001D                     	;# 
   115  001E                     	;# 
   116  001F                     	;# 
   117  0081                     	;# 
   118  0085                     	;# 
   119  0086                     	;# 
   120  0087                     	;# 
   121  0088                     	;# 
   122  0089                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  008E                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  009F                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  0000                     	;# 
   143  0001                     	;# 
   144  0002                     	;# 
   145  0003                     	;# 
   146  0004                     	;# 
   147  0005                     	;# 
   148  0006                     	;# 
   149  0007                     	;# 
   150  0008                     	;# 
   151  0009                     	;# 
   152  000A                     	;# 
   153  000B                     	;# 
   154  000C                     	;# 
   155  000D                     	;# 
   156  000E                     	;# 
   157  000E                     	;# 
   158  000F                     	;# 
   159  0010                     	;# 
   160  0011                     	;# 
   161  0012                     	;# 
   162  0013                     	;# 
   163  0014                     	;# 
   164  0015                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001D                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  0081                     	;# 
   178  0085                     	;# 
   179  0086                     	;# 
   180  0087                     	;# 
   181  0088                     	;# 
   182  0089                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0093                     	;# 
   189  0094                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  010F                     	;# 
   200  018C                     	;# 
   201  018D                     	;# 
   202                           
   203                           	psect	idataBANK0
   204  0815                     __pidataBANK0:	
   205                           
   206                           ;initializer for _randx
   207  0815  3401               	retlw	1
   208  0816  3400               	retlw	0
   209  0817  3400               	retlw	0
   210  0818  3400               	retlw	0
   211                           
   212                           ;initializer for _Semafori
   213  0819  34D7               	retlw	low (_s0| 0)
   214  081A  3400               	retlw	high (_s0| 0)
   215  081B  34C9               	retlw	low (_s1| 0)
   216  081C  3400               	retlw	high (_s1| 0)
   217  081D  34BB               	retlw	low (_s2| 0)
   218  081E  3400               	retlw	high (_s2| 0)
   219  081F  3490               	retlw	low (_s3| (0+256))
   220  0820  3401               	retlw	high (_s3| (0+256))
   221                           
   222                           	psect	strings
   223  0800                     __pstrings:	
   224  0800                     stringtab:	
   225  0800                     __stringtab:	
   226  0800                     stringcode:	
   227                           ;	String table - string pointers are 1 byte each
   228                           
   229  0800                     stringdir:	
   230  0800  3008               	movlw	high stringdir
   231  0801  008A               	movwf	10
   232  0802  0804               	movf	4,w
   233  0803  0A84               	incf	4,f
   234  0804  0782               	addwf	2,f
   235  0805                     __stringbase:	
   236  0805  3400               	retlw	0
   237  0806                     __end_of__stringtab:	
   238  0806                     _display:	
   239  0806  343F               	retlw	63
   240  0807  3406               	retlw	6
   241  0808  345B               	retlw	91
   242  0809  344F               	retlw	79
   243  080A  3466               	retlw	102
   244  080B  346D               	retlw	109
   245  080C  347D               	retlw	125
   246  080D  3407               	retlw	7
   247  080E  347F               	retlw	127
   248  080F  346F               	retlw	111
   249  0810  3400               	retlw	0
   250  0811                     __end_of_display:	
   251  0811                     _n_semafori:	
   252  0811  3402               	retlw	2
   253  0812                     __end_of_n_semafori:	
   254  0008                     _PORTD	set	8
   255  0005                     _PORTAbits	set	5
   256  001A                     _RCREG	set	26
   257  0019                     _TXREG	set	25
   258  000B                     _INTCONbits	set	11
   259  0018                     _RCSTAbits	set	24
   260  001E                     _ADRESH	set	30
   261  001F                     _ADCON0	set	31
   262  0006                     _PORTBbits	set	6
   263  0007                     _PORTCbits	set	7
   264  000E                     _TMR1L	set	14
   265  000F                     _TMR1H	set	15
   266  0010                     _T1CON	set	16
   267  0001                     _TMR0	set	1
   268  000B                     _INTCON	set	11
   269  0060                     _TMR1IF	set	96
   270  005A                     _TMR0IF	set	90
   271  0065                     _RCIF	set	101
   272  0064                     _TXIF	set	100
   273  00FA                     _GO_nDONE	set	250
   274  008C                     _PIE1bits	set	140
   275  0099                     _SPBRG	set	153
   276  0098                     _TXSTAbits	set	152
   277  0087                     _TRISCbits	set	135
   278  009E                     _ADRESL	set	158
   279  009F                     _ADCON1	set	159
   280  0085                     _TRISA	set	133
   281  0081                     _OPTION_REG	set	129
   282  0089                     _TRISE	set	137
   283  0088                     _TRISD	set	136
   284  0087                     _TRISC	set	135
   285  0086                     _TRISB	set	134
   286                           
   287                           ; #config settings
   288  0000                     
   289                           	psect	cinit
   290  0013                     start_initialization:	
   291  0013                     __initialization:	
   292                           
   293                           ; Initialize objects allocated to BANK0
   294  0013  1383               	bcf	3,7	;select IRP bank0
   295  0014  3068               	movlw	low (__pdataBANK0+12)
   296  0015  00FD               	movwf	btemp+-1
   297  0016  3008               	movlw	high __pidataBANK0
   298  0017  00FE               	movwf	btemp
   299  0018  3015               	movlw	low __pidataBANK0
   300  0019  00FF               	movwf	btemp+1
   301  001A  305C               	movlw	low __pdataBANK0
   302  001B  0084               	movwf	4
   303  001C  120A  158A  2038  120A  118A  	fcall	init_ram0
   304                           
   305                           ; Clear objects allocated to BANK3
   306  0021  1783               	bsf	3,7	;select IRP bank2
   307  0022  3090               	movlw	low __pbssBANK3
   308  0023  0084               	movwf	4
   309  0024  309E               	movlw	low (__pbssBANK3+14)
   310  0025  160A  118A  27EF  120A  118A  	fcall	clear_ram0
   311                           
   312                           ; Clear objects allocated to BANK1
   313  002A  1383               	bcf	3,7	;select IRP bank0
   314  002B  30A0               	movlw	low __pbssBANK1
   315  002C  0084               	movwf	4
   316  002D  30ED               	movlw	low (__pbssBANK1+77)
   317  002E  160A  118A  27EF  120A  118A  	fcall	clear_ram0
   318                           
   319                           ; Clear objects allocated to BANK0
   320  0033  3048               	movlw	low __pbssBANK0
   321  0034  0084               	movwf	4
   322  0035  305C               	movlw	low (__pbssBANK0+20)
   323  0036  160A  118A  27EF  120A  118A  	fcall	clear_ram0
   324  003B                     end_of_initialization:	
   325                           ;End of C runtime variable initialization code
   326                           
   327  003B                     __end_of__initialization:	
   328  003B  0183               	clrf	3
   329  003C  120A  118A  283F   	ljmp	_main	;jump to C main() function
   330                           
   331                           	psect	bssBANK0
   332  0048                     __pbssBANK0:	
   333  0048                     _count:	
   334  0048                     	ds	2
   335  004A                     _pressione:	
   336  004A                     	ds	1
   337  004B                     _umidita:	
   338  004B                     	ds	1
   339  004C                     _temp:	
   340  004C                     	ds	1
   341  004D                     _timerReadFromGateway:	
   342  004D                     	ds	1
   343  004E                     _dataFromGatewayIndex:	
   344  004E                     	ds	1
   345  004F                     _count_lux:	
   346  004F                     	ds	1
   347  0050                     _disp:	
   348  0050                     	ds	1
   349  0051                     _cycled:	
   350  0051                     	ds	1
   351  0052                     _secondPassed:	
   352  0052                     	ds	1
   353  0053                     _readGateway:	
   354  0053                     	ds	1
   355  0054                     _readGatewayDone:	
   356  0054                     	ds	1
   357  0055                     _motorcycle:	
   358  0055                     	ds	4
   359  0059                     _centinaia:	
   360  0059                     	ds	1
   361  005A                     _decine:	
   362  005A                     	ds	1
   363  005B                     _unita:	
   364  005B                     	ds	1
   365                           
   366                           	psect	dataBANK0
   367  005C                     __pdataBANK0:	
   368  005C                     _randx:	
   369  005C                     	ds	4
   370  0060                     _Semafori:	
   371  0060                     	ds	8
   372                           
   373                           	psect	bssBANK1
   374  00A0                     __pbssBANK1:	
   375  00A0                     _time:	
   376  00A0                     	ds	8
   377  00A8                     _RoadsSensors:	
   378  00A8                     	ds	4
   379  00AC                     _dataFromGateway:	
   380  00AC                     	ds	15
   381  00BB                     _s2:	
   382  00BB                     	ds	14
   383  00C9                     _s1:	
   384  00C9                     	ds	14
   385  00D7                     _s0:	
   386  00D7                     	ds	14
   387  00E5                     _truck:	
   388  00E5                     	ds	4
   389  00E9                     _car:	
   390  00E9                     	ds	4
   391                           
   392                           	psect	bssBANK3
   393  0190                     __pbssBANK3:	
   394  0190                     _s3:	
   395  0190                     	ds	14
   396                           
   397                           	psect	inittext
   398  0834                     init_fetch0:	
   399                           ;	Called with low address in FSR and high address in W
   400                           
   401  0834  087E               	movf	btemp,w
   402  0835  008A               	movwf	10
   403  0836  087F               	movf	btemp+1,w
   404  0837  0082               	movwf	2
   405  0838                     init_ram0:	
   406                           ;Called with:
   407                           ;	high address of idata address in btemp 
   408                           ;	low address of idata address in btemp+1 
   409                           ;	low address of data in FSR
   410                           ;	high address + 1 of data in btemp-1
   411                           
   412  0838  120A  158A  2034  120A  158A  	fcall	init_fetch0
   413  083D  0080               	movwf	0
   414  083E  0A84               	incf	4,f
   415  083F  0804               	movf	4,w
   416  0840  067D               	xorwf	btemp+-1,w
   417  0841  1903               	btfsc	3,2
   418  0842  3400               	retlw	0
   419  0843  0AFF               	incf	btemp+1,f
   420  0844  1903               	btfsc	3,2
   421  0845  0AFE               	incf	btemp,f
   422  0846  2838               	goto	init_ram0
   423                           
   424                           	psect	clrtext
   425  17EF                     clear_ram0:	
   426                           ;	Called with FSR containing the base address, and
   427                           ;	W with the last address+1
   428                           
   429  17EF  0064               	clrwdt	;clear the watchdog before getting into this loop
   430  17F0                     clrloop0:	
   431  17F0  0180               	clrf	0	;clear RAM location pointed to by FSR
   432  17F1  0A84               	incf	4,f	;increment pointer
   433  17F2  0604               	xorwf	4,w	;XOR with final address
   434  17F3  1903               	btfsc	3,2	;have we reached the end yet?
   435  17F4  3400               	retlw	0	;all done for this memory range, return
   436  17F5  0604               	xorwf	4,w	;XOR again to restore value
   437  17F6  2FF0               	goto	clrloop0	;do the next byte
   438                           
   439                           	psect	cstackBANK3
   440  019E                     __pcstackBANK3:	
   441  019E                     ??_main:	
   442                           
   443                           ; 1 bytes @ 0x0
   444  019E                     	ds	13
   445                           
   446                           	psect	cstackCOMMON
   447  0070                     __pcstackCOMMON:	
   448  0070                     ?_init_ADC:	
   449  0070                     ?_ShowDigitsOnDisplay:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_bitParita:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_UpdateTimes:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_Conteggio:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_main:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?_UART_TxChar:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_UART_Read:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ??_UART_Read:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_conteggioVeicoli:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_ISR:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     Conteggio@_count:	
   480                           ; 1 bytes @ 0x0
   481                           
   482                           
   483                           ; 2 bytes @ 0x0
   484  0070                     	ds	2
   485  0072                     Conteggio@_motorcycle:	
   486                           
   487                           ; 1 bytes @ 0x2
   488  0072                     	ds	1
   489  0073                     Conteggio@_car:	
   490                           
   491                           ; 1 bytes @ 0x3
   492  0073                     	ds	1
   493  0074                     Conteggio@_truck:	
   494                           
   495                           ; 1 bytes @ 0x4
   496  0074                     	ds	1
   497  0075                     Conteggio@index:	
   498                           
   499                           ; 1 bytes @ 0x5
   500  0075                     	ds	1
   501  0076                     ??_Conteggio:	
   502                           
   503                           ; 1 bytes @ 0x6
   504  0076                     	ds	3
   505  0079                     ??_conteggioVeicoli:	
   506                           
   507                           ; 1 bytes @ 0x9
   508  0079                     	ds	4
   509  007D                     conteggioVeicoli@i:	
   510                           
   511                           ; 1 bytes @ 0xD
   512  007D                     	ds	1
   513                           
   514                           	psect	cstackBANK0
   515  0020                     __pcstackBANK0:	
   516  0020                     ??_ISR:	
   517                           
   518                           ; 1 bytes @ 0x0
   519  0020                     	ds	4
   520  0024                     ??_init_ADC:	
   521  0024                     ?_luciSemaforo:	
   522                           ; 1 bytes @ 0x4
   523                           
   524  0024                     ?_BuildByte:	
   525                           ; 1 bytes @ 0x4
   526                           
   527  0024                     ?_bitChange:	
   528                           ; 1 bytes @ 0x4
   529                           
   530  0024                     ??_UpdateTimes:	
   531                           ; 1 bytes @ 0x4
   532                           
   533  0024                     ?_SetDefaultTimers:	
   534                           ; 1 bytes @ 0x4
   535                           
   536  0024                     ??_UART_TxChar:	
   537                           ; 1 bytes @ 0x4
   538                           
   539  0024                     ?_SetDisplay:	
   540                           ; 1 bytes @ 0x4
   541                           
   542  0024                     ?___bmul:	
   543                           ; 1 bytes @ 0x4
   544                           
   545  0024                     ?_ADC_Read:	
   546                           ; 1 bytes @ 0x4
   547                           
   548  0024                     ?_GetTime:	
   549                           ; 2 bytes @ 0x4
   550                           
   551  0024                     ?___wmul:	
   552                           ; 2 bytes @ 0x4
   553                           
   554  0024                     ?___awmod:	
   555                           ; 2 bytes @ 0x4
   556                           
   557  0024                     ?___lmul:	
   558                           ; 2 bytes @ 0x4
   559                           
   560  0024                     ?___aldiv:	
   561                           ; 4 bytes @ 0x4
   562                           
   563  0024                     bitChange@n:	
   564                           ; 4 bytes @ 0x4
   565                           
   566  0024                     BuildByte@byte1:	
   567                           ; 1 bytes @ 0x4
   568                           
   569  0024                     GetTime@_dataFromGateway:	
   570                           ; 1 bytes @ 0x4
   571                           
   572  0024                     UART_TxChar@ch:	
   573                           ; 1 bytes @ 0x4
   574                           
   575  0024                     SetDisplay@d2:	
   576                           ; 1 bytes @ 0x4
   577                           
   578  0024                     luciSemaforo@lux:	
   579                           ; 1 bytes @ 0x4
   580                           
   581  0024                     ___bmul@multiplicand:	
   582                           ; 1 bytes @ 0x4
   583                           
   584  0024                     SetDefaultTimers@rosso:	
   585                           ; 1 bytes @ 0x4
   586                           
   587  0024                     ___wmul@multiplier:	
   588                           ; 2 bytes @ 0x4
   589                           
   590  0024                     ___awmod@divisor:	
   591                           ; 2 bytes @ 0x4
   592                           
   593  0024                     ___lmul@multiplier:	
   594                           ; 2 bytes @ 0x4
   595                           
   596  0024                     ___aldiv@divisor:	
   597                           ; 4 bytes @ 0x4
   598                           
   599                           
   600                           ; 4 bytes @ 0x4
   601  0024                     	ds	1
   602  0025                     ??_luciSemaforo:	
   603  0025                     ??_bitChange:	
   604                           ; 1 bytes @ 0x5
   605                           
   606  0025                     ??___bmul:	
   607                           ; 1 bytes @ 0x5
   608                           
   609  0025                     BuildByte@valore:	
   610                           ; 1 bytes @ 0x5
   611                           
   612  0025                     SetDisplay@d3:	
   613                           ; 1 bytes @ 0x5
   614                           
   615                           
   616                           ; 1 bytes @ 0x5
   617  0025                     	ds	1
   618  0026                     ??_ADC_Read:	
   619  0026                     ??_BuildByte:	
   620                           ; 1 bytes @ 0x6
   621                           
   622  0026                     ??_GetTime:	
   623                           ; 1 bytes @ 0x6
   624                           
   625  0026                     SetDisplay@value:	
   626                           ; 1 bytes @ 0x6
   627                           
   628  0026                     ___bmul@product:	
   629                           ; 1 bytes @ 0x6
   630                           
   631  0026                     SetDefaultTimers@verde:	
   632                           ; 1 bytes @ 0x6
   633                           
   634  0026                     ___wmul@multiplicand:	
   635                           ; 2 bytes @ 0x6
   636                           
   637  0026                     ___awmod@dividend:	
   638                           ; 2 bytes @ 0x6
   639                           
   640                           
   641                           ; 2 bytes @ 0x6
   642  0026                     	ds	1
   643  0027                     ??_SetDisplay:	
   644  0027                     bitChange@dato:	
   645                           ; 1 bytes @ 0x7
   646                           
   647  0027                     ADC_Read@canale:	
   648                           ; 1 bytes @ 0x7
   649                           
   650  0027                     SetDisplay@d1:	
   651                           ; 1 bytes @ 0x7
   652                           
   653  0027                     luciSemaforo@index:	
   654                           ; 1 bytes @ 0x7
   655                           
   656  0027                     ___bmul@multiplier:	
   657                           ; 1 bytes @ 0x7
   658                           
   659                           
   660                           ; 1 bytes @ 0x7
   661  0027                     	ds	1
   662  0028                     ??_bitParita:	
   663  0028                     ??___wmul:	
   664                           ; 1 bytes @ 0x8
   665                           
   666  0028                     ??___awmod:	
   667                           ; 1 bytes @ 0x8
   668                           
   669  0028                     BuildByte@byte0:	
   670                           ; 1 bytes @ 0x8
   671                           
   672  0028                     GetTime@index:	
   673                           ; 1 bytes @ 0x8
   674                           
   675  0028                     SetDefaultTimers@giallo:	
   676                           ; 1 bytes @ 0x8
   677                           
   678  0028                     ___wmul@product:	
   679                           ; 2 bytes @ 0x8
   680                           
   681  0028                     ___lmul@multiplicand:	
   682                           ; 2 bytes @ 0x8
   683                           
   684  0028                     ___aldiv@dividend:	
   685                           ; 4 bytes @ 0x8
   686                           
   687                           
   688                           ; 4 bytes @ 0x8
   689  0028                     	ds	1
   690  0029                     GetTime@shortInt:	
   691  0029                     ___awmod@counter:	
   692                           ; 1 bytes @ 0x9
   693                           
   694  0029                     BuildByte@txByte:	
   695                           ; 1 bytes @ 0x9
   696                           
   697                           
   698                           ; 5 bytes @ 0x9
   699  0029                     	ds	1
   700  002A                     SetDefaultTimers@_semafori:	
   701  002A                     ___awmod@sign:	
   702                           ; 1 bytes @ 0xA
   703                           
   704  002A                     GetTime@tmp:	
   705                           ; 1 bytes @ 0xA
   706                           
   707                           
   708                           ; 2 bytes @ 0xA
   709  002A                     	ds	1
   710  002B                     ??_ShowDigitsOnDisplay:	
   711  002B                     ??_SetDefaultTimers:	
   712                           ; 1 bytes @ 0xB
   713                           
   714  002B                     ?___awdiv:	
   715                           ; 1 bytes @ 0xB
   716                           
   717  002B                     ___awdiv@divisor:	
   718                           ; 2 bytes @ 0xB
   719                           
   720                           
   721                           ; 2 bytes @ 0xB
   722  002B                     	ds	1
   723  002C                     ?_SetReceivedTimes:	
   724  002C                     ??___lmul:	
   725                           ; 1 bytes @ 0xC
   726                           
   727  002C                     ??___aldiv:	
   728                           ; 1 bytes @ 0xC
   729                           
   730  002C                     bitParita@sommaRow:	
   731                           ; 1 bytes @ 0xC
   732                           
   733  002C                     SetReceivedTimes@_semafori:	
   734                           ; 1 bytes @ 0xC
   735                           
   736                           
   737                           ; 1 bytes @ 0xC
   738  002C                     	ds	1
   739  002D                     ??_SetReceivedTimes:	
   740  002D                     bitParita@sommaColumn:	
   741                           ; 1 bytes @ 0xD
   742                           
   743  002D                     ___aldiv@counter:	
   744                           ; 1 bytes @ 0xD
   745                           
   746  002D                     ___awdiv@dividend:	
   747                           ; 1 bytes @ 0xD
   748                           
   749  002D                     ___lmul@product:	
   750                           ; 2 bytes @ 0xD
   751                           
   752                           
   753                           ; 4 bytes @ 0xD
   754  002D                     	ds	1
   755  002E                     bitParita@errorColumn:	
   756  002E                     BuildByte@sommaRow:	
   757                           ; 1 bytes @ 0xE
   758                           
   759  002E                     ___aldiv@sign:	
   760                           ; 1 bytes @ 0xE
   761                           
   762                           
   763                           ; 1 bytes @ 0xE
   764  002E                     	ds	1
   765  002F                     ??___awdiv:	
   766  002F                     bitParita@error:	
   767                           ; 1 bytes @ 0xF
   768                           
   769  002F                     BuildByte@sommaColumn:	
   770                           ; 1 bytes @ 0xF
   771                           
   772  002F                     ___aldiv@quotient:	
   773                           ; 1 bytes @ 0xF
   774                           
   775                           
   776                           ; 4 bytes @ 0xF
   777  002F                     	ds	1
   778  0030                     bitParita@errorRow:	
   779  0030                     ___awdiv@counter:	
   780                           ; 1 bytes @ 0x10
   781                           
   782  0030                     BuildByte@y:	
   783                           ; 1 bytes @ 0x10
   784                           
   785                           
   786                           ; 2 bytes @ 0x10
   787  0030                     	ds	1
   788  0031                     ?_rand:	
   789  0031                     ___awdiv@sign:	
   790                           ; 2 bytes @ 0x11
   791                           
   792  0031                     bitParita@y:	
   793                           ; 1 bytes @ 0x11
   794                           
   795                           
   796                           ; 2 bytes @ 0x11
   797  0031                     	ds	1
   798  0032                     SetDefaultTimers@l:	
   799  0032                     BuildByte@y_360:	
   800                           ; 1 bytes @ 0x12
   801                           
   802  0032                     ___awdiv@quotient:	
   803                           ; 2 bytes @ 0x12
   804                           
   805                           
   806                           ; 2 bytes @ 0x12
   807  0032                     	ds	1
   808  0033                     ?_UART_Init:	
   809  0033                     ??_rand:	
   810                           ; 1 bytes @ 0x13
   811                           
   812  0033                     SetDefaultTimers@i:	
   813                           ; 1 bytes @ 0x13
   814                           
   815  0033                     bitParita@y_348:	
   816                           ; 1 bytes @ 0x13
   817                           
   818  0033                     UART_Init@baudrate:	
   819                           ; 2 bytes @ 0x13
   820                           
   821                           
   822                           ; 2 bytes @ 0x13
   823  0033                     	ds	1
   824  0034                     ?_GetDigits:	
   825  0034                     ?_map:	
   826                           ; 1 bytes @ 0x14
   827                           
   828  0034                     GetDigits@decine:	
   829                           ; 2 bytes @ 0x14
   830                           
   831  0034                     map@x:	
   832                           ; 1 bytes @ 0x14
   833                           
   834  0034                     BuildByte@i:	
   835                           ; 2 bytes @ 0x14
   836                           
   837                           
   838                           ; 2 bytes @ 0x14
   839  0034                     	ds	1
   840  0035                     ??_UART_Init:	
   841  0035                     GetDigits@unita:	
   842                           ; 1 bytes @ 0x15
   843                           
   844  0035                     bitParita@rx:	
   845                           ; 1 bytes @ 0x15
   846                           
   847  0035                     SetReceivedTimes@semaforoId:	
   848                           ; 1 bytes @ 0x15
   849                           
   850                           
   851                           ; 1 bytes @ 0x15
   852  0035                     	ds	1
   853  0036                     UpdateTimes@i:	
   854  0036                     SetReceivedTimes@colorId:	
   855                           ; 1 bytes @ 0x16
   856                           
   857  0036                     map@in_min:	
   858                           ; 1 bytes @ 0x16
   859                           
   860  0036                     GetDigits@Time:	
   861                           ; 2 bytes @ 0x16
   862                           
   863  0036                     bitParita@i:	
   864                           ; 2 bytes @ 0x16
   865                           
   866  0036                     BuildByte@i_359:	
   867                           ; 2 bytes @ 0x16
   868                           
   869                           
   870                           ; 2 bytes @ 0x16
   871  0036                     	ds	1
   872  0037                     UpdateTimes@_semafori:	
   873  0037                     SetReceivedTimes@_dataFromGateway:	
   874                           ; 1 bytes @ 0x17
   875                           
   876                           
   877                           ; 1 bytes @ 0x17
   878  0037                     	ds	1
   879  0038                     ?_sendByte:	
   880  0038                     ??_GetDigits:	
   881                           ; 1 bytes @ 0x18
   882                           
   883  0038                     UpdateTimes@l:	
   884                           ; 1 bytes @ 0x18
   885                           
   886  0038                     SetReceivedTimes@index:	
   887                           ; 1 bytes @ 0x18
   888                           
   889  0038                     sendByte@byte1:	
   890                           ; 1 bytes @ 0x18
   891                           
   892  0038                     map@in_max:	
   893                           ; 1 bytes @ 0x18
   894                           
   895  0038                     bitParita@i_347:	
   896                           ; 2 bytes @ 0x18
   897                           
   898                           
   899                           ; 2 bytes @ 0x18
   900  0038                     	ds	1
   901  0039                     SetReceivedTimes@i:	
   902  0039                     sendByte@valore:	
   903                           ; 1 bytes @ 0x19
   904                           
   905  0039                     _GetDigits$1212:	
   906                           ; 1 bytes @ 0x19
   907                           
   908                           
   909                           ; 2 bytes @ 0x19
   910  0039                     	ds	1
   911  003A                     ??_sendByte:	
   912  003A                     map@out_min:	
   913                           ; 1 bytes @ 0x1A
   914                           
   915                           
   916                           ; 2 bytes @ 0x1A
   917  003A                     	ds	1
   918  003B                     GetDigits@centinaia:	
   919                           
   920                           ; 1 bytes @ 0x1B
   921  003B                     	ds	1
   922  003C                     map@out_max:	
   923                           
   924                           ; 2 bytes @ 0x1C
   925  003C                     	ds	1
   926  003D                     sendByte@byte0:	
   927                           
   928                           ; 1 bytes @ 0x1D
   929  003D                     	ds	1
   930  003E                     ??_map:	
   931  003E                     sendByte@txByte:	
   932                           ; 1 bytes @ 0x1E
   933                           
   934                           
   935                           ; 1 bytes @ 0x1E
   936  003E                     	ds	1
   937  003F                     sendByte@i:	
   938                           
   939                           ; 1 bytes @ 0x1F
   940  003F                     	ds	1
   941  0040                     main@i_488:	
   942                           
   943                           ; 1 bytes @ 0x20
   944  0040                     	ds	1
   945  0041                     main@i_490:	
   946                           
   947                           ; 1 bytes @ 0x21
   948  0041                     	ds	1
   949  0042                     main@random:	
   950                           
   951                           ; 1 bytes @ 0x22
   952  0042                     	ds	1
   953  0043                     main@i_487:	
   954                           
   955                           ; 2 bytes @ 0x23
   956  0043                     	ds	2
   957  0045                     main@lux_select:	
   958                           
   959                           ; 1 bytes @ 0x25
   960  0045                     	ds	1
   961  0046                     main@i_493:	
   962                           
   963                           ; 1 bytes @ 0x26
   964  0046                     	ds	1
   965  0047                     main@i:	
   966                           
   967                           ; 1 bytes @ 0x27
   968  0047                     	ds	1
   969                           
   970                           	psect	maintext
   971  003F                     __pmaintext:	
   972 ;;
   973 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
   974 ;;
   975 ;; *************** function _main *****************
   976 ;; Defined at:
   977 ;;		line 127 in file "main.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;		None
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  random          1   34[BANK0 ] unsigned char 
   982 ;;  lux_select      1   37[BANK0 ] unsigned char 
   983 ;;  i               1   33[BANK0 ] unsigned char 
   984 ;;  i               1   32[BANK0 ] unsigned char 
   985 ;;  i               2   35[BANK0 ] int 
   986 ;;  i               1   39[BANK0 ] unsigned char 
   987 ;;  i               1   38[BANK0 ] unsigned char 
   988 ;; Return value:  Size  Location     Type
   989 ;;                  1    wreg      void 
   990 ;; Registers used:
   991 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   992 ;; Tracked objects:
   993 ;;		On entry : B00/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   997 ;;      Params:         0       0       0       0       0
   998 ;;      Locals:         0       8       0       0       0
   999 ;;      Temps:          0       0       0      13       0
  1000 ;;      Totals:         0       8       0      13       0
  1001 ;;Total ram usage:       21 bytes
  1002 ;; Hardware stack levels required when called:    5
  1003 ;; This function calls:
  1004 ;;		_ADC_Read
  1005 ;;		_GetDigits
  1006 ;;		_SetDefaultTimers
  1007 ;;		_SetReceivedTimes
  1008 ;;		_ShowDigitsOnDisplay
  1009 ;;		_UART_Init
  1010 ;;		_UpdateTimes
  1011 ;;		_bitParita
  1012 ;;		_init_ADC
  1013 ;;		_luciSemaforo
  1014 ;;		_map
  1015 ;;		_rand
  1016 ;;		_sendByte
  1017 ;; This function is called by:
  1018 ;;		Startup code after reset
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           
  1023                           ;psect for function _main
  1024  003F                     _main:	
  1025  003F                     l4484:	
  1026                           ;incstack = 0
  1027                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1028                           
  1029                           
  1030                           ;main.c: 129:     TRISB = 0x38;
  1031  003F  3038               	movlw	56
  1032  0040  1683               	bsf	3,5	;RP0=1, select bank1
  1033  0041  1303               	bcf	3,6	;RP1=0, select bank1
  1034  0042  0086               	movwf	6	;volatile
  1035                           
  1036                           ;main.c: 130:     TRISC = 0x80;
  1037  0043  3080               	movlw	128
  1038  0044  0087               	movwf	7	;volatile
  1039  0045                     l4486:	
  1040                           
  1041                           ;main.c: 131:     TRISD = 0x00;
  1042  0045  0188               	clrf	8	;volatile
  1043  0046                     l4488:	
  1044                           
  1045                           ;main.c: 132:     TRISE = 0x01;
  1046  0046  3001               	movlw	1
  1047  0047  0089               	movwf	9	;volatile
  1048  0048                     l4490:	
  1049                           
  1050                           ;main.c: 133:     INTCON = 0xE0;
  1051  0048  30E0               	movlw	224
  1052  0049  008B               	movwf	11	;volatile
  1053  004A                     l4492:	
  1054                           
  1055                           ;main.c: 134:     OPTION_REG = 0x04;
  1056  004A  3004               	movlw	4
  1057  004B  0081               	movwf	1	;volatile
  1058  004C                     l4494:	
  1059                           
  1060                           ;main.c: 135:     TMR0 = 6;
  1061  004C  3006               	movlw	6
  1062  004D  1283               	bcf	3,5	;RP0=0, select bank0
  1063  004E  1303               	bcf	3,6	;RP1=0, select bank0
  1064  004F  0081               	movwf	1	;volatile
  1065  0050                     l4496:	
  1066                           
  1067                           ;main.c: 136:     T1CON = 0x31;
  1068  0050  3031               	movlw	49
  1069  0051  0090               	movwf	16	;volatile
  1070  0052                     l4498:	
  1071                           
  1072                           ;main.c: 138:     TMR1H = 60;
  1073  0052  303C               	movlw	60
  1074  0053  008F               	movwf	15	;volatile
  1075  0054                     l4500:	
  1076                           
  1077                           ;main.c: 139:     TMR1L = 176;
  1078  0054  30B0               	movlw	176
  1079  0055  008E               	movwf	14	;volatile
  1080  0056                     l4502:	
  1081                           
  1082                           ;main.c: 142:     init_ADC();
  1083  0056  120A  158A  2021  120A  118A  	fcall	_init_ADC
  1084  005B                     l4504:	
  1085                           
  1086                           ;main.c: 143:     UART_Init(9600);
  1087  005B  3080               	movlw	128
  1088  005C  1283               	bcf	3,5	;RP0=0, select bank0
  1089  005D  1303               	bcf	3,6	;RP1=0, select bank0
  1090  005E  00B3               	movwf	UART_Init@baudrate
  1091  005F  3025               	movlw	37
  1092  0060  00B4               	movwf	UART_Init@baudrate+1
  1093  0061  120A  118A  27BB  120A  118A  	fcall	_UART_Init
  1094  0066                     l4506:	
  1095                           
  1096                           ;main.c: 144:     SetDefaultTimers(6, 4, 2, Semafori);
  1097  0066  3006               	movlw	6
  1098  0067  1283               	bcf	3,5	;RP0=0, select bank0
  1099  0068  1303               	bcf	3,6	;RP1=0, select bank0
  1100  0069  00A4               	movwf	SetDefaultTimers@rosso
  1101  006A  3000               	movlw	0
  1102  006B  00A5               	movwf	SetDefaultTimers@rosso+1
  1103  006C  3004               	movlw	4
  1104  006D  00A6               	movwf	SetDefaultTimers@verde
  1105  006E  3000               	movlw	0
  1106  006F  00A7               	movwf	SetDefaultTimers@verde+1
  1107  0070  3002               	movlw	2
  1108  0071  00A8               	movwf	SetDefaultTimers@giallo
  1109  0072  3000               	movlw	0
  1110  0073  00A9               	movwf	SetDefaultTimers@giallo+1
  1111  0074  3060               	movlw	(low (_Semafori| 0))& (0+255)
  1112  0075  1683               	bsf	3,5	;RP0=1, select bank3
  1113  0076  1703               	bsf	3,6	;RP1=1, select bank3
  1114  0077  009E               	movwf	??_main^(0+384)
  1115  0078  081E               	movf	??_main^(0+384),w
  1116  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1117  007A  1303               	bcf	3,6	;RP1=0, select bank0
  1118  007B  00AA               	movwf	SetDefaultTimers@_semafori
  1119  007C  120A  118A  2552  120A  118A  	fcall	_SetDefaultTimers
  1120  0081                     l4508:	
  1121                           
  1122                           ;main.c: 146:     PORTCbits.RC0 = 0;
  1123  0081  1283               	bcf	3,5	;RP0=0, select bank0
  1124  0082  1303               	bcf	3,6	;RP1=0, select bank0
  1125  0083  1007               	bcf	7,0	;volatile
  1126  0084                     l4510:	
  1127                           
  1128                           ;main.c: 147:     PORTBbits.RB7 = 0;
  1129  0084  1386               	bcf	6,7	;volatile
  1130  0085                     l4512:	
  1131                           
  1132                           ;main.c: 148:     PORTCbits.RC3 = 0;
  1133  0085  1187               	bcf	7,3	;volatile
  1134  0086                     l4514:	
  1135                           
  1136                           ;main.c: 149:     PORTBbits.RB6 = 0;
  1137  0086  1306               	bcf	6,6	;volatile
  1138  0087                     l4516:	
  1139                           
  1140                           ;main.c: 150:     PORTCbits.RC1 = 0;
  1141  0087  1087               	bcf	7,1	;volatile
  1142  0088                     l4518:	
  1143                           
  1144                           ;main.c: 151:     PORTBbits.RB1 = 0;
  1145  0088  1086               	bcf	6,1	;volatile
  1146  0089                     l4520:	
  1147                           
  1148                           ;main.c: 154:     {;main.c: 156:         if (readGateway.Bit)
  1149  0089  1C53               	btfss	_readGateway,0
  1150  008A  288C               	goto	u4391
  1151  008B  288D               	goto	u4390
  1152  008C                     u4391:	
  1153  008C  2B98               	goto	l238
  1154  008D                     u4390:	
  1155  008D  2B83               	goto	l4606
  1156  008E                     l240:	
  1157                           ;main.c: 159:             {;main.c: 160:             case 0x08:
  1158                           
  1159                           
  1160                           ;main.c: 161:                 readGatewayDone.Bit = 1;
  1161  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1162  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1163  0090  1454               	bsf	_readGatewayDone,0
  1164                           
  1165                           ;main.c: 162:                 readGateway.Bit = 0;
  1166  0091  1053               	bcf	_readGateway,0
  1167  0092                     l4524:	
  1168                           
  1169                           ;main.c: 164:                 for (unsigned char i = 0; i < 4; i++)
  1170  0092  01C7               	clrf	main@i
  1171  0093                     l4530:	
  1172                           
  1173                           ;main.c: 165:                 {;main.c: 167:                     unsigned char random = 
      +                          (char)rand();
  1174  0093  120A  158A  219D  120A  118A  	fcall	_rand
  1175  0098  1283               	bcf	3,5	;RP0=0, select bank0
  1176  0099  1303               	bcf	3,6	;RP1=0, select bank0
  1177  009A  0831               	movf	?_rand,w
  1178  009B  1683               	bsf	3,5	;RP0=1, select bank3
  1179  009C  1703               	bsf	3,6	;RP1=1, select bank3
  1180  009D  009E               	movwf	??_main^(0+384)
  1181  009E  081E               	movf	??_main^(0+384),w
  1182  009F  1283               	bcf	3,5	;RP0=0, select bank0
  1183  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  1184  00A1  00C2               	movwf	main@random
  1185  00A2                     l4532:	
  1186                           
  1187                           ;main.c: 168:                     if (random < 255)
  1188  00A2  0A42               	incf	main@random,w
  1189  00A3  1903               	btfsc	3,2
  1190  00A4  28A6               	goto	u4401
  1191  00A5  28A7               	goto	u4400
  1192  00A6                     u4401:	
  1193  00A6  2A00               	goto	l4546
  1194  00A7                     u4400:	
  1195  00A7                     l4534:	
  1196                           
  1197                           ;main.c: 169:                     {;main.c: 170:                         motorcycle[i] =
      +                           random;
  1198  00A7  0842               	movf	main@random,w
  1199  00A8  1683               	bsf	3,5	;RP0=1, select bank3
  1200  00A9  1703               	bsf	3,6	;RP1=1, select bank3
  1201  00AA  009E               	movwf	??_main^(0+384)
  1202  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  1203  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  1204  00AD  0847               	movf	main@i,w
  1205  00AE  3E55               	addlw	(low (_motorcycle| 0))& (0+255)
  1206  00AF  0084               	movwf	4
  1207  00B0  1683               	bsf	3,5	;RP0=1, select bank3
  1208  00B1  1703               	bsf	3,6	;RP1=1, select bank3
  1209  00B2  081E               	movf	??_main^(0+384),w
  1210  00B3  1383               	bcf	3,7	;select IRP bank0
  1211  00B4  0080               	movwf	0
  1212                           
  1213                           ;main.c: 171:                         car[i] = random;
  1214  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  1215  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  1216  00B7  0842               	movf	main@random,w
  1217  00B8  1683               	bsf	3,5	;RP0=1, select bank3
  1218  00B9  1703               	bsf	3,6	;RP1=1, select bank3
  1219  00BA  009E               	movwf	??_main^(0+384)
  1220  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  1221  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  1222  00BD  0847               	movf	main@i,w
  1223  00BE  3EE9               	addlw	(low (_car| 0))& (0+255)
  1224  00BF  0084               	movwf	4
  1225  00C0  1683               	bsf	3,5	;RP0=1, select bank3
  1226  00C1  1703               	bsf	3,6	;RP1=1, select bank3
  1227  00C2  081E               	movf	??_main^(0+384),w
  1228  00C3  0080               	movwf	0
  1229                           
  1230                           ;main.c: 172:                         truck[i] = random;
  1231  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1232  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1233  00C6  0842               	movf	main@random,w
  1234  00C7  1683               	bsf	3,5	;RP0=1, select bank3
  1235  00C8  1703               	bsf	3,6	;RP1=1, select bank3
  1236  00C9  009E               	movwf	??_main^(0+384)
  1237  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  1238  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  1239  00CC  0847               	movf	main@i,w
  1240  00CD  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1241  00CE  0084               	movwf	4
  1242  00CF  1683               	bsf	3,5	;RP0=1, select bank3
  1243  00D0  1703               	bsf	3,6	;RP1=1, select bank3
  1244  00D1  081E               	movf	??_main^(0+384),w
  1245  00D2  0080               	movwf	0
  1246  00D3  2A00               	goto	l4546
  1247  00D4                     l4536:	
  1248                           
  1249                           ;main.c: 178:                         sendByte(0x03, 0x01, motorcycle[i]);
  1250  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  1251  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  1252  00D6  01B8               	clrf	sendByte@byte1
  1253  00D7  0AB8               	incf	sendByte@byte1,f
  1254  00D8  0847               	movf	main@i,w
  1255  00D9  3E55               	addlw	(low (_motorcycle| 0))& (0+255)
  1256  00DA  0084               	movwf	4
  1257  00DB  1383               	bcf	3,7	;select IRP bank0
  1258  00DC  0800               	movf	0,w
  1259  00DD  1683               	bsf	3,5	;RP0=1, select bank3
  1260  00DE  1703               	bsf	3,6	;RP1=1, select bank3
  1261  00DF  009E               	movwf	??_main^(0+384)
  1262  00E0  081E               	movf	??_main^(0+384),w
  1263  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  1264  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  1265  00E3  00B9               	movwf	sendByte@valore
  1266  00E4  3003               	movlw	3
  1267  00E5  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1268                           
  1269                           ;main.c: 179:                         sendByte(0x03, 0x02, car[i]);
  1270  00EA  3002               	movlw	2
  1271  00EB  1683               	bsf	3,5	;RP0=1, select bank3
  1272  00EC  1703               	bsf	3,6	;RP1=1, select bank3
  1273  00ED  009E               	movwf	??_main^(0+384)
  1274  00EE  081E               	movf	??_main^(0+384),w
  1275  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1276  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1277  00F1  00B8               	movwf	sendByte@byte1
  1278  00F2  0847               	movf	main@i,w
  1279  00F3  3EE9               	addlw	(low (_car| 0))& (0+255)
  1280  00F4  0084               	movwf	4
  1281  00F5  1383               	bcf	3,7	;select IRP bank1
  1282  00F6  0800               	movf	0,w
  1283  00F7  1683               	bsf	3,5	;RP0=1, select bank3
  1284  00F8  1703               	bsf	3,6	;RP1=1, select bank3
  1285  00F9  009F               	movwf	(??_main+1)^(0+384)
  1286  00FA  081F               	movf	(??_main+1)^(0+384),w
  1287  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1288  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  1289  00FD  00B9               	movwf	sendByte@valore
  1290  00FE  3003               	movlw	3
  1291  00FF  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1292                           
  1293                           ;main.c: 180:                         sendByte(0x03, 0x03, truck[i]);
  1294  0104  3003               	movlw	3
  1295  0105  1683               	bsf	3,5	;RP0=1, select bank3
  1296  0106  1703               	bsf	3,6	;RP1=1, select bank3
  1297  0107  009E               	movwf	??_main^(0+384)
  1298  0108  081E               	movf	??_main^(0+384),w
  1299  0109  1283               	bcf	3,5	;RP0=0, select bank0
  1300  010A  1303               	bcf	3,6	;RP1=0, select bank0
  1301  010B  00B8               	movwf	sendByte@byte1
  1302  010C  0847               	movf	main@i,w
  1303  010D  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1304  010E  0084               	movwf	4
  1305  010F  1383               	bcf	3,7	;select IRP bank1
  1306  0110  0800               	movf	0,w
  1307  0111  1683               	bsf	3,5	;RP0=1, select bank3
  1308  0112  1703               	bsf	3,6	;RP1=1, select bank3
  1309  0113  009F               	movwf	(??_main+1)^(0+384)
  1310  0114  081F               	movf	(??_main+1)^(0+384),w
  1311  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1312  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1313  0117  00B9               	movwf	sendByte@valore
  1314  0118  3003               	movlw	3
  1315  0119  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1316                           
  1317                           ;main.c: 181:                         break;
  1318  011E  2A1A               	goto	l4548
  1319  011F                     l4538:	
  1320                           
  1321                           ;main.c: 183:                         sendByte(0x05, 0x01, motorcycle[i]);
  1322  011F  1283               	bcf	3,5	;RP0=0, select bank0
  1323  0120  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0121  01B8               	clrf	sendByte@byte1
  1325  0122  0AB8               	incf	sendByte@byte1,f
  1326  0123  0847               	movf	main@i,w
  1327  0124  3E55               	addlw	(low (_motorcycle| 0))& (0+255)
  1328  0125  0084               	movwf	4
  1329  0126  1383               	bcf	3,7	;select IRP bank0
  1330  0127  0800               	movf	0,w
  1331  0128  1683               	bsf	3,5	;RP0=1, select bank3
  1332  0129  1703               	bsf	3,6	;RP1=1, select bank3
  1333  012A  009E               	movwf	??_main^(0+384)
  1334  012B  081E               	movf	??_main^(0+384),w
  1335  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1336  012D  1303               	bcf	3,6	;RP1=0, select bank0
  1337  012E  00B9               	movwf	sendByte@valore
  1338  012F  3005               	movlw	5
  1339  0130  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1340                           
  1341                           ;main.c: 184:                         sendByte(0x05, 0x02, car[i]);
  1342  0135  3002               	movlw	2
  1343  0136  1683               	bsf	3,5	;RP0=1, select bank3
  1344  0137  1703               	bsf	3,6	;RP1=1, select bank3
  1345  0138  009E               	movwf	??_main^(0+384)
  1346  0139  081E               	movf	??_main^(0+384),w
  1347  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1348  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1349  013C  00B8               	movwf	sendByte@byte1
  1350  013D  0847               	movf	main@i,w
  1351  013E  3EE9               	addlw	(low (_car| 0))& (0+255)
  1352  013F  0084               	movwf	4
  1353  0140  1383               	bcf	3,7	;select IRP bank1
  1354  0141  0800               	movf	0,w
  1355  0142  1683               	bsf	3,5	;RP0=1, select bank3
  1356  0143  1703               	bsf	3,6	;RP1=1, select bank3
  1357  0144  009F               	movwf	(??_main+1)^(0+384)
  1358  0145  081F               	movf	(??_main+1)^(0+384),w
  1359  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1360  0147  1303               	bcf	3,6	;RP1=0, select bank0
  1361  0148  00B9               	movwf	sendByte@valore
  1362  0149  3005               	movlw	5
  1363  014A  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1364                           
  1365                           ;main.c: 185:                         sendByte(0x05, 0x03, truck[i]);
  1366  014F  3003               	movlw	3
  1367  0150  1683               	bsf	3,5	;RP0=1, select bank3
  1368  0151  1703               	bsf	3,6	;RP1=1, select bank3
  1369  0152  009E               	movwf	??_main^(0+384)
  1370  0153  081E               	movf	??_main^(0+384),w
  1371  0154  1283               	bcf	3,5	;RP0=0, select bank0
  1372  0155  1303               	bcf	3,6	;RP1=0, select bank0
  1373  0156  00B8               	movwf	sendByte@byte1
  1374  0157  0847               	movf	main@i,w
  1375  0158  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1376  0159  0084               	movwf	4
  1377  015A  1383               	bcf	3,7	;select IRP bank1
  1378  015B  0800               	movf	0,w
  1379  015C  1683               	bsf	3,5	;RP0=1, select bank3
  1380  015D  1703               	bsf	3,6	;RP1=1, select bank3
  1381  015E  009F               	movwf	(??_main+1)^(0+384)
  1382  015F  081F               	movf	(??_main+1)^(0+384),w
  1383  0160  1283               	bcf	3,5	;RP0=0, select bank0
  1384  0161  1303               	bcf	3,6	;RP1=0, select bank0
  1385  0162  00B9               	movwf	sendByte@valore
  1386  0163  3005               	movlw	5
  1387  0164  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1388                           
  1389                           ;main.c: 186:                         break;
  1390  0169  2A1A               	goto	l4548
  1391  016A                     l4540:	
  1392                           
  1393                           ;main.c: 188:                         sendByte(0x07, 0x01, motorcycle[i]);
  1394  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1395  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1396  016C  01B8               	clrf	sendByte@byte1
  1397  016D  0AB8               	incf	sendByte@byte1,f
  1398  016E  0847               	movf	main@i,w
  1399  016F  3E55               	addlw	(low (_motorcycle| 0))& (0+255)
  1400  0170  0084               	movwf	4
  1401  0171  1383               	bcf	3,7	;select IRP bank0
  1402  0172  0800               	movf	0,w
  1403  0173  1683               	bsf	3,5	;RP0=1, select bank3
  1404  0174  1703               	bsf	3,6	;RP1=1, select bank3
  1405  0175  009E               	movwf	??_main^(0+384)
  1406  0176  081E               	movf	??_main^(0+384),w
  1407  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1408  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1409  0179  00B9               	movwf	sendByte@valore
  1410  017A  3007               	movlw	7
  1411  017B  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1412                           
  1413                           ;main.c: 189:                         sendByte(0x07, 0x02, car[i]);
  1414  0180  3002               	movlw	2
  1415  0181  1683               	bsf	3,5	;RP0=1, select bank3
  1416  0182  1703               	bsf	3,6	;RP1=1, select bank3
  1417  0183  009E               	movwf	??_main^(0+384)
  1418  0184  081E               	movf	??_main^(0+384),w
  1419  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1420  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1421  0187  00B8               	movwf	sendByte@byte1
  1422  0188  0847               	movf	main@i,w
  1423  0189  3EE9               	addlw	(low (_car| 0))& (0+255)
  1424  018A  0084               	movwf	4
  1425  018B  1383               	bcf	3,7	;select IRP bank1
  1426  018C  0800               	movf	0,w
  1427  018D  1683               	bsf	3,5	;RP0=1, select bank3
  1428  018E  1703               	bsf	3,6	;RP1=1, select bank3
  1429  018F  009F               	movwf	(??_main+1)^(0+384)
  1430  0190  081F               	movf	(??_main+1)^(0+384),w
  1431  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1432  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1433  0193  00B9               	movwf	sendByte@valore
  1434  0194  3007               	movlw	7
  1435  0195  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1436                           
  1437                           ;main.c: 190:                         sendByte(0x07, 0x03, truck[i]);
  1438  019A  3003               	movlw	3
  1439  019B  1683               	bsf	3,5	;RP0=1, select bank3
  1440  019C  1703               	bsf	3,6	;RP1=1, select bank3
  1441  019D  009E               	movwf	??_main^(0+384)
  1442  019E  081E               	movf	??_main^(0+384),w
  1443  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1444  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1445  01A1  00B8               	movwf	sendByte@byte1
  1446  01A2  0847               	movf	main@i,w
  1447  01A3  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1448  01A4  0084               	movwf	4
  1449  01A5  1383               	bcf	3,7	;select IRP bank1
  1450  01A6  0800               	movf	0,w
  1451  01A7  1683               	bsf	3,5	;RP0=1, select bank3
  1452  01A8  1703               	bsf	3,6	;RP1=1, select bank3
  1453  01A9  009F               	movwf	(??_main+1)^(0+384)
  1454  01AA  081F               	movf	(??_main+1)^(0+384),w
  1455  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1456  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1457  01AD  00B9               	movwf	sendByte@valore
  1458  01AE  3007               	movlw	7
  1459  01AF  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1460                           
  1461                           ;main.c: 191:                         break;
  1462  01B4  2A1A               	goto	l4548
  1463  01B5                     l4542:	
  1464                           
  1465                           ;main.c: 193:                         sendByte(0x09, 0x01, motorcycle[i]);
  1466  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1467  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1468  01B7  01B8               	clrf	sendByte@byte1
  1469  01B8  0AB8               	incf	sendByte@byte1,f
  1470  01B9  0847               	movf	main@i,w
  1471  01BA  3E55               	addlw	(low (_motorcycle| 0))& (0+255)
  1472  01BB  0084               	movwf	4
  1473  01BC  1383               	bcf	3,7	;select IRP bank0
  1474  01BD  0800               	movf	0,w
  1475  01BE  1683               	bsf	3,5	;RP0=1, select bank3
  1476  01BF  1703               	bsf	3,6	;RP1=1, select bank3
  1477  01C0  009E               	movwf	??_main^(0+384)
  1478  01C1  081E               	movf	??_main^(0+384),w
  1479  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1480  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  1481  01C4  00B9               	movwf	sendByte@valore
  1482  01C5  3009               	movlw	9
  1483  01C6  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1484                           
  1485                           ;main.c: 194:                         sendByte(0x09, 0x02, car[i]);
  1486  01CB  3002               	movlw	2
  1487  01CC  1683               	bsf	3,5	;RP0=1, select bank3
  1488  01CD  1703               	bsf	3,6	;RP1=1, select bank3
  1489  01CE  009E               	movwf	??_main^(0+384)
  1490  01CF  081E               	movf	??_main^(0+384),w
  1491  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1492  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1493  01D2  00B8               	movwf	sendByte@byte1
  1494  01D3  0847               	movf	main@i,w
  1495  01D4  3EE9               	addlw	(low (_car| 0))& (0+255)
  1496  01D5  0084               	movwf	4
  1497  01D6  1383               	bcf	3,7	;select IRP bank1
  1498  01D7  0800               	movf	0,w
  1499  01D8  1683               	bsf	3,5	;RP0=1, select bank3
  1500  01D9  1703               	bsf	3,6	;RP1=1, select bank3
  1501  01DA  009F               	movwf	(??_main+1)^(0+384)
  1502  01DB  081F               	movf	(??_main+1)^(0+384),w
  1503  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1504  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1505  01DE  00B9               	movwf	sendByte@valore
  1506  01DF  3009               	movlw	9
  1507  01E0  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1508                           
  1509                           ;main.c: 195:                         sendByte(0x09, 0x03, truck[i]);
  1510  01E5  3003               	movlw	3
  1511  01E6  1683               	bsf	3,5	;RP0=1, select bank3
  1512  01E7  1703               	bsf	3,6	;RP1=1, select bank3
  1513  01E8  009E               	movwf	??_main^(0+384)
  1514  01E9  081E               	movf	??_main^(0+384),w
  1515  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1516  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1517  01EC  00B8               	movwf	sendByte@byte1
  1518  01ED  0847               	movf	main@i,w
  1519  01EE  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1520  01EF  0084               	movwf	4
  1521  01F0  1383               	bcf	3,7	;select IRP bank1
  1522  01F1  0800               	movf	0,w
  1523  01F2  1683               	bsf	3,5	;RP0=1, select bank3
  1524  01F3  1703               	bsf	3,6	;RP1=1, select bank3
  1525  01F4  009F               	movwf	(??_main+1)^(0+384)
  1526  01F5  081F               	movf	(??_main+1)^(0+384),w
  1527  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  1528  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  1529  01F8  00B9               	movwf	sendByte@valore
  1530  01F9  3009               	movlw	9
  1531  01FA  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1532                           
  1533                           ;main.c: 196:                         break;
  1534  01FF  2A1A               	goto	l4548
  1535  0200                     l4546:	
  1536  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1537  0201  1303               	bcf	3,6	;RP1=0, select bank0
  1538  0202  0847               	movf	main@i,w
  1539  0203  1683               	bsf	3,5	;RP0=1, select bank3
  1540  0204  1703               	bsf	3,6	;RP1=1, select bank3
  1541  0205  009E               	movwf	??_main^(0+384)
  1542  0206  019F               	clrf	(??_main^(0+384)+1)
  1543                           
  1544                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1545                           ; Switch size 1, requested type "simple"
  1546                           ; Number of cases is 1, Range of values is 0 to 0
  1547                           ; switch strategies available:
  1548                           ; Name         Instructions Cycles
  1549                           ; simple_byte            4     3 (average)
  1550                           ; direct_byte           11     8 (fixed)
  1551                           ; jumptable            260     6 (fixed)
  1552                           ;	Chosen strategy is simple_byte
  1553  0207  081F               	movf	(??_main+1)^(0+384),w
  1554  0208  3A00               	xorlw	0	; case 0
  1555  0209  1903               	skipnz
  1556  020A  2A0C               	goto	l4876
  1557  020B  2A1A               	goto	l4548
  1558  020C                     l4876:	
  1559                           
  1560                           ; Switch size 1, requested type "simple"
  1561                           ; Number of cases is 4, Range of values is 0 to 3
  1562                           ; switch strategies available:
  1563                           ; Name         Instructions Cycles
  1564                           ; simple_byte           13     7 (average)
  1565                           ; direct_byte           20     8 (fixed)
  1566                           ; jumptable            260     6 (fixed)
  1567                           ;	Chosen strategy is simple_byte
  1568  020C  081E               	movf	??_main^(0+384),w
  1569  020D  3A00               	xorlw	0	; case 0
  1570  020E  1903               	skipnz
  1571  020F  28D4               	goto	l4536
  1572  0210  3A01               	xorlw	1	; case 1
  1573  0211  1903               	skipnz
  1574  0212  291F               	goto	l4538
  1575  0213  3A03               	xorlw	3	; case 2
  1576  0214  1903               	skipnz
  1577  0215  296A               	goto	l4540
  1578  0216  3A01               	xorlw	1	; case 3
  1579  0217  1903               	skipnz
  1580  0218  29B5               	goto	l4542
  1581  0219  2A1A               	goto	l4548
  1582  021A                     l4548:	
  1583                           
  1584                           ;main.c: 198:                 }
  1585  021A  3001               	movlw	1
  1586  021B  1683               	bsf	3,5	;RP0=1, select bank3
  1587  021C  1703               	bsf	3,6	;RP1=1, select bank3
  1588  021D  009E               	movwf	??_main^(0+384)
  1589  021E  081E               	movf	??_main^(0+384),w
  1590  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0220  1303               	bcf	3,6	;RP1=0, select bank0
  1592  0221  07C7               	addwf	main@i,f
  1593  0222                     l4550:	
  1594  0222  3004               	movlw	4
  1595  0223  0247               	subwf	main@i,w
  1596  0224  1C03               	skipc
  1597  0225  2A27               	goto	u4411
  1598  0226  2A28               	goto	u4410
  1599  0227                     u4411:	
  1600  0227  2893               	goto	l4530
  1601  0228                     u4410:	
  1602  0228                     l4552:	
  1603                           
  1604                           ;main.c: 200:                 for (int i = 0; i < 4; i++)
  1605  0228  01C3               	clrf	main@i_487
  1606  0229  01C4               	clrf	main@i_487+1
  1607  022A                     l4558:	
  1608                           
  1609                           ;main.c: 201:                 {;main.c: 202:                     motorcycle[i] = 0;
  1610  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1611  022B  1303               	bcf	3,6	;RP1=0, select bank0
  1612  022C  0843               	movf	main@i_487,w
  1613  022D  3E55               	addlw	(low (_motorcycle| 0))& (0+255)
  1614  022E  0084               	movwf	4
  1615  022F  1383               	bcf	3,7	;select IRP bank0
  1616  0230  0180               	clrf	0
  1617                           
  1618                           ;main.c: 203:                     car[i] = 0;
  1619  0231  0843               	movf	main@i_487,w
  1620  0232  3EE9               	addlw	(low (_car| 0))& (0+255)
  1621  0233  0084               	movwf	4
  1622  0234  0180               	clrf	0
  1623                           
  1624                           ;main.c: 204:                     truck[i] = 0;
  1625  0235  0843               	movf	main@i_487,w
  1626  0236  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1627  0237  0084               	movwf	4
  1628  0238  0180               	clrf	0
  1629  0239                     l4560:	
  1630                           
  1631                           ;main.c: 205:                 }
  1632  0239  3001               	movlw	1
  1633  023A  07C3               	addwf	main@i_487,f
  1634  023B  1803               	skipnc
  1635  023C  0AC4               	incf	main@i_487+1,f
  1636  023D  3000               	movlw	0
  1637  023E  07C4               	addwf	main@i_487+1,f
  1638  023F                     l4562:	
  1639  023F  0844               	movf	main@i_487+1,w
  1640  0240  3A80               	xorlw	128
  1641  0241  00FF               	movwf	btemp+1
  1642  0242  3080               	movlw	128
  1643  0243  027F               	subwf	btemp+1,w
  1644  0244  1D03               	skipz
  1645  0245  2A48               	goto	u4425
  1646  0246  3004               	movlw	4
  1647  0247  0243               	subwf	main@i_487,w
  1648  0248                     u4425:	
  1649  0248  1C03               	skipc
  1650  0249  2A4B               	goto	u4421
  1651  024A  2A4C               	goto	u4420
  1652  024B                     u4421:	
  1653  024B  2A2A               	goto	l4558
  1654  024C                     u4420:	
  1655  024C                     l4564:	
  1656                           
  1657                           ;main.c: 207:                 for (unsigned char i = 0; i < 5; i++)
  1658  024C  1283               	bcf	3,5	;RP0=0, select bank0
  1659  024D  1303               	bcf	3,6	;RP1=0, select bank0
  1660  024E  01C0               	clrf	main@i_488
  1661  024F                     l4570:	
  1662                           
  1663                           ;main.c: 208:                 {;main.c: 209:                     dataFromGateway[i] = 0;
  1664  024F  0840               	movf	main@i_488,w
  1665  0250  3EAC               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1666  0251  0084               	movwf	4
  1667  0252  1383               	bcf	3,7	;select IRP bank1
  1668  0253  0180               	clrf	0
  1669  0254                     l4572:	
  1670                           
  1671                           ;main.c: 210:                 }
  1672  0254  3001               	movlw	1
  1673  0255  1683               	bsf	3,5	;RP0=1, select bank3
  1674  0256  1703               	bsf	3,6	;RP1=1, select bank3
  1675  0257  009E               	movwf	??_main^(0+384)
  1676  0258  081E               	movf	??_main^(0+384),w
  1677  0259  1283               	bcf	3,5	;RP0=0, select bank0
  1678  025A  1303               	bcf	3,6	;RP1=0, select bank0
  1679  025B  07C0               	addwf	main@i_488,f
  1680  025C                     l4574:	
  1681  025C  3005               	movlw	5
  1682  025D  0240               	subwf	main@i_488,w
  1683  025E  1C03               	skipc
  1684  025F  2A61               	goto	u4431
  1685  0260  2A62               	goto	u4430
  1686  0261                     u4431:	
  1687  0261  2A4F               	goto	l4570
  1688  0262                     u4430:	
  1689  0262  2B98               	goto	l238
  1690  0263                     l255:	
  1691                           ;main.c: 212:             case 0x0A:
  1692                           
  1693                           
  1694                           ;main.c: 213:                 readGatewayDone.Bit = 1;
  1695  0263  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0264  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0265  1454               	bsf	_readGatewayDone,0
  1698                           
  1699                           ;main.c: 214:                 readGateway.Bit = 0;
  1700  0266  1053               	bcf	_readGateway,0
  1701  0267                     l4576:	
  1702                           
  1703                           ;main.c: 216:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1704  0267  3000               	movlw	0
  1705  0268  120A  158A  2073  120A  118A  	fcall	_ADC_Read
  1706  026D  1283               	bcf	3,5	;RP0=0, select bank0
  1707  026E  1303               	bcf	3,6	;RP1=0, select bank0
  1708  026F  0824               	movf	?_ADC_Read,w
  1709  0270  1683               	bsf	3,5	;RP0=1, select bank3
  1710  0271  1703               	bsf	3,6	;RP1=1, select bank3
  1711  0272  009E               	movwf	??_main^(0+384)
  1712  0273  1283               	bcf	3,5	;RP0=0, select bank0
  1713  0274  1303               	bcf	3,6	;RP1=0, select bank0
  1714  0275  0825               	movf	?_ADC_Read+1,w
  1715  0276  1683               	bsf	3,5	;RP0=1, select bank3
  1716  0277  1703               	bsf	3,6	;RP1=1, select bank3
  1717  0278  009F               	movwf	(??_main^(0+384)+1)
  1718  0279  0D1F               	rlf	(??_main^(0+384)+1),w
  1719  027A  0C9F               	rrf	(??_main^(0+384)+1),f
  1720  027B  0C9E               	rrf	??_main^(0+384),f
  1721  027C  0D1F               	rlf	(??_main^(0+384)+1),w
  1722  027D  0C9F               	rrf	(??_main^(0+384)+1),f
  1723  027E  0C9E               	rrf	??_main^(0+384),f
  1724  027F  081E               	movf	??_main^(0+384),w
  1725  0280  1283               	bcf	3,5	;RP0=0, select bank0
  1726  0281  1303               	bcf	3,6	;RP1=0, select bank0
  1727  0282  00B4               	movwf	map@x
  1728  0283  1683               	bsf	3,5	;RP0=1, select bank3
  1729  0284  1703               	bsf	3,6	;RP1=1, select bank3
  1730  0285  081F               	movf	(??_main+1)^(0+384),w
  1731  0286  1283               	bcf	3,5	;RP0=0, select bank0
  1732  0287  1303               	bcf	3,6	;RP1=0, select bank0
  1733  0288  00B5               	movwf	map@x+1
  1734  0289  3000               	movlw	0
  1735  028A  00B6               	movwf	map@in_min
  1736  028B  00B7               	movwf	map@in_min+1
  1737  028C  30FF               	movlw	255
  1738  028D  00B8               	movwf	map@in_max
  1739  028E  3000               	movlw	0
  1740  028F  00B9               	movwf	map@in_max+1
  1741  0290  30EC               	movlw	236
  1742  0291  00BA               	movwf	map@out_min
  1743  0292  30FF               	movlw	255
  1744  0293  00BB               	movwf	map@out_min+1
  1745  0294  303C               	movlw	60
  1746  0295  00BC               	movwf	map@out_max
  1747  0296  3000               	movlw	0
  1748  0297  00BD               	movwf	map@out_max+1
  1749  0298  120A  158A  2122  120A  118A  	fcall	_map
  1750  029D  1283               	bcf	3,5	;RP0=0, select bank0
  1751  029E  1303               	bcf	3,6	;RP1=0, select bank0
  1752  029F  0834               	movf	?_map,w
  1753  02A0  1683               	bsf	3,5	;RP0=1, select bank3
  1754  02A1  1703               	bsf	3,6	;RP1=1, select bank3
  1755  02A2  00A0               	movwf	(??_main+2)^(0+384)
  1756  02A3  0820               	movf	(??_main+2)^(0+384),w
  1757  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  1758  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  1759  02A6  00CC               	movwf	_temp
  1760                           
  1761                           ;main.c: 217:                 umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  1762  02A7  3001               	movlw	1
  1763  02A8  120A  158A  2073  120A  118A  	fcall	_ADC_Read
  1764  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  1765  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  1766  02AF  0824               	movf	?_ADC_Read,w
  1767  02B0  1683               	bsf	3,5	;RP0=1, select bank3
  1768  02B1  1703               	bsf	3,6	;RP1=1, select bank3
  1769  02B2  009E               	movwf	??_main^(0+384)
  1770  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  1771  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  1772  02B5  0825               	movf	?_ADC_Read+1,w
  1773  02B6  1683               	bsf	3,5	;RP0=1, select bank3
  1774  02B7  1703               	bsf	3,6	;RP1=1, select bank3
  1775  02B8  009F               	movwf	(??_main^(0+384)+1)
  1776  02B9  0D1F               	rlf	(??_main^(0+384)+1),w
  1777  02BA  0C9F               	rrf	(??_main^(0+384)+1),f
  1778  02BB  0C9E               	rrf	??_main^(0+384),f
  1779  02BC  0D1F               	rlf	(??_main^(0+384)+1),w
  1780  02BD  0C9F               	rrf	(??_main^(0+384)+1),f
  1781  02BE  0C9E               	rrf	??_main^(0+384),f
  1782  02BF  081E               	movf	??_main^(0+384),w
  1783  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  1784  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  1785  02C2  00B4               	movwf	map@x
  1786  02C3  1683               	bsf	3,5	;RP0=1, select bank3
  1787  02C4  1703               	bsf	3,6	;RP1=1, select bank3
  1788  02C5  081F               	movf	(??_main+1)^(0+384),w
  1789  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  1790  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  1791  02C8  00B5               	movwf	map@x+1
  1792  02C9  3000               	movlw	0
  1793  02CA  00B6               	movwf	map@in_min
  1794  02CB  00B7               	movwf	map@in_min+1
  1795  02CC  30FF               	movlw	255
  1796  02CD  00B8               	movwf	map@in_max
  1797  02CE  3000               	movlw	0
  1798  02CF  00B9               	movwf	map@in_max+1
  1799  02D0  3000               	movlw	0
  1800  02D1  00BA               	movwf	map@out_min
  1801  02D2  00BB               	movwf	map@out_min+1
  1802  02D3  3064               	movlw	100
  1803  02D4  00BC               	movwf	map@out_max
  1804  02D5  3000               	movlw	0
  1805  02D6  00BD               	movwf	map@out_max+1
  1806  02D7  120A  158A  2122  120A  118A  	fcall	_map
  1807  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  1808  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  1809  02DE  0834               	movf	?_map,w
  1810  02DF  1683               	bsf	3,5	;RP0=1, select bank3
  1811  02E0  1703               	bsf	3,6	;RP1=1, select bank3
  1812  02E1  00A0               	movwf	(??_main+2)^(0+384)
  1813  02E2  0820               	movf	(??_main+2)^(0+384),w
  1814  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  1815  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  1816  02E5  00CB               	movwf	_umidita
  1817                           
  1818                           ;main.c: 218:                 pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  1819  02E6  3005               	movlw	5
  1820  02E7  120A  158A  2073  120A  118A  	fcall	_ADC_Read
  1821  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  1822  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  1823  02EE  0824               	movf	?_ADC_Read,w
  1824  02EF  1683               	bsf	3,5	;RP0=1, select bank3
  1825  02F0  1703               	bsf	3,6	;RP1=1, select bank3
  1826  02F1  009E               	movwf	??_main^(0+384)
  1827  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  1828  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  1829  02F4  0825               	movf	?_ADC_Read+1,w
  1830  02F5  1683               	bsf	3,5	;RP0=1, select bank3
  1831  02F6  1703               	bsf	3,6	;RP1=1, select bank3
  1832  02F7  009F               	movwf	(??_main^(0+384)+1)
  1833  02F8  0D1F               	rlf	(??_main^(0+384)+1),w
  1834  02F9  0C9F               	rrf	(??_main^(0+384)+1),f
  1835  02FA  0C9E               	rrf	??_main^(0+384),f
  1836  02FB  0D1F               	rlf	(??_main^(0+384)+1),w
  1837  02FC  0C9F               	rrf	(??_main^(0+384)+1),f
  1838  02FD  0C9E               	rrf	??_main^(0+384),f
  1839  02FE  081E               	movf	??_main^(0+384),w
  1840  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  1841  0300  1303               	bcf	3,6	;RP1=0, select bank0
  1842  0301  00B4               	movwf	map@x
  1843  0302  1683               	bsf	3,5	;RP0=1, select bank3
  1844  0303  1703               	bsf	3,6	;RP1=1, select bank3
  1845  0304  081F               	movf	(??_main+1)^(0+384),w
  1846  0305  1283               	bcf	3,5	;RP0=0, select bank0
  1847  0306  1303               	bcf	3,6	;RP1=0, select bank0
  1848  0307  00B5               	movwf	map@x+1
  1849  0308  3000               	movlw	0
  1850  0309  00B6               	movwf	map@in_min
  1851  030A  00B7               	movwf	map@in_min+1
  1852  030B  30FF               	movlw	255
  1853  030C  00B8               	movwf	map@in_max
  1854  030D  3000               	movlw	0
  1855  030E  00B9               	movwf	map@in_max+1
  1856  030F  3000               	movlw	0
  1857  0310  00BA               	movwf	map@out_min
  1858  0311  00BB               	movwf	map@out_min+1
  1859  0312  3064               	movlw	100
  1860  0313  00BC               	movwf	map@out_max
  1861  0314  3000               	movlw	0
  1862  0315  00BD               	movwf	map@out_max+1
  1863  0316  120A  158A  2122  120A  118A  	fcall	_map
  1864  031B  1283               	bcf	3,5	;RP0=0, select bank0
  1865  031C  1303               	bcf	3,6	;RP1=0, select bank0
  1866  031D  0834               	movf	?_map,w
  1867  031E  1683               	bsf	3,5	;RP0=1, select bank3
  1868  031F  1703               	bsf	3,6	;RP1=1, select bank3
  1869  0320  00A0               	movwf	(??_main+2)^(0+384)
  1870  0321  0820               	movf	(??_main+2)^(0+384),w
  1871  0322  1283               	bcf	3,5	;RP0=0, select bank0
  1872  0323  1303               	bcf	3,6	;RP1=0, select bank0
  1873  0324  00CA               	movwf	_pressione
  1874  0325                     l4578:	
  1875                           
  1876                           ;main.c: 219:                 sendByte(0x02, 0x00, temp);
  1877  0325  01B8               	clrf	sendByte@byte1
  1878  0326  084C               	movf	_temp,w
  1879  0327  1683               	bsf	3,5	;RP0=1, select bank3
  1880  0328  1703               	bsf	3,6	;RP1=1, select bank3
  1881  0329  009E               	movwf	??_main^(0+384)
  1882  032A  081E               	movf	??_main^(0+384),w
  1883  032B  1283               	bcf	3,5	;RP0=0, select bank0
  1884  032C  1303               	bcf	3,6	;RP1=0, select bank0
  1885  032D  00B9               	movwf	sendByte@valore
  1886  032E  3002               	movlw	2
  1887  032F  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1888  0334                     l4580:	
  1889                           
  1890                           ;main.c: 220:                 sendByte(0x04, 0x00, umidita);
  1891  0334  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0335  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0336  01B8               	clrf	sendByte@byte1
  1894  0337  084B               	movf	_umidita,w
  1895  0338  1683               	bsf	3,5	;RP0=1, select bank3
  1896  0339  1703               	bsf	3,6	;RP1=1, select bank3
  1897  033A  009E               	movwf	??_main^(0+384)
  1898  033B  081E               	movf	??_main^(0+384),w
  1899  033C  1283               	bcf	3,5	;RP0=0, select bank0
  1900  033D  1303               	bcf	3,6	;RP1=0, select bank0
  1901  033E  00B9               	movwf	sendByte@valore
  1902  033F  3004               	movlw	4
  1903  0340  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1904  0345                     l4582:	
  1905                           
  1906                           ;main.c: 221:                 sendByte(0x06, 0x00, pressione);
  1907  0345  1283               	bcf	3,5	;RP0=0, select bank0
  1908  0346  1303               	bcf	3,6	;RP1=0, select bank0
  1909  0347  01B8               	clrf	sendByte@byte1
  1910  0348  084A               	movf	_pressione,w
  1911  0349  1683               	bsf	3,5	;RP0=1, select bank3
  1912  034A  1703               	bsf	3,6	;RP1=1, select bank3
  1913  034B  009E               	movwf	??_main^(0+384)
  1914  034C  081E               	movf	??_main^(0+384),w
  1915  034D  1283               	bcf	3,5	;RP0=0, select bank0
  1916  034E  1303               	bcf	3,6	;RP1=0, select bank0
  1917  034F  00B9               	movwf	sendByte@valore
  1918  0350  3006               	movlw	6
  1919  0351  120A  158A  20F1  120A  118A  	fcall	_sendByte
  1920  0356                     l4584:	
  1921                           
  1922                           ;main.c: 223:                 for (unsigned char i = 0; i < 5; i++)
  1923  0356  1283               	bcf	3,5	;RP0=0, select bank0
  1924  0357  1303               	bcf	3,6	;RP1=0, select bank0
  1925  0358  01C1               	clrf	main@i_490
  1926  0359                     l4586:	
  1927  0359  3005               	movlw	5
  1928  035A  0241               	subwf	main@i_490,w
  1929  035B  1C03               	skipc
  1930  035C  2B5E               	goto	u4441
  1931  035D  2B5F               	goto	u4440
  1932  035E                     u4441:	
  1933  035E  2B60               	goto	l4590
  1934  035F                     u4440:	
  1935  035F  2B98               	goto	l238
  1936  0360                     l4590:	
  1937                           
  1938                           ;main.c: 224:                 {;main.c: 225:                     dataFromGateway[i] = 0;
  1939  0360  0841               	movf	main@i_490,w
  1940  0361  3EAC               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1941  0362  0084               	movwf	4
  1942  0363  1383               	bcf	3,7	;select IRP bank1
  1943  0364  0180               	clrf	0
  1944  0365                     l4592:	
  1945                           
  1946                           ;main.c: 226:                 }
  1947  0365  3001               	movlw	1
  1948  0366  1683               	bsf	3,5	;RP0=1, select bank3
  1949  0367  1703               	bsf	3,6	;RP1=1, select bank3
  1950  0368  009E               	movwf	??_main^(0+384)
  1951  0369  081E               	movf	??_main^(0+384),w
  1952  036A  1283               	bcf	3,5	;RP0=0, select bank0
  1953  036B  1303               	bcf	3,6	;RP1=0, select bank0
  1954  036C  07C1               	addwf	main@i_490,f
  1955  036D  2B59               	goto	l4586
  1956  036E                     l4596:	
  1957                           
  1958                           ;main.c: 230:                 if (timerReadFromGateway >= 4)
  1959  036E  3004               	movlw	4
  1960  036F  1283               	bcf	3,5	;RP0=0, select bank0
  1961  0370  1303               	bcf	3,6	;RP1=0, select bank0
  1962  0371  024D               	subwf	_timerReadFromGateway,w
  1963  0372  1C03               	skipc
  1964  0373  2B75               	goto	u4451
  1965  0374  2B76               	goto	u4450
  1966  0375                     u4451:	
  1967  0375  2B79               	goto	l4600
  1968  0376                     u4450:	
  1969  0376                     l4598:	
  1970                           
  1971                           ;main.c: 231:                 {;main.c: 232:                     readGatewayDone.Bit = 1
      +                          ;
  1972  0376  1454               	bsf	_readGatewayDone,0
  1973                           
  1974                           ;main.c: 233:                     readGatewayDone.Timeout = 1;
  1975  0377  14D4               	bsf	_readGatewayDone,1
  1976                           
  1977                           ;main.c: 234:                     readGateway.Bit = 0;
  1978  0378  1053               	bcf	_readGateway,0
  1979  0379                     l4600:	
  1980                           
  1981                           ;main.c: 237:                 if (dataFromGatewayIndex >= 15)
  1982  0379  300F               	movlw	15
  1983  037A  024E               	subwf	_dataFromGatewayIndex,w
  1984  037B  1C03               	skipc
  1985  037C  2B7E               	goto	u4461
  1986  037D  2B7F               	goto	u4460
  1987  037E                     u4461:	
  1988  037E  2B98               	goto	l238
  1989  037F                     u4460:	
  1990  037F                     l4602:	
  1991                           
  1992                           ;main.c: 238:                 {;main.c: 239:                     readGatewayDone.Bit = 1
      +                          ;
  1993  037F  1454               	bsf	_readGatewayDone,0
  1994                           
  1995                           ;main.c: 240:                     readGatewayDone.Timeout = 0;
  1996  0380  10D4               	bcf	_readGatewayDone,1
  1997                           
  1998                           ;main.c: 241:                     readGateway.Bit = 0;
  1999  0381  1053               	bcf	_readGateway,0
  2000  0382  2B98               	goto	l238
  2001  0383                     l4606:	
  2002  0383  1683               	bsf	3,5	;RP0=1, select bank1
  2003  0384  1303               	bcf	3,6	;RP1=0, select bank1
  2004  0385  082C               	movf	_dataFromGateway^(0+128),w
  2005  0386  397F               	andlw	127
  2006  0387  1683               	bsf	3,5	;RP0=1, select bank3
  2007  0388  1703               	bsf	3,6	;RP1=1, select bank3
  2008  0389  009E               	movwf	??_main^(0+384)
  2009  038A  019F               	clrf	(??_main^(0+384)+1)
  2010                           
  2011                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2012                           ; Switch size 1, requested type "simple"
  2013                           ; Number of cases is 1, Range of values is 0 to 0
  2014                           ; switch strategies available:
  2015                           ; Name         Instructions Cycles
  2016                           ; simple_byte            4     3 (average)
  2017                           ; direct_byte           11     8 (fixed)
  2018                           ; jumptable            260     6 (fixed)
  2019                           ;	Chosen strategy is simple_byte
  2020  038B  081F               	movf	(??_main+1)^(0+384),w
  2021  038C  3A00               	xorlw	0	; case 0
  2022  038D  1903               	skipnz
  2023  038E  2B90               	goto	l4878
  2024  038F  2B6E               	goto	l4596
  2025  0390                     l4878:	
  2026                           
  2027                           ; Switch size 1, requested type "simple"
  2028                           ; Number of cases is 2, Range of values is 8 to 10
  2029                           ; switch strategies available:
  2030                           ; Name         Instructions Cycles
  2031                           ; simple_byte            7     4 (average)
  2032                           ; direct_byte           20    11 (fixed)
  2033                           ; jumptable            263     9 (fixed)
  2034                           ;	Chosen strategy is simple_byte
  2035  0390  081E               	movf	??_main^(0+384),w
  2036  0391  3A08               	xorlw	8	; case 8
  2037  0392  1903               	skipnz
  2038  0393  288E               	goto	l240
  2039  0394  3A02               	xorlw	2	; case 10
  2040  0395  1903               	skipnz
  2041  0396  2A63               	goto	l255
  2042  0397  2B6E               	goto	l4596
  2043  0398                     l238:	
  2044                           ;main.c: 245:         }
  2045                           
  2046                           
  2047                           ;main.c: 248:         if (readGatewayDone.Bit)
  2048  0398  1C54               	btfss	_readGatewayDone,0
  2049  0399  2B9B               	goto	u4471
  2050  039A  2B9C               	goto	u4470
  2051  039B                     u4471:	
  2052  039B  2BBA               	goto	l4620
  2053  039C                     u4470:	
  2054  039C                     l4608:	
  2055                           
  2056                           ;main.c: 249:         {;main.c: 251:             readGateway.Bit = 0;
  2057  039C  1053               	bcf	_readGateway,0
  2058  039D                     l4610:	
  2059                           
  2060                           ;main.c: 252:             dataFromGatewayIndex = 0;
  2061  039D  01CE               	clrf	_dataFromGatewayIndex
  2062  039E                     l4612:	
  2063                           
  2064                           ;main.c: 253:             readGatewayDone.Bit = 0;
  2065  039E  1054               	bcf	_readGatewayDone,0
  2066                           
  2067                           ;main.c: 254:             timerReadFromGateway = 0;
  2068  039F  01CD               	clrf	_timerReadFromGateway
  2069  03A0                     l4614:	
  2070                           
  2071                           ;main.c: 257:             if (readGatewayDone.Timeout)
  2072  03A0  1CD4               	btfss	_readGatewayDone,1
  2073  03A1  2BA3               	goto	u4481
  2074  03A2  2BA4               	goto	u4480
  2075  03A3                     u4481:	
  2076  03A3  2BA6               	goto	l4618
  2077  03A4                     u4480:	
  2078  03A4                     l4616:	
  2079                           
  2080                           ;main.c: 258:             {;main.c: 259:                 readGatewayDone.Timeout = 0;
  2081  03A4  10D4               	bcf	_readGatewayDone,1
  2082                           
  2083                           ;main.c: 260:             }
  2084  03A5  2BBA               	goto	l4620
  2085  03A6                     l4618:	
  2086                           
  2087                           ;main.c: 263:             {;main.c: 264:                 bitParita(dataFromGateway);
  2088  03A6  30AC               	movlw	(low (_dataFromGateway| 0))& (0+255)
  2089  03A7  120A  158A  2737  120A  118A  	fcall	_bitParita
  2090                           
  2091                           ;main.c: 265:                 SetReceivedTimes(dataFromGateway, Semafori);
  2092  03AC  3060               	movlw	(low (_Semafori| 0))& (0+255)
  2093  03AD  1683               	bsf	3,5	;RP0=1, select bank3
  2094  03AE  1703               	bsf	3,6	;RP1=1, select bank3
  2095  03AF  009E               	movwf	??_main^(0+384)
  2096  03B0  081E               	movf	??_main^(0+384),w
  2097  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  2098  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  2099  03B3  00AC               	movwf	SetReceivedTimes@_semafori
  2100  03B4  30AC               	movlw	(low (_dataFromGateway| 0))& (0+255)
  2101  03B5  120A  158A  244C  120A  118A  	fcall	_SetReceivedTimes
  2102  03BA                     l4620:	
  2103                           
  2104                           ;main.c: 271:         if (secondPassed.Bit && cycled.Bit)
  2105  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  2106  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  2107  03BC  1C52               	btfss	_secondPassed,0
  2108  03BD  2BBF               	goto	u4491
  2109  03BE  2BC0               	goto	u4490
  2110  03BF                     u4491:	
  2111  03BF  2D39               	goto	l4656
  2112  03C0                     u4490:	
  2113  03C0                     l4622:	
  2114  03C0  1C51               	btfss	_cycled,0
  2115  03C1  2BC3               	goto	u4501
  2116  03C2  2BC4               	goto	u4500
  2117  03C3                     u4501:	
  2118  03C3  2D39               	goto	l4656
  2119  03C4                     u4500:	
  2120  03C4                     l4624:	
  2121                           
  2122                           ;main.c: 272:         {;main.c: 273:             unsigned char i = 0;
  2123  03C4  01C6               	clrf	main@i_493
  2124                           
  2125                           ;main.c: 274:             while (i < n_semafori)
  2126  03C5  2CD6               	goto	l4650
  2127  03C6                     l4626:	
  2128                           
  2129                           ;main.c: 275:             {;main.c: 276:                 if ((*Semafori[i]).times[0] != 
      +                          0)
  2130  03C6  0846               	movf	main@i_493,w
  2131  03C7  1683               	bsf	3,5	;RP0=1, select bank3
  2132  03C8  1703               	bsf	3,6	;RP1=1, select bank3
  2133  03C9  009E               	movwf	??_main^(0+384)
  2134  03CA  071E               	addwf	??_main^(0+384),w
  2135  03CB  3E60               	addlw	(low (_Semafori| 0))& (0+255)
  2136  03CC  0084               	movwf	4
  2137  03CD  1383               	bcf	3,7	;select IRP bank0
  2138  03CE  0800               	movf	0,w
  2139  03CF  009F               	movwf	(??_main+1)^(0+384)
  2140  03D0  0A84               	incf	4,f
  2141  03D1  0800               	movf	0,w
  2142  03D2  00A0               	movwf	((??_main+1)^(0+384)+1)
  2143  03D3  081F               	movf	(??_main+1)^(0+384),w
  2144  03D4  0084               	movwf	4
  2145  03D5  1783               	bsf	3,7
  2146  03D6  1C20               	btfss	(??_main+2)^(0+384),0
  2147  03D7  1383               	bcf	3,7
  2148  03D8  0800               	movf	0,w
  2149  03D9  00A1               	movwf	(??_main+3)^(0+384)
  2150  03DA  0A84               	incf	4,f
  2151  03DB  0800               	movf	0,w
  2152  03DC  00A2               	movwf	((??_main+3)^(0+384)+1)
  2153  03DD  0821               	movf	(??_main+3)^(0+384),w
  2154  03DE  0422               	iorwf	((??_main+3)^(0+384)+1),w
  2155  03DF  1903               	btfsc	3,2
  2156  03E0  2BE2               	goto	u4511
  2157  03E1  2BE3               	goto	u4510
  2158  03E2                     u4511:	
  2159  03E2  2CCE               	goto	l4648
  2160  03E3                     u4510:	
  2161  03E3                     l4628:	
  2162                           
  2163                           ;main.c: 277:                 {;main.c: 278:                     time[i]++;
  2164  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2165  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2166  03E5  0846               	movf	main@i_493,w
  2167  03E6  1683               	bsf	3,5	;RP0=1, select bank3
  2168  03E7  1703               	bsf	3,6	;RP1=1, select bank3
  2169  03E8  009E               	movwf	??_main^(0+384)
  2170  03E9  071E               	addwf	??_main^(0+384),w
  2171  03EA  3EA0               	addlw	(low (_time| 0))& (0+255)
  2172  03EB  0084               	movwf	4
  2173  03EC  3001               	movlw	1
  2174  03ED  1383               	bcf	3,7	;select IRP bank1
  2175  03EE  0780               	addwf	0,f
  2176  03EF  0A84               	incf	4,f
  2177  03F0  1803               	skipnc
  2178  03F1  0A80               	incf	0,f
  2179                           
  2180                           ;main.c: 279:                     unsigned char lux_select = (*Semafori[i]).lux_select;
  2181  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2182  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  2183  03F4  0846               	movf	main@i_493,w
  2184  03F5  1683               	bsf	3,5	;RP0=1, select bank3
  2185  03F6  1703               	bsf	3,6	;RP1=1, select bank3
  2186  03F7  009E               	movwf	??_main^(0+384)
  2187  03F8  071E               	addwf	??_main^(0+384),w
  2188  03F9  3E60               	addlw	(low (_Semafori| 0))& (0+255)
  2189  03FA  0084               	movwf	4
  2190  03FB  0800               	movf	0,w
  2191  03FC  009F               	movwf	(??_main+1)^(0+384)
  2192  03FD  0A84               	incf	4,f
  2193  03FE  0800               	movf	0,w
  2194  03FF  00A0               	movwf	((??_main+1)^(0+384)+1)
  2195  0400  081F               	movf	(??_main+1)^(0+384),w
  2196  0401  3E0C               	addlw	12
  2197  0402  00A1               	movwf	(??_main+3)^(0+384)
  2198  0403  0820               	movf	(??_main+2)^(0+384),w
  2199  0404  1803               	skipnc
  2200  0405  3E01               	addlw	1
  2201  0406  3E00               	addlw	0
  2202  0407  00A2               	movwf	(??_main+4)^(0+384)
  2203  0408  0821               	movf	(??_main+3)^(0+384),w
  2204  0409  0084               	movwf	4
  2205  040A  1783               	bsf	3,7
  2206  040B  1C22               	btfss	(??_main+4)^(0+384),0
  2207  040C  1383               	bcf	3,7
  2208  040D  0800               	movf	0,w
  2209  040E  00A3               	movwf	(??_main+5)^(0+384)
  2210  040F  0823               	movf	(??_main+5)^(0+384),w
  2211  0410  1283               	bcf	3,5	;RP0=0, select bank0
  2212  0411  1303               	bcf	3,6	;RP1=0, select bank0
  2213  0412  00C5               	movwf	main@lux_select
  2214                           
  2215                           ;main.c: 281:                     if ((*Semafori[i]).times[lux_select] - time[i] < 0)
  2216  0413  0846               	movf	main@i_493,w
  2217  0414  1683               	bsf	3,5	;RP0=1, select bank3
  2218  0415  1703               	bsf	3,6	;RP1=1, select bank3
  2219  0416  009E               	movwf	??_main^(0+384)
  2220  0417  071E               	addwf	??_main^(0+384),w
  2221  0418  3EA0               	addlw	(low (_time| 0))& (0+255)
  2222  0419  0084               	movwf	4
  2223  041A  1383               	bcf	3,7	;select IRP bank1
  2224  041B  0800               	movf	0,w
  2225  041C  009F               	movwf	(??_main+1)^(0+384)
  2226  041D  0A84               	incf	4,f
  2227  041E  0800               	movf	0,w
  2228  041F  00A0               	movwf	((??_main+1)^(0+384)+1)
  2229  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2230  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2231  0422  0846               	movf	main@i_493,w
  2232  0423  1683               	bsf	3,5	;RP0=1, select bank3
  2233  0424  1703               	bsf	3,6	;RP1=1, select bank3
  2234  0425  00A1               	movwf	(??_main+3)^(0+384)
  2235  0426  0721               	addwf	(??_main+3)^(0+384),w
  2236  0427  3E60               	addlw	(low (_Semafori| 0))& (0+255)
  2237  0428  0084               	movwf	4
  2238  0429  0800               	movf	0,w
  2239  042A  00A2               	movwf	(??_main+4)^(0+384)
  2240  042B  0A84               	incf	4,f
  2241  042C  0800               	movf	0,w
  2242  042D  00A3               	movwf	((??_main+4)^(0+384)+1)
  2243  042E  1283               	bcf	3,5	;RP0=0, select bank0
  2244  042F  1303               	bcf	3,6	;RP1=0, select bank0
  2245  0430  0845               	movf	main@lux_select,w
  2246  0431  1683               	bsf	3,5	;RP0=1, select bank3
  2247  0432  1703               	bsf	3,6	;RP1=1, select bank3
  2248  0433  00A4               	movwf	(??_main+6)^(0+384)
  2249  0434  0724               	addwf	(??_main+6)^(0+384),w
  2250  0435  0722               	addwf	(??_main+4)^(0+384),w
  2251  0436  00A5               	movwf	(??_main+7)^(0+384)
  2252  0437  0823               	movf	(??_main+5)^(0+384),w
  2253  0438  1803               	skipnc
  2254  0439  3E01               	addlw	1
  2255  043A  00A6               	movwf	((??_main+7)^(0+384)+1)
  2256  043B  0825               	movf	(??_main+7)^(0+384),w
  2257  043C  0084               	movwf	4
  2258  043D  1783               	bsf	3,7
  2259  043E  1C26               	btfss	(??_main+8)^(0+384),0
  2260  043F  1383               	bcf	3,7
  2261  0440  0800               	movf	0,w
  2262  0441  00A7               	movwf	(??_main+9)^(0+384)
  2263  0442  0A84               	incf	4,f
  2264  0443  0800               	movf	0,w
  2265  0444  00A8               	movwf	((??_main+9)^(0+384)+1)
  2266  0445  081F               	movf	(??_main+1)^(0+384),w
  2267  0446  0227               	subwf	(??_main+9)^(0+384),w
  2268  0447  00A9               	movwf	(??_main+11)^(0+384)
  2269  0448  0820               	movf	(??_main+2)^(0+384),w
  2270  0449  1C03               	skipc
  2271  044A  0A20               	incf	(??_main+2)^(0+384),w
  2272  044B  0228               	subwf	(??_main+10)^(0+384),w
  2273  044C  00AA               	movwf	(??_main+12)^(0+384)
  2274  044D  1FAA               	btfss	(??_main+12)^(0+384),7
  2275  044E  2C50               	goto	u4521
  2276  044F  2C51               	goto	u4520
  2277  0450                     u4521:	
  2278  0450  2C78               	goto	l4642
  2279  0451                     u4520:	
  2280  0451                     l4630:	
  2281                           
  2282                           ;main.c: 282:                     {;main.c: 283:                         lux_select++;
  2283  0451  3001               	movlw	1
  2284  0452  009E               	movwf	??_main^(0+384)
  2285  0453  081E               	movf	??_main^(0+384),w
  2286  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2287  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2288  0456  07C5               	addwf	main@lux_select,f
  2289  0457                     l4632:	
  2290                           
  2291                           ;main.c: 284:                         time[i] = 1;
  2292  0457  0846               	movf	main@i_493,w
  2293  0458  1683               	bsf	3,5	;RP0=1, select bank3
  2294  0459  1703               	bsf	3,6	;RP1=1, select bank3
  2295  045A  009E               	movwf	??_main^(0+384)
  2296  045B  071E               	addwf	??_main^(0+384),w
  2297  045C  3EA0               	addlw	(low (_time| 0))& (0+255)
  2298  045D  0084               	movwf	4
  2299  045E  3001               	movlw	1
  2300  045F  1383               	bcf	3,7	;select IRP bank1
  2301  0460  0080               	movwf	0
  2302  0461  0A84               	incf	4,f
  2303  0462  3000               	movlw	0
  2304  0463  0080               	movwf	0
  2305  0464                     l4634:	
  2306                           
  2307                           ;main.c: 286:                         if (lux_select >= 3)
  2308  0464  3003               	movlw	3
  2309  0465  1283               	bcf	3,5	;RP0=0, select bank0
  2310  0466  1303               	bcf	3,6	;RP1=0, select bank0
  2311  0467  0245               	subwf	main@lux_select,w
  2312  0468  1C03               	skipc
  2313  0469  2C6B               	goto	u4531
  2314  046A  2C6C               	goto	u4530
  2315  046B                     u4531:	
  2316  046B  2C78               	goto	l4642
  2317  046C                     u4530:	
  2318  046C                     l4636:	
  2319                           
  2320                           ;main.c: 287:                         {;main.c: 288:                             lux_sel
      +                          ect = 0;
  2321  046C  01C5               	clrf	main@lux_select
  2322  046D                     l4638:	
  2323                           
  2324                           ;main.c: 290:                             if (i == 0)
  2325  046D  0846               	movf	main@i_493,w
  2326  046E  1D03               	btfss	3,2
  2327  046F  2C71               	goto	u4541
  2328  0470  2C72               	goto	u4540
  2329  0471                     u4541:	
  2330  0471  2C78               	goto	l4642
  2331  0472                     u4540:	
  2332  0472                     l4640:	
  2333                           
  2334                           ;main.c: 291:                             {;main.c: 292:                                
      +                           UpdateTimes(Semafori);
  2335  0472  3060               	movlw	(low (_Semafori| 0))& (0+255)
  2336  0473  120A  118A  26A1  120A  118A  	fcall	_UpdateTimes
  2337  0478                     l4642:	
  2338                           
  2339                           ;main.c: 297:                     if (lux_select != (*Semafori[i]).lux_select)
  2340  0478  1283               	bcf	3,5	;RP0=0, select bank0
  2341  0479  1303               	bcf	3,6	;RP1=0, select bank0
  2342  047A  0846               	movf	main@i_493,w
  2343  047B  1683               	bsf	3,5	;RP0=1, select bank3
  2344  047C  1703               	bsf	3,6	;RP1=1, select bank3
  2345  047D  009E               	movwf	??_main^(0+384)
  2346  047E  071E               	addwf	??_main^(0+384),w
  2347  047F  3E60               	addlw	(low (_Semafori| 0))& (0+255)
  2348  0480  0084               	movwf	4
  2349  0481  1383               	bcf	3,7	;select IRP bank0
  2350  0482  0800               	movf	0,w
  2351  0483  009F               	movwf	(??_main+1)^(0+384)
  2352  0484  0A84               	incf	4,f
  2353  0485  0800               	movf	0,w
  2354  0486  00A0               	movwf	((??_main+1)^(0+384)+1)
  2355  0487  081F               	movf	(??_main+1)^(0+384),w
  2356  0488  3E0C               	addlw	12
  2357  0489  00A1               	movwf	(??_main+3)^(0+384)
  2358  048A  0820               	movf	(??_main+2)^(0+384),w
  2359  048B  1803               	skipnc
  2360  048C  3E01               	addlw	1
  2361  048D  3E00               	addlw	0
  2362  048E  00A2               	movwf	(??_main+4)^(0+384)
  2363  048F  0821               	movf	(??_main+3)^(0+384),w
  2364  0490  0084               	movwf	4
  2365  0491  1783               	bsf	3,7
  2366  0492  1C22               	btfss	(??_main+4)^(0+384),0
  2367  0493  1383               	bcf	3,7
  2368  0494  0800               	movf	0,w
  2369  0495  1283               	bcf	3,5	;RP0=0, select bank0
  2370  0496  1303               	bcf	3,6	;RP1=0, select bank0
  2371  0497  0645               	xorwf	main@lux_select,w
  2372  0498  1903               	skipnz
  2373  0499  2C9B               	goto	u4551
  2374  049A  2C9C               	goto	u4550
  2375  049B                     u4551:	
  2376  049B  2CCE               	goto	l4648
  2377  049C                     u4550:	
  2378  049C                     l4644:	
  2379                           
  2380                           ;main.c: 298:                     {;main.c: 299:                         luciSemaforo(i,
      +                           lux_select);
  2381  049C  0845               	movf	main@lux_select,w
  2382  049D  1683               	bsf	3,5	;RP0=1, select bank3
  2383  049E  1703               	bsf	3,6	;RP1=1, select bank3
  2384  049F  009E               	movwf	??_main^(0+384)
  2385  04A0  081E               	movf	??_main^(0+384),w
  2386  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  2387  04A2  1303               	bcf	3,6	;RP1=0, select bank0
  2388  04A3  00A4               	movwf	luciSemaforo@lux
  2389  04A4  0846               	movf	main@i_493,w
  2390  04A5  120A  158A  2278  120A  118A  	fcall	_luciSemaforo
  2391  04AA                     l4646:	
  2392                           
  2393                           ;main.c: 300:                         (*Semafori[i]).lux_select = lux_select;
  2394  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  2395  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  2396  04AC  0845               	movf	main@lux_select,w
  2397  04AD  1683               	bsf	3,5	;RP0=1, select bank3
  2398  04AE  1703               	bsf	3,6	;RP1=1, select bank3
  2399  04AF  009E               	movwf	??_main^(0+384)
  2400  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  2401  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  2402  04B2  0846               	movf	main@i_493,w
  2403  04B3  1683               	bsf	3,5	;RP0=1, select bank3
  2404  04B4  1703               	bsf	3,6	;RP1=1, select bank3
  2405  04B5  009F               	movwf	(??_main+1)^(0+384)
  2406  04B6  071F               	addwf	(??_main+1)^(0+384),w
  2407  04B7  3E60               	addlw	(low (_Semafori| 0))& (0+255)
  2408  04B8  0084               	movwf	4
  2409  04B9  1383               	bcf	3,7	;select IRP bank0
  2410  04BA  0800               	movf	0,w
  2411  04BB  00A0               	movwf	(??_main+2)^(0+384)
  2412  04BC  0A84               	incf	4,f
  2413  04BD  0800               	movf	0,w
  2414  04BE  00A1               	movwf	((??_main+2)^(0+384)+1)
  2415  04BF  0820               	movf	(??_main+2)^(0+384),w
  2416  04C0  3E0C               	addlw	12
  2417  04C1  00A2               	movwf	(??_main+4)^(0+384)
  2418  04C2  0821               	movf	(??_main+3)^(0+384),w
  2419  04C3  1803               	skipnc
  2420  04C4  3E01               	addlw	1
  2421  04C5  3E00               	addlw	0
  2422  04C6  00A3               	movwf	(??_main+5)^(0+384)
  2423  04C7  0822               	movf	(??_main+4)^(0+384),w
  2424  04C8  0084               	movwf	4
  2425  04C9  1783               	bsf	3,7
  2426  04CA  1C23               	btfss	(??_main+5)^(0+384),0
  2427  04CB  1383               	bcf	3,7
  2428  04CC  081E               	movf	??_main^(0+384),w
  2429  04CD  0080               	movwf	0
  2430  04CE                     l4648:	
  2431                           
  2432                           ;main.c: 306:                 i++;
  2433  04CE  3001               	movlw	1
  2434  04CF  1683               	bsf	3,5	;RP0=1, select bank3
  2435  04D0  1703               	bsf	3,6	;RP1=1, select bank3
  2436  04D1  009E               	movwf	??_main^(0+384)
  2437  04D2  081E               	movf	??_main^(0+384),w
  2438  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  2439  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  2440  04D5  07C6               	addwf	main@i_493,f
  2441  04D6                     l4650:	
  2442  04D6  3002               	movlw	2
  2443  04D7  0246               	subwf	main@i_493,w
  2444  04D8  1C03               	skipc
  2445  04D9  2CDB               	goto	u4561
  2446  04DA  2CDC               	goto	u4560
  2447  04DB                     u4561:	
  2448  04DB  2BC6               	goto	l4626
  2449  04DC                     u4560:	
  2450  04DC                     l4652:	
  2451                           
  2452                           ;main.c: 309:             GetDigits(&centinaia, &decine, &unita, (*Semafori[0]).times[(*
      +                          Semafori[0]).lux_select] - time[0]);
  2453  04DC  305A               	movlw	(low (_decine| 0))& (0+255)
  2454  04DD  1683               	bsf	3,5	;RP0=1, select bank3
  2455  04DE  1703               	bsf	3,6	;RP1=1, select bank3
  2456  04DF  009E               	movwf	??_main^(0+384)
  2457  04E0  081E               	movf	??_main^(0+384),w
  2458  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  2459  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  2460  04E3  00B4               	movwf	GetDigits@decine
  2461  04E4  305B               	movlw	(low (_unita| 0))& (0+255)
  2462  04E5  1683               	bsf	3,5	;RP0=1, select bank3
  2463  04E6  1703               	bsf	3,6	;RP1=1, select bank3
  2464  04E7  009F               	movwf	(??_main+1)^(0+384)
  2465  04E8  081F               	movf	(??_main+1)^(0+384),w
  2466  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2467  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2468  04EB  00B5               	movwf	GetDigits@unita
  2469  04EC  0860               	movf	_Semafori,w
  2470  04ED  3E0C               	addlw	12
  2471  04EE  1683               	bsf	3,5	;RP0=1, select bank3
  2472  04EF  1703               	bsf	3,6	;RP1=1, select bank3
  2473  04F0  00A0               	movwf	(??_main+2)^(0+384)
  2474  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  2475  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  2476  04F3  0861               	movf	_Semafori+1,w
  2477  04F4  1803               	skipnc
  2478  04F5  3E01               	addlw	1
  2479  04F6  3E00               	addlw	0
  2480  04F7  1683               	bsf	3,5	;RP0=1, select bank3
  2481  04F8  1703               	bsf	3,6	;RP1=1, select bank3
  2482  04F9  00A1               	movwf	(??_main+3)^(0+384)
  2483  04FA  0820               	movf	(??_main+2)^(0+384),w
  2484  04FB  0084               	movwf	4
  2485  04FC  1783               	bsf	3,7
  2486  04FD  1C21               	btfss	(??_main+3)^(0+384),0
  2487  04FE  1383               	bcf	3,7
  2488  04FF  0800               	movf	0,w
  2489  0500  00A2               	movwf	(??_main+4)^(0+384)
  2490  0501  0722               	addwf	(??_main+4)^(0+384),w
  2491  0502  1283               	bcf	3,5	;RP0=0, select bank0
  2492  0503  1303               	bcf	3,6	;RP1=0, select bank0
  2493  0504  0760               	addwf	_Semafori,w
  2494  0505  1683               	bsf	3,5	;RP0=1, select bank3
  2495  0506  1703               	bsf	3,6	;RP1=1, select bank3
  2496  0507  00A3               	movwf	(??_main+5)^(0+384)
  2497  0508  1283               	bcf	3,5	;RP0=0, select bank0
  2498  0509  1303               	bcf	3,6	;RP1=0, select bank0
  2499  050A  0861               	movf	_Semafori+1,w
  2500  050B  1803               	skipnc
  2501  050C  3E01               	addlw	1
  2502  050D  1683               	bsf	3,5	;RP0=1, select bank3
  2503  050E  1703               	bsf	3,6	;RP1=1, select bank3
  2504  050F  00A4               	movwf	((??_main+5)^(0+384)+1)
  2505  0510  0823               	movf	(??_main+5)^(0+384),w
  2506  0511  0084               	movwf	4
  2507  0512  1783               	bsf	3,7
  2508  0513  1C24               	btfss	(??_main+6)^(0+384),0
  2509  0514  1383               	bcf	3,7
  2510  0515  0800               	movf	0,w
  2511  0516  00A5               	movwf	(??_main+7)^(0+384)
  2512  0517  0A84               	incf	4,f
  2513  0518  0800               	movf	0,w
  2514  0519  00A6               	movwf	((??_main+7)^(0+384)+1)
  2515  051A  1683               	bsf	3,5	;RP0=1, select bank1
  2516  051B  1303               	bcf	3,6	;RP1=0, select bank1
  2517  051C  0820               	movf	_time^(0+128),w
  2518  051D  1683               	bsf	3,5	;RP0=1, select bank3
  2519  051E  1703               	bsf	3,6	;RP1=1, select bank3
  2520  051F  0225               	subwf	(??_main+7)^(0+384),w
  2521  0520  1283               	bcf	3,5	;RP0=0, select bank0
  2522  0521  1303               	bcf	3,6	;RP1=0, select bank0
  2523  0522  00B6               	movwf	GetDigits@Time
  2524  0523  1683               	bsf	3,5	;RP0=1, select bank1
  2525  0524  1303               	bcf	3,6	;RP1=0, select bank1
  2526  0525  0821               	movf	(_time+1)^(0+128),w
  2527  0526  1C03               	skipc
  2528  0527  0A21               	incf	(_time+1)^(0+128),w
  2529  0528  1683               	bsf	3,5	;RP0=1, select bank3
  2530  0529  1703               	bsf	3,6	;RP1=1, select bank3
  2531  052A  0226               	subwf	(??_main+8)^(0+384),w
  2532  052B  1283               	bcf	3,5	;RP0=0, select bank0
  2533  052C  1303               	bcf	3,6	;RP1=0, select bank0
  2534  052D  00B7               	movwf	GetDigits@Time+1
  2535  052E  3059               	movlw	(low (_centinaia| 0))& (0+255)
  2536  052F  120A  158A  2536  120A  118A  	fcall	_GetDigits
  2537  0534                     l4654:	
  2538                           
  2539                           ;main.c: 310:             ShowDigitsOnDisplay();
  2540  0534  120A  158A  24BA  120A  118A  	fcall	_ShowDigitsOnDisplay
  2541  0539                     l4656:	
  2542                           
  2543                           ;main.c: 317:         if (secondPassed.Bit && cycled.Bit)
  2544  0539  1283               	bcf	3,5	;RP0=0, select bank0
  2545  053A  1303               	bcf	3,6	;RP1=0, select bank0
  2546  053B  1C52               	btfss	_secondPassed,0
  2547  053C  2D3E               	goto	u4571
  2548  053D  2D3F               	goto	u4570
  2549  053E                     u4571:	
  2550  053E  2D45               	goto	l273
  2551  053F                     u4570:	
  2552  053F                     l4658:	
  2553  053F  1C51               	btfss	_cycled,0
  2554  0540  2D42               	goto	u4581
  2555  0541  2D43               	goto	u4580
  2556  0542                     u4581:	
  2557  0542  2D45               	goto	l273
  2558  0543                     u4580:	
  2559  0543                     l4660:	
  2560                           
  2561                           ;main.c: 318:         {;main.c: 319:             secondPassed.Bit = 0;
  2562  0543  1052               	bcf	_secondPassed,0
  2563                           
  2564                           ;main.c: 320:             cycled.Bit = 0;
  2565  0544  1051               	bcf	_cycled,0
  2566  0545                     l273:	
  2567                           ;main.c: 321:         }
  2568                           
  2569                           
  2570                           ;main.c: 322:         if (secondPassed.Bit && !cycled.Bit)
  2571  0545  1C52               	btfss	_secondPassed,0
  2572  0546  2D48               	goto	u4591
  2573  0547  2D49               	goto	u4590
  2574  0548                     u4591:	
  2575  0548  2889               	goto	l4520
  2576  0549                     u4590:	
  2577  0549                     l4662:	
  2578  0549  1851               	btfsc	_cycled,0
  2579  054A  2D4C               	goto	u4601
  2580  054B  2D4D               	goto	u4600
  2581  054C                     u4601:	
  2582  054C  2889               	goto	l4520
  2583  054D                     u4600:	
  2584  054D                     l4664:	
  2585                           
  2586                           ;main.c: 323:         {;main.c: 324:             cycled.Bit = 1;
  2587  054D  1451               	bsf	_cycled,0
  2588  054E  2889               	goto	l4520
  2589  054F  120A  118A  2810   	ljmp	start
  2590  0552                     __end_of_main:	
  2591                           
  2592                           	psect	text1
  2593  08F1                     __ptext1:	
  2594 ;; *************** function _sendByte *****************
  2595 ;; Defined at:
  2596 ;;		line 388 in file "main.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  byte0           1    wreg     unsigned char 
  2599 ;;  byte1           1   24[BANK0 ] unsigned char 
  2600 ;;  valore          1   25[BANK0 ] unsigned char 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  byte0           1   29[BANK0 ] unsigned char 
  2603 ;;  i               1   31[BANK0 ] unsigned char 
  2604 ;;  txByte          1   30[BANK0 ] PTR unsigned char 
  2605 ;;		 -> BuildByte@txByte(5), 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2615 ;;      Params:         0       2       0       0       0
  2616 ;;      Locals:         0       3       0       0       0
  2617 ;;      Temps:          0       3       0       0       0
  2618 ;;      Totals:         0       8       0       0       0
  2619 ;;Total ram usage:        8 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    4
  2622 ;; This function calls:
  2623 ;;		_BuildByte
  2624 ;;		_UART_TxChar
  2625 ;; This function is called by:
  2626 ;;		_main
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           
  2631                           ;psect for function _sendByte
  2632  08F1                     _sendByte:	
  2633                           
  2634                           ;incstack = 0
  2635                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2636                           ;sendByte@byte0 stored from wreg
  2637  08F1  1283               	bcf	3,5	;RP0=0, select bank0
  2638  08F2  1303               	bcf	3,6	;RP1=0, select bank0
  2639  08F3  00BD               	movwf	sendByte@byte0
  2640  08F4                     l4384:	
  2641                           
  2642                           ;main.c: 388: void sendByte(char byte0, char byte1, char valore);main.c: 389: {;main.c: 
      +                          390:     char *txByte;;main.c: 391:     txByte = BuildByte(byte0, byte1, valore);
  2643  08F4  0838               	movf	sendByte@byte1,w
  2644  08F5  00BA               	movwf	??_sendByte
  2645  08F6  083A               	movf	??_sendByte,w
  2646  08F7  00A4               	movwf	BuildByte@byte1
  2647  08F8  0839               	movf	sendByte@valore,w
  2648  08F9  00BB               	movwf	??_sendByte+1
  2649  08FA  083B               	movf	??_sendByte+1,w
  2650  08FB  00A5               	movwf	BuildByte@valore
  2651  08FC  083D               	movf	sendByte@byte0,w
  2652  08FD  120A  158A  266F  120A  158A  	fcall	_BuildByte
  2653  0902  1283               	bcf	3,5	;RP0=0, select bank0
  2654  0903  1303               	bcf	3,6	;RP1=0, select bank0
  2655  0904  00BC               	movwf	??_sendByte+2
  2656  0905  083C               	movf	??_sendByte+2,w
  2657  0906  00BE               	movwf	sendByte@txByte
  2658  0907                     l4386:	
  2659                           
  2660                           ;main.c: 393:     for (unsigned char i = 0; i < 5; i++)
  2661  0907  01BF               	clrf	sendByte@i
  2662  0908                     l4392:	
  2663                           
  2664                           ;main.c: 394:     {;main.c: 395:         UART_TxChar(*(txByte++));
  2665  0908  083E               	movf	sendByte@txByte,w
  2666  0909  0084               	movwf	4
  2667  090A  1383               	bcf	3,7	;select IRP bank0
  2668  090B  0800               	movf	0,w
  2669  090C  120A  118A  27F5  120A  158A  	fcall	_UART_TxChar
  2670  0911                     l4394:	
  2671  0911  3001               	movlw	1
  2672  0912  1283               	bcf	3,5	;RP0=0, select bank0
  2673  0913  1303               	bcf	3,6	;RP1=0, select bank0
  2674  0914  00BA               	movwf	??_sendByte
  2675  0915  083A               	movf	??_sendByte,w
  2676  0916  07BE               	addwf	sendByte@txByte,f
  2677  0917                     l4396:	
  2678                           
  2679                           ;main.c: 396:     }
  2680  0917  3001               	movlw	1
  2681  0918  00BA               	movwf	??_sendByte
  2682  0919  083A               	movf	??_sendByte,w
  2683  091A  07BF               	addwf	sendByte@i,f
  2684  091B                     l4398:	
  2685  091B  3005               	movlw	5
  2686  091C  023F               	subwf	sendByte@i,w
  2687  091D  1C03               	skipc
  2688  091E  2920               	goto	u4301
  2689  091F  2921               	goto	u4300
  2690  0920                     u4301:	
  2691  0920  2908               	goto	l4392
  2692  0921                     u4300:	
  2693  0921                     l312:	
  2694  0921  0008               	return
  2695  0922                     __end_of_sendByte:	
  2696                           
  2697                           	psect	text2
  2698  07F5                     __ptext2:	
  2699 ;; *************** function _UART_TxChar *****************
  2700 ;; Defined at:
  2701 ;;		line 363 in file "main.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  ch              1    wreg     unsigned char 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  ch              1    4[BANK0 ] unsigned char 
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  1    wreg      void 
  2708 ;; Registers used:
  2709 ;;		wreg
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2715 ;;      Params:         0       0       0       0       0
  2716 ;;      Locals:         0       1       0       0       0
  2717 ;;      Temps:          0       0       0       0       0
  2718 ;;      Totals:         0       1       0       0       0
  2719 ;;Total ram usage:        1 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    3
  2722 ;; This function calls:
  2723 ;;		Nothing
  2724 ;; This function is called by:
  2725 ;;		_sendByte
  2726 ;;		_UART_Write_Text
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           
  2731                           ;psect for function _UART_TxChar
  2732  07F5                     _UART_TxChar:	
  2733                           
  2734                           ;incstack = 0
  2735                           ; Regs used in _UART_TxChar: [wreg]
  2736                           ;UART_TxChar@ch stored from wreg
  2737  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  2738  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  2739  07F7  00A4               	movwf	UART_TxChar@ch
  2740  07F8                     l4036:	
  2741  07F8                     l292:	
  2742                           ;main.c: 366:         ;
  2743                           
  2744                           
  2745                           ;main.c: 365:     while (!TXIF)
  2746  07F8  1E0C               	btfss	12,4	;volatile
  2747  07F9  2FFB               	goto	u3691
  2748  07FA  2FFC               	goto	u3690
  2749  07FB                     u3691:	
  2750  07FB  2FF8               	goto	l292
  2751  07FC                     u3690:	
  2752  07FC                     l294:	
  2753                           
  2754                           ;main.c: 367:     TXIF = 0;
  2755  07FC  120C               	bcf	12,4	;volatile
  2756  07FD                     l4038:	
  2757                           
  2758                           ;main.c: 368:     TXREG = ch;
  2759  07FD  0824               	movf	UART_TxChar@ch,w
  2760  07FE  0099               	movwf	25	;volatile
  2761  07FF                     l295:	
  2762  07FF  0008               	return
  2763  0800                     __end_of_UART_TxChar:	
  2764                           
  2765                           	psect	text3
  2766  0E6F                     __ptext3:	
  2767 ;; *************** function _BuildByte *****************
  2768 ;; Defined at:
  2769 ;;		line 2 in file "./CustomLib/Serial.h"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;  byte0           1    wreg     unsigned char 
  2772 ;;  byte1           1    4[BANK0 ] unsigned char 
  2773 ;;  valore          1    5[BANK0 ] unsigned char 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;  byte0           1    8[BANK0 ] unsigned char 
  2776 ;;  y               2   18[BANK0 ] int 
  2777 ;;  y               2   16[BANK0 ] int 
  2778 ;;  i               2   22[BANK0 ] int 
  2779 ;;  i               2   20[BANK0 ] int 
  2780 ;;  txByte          5    9[BANK0 ] unsigned char [5]
  2781 ;;  sommaColumn     1   15[BANK0 ] unsigned char 
  2782 ;;  sommaRow        1   14[BANK0 ] unsigned char 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      PTR unsigned char 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2792 ;;      Params:         0       2       0       0       0
  2793 ;;      Locals:         0      16       0       0       0
  2794 ;;      Temps:          0       2       0       0       0
  2795 ;;      Totals:         0      20       0       0       0
  2796 ;;Total ram usage:       20 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    3
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_sendByte
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           
  2807                           ;psect for function _BuildByte
  2808  0E6F                     _BuildByte:	
  2809                           
  2810                           ;incstack = 0
  2811                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2812                           ;BuildByte@byte0 stored from wreg
  2813  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  2814  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  2815  0E71  00A8               	movwf	BuildByte@byte0
  2816  0E72                     l3954:	
  2817                           
  2818                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2819  0E72  0828               	movf	BuildByte@byte0,w
  2820  0E73  397F               	andlw	127
  2821  0E74  00A6               	movwf	??_BuildByte
  2822  0E75  0826               	movf	??_BuildByte,w
  2823  0E76  00A9               	movwf	BuildByte@txByte
  2824                           
  2825                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2826  0E77  0824               	movf	BuildByte@byte1,w
  2827  0E78  397F               	andlw	127
  2828  0E79  00A6               	movwf	??_BuildByte
  2829  0E7A  0826               	movf	??_BuildByte,w
  2830  0E7B  00AA               	movwf	BuildByte@txByte+1
  2831                           
  2832                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2833  0E7C  0825               	movf	BuildByte@valore,w
  2834  0E7D  397F               	andlw	127
  2835  0E7E  00A6               	movwf	??_BuildByte
  2836  0E7F  0826               	movf	??_BuildByte,w
  2837  0E80  00AB               	movwf	BuildByte@txByte+2
  2838  0E81                     l3956:	
  2839                           
  2840                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2841  0E81  0825               	movf	BuildByte@valore,w
  2842  0E82  00A6               	movwf	??_BuildByte
  2843  0E83  3007               	movlw	7
  2844  0E84                     u3585:	
  2845  0E84  1003               	clrc
  2846  0E85  0CA6               	rrf	??_BuildByte,f
  2847  0E86  3EFF               	addlw	-1
  2848  0E87  1D03               	skipz
  2849  0E88  2E84               	goto	u3585
  2850  0E89  0826               	movf	??_BuildByte,w
  2851  0E8A  397F               	andlw	127
  2852  0E8B  00A7               	movwf	??_BuildByte+1
  2853  0E8C  0827               	movf	??_BuildByte+1,w
  2854  0E8D  00AC               	movwf	BuildByte@txByte+3
  2855  0E8E                     l3958:	
  2856                           
  2857                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2858  0E8E  01AE               	clrf	BuildByte@sommaRow
  2859  0E8F                     l3960:	
  2860                           
  2861                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2862  0E8F  01AF               	clrf	BuildByte@sommaColumn
  2863  0E90                     l3962:	
  2864                           
  2865                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2866  0E90  01B4               	clrf	BuildByte@i
  2867  0E91  01B5               	clrf	BuildByte@i+1
  2868  0E92                     l3968:	
  2869                           
  2870                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2871  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  2872  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  2873  0E94  01B0               	clrf	BuildByte@y
  2874  0E95  01B1               	clrf	BuildByte@y+1
  2875  0E96                     l3974:	
  2876                           
  2877                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2878  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  2879  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  2880  0E98  0834               	movf	BuildByte@i,w
  2881  0E99  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2882  0E9A  0084               	movwf	4
  2883  0E9B  1383               	bcf	3,7	;select IRP bank0
  2884  0E9C  0800               	movf	0,w
  2885  0E9D  00A6               	movwf	??_BuildByte
  2886  0E9E  0A30               	incf	BuildByte@y,w
  2887  0E9F  2EA2               	goto	u3594
  2888  0EA0                     u3595:	
  2889  0EA0  1003               	clrc
  2890  0EA1  0CA6               	rrf	??_BuildByte,f
  2891  0EA2                     u3594:	
  2892  0EA2  3EFF               	addlw	-1
  2893  0EA3  1D03               	skipz
  2894  0EA4  2EA0               	goto	u3595
  2895  0EA5  0826               	movf	??_BuildByte,w
  2896  0EA6  3901               	andlw	1
  2897  0EA7  00A7               	movwf	??_BuildByte+1
  2898  0EA8  0827               	movf	??_BuildByte+1,w
  2899  0EA9  07AE               	addwf	BuildByte@sommaRow,f
  2900  0EAA                     l3976:	
  2901                           
  2902                           ;./CustomLib/Serial.h: 18:         }
  2903  0EAA  3001               	movlw	1
  2904  0EAB  07B0               	addwf	BuildByte@y,f
  2905  0EAC  1803               	skipnc
  2906  0EAD  0AB1               	incf	BuildByte@y+1,f
  2907  0EAE  3000               	movlw	0
  2908  0EAF  07B1               	addwf	BuildByte@y+1,f
  2909  0EB0                     l3978:	
  2910  0EB0  0831               	movf	BuildByte@y+1,w
  2911  0EB1  3A80               	xorlw	128
  2912  0EB2  00FF               	movwf	btemp+1
  2913  0EB3  3080               	movlw	128
  2914  0EB4  027F               	subwf	btemp+1,w
  2915  0EB5  1D03               	skipz
  2916  0EB6  2EB9               	goto	u3605
  2917  0EB7  3008               	movlw	8
  2918  0EB8  0230               	subwf	BuildByte@y,w
  2919  0EB9                     u3605:	
  2920  0EB9  1C03               	skipc
  2921  0EBA  2EBC               	goto	u3601
  2922  0EBB  2EBD               	goto	u3600
  2923  0EBC                     u3601:	
  2924  0EBC  2E96               	goto	l3974
  2925  0EBD                     u3600:	
  2926  0EBD                     l125:	
  2927                           
  2928                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  2929  0EBD  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0EBE  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0EBF  1C2E               	btfss	BuildByte@sommaRow,0
  2932  0EC0  2EC2               	goto	u3611
  2933  0EC1  2EC3               	goto	u3610
  2934  0EC2                     u3611:	
  2935  0EC2  2ECB               	goto	l3982
  2936  0EC3                     u3610:	
  2937  0EC3                     l3980:	
  2938                           
  2939                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  2940  0EC3  3080               	movlw	128
  2941  0EC4  00A6               	movwf	??_BuildByte
  2942  0EC5  0834               	movf	BuildByte@i,w
  2943  0EC6  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2944  0EC7  0084               	movwf	4
  2945  0EC8  0826               	movf	??_BuildByte,w
  2946  0EC9  1383               	bcf	3,7	;select IRP bank0
  2947  0ECA  0780               	addwf	0,f
  2948  0ECB                     l3982:	
  2949                           
  2950                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  2951  0ECB  01AE               	clrf	BuildByte@sommaRow
  2952  0ECC                     l3986:	
  2953                           ;./CustomLib/Serial.h: 23:         }
  2954                           
  2955                           
  2956                           ;./CustomLib/Serial.h: 28:     }
  2957  0ECC  3001               	movlw	1
  2958  0ECD  07B4               	addwf	BuildByte@i,f
  2959  0ECE  1803               	skipnc
  2960  0ECF  0AB5               	incf	BuildByte@i+1,f
  2961  0ED0  3000               	movlw	0
  2962  0ED1  07B5               	addwf	BuildByte@i+1,f
  2963  0ED2                     l3988:	
  2964  0ED2  0835               	movf	BuildByte@i+1,w
  2965  0ED3  3A80               	xorlw	128
  2966  0ED4  00FF               	movwf	btemp+1
  2967  0ED5  3080               	movlw	128
  2968  0ED6  027F               	subwf	btemp+1,w
  2969  0ED7  1D03               	skipz
  2970  0ED8  2EDB               	goto	u3625
  2971  0ED9  3004               	movlw	4
  2972  0EDA  0234               	subwf	BuildByte@i,w
  2973  0EDB                     u3625:	
  2974  0EDB  1C03               	skipc
  2975  0EDC  2EDE               	goto	u3621
  2976  0EDD  2EDF               	goto	u3620
  2977  0EDE                     u3621:	
  2978  0EDE  2E92               	goto	l3968
  2979  0EDF                     u3620:	
  2980  0EDF                     l3990:	
  2981                           
  2982                           ;./CustomLib/Serial.h: 31:     for (int i = 0; i < 8; i++)
  2983  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  2984  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
  2985  0EE1  01B6               	clrf	BuildByte@i_359
  2986  0EE2  01B7               	clrf	BuildByte@i_359+1
  2987  0EE3                     l3996:	
  2988                           
  2989                           ;./CustomLib/Serial.h: 32:     {;./CustomLib/Serial.h: 33:         for (int y = 0; y < 4
      +                          ; y++)
  2990  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  2992  0EE5  01B2               	clrf	BuildByte@y_360
  2993  0EE6  01B3               	clrf	BuildByte@y_360+1
  2994  0EE7                     l4002:	
  2995                           
  2996                           ;./CustomLib/Serial.h: 35:         {;./CustomLib/Serial.h: 36:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  2997  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  2998  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  2999  0EE9  0832               	movf	BuildByte@y_360,w
  3000  0EEA  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3001  0EEB  0084               	movwf	4
  3002  0EEC  1383               	bcf	3,7	;select IRP bank0
  3003  0EED  0800               	movf	0,w
  3004  0EEE  00A6               	movwf	??_BuildByte
  3005  0EEF  0A36               	incf	BuildByte@i_359,w
  3006  0EF0  2EF3               	goto	u3634
  3007  0EF1                     u3635:	
  3008  0EF1  1003               	clrc
  3009  0EF2  0CA6               	rrf	??_BuildByte,f
  3010  0EF3                     u3634:	
  3011  0EF3  3EFF               	addlw	-1
  3012  0EF4  1D03               	skipz
  3013  0EF5  2EF1               	goto	u3635
  3014  0EF6  0826               	movf	??_BuildByte,w
  3015  0EF7  3901               	andlw	1
  3016  0EF8  00A7               	movwf	??_BuildByte+1
  3017  0EF9  0827               	movf	??_BuildByte+1,w
  3018  0EFA  07AF               	addwf	BuildByte@sommaColumn,f
  3019  0EFB                     l4004:	
  3020                           
  3021                           ;./CustomLib/Serial.h: 37:         }
  3022  0EFB  3001               	movlw	1
  3023  0EFC  07B2               	addwf	BuildByte@y_360,f
  3024  0EFD  1803               	skipnc
  3025  0EFE  0AB3               	incf	BuildByte@y_360+1,f
  3026  0EFF  3000               	movlw	0
  3027  0F00  07B3               	addwf	BuildByte@y_360+1,f
  3028  0F01                     l4006:	
  3029  0F01  0833               	movf	BuildByte@y_360+1,w
  3030  0F02  3A80               	xorlw	128
  3031  0F03  00FF               	movwf	btemp+1
  3032  0F04  3080               	movlw	128
  3033  0F05  027F               	subwf	btemp+1,w
  3034  0F06  1D03               	skipz
  3035  0F07  2F0A               	goto	u3645
  3036  0F08  3004               	movlw	4
  3037  0F09  0232               	subwf	BuildByte@y_360,w
  3038  0F0A                     u3645:	
  3039  0F0A  1C03               	skipc
  3040  0F0B  2F0D               	goto	u3641
  3041  0F0C  2F0E               	goto	u3640
  3042  0F0D                     u3641:	
  3043  0F0D  2EE7               	goto	l4002
  3044  0F0E                     u3640:	
  3045  0F0E                     l131:	
  3046                           
  3047                           ;./CustomLib/Serial.h: 38:         if (sommaColumn % 2 == 1)
  3048  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  3049  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  3050  0F10  1C2F               	btfss	BuildByte@sommaColumn,0
  3051  0F11  2F13               	goto	u3651
  3052  0F12  2F14               	goto	u3650
  3053  0F13                     u3651:	
  3054  0F13  2F21               	goto	l4010
  3055  0F14                     u3650:	
  3056  0F14                     l4008:	
  3057                           
  3058                           ;./CustomLib/Serial.h: 39:         {;./CustomLib/Serial.h: 40:             txByte[4] += 
      +                          0x01 << i;
  3059  0F14  3001               	movlw	1
  3060  0F15  00A6               	movwf	??_BuildByte
  3061  0F16  0A36               	incf	BuildByte@i_359,w
  3062  0F17  2F1A               	goto	u3664
  3063  0F18                     u3665:	
  3064  0F18  1003               	clrc
  3065  0F19  0DA6               	rlf	??_BuildByte,f
  3066  0F1A                     u3664:	
  3067  0F1A  3EFF               	addlw	-1
  3068  0F1B  1D03               	skipz
  3069  0F1C  2F18               	goto	u3665
  3070  0F1D  0826               	movf	??_BuildByte,w
  3071  0F1E  00A7               	movwf	??_BuildByte+1
  3072  0F1F  0827               	movf	??_BuildByte+1,w
  3073  0F20  07AD               	addwf	BuildByte@txByte+4,f
  3074  0F21                     l4010:	
  3075                           
  3076                           ;./CustomLib/Serial.h: 41:             sommaColumn = 0;
  3077  0F21  01AF               	clrf	BuildByte@sommaColumn
  3078  0F22                     l4014:	
  3079                           ;./CustomLib/Serial.h: 42:         }
  3080                           
  3081                           
  3082                           ;./CustomLib/Serial.h: 47:     }
  3083  0F22  3001               	movlw	1
  3084  0F23  07B6               	addwf	BuildByte@i_359,f
  3085  0F24  1803               	skipnc
  3086  0F25  0AB7               	incf	BuildByte@i_359+1,f
  3087  0F26  3000               	movlw	0
  3088  0F27  07B7               	addwf	BuildByte@i_359+1,f
  3089  0F28                     l4016:	
  3090  0F28  0837               	movf	BuildByte@i_359+1,w
  3091  0F29  3A80               	xorlw	128
  3092  0F2A  00FF               	movwf	btemp+1
  3093  0F2B  3080               	movlw	128
  3094  0F2C  027F               	subwf	btemp+1,w
  3095  0F2D  1D03               	skipz
  3096  0F2E  2F31               	goto	u3675
  3097  0F2F  3008               	movlw	8
  3098  0F30  0236               	subwf	BuildByte@i_359,w
  3099  0F31                     u3675:	
  3100  0F31  1C03               	skipc
  3101  0F32  2F34               	goto	u3671
  3102  0F33  2F35               	goto	u3670
  3103  0F34                     u3671:	
  3104  0F34  2EE3               	goto	l3996
  3105  0F35                     u3670:	
  3106  0F35                     l4018:	
  3107                           
  3108                           ;./CustomLib/Serial.h: 49:     return txByte;
  3109  0F35  3029               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3110  0F36                     l134:	
  3111  0F36  0008               	return
  3112  0F37                     __end_of_BuildByte:	
  3113                           
  3114                           	psect	text4
  3115  099D                     __ptext4:	
  3116 ;; *************** function _rand *****************
  3117 ;; Defined at:
  3118 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  2   17[BANK0 ] int 
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, status,0, pclath, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3132 ;;      Params:         0       2       0       0       0
  3133 ;;      Locals:         0       0       0       0       0
  3134 ;;      Temps:          0       5       0       0       0
  3135 ;;      Totals:         0       7       0       0       0
  3136 ;;Total ram usage:        7 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    4
  3139 ;; This function calls:
  3140 ;;		___lmul
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           
  3147                           ;psect for function _rand
  3148  099D                     _rand:	
  3149  099D                     l4376:	
  3150                           ;incstack = 0
  3151                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  3152                           
  3153  099D  1283               	bcf	3,5	;RP0=0, select bank0
  3154  099E  1303               	bcf	3,6	;RP1=0, select bank0
  3155  099F  085F               	movf	_randx+3,w
  3156  09A0  00A7               	movwf	___lmul@multiplier+3
  3157  09A1  085E               	movf	_randx+2,w
  3158  09A2  00A6               	movwf	___lmul@multiplier+2
  3159  09A3  085D               	movf	_randx+1,w
  3160  09A4  00A5               	movwf	___lmul@multiplier+1
  3161  09A5  085C               	movf	_randx,w
  3162  09A6  00A4               	movwf	___lmul@multiplier
  3163  09A7  3041               	movlw	65
  3164  09A8  00AB               	movwf	___lmul@multiplicand+3
  3165  09A9  30C6               	movlw	198
  3166  09AA  00AA               	movwf	___lmul@multiplicand+2
  3167  09AB  304E               	movlw	78
  3168  09AC  00A9               	movwf	___lmul@multiplicand+1
  3169  09AD  306D               	movlw	109
  3170  09AE  00A8               	movwf	___lmul@multiplicand
  3171  09AF  120A  158A  21E4  120A  158A  	fcall	___lmul
  3172  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  3173  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  3174  09B6  0827               	movf	?___lmul+3,w
  3175  09B7  00DF               	movwf	_randx+3
  3176  09B8  0826               	movf	?___lmul+2,w
  3177  09B9  00DE               	movwf	_randx+2
  3178  09BA  0825               	movf	?___lmul+1,w
  3179  09BB  00DD               	movwf	_randx+1
  3180  09BC  0824               	movf	?___lmul,w
  3181  09BD  00DC               	movwf	_randx
  3182  09BE                     l4378:	
  3183  09BE  3039               	movlw	57
  3184  09BF  07DC               	addwf	_randx,f
  3185  09C0  3030               	movlw	48
  3186  09C1  1803               	skipnc
  3187  09C2  3031               	movlw	49
  3188  09C3  07DD               	addwf	_randx+1,f
  3189  09C4  3000               	movlw	0
  3190  09C5  1803               	skipnc
  3191  09C6  3001               	movlw	1
  3192  09C7  07DE               	addwf	_randx+2,f
  3193  09C8  3000               	movlw	0
  3194  09C9  1803               	skipnc
  3195  09CA  3001               	movlw	1
  3196  09CB  07DF               	addwf	_randx+3,f
  3197  09CC                     l4380:	
  3198  09CC  085C               	movf	_randx,w
  3199  09CD  00B3               	movwf	??_rand
  3200  09CE  085D               	movf	_randx+1,w
  3201  09CF  00B4               	movwf	??_rand+1
  3202  09D0  085E               	movf	_randx+2,w
  3203  09D1  00B5               	movwf	??_rand+2
  3204  09D2  085F               	movf	_randx+3,w
  3205  09D3  00B6               	movwf	??_rand+3
  3206  09D4  3010               	movlw	16
  3207  09D5  00B7               	movwf	??_rand+4
  3208  09D6                     u4295:	
  3209  09D6  0D36               	rlf	??_rand+3,w
  3210  09D7  0CB6               	rrf	??_rand+3,f
  3211  09D8  0CB5               	rrf	??_rand+2,f
  3212  09D9  0CB4               	rrf	??_rand+1,f
  3213  09DA  0CB3               	rrf	??_rand,f
  3214  09DB                     u4290:	
  3215  09DB  0BB7               	decfsz	??_rand+4,f
  3216  09DC  29D6               	goto	u4295
  3217  09DD  30FF               	movlw	255
  3218  09DE  0533               	andwf	??_rand,w
  3219  09DF  00B1               	movwf	?_rand
  3220  09E0  307F               	movlw	127
  3221  09E1  0534               	andwf	??_rand+1,w
  3222  09E2  00B2               	movwf	?_rand+1
  3223  09E3                     l898:	
  3224  09E3  0008               	return
  3225  09E4                     __end_of_rand:	
  3226                           
  3227                           	psect	text5
  3228  09E4                     __ptext5:	
  3229 ;; *************** function ___lmul *****************
  3230 ;; Defined at:
  3231 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  multiplier      4    4[BANK0 ] unsigned long 
  3234 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;  product         4   13[BANK0 ] unsigned long 
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  4    4[BANK0 ] unsigned long 
  3239 ;; Registers used:
  3240 ;;		wreg, status,2, status,0
  3241 ;; Tracked objects:
  3242 ;;		On entry : 0/0
  3243 ;;		On exit  : 0/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3246 ;;      Params:         0       8       0       0       0
  3247 ;;      Locals:         0       4       0       0       0
  3248 ;;      Temps:          0       1       0       0       0
  3249 ;;      Totals:         0      13       0       0       0
  3250 ;;Total ram usage:       13 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    3
  3253 ;; This function calls:
  3254 ;;		Nothing
  3255 ;; This function is called by:
  3256 ;;		_rand
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           
  3261                           ;psect for function ___lmul
  3262  09E4                     ___lmul:	
  3263  09E4                     l4058:	
  3264                           ;incstack = 0
  3265                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3266                           
  3267  09E4  3000               	movlw	0
  3268  09E5  1283               	bcf	3,5	;RP0=0, select bank0
  3269  09E6  1303               	bcf	3,6	;RP1=0, select bank0
  3270  09E7  00B0               	movwf	___lmul@product+3
  3271  09E8  3000               	movlw	0
  3272  09E9  00AF               	movwf	___lmul@product+2
  3273  09EA  3000               	movlw	0
  3274  09EB  00AE               	movwf	___lmul@product+1
  3275  09EC  3000               	movlw	0
  3276  09ED  00AD               	movwf	___lmul@product
  3277  09EE                     l4060:	
  3278  09EE  1C24               	btfss	___lmul@multiplier,0
  3279  09EF  29F1               	goto	u3741
  3280  09F0  29F2               	goto	u3740
  3281  09F1                     u3741:	
  3282  09F1  2A09               	goto	l4064
  3283  09F2                     u3740:	
  3284  09F2                     l4062:	
  3285  09F2  0828               	movf	___lmul@multiplicand,w
  3286  09F3  07AD               	addwf	___lmul@product,f
  3287  09F4  0829               	movf	___lmul@multiplicand+1,w
  3288  09F5  1103               	clrz
  3289  09F6  1803               	skipnc
  3290  09F7  3E01               	addlw	1
  3291  09F8  1903               	skipnz
  3292  09F9  29FB               	goto	u3751
  3293  09FA  07AE               	addwf	___lmul@product+1,f
  3294  09FB                     u3751:	
  3295  09FB  082A               	movf	___lmul@multiplicand+2,w
  3296  09FC  1103               	clrz
  3297  09FD  1803               	skipnc
  3298  09FE  3E01               	addlw	1
  3299  09FF  1903               	skipnz
  3300  0A00  2A02               	goto	u3752
  3301  0A01  07AF               	addwf	___lmul@product+2,f
  3302  0A02                     u3752:	
  3303  0A02  082B               	movf	___lmul@multiplicand+3,w
  3304  0A03  1103               	clrz
  3305  0A04  1803               	skipnc
  3306  0A05  3E01               	addlw	1
  3307  0A06  1903               	skipnz
  3308  0A07  2A09               	goto	u3753
  3309  0A08  07B0               	addwf	___lmul@product+3,f
  3310  0A09                     u3753:	
  3311  0A09                     l4064:	
  3312  0A09  3001               	movlw	1
  3313  0A0A  00AC               	movwf	??___lmul
  3314  0A0B                     u3765:	
  3315  0A0B  1003               	clrc
  3316  0A0C  0DA8               	rlf	___lmul@multiplicand,f
  3317  0A0D  0DA9               	rlf	___lmul@multiplicand+1,f
  3318  0A0E  0DAA               	rlf	___lmul@multiplicand+2,f
  3319  0A0F  0DAB               	rlf	___lmul@multiplicand+3,f
  3320  0A10  0BAC               	decfsz	??___lmul,f
  3321  0A11  2A0B               	goto	u3765
  3322  0A12                     l4066:	
  3323  0A12  3001               	movlw	1
  3324  0A13                     u3775:	
  3325  0A13  1003               	clrc
  3326  0A14  0CA7               	rrf	___lmul@multiplier+3,f
  3327  0A15  0CA6               	rrf	___lmul@multiplier+2,f
  3328  0A16  0CA5               	rrf	___lmul@multiplier+1,f
  3329  0A17  0CA4               	rrf	___lmul@multiplier,f
  3330  0A18  3EFF               	addlw	-1
  3331  0A19  1D03               	skipz
  3332  0A1A  2A13               	goto	u3775
  3333  0A1B  0827               	movf	___lmul@multiplier+3,w
  3334  0A1C  0426               	iorwf	___lmul@multiplier+2,w
  3335  0A1D  0425               	iorwf	___lmul@multiplier+1,w
  3336  0A1E  0424               	iorwf	___lmul@multiplier,w
  3337  0A1F  1D03               	skipz
  3338  0A20  2A22               	goto	u3781
  3339  0A21  2A23               	goto	u3780
  3340  0A22                     u3781:	
  3341  0A22  29EE               	goto	l4060
  3342  0A23                     u3780:	
  3343  0A23                     l4068:	
  3344  0A23  0830               	movf	___lmul@product+3,w
  3345  0A24  00A7               	movwf	?___lmul+3
  3346  0A25  082F               	movf	___lmul@product+2,w
  3347  0A26  00A6               	movwf	?___lmul+2
  3348  0A27  082E               	movf	___lmul@product+1,w
  3349  0A28  00A5               	movwf	?___lmul+1
  3350  0A29  082D               	movf	___lmul@product,w
  3351  0A2A  00A4               	movwf	?___lmul
  3352  0A2B                     l462:	
  3353  0A2B  0008               	return
  3354  0A2C                     __end_of___lmul:	
  3355                           
  3356                           	psect	text6
  3357  0922                     __ptext6:	
  3358 ;; *************** function _map *****************
  3359 ;; Defined at:
  3360 ;;		line 1 in file "./CustomLib/Conversions.h"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  x               2   20[BANK0 ] int 
  3363 ;;  in_min          2   22[BANK0 ] int 
  3364 ;;  in_max          2   24[BANK0 ] int 
  3365 ;;  out_min         2   26[BANK0 ] int 
  3366 ;;  out_max         2   28[BANK0 ] int 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  2   20[BANK0 ] int 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0, pclath, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3378 ;;      Params:         0      10       0       0       0
  3379 ;;      Locals:         0       0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0
  3381 ;;      Totals:         0      10       0       0       0
  3382 ;;Total ram usage:       10 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    4
  3385 ;; This function calls:
  3386 ;;		___awdiv
  3387 ;;		___wmul
  3388 ;; This function is called by:
  3389 ;;		_main
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           
  3394                           ;psect for function _map
  3395  0922                     _map:	
  3396  0922                     l4208:	
  3397                           ;incstack = 0
  3398                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3399                           
  3400                           
  3401                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3402  0922  1283               	bcf	3,5	;RP0=0, select bank0
  3403  0923  1303               	bcf	3,6	;RP1=0, select bank0
  3404  0924  0836               	movf	map@in_min,w
  3405  0925  0238               	subwf	map@in_max,w
  3406  0926  00AB               	movwf	___awdiv@divisor
  3407  0927  0837               	movf	map@in_min+1,w
  3408  0928  1C03               	skipc
  3409  0929  0A37               	incf	map@in_min+1,w
  3410  092A  0239               	subwf	map@in_max+1,w
  3411  092B  00AC               	movwf	___awdiv@divisor+1
  3412  092C  0836               	movf	map@in_min,w
  3413  092D  0234               	subwf	map@x,w
  3414  092E  00A4               	movwf	___wmul@multiplier
  3415  092F  0837               	movf	map@in_min+1,w
  3416  0930  1C03               	skipc
  3417  0931  0A37               	incf	map@in_min+1,w
  3418  0932  0235               	subwf	map@x+1,w
  3419  0933  00A5               	movwf	___wmul@multiplier+1
  3420  0934  083A               	movf	map@out_min,w
  3421  0935  023C               	subwf	map@out_max,w
  3422  0936  00A6               	movwf	___wmul@multiplicand
  3423  0937  083B               	movf	map@out_min+1,w
  3424  0938  1C03               	skipc
  3425  0939  0A3B               	incf	map@out_min+1,w
  3426  093A  023D               	subwf	map@out_max+1,w
  3427  093B  00A7               	movwf	___wmul@multiplicand+1
  3428  093C  120A  158A  2099  120A  158A  	fcall	___wmul
  3429  0941  1283               	bcf	3,5	;RP0=0, select bank0
  3430  0942  1303               	bcf	3,6	;RP1=0, select bank0
  3431  0943  0825               	movf	?___wmul+1,w
  3432  0944  00AE               	movwf	___awdiv@dividend+1
  3433  0945  0824               	movf	?___wmul,w
  3434  0946  00AD               	movwf	___awdiv@dividend
  3435  0947  120A  158A  23E3  120A  158A  	fcall	___awdiv
  3436  094C  1283               	bcf	3,5	;RP0=0, select bank0
  3437  094D  1303               	bcf	3,6	;RP1=0, select bank0
  3438  094E  083A               	movf	map@out_min,w
  3439  094F  072B               	addwf	?___awdiv,w
  3440  0950  00B4               	movwf	?_map
  3441  0951  083B               	movf	map@out_min+1,w
  3442  0952  1803               	skipnc
  3443  0953  0A3B               	incf	map@out_min+1,w
  3444  0954  072C               	addwf	?___awdiv+1,w
  3445  0955  00B5               	movwf	?_map+1
  3446  0956                     l83:	
  3447  0956  0008               	return
  3448  0957                     __end_of_map:	
  3449                           
  3450                           	psect	text7
  3451  0899                     __ptext7:	
  3452 ;; *************** function ___wmul *****************
  3453 ;; Defined at:
  3454 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;  multiplier      2    4[BANK0 ] unsigned int 
  3457 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;  product         2    8[BANK0 ] unsigned int 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  2    4[BANK0 ] unsigned int 
  3462 ;; Registers used:
  3463 ;;		wreg, status,2, status,0
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3469 ;;      Params:         0       4       0       0       0
  3470 ;;      Locals:         0       2       0       0       0
  3471 ;;      Temps:          0       0       0       0       0
  3472 ;;      Totals:         0       6       0       0       0
  3473 ;;Total ram usage:        6 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    3
  3476 ;; This function calls:
  3477 ;;		Nothing
  3478 ;; This function is called by:
  3479 ;;		_map
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           
  3484                           ;psect for function ___wmul
  3485  0899                     ___wmul:	
  3486  0899                     l4044:	
  3487                           ;incstack = 0
  3488                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3489                           
  3490  0899  1283               	bcf	3,5	;RP0=0, select bank0
  3491  089A  1303               	bcf	3,6	;RP1=0, select bank0
  3492  089B  01A8               	clrf	___wmul@product
  3493  089C  01A9               	clrf	___wmul@product+1
  3494  089D                     l4046:	
  3495  089D  1C24               	btfss	___wmul@multiplier,0
  3496  089E  28A0               	goto	u3701
  3497  089F  28A1               	goto	u3700
  3498  08A0                     u3701:	
  3499  08A0  28A7               	goto	l448
  3500  08A1                     u3700:	
  3501  08A1                     l4048:	
  3502  08A1  0826               	movf	___wmul@multiplicand,w
  3503  08A2  07A8               	addwf	___wmul@product,f
  3504  08A3  1803               	skipnc
  3505  08A4  0AA9               	incf	___wmul@product+1,f
  3506  08A5  0827               	movf	___wmul@multiplicand+1,w
  3507  08A6  07A9               	addwf	___wmul@product+1,f
  3508  08A7                     l448:	
  3509  08A7  3001               	movlw	1
  3510  08A8                     u3715:	
  3511  08A8  1003               	clrc
  3512  08A9  0DA6               	rlf	___wmul@multiplicand,f
  3513  08AA  0DA7               	rlf	___wmul@multiplicand+1,f
  3514  08AB  3EFF               	addlw	-1
  3515  08AC  1D03               	skipz
  3516  08AD  28A8               	goto	u3715
  3517  08AE                     l4050:	
  3518  08AE  3001               	movlw	1
  3519  08AF                     u3725:	
  3520  08AF  1003               	clrc
  3521  08B0  0CA5               	rrf	___wmul@multiplier+1,f
  3522  08B1  0CA4               	rrf	___wmul@multiplier,f
  3523  08B2  3EFF               	addlw	-1
  3524  08B3  1D03               	skipz
  3525  08B4  28AF               	goto	u3725
  3526  08B5                     l4052:	
  3527  08B5  0824               	movf	___wmul@multiplier,w
  3528  08B6  0425               	iorwf	___wmul@multiplier+1,w
  3529  08B7  1D03               	btfss	3,2
  3530  08B8  28BA               	goto	u3731
  3531  08B9  28BB               	goto	u3730
  3532  08BA                     u3731:	
  3533  08BA  289D               	goto	l4046
  3534  08BB                     u3730:	
  3535  08BB                     l4054:	
  3536  08BB  0829               	movf	___wmul@product+1,w
  3537  08BC  00A5               	movwf	?___wmul+1
  3538  08BD  0828               	movf	___wmul@product,w
  3539  08BE  00A4               	movwf	?___wmul
  3540  08BF                     l450:	
  3541  08BF  0008               	return
  3542  08C0                     __end_of___wmul:	
  3543                           
  3544                           	psect	text8
  3545  0A78                     __ptext8:	
  3546 ;; *************** function _luciSemaforo *****************
  3547 ;; Defined at:
  3548 ;;		line 428 in file "main.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;  index           1    wreg     unsigned char 
  3551 ;;  lux             1    4[BANK0 ] unsigned char 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  index           1    7[BANK0 ] unsigned char 
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3563 ;;      Params:         0       1       0       0       0
  3564 ;;      Locals:         0       1       0       0       0
  3565 ;;      Temps:          0       2       0       0       0
  3566 ;;      Totals:         0       4       0       0       0
  3567 ;;Total ram usage:        4 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    3
  3570 ;; This function calls:
  3571 ;;		Nothing
  3572 ;; This function is called by:
  3573 ;;		_main
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           
  3578                           ;psect for function _luciSemaforo
  3579  0A78                     _luciSemaforo:	
  3580                           
  3581                           ;incstack = 0
  3582                           ; Regs used in _luciSemaforo: [wreg-fsr0h+status,2+status,0]
  3583                           ;luciSemaforo@index stored from wreg
  3584  0A78  1283               	bcf	3,5	;RP0=0, select bank0
  3585  0A79  1303               	bcf	3,6	;RP1=0, select bank0
  3586  0A7A  00A7               	movwf	luciSemaforo@index
  3587  0A7B                     l4410:	
  3588                           
  3589                           ;main.c: 428: void luciSemaforo(unsigned char index, unsigned char lux);main.c: 429: {;m
      +                          ain.c: 430:     switch (index)
  3590  0A7B  2ABA               	goto	l4422
  3591  0A7C                     l329:	
  3592                           ;main.c: 434:         {;main.c: 435:         case 0:
  3593                           
  3594                           
  3595                           ;main.c: 436:             PORTCbits.RC1 = 0;
  3596  0A7C  1087               	bcf	7,1	;volatile
  3597                           
  3598                           ;main.c: 437:             PORTCbits.RC3 = 0;
  3599  0A7D  1187               	bcf	7,3	;volatile
  3600                           
  3601                           ;main.c: 438:             PORTCbits.RC0 = 1;
  3602  0A7E  1407               	bsf	7,0	;volatile
  3603                           
  3604                           ;main.c: 439:             break;
  3605  0A7F  2ACA               	goto	l340
  3606  0A80                     l331:	
  3607                           ;main.c: 440:         case 1:
  3608                           
  3609                           
  3610                           ;main.c: 441:             PORTCbits.RC0 = 0;
  3611  0A80  1007               	bcf	7,0	;volatile
  3612                           
  3613                           ;main.c: 442:             PORTCbits.RC3 = 0;
  3614  0A81  1187               	bcf	7,3	;volatile
  3615                           
  3616                           ;main.c: 443:             PORTCbits.RC1 = 1;
  3617  0A82  1487               	bsf	7,1	;volatile
  3618                           
  3619                           ;main.c: 444:             break;
  3620  0A83  2ACA               	goto	l340
  3621  0A84                     l332:	
  3622                           ;main.c: 445:         case 2:
  3623                           
  3624                           
  3625                           ;main.c: 446:             PORTCbits.RC0 = 0;
  3626  0A84  1007               	bcf	7,0	;volatile
  3627                           
  3628                           ;main.c: 447:             PORTCbits.RC1 = 0;
  3629  0A85  1087               	bcf	7,1	;volatile
  3630                           
  3631                           ;main.c: 448:             PORTCbits.RC3 = 1;
  3632  0A86  1587               	bsf	7,3	;volatile
  3633                           
  3634                           ;main.c: 449:             break;
  3635  0A87  2ACA               	goto	l340
  3636  0A88                     l4414:	
  3637  0A88  0824               	movf	luciSemaforo@lux,w
  3638  0A89  00A5               	movwf	??_luciSemaforo
  3639  0A8A  01A6               	clrf	??_luciSemaforo+1
  3640                           
  3641                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3642                           ; Switch size 1, requested type "simple"
  3643                           ; Number of cases is 1, Range of values is 0 to 0
  3644                           ; switch strategies available:
  3645                           ; Name         Instructions Cycles
  3646                           ; simple_byte            4     3 (average)
  3647                           ; direct_byte           11     8 (fixed)
  3648                           ; jumptable            260     6 (fixed)
  3649                           ;	Chosen strategy is simple_byte
  3650  0A8B  0826               	movf	??_luciSemaforo+1,w
  3651  0A8C  3A00               	xorlw	0	; case 0
  3652  0A8D  1903               	skipnz
  3653  0A8E  2A90               	goto	l4880
  3654  0A8F  2ACA               	goto	l340
  3655  0A90                     l4880:	
  3656                           
  3657                           ; Switch size 1, requested type "simple"
  3658                           ; Number of cases is 3, Range of values is 0 to 2
  3659                           ; switch strategies available:
  3660                           ; Name         Instructions Cycles
  3661                           ; simple_byte           10     6 (average)
  3662                           ; direct_byte           17     8 (fixed)
  3663                           ; jumptable            260     6 (fixed)
  3664                           ;	Chosen strategy is simple_byte
  3665  0A90  0825               	movf	??_luciSemaforo,w
  3666  0A91  3A00               	xorlw	0	; case 0
  3667  0A92  1903               	skipnz
  3668  0A93  2A7C               	goto	l329
  3669  0A94  3A01               	xorlw	1	; case 1
  3670  0A95  1903               	skipnz
  3671  0A96  2A80               	goto	l331
  3672  0A97  3A03               	xorlw	3	; case 2
  3673  0A98  1903               	skipnz
  3674  0A99  2A84               	goto	l332
  3675  0A9A  2ACA               	goto	l340
  3676  0A9B                     l336:	
  3677                           ;main.c: 455:         {;main.c: 456:         case 0:
  3678                           
  3679                           
  3680                           ;main.c: 457:             PORTBbits.RB1 = 0;
  3681  0A9B  1086               	bcf	6,1	;volatile
  3682                           
  3683                           ;main.c: 458:             PORTBbits.RB6 = 0;
  3684  0A9C  1306               	bcf	6,6	;volatile
  3685                           
  3686                           ;main.c: 459:             PORTBbits.RB7 = 1;
  3687  0A9D  1786               	bsf	6,7	;volatile
  3688                           
  3689                           ;main.c: 460:             break;
  3690  0A9E  2ACA               	goto	l340
  3691  0A9F                     l338:	
  3692                           ;main.c: 461:         case 1:
  3693                           
  3694                           
  3695                           ;main.c: 462:             PORTBbits.RB7 = 0;
  3696  0A9F  1386               	bcf	6,7	;volatile
  3697                           
  3698                           ;main.c: 463:             PORTBbits.RB6 = 0;
  3699  0AA0  1306               	bcf	6,6	;volatile
  3700                           
  3701                           ;main.c: 464:             PORTBbits.RB1 = 1;
  3702  0AA1  1486               	bsf	6,1	;volatile
  3703                           
  3704                           ;main.c: 465:             break;
  3705  0AA2  2ACA               	goto	l340
  3706  0AA3                     l339:	
  3707                           ;main.c: 466:         case 2:
  3708                           
  3709                           
  3710                           ;main.c: 467:             PORTBbits.RB7 = 0;
  3711  0AA3  1386               	bcf	6,7	;volatile
  3712                           
  3713                           ;main.c: 468:             PORTBbits.RB1 = 0;
  3714  0AA4  1086               	bcf	6,1	;volatile
  3715                           
  3716                           ;main.c: 469:             PORTBbits.RB6 = 1;
  3717  0AA5  1706               	bsf	6,6	;volatile
  3718                           
  3719                           ;main.c: 470:             break;
  3720  0AA6  2ACA               	goto	l340
  3721  0AA7                     l4418:	
  3722  0AA7  0824               	movf	luciSemaforo@lux,w
  3723  0AA8  00A5               	movwf	??_luciSemaforo
  3724  0AA9  01A6               	clrf	??_luciSemaforo+1
  3725                           
  3726                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3727                           ; Switch size 1, requested type "simple"
  3728                           ; Number of cases is 1, Range of values is 0 to 0
  3729                           ; switch strategies available:
  3730                           ; Name         Instructions Cycles
  3731                           ; simple_byte            4     3 (average)
  3732                           ; direct_byte           11     8 (fixed)
  3733                           ; jumptable            260     6 (fixed)
  3734                           ;	Chosen strategy is simple_byte
  3735  0AAA  0826               	movf	??_luciSemaforo+1,w
  3736  0AAB  3A00               	xorlw	0	; case 0
  3737  0AAC  1903               	skipnz
  3738  0AAD  2AAF               	goto	l4882
  3739  0AAE  2ACA               	goto	l340
  3740  0AAF                     l4882:	
  3741                           
  3742                           ; Switch size 1, requested type "simple"
  3743                           ; Number of cases is 3, Range of values is 0 to 2
  3744                           ; switch strategies available:
  3745                           ; Name         Instructions Cycles
  3746                           ; simple_byte           10     6 (average)
  3747                           ; direct_byte           17     8 (fixed)
  3748                           ; jumptable            260     6 (fixed)
  3749                           ;	Chosen strategy is simple_byte
  3750  0AAF  0825               	movf	??_luciSemaforo,w
  3751  0AB0  3A00               	xorlw	0	; case 0
  3752  0AB1  1903               	skipnz
  3753  0AB2  2A9B               	goto	l336
  3754  0AB3  3A01               	xorlw	1	; case 1
  3755  0AB4  1903               	skipnz
  3756  0AB5  2A9F               	goto	l338
  3757  0AB6  3A03               	xorlw	3	; case 2
  3758  0AB7  1903               	skipnz
  3759  0AB8  2AA3               	goto	l339
  3760  0AB9  2ACA               	goto	l340
  3761  0ABA                     l4422:	
  3762  0ABA  0827               	movf	luciSemaforo@index,w
  3763  0ABB  00A5               	movwf	??_luciSemaforo
  3764  0ABC  01A6               	clrf	??_luciSemaforo+1
  3765                           
  3766                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3767                           ; Switch size 1, requested type "simple"
  3768                           ; Number of cases is 1, Range of values is 0 to 0
  3769                           ; switch strategies available:
  3770                           ; Name         Instructions Cycles
  3771                           ; simple_byte            4     3 (average)
  3772                           ; direct_byte           11     8 (fixed)
  3773                           ; jumptable            260     6 (fixed)
  3774                           ;	Chosen strategy is simple_byte
  3775  0ABD  0826               	movf	??_luciSemaforo+1,w
  3776  0ABE  3A00               	xorlw	0	; case 0
  3777  0ABF  1903               	skipnz
  3778  0AC0  2AC2               	goto	l4884
  3779  0AC1  2ACA               	goto	l340
  3780  0AC2                     l4884:	
  3781                           
  3782                           ; Switch size 1, requested type "simple"
  3783                           ; Number of cases is 2, Range of values is 0 to 1
  3784                           ; switch strategies available:
  3785                           ; Name         Instructions Cycles
  3786                           ; simple_byte            7     4 (average)
  3787                           ; direct_byte           14     8 (fixed)
  3788                           ; jumptable            260     6 (fixed)
  3789                           ;	Chosen strategy is simple_byte
  3790  0AC2  0825               	movf	??_luciSemaforo,w
  3791  0AC3  3A00               	xorlw	0	; case 0
  3792  0AC4  1903               	skipnz
  3793  0AC5  2A88               	goto	l4414
  3794  0AC6  3A01               	xorlw	1	; case 1
  3795  0AC7  1903               	skipnz
  3796  0AC8  2AA7               	goto	l4418
  3797  0AC9  2ACA               	goto	l340
  3798  0ACA                     l340:	
  3799  0ACA  0008               	return
  3800  0ACB                     __end_of_luciSemaforo:	
  3801                           
  3802                           	psect	text9
  3803  0821                     __ptext9:	
  3804 ;; *************** function _init_ADC *****************
  3805 ;; Defined at:
  3806 ;;		line 332 in file "main.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;		None
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;		None
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		wreg, status,2
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3820 ;;      Params:         0       0       0       0       0
  3821 ;;      Locals:         0       0       0       0       0
  3822 ;;      Temps:          0       1       0       0       0
  3823 ;;      Totals:         0       1       0       0       0
  3824 ;;Total ram usage:        1 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    3
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_main
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           
  3835                           ;psect for function _init_ADC
  3836  0821                     _init_ADC:	
  3837  0821                     l4358:	
  3838                           ;incstack = 0
  3839                           ; Regs used in _init_ADC: [wreg+status,2]
  3840                           
  3841                           
  3842                           ;main.c: 334:     TRISA = 0xE3;
  3843  0821  30E3               	movlw	227
  3844  0822  1683               	bsf	3,5	;RP0=1, select bank1
  3845  0823  1303               	bcf	3,6	;RP1=0, select bank1
  3846  0824  0085               	movwf	5	;volatile
  3847  0825                     l4360:	
  3848                           
  3849                           ;main.c: 335:     ADCON0 = 0x00;
  3850  0825  1283               	bcf	3,5	;RP0=0, select bank0
  3851  0826  1303               	bcf	3,6	;RP1=0, select bank0
  3852  0827  019F               	clrf	31	;volatile
  3853  0828                     l4362:	
  3854                           
  3855                           ;main.c: 336:     ADCON1 = 0x80;
  3856  0828  3080               	movlw	128
  3857  0829  1683               	bsf	3,5	;RP0=1, select bank1
  3858  082A  1303               	bcf	3,6	;RP1=0, select bank1
  3859  082B  009F               	movwf	31	;volatile
  3860  082C                     l4364:	
  3861                           
  3862                           ;main.c: 337:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3863  082C  3019               	movlw	25
  3864  082D  1283               	bcf	3,5	;RP0=0, select bank0
  3865  082E  1303               	bcf	3,6	;RP1=0, select bank0
  3866  082F  00A4               	movwf	??_init_ADC
  3867  0830                     u4627:	
  3868  0830  0BA4               	decfsz	??_init_ADC,f
  3869  0831  2830               	goto	u4627
  3870  0832  2833               	nop2
  3871  0833                     l280:	
  3872  0833  0008               	return
  3873  0834                     __end_of_init_ADC:	
  3874                           
  3875                           	psect	text10
  3876  0F37                     __ptext10:	
  3877 ;; *************** function _bitParita *****************
  3878 ;; Defined at:
  3879 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;  rx              1    wreg     PTR unsigned char 
  3882 ;;		 -> dataFromGateway(15), 
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;  rx              1   21[BANK0 ] PTR unsigned char 
  3885 ;;		 -> dataFromGateway(15), 
  3886 ;;  y               2   19[BANK0 ] int 
  3887 ;;  y               2   17[BANK0 ] int 
  3888 ;;  i               2   24[BANK0 ] int 
  3889 ;;  i               2   22[BANK0 ] int 
  3890 ;;  errorRow        1   16[BANK0 ] unsigned char 
  3891 ;;  error           1   15[BANK0 ] unsigned char 
  3892 ;;  errorColumn     1   14[BANK0 ] unsigned char 
  3893 ;;  sommaColumn     1   13[BANK0 ] unsigned char 
  3894 ;;  sommaRow        1   12[BANK0 ] unsigned char 
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3904 ;;      Params:         0       0       0       0       0
  3905 ;;      Locals:         0      14       0       0       0
  3906 ;;      Temps:          0       4       0       0       0
  3907 ;;      Totals:         0      18       0       0       0
  3908 ;;Total ram usage:       18 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    4
  3911 ;; This function calls:
  3912 ;;		_bitChange
  3913 ;; This function is called by:
  3914 ;;		_main
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           
  3919                           ;psect for function _bitParita
  3920  0F37                     _bitParita:	
  3921                           
  3922                           ;incstack = 0
  3923                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3924                           ;bitParita@rx stored from wreg
  3925  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  3926  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  3927  0F39  00B5               	movwf	bitParita@rx
  3928  0F3A                     l4224:	
  3929                           
  3930                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3931  0F3A  01AF               	clrf	bitParita@error
  3932                           
  3933                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3934  0F3B  01AC               	clrf	bitParita@sommaRow
  3935                           
  3936                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3937  0F3C  01B0               	clrf	bitParita@errorRow
  3938                           
  3939                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  3940  0F3D  01AD               	clrf	bitParita@sommaColumn
  3941                           
  3942                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  3943  0F3E  01AE               	clrf	bitParita@errorColumn
  3944                           
  3945                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  3946  0F3F  01B6               	clrf	bitParita@i
  3947  0F40  01B7               	clrf	bitParita@i+1
  3948  0F41                     l4230:	
  3949                           
  3950                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  3951  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  3952  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  3953  0F43  01B1               	clrf	bitParita@y
  3954  0F44  01B2               	clrf	bitParita@y+1
  3955  0F45                     l4236:	
  3956                           
  3957                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  3958  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0F47  0836               	movf	bitParita@i,w
  3961  0F48  0735               	addwf	bitParita@rx,w
  3962  0F49  00A8               	movwf	??_bitParita
  3963  0F4A  0828               	movf	??_bitParita,w
  3964  0F4B  0084               	movwf	4
  3965  0F4C  1383               	bcf	3,7	;select IRP bank0
  3966  0F4D  0800               	movf	0,w
  3967  0F4E  00A9               	movwf	??_bitParita+1
  3968  0F4F  0A31               	incf	bitParita@y,w
  3969  0F50  2F53               	goto	u4114
  3970  0F51                     u4115:	
  3971  0F51  1003               	clrc
  3972  0F52  0CA9               	rrf	??_bitParita+1,f
  3973  0F53                     u4114:	
  3974  0F53  3EFF               	addlw	-1
  3975  0F54  1D03               	skipz
  3976  0F55  2F51               	goto	u4115
  3977  0F56  0829               	movf	??_bitParita+1,w
  3978  0F57  3901               	andlw	1
  3979  0F58  00AA               	movwf	??_bitParita+2
  3980  0F59  082A               	movf	??_bitParita+2,w
  3981  0F5A  07AC               	addwf	bitParita@sommaRow,f
  3982  0F5B                     l4238:	
  3983                           
  3984                           ;./CustomLib/BitsFlow.h: 26:         }
  3985  0F5B  3001               	movlw	1
  3986  0F5C  07B1               	addwf	bitParita@y,f
  3987  0F5D  1803               	skipnc
  3988  0F5E  0AB2               	incf	bitParita@y+1,f
  3989  0F5F  3000               	movlw	0
  3990  0F60  07B2               	addwf	bitParita@y+1,f
  3991  0F61                     l4240:	
  3992  0F61  0832               	movf	bitParita@y+1,w
  3993  0F62  3A80               	xorlw	128
  3994  0F63  00FF               	movwf	btemp+1
  3995  0F64  3080               	movlw	128
  3996  0F65  027F               	subwf	btemp+1,w
  3997  0F66  1D03               	skipz
  3998  0F67  2F6A               	goto	u4125
  3999  0F68  3008               	movlw	8
  4000  0F69  0231               	subwf	bitParita@y,w
  4001  0F6A                     u4125:	
  4002  0F6A  1C03               	skipc
  4003  0F6B  2F6D               	goto	u4121
  4004  0F6C  2F6E               	goto	u4120
  4005  0F6D                     u4121:	
  4006  0F6D  2F45               	goto	l4236
  4007  0F6E                     u4120:	
  4008  0F6E                     l111:	
  4009                           
  4010                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  4011  0F6E  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0F6F  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0F70  1C2C               	btfss	bitParita@sommaRow,0
  4014  0F71  2F73               	goto	u4131
  4015  0F72  2F74               	goto	u4130
  4016  0F73                     u4131:	
  4017  0F73  2F7A               	goto	l112
  4018  0F74                     u4130:	
  4019  0F74                     l4242:	
  4020                           
  4021                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  4022  0F74  01AF               	clrf	bitParita@error
  4023  0F75  0AAF               	incf	bitParita@error,f
  4024  0F76                     l4244:	
  4025                           
  4026                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  4027  0F76  0836               	movf	bitParita@i,w
  4028  0F77  00A8               	movwf	??_bitParita
  4029  0F78  0828               	movf	??_bitParita,w
  4030  0F79  00B0               	movwf	bitParita@errorRow
  4031  0F7A                     l112:	
  4032                           ;./CustomLib/BitsFlow.h: 31:         }
  4033                           
  4034                           
  4035                           ;./CustomLib/BitsFlow.h: 32:     }
  4036  0F7A  3001               	movlw	1
  4037  0F7B  07B6               	addwf	bitParita@i,f
  4038  0F7C  1803               	skipnc
  4039  0F7D  0AB7               	incf	bitParita@i+1,f
  4040  0F7E  3000               	movlw	0
  4041  0F7F  07B7               	addwf	bitParita@i+1,f
  4042  0F80                     l4246:	
  4043  0F80  0837               	movf	bitParita@i+1,w
  4044  0F81  3A80               	xorlw	128
  4045  0F82  00FF               	movwf	btemp+1
  4046  0F83  3080               	movlw	128
  4047  0F84  027F               	subwf	btemp+1,w
  4048  0F85  1D03               	skipz
  4049  0F86  2F89               	goto	u4145
  4050  0F87  3005               	movlw	5
  4051  0F88  0236               	subwf	bitParita@i,w
  4052  0F89                     u4145:	
  4053  0F89  1C03               	skipc
  4054  0F8A  2F8C               	goto	u4141
  4055  0F8B  2F8D               	goto	u4140
  4056  0F8C                     u4141:	
  4057  0F8C  2F41               	goto	l4230
  4058  0F8D                     u4140:	
  4059  0F8D                     l4248:	
  4060                           
  4061                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  4062  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  4063  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  4064  0F8F  01B8               	clrf	bitParita@i_347
  4065  0F90  01B9               	clrf	bitParita@i_347+1
  4066  0F91                     l4254:	
  4067                           
  4068                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  4069  0F91  1283               	bcf	3,5	;RP0=0, select bank0
  4070  0F92  1303               	bcf	3,6	;RP1=0, select bank0
  4071  0F93  01B3               	clrf	bitParita@y_348
  4072  0F94  01B4               	clrf	bitParita@y_348+1
  4073  0F95                     l4260:	
  4074                           
  4075                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  4076  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  4077  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  4078  0F97  0833               	movf	bitParita@y_348,w
  4079  0F98  0735               	addwf	bitParita@rx,w
  4080  0F99  00A8               	movwf	??_bitParita
  4081  0F9A  0828               	movf	??_bitParita,w
  4082  0F9B  0084               	movwf	4
  4083  0F9C  1383               	bcf	3,7	;select IRP bank0
  4084  0F9D  0800               	movf	0,w
  4085  0F9E  00A9               	movwf	??_bitParita+1
  4086  0F9F  0A38               	incf	bitParita@i_347,w
  4087  0FA0  2FA3               	goto	u4154
  4088  0FA1                     u4155:	
  4089  0FA1  1003               	clrc
  4090  0FA2  0CA9               	rrf	??_bitParita+1,f
  4091  0FA3                     u4154:	
  4092  0FA3  3EFF               	addlw	-1
  4093  0FA4  1D03               	skipz
  4094  0FA5  2FA1               	goto	u4155
  4095  0FA6  0829               	movf	??_bitParita+1,w
  4096  0FA7  3901               	andlw	1
  4097  0FA8  00AA               	movwf	??_bitParita+2
  4098  0FA9  082A               	movf	??_bitParita+2,w
  4099  0FAA  07AD               	addwf	bitParita@sommaColumn,f
  4100  0FAB                     l4262:	
  4101                           
  4102                           ;./CustomLib/BitsFlow.h: 39:         }
  4103  0FAB  3001               	movlw	1
  4104  0FAC  07B3               	addwf	bitParita@y_348,f
  4105  0FAD  1803               	skipnc
  4106  0FAE  0AB4               	incf	bitParita@y_348+1,f
  4107  0FAF  3000               	movlw	0
  4108  0FB0  07B4               	addwf	bitParita@y_348+1,f
  4109  0FB1                     l4264:	
  4110  0FB1  0834               	movf	bitParita@y_348+1,w
  4111  0FB2  3A80               	xorlw	128
  4112  0FB3  00FF               	movwf	btemp+1
  4113  0FB4  3080               	movlw	128
  4114  0FB5  027F               	subwf	btemp+1,w
  4115  0FB6  1D03               	skipz
  4116  0FB7  2FBA               	goto	u4165
  4117  0FB8  3004               	movlw	4
  4118  0FB9  0233               	subwf	bitParita@y_348,w
  4119  0FBA                     u4165:	
  4120  0FBA  1C03               	skipc
  4121  0FBB  2FBD               	goto	u4161
  4122  0FBC  2FBE               	goto	u4160
  4123  0FBD                     u4161:	
  4124  0FBD  2F95               	goto	l4260
  4125  0FBE                     u4160:	
  4126  0FBE                     l116:	
  4127                           
  4128                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  4129  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  4130  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  4131  0FC0  1C2D               	btfss	bitParita@sommaColumn,0
  4132  0FC1  2FC3               	goto	u4171
  4133  0FC2  2FC4               	goto	u4170
  4134  0FC3                     u4171:	
  4135  0FC3  2FCA               	goto	l117
  4136  0FC4                     u4170:	
  4137  0FC4                     l4266:	
  4138                           
  4139                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  4140  0FC4  01AF               	clrf	bitParita@error
  4141  0FC5  0AAF               	incf	bitParita@error,f
  4142  0FC6                     l4268:	
  4143                           
  4144                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  4145  0FC6  0838               	movf	bitParita@i_347,w
  4146  0FC7  00A8               	movwf	??_bitParita
  4147  0FC8  0828               	movf	??_bitParita,w
  4148  0FC9  00AE               	movwf	bitParita@errorColumn
  4149  0FCA                     l117:	
  4150                           ;./CustomLib/BitsFlow.h: 44:         }
  4151                           
  4152                           
  4153                           ;./CustomLib/BitsFlow.h: 45:     }
  4154  0FCA  3001               	movlw	1
  4155  0FCB  07B8               	addwf	bitParita@i_347,f
  4156  0FCC  1803               	skipnc
  4157  0FCD  0AB9               	incf	bitParita@i_347+1,f
  4158  0FCE  3000               	movlw	0
  4159  0FCF  07B9               	addwf	bitParita@i_347+1,f
  4160  0FD0                     l4270:	
  4161  0FD0  0839               	movf	bitParita@i_347+1,w
  4162  0FD1  3A80               	xorlw	128
  4163  0FD2  00FF               	movwf	btemp+1
  4164  0FD3  3080               	movlw	128
  4165  0FD4  027F               	subwf	btemp+1,w
  4166  0FD5  1D03               	skipz
  4167  0FD6  2FD9               	goto	u4185
  4168  0FD7  3008               	movlw	8
  4169  0FD8  0238               	subwf	bitParita@i_347,w
  4170  0FD9                     u4185:	
  4171  0FD9  1C03               	skipc
  4172  0FDA  2FDC               	goto	u4181
  4173  0FDB  2FDD               	goto	u4180
  4174  0FDC                     u4181:	
  4175  0FDC  2F91               	goto	l4254
  4176  0FDD                     u4180:	
  4177  0FDD                     l4272:	
  4178                           
  4179                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  4180  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  4181  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  4182  0FDF  082F               	movf	bitParita@error,w
  4183  0FE0  1903               	btfsc	3,2
  4184  0FE1  2FE3               	goto	u4191
  4185  0FE2  2FE4               	goto	u4190
  4186  0FE3                     u4191:	
  4187  0FE3  2FFF               	goto	l119
  4188  0FE4                     u4190:	
  4189  0FE4                     l4274:	
  4190                           
  4191                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  4192  0FE4  082E               	movf	bitParita@errorColumn,w
  4193  0FE5  00A8               	movwf	??_bitParita
  4194  0FE6  0828               	movf	??_bitParita,w
  4195  0FE7  00A4               	movwf	bitChange@n
  4196  0FE8  0830               	movf	bitParita@errorRow,w
  4197  0FE9  0735               	addwf	bitParita@rx,w
  4198  0FEA  00A9               	movwf	??_bitParita+1
  4199  0FEB  0829               	movf	??_bitParita+1,w
  4200  0FEC  0084               	movwf	4
  4201  0FED  1383               	bcf	3,7	;select IRP bank0
  4202  0FEE  0800               	movf	0,w
  4203  0FEF  120A  158A  20C0  120A  158A  	fcall	_bitChange
  4204  0FF4  1283               	bcf	3,5	;RP0=0, select bank0
  4205  0FF5  1303               	bcf	3,6	;RP1=0, select bank0
  4206  0FF6  00AA               	movwf	??_bitParita+2
  4207  0FF7  0830               	movf	bitParita@errorRow,w
  4208  0FF8  0735               	addwf	bitParita@rx,w
  4209  0FF9  00AB               	movwf	??_bitParita+3
  4210  0FFA  082B               	movf	??_bitParita+3,w
  4211  0FFB  0084               	movwf	4
  4212  0FFC  082A               	movf	??_bitParita+2,w
  4213  0FFD  1383               	bcf	3,7	;select IRP bank0
  4214  0FFE  0080               	movwf	0
  4215  0FFF                     l119:	
  4216  0FFF  0008               	return
  4217  1000                     __end_of_bitParita:	
  4218                           
  4219                           	psect	text11
  4220  08C0                     __ptext11:	
  4221 ;; *************** function _bitChange *****************
  4222 ;; Defined at:
  4223 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  dato            1    wreg     unsigned char 
  4226 ;;  n               1    4[BANK0 ] unsigned char 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  dato            1    7[BANK0 ] unsigned char 
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      unsigned char 
  4231 ;; Registers used:
  4232 ;;		wreg, status,2, status,0
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4238 ;;      Params:         0       1       0       0       0
  4239 ;;      Locals:         0       1       0       0       0
  4240 ;;      Temps:          0       2       0       0       0
  4241 ;;      Totals:         0       4       0       0       0
  4242 ;;Total ram usage:        4 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    3
  4245 ;; This function calls:
  4246 ;;		Nothing
  4247 ;; This function is called by:
  4248 ;;		_bitParita
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           
  4253                           ;psect for function _bitChange
  4254  08C0                     _bitChange:	
  4255                           
  4256                           ;incstack = 0
  4257                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  4258                           ;bitChange@dato stored from wreg
  4259  08C0  1283               	bcf	3,5	;RP0=0, select bank0
  4260  08C1  1303               	bcf	3,6	;RP1=0, select bank0
  4261  08C2  00A7               	movwf	bitChange@dato
  4262  08C3                     l3942:	
  4263                           
  4264                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  4265  08C3  3001               	movlw	1
  4266  08C4  00A5               	movwf	??_bitChange
  4267  08C5  0A24               	incf	bitChange@n,w
  4268  08C6  28C9               	goto	u3544
  4269  08C7                     u3545:	
  4270  08C7  1003               	clrc
  4271  08C8  0DA5               	rlf	??_bitChange,f
  4272  08C9                     u3544:	
  4273  08C9  3EFF               	addlw	-1
  4274  08CA  1D03               	skipz
  4275  08CB  28C7               	goto	u3545
  4276  08CC  0825               	movf	??_bitChange,w
  4277  08CD  0527               	andwf	bitChange@dato,w
  4278  08CE  1903               	btfsc	3,2
  4279  08CF  28D1               	goto	u3551
  4280  08D0  28D2               	goto	u3550
  4281  08D1                     u3551:	
  4282  08D1  28E1               	goto	l3950
  4283  08D2                     u3550:	
  4284  08D2                     l3944:	
  4285                           
  4286                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  4287  08D2  3001               	movlw	1
  4288  08D3  00A5               	movwf	??_bitChange
  4289  08D4  0A24               	incf	bitChange@n,w
  4290  08D5  28D8               	goto	u3564
  4291  08D6                     u3565:	
  4292  08D6  1003               	clrc
  4293  08D7  0DA5               	rlf	??_bitChange,f
  4294  08D8                     u3564:	
  4295  08D8  3EFF               	addlw	-1
  4296  08D9  1D03               	skipz
  4297  08DA  28D6               	goto	u3565
  4298  08DB  0825               	movf	??_bitChange,w
  4299  08DC  00A6               	movwf	??_bitChange+1
  4300  08DD  0826               	movf	??_bitChange+1,w
  4301  08DE  04A7               	iorwf	bitChange@dato,f
  4302  08DF  0827               	movf	bitChange@dato,w
  4303  08E0  28F0               	goto	l104
  4304  08E1                     l3950:	
  4305                           
  4306                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  4307  08E1  3001               	movlw	1
  4308  08E2  00A5               	movwf	??_bitChange
  4309  08E3  0A24               	incf	bitChange@n,w
  4310  08E4  28E7               	goto	u3574
  4311  08E5                     u3575:	
  4312  08E5  1003               	clrc
  4313  08E6  0DA5               	rlf	??_bitChange,f
  4314  08E7                     u3574:	
  4315  08E7  3EFF               	addlw	-1
  4316  08E8  1D03               	skipz
  4317  08E9  28E5               	goto	u3575
  4318  08EA  0825               	movf	??_bitChange,w
  4319  08EB  3AFF               	xorlw	255
  4320  08EC  00A6               	movwf	??_bitChange+1
  4321  08ED  0826               	movf	??_bitChange+1,w
  4322  08EE  05A7               	andwf	bitChange@dato,f
  4323  08EF  0827               	movf	bitChange@dato,w
  4324  08F0                     l104:	
  4325  08F0  0008               	return
  4326  08F1                     __end_of_bitChange:	
  4327                           
  4328                           	psect	text12
  4329  06A1                     __ptext12:	
  4330 ;; *************** function _UpdateTimes *****************
  4331 ;; Defined at:
  4332 ;;		line 4 in file "./CustomLib/TrafficLight.h"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  _semafori       1    wreg     PTR PTR struct .
  4335 ;;		 -> Semafori(8), 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  _semafori       1   23[BANK0 ] PTR PTR struct .
  4338 ;;		 -> Semafori(8), 
  4339 ;;  i               1   22[BANK0 ] unsigned char 
  4340 ;;  l               1   24[BANK0 ] unsigned char 
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  1    wreg      void 
  4343 ;; Registers used:
  4344 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4350 ;;      Params:         0       0       0       0       0
  4351 ;;      Locals:         0       3       0       0       0
  4352 ;;      Temps:          0      18       0       0       0
  4353 ;;      Totals:         0      21       0       0       0
  4354 ;;Total ram usage:       21 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    3
  4357 ;; This function calls:
  4358 ;;		Nothing
  4359 ;; This function is called by:
  4360 ;;		_main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _UpdateTimes
  4366  06A1                     _UpdateTimes:	
  4367                           
  4368                           ;incstack = 0
  4369                           ; Regs used in _UpdateTimes: [wreg-fsr0h+status,2+status,0]
  4370                           ;UpdateTimes@_semafori stored from wreg
  4371  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  4372  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  4373  06A3  00B7               	movwf	UpdateTimes@_semafori
  4374  06A4                     l4276:	
  4375                           
  4376                           ;./CustomLib/TrafficLight.h: 4: void UpdateTimes(_Semafori _semafori);./CustomLib/Traffi
      +                          cLight.h: 5: {;./CustomLib/TrafficLight.h: 7:     for (unsigned char l = 0; l < n_semafo
      +                          ri; l++)
  4377  06A4  01B8               	clrf	UpdateTimes@l
  4378  06A5                     l4282:	
  4379                           
  4380                           ;./CustomLib/TrafficLight.h: 8:     {;./CustomLib/TrafficLight.h: 9:         for (unsign
      +                          ed char i = 0; i < 3; i++)
  4381  06A5  01B6               	clrf	UpdateTimes@i
  4382  06A6                     l4288:	
  4383                           
  4384                           ;./CustomLib/TrafficLight.h: 10:         {;./CustomLib/TrafficLight.h: 11:             i
      +                          f ((*(_semafori)[l]).times[i] != (*(_semafori)[l]).new_times[i])
  4385  06A6  0838               	movf	UpdateTimes@l,w
  4386  06A7  00A4               	movwf	??_UpdateTimes
  4387  06A8  0724               	addwf	??_UpdateTimes,w
  4388  06A9  0737               	addwf	UpdateTimes@_semafori,w
  4389  06AA  00A5               	movwf	??_UpdateTimes+1
  4390  06AB  0825               	movf	??_UpdateTimes+1,w
  4391  06AC  0084               	movwf	4
  4392  06AD  1383               	bcf	3,7	;select IRP bank0
  4393  06AE  0800               	movf	0,w
  4394  06AF  00A6               	movwf	??_UpdateTimes+2
  4395  06B0  0A84               	incf	4,f
  4396  06B1  0800               	movf	0,w
  4397  06B2  00A7               	movwf	??_UpdateTimes+3
  4398  06B3  0836               	movf	UpdateTimes@i,w
  4399  06B4  00A8               	movwf	??_UpdateTimes+4
  4400  06B5  0728               	addwf	??_UpdateTimes+4,w
  4401  06B6  3E06               	addlw	6
  4402  06B7  0726               	addwf	??_UpdateTimes+2,w
  4403  06B8  00A9               	movwf	??_UpdateTimes+5
  4404  06B9  0827               	movf	??_UpdateTimes+3,w
  4405  06BA  1803               	skipnc
  4406  06BB  3E01               	addlw	1
  4407  06BC  00AA               	movwf	??_UpdateTimes+6
  4408  06BD  0829               	movf	??_UpdateTimes+5,w
  4409  06BE  0084               	movwf	4
  4410  06BF  1783               	bsf	3,7
  4411  06C0  1C2A               	btfss	??_UpdateTimes+6,0
  4412  06C1  1383               	bcf	3,7
  4413  06C2  0800               	movf	0,w
  4414  06C3  00AB               	movwf	??_UpdateTimes+7
  4415  06C4  0A84               	incf	4,f
  4416  06C5  0800               	movf	0,w
  4417  06C6  00AC               	movwf	??_UpdateTimes+8
  4418  06C7  0838               	movf	UpdateTimes@l,w
  4419  06C8  00AD               	movwf	??_UpdateTimes+9
  4420  06C9  072D               	addwf	??_UpdateTimes+9,w
  4421  06CA  0737               	addwf	UpdateTimes@_semafori,w
  4422  06CB  00AE               	movwf	??_UpdateTimes+10
  4423  06CC  082E               	movf	??_UpdateTimes+10,w
  4424  06CD  0084               	movwf	4
  4425  06CE  1383               	bcf	3,7	;select IRP bank0
  4426  06CF  0800               	movf	0,w
  4427  06D0  00AF               	movwf	??_UpdateTimes+11
  4428  06D1  0A84               	incf	4,f
  4429  06D2  0800               	movf	0,w
  4430  06D3  00B0               	movwf	??_UpdateTimes+12
  4431  06D4  0836               	movf	UpdateTimes@i,w
  4432  06D5  00B1               	movwf	??_UpdateTimes+13
  4433  06D6  0731               	addwf	??_UpdateTimes+13,w
  4434  06D7  072F               	addwf	??_UpdateTimes+11,w
  4435  06D8  00B2               	movwf	??_UpdateTimes+14
  4436  06D9  0830               	movf	??_UpdateTimes+12,w
  4437  06DA  1803               	skipnc
  4438  06DB  3E01               	addlw	1
  4439  06DC  00B3               	movwf	??_UpdateTimes+15
  4440  06DD  0832               	movf	??_UpdateTimes+14,w
  4441  06DE  0084               	movwf	4
  4442  06DF  1783               	bsf	3,7
  4443  06E0  1C33               	btfss	??_UpdateTimes+15,0
  4444  06E1  1383               	bcf	3,7
  4445  06E2  0800               	movf	0,w
  4446  06E3  00B4               	movwf	??_UpdateTimes+16
  4447  06E4  0A84               	incf	4,f
  4448  06E5  0800               	movf	0,w
  4449  06E6  00B5               	movwf	??_UpdateTimes+17
  4450  06E7  082C               	movf	??_UpdateTimes+8,w
  4451  06E8  0635               	xorwf	??_UpdateTimes+17,w
  4452  06E9  1D03               	skipz
  4453  06EA  2EED               	goto	u4205
  4454  06EB  082B               	movf	??_UpdateTimes+7,w
  4455  06EC  0634               	xorwf	??_UpdateTimes+16,w
  4456  06ED                     u4205:	
  4457  06ED  1903               	skipnz
  4458  06EE  2EF0               	goto	u4201
  4459  06EF  2EF1               	goto	u4200
  4460  06F0                     u4201:	
  4461  06F0  2F32               	goto	l4292
  4462  06F1                     u4200:	
  4463  06F1                     l4290:	
  4464                           
  4465                           ;./CustomLib/TrafficLight.h: 12:             {;./CustomLib/TrafficLight.h: 13:          
      +                                 (*(_semafori)[l]).times[i] = (*(_semafori)[l]).new_times[i];
  4466  06F1  0838               	movf	UpdateTimes@l,w
  4467  06F2  00A4               	movwf	??_UpdateTimes
  4468  06F3  0724               	addwf	??_UpdateTimes,w
  4469  06F4  0737               	addwf	UpdateTimes@_semafori,w
  4470  06F5  00A5               	movwf	??_UpdateTimes+1
  4471  06F6  0825               	movf	??_UpdateTimes+1,w
  4472  06F7  0084               	movwf	4
  4473  06F8  1383               	bcf	3,7	;select IRP bank0
  4474  06F9  0800               	movf	0,w
  4475  06FA  00A6               	movwf	??_UpdateTimes+2
  4476  06FB  0A84               	incf	4,f
  4477  06FC  0800               	movf	0,w
  4478  06FD  00A7               	movwf	??_UpdateTimes+3
  4479  06FE  0836               	movf	UpdateTimes@i,w
  4480  06FF  00A8               	movwf	??_UpdateTimes+4
  4481  0700  0728               	addwf	??_UpdateTimes+4,w
  4482  0701  3E06               	addlw	6
  4483  0702  0726               	addwf	??_UpdateTimes+2,w
  4484  0703  00A9               	movwf	??_UpdateTimes+5
  4485  0704  0827               	movf	??_UpdateTimes+3,w
  4486  0705  1803               	skipnc
  4487  0706  3E01               	addlw	1
  4488  0707  00AA               	movwf	??_UpdateTimes+6
  4489  0708  0829               	movf	??_UpdateTimes+5,w
  4490  0709  0084               	movwf	4
  4491  070A  1783               	bsf	3,7
  4492  070B  1C2A               	btfss	??_UpdateTimes+6,0
  4493  070C  1383               	bcf	3,7
  4494  070D  0800               	movf	0,w
  4495  070E  00AB               	movwf	??_UpdateTimes+7
  4496  070F  0A84               	incf	4,f
  4497  0710  0800               	movf	0,w
  4498  0711  00AC               	movwf	??_UpdateTimes+8
  4499  0712  0838               	movf	UpdateTimes@l,w
  4500  0713  00AD               	movwf	??_UpdateTimes+9
  4501  0714  072D               	addwf	??_UpdateTimes+9,w
  4502  0715  0737               	addwf	UpdateTimes@_semafori,w
  4503  0716  00AE               	movwf	??_UpdateTimes+10
  4504  0717  082E               	movf	??_UpdateTimes+10,w
  4505  0718  0084               	movwf	4
  4506  0719  1383               	bcf	3,7	;select IRP bank0
  4507  071A  0800               	movf	0,w
  4508  071B  00AF               	movwf	??_UpdateTimes+11
  4509  071C  0A84               	incf	4,f
  4510  071D  0800               	movf	0,w
  4511  071E  00B0               	movwf	??_UpdateTimes+12
  4512  071F  0836               	movf	UpdateTimes@i,w
  4513  0720  00B1               	movwf	??_UpdateTimes+13
  4514  0721  0731               	addwf	??_UpdateTimes+13,w
  4515  0722  072F               	addwf	??_UpdateTimes+11,w
  4516  0723  00B2               	movwf	??_UpdateTimes+14
  4517  0724  0830               	movf	??_UpdateTimes+12,w
  4518  0725  1803               	skipnc
  4519  0726  3E01               	addlw	1
  4520  0727  00B3               	movwf	??_UpdateTimes+15
  4521  0728  0832               	movf	??_UpdateTimes+14,w
  4522  0729  0084               	movwf	4
  4523  072A  1783               	bsf	3,7
  4524  072B  1C33               	btfss	??_UpdateTimes+15,0
  4525  072C  1383               	bcf	3,7
  4526  072D  082B               	movf	??_UpdateTimes+7,w
  4527  072E  0080               	movwf	0
  4528  072F  0A84               	incf	4,f
  4529  0730  082C               	movf	??_UpdateTimes+8,w
  4530  0731  0080               	movwf	0
  4531  0732                     l4292:	
  4532                           
  4533                           ;./CustomLib/TrafficLight.h: 15:         }
  4534  0732  3001               	movlw	1
  4535  0733  00A4               	movwf	??_UpdateTimes
  4536  0734  0824               	movf	??_UpdateTimes,w
  4537  0735  07B6               	addwf	UpdateTimes@i,f
  4538  0736                     l4294:	
  4539  0736  3003               	movlw	3
  4540  0737  0236               	subwf	UpdateTimes@i,w
  4541  0738  1C03               	skipc
  4542  0739  2F3B               	goto	u4211
  4543  073A  2F3C               	goto	u4210
  4544  073B                     u4211:	
  4545  073B  2EA6               	goto	l4288
  4546  073C                     u4210:	
  4547  073C                     l4296:	
  4548                           
  4549                           ;./CustomLib/TrafficLight.h: 17:         if ((*(_semafori)[l]).lux_select != (*(_semafor
      +                          i)[l]).new_lux_select)
  4550  073C  0838               	movf	UpdateTimes@l,w
  4551  073D  00A4               	movwf	??_UpdateTimes
  4552  073E  0724               	addwf	??_UpdateTimes,w
  4553  073F  0737               	addwf	UpdateTimes@_semafori,w
  4554  0740  00A5               	movwf	??_UpdateTimes+1
  4555  0741  0825               	movf	??_UpdateTimes+1,w
  4556  0742  0084               	movwf	4
  4557  0743  1383               	bcf	3,7	;select IRP bank0
  4558  0744  0800               	movf	0,w
  4559  0745  00A6               	movwf	??_UpdateTimes+2
  4560  0746  0A84               	incf	4,f
  4561  0747  0800               	movf	0,w
  4562  0748  00A7               	movwf	??_UpdateTimes+3
  4563  0749  0826               	movf	??_UpdateTimes+2,w
  4564  074A  3E0D               	addlw	13
  4565  074B  00A8               	movwf	??_UpdateTimes+4
  4566  074C  0827               	movf	??_UpdateTimes+3,w
  4567  074D  1803               	skipnc
  4568  074E  3E01               	addlw	1
  4569  074F  3E00               	addlw	0
  4570  0750  00A9               	movwf	??_UpdateTimes+5
  4571  0751  0828               	movf	??_UpdateTimes+4,w
  4572  0752  0084               	movwf	4
  4573  0753  1783               	bsf	3,7
  4574  0754  1C29               	btfss	??_UpdateTimes+5,0
  4575  0755  1383               	bcf	3,7
  4576  0756  0800               	movf	0,w
  4577  0757  00AA               	movwf	??_UpdateTimes+6
  4578  0758  0838               	movf	UpdateTimes@l,w
  4579  0759  00AB               	movwf	??_UpdateTimes+7
  4580  075A  072B               	addwf	??_UpdateTimes+7,w
  4581  075B  0737               	addwf	UpdateTimes@_semafori,w
  4582  075C  00AC               	movwf	??_UpdateTimes+8
  4583  075D  082C               	movf	??_UpdateTimes+8,w
  4584  075E  0084               	movwf	4
  4585  075F  1383               	bcf	3,7	;select IRP bank0
  4586  0760  0800               	movf	0,w
  4587  0761  00AD               	movwf	??_UpdateTimes+9
  4588  0762  0A84               	incf	4,f
  4589  0763  0800               	movf	0,w
  4590  0764  00AE               	movwf	??_UpdateTimes+10
  4591  0765  082D               	movf	??_UpdateTimes+9,w
  4592  0766  3E0C               	addlw	12
  4593  0767  00AF               	movwf	??_UpdateTimes+11
  4594  0768  082E               	movf	??_UpdateTimes+10,w
  4595  0769  1803               	skipnc
  4596  076A  3E01               	addlw	1
  4597  076B  3E00               	addlw	0
  4598  076C  00B0               	movwf	??_UpdateTimes+12
  4599  076D  082F               	movf	??_UpdateTimes+11,w
  4600  076E  0084               	movwf	4
  4601  076F  1783               	bsf	3,7
  4602  0770  1C30               	btfss	??_UpdateTimes+12,0
  4603  0771  1383               	bcf	3,7
  4604  0772  0800               	movf	0,w
  4605  0773  062A               	xorwf	??_UpdateTimes+6,w
  4606  0774  1903               	skipnz
  4607  0775  2F77               	goto	u4221
  4608  0776  2F78               	goto	u4220
  4609  0777                     u4221:	
  4610  0777  2FB0               	goto	l4300
  4611  0778                     u4220:	
  4612  0778                     l4298:	
  4613                           
  4614                           ;./CustomLib/TrafficLight.h: 18:         {;./CustomLib/TrafficLight.h: 19:             (
      +                          *(_semafori)[l]).lux_select = (*(_semafori)[l]).new_lux_select;
  4615  0778  0838               	movf	UpdateTimes@l,w
  4616  0779  00A4               	movwf	??_UpdateTimes
  4617  077A  0724               	addwf	??_UpdateTimes,w
  4618  077B  0737               	addwf	UpdateTimes@_semafori,w
  4619  077C  00A5               	movwf	??_UpdateTimes+1
  4620  077D  0825               	movf	??_UpdateTimes+1,w
  4621  077E  0084               	movwf	4
  4622  077F  1383               	bcf	3,7	;select IRP bank0
  4623  0780  0800               	movf	0,w
  4624  0781  00A6               	movwf	??_UpdateTimes+2
  4625  0782  0A84               	incf	4,f
  4626  0783  0800               	movf	0,w
  4627  0784  00A7               	movwf	??_UpdateTimes+3
  4628  0785  0826               	movf	??_UpdateTimes+2,w
  4629  0786  3E0D               	addlw	13
  4630  0787  00A8               	movwf	??_UpdateTimes+4
  4631  0788  0827               	movf	??_UpdateTimes+3,w
  4632  0789  1803               	skipnc
  4633  078A  3E01               	addlw	1
  4634  078B  3E00               	addlw	0
  4635  078C  00A9               	movwf	??_UpdateTimes+5
  4636  078D  0828               	movf	??_UpdateTimes+4,w
  4637  078E  0084               	movwf	4
  4638  078F  1783               	bsf	3,7
  4639  0790  1C29               	btfss	??_UpdateTimes+5,0
  4640  0791  1383               	bcf	3,7
  4641  0792  0800               	movf	0,w
  4642  0793  00AA               	movwf	??_UpdateTimes+6
  4643  0794  0838               	movf	UpdateTimes@l,w
  4644  0795  00AB               	movwf	??_UpdateTimes+7
  4645  0796  072B               	addwf	??_UpdateTimes+7,w
  4646  0797  0737               	addwf	UpdateTimes@_semafori,w
  4647  0798  00AC               	movwf	??_UpdateTimes+8
  4648  0799  082C               	movf	??_UpdateTimes+8,w
  4649  079A  0084               	movwf	4
  4650  079B  1383               	bcf	3,7	;select IRP bank0
  4651  079C  0800               	movf	0,w
  4652  079D  00AD               	movwf	??_UpdateTimes+9
  4653  079E  0A84               	incf	4,f
  4654  079F  0800               	movf	0,w
  4655  07A0  00AE               	movwf	??_UpdateTimes+10
  4656  07A1  082D               	movf	??_UpdateTimes+9,w
  4657  07A2  3E0C               	addlw	12
  4658  07A3  00AF               	movwf	??_UpdateTimes+11
  4659  07A4  082E               	movf	??_UpdateTimes+10,w
  4660  07A5  1803               	skipnc
  4661  07A6  3E01               	addlw	1
  4662  07A7  3E00               	addlw	0
  4663  07A8  00B0               	movwf	??_UpdateTimes+12
  4664  07A9  082F               	movf	??_UpdateTimes+11,w
  4665  07AA  0084               	movwf	4
  4666  07AB  1783               	bsf	3,7
  4667  07AC  1C30               	btfss	??_UpdateTimes+12,0
  4668  07AD  1383               	bcf	3,7
  4669  07AE  082A               	movf	??_UpdateTimes+6,w
  4670  07AF  0080               	movwf	0
  4671  07B0                     l4300:	
  4672                           
  4673                           ;./CustomLib/TrafficLight.h: 21:     }
  4674  07B0  3001               	movlw	1
  4675  07B1  00A4               	movwf	??_UpdateTimes
  4676  07B2  0824               	movf	??_UpdateTimes,w
  4677  07B3  07B8               	addwf	UpdateTimes@l,f
  4678  07B4                     l4302:	
  4679  07B4  3002               	movlw	2
  4680  07B5  0238               	subwf	UpdateTimes@l,w
  4681  07B6  1C03               	skipc
  4682  07B7  2FB9               	goto	u4231
  4683  07B8  2FBA               	goto	u4230
  4684  07B9                     u4231:	
  4685  07B9  2EA5               	goto	l4282
  4686  07BA                     u4230:	
  4687  07BA                     l147:	
  4688  07BA  0008               	return
  4689  07BB                     __end_of_UpdateTimes:	
  4690                           
  4691                           	psect	text13
  4692  07BB                     __ptext13:	
  4693 ;; *************** function _UART_Init *****************
  4694 ;; Defined at:
  4695 ;;		line 351 in file "main.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  baudrate        2   19[BANK0 ] int 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg, status,2, status,0, pclath, cstack
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4709 ;;      Params:         0       2       0       0       0
  4710 ;;      Locals:         0       0       0       0       0
  4711 ;;      Temps:          0       4       0       0       0
  4712 ;;      Totals:         0       6       0       0       0
  4713 ;;Total ram usage:        6 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    4
  4716 ;; This function calls:
  4717 ;;		___aldiv
  4718 ;; This function is called by:
  4719 ;;		_main
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           
  4724                           ;psect for function _UART_Init
  4725  07BB                     _UART_Init:	
  4726  07BB                     l4366:	
  4727                           ;incstack = 0
  4728                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4729                           
  4730                           
  4731                           ;main.c: 351: void UART_Init(int baudrate);main.c: 352: {;main.c: 353:     TRISCbits.TRI
      +                          SC6 = 0;
  4732  07BB  1683               	bsf	3,5	;RP0=1, select bank1
  4733  07BC  1303               	bcf	3,6	;RP1=0, select bank1
  4734  07BD  1307               	bcf	7,6	;volatile
  4735                           
  4736                           ;main.c: 354:     TXSTAbits.TXEN = 1;
  4737  07BE  1698               	bsf	24,5	;volatile
  4738                           
  4739                           ;main.c: 355:     RCSTAbits.SPEN = 1;
  4740  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  4741  07C0  1303               	bcf	3,6	;RP1=0, select bank0
  4742  07C1  1798               	bsf	24,7	;volatile
  4743                           
  4744                           ;main.c: 356:     RCSTAbits.CREN = 1;
  4745  07C2  1618               	bsf	24,4	;volatile
  4746  07C3                     l4368:	
  4747                           
  4748                           ;main.c: 357:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4749  07C3  0833               	movf	UART_Init@baudrate,w
  4750  07C4  00B5               	movwf	??_UART_Init
  4751  07C5  0834               	movf	UART_Init@baudrate+1,w
  4752  07C6  00B6               	movwf	??_UART_Init+1
  4753  07C7  3000               	movlw	0
  4754  07C8  1BB6               	btfsc	??_UART_Init+1,7
  4755  07C9  30FF               	movlw	255
  4756  07CA  00B7               	movwf	??_UART_Init+2
  4757  07CB  00B8               	movwf	??_UART_Init+3
  4758  07CC  3006               	movlw	6
  4759  07CD                     u4285:	
  4760  07CD  1003               	clrc
  4761  07CE  0DB5               	rlf	??_UART_Init,f
  4762  07CF  0DB6               	rlf	??_UART_Init+1,f
  4763  07D0  0DB7               	rlf	??_UART_Init+2,f
  4764  07D1  0DB8               	rlf	??_UART_Init+3,f
  4765  07D2                     u4280:	
  4766  07D2  3EFF               	addlw	-1
  4767  07D3  1D03               	skipz
  4768  07D4  2FCD               	goto	u4285
  4769  07D5  0838               	movf	??_UART_Init+3,w
  4770  07D6  00A7               	movwf	___aldiv@divisor+3
  4771  07D7  0837               	movf	??_UART_Init+2,w
  4772  07D8  00A6               	movwf	___aldiv@divisor+2
  4773  07D9  0836               	movf	??_UART_Init+1,w
  4774  07DA  00A5               	movwf	___aldiv@divisor+1
  4775  07DB  0835               	movf	??_UART_Init,w
  4776  07DC  00A4               	movwf	___aldiv@divisor
  4777  07DD  3001               	movlw	1
  4778  07DE  00AB               	movwf	___aldiv@dividend+3
  4779  07DF  30E8               	movlw	232
  4780  07E0  00AA               	movwf	___aldiv@dividend+2
  4781  07E1  3048               	movlw	72
  4782  07E2  00A9               	movwf	___aldiv@dividend+1
  4783  07E3  3000               	movlw	0
  4784  07E4  00A8               	movwf	___aldiv@dividend
  4785  07E5  120A  158A  25D2  120A  118A  	fcall	___aldiv
  4786  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  4787  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  4788  07EC  0824               	movf	?___aldiv,w
  4789  07ED  3EFF               	addlw	255
  4790  07EE  1683               	bsf	3,5	;RP0=1, select bank1
  4791  07EF  1303               	bcf	3,6	;RP1=0, select bank1
  4792  07F0  0099               	movwf	25	;volatile
  4793  07F1                     l4370:	
  4794                           
  4795                           ;main.c: 358:     INTCONbits.GIE = 1;
  4796  07F1  178B               	bsf	11,7	;volatile
  4797  07F2                     l4372:	
  4798                           
  4799                           ;main.c: 359:     INTCONbits.PEIE = 1;
  4800  07F2  170B               	bsf	11,6	;volatile
  4801  07F3                     l4374:	
  4802                           
  4803                           ;main.c: 360:     PIE1bits.RCIE = 1;
  4804  07F3  168C               	bsf	12,5	;volatile
  4805  07F4                     l289:	
  4806  07F4  0008               	return
  4807  07F5                     __end_of_UART_Init:	
  4808                           
  4809                           	psect	text14
  4810  0DD2                     __ptext14:	
  4811 ;; *************** function ___aldiv *****************
  4812 ;; Defined at:
  4813 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  divisor         4    4[BANK0 ] long 
  4816 ;;  dividend        4    8[BANK0 ] long 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  quotient        4   15[BANK0 ] long 
  4819 ;;  sign            1   14[BANK0 ] unsigned char 
  4820 ;;  counter         1   13[BANK0 ] unsigned char 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  4    4[BANK0 ] long 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4830 ;;      Params:         0       8       0       0       0
  4831 ;;      Locals:         0       6       0       0       0
  4832 ;;      Temps:          0       1       0       0       0
  4833 ;;      Totals:         0      15       0       0       0
  4834 ;;Total ram usage:       15 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    3
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_UART_Init
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           
  4845                           ;psect for function ___aldiv
  4846  0DD2                     ___aldiv:	
  4847  0DD2                     l4086:	
  4848                           ;incstack = 0
  4849                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4850                           
  4851  0DD2  1283               	bcf	3,5	;RP0=0, select bank0
  4852  0DD3  1303               	bcf	3,6	;RP1=0, select bank0
  4853  0DD4  01AE               	clrf	___aldiv@sign
  4854  0DD5                     l4088:	
  4855  0DD5  1FA7               	btfss	___aldiv@divisor+3,7
  4856  0DD6  2DD8               	goto	u3811
  4857  0DD7  2DD9               	goto	u3810
  4858  0DD8                     u3811:	
  4859  0DD8  2DE6               	goto	l513
  4860  0DD9                     u3810:	
  4861  0DD9                     l4090:	
  4862  0DD9  09A4               	comf	___aldiv@divisor,f
  4863  0DDA  09A5               	comf	___aldiv@divisor+1,f
  4864  0DDB  09A6               	comf	___aldiv@divisor+2,f
  4865  0DDC  09A7               	comf	___aldiv@divisor+3,f
  4866  0DDD  0AA4               	incf	___aldiv@divisor,f
  4867  0DDE  1903               	skipnz
  4868  0DDF  0AA5               	incf	___aldiv@divisor+1,f
  4869  0DE0  1903               	skipnz
  4870  0DE1  0AA6               	incf	___aldiv@divisor+2,f
  4871  0DE2  1903               	skipnz
  4872  0DE3  0AA7               	incf	___aldiv@divisor+3,f
  4873  0DE4  01AE               	clrf	___aldiv@sign
  4874  0DE5  0AAE               	incf	___aldiv@sign,f
  4875  0DE6                     l513:	
  4876  0DE6  1FAB               	btfss	___aldiv@dividend+3,7
  4877  0DE7  2DE9               	goto	u3821
  4878  0DE8  2DEA               	goto	u3820
  4879  0DE9                     u3821:	
  4880  0DE9  2DF9               	goto	l4096
  4881  0DEA                     u3820:	
  4882  0DEA                     l4092:	
  4883  0DEA  09A8               	comf	___aldiv@dividend,f
  4884  0DEB  09A9               	comf	___aldiv@dividend+1,f
  4885  0DEC  09AA               	comf	___aldiv@dividend+2,f
  4886  0DED  09AB               	comf	___aldiv@dividend+3,f
  4887  0DEE  0AA8               	incf	___aldiv@dividend,f
  4888  0DEF  1903               	skipnz
  4889  0DF0  0AA9               	incf	___aldiv@dividend+1,f
  4890  0DF1  1903               	skipnz
  4891  0DF2  0AAA               	incf	___aldiv@dividend+2,f
  4892  0DF3  1903               	skipnz
  4893  0DF4  0AAB               	incf	___aldiv@dividend+3,f
  4894  0DF5                     l4094:	
  4895  0DF5  3001               	movlw	1
  4896  0DF6  00AC               	movwf	??___aldiv
  4897  0DF7  082C               	movf	??___aldiv,w
  4898  0DF8  06AE               	xorwf	___aldiv@sign,f
  4899  0DF9                     l4096:	
  4900  0DF9  3000               	movlw	0
  4901  0DFA  00B2               	movwf	___aldiv@quotient+3
  4902  0DFB  3000               	movlw	0
  4903  0DFC  00B1               	movwf	___aldiv@quotient+2
  4904  0DFD  3000               	movlw	0
  4905  0DFE  00B0               	movwf	___aldiv@quotient+1
  4906  0DFF  3000               	movlw	0
  4907  0E00  00AF               	movwf	___aldiv@quotient
  4908  0E01                     l4098:	
  4909  0E01  0827               	movf	___aldiv@divisor+3,w
  4910  0E02  0426               	iorwf	___aldiv@divisor+2,w
  4911  0E03  0425               	iorwf	___aldiv@divisor+1,w
  4912  0E04  0424               	iorwf	___aldiv@divisor,w
  4913  0E05  1903               	skipnz
  4914  0E06  2E08               	goto	u3831
  4915  0E07  2E09               	goto	u3830
  4916  0E08                     u3831:	
  4917  0E08  2E56               	goto	l4118
  4918  0E09                     u3830:	
  4919  0E09                     l4100:	
  4920  0E09  01AD               	clrf	___aldiv@counter
  4921  0E0A  0AAD               	incf	___aldiv@counter,f
  4922  0E0B  2E19               	goto	l4104
  4923  0E0C                     l4102:	
  4924  0E0C  3001               	movlw	1
  4925  0E0D  00AC               	movwf	??___aldiv
  4926  0E0E                     u3845:	
  4927  0E0E  1003               	clrc
  4928  0E0F  0DA4               	rlf	___aldiv@divisor,f
  4929  0E10  0DA5               	rlf	___aldiv@divisor+1,f
  4930  0E11  0DA6               	rlf	___aldiv@divisor+2,f
  4931  0E12  0DA7               	rlf	___aldiv@divisor+3,f
  4932  0E13  0BAC               	decfsz	??___aldiv,f
  4933  0E14  2E0E               	goto	u3845
  4934  0E15  3001               	movlw	1
  4935  0E16  00AC               	movwf	??___aldiv
  4936  0E17  082C               	movf	??___aldiv,w
  4937  0E18  07AD               	addwf	___aldiv@counter,f
  4938  0E19                     l4104:	
  4939  0E19  1FA7               	btfss	___aldiv@divisor+3,7
  4940  0E1A  2E1C               	goto	u3851
  4941  0E1B  2E1D               	goto	u3850
  4942  0E1C                     u3851:	
  4943  0E1C  2E0C               	goto	l4102
  4944  0E1D                     u3850:	
  4945  0E1D                     l4106:	
  4946  0E1D  3001               	movlw	1
  4947  0E1E  00AC               	movwf	??___aldiv
  4948  0E1F                     u3865:	
  4949  0E1F  1003               	clrc
  4950  0E20  0DAF               	rlf	___aldiv@quotient,f
  4951  0E21  0DB0               	rlf	___aldiv@quotient+1,f
  4952  0E22  0DB1               	rlf	___aldiv@quotient+2,f
  4953  0E23  0DB2               	rlf	___aldiv@quotient+3,f
  4954  0E24  0BAC               	decfsz	??___aldiv,f
  4955  0E25  2E1F               	goto	u3865
  4956  0E26                     l4108:	
  4957  0E26  0827               	movf	___aldiv@divisor+3,w
  4958  0E27  022B               	subwf	___aldiv@dividend+3,w
  4959  0E28  1D03               	skipz
  4960  0E29  2E34               	goto	u3875
  4961  0E2A  0826               	movf	___aldiv@divisor+2,w
  4962  0E2B  022A               	subwf	___aldiv@dividend+2,w
  4963  0E2C  1D03               	skipz
  4964  0E2D  2E34               	goto	u3875
  4965  0E2E  0825               	movf	___aldiv@divisor+1,w
  4966  0E2F  0229               	subwf	___aldiv@dividend+1,w
  4967  0E30  1D03               	skipz
  4968  0E31  2E34               	goto	u3875
  4969  0E32  0824               	movf	___aldiv@divisor,w
  4970  0E33  0228               	subwf	___aldiv@dividend,w
  4971  0E34                     u3875:	
  4972  0E34  1C03               	skipc
  4973  0E35  2E37               	goto	u3871
  4974  0E36  2E38               	goto	u3870
  4975  0E37                     u3871:	
  4976  0E37  2E47               	goto	l4114
  4977  0E38                     u3870:	
  4978  0E38                     l4110:	
  4979  0E38  0824               	movf	___aldiv@divisor,w
  4980  0E39  02A8               	subwf	___aldiv@dividend,f
  4981  0E3A  0825               	movf	___aldiv@divisor+1,w
  4982  0E3B  1C03               	skipc
  4983  0E3C  0F25               	incfsz	___aldiv@divisor+1,w
  4984  0E3D  02A9               	subwf	___aldiv@dividend+1,f
  4985  0E3E  0826               	movf	___aldiv@divisor+2,w
  4986  0E3F  1C03               	skipc
  4987  0E40  0F26               	incfsz	___aldiv@divisor+2,w
  4988  0E41  02AA               	subwf	___aldiv@dividend+2,f
  4989  0E42  0827               	movf	___aldiv@divisor+3,w
  4990  0E43  1C03               	skipc
  4991  0E44  0F27               	incfsz	___aldiv@divisor+3,w
  4992  0E45  02AB               	subwf	___aldiv@dividend+3,f
  4993  0E46                     l4112:	
  4994  0E46  142F               	bsf	___aldiv@quotient,0
  4995  0E47                     l4114:	
  4996  0E47  3001               	movlw	1
  4997  0E48                     u3885:	
  4998  0E48  1003               	clrc
  4999  0E49  0CA7               	rrf	___aldiv@divisor+3,f
  5000  0E4A  0CA6               	rrf	___aldiv@divisor+2,f
  5001  0E4B  0CA5               	rrf	___aldiv@divisor+1,f
  5002  0E4C  0CA4               	rrf	___aldiv@divisor,f
  5003  0E4D  3EFF               	addlw	-1
  5004  0E4E  1D03               	skipz
  5005  0E4F  2E48               	goto	u3885
  5006  0E50                     l4116:	
  5007  0E50  3001               	movlw	1
  5008  0E51  02AD               	subwf	___aldiv@counter,f
  5009  0E52  1D03               	btfss	3,2
  5010  0E53  2E55               	goto	u3891
  5011  0E54  2E56               	goto	u3890
  5012  0E55                     u3891:	
  5013  0E55  2E1D               	goto	l4106
  5014  0E56                     u3890:	
  5015  0E56                     l4118:	
  5016  0E56  082E               	movf	___aldiv@sign,w
  5017  0E57  1903               	btfsc	3,2
  5018  0E58  2E5A               	goto	u3901
  5019  0E59  2E5B               	goto	u3900
  5020  0E5A                     u3901:	
  5021  0E5A  2E66               	goto	l4122
  5022  0E5B                     u3900:	
  5023  0E5B                     l4120:	
  5024  0E5B  09AF               	comf	___aldiv@quotient,f
  5025  0E5C  09B0               	comf	___aldiv@quotient+1,f
  5026  0E5D  09B1               	comf	___aldiv@quotient+2,f
  5027  0E5E  09B2               	comf	___aldiv@quotient+3,f
  5028  0E5F  0AAF               	incf	___aldiv@quotient,f
  5029  0E60  1903               	skipnz
  5030  0E61  0AB0               	incf	___aldiv@quotient+1,f
  5031  0E62  1903               	skipnz
  5032  0E63  0AB1               	incf	___aldiv@quotient+2,f
  5033  0E64  1903               	skipnz
  5034  0E65  0AB2               	incf	___aldiv@quotient+3,f
  5035  0E66                     l4122:	
  5036  0E66  0832               	movf	___aldiv@quotient+3,w
  5037  0E67  00A7               	movwf	?___aldiv+3
  5038  0E68  0831               	movf	___aldiv@quotient+2,w
  5039  0E69  00A6               	movwf	?___aldiv+2
  5040  0E6A  0830               	movf	___aldiv@quotient+1,w
  5041  0E6B  00A5               	movwf	?___aldiv+1
  5042  0E6C  082F               	movf	___aldiv@quotient,w
  5043  0E6D  00A4               	movwf	?___aldiv
  5044  0E6E                     l523:	
  5045  0E6E  0008               	return
  5046  0E6F                     __end_of___aldiv:	
  5047                           
  5048                           	psect	text15
  5049  0CBA                     __ptext15:	
  5050 ;; *************** function _ShowDigitsOnDisplay *****************
  5051 ;; Defined at:
  5052 ;;		line 476 in file "main.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;		None
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;		None
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  1    wreg      void 
  5059 ;; Registers used:
  5060 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5066 ;;      Params:         0       0       0       0       0
  5067 ;;      Locals:         0       0       0       0       0
  5068 ;;      Temps:          0       2       0       0       0
  5069 ;;      Totals:         0       2       0       0       0
  5070 ;;Total ram usage:        2 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    4
  5073 ;; This function calls:
  5074 ;;		_SetDisplay
  5075 ;;		___awmod
  5076 ;; This function is called by:
  5077 ;;		_main
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _ShowDigitsOnDisplay
  5083  0CBA                     _ShowDigitsOnDisplay:	
  5084  0CBA                     l4442:	
  5085                           ;incstack = 0
  5086                           ; Regs used in _ShowDigitsOnDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5087                           
  5088                           
  5089                           ;main.c: 478:     switch (disp)
  5090  0CBA  2D08               	goto	l4458
  5091  0CBB                     l4444:	
  5092                           
  5093                           ;main.c: 481:         if (centinaia > 0)
  5094  0CBB  0859               	movf	_centinaia,w
  5095  0CBC  1903               	btfsc	3,2
  5096  0CBD  2CBF               	goto	u4331
  5097  0CBE  2CC0               	goto	u4330
  5098  0CBF                     u4331:	
  5099  0CBF  2D1D               	goto	l4460
  5100  0CC0                     u4330:	
  5101  0CC0                     l4446:	
  5102                           
  5103                           ;main.c: 482:         {;main.c: 483:             SetDisplay(1, 0, 0, display[centinaia])
      +                          ;
  5104  0CC0  01A4               	clrf	SetDisplay@d2
  5105  0CC1  01A5               	clrf	SetDisplay@d3
  5106  0CC2  0859               	movf	_centinaia,w
  5107  0CC3  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  5108  0CC4  0084               	movwf	4
  5109  0CC5  120A  158A  2000  120A  158A  	fcall	stringdir
  5110  0CCA  00AB               	movwf	??_ShowDigitsOnDisplay
  5111  0CCB  082B               	movf	??_ShowDigitsOnDisplay,w
  5112  0CCC  00A6               	movwf	SetDisplay@value
  5113  0CCD  3001               	movlw	1
  5114  0CCE  120A  158A  2047  120A  158A  	fcall	_SetDisplay
  5115  0CD3  2D1D               	goto	l4460
  5116  0CD4                     l4448:	
  5117                           
  5118                           ;main.c: 487:         if (decine > 0 || centinaia > 0)
  5119  0CD4  085A               	movf	_decine,w
  5120  0CD5  1D03               	btfss	3,2
  5121  0CD6  2CD8               	goto	u4341
  5122  0CD7  2CD9               	goto	u4340
  5123  0CD8                     u4341:	
  5124  0CD8  2CDE               	goto	l4452
  5125  0CD9                     u4340:	
  5126  0CD9                     l4450:	
  5127  0CD9  0859               	movf	_centinaia,w
  5128  0CDA  1903               	btfsc	3,2
  5129  0CDB  2CDD               	goto	u4351
  5130  0CDC  2CDE               	goto	u4350
  5131  0CDD                     u4351:	
  5132  0CDD  2D1D               	goto	l4460
  5133  0CDE                     u4350:	
  5134  0CDE                     l4452:	
  5135                           
  5136                           ;main.c: 488:         {;main.c: 489:             SetDisplay(0, 1, 0, display[decine]);
  5137  0CDE  01A4               	clrf	SetDisplay@d2
  5138  0CDF  0AA4               	incf	SetDisplay@d2,f
  5139  0CE0  01A5               	clrf	SetDisplay@d3
  5140  0CE1  085A               	movf	_decine,w
  5141  0CE2  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  5142  0CE3  0084               	movwf	4
  5143  0CE4  120A  158A  2000  120A  158A  	fcall	stringdir
  5144  0CE9  00AB               	movwf	??_ShowDigitsOnDisplay
  5145  0CEA  082B               	movf	??_ShowDigitsOnDisplay,w
  5146  0CEB  00A6               	movwf	SetDisplay@value
  5147  0CEC  3000               	movlw	0
  5148  0CED  120A  158A  2047  120A  158A  	fcall	_SetDisplay
  5149  0CF2  2D1D               	goto	l4460
  5150  0CF3                     l4454:	
  5151                           
  5152                           ;main.c: 493:         SetDisplay(0, 0, 1, display[unita]);
  5153  0CF3  01A4               	clrf	SetDisplay@d2
  5154  0CF4  01A5               	clrf	SetDisplay@d3
  5155  0CF5  0AA5               	incf	SetDisplay@d3,f
  5156  0CF6  085B               	movf	_unita,w
  5157  0CF7  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  5158  0CF8  0084               	movwf	4
  5159  0CF9  120A  158A  2000  120A  158A  	fcall	stringdir
  5160  0CFE  00AB               	movwf	??_ShowDigitsOnDisplay
  5161  0CFF  082B               	movf	??_ShowDigitsOnDisplay,w
  5162  0D00  00A6               	movwf	SetDisplay@value
  5163  0D01  3000               	movlw	0
  5164  0D02  120A  158A  2047  120A  158A  	fcall	_SetDisplay
  5165                           
  5166                           ;main.c: 494:         break;
  5167  0D07  2D1D               	goto	l4460
  5168  0D08                     l4458:	
  5169  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  5170  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  5171  0D0A  0850               	movf	_disp,w
  5172  0D0B  00AB               	movwf	??_ShowDigitsOnDisplay
  5173  0D0C  01AC               	clrf	??_ShowDigitsOnDisplay+1
  5174                           
  5175                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5176                           ; Switch size 1, requested type "simple"
  5177                           ; Number of cases is 1, Range of values is 0 to 0
  5178                           ; switch strategies available:
  5179                           ; Name         Instructions Cycles
  5180                           ; simple_byte            4     3 (average)
  5181                           ; direct_byte           11     8 (fixed)
  5182                           ; jumptable            260     6 (fixed)
  5183                           ;	Chosen strategy is simple_byte
  5184  0D0D  082C               	movf	??_ShowDigitsOnDisplay+1,w
  5185  0D0E  3A00               	xorlw	0	; case 0
  5186  0D0F  1903               	skipnz
  5187  0D10  2D12               	goto	l4886
  5188  0D11  2D1D               	goto	l4460
  5189  0D12                     l4886:	
  5190                           
  5191                           ; Switch size 1, requested type "simple"
  5192                           ; Number of cases is 3, Range of values is 0 to 2
  5193                           ; switch strategies available:
  5194                           ; Name         Instructions Cycles
  5195                           ; simple_byte           10     6 (average)
  5196                           ; direct_byte           17     8 (fixed)
  5197                           ; jumptable            260     6 (fixed)
  5198                           ;	Chosen strategy is simple_byte
  5199  0D12  082B               	movf	??_ShowDigitsOnDisplay,w
  5200  0D13  3A00               	xorlw	0	; case 0
  5201  0D14  1903               	skipnz
  5202  0D15  2CBB               	goto	l4444
  5203  0D16  3A01               	xorlw	1	; case 1
  5204  0D17  1903               	skipnz
  5205  0D18  2CD4               	goto	l4448
  5206  0D19  3A03               	xorlw	3	; case 2
  5207  0D1A  1903               	skipnz
  5208  0D1B  2CF3               	goto	l4454
  5209  0D1C  2D1D               	goto	l4460
  5210  0D1D                     l4460:	
  5211                           
  5212                           ;main.c: 496:     disp = (disp + 1) % 3;
  5213  0D1D  3003               	movlw	3
  5214  0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  5215  0D1F  1303               	bcf	3,6	;RP1=0, select bank0
  5216  0D20  00A4               	movwf	___awmod@divisor
  5217  0D21  3000               	movlw	0
  5218  0D22  00A5               	movwf	___awmod@divisor+1
  5219  0D23  0850               	movf	_disp,w
  5220  0D24  3E01               	addlw	1
  5221  0D25  00A6               	movwf	___awmod@dividend
  5222  0D26  3000               	movlw	0
  5223  0D27  1803               	skipnc
  5224  0D28  3001               	movlw	1
  5225  0D29  00A7               	movwf	___awmod@dividend+1
  5226  0D2A  120A  158A  2323  120A  158A  	fcall	___awmod
  5227  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  5228  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  5229  0D31  0824               	movf	?___awmod,w
  5230  0D32  00AB               	movwf	??_ShowDigitsOnDisplay
  5231  0D33  082B               	movf	??_ShowDigitsOnDisplay,w
  5232  0D34  00D0               	movwf	_disp
  5233  0D35                     l352:	
  5234  0D35  0008               	return
  5235  0D36                     __end_of_ShowDigitsOnDisplay:	
  5236                           
  5237                           	psect	text16
  5238  0847                     __ptext16:	
  5239 ;; *************** function _SetDisplay *****************
  5240 ;; Defined at:
  5241 ;;		line 399 in file "main.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  d1              1    wreg     unsigned char 
  5244 ;;  d2              1    4[BANK0 ] unsigned char 
  5245 ;;  d3              1    5[BANK0 ] unsigned char 
  5246 ;;  value           1    6[BANK0 ] unsigned char 
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;  d1              1    7[BANK0 ] unsigned char 
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  1    wreg      void 
  5251 ;; Registers used:
  5252 ;;		wreg, status,0
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5258 ;;      Params:         0       3       0       0       0
  5259 ;;      Locals:         0       1       0       0       0
  5260 ;;      Temps:          0       0       0       0       0
  5261 ;;      Totals:         0       4       0       0       0
  5262 ;;Total ram usage:        4 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:    3
  5265 ;; This function calls:
  5266 ;;		Nothing
  5267 ;; This function is called by:
  5268 ;;		_ShowDigitsOnDisplay
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           
  5273                           ;psect for function _SetDisplay
  5274  0847                     _SetDisplay:	
  5275                           
  5276                           ;incstack = 0
  5277                           ; Regs used in _SetDisplay: [wreg+status,0]
  5278                           ;SetDisplay@d1 stored from wreg
  5279  0847  1283               	bcf	3,5	;RP0=0, select bank0
  5280  0848  1303               	bcf	3,6	;RP1=0, select bank0
  5281  0849  00A7               	movwf	SetDisplay@d1
  5282  084A                     l4040:	
  5283                           
  5284                           ;main.c: 399: void SetDisplay(char d1, char d2, char d3, char value);main.c: 400: {;main
      +                          .c: 401:     PORTAbits.RA2 = d1;
  5285  084A  0C27               	rrf	SetDisplay@d1,w
  5286  084B  1C03               	skipc
  5287  084C  1105               	bcf	5,2	;volatile
  5288  084D  1803               	skipnc
  5289  084E  1505               	bsf	5,2	;volatile
  5290                           
  5291                           ;main.c: 402:     PORTAbits.RA3 = d2;
  5292  084F  0C24               	rrf	SetDisplay@d2,w
  5293  0850  1C03               	skipc
  5294  0851  1185               	bcf	5,3	;volatile
  5295  0852  1803               	skipnc
  5296  0853  1585               	bsf	5,3	;volatile
  5297                           
  5298                           ;main.c: 403:     PORTAbits.RA4 = d3;
  5299  0854  0C25               	rrf	SetDisplay@d3,w
  5300  0855  1C03               	skipc
  5301  0856  1205               	bcf	5,4	;volatile
  5302  0857  1803               	skipnc
  5303  0858  1605               	bsf	5,4	;volatile
  5304  0859                     l4042:	
  5305                           
  5306                           ;main.c: 404:     PORTD = value;
  5307  0859  0826               	movf	SetDisplay@value,w
  5308  085A  0088               	movwf	8	;volatile
  5309  085B                     l315:	
  5310  085B  0008               	return
  5311  085C                     __end_of_SetDisplay:	
  5312                           
  5313                           	psect	text17
  5314  0C4C                     __ptext17:	
  5315 ;; *************** function _SetReceivedTimes *****************
  5316 ;; Defined at:
  5317 ;;		line 86 in file "./CustomLib/TrafficLight.h"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  _dataFromGat    1    wreg     PTR unsigned char 
  5320 ;;		 -> dataFromGateway(15), 
  5321 ;;  _semafori       1   12[BANK0 ] PTR PTR struct .
  5322 ;;		 -> Semafori(8), 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  _dataFromGat    1   23[BANK0 ] PTR unsigned char 
  5325 ;;		 -> dataFromGateway(15), 
  5326 ;;  index           1   24[BANK0 ] unsigned char 
  5327 ;;  colorId         1   22[BANK0 ] unsigned char 
  5328 ;;  semaforoId      1   21[BANK0 ] unsigned char 
  5329 ;;  i               1   25[BANK0 ] unsigned char 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  1    wreg      void 
  5332 ;; Registers used:
  5333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5339 ;;      Params:         0       1       0       0       0
  5340 ;;      Locals:         0       5       0       0       0
  5341 ;;      Temps:          0       8       0       0       0
  5342 ;;      Totals:         0      14       0       0       0
  5343 ;;Total ram usage:       14 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    4
  5346 ;; This function calls:
  5347 ;;		_GetTime
  5348 ;;		___bmul
  5349 ;; This function is called by:
  5350 ;;		_main
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           
  5355                           ;psect for function _SetReceivedTimes
  5356  0C4C                     _SetReceivedTimes:	
  5357                           
  5358                           ;incstack = 0
  5359                           ; Regs used in _SetReceivedTimes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5360                           ;SetReceivedTimes@_dataFromGateway stored from wreg
  5361  0C4C  1283               	bcf	3,5	;RP0=0, select bank0
  5362  0C4D  1303               	bcf	3,6	;RP1=0, select bank0
  5363  0C4E  00B7               	movwf	SetReceivedTimes@_dataFromGateway
  5364  0C4F                     l4340:	
  5365                           
  5366                           ;./CustomLib/TrafficLight.h: 86: void SetReceivedTimes(ProtocolBytes _dataFromGateway, _
      +                          Semafori _semafori);./CustomLib/TrafficLight.h: 87: {;./CustomLib/TrafficLight.h: 88:   
      +                            for (unsigned char i = 0; i < 3; i++)
  5367  0C4F  01B9               	clrf	SetReceivedTimes@i
  5368  0C50                     l4342:	
  5369  0C50  3003               	movlw	3
  5370  0C51  0239               	subwf	SetReceivedTimes@i,w
  5371  0C52  1C03               	skipc
  5372  0C53  2C55               	goto	u4261
  5373  0C54  2C56               	goto	u4260
  5374  0C55                     u4261:	
  5375  0C55  2C57               	goto	l4346
  5376  0C56                     u4260:	
  5377  0C56  2CB9               	goto	l174
  5378  0C57                     l4346:	
  5379                           
  5380                           ;./CustomLib/TrafficLight.h: 89:     {;./CustomLib/TrafficLight.h: 90:         unsigned 
      +                          char index = i * 5;
  5381  0C57  3005               	movlw	5
  5382  0C58  00AD               	movwf	??_SetReceivedTimes
  5383  0C59  082D               	movf	??_SetReceivedTimes,w
  5384  0C5A  00A4               	movwf	___bmul@multiplicand
  5385  0C5B  0839               	movf	SetReceivedTimes@i,w
  5386  0C5C  120A  158A  205C  120A  158A  	fcall	___bmul
  5387  0C61  1283               	bcf	3,5	;RP0=0, select bank0
  5388  0C62  1303               	bcf	3,6	;RP1=0, select bank0
  5389  0C63  00AE               	movwf	??_SetReceivedTimes+1
  5390  0C64  082E               	movf	??_SetReceivedTimes+1,w
  5391  0C65  00B8               	movwf	SetReceivedTimes@index
  5392  0C66                     l4348:	
  5393                           
  5394                           ;./CustomLib/TrafficLight.h: 91:         unsigned char semaforoId = (_dataFromGateway[in
      +                          dex] >> 1) & 0x0F;
  5395  0C66  0838               	movf	SetReceivedTimes@index,w
  5396  0C67  0737               	addwf	SetReceivedTimes@_dataFromGateway,w
  5397  0C68  00AD               	movwf	??_SetReceivedTimes
  5398  0C69  082D               	movf	??_SetReceivedTimes,w
  5399  0C6A  0084               	movwf	4
  5400  0C6B  1383               	bcf	3,7	;select IRP bank0
  5401  0C6C  0800               	movf	0,w
  5402  0C6D  00AE               	movwf	??_SetReceivedTimes+1
  5403  0C6E  1003               	clrc
  5404  0C6F  0C2E               	rrf	??_SetReceivedTimes+1,w
  5405  0C70  390F               	andlw	15
  5406  0C71  00AF               	movwf	??_SetReceivedTimes+2
  5407  0C72  082F               	movf	??_SetReceivedTimes+2,w
  5408  0C73  00B5               	movwf	SetReceivedTimes@semaforoId
  5409  0C74                     l4350:	
  5410                           
  5411                           ;./CustomLib/TrafficLight.h: 92:         unsigned char colorId = ((_dataFromGateway[inde
      +                          x] >> 5) & 0x03) - 1;
  5412  0C74  0838               	movf	SetReceivedTimes@index,w
  5413  0C75  0737               	addwf	SetReceivedTimes@_dataFromGateway,w
  5414  0C76  00AD               	movwf	??_SetReceivedTimes
  5415  0C77  082D               	movf	??_SetReceivedTimes,w
  5416  0C78  0084               	movwf	4
  5417  0C79  0800               	movf	0,w
  5418  0C7A  00AE               	movwf	??_SetReceivedTimes+1
  5419  0C7B  3005               	movlw	5
  5420  0C7C                     u4275:	
  5421  0C7C  1003               	clrc
  5422  0C7D  0CAE               	rrf	??_SetReceivedTimes+1,f
  5423  0C7E  3EFF               	addlw	-1
  5424  0C7F  1D03               	skipz
  5425  0C80  2C7C               	goto	u4275
  5426  0C81  082E               	movf	??_SetReceivedTimes+1,w
  5427  0C82  3903               	andlw	3
  5428  0C83  3EFF               	addlw	255
  5429  0C84  00AF               	movwf	??_SetReceivedTimes+2
  5430  0C85  082F               	movf	??_SetReceivedTimes+2,w
  5431  0C86  00B6               	movwf	SetReceivedTimes@colorId
  5432  0C87                     l4352:	
  5433                           
  5434                           ;./CustomLib/TrafficLight.h: 94:         (*(_semafori)[semaforoId]).new_times[colorId] =
      +                           GetTime(index, _dataFromGateway);
  5435  0C87  0837               	movf	SetReceivedTimes@_dataFromGateway,w
  5436  0C88  00AD               	movwf	??_SetReceivedTimes
  5437  0C89  082D               	movf	??_SetReceivedTimes,w
  5438  0C8A  00A4               	movwf	GetTime@_dataFromGateway
  5439  0C8B  0838               	movf	SetReceivedTimes@index,w
  5440  0C8C  120A  158A  2157  120A  158A  	fcall	_GetTime
  5441  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  5442  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  5443  0C93  0835               	movf	SetReceivedTimes@semaforoId,w
  5444  0C94  00AE               	movwf	??_SetReceivedTimes+1
  5445  0C95  072E               	addwf	??_SetReceivedTimes+1,w
  5446  0C96  072C               	addwf	SetReceivedTimes@_semafori,w
  5447  0C97  00AF               	movwf	??_SetReceivedTimes+2
  5448  0C98  082F               	movf	??_SetReceivedTimes+2,w
  5449  0C99  0084               	movwf	4
  5450  0C9A  1383               	bcf	3,7	;select IRP bank0
  5451  0C9B  0800               	movf	0,w
  5452  0C9C  00B0               	movwf	??_SetReceivedTimes+3
  5453  0C9D  0A84               	incf	4,f
  5454  0C9E  0800               	movf	0,w
  5455  0C9F  00B1               	movwf	??_SetReceivedTimes+4
  5456  0CA0  0836               	movf	SetReceivedTimes@colorId,w
  5457  0CA1  00B2               	movwf	??_SetReceivedTimes+5
  5458  0CA2  0732               	addwf	??_SetReceivedTimes+5,w
  5459  0CA3  3E06               	addlw	6
  5460  0CA4  0730               	addwf	??_SetReceivedTimes+3,w
  5461  0CA5  00B3               	movwf	??_SetReceivedTimes+6
  5462  0CA6  0831               	movf	??_SetReceivedTimes+4,w
  5463  0CA7  1803               	skipnc
  5464  0CA8  3E01               	addlw	1
  5465  0CA9  00B4               	movwf	??_SetReceivedTimes+7
  5466  0CAA  0833               	movf	??_SetReceivedTimes+6,w
  5467  0CAB  0084               	movwf	4
  5468  0CAC  1783               	bsf	3,7
  5469  0CAD  1C34               	btfss	??_SetReceivedTimes+7,0
  5470  0CAE  1383               	bcf	3,7
  5471  0CAF  0824               	movf	?_GetTime,w
  5472  0CB0  0080               	movwf	0
  5473  0CB1  0A84               	incf	4,f
  5474  0CB2  0825               	movf	?_GetTime+1,w
  5475  0CB3  0080               	movwf	0
  5476  0CB4                     l4354:	
  5477                           
  5478                           ;./CustomLib/TrafficLight.h: 95:     }
  5479  0CB4  3001               	movlw	1
  5480  0CB5  00AD               	movwf	??_SetReceivedTimes
  5481  0CB6  082D               	movf	??_SetReceivedTimes,w
  5482  0CB7  07B9               	addwf	SetReceivedTimes@i,f
  5483  0CB8  2C50               	goto	l4342
  5484  0CB9                     l174:	
  5485  0CB9  0008               	return
  5486  0CBA                     __end_of_SetReceivedTimes:	
  5487                           
  5488                           	psect	text18
  5489  085C                     __ptext18:	
  5490 ;; *************** function ___bmul *****************
  5491 ;; Defined at:
  5492 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;  multiplier      1    wreg     unsigned char 
  5495 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;  multiplier      1    7[BANK0 ] unsigned char 
  5498 ;;  product         1    6[BANK0 ] unsigned char 
  5499 ;; Return value:  Size  Location     Type
  5500 ;;                  1    wreg      unsigned char 
  5501 ;; Registers used:
  5502 ;;		wreg, status,2, status,0
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5508 ;;      Params:         0       1       0       0       0
  5509 ;;      Locals:         0       2       0       0       0
  5510 ;;      Temps:          0       1       0       0       0
  5511 ;;      Totals:         0       4       0       0       0
  5512 ;;Total ram usage:        4 bytes
  5513 ;; Hardware stack levels used:    1
  5514 ;; Hardware stack levels required when called:    3
  5515 ;; This function calls:
  5516 ;;		Nothing
  5517 ;; This function is called by:
  5518 ;;		_SetReceivedTimes
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           
  5523                           ;psect for function ___bmul
  5524  085C                     ___bmul:	
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5528                           ;___bmul@multiplier stored from wreg
  5529  085C  1283               	bcf	3,5	;RP0=0, select bank0
  5530  085D  1303               	bcf	3,6	;RP1=0, select bank0
  5531  085E  00A7               	movwf	___bmul@multiplier
  5532  085F                     l4072:	
  5533  085F  01A6               	clrf	___bmul@product
  5534  0860                     l4074:	
  5535  0860  1C27               	btfss	___bmul@multiplier,0
  5536  0861  2863               	goto	u3791
  5537  0862  2864               	goto	u3790
  5538  0863                     u3791:	
  5539  0863  2868               	goto	l4078
  5540  0864                     u3790:	
  5541  0864                     l4076:	
  5542  0864  0824               	movf	___bmul@multiplicand,w
  5543  0865  00A5               	movwf	??___bmul
  5544  0866  0825               	movf	??___bmul,w
  5545  0867  07A6               	addwf	___bmul@product,f
  5546  0868                     l4078:	
  5547  0868  1003               	clrc
  5548  0869  0DA4               	rlf	___bmul@multiplicand,f
  5549  086A                     l4080:	
  5550  086A  1003               	clrc
  5551  086B  0CA7               	rrf	___bmul@multiplier,f
  5552  086C  0827               	movf	___bmul@multiplier,w
  5553  086D  1D03               	btfss	3,2
  5554  086E  2870               	goto	u3801
  5555  086F  2871               	goto	u3800
  5556  0870                     u3801:	
  5557  0870  2860               	goto	l4074
  5558  0871                     u3800:	
  5559  0871                     l4082:	
  5560  0871  0826               	movf	___bmul@product,w
  5561  0872                     l474:	
  5562  0872  0008               	return
  5563  0873                     __end_of___bmul:	
  5564                           
  5565                           	psect	text19
  5566  0957                     __ptext19:	
  5567 ;; *************** function _GetTime *****************
  5568 ;; Defined at:
  5569 ;;		line 37 in file "./CustomLib/TrafficLight.h"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;  index           1    wreg     unsigned char 
  5572 ;;  _dataFromGat    1    4[BANK0 ] PTR unsigned char 
  5573 ;;		 -> dataFromGateway(15), 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  index           1    8[BANK0 ] unsigned char 
  5576 ;;  tmp             2   10[BANK0 ] int 
  5577 ;;  shortInt        1    9[BANK0 ] struct .
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  2    4[BANK0 ] int 
  5580 ;; Registers used:
  5581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5587 ;;      Params:         0       2       0       0       0
  5588 ;;      Locals:         0       4       0       0       0
  5589 ;;      Temps:          0       2       0       0       0
  5590 ;;      Totals:         0       8       0       0       0
  5591 ;;Total ram usage:        8 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    3
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_SetReceivedTimes
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           
  5602                           ;psect for function _GetTime
  5603  0957                     _GetTime:	
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  5607                           ;GetTime@index stored from wreg
  5608  0957  1283               	bcf	3,5	;RP0=0, select bank0
  5609  0958  1303               	bcf	3,6	;RP1=0, select bank0
  5610  0959  00A8               	movwf	GetTime@index
  5611  095A                     l4022:	
  5612                           
  5613                           ;./CustomLib/TrafficLight.h: 37: int GetTime(unsigned char index, ProtocolBytes _dataFro
      +                          mGateway);./CustomLib/TrafficLight.h: 38: {;./CustomLib/TrafficLight.h: 39:     int tmp;
      +                          ;./CustomLib/TrafficLight.h: 43:     } shortInt;;./CustomLib/TrafficLight.h: 45:     sho
      +                          rtInt.Val = _dataFromGateway[index + 3] & 0x7F;
  5614  095A  0828               	movf	GetTime@index,w
  5615  095B  0724               	addwf	GetTime@_dataFromGateway,w
  5616  095C  00A6               	movwf	??_GetTime
  5617  095D  0826               	movf	??_GetTime,w
  5618  095E  3E03               	addlw	3
  5619  095F  0084               	movwf	4
  5620  0960  307F               	movlw	127
  5621  0961  1383               	bcf	3,7	;select IRP bank0
  5622  0962  0500               	andwf	0,w
  5623  0963  00A7               	movwf	??_GetTime+1
  5624  0964  0829               	movf	GetTime@shortInt,w
  5625  0965  0627               	xorwf	??_GetTime+1,w
  5626  0966  3980               	andlw	-128
  5627  0967  0627               	xorwf	??_GetTime+1,w
  5628  0968  00A9               	movwf	GetTime@shortInt
  5629  0969                     l4024:	
  5630                           
  5631                           ;./CustomLib/TrafficLight.h: 46:     tmp = shortInt.Val;
  5632  0969  0829               	movf	GetTime@shortInt,w
  5633  096A  397F               	andlw	127
  5634  096B  00A6               	movwf	??_GetTime
  5635  096C  01A7               	clrf	??_GetTime+1
  5636  096D  0826               	movf	??_GetTime,w
  5637  096E  00AA               	movwf	GetTime@tmp
  5638  096F  0827               	movf	??_GetTime+1,w
  5639  0970  00AB               	movwf	GetTime@tmp+1
  5640  0971                     l4026:	
  5641                           
  5642                           ;./CustomLib/TrafficLight.h: 47:     tmp = (tmp << 7) & 0x80;
  5643  0971  082B               	movf	GetTime@tmp+1,w
  5644  0972  00A7               	movwf	??_GetTime+1
  5645  0973  082A               	movf	GetTime@tmp,w
  5646  0974  00A6               	movwf	??_GetTime
  5647  0975  3007               	movlw	7
  5648  0976  00FF               	movwf	btemp+1
  5649  0977                     u3685:	
  5650  0977  1003               	clrc
  5651  0978  0DA6               	rlf	??_GetTime,f
  5652  0979  0DA7               	rlf	??_GetTime+1,f
  5653  097A  0BFF               	decfsz	btemp+1,f
  5654  097B  2977               	goto	u3685
  5655  097C  3080               	movlw	128
  5656  097D  0526               	andwf	??_GetTime,w
  5657  097E  00AA               	movwf	GetTime@tmp
  5658  097F  3000               	movlw	0
  5659  0980  0527               	andwf	??_GetTime+1,w
  5660  0981  00AB               	movwf	GetTime@tmp+1
  5661  0982                     l4028:	
  5662                           
  5663                           ;./CustomLib/TrafficLight.h: 49:     shortInt.Val = _dataFromGateway[index + 2] & 0x7F;
  5664  0982  0828               	movf	GetTime@index,w
  5665  0983  0724               	addwf	GetTime@_dataFromGateway,w
  5666  0984  00A6               	movwf	??_GetTime
  5667  0985  0826               	movf	??_GetTime,w
  5668  0986  3E02               	addlw	2
  5669  0987  0084               	movwf	4
  5670  0988  307F               	movlw	127
  5671  0989  0500               	andwf	0,w
  5672  098A  00A7               	movwf	??_GetTime+1
  5673  098B  0829               	movf	GetTime@shortInt,w
  5674  098C  0627               	xorwf	??_GetTime+1,w
  5675  098D  3980               	andlw	-128
  5676  098E  0627               	xorwf	??_GetTime+1,w
  5677  098F  00A9               	movwf	GetTime@shortInt
  5678  0990                     l4030:	
  5679                           
  5680                           ;./CustomLib/TrafficLight.h: 50:     tmp = tmp | shortInt.Val;
  5681  0990  0829               	movf	GetTime@shortInt,w
  5682  0991  397F               	andlw	127
  5683  0992  00A6               	movwf	??_GetTime
  5684  0993  082A               	movf	GetTime@tmp,w
  5685  0994  0426               	iorwf	??_GetTime,w
  5686  0995  00AA               	movwf	GetTime@tmp
  5687  0996  082B               	movf	GetTime@tmp+1,w
  5688  0997  00AB               	movwf	GetTime@tmp+1
  5689  0998                     l4032:	
  5690                           
  5691                           ;./CustomLib/TrafficLight.h: 52:     return tmp;
  5692  0998  082B               	movf	GetTime@tmp+1,w
  5693  0999  00A5               	movwf	?_GetTime+1
  5694  099A  082A               	movf	GetTime@tmp,w
  5695  099B  00A4               	movwf	?_GetTime
  5696  099C                     l157:	
  5697  099C  0008               	return
  5698  099D                     __end_of_GetTime:	
  5699                           
  5700                           	psect	text20
  5701  0552                     __ptext20:	
  5702 ;; *************** function _SetDefaultTimers *****************
  5703 ;; Defined at:
  5704 ;;		line 56 in file "./CustomLib/TrafficLight.h"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  rosso           2    4[BANK0 ] int 
  5707 ;;  verde           2    6[BANK0 ] int 
  5708 ;;  giallo          2    8[BANK0 ] int 
  5709 ;;  _semafori       1   10[BANK0 ] PTR PTR struct .
  5710 ;;		 -> Semafori(8), 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  i               1   19[BANK0 ] unsigned char 
  5713 ;;  l               1   18[BANK0 ] unsigned char 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  1    wreg      void 
  5716 ;; Registers used:
  5717 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5723 ;;      Params:         0       7       0       0       0
  5724 ;;      Locals:         0       2       0       0       0
  5725 ;;      Temps:          0       7       0       0       0
  5726 ;;      Totals:         0      16       0       0       0
  5727 ;;Total ram usage:       16 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    3
  5730 ;; This function calls:
  5731 ;;		Nothing
  5732 ;; This function is called by:
  5733 ;;		_main
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           
  5738                           ;psect for function _SetDefaultTimers
  5739  0552                     _SetDefaultTimers:	
  5740  0552                     l4304:	
  5741                           ;incstack = 0
  5742                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  5743                           
  5744                           
  5745                           ;./CustomLib/TrafficLight.h: 56: void SetDefaultTimers(int rosso, int verde, int giallo,
      +                           _Semafori _semafori);./CustomLib/TrafficLight.h: 57: {;./CustomLib/TrafficLight.h: 58: 
      +                              for (unsigned char l = 0; l < n_semafori; l++)
  5746  0552  1283               	bcf	3,5	;RP0=0, select bank0
  5747  0553  1303               	bcf	3,6	;RP1=0, select bank0
  5748  0554  01B2               	clrf	SetDefaultTimers@l
  5749  0555                     l4310:	
  5750                           
  5751                           ;./CustomLib/TrafficLight.h: 59:     {;./CustomLib/TrafficLight.h: 60:         for (unsi
      +                          gned char i = 0; i < 3; i++)
  5752  0555  01B3               	clrf	SetDefaultTimers@i
  5753  0556  2E1D               	goto	l4324
  5754  0557                     l4316:	
  5755                           
  5756                           ;./CustomLib/TrafficLight.h: 65:                 (*(_semafori)[l]).times[i] = rosso;
  5757  0557  0832               	movf	SetDefaultTimers@l,w
  5758  0558  00AB               	movwf	??_SetDefaultTimers
  5759  0559  072B               	addwf	??_SetDefaultTimers,w
  5760  055A  072A               	addwf	SetDefaultTimers@_semafori,w
  5761  055B  00AC               	movwf	??_SetDefaultTimers+1
  5762  055C  082C               	movf	??_SetDefaultTimers+1,w
  5763  055D  0084               	movwf	4
  5764  055E  1383               	bcf	3,7	;select IRP bank0
  5765  055F  0800               	movf	0,w
  5766  0560  00AD               	movwf	??_SetDefaultTimers+2
  5767  0561  0A84               	incf	4,f
  5768  0562  0800               	movf	0,w
  5769  0563  00AE               	movwf	??_SetDefaultTimers+3
  5770  0564  0833               	movf	SetDefaultTimers@i,w
  5771  0565  00AF               	movwf	??_SetDefaultTimers+4
  5772  0566  072F               	addwf	??_SetDefaultTimers+4,w
  5773  0567  072D               	addwf	??_SetDefaultTimers+2,w
  5774  0568  00B0               	movwf	??_SetDefaultTimers+5
  5775  0569  082E               	movf	??_SetDefaultTimers+3,w
  5776  056A  1803               	skipnc
  5777  056B  3E01               	addlw	1
  5778  056C  00B1               	movwf	??_SetDefaultTimers+6
  5779  056D  0830               	movf	??_SetDefaultTimers+5,w
  5780  056E  0084               	movwf	4
  5781  056F  1783               	bsf	3,7
  5782  0570  1C31               	btfss	??_SetDefaultTimers+6,0
  5783  0571  1383               	bcf	3,7
  5784  0572  0824               	movf	SetDefaultTimers@rosso,w
  5785  0573  0080               	movwf	0
  5786  0574  0A84               	incf	4,f
  5787  0575  0825               	movf	SetDefaultTimers@rosso+1,w
  5788  0576  0080               	movwf	0
  5789                           
  5790                           ;./CustomLib/TrafficLight.h: 66:                 (*(_semafori)[l]).new_times[i] = rosso;
  5791  0577  0832               	movf	SetDefaultTimers@l,w
  5792  0578  00AB               	movwf	??_SetDefaultTimers
  5793  0579  072B               	addwf	??_SetDefaultTimers,w
  5794  057A  072A               	addwf	SetDefaultTimers@_semafori,w
  5795  057B  00AC               	movwf	??_SetDefaultTimers+1
  5796  057C  082C               	movf	??_SetDefaultTimers+1,w
  5797  057D  0084               	movwf	4
  5798  057E  1383               	bcf	3,7	;select IRP bank0
  5799  057F  0800               	movf	0,w
  5800  0580  00AD               	movwf	??_SetDefaultTimers+2
  5801  0581  0A84               	incf	4,f
  5802  0582  0800               	movf	0,w
  5803  0583  00AE               	movwf	??_SetDefaultTimers+3
  5804  0584  0833               	movf	SetDefaultTimers@i,w
  5805  0585  00AF               	movwf	??_SetDefaultTimers+4
  5806  0586  072F               	addwf	??_SetDefaultTimers+4,w
  5807  0587  3E06               	addlw	6
  5808  0588  072D               	addwf	??_SetDefaultTimers+2,w
  5809  0589  00B0               	movwf	??_SetDefaultTimers+5
  5810  058A  082E               	movf	??_SetDefaultTimers+3,w
  5811  058B  1803               	skipnc
  5812  058C  3E01               	addlw	1
  5813  058D  00B1               	movwf	??_SetDefaultTimers+6
  5814  058E  0830               	movf	??_SetDefaultTimers+5,w
  5815  058F  0084               	movwf	4
  5816  0590  1783               	bsf	3,7
  5817  0591  1C31               	btfss	??_SetDefaultTimers+6,0
  5818  0592  1383               	bcf	3,7
  5819  0593  0824               	movf	SetDefaultTimers@rosso,w
  5820  0594  0080               	movwf	0
  5821  0595  0A84               	incf	4,f
  5822  0596  0825               	movf	SetDefaultTimers@rosso+1,w
  5823  0597  0080               	movwf	0
  5824                           
  5825                           ;./CustomLib/TrafficLight.h: 67:                 break;
  5826  0598  2E30               	goto	l4326
  5827  0599                     l4318:	
  5828                           
  5829                           ;./CustomLib/TrafficLight.h: 69:                 (*(_semafori)[l]).times[i] = verde;
  5830  0599  0832               	movf	SetDefaultTimers@l,w
  5831  059A  00AB               	movwf	??_SetDefaultTimers
  5832  059B  072B               	addwf	??_SetDefaultTimers,w
  5833  059C  072A               	addwf	SetDefaultTimers@_semafori,w
  5834  059D  00AC               	movwf	??_SetDefaultTimers+1
  5835  059E  082C               	movf	??_SetDefaultTimers+1,w
  5836  059F  0084               	movwf	4
  5837  05A0  1383               	bcf	3,7	;select IRP bank0
  5838  05A1  0800               	movf	0,w
  5839  05A2  00AD               	movwf	??_SetDefaultTimers+2
  5840  05A3  0A84               	incf	4,f
  5841  05A4  0800               	movf	0,w
  5842  05A5  00AE               	movwf	??_SetDefaultTimers+3
  5843  05A6  0833               	movf	SetDefaultTimers@i,w
  5844  05A7  00AF               	movwf	??_SetDefaultTimers+4
  5845  05A8  072F               	addwf	??_SetDefaultTimers+4,w
  5846  05A9  072D               	addwf	??_SetDefaultTimers+2,w
  5847  05AA  00B0               	movwf	??_SetDefaultTimers+5
  5848  05AB  082E               	movf	??_SetDefaultTimers+3,w
  5849  05AC  1803               	skipnc
  5850  05AD  3E01               	addlw	1
  5851  05AE  00B1               	movwf	??_SetDefaultTimers+6
  5852  05AF  0830               	movf	??_SetDefaultTimers+5,w
  5853  05B0  0084               	movwf	4
  5854  05B1  1783               	bsf	3,7
  5855  05B2  1C31               	btfss	??_SetDefaultTimers+6,0
  5856  05B3  1383               	bcf	3,7
  5857  05B4  0826               	movf	SetDefaultTimers@verde,w
  5858  05B5  0080               	movwf	0
  5859  05B6  0A84               	incf	4,f
  5860  05B7  0827               	movf	SetDefaultTimers@verde+1,w
  5861  05B8  0080               	movwf	0
  5862                           
  5863                           ;./CustomLib/TrafficLight.h: 70:                 (*(_semafori)[l]).new_times[i] = verde;
  5864  05B9  0832               	movf	SetDefaultTimers@l,w
  5865  05BA  00AB               	movwf	??_SetDefaultTimers
  5866  05BB  072B               	addwf	??_SetDefaultTimers,w
  5867  05BC  072A               	addwf	SetDefaultTimers@_semafori,w
  5868  05BD  00AC               	movwf	??_SetDefaultTimers+1
  5869  05BE  082C               	movf	??_SetDefaultTimers+1,w
  5870  05BF  0084               	movwf	4
  5871  05C0  1383               	bcf	3,7	;select IRP bank0
  5872  05C1  0800               	movf	0,w
  5873  05C2  00AD               	movwf	??_SetDefaultTimers+2
  5874  05C3  0A84               	incf	4,f
  5875  05C4  0800               	movf	0,w
  5876  05C5  00AE               	movwf	??_SetDefaultTimers+3
  5877  05C6  0833               	movf	SetDefaultTimers@i,w
  5878  05C7  00AF               	movwf	??_SetDefaultTimers+4
  5879  05C8  072F               	addwf	??_SetDefaultTimers+4,w
  5880  05C9  3E06               	addlw	6
  5881  05CA  072D               	addwf	??_SetDefaultTimers+2,w
  5882  05CB  00B0               	movwf	??_SetDefaultTimers+5
  5883  05CC  082E               	movf	??_SetDefaultTimers+3,w
  5884  05CD  1803               	skipnc
  5885  05CE  3E01               	addlw	1
  5886  05CF  00B1               	movwf	??_SetDefaultTimers+6
  5887  05D0  0830               	movf	??_SetDefaultTimers+5,w
  5888  05D1  0084               	movwf	4
  5889  05D2  1783               	bsf	3,7
  5890  05D3  1C31               	btfss	??_SetDefaultTimers+6,0
  5891  05D4  1383               	bcf	3,7
  5892  05D5  0826               	movf	SetDefaultTimers@verde,w
  5893  05D6  0080               	movwf	0
  5894  05D7  0A84               	incf	4,f
  5895  05D8  0827               	movf	SetDefaultTimers@verde+1,w
  5896  05D9  0080               	movwf	0
  5897                           
  5898                           ;./CustomLib/TrafficLight.h: 71:                 break;
  5899  05DA  2E30               	goto	l4326
  5900  05DB                     l4320:	
  5901                           
  5902                           ;./CustomLib/TrafficLight.h: 73:                 (*(_semafori)[l]).times[i] = giallo;
  5903  05DB  0832               	movf	SetDefaultTimers@l,w
  5904  05DC  00AB               	movwf	??_SetDefaultTimers
  5905  05DD  072B               	addwf	??_SetDefaultTimers,w
  5906  05DE  072A               	addwf	SetDefaultTimers@_semafori,w
  5907  05DF  00AC               	movwf	??_SetDefaultTimers+1
  5908  05E0  082C               	movf	??_SetDefaultTimers+1,w
  5909  05E1  0084               	movwf	4
  5910  05E2  1383               	bcf	3,7	;select IRP bank0
  5911  05E3  0800               	movf	0,w
  5912  05E4  00AD               	movwf	??_SetDefaultTimers+2
  5913  05E5  0A84               	incf	4,f
  5914  05E6  0800               	movf	0,w
  5915  05E7  00AE               	movwf	??_SetDefaultTimers+3
  5916  05E8  0833               	movf	SetDefaultTimers@i,w
  5917  05E9  00AF               	movwf	??_SetDefaultTimers+4
  5918  05EA  072F               	addwf	??_SetDefaultTimers+4,w
  5919  05EB  072D               	addwf	??_SetDefaultTimers+2,w
  5920  05EC  00B0               	movwf	??_SetDefaultTimers+5
  5921  05ED  082E               	movf	??_SetDefaultTimers+3,w
  5922  05EE  1803               	skipnc
  5923  05EF  3E01               	addlw	1
  5924  05F0  00B1               	movwf	??_SetDefaultTimers+6
  5925  05F1  0830               	movf	??_SetDefaultTimers+5,w
  5926  05F2  0084               	movwf	4
  5927  05F3  1783               	bsf	3,7
  5928  05F4  1C31               	btfss	??_SetDefaultTimers+6,0
  5929  05F5  1383               	bcf	3,7
  5930  05F6  0828               	movf	SetDefaultTimers@giallo,w
  5931  05F7  0080               	movwf	0
  5932  05F8  0A84               	incf	4,f
  5933  05F9  0829               	movf	SetDefaultTimers@giallo+1,w
  5934  05FA  0080               	movwf	0
  5935                           
  5936                           ;./CustomLib/TrafficLight.h: 74:                 (*(_semafori)[l]).new_times[i] = giallo
      +                          ;
  5937  05FB  0832               	movf	SetDefaultTimers@l,w
  5938  05FC  00AB               	movwf	??_SetDefaultTimers
  5939  05FD  072B               	addwf	??_SetDefaultTimers,w
  5940  05FE  072A               	addwf	SetDefaultTimers@_semafori,w
  5941  05FF  00AC               	movwf	??_SetDefaultTimers+1
  5942  0600  082C               	movf	??_SetDefaultTimers+1,w
  5943  0601  0084               	movwf	4
  5944  0602  1383               	bcf	3,7	;select IRP bank0
  5945  0603  0800               	movf	0,w
  5946  0604  00AD               	movwf	??_SetDefaultTimers+2
  5947  0605  0A84               	incf	4,f
  5948  0606  0800               	movf	0,w
  5949  0607  00AE               	movwf	??_SetDefaultTimers+3
  5950  0608  0833               	movf	SetDefaultTimers@i,w
  5951  0609  00AF               	movwf	??_SetDefaultTimers+4
  5952  060A  072F               	addwf	??_SetDefaultTimers+4,w
  5953  060B  3E06               	addlw	6
  5954  060C  072D               	addwf	??_SetDefaultTimers+2,w
  5955  060D  00B0               	movwf	??_SetDefaultTimers+5
  5956  060E  082E               	movf	??_SetDefaultTimers+3,w
  5957  060F  1803               	skipnc
  5958  0610  3E01               	addlw	1
  5959  0611  00B1               	movwf	??_SetDefaultTimers+6
  5960  0612  0830               	movf	??_SetDefaultTimers+5,w
  5961  0613  0084               	movwf	4
  5962  0614  1783               	bsf	3,7
  5963  0615  1C31               	btfss	??_SetDefaultTimers+6,0
  5964  0616  1383               	bcf	3,7
  5965  0617  0828               	movf	SetDefaultTimers@giallo,w
  5966  0618  0080               	movwf	0
  5967  0619  0A84               	incf	4,f
  5968  061A  0829               	movf	SetDefaultTimers@giallo+1,w
  5969  061B  0080               	movwf	0
  5970                           
  5971                           ;./CustomLib/TrafficLight.h: 75:                 break;
  5972  061C  2E30               	goto	l4326
  5973  061D                     l4324:	
  5974  061D  0833               	movf	SetDefaultTimers@i,w
  5975  061E  00AB               	movwf	??_SetDefaultTimers
  5976  061F  01AC               	clrf	??_SetDefaultTimers+1
  5977                           
  5978                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5979                           ; Switch size 1, requested type "simple"
  5980                           ; Number of cases is 1, Range of values is 0 to 0
  5981                           ; switch strategies available:
  5982                           ; Name         Instructions Cycles
  5983                           ; simple_byte            4     3 (average)
  5984                           ; direct_byte           11     8 (fixed)
  5985                           ; jumptable            260     6 (fixed)
  5986                           ;	Chosen strategy is simple_byte
  5987  0620  082C               	movf	??_SetDefaultTimers+1,w
  5988  0621  3A00               	xorlw	0	; case 0
  5989  0622  1903               	skipnz
  5990  0623  2E25               	goto	l4888
  5991  0624  2E30               	goto	l4326
  5992  0625                     l4888:	
  5993                           
  5994                           ; Switch size 1, requested type "simple"
  5995                           ; Number of cases is 3, Range of values is 0 to 2
  5996                           ; switch strategies available:
  5997                           ; Name         Instructions Cycles
  5998                           ; simple_byte           10     6 (average)
  5999                           ; direct_byte           17     8 (fixed)
  6000                           ; jumptable            260     6 (fixed)
  6001                           ;	Chosen strategy is simple_byte
  6002  0625  082B               	movf	??_SetDefaultTimers,w
  6003  0626  3A00               	xorlw	0	; case 0
  6004  0627  1903               	skipnz
  6005  0628  2D57               	goto	l4316
  6006  0629  3A01               	xorlw	1	; case 1
  6007  062A  1903               	skipnz
  6008  062B  2D99               	goto	l4318
  6009  062C  3A03               	xorlw	3	; case 2
  6010  062D  1903               	skipnz
  6011  062E  2DDB               	goto	l4320
  6012  062F  2E30               	goto	l4326
  6013  0630                     l4326:	
  6014                           
  6015                           ;./CustomLib/TrafficLight.h: 77:         }
  6016  0630  3001               	movlw	1
  6017  0631  00AB               	movwf	??_SetDefaultTimers
  6018  0632  082B               	movf	??_SetDefaultTimers,w
  6019  0633  07B3               	addwf	SetDefaultTimers@i,f
  6020  0634                     l4328:	
  6021  0634  3003               	movlw	3
  6022  0635  0233               	subwf	SetDefaultTimers@i,w
  6023  0636  1C03               	skipc
  6024  0637  2E39               	goto	u4241
  6025  0638  2E3A               	goto	u4240
  6026  0639                     u4241:	
  6027  0639  2E1D               	goto	l4324
  6028  063A                     u4240:	
  6029  063A                     l4330:	
  6030                           
  6031                           ;./CustomLib/TrafficLight.h: 78:     }
  6032  063A  3001               	movlw	1
  6033  063B  00AB               	movwf	??_SetDefaultTimers
  6034  063C  082B               	movf	??_SetDefaultTimers,w
  6035  063D  07B2               	addwf	SetDefaultTimers@l,f
  6036  063E                     l4332:	
  6037  063E  3002               	movlw	2
  6038  063F  0232               	subwf	SetDefaultTimers@l,w
  6039  0640  1C03               	skipc
  6040  0641  2E43               	goto	u4251
  6041  0642  2E44               	goto	u4250
  6042  0643                     u4251:	
  6043  0643  2D55               	goto	l4310
  6044  0644                     u4250:	
  6045  0644                     l4334:	
  6046                           
  6047                           ;./CustomLib/TrafficLight.h: 80:     (*(_semafori)[0]).lux_select = 0;
  6048  0644  082A               	movf	SetDefaultTimers@_semafori,w
  6049  0645  0084               	movwf	4
  6050  0646  1383               	bcf	3,7	;select IRP bank0
  6051  0647  0800               	movf	0,w
  6052  0648  00AB               	movwf	??_SetDefaultTimers
  6053  0649  0A84               	incf	4,f
  6054  064A  0800               	movf	0,w
  6055  064B  00AC               	movwf	??_SetDefaultTimers+1
  6056  064C  082B               	movf	??_SetDefaultTimers,w
  6057  064D  3E0C               	addlw	12
  6058  064E  00AD               	movwf	??_SetDefaultTimers+2
  6059  064F  082C               	movf	??_SetDefaultTimers+1,w
  6060  0650  1803               	skipnc
  6061  0651  3E01               	addlw	1
  6062  0652  3E00               	addlw	0
  6063  0653  00AE               	movwf	??_SetDefaultTimers+3
  6064  0654  082D               	movf	??_SetDefaultTimers+2,w
  6065  0655  0084               	movwf	4
  6066  0656  1783               	bsf	3,7
  6067  0657  1C2E               	btfss	??_SetDefaultTimers+3,0
  6068  0658  1383               	bcf	3,7
  6069  0659  0180               	clrf	0
  6070                           
  6071                           ;./CustomLib/TrafficLight.h: 81:     (*(_semafori)[0]).new_lux_select = 0;
  6072  065A  082A               	movf	SetDefaultTimers@_semafori,w
  6073  065B  0084               	movwf	4
  6074  065C  1383               	bcf	3,7	;select IRP bank0
  6075  065D  0800               	movf	0,w
  6076  065E  00AB               	movwf	??_SetDefaultTimers
  6077  065F  0A84               	incf	4,f
  6078  0660  0800               	movf	0,w
  6079  0661  00AC               	movwf	??_SetDefaultTimers+1
  6080  0662  082B               	movf	??_SetDefaultTimers,w
  6081  0663  3E0D               	addlw	13
  6082  0664  00AD               	movwf	??_SetDefaultTimers+2
  6083  0665  082C               	movf	??_SetDefaultTimers+1,w
  6084  0666  1803               	skipnc
  6085  0667  3E01               	addlw	1
  6086  0668  3E00               	addlw	0
  6087  0669  00AE               	movwf	??_SetDefaultTimers+3
  6088  066A  082D               	movf	??_SetDefaultTimers+2,w
  6089  066B  0084               	movwf	4
  6090  066C  1783               	bsf	3,7
  6091  066D  1C2E               	btfss	??_SetDefaultTimers+3,0
  6092  066E  1383               	bcf	3,7
  6093  066F  0180               	clrf	0
  6094                           
  6095                           ;./CustomLib/TrafficLight.h: 82:     (*(_semafori)[1]).lux_select = 1;
  6096  0670  082A               	movf	SetDefaultTimers@_semafori,w
  6097  0671  3E02               	addlw	2
  6098  0672  0084               	movwf	4
  6099  0673  1383               	bcf	3,7	;select IRP bank0
  6100  0674  0800               	movf	0,w
  6101  0675  00AB               	movwf	??_SetDefaultTimers
  6102  0676  0A84               	incf	4,f
  6103  0677  0800               	movf	0,w
  6104  0678  00AC               	movwf	??_SetDefaultTimers+1
  6105  0679  082B               	movf	??_SetDefaultTimers,w
  6106  067A  3E0C               	addlw	12
  6107  067B  00AD               	movwf	??_SetDefaultTimers+2
  6108  067C  082C               	movf	??_SetDefaultTimers+1,w
  6109  067D  1803               	skipnc
  6110  067E  3E01               	addlw	1
  6111  067F  3E00               	addlw	0
  6112  0680  00AE               	movwf	??_SetDefaultTimers+3
  6113  0681  082D               	movf	??_SetDefaultTimers+2,w
  6114  0682  0084               	movwf	4
  6115  0683  1783               	bsf	3,7
  6116  0684  1C2E               	btfss	??_SetDefaultTimers+3,0
  6117  0685  1383               	bcf	3,7
  6118  0686  0180               	clrf	0
  6119  0687  0A80               	incf	0,f
  6120                           
  6121                           ;./CustomLib/TrafficLight.h: 83:     (*(_semafori)[1]).new_lux_select = 1;
  6122  0688  082A               	movf	SetDefaultTimers@_semafori,w
  6123  0689  3E02               	addlw	2
  6124  068A  0084               	movwf	4
  6125  068B  1383               	bcf	3,7	;select IRP bank0
  6126  068C  0800               	movf	0,w
  6127  068D  00AB               	movwf	??_SetDefaultTimers
  6128  068E  0A84               	incf	4,f
  6129  068F  0800               	movf	0,w
  6130  0690  00AC               	movwf	??_SetDefaultTimers+1
  6131  0691  082B               	movf	??_SetDefaultTimers,w
  6132  0692  3E0D               	addlw	13
  6133  0693  00AD               	movwf	??_SetDefaultTimers+2
  6134  0694  082C               	movf	??_SetDefaultTimers+1,w
  6135  0695  1803               	skipnc
  6136  0696  3E01               	addlw	1
  6137  0697  3E00               	addlw	0
  6138  0698  00AE               	movwf	??_SetDefaultTimers+3
  6139  0699  082D               	movf	??_SetDefaultTimers+2,w
  6140  069A  0084               	movwf	4
  6141  069B  1783               	bsf	3,7
  6142  069C  1C2E               	btfss	??_SetDefaultTimers+3,0
  6143  069D  1383               	bcf	3,7
  6144  069E  0180               	clrf	0
  6145  069F  0A80               	incf	0,f
  6146  06A0                     l169:	
  6147  06A0  0008               	return
  6148  06A1                     __end_of_SetDefaultTimers:	
  6149                           
  6150                           	psect	text21
  6151  0D36                     __ptext21:	
  6152 ;; *************** function _GetDigits *****************
  6153 ;; Defined at:
  6154 ;;		line 28 in file "./CustomLib/Conversions.h"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;  centinaia       1    wreg     PTR unsigned char 
  6157 ;;		 -> centinaia(1), 
  6158 ;;  decine          1   20[BANK0 ] PTR unsigned char 
  6159 ;;		 -> decine(1), 
  6160 ;;  unita           1   21[BANK0 ] PTR unsigned char 
  6161 ;;		 -> unita(1), 
  6162 ;;  Time            2   22[BANK0 ] int 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  centinaia       1   27[BANK0 ] PTR unsigned char 
  6165 ;;		 -> centinaia(1), 
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  1    wreg      void 
  6168 ;; Registers used:
  6169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6175 ;;      Params:         0       4       0       0       0
  6176 ;;      Locals:         0       3       0       0       0
  6177 ;;      Temps:          0       1       0       0       0
  6178 ;;      Totals:         0       8       0       0       0
  6179 ;;Total ram usage:        8 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    4
  6182 ;; This function calls:
  6183 ;;		___awdiv
  6184 ;;		___awmod
  6185 ;; This function is called by:
  6186 ;;		_main
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           
  6191                           ;psect for function _GetDigits
  6192  0D36                     _GetDigits:	
  6193                           
  6194                           ;incstack = 0
  6195                           ; Regs used in _GetDigits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6196                           ;GetDigits@centinaia stored from wreg
  6197  0D36  1283               	bcf	3,5	;RP0=0, select bank0
  6198  0D37  1303               	bcf	3,6	;RP1=0, select bank0
  6199  0D38  00BB               	movwf	GetDigits@centinaia
  6200  0D39                     l4212:	
  6201                           
  6202                           ;./CustomLib/Conversions.h: 28: void GetDigits(unsigned char *centinaia, unsigned char *
      +                          decine, unsigned char *unita, int Time);./CustomLib/Conversions.h: 29: {;./CustomLib/Con
      +                          versions.h: 30:     while (Time / 1000 > 0)
  6203  0D39  2D4F               	goto	l4216
  6204  0D3A                     l4214:	
  6205                           
  6206                           ;./CustomLib/Conversions.h: 31:     {;./CustomLib/Conversions.h: 32:         Time = Time
      +                           / 10;
  6207  0D3A  300A               	movlw	10
  6208  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  6209  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  6210  0D3D  00AB               	movwf	___awdiv@divisor
  6211  0D3E  3000               	movlw	0
  6212  0D3F  00AC               	movwf	___awdiv@divisor+1
  6213  0D40  0837               	movf	GetDigits@Time+1,w
  6214  0D41  00AE               	movwf	___awdiv@dividend+1
  6215  0D42  0836               	movf	GetDigits@Time,w
  6216  0D43  00AD               	movwf	___awdiv@dividend
  6217  0D44  120A  158A  23E3  120A  158A  	fcall	___awdiv
  6218  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  6219  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
  6220  0D4B  082C               	movf	?___awdiv+1,w
  6221  0D4C  00B7               	movwf	GetDigits@Time+1
  6222  0D4D  082B               	movf	?___awdiv,w
  6223  0D4E  00B6               	movwf	GetDigits@Time
  6224  0D4F                     l4216:	
  6225                           
  6226                           ;./CustomLib/Conversions.h: 30:     while (Time / 1000 > 0)
  6227  0D4F  30E8               	movlw	232
  6228  0D50  00AB               	movwf	___awdiv@divisor
  6229  0D51  3003               	movlw	3
  6230  0D52  00AC               	movwf	___awdiv@divisor+1
  6231  0D53  0837               	movf	GetDigits@Time+1,w
  6232  0D54  00AE               	movwf	___awdiv@dividend+1
  6233  0D55  0836               	movf	GetDigits@Time,w
  6234  0D56  00AD               	movwf	___awdiv@dividend
  6235  0D57  120A  158A  23E3  120A  158A  	fcall	___awdiv
  6236  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  6237  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  6238  0D5E  082C               	movf	?___awdiv+1,w
  6239  0D5F  3A80               	xorlw	128
  6240  0D60  00FF               	movwf	btemp+1
  6241  0D61  3080               	movlw	128
  6242  0D62  027F               	subwf	btemp+1,w
  6243  0D63  1D03               	skipz
  6244  0D64  2D67               	goto	u4105
  6245  0D65  3001               	movlw	1
  6246  0D66  022B               	subwf	?___awdiv,w
  6247  0D67                     u4105:	
  6248  0D67  1803               	skipnc
  6249  0D68  2D6A               	goto	u4101
  6250  0D69  2D6B               	goto	u4100
  6251  0D6A                     u4101:	
  6252  0D6A  2D3A               	goto	l4214
  6253  0D6B                     u4100:	
  6254  0D6B                     l4218:	
  6255                           
  6256                           ;./CustomLib/Conversions.h: 35:     *centinaia = Time / 100;
  6257  0D6B  3064               	movlw	100
  6258  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  6259  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  6260  0D6E  00AB               	movwf	___awdiv@divisor
  6261  0D6F  3000               	movlw	0
  6262  0D70  00AC               	movwf	___awdiv@divisor+1
  6263  0D71  0837               	movf	GetDigits@Time+1,w
  6264  0D72  00AE               	movwf	___awdiv@dividend+1
  6265  0D73  0836               	movf	GetDigits@Time,w
  6266  0D74  00AD               	movwf	___awdiv@dividend
  6267  0D75  120A  158A  23E3  120A  158A  	fcall	___awdiv
  6268  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  6269  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  6270  0D7C  082B               	movf	?___awdiv,w
  6271  0D7D  00B8               	movwf	??_GetDigits
  6272  0D7E  083B               	movf	GetDigits@centinaia,w
  6273  0D7F  0084               	movwf	4
  6274  0D80  0838               	movf	??_GetDigits,w
  6275  0D81  1383               	bcf	3,7	;select IRP bank0
  6276  0D82  0080               	movwf	0
  6277                           
  6278                           ;./CustomLib/Conversions.h: 36:     *decine = (Time % 100) / 10;
  6279  0D83  300A               	movlw	10
  6280  0D84  00AB               	movwf	___awdiv@divisor
  6281  0D85  3000               	movlw	0
  6282  0D86  00AC               	movwf	___awdiv@divisor+1
  6283  0D87  0837               	movf	GetDigits@Time+1,w
  6284  0D88  00A7               	movwf	___awmod@dividend+1
  6285  0D89  0836               	movf	GetDigits@Time,w
  6286  0D8A  00A6               	movwf	___awmod@dividend
  6287  0D8B  3064               	movlw	100
  6288  0D8C  00A4               	movwf	___awmod@divisor
  6289  0D8D  3000               	movlw	0
  6290  0D8E  00A5               	movwf	___awmod@divisor+1
  6291  0D8F  120A  158A  2323  120A  158A  	fcall	___awmod
  6292  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  6293  0D95  1303               	bcf	3,6	;RP1=0, select bank0
  6294  0D96  0825               	movf	?___awmod+1,w
  6295  0D97  00AE               	movwf	___awdiv@dividend+1
  6296  0D98  0824               	movf	?___awmod,w
  6297  0D99  00AD               	movwf	___awdiv@dividend
  6298  0D9A  120A  158A  23E3  120A  158A  	fcall	___awdiv
  6299  0D9F  1283               	bcf	3,5	;RP0=0, select bank0
  6300  0DA0  1303               	bcf	3,6	;RP1=0, select bank0
  6301  0DA1  082B               	movf	?___awdiv,w
  6302  0DA2  00B8               	movwf	??_GetDigits
  6303  0DA3  0834               	movf	GetDigits@decine,w
  6304  0DA4  0084               	movwf	4
  6305  0DA5  0838               	movf	??_GetDigits,w
  6306  0DA6  1383               	bcf	3,7	;select IRP bank0
  6307  0DA7  0080               	movwf	0
  6308  0DA8                     l4220:	
  6309                           
  6310                           ;./CustomLib/Conversions.h: 37:     *unita = (Time % 100) % 10;
  6311  0DA8  0837               	movf	GetDigits@Time+1,w
  6312  0DA9  00A7               	movwf	___awmod@dividend+1
  6313  0DAA  0836               	movf	GetDigits@Time,w
  6314  0DAB  00A6               	movwf	___awmod@dividend
  6315  0DAC  3064               	movlw	100
  6316  0DAD  00A4               	movwf	___awmod@divisor
  6317  0DAE  3000               	movlw	0
  6318  0DAF  00A5               	movwf	___awmod@divisor+1
  6319  0DB0  120A  158A  2323  120A  158A  	fcall	___awmod
  6320  0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  6321  0DB6  1303               	bcf	3,6	;RP1=0, select bank0
  6322  0DB7  0825               	movf	?___awmod+1,w
  6323  0DB8  00BA               	movwf	_GetDigits$1212+1
  6324  0DB9  0824               	movf	?___awmod,w
  6325  0DBA  00B9               	movwf	_GetDigits$1212
  6326  0DBB                     l4222:	
  6327                           
  6328                           ;./CustomLib/Conversions.h: 37:     *unita = (Time % 100) % 10;
  6329  0DBB  300A               	movlw	10
  6330  0DBC  00A4               	movwf	___awmod@divisor
  6331  0DBD  3000               	movlw	0
  6332  0DBE  00A5               	movwf	___awmod@divisor+1
  6333  0DBF  083A               	movf	_GetDigits$1212+1,w
  6334  0DC0  00A7               	movwf	___awmod@dividend+1
  6335  0DC1  0839               	movf	_GetDigits$1212,w
  6336  0DC2  00A6               	movwf	___awmod@dividend
  6337  0DC3  120A  158A  2323  120A  158A  	fcall	___awmod
  6338  0DC8  1283               	bcf	3,5	;RP0=0, select bank0
  6339  0DC9  1303               	bcf	3,6	;RP1=0, select bank0
  6340  0DCA  0824               	movf	?___awmod,w
  6341  0DCB  00B8               	movwf	??_GetDigits
  6342  0DCC  0835               	movf	GetDigits@unita,w
  6343  0DCD  0084               	movwf	4
  6344  0DCE  0838               	movf	??_GetDigits,w
  6345  0DCF  1383               	bcf	3,7	;select IRP bank0
  6346  0DD0  0080               	movwf	0
  6347  0DD1                     l100:	
  6348  0DD1  0008               	return
  6349  0DD2                     __end_of_GetDigits:	
  6350                           
  6351                           	psect	text22
  6352  0B23                     __ptext22:	
  6353 ;; *************** function ___awmod *****************
  6354 ;; Defined at:
  6355 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  divisor         2    4[BANK0 ] int 
  6358 ;;  dividend        2    6[BANK0 ] int 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  sign            1   10[BANK0 ] unsigned char 
  6361 ;;  counter         1    9[BANK0 ] unsigned char 
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  2    4[BANK0 ] int 
  6364 ;; Registers used:
  6365 ;;		wreg, status,2, status,0
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6371 ;;      Params:         0       4       0       0       0
  6372 ;;      Locals:         0       2       0       0       0
  6373 ;;      Temps:          0       1       0       0       0
  6374 ;;      Totals:         0       7       0       0       0
  6375 ;;Total ram usage:        7 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    3
  6378 ;; This function calls:
  6379 ;;		Nothing
  6380 ;; This function is called by:
  6381 ;;		_GetDigits
  6382 ;;		_ShowDigitsOnDisplay
  6383 ;;		_intToString
  6384 ;;		_ChangeTrafficLight
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function ___awmod
  6390  0B23                     ___awmod:	
  6391  0B23                     l4170:	
  6392                           ;incstack = 0
  6393                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6394                           
  6395  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  6396  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  6397  0B25  01AA               	clrf	___awmod@sign
  6398  0B26                     l4172:	
  6399  0B26  1FA7               	btfss	___awmod@dividend+1,7
  6400  0B27  2B29               	goto	u4011
  6401  0B28  2B2A               	goto	u4010
  6402  0B29                     u4011:	
  6403  0B29  2B31               	goto	l4178
  6404  0B2A                     u4010:	
  6405  0B2A                     l4174:	
  6406  0B2A  09A6               	comf	___awmod@dividend,f
  6407  0B2B  09A7               	comf	___awmod@dividend+1,f
  6408  0B2C  0AA6               	incf	___awmod@dividend,f
  6409  0B2D  1903               	skipnz
  6410  0B2E  0AA7               	incf	___awmod@dividend+1,f
  6411  0B2F                     l4176:	
  6412  0B2F  01AA               	clrf	___awmod@sign
  6413  0B30  0AAA               	incf	___awmod@sign,f
  6414  0B31                     l4178:	
  6415  0B31  1FA5               	btfss	___awmod@divisor+1,7
  6416  0B32  2B34               	goto	u4021
  6417  0B33  2B35               	goto	u4020
  6418  0B34                     u4021:	
  6419  0B34  2B3A               	goto	l4182
  6420  0B35                     u4020:	
  6421  0B35                     l4180:	
  6422  0B35  09A4               	comf	___awmod@divisor,f
  6423  0B36  09A5               	comf	___awmod@divisor+1,f
  6424  0B37  0AA4               	incf	___awmod@divisor,f
  6425  0B38  1903               	skipnz
  6426  0B39  0AA5               	incf	___awmod@divisor+1,f
  6427  0B3A                     l4182:	
  6428  0B3A  0824               	movf	___awmod@divisor,w
  6429  0B3B  0425               	iorwf	___awmod@divisor+1,w
  6430  0B3C  1903               	btfsc	3,2
  6431  0B3D  2B3F               	goto	u4031
  6432  0B3E  2B40               	goto	u4030
  6433  0B3F                     u4031:	
  6434  0B3F  2B6F               	goto	l4200
  6435  0B40                     u4030:	
  6436  0B40                     l4184:	
  6437  0B40  01A9               	clrf	___awmod@counter
  6438  0B41  0AA9               	incf	___awmod@counter,f
  6439  0B42  2B4E               	goto	l4190
  6440  0B43                     l4186:	
  6441  0B43  3001               	movlw	1
  6442  0B44                     u4045:	
  6443  0B44  1003               	clrc
  6444  0B45  0DA4               	rlf	___awmod@divisor,f
  6445  0B46  0DA5               	rlf	___awmod@divisor+1,f
  6446  0B47  3EFF               	addlw	-1
  6447  0B48  1D03               	skipz
  6448  0B49  2B44               	goto	u4045
  6449  0B4A                     l4188:	
  6450  0B4A  3001               	movlw	1
  6451  0B4B  00A8               	movwf	??___awmod
  6452  0B4C  0828               	movf	??___awmod,w
  6453  0B4D  07A9               	addwf	___awmod@counter,f
  6454  0B4E                     l4190:	
  6455  0B4E  1FA5               	btfss	___awmod@divisor+1,7
  6456  0B4F  2B51               	goto	u4051
  6457  0B50  2B52               	goto	u4050
  6458  0B51                     u4051:	
  6459  0B51  2B43               	goto	l4186
  6460  0B52                     u4050:	
  6461  0B52                     l4192:	
  6462  0B52  0825               	movf	___awmod@divisor+1,w
  6463  0B53  0227               	subwf	___awmod@dividend+1,w
  6464  0B54  1D03               	skipz
  6465  0B55  2B58               	goto	u4065
  6466  0B56  0824               	movf	___awmod@divisor,w
  6467  0B57  0226               	subwf	___awmod@dividend,w
  6468  0B58                     u4065:	
  6469  0B58  1C03               	skipc
  6470  0B59  2B5B               	goto	u4061
  6471  0B5A  2B5C               	goto	u4060
  6472  0B5B                     u4061:	
  6473  0B5B  2B62               	goto	l4196
  6474  0B5C                     u4060:	
  6475  0B5C                     l4194:	
  6476  0B5C  0824               	movf	___awmod@divisor,w
  6477  0B5D  02A6               	subwf	___awmod@dividend,f
  6478  0B5E  0825               	movf	___awmod@divisor+1,w
  6479  0B5F  1C03               	skipc
  6480  0B60  03A7               	decf	___awmod@dividend+1,f
  6481  0B61  02A7               	subwf	___awmod@dividend+1,f
  6482  0B62                     l4196:	
  6483  0B62  3001               	movlw	1
  6484  0B63                     u4075:	
  6485  0B63  1003               	clrc
  6486  0B64  0CA5               	rrf	___awmod@divisor+1,f
  6487  0B65  0CA4               	rrf	___awmod@divisor,f
  6488  0B66  3EFF               	addlw	-1
  6489  0B67  1D03               	skipz
  6490  0B68  2B63               	goto	u4075
  6491  0B69                     l4198:	
  6492  0B69  3001               	movlw	1
  6493  0B6A  02A9               	subwf	___awmod@counter,f
  6494  0B6B  1D03               	btfss	3,2
  6495  0B6C  2B6E               	goto	u4081
  6496  0B6D  2B6F               	goto	u4080
  6497  0B6E                     u4081:	
  6498  0B6E  2B52               	goto	l4192
  6499  0B6F                     u4080:	
  6500  0B6F                     l4200:	
  6501  0B6F  082A               	movf	___awmod@sign,w
  6502  0B70  1903               	btfsc	3,2
  6503  0B71  2B73               	goto	u4091
  6504  0B72  2B74               	goto	u4090
  6505  0B73                     u4091:	
  6506  0B73  2B79               	goto	l4204
  6507  0B74                     u4090:	
  6508  0B74                     l4202:	
  6509  0B74  09A6               	comf	___awmod@dividend,f
  6510  0B75  09A7               	comf	___awmod@dividend+1,f
  6511  0B76  0AA6               	incf	___awmod@dividend,f
  6512  0B77  1903               	skipnz
  6513  0B78  0AA7               	incf	___awmod@dividend+1,f
  6514  0B79                     l4204:	
  6515  0B79  0827               	movf	___awmod@dividend+1,w
  6516  0B7A  00A5               	movwf	?___awmod+1
  6517  0B7B  0826               	movf	___awmod@dividend,w
  6518  0B7C  00A4               	movwf	?___awmod
  6519  0B7D                     l614:	
  6520  0B7D  0008               	return
  6521  0B7E                     __end_of___awmod:	
  6522                           
  6523                           	psect	text23
  6524  0BE3                     __ptext23:	
  6525 ;; *************** function ___awdiv *****************
  6526 ;; Defined at:
  6527 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;  divisor         2   11[BANK0 ] int 
  6530 ;;  dividend        2   13[BANK0 ] int 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;  quotient        2   18[BANK0 ] int 
  6533 ;;  sign            1   17[BANK0 ] unsigned char 
  6534 ;;  counter         1   16[BANK0 ] unsigned char 
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  2   11[BANK0 ] int 
  6537 ;; Registers used:
  6538 ;;		wreg, status,2, status,0
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6544 ;;      Params:         0       4       0       0       0
  6545 ;;      Locals:         0       4       0       0       0
  6546 ;;      Temps:          0       1       0       0       0
  6547 ;;      Totals:         0       9       0       0       0
  6548 ;;Total ram usage:        9 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    3
  6551 ;; This function calls:
  6552 ;;		Nothing
  6553 ;; This function is called by:
  6554 ;;		_map
  6555 ;;		_GetDigits
  6556 ;;		_intToString
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function ___awdiv
  6562  0BE3                     ___awdiv:	
  6563  0BE3                     l4126:	
  6564                           ;incstack = 0
  6565                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6566                           
  6567  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  6568  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  6569  0BE5  01B1               	clrf	___awdiv@sign
  6570  0BE6                     l4128:	
  6571  0BE6  1FAC               	btfss	___awdiv@divisor+1,7
  6572  0BE7  2BE9               	goto	u3911
  6573  0BE8  2BEA               	goto	u3910
  6574  0BE9                     u3911:	
  6575  0BE9  2BF1               	goto	l4134
  6576  0BEA                     u3910:	
  6577  0BEA                     l4130:	
  6578  0BEA  09AB               	comf	___awdiv@divisor,f
  6579  0BEB  09AC               	comf	___awdiv@divisor+1,f
  6580  0BEC  0AAB               	incf	___awdiv@divisor,f
  6581  0BED  1903               	skipnz
  6582  0BEE  0AAC               	incf	___awdiv@divisor+1,f
  6583  0BEF                     l4132:	
  6584  0BEF  01B1               	clrf	___awdiv@sign
  6585  0BF0  0AB1               	incf	___awdiv@sign,f
  6586  0BF1                     l4134:	
  6587  0BF1  1FAE               	btfss	___awdiv@dividend+1,7
  6588  0BF2  2BF4               	goto	u3921
  6589  0BF3  2BF5               	goto	u3920
  6590  0BF4                     u3921:	
  6591  0BF4  2BFE               	goto	l4140
  6592  0BF5                     u3920:	
  6593  0BF5                     l4136:	
  6594  0BF5  09AD               	comf	___awdiv@dividend,f
  6595  0BF6  09AE               	comf	___awdiv@dividend+1,f
  6596  0BF7  0AAD               	incf	___awdiv@dividend,f
  6597  0BF8  1903               	skipnz
  6598  0BF9  0AAE               	incf	___awdiv@dividend+1,f
  6599  0BFA                     l4138:	
  6600  0BFA  3001               	movlw	1
  6601  0BFB  00AF               	movwf	??___awdiv
  6602  0BFC  082F               	movf	??___awdiv,w
  6603  0BFD  06B1               	xorwf	___awdiv@sign,f
  6604  0BFE                     l4140:	
  6605  0BFE  01B2               	clrf	___awdiv@quotient
  6606  0BFF  01B3               	clrf	___awdiv@quotient+1
  6607  0C00                     l4142:	
  6608  0C00  082B               	movf	___awdiv@divisor,w
  6609  0C01  042C               	iorwf	___awdiv@divisor+1,w
  6610  0C02  1903               	btfsc	3,2
  6611  0C03  2C05               	goto	u3931
  6612  0C04  2C06               	goto	u3930
  6613  0C05                     u3931:	
  6614  0C05  2C3D               	goto	l4162
  6615  0C06                     u3930:	
  6616  0C06                     l4144:	
  6617  0C06  01B0               	clrf	___awdiv@counter
  6618  0C07  0AB0               	incf	___awdiv@counter,f
  6619  0C08  2C14               	goto	l4150
  6620  0C09                     l4146:	
  6621  0C09  3001               	movlw	1
  6622  0C0A                     u3945:	
  6623  0C0A  1003               	clrc
  6624  0C0B  0DAB               	rlf	___awdiv@divisor,f
  6625  0C0C  0DAC               	rlf	___awdiv@divisor+1,f
  6626  0C0D  3EFF               	addlw	-1
  6627  0C0E  1D03               	skipz
  6628  0C0F  2C0A               	goto	u3945
  6629  0C10                     l4148:	
  6630  0C10  3001               	movlw	1
  6631  0C11  00AF               	movwf	??___awdiv
  6632  0C12  082F               	movf	??___awdiv,w
  6633  0C13  07B0               	addwf	___awdiv@counter,f
  6634  0C14                     l4150:	
  6635  0C14  1FAC               	btfss	___awdiv@divisor+1,7
  6636  0C15  2C17               	goto	u3951
  6637  0C16  2C18               	goto	u3950
  6638  0C17                     u3951:	
  6639  0C17  2C09               	goto	l4146
  6640  0C18                     u3950:	
  6641  0C18                     l4152:	
  6642  0C18  3001               	movlw	1
  6643  0C19                     u3965:	
  6644  0C19  1003               	clrc
  6645  0C1A  0DB2               	rlf	___awdiv@quotient,f
  6646  0C1B  0DB3               	rlf	___awdiv@quotient+1,f
  6647  0C1C  3EFF               	addlw	-1
  6648  0C1D  1D03               	skipz
  6649  0C1E  2C19               	goto	u3965
  6650  0C1F  082C               	movf	___awdiv@divisor+1,w
  6651  0C20  022E               	subwf	___awdiv@dividend+1,w
  6652  0C21  1D03               	skipz
  6653  0C22  2C25               	goto	u3975
  6654  0C23  082B               	movf	___awdiv@divisor,w
  6655  0C24  022D               	subwf	___awdiv@dividend,w
  6656  0C25                     u3975:	
  6657  0C25  1C03               	skipc
  6658  0C26  2C28               	goto	u3971
  6659  0C27  2C29               	goto	u3970
  6660  0C28                     u3971:	
  6661  0C28  2C30               	goto	l4158
  6662  0C29                     u3970:	
  6663  0C29                     l4154:	
  6664  0C29  082B               	movf	___awdiv@divisor,w
  6665  0C2A  02AD               	subwf	___awdiv@dividend,f
  6666  0C2B  082C               	movf	___awdiv@divisor+1,w
  6667  0C2C  1C03               	skipc
  6668  0C2D  03AE               	decf	___awdiv@dividend+1,f
  6669  0C2E  02AE               	subwf	___awdiv@dividend+1,f
  6670  0C2F                     l4156:	
  6671  0C2F  1432               	bsf	___awdiv@quotient,0
  6672  0C30                     l4158:	
  6673  0C30  3001               	movlw	1
  6674  0C31                     u3985:	
  6675  0C31  1003               	clrc
  6676  0C32  0CAC               	rrf	___awdiv@divisor+1,f
  6677  0C33  0CAB               	rrf	___awdiv@divisor,f
  6678  0C34  3EFF               	addlw	-1
  6679  0C35  1D03               	skipz
  6680  0C36  2C31               	goto	u3985
  6681  0C37                     l4160:	
  6682  0C37  3001               	movlw	1
  6683  0C38  02B0               	subwf	___awdiv@counter,f
  6684  0C39  1D03               	btfss	3,2
  6685  0C3A  2C3C               	goto	u3991
  6686  0C3B  2C3D               	goto	u3990
  6687  0C3C                     u3991:	
  6688  0C3C  2C18               	goto	l4152
  6689  0C3D                     u3990:	
  6690  0C3D                     l4162:	
  6691  0C3D  0831               	movf	___awdiv@sign,w
  6692  0C3E  1903               	btfsc	3,2
  6693  0C3F  2C41               	goto	u4001
  6694  0C40  2C42               	goto	u4000
  6695  0C41                     u4001:	
  6696  0C41  2C47               	goto	l4166
  6697  0C42                     u4000:	
  6698  0C42                     l4164:	
  6699  0C42  09B2               	comf	___awdiv@quotient,f
  6700  0C43  09B3               	comf	___awdiv@quotient+1,f
  6701  0C44  0AB2               	incf	___awdiv@quotient,f
  6702  0C45  1903               	skipnz
  6703  0C46  0AB3               	incf	___awdiv@quotient+1,f
  6704  0C47                     l4166:	
  6705  0C47  0833               	movf	___awdiv@quotient+1,w
  6706  0C48  00AC               	movwf	?___awdiv+1
  6707  0C49  0832               	movf	___awdiv@quotient,w
  6708  0C4A  00AB               	movwf	?___awdiv
  6709  0C4B                     l601:	
  6710  0C4B  0008               	return
  6711  0C4C                     __end_of___awdiv:	
  6712                           
  6713                           	psect	text24
  6714  0873                     __ptext24:	
  6715 ;; *************** function _ADC_Read *****************
  6716 ;; Defined at:
  6717 ;;		line 341 in file "main.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  canale          1    wreg     unsigned char 
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;  canale          1    7[BANK0 ] unsigned char 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;                  2    4[BANK0 ] int 
  6724 ;; Registers used:
  6725 ;;		wreg, status,2, status,0
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6731 ;;      Params:         0       2       0       0       0
  6732 ;;      Locals:         0       1       0       0       0
  6733 ;;      Temps:          0       1       0       0       0
  6734 ;;      Totals:         0       4       0       0       0
  6735 ;;Total ram usage:        4 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    3
  6738 ;; This function calls:
  6739 ;;		Nothing
  6740 ;; This function is called by:
  6741 ;;		_main
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           
  6746                           ;psect for function _ADC_Read
  6747  0873                     _ADC_Read:	
  6748                           
  6749                           ;incstack = 0
  6750                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  6751                           ;ADC_Read@canale stored from wreg
  6752  0873  1283               	bcf	3,5	;RP0=0, select bank0
  6753  0874  1303               	bcf	3,6	;RP1=0, select bank0
  6754  0875  00A7               	movwf	ADC_Read@canale
  6755  0876                     l4400:	
  6756                           
  6757                           ;main.c: 341: int ADC_Read(char canale);main.c: 342: {;main.c: 343:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  6758  0876  0827               	movf	ADC_Read@canale,w
  6759  0877  00A6               	movwf	??_ADC_Read
  6760  0878  3002               	movlw	2
  6761  0879                     u4315:	
  6762  0879  1003               	clrc
  6763  087A  0DA6               	rlf	??_ADC_Read,f
  6764  087B  3EFF               	addlw	-1
  6765  087C  1D03               	skipz
  6766  087D  2879               	goto	u4315
  6767  087E  1003               	clrc
  6768  087F  0D26               	rlf	??_ADC_Read,w
  6769  0880  3801               	iorlw	1
  6770  0881  009F               	movwf	31	;volatile
  6771  0882                     l4402:	
  6772                           
  6773                           ;main.c: 344:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  6774  0882  3004               	movlw	4
  6775  0883  1283               	bcf	3,5	;RP0=0, select bank0
  6776  0884  1303               	bcf	3,6	;RP1=0, select bank0
  6777  0885  00A6               	movwf	??_ADC_Read
  6778  0886                     u4637:	
  6779  0886  0BA6               	decfsz	??_ADC_Read,f
  6780  0887  2886               	goto	u4637
  6781  0888  0000               	nop
  6782  0889                     l4404:	
  6783                           
  6784                           ;main.c: 345:     GO_nDONE = 1;
  6785  0889  1283               	bcf	3,5	;RP0=0, select bank0
  6786  088A  1303               	bcf	3,6	;RP1=0, select bank0
  6787  088B  151F               	bsf	31,2	;volatile
  6788  088C                     l283:	
  6789                           ;main.c: 347:         ;
  6790                           
  6791                           
  6792                           ;main.c: 346:     while (GO_nDONE)
  6793  088C  191F               	btfsc	31,2	;volatile
  6794  088D  288F               	goto	u4321
  6795  088E  2890               	goto	u4320
  6796  088F                     u4321:	
  6797  088F  288C               	goto	l283
  6798  0890                     u4320:	
  6799  0890                     l4406:	
  6800                           
  6801                           ;main.c: 348:     return ADRESL + (ADRESH << 8);
  6802  0890  081E               	movf	30,w	;volatile
  6803  0891  00A5               	movwf	?_ADC_Read+1
  6804  0892  1683               	bsf	3,5	;RP0=1, select bank1
  6805  0893  1303               	bcf	3,6	;RP1=0, select bank1
  6806  0894  081E               	movf	30,w	;volatile
  6807  0895  1283               	bcf	3,5	;RP0=0, select bank0
  6808  0896  1303               	bcf	3,6	;RP1=0, select bank0
  6809  0897  00A4               	movwf	?_ADC_Read
  6810  0898                     l286:	
  6811  0898  0008               	return
  6812  0899                     __end_of_ADC_Read:	
  6813                           
  6814                           	psect	text25
  6815  0ACB                     __ptext25:	
  6816 ;; *************** function _ISR *****************
  6817 ;; Defined at:
  6818 ;;		line 499 in file "main.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;		None
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;		None
  6823 ;; Return value:  Size  Location     Type
  6824 ;;                  1    wreg      void 
  6825 ;; Registers used:
  6826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6832 ;;      Params:         0       0       0       0       0
  6833 ;;      Locals:         0       0       0       0       0
  6834 ;;      Temps:          0       4       0       0       0
  6835 ;;      Totals:         0       4       0       0       0
  6836 ;;Total ram usage:        4 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:    2
  6839 ;; This function calls:
  6840 ;;		_UART_Read
  6841 ;;		_conteggioVeicoli
  6842 ;; This function is called by:
  6843 ;;		Interrupt level 1
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           
  6848                           ;psect for function _ISR
  6849  0ACB                     _ISR:	
  6850  0ACB                     i1l2774:	
  6851                           
  6852                           ;main.c: 502:     if (RCIF && readGateway.Bit == 0)
  6853  0ACB  1E8C               	btfss	12,5	;volatile
  6854  0ACC  2ACE               	goto	u239_21
  6855  0ACD  2ACF               	goto	u239_20
  6856  0ACE                     u239_21:	
  6857  0ACE  2AD8               	goto	i1l2782
  6858  0ACF                     u239_20:	
  6859  0ACF                     i1l2776:	
  6860  0ACF  1853               	btfsc	_readGateway,0
  6861  0AD0  2AD2               	goto	u240_21
  6862  0AD1  2AD3               	goto	u240_20
  6863  0AD2                     u240_21:	
  6864  0AD2  2AD8               	goto	i1l2782
  6865  0AD3                     u240_20:	
  6866  0AD3                     i1l2778:	
  6867                           
  6868                           ;main.c: 503:     {;main.c: 504:         readGateway.Bit = 1;
  6869  0AD3  1453               	bsf	_readGateway,0
  6870                           
  6871                           ;main.c: 505:         readGatewayDone.Bit = 0;
  6872  0AD4  1054               	bcf	_readGatewayDone,0
  6873                           
  6874                           ;main.c: 506:         readGatewayDone.Timeout = 0;
  6875  0AD5  10D4               	bcf	_readGatewayDone,1
  6876  0AD6                     i1l2780:	
  6877                           
  6878                           ;main.c: 507:         dataFromGatewayIndex = 0;
  6879  0AD6  01CE               	clrf	_dataFromGatewayIndex
  6880                           
  6881                           ;main.c: 508:         timerReadFromGateway = 0;
  6882  0AD7  01CD               	clrf	_timerReadFromGateway
  6883  0AD8                     i1l2782:	
  6884                           
  6885                           ;main.c: 510:     if (RCIF && readGateway.Bit == 1)
  6886  0AD8  1E8C               	btfss	12,5	;volatile
  6887  0AD9  2ADB               	goto	u241_21
  6888  0ADA  2ADC               	goto	u241_20
  6889  0ADB                     u241_21:	
  6890  0ADB  2AF3               	goto	i1l2792
  6891  0ADC                     u241_20:	
  6892  0ADC                     i1l2784:	
  6893  0ADC  1C53               	btfss	_readGateway,0
  6894  0ADD  2ADF               	goto	u242_21
  6895  0ADE  2AE0               	goto	u242_20
  6896  0ADF                     u242_21:	
  6897  0ADF  2AF3               	goto	i1l2792
  6898  0AE0                     u242_20:	
  6899  0AE0                     i1l2786:	
  6900                           
  6901                           ;main.c: 511:     {;main.c: 512:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  6902  0AE0  160A  118A  27F7  120A  158A  	fcall	_UART_Read
  6903  0AE5  1283               	bcf	3,5	;RP0=0, select bank0
  6904  0AE6  1303               	bcf	3,6	;RP1=0, select bank0
  6905  0AE7  00A0               	movwf	??_ISR
  6906  0AE8  084E               	movf	_dataFromGatewayIndex,w
  6907  0AE9  3EAC               	addlw	(low (_dataFromGateway| 0))& (0+255)
  6908  0AEA  0084               	movwf	4
  6909  0AEB  0820               	movf	??_ISR,w
  6910  0AEC  1383               	bcf	3,7	;select IRP bank1
  6911  0AED  0080               	movwf	0
  6912  0AEE                     i1l2788:	
  6913                           
  6914                           ;main.c: 513:         dataFromGatewayIndex++;
  6915  0AEE  3001               	movlw	1
  6916  0AEF  00A0               	movwf	??_ISR
  6917  0AF0  0820               	movf	??_ISR,w
  6918  0AF1  07CE               	addwf	_dataFromGatewayIndex,f
  6919  0AF2                     i1l2790:	
  6920                           
  6921                           ;main.c: 514:         timerReadFromGateway = 0;
  6922  0AF2  01CD               	clrf	_timerReadFromGateway
  6923  0AF3                     i1l2792:	
  6924                           
  6925                           ;main.c: 519:     if (TMR0IF)
  6926  0AF3  1D0B               	btfss	11,2	;volatile
  6927  0AF4  2AF6               	goto	u243_21
  6928  0AF5  2AF7               	goto	u243_20
  6929  0AF6                     u243_21:	
  6930  0AF6  2B01               	goto	i1l2800
  6931  0AF7                     u243_20:	
  6932  0AF7                     i1l2794:	
  6933                           
  6934                           ;main.c: 520:     {;main.c: 521:         TMR0IF = 0;
  6935  0AF7  110B               	bcf	11,2	;volatile
  6936  0AF8                     i1l2796:	
  6937                           
  6938                           ;main.c: 522:         conteggioVeicoli();
  6939  0AF8  120A  158A  237E  120A  158A  	fcall	_conteggioVeicoli
  6940  0AFD                     i1l2798:	
  6941                           
  6942                           ;main.c: 523:         TMR0 = 6;
  6943  0AFD  3006               	movlw	6
  6944  0AFE  1283               	bcf	3,5	;RP0=0, select bank0
  6945  0AFF  1303               	bcf	3,6	;RP1=0, select bank0
  6946  0B00  0081               	movwf	1	;volatile
  6947  0B01                     i1l2800:	
  6948                           
  6949                           ;main.c: 526:     if (TMR1IF)
  6950  0B01  1C0C               	btfss	12,0	;volatile
  6951  0B02  2B04               	goto	u244_21
  6952  0B03  2B05               	goto	u244_20
  6953  0B04                     u244_21:	
  6954  0B04  2B1A               	goto	i1l362
  6955  0B05                     u244_20:	
  6956  0B05                     i1l2802:	
  6957                           
  6958                           ;main.c: 527:     {;main.c: 528:         TMR1IF = 0;
  6959  0B05  100C               	bcf	12,0	;volatile
  6960  0B06                     i1l2804:	
  6961                           
  6962                           ;main.c: 529:         count_lux++;
  6963  0B06  3001               	movlw	1
  6964  0B07  00A0               	movwf	??_ISR
  6965  0B08  0820               	movf	??_ISR,w
  6966  0B09  07CF               	addwf	_count_lux,f
  6967  0B0A                     i1l2806:	
  6968                           
  6969                           ;main.c: 531:         if (count_lux >= 20)
  6970  0B0A  3014               	movlw	20
  6971  0B0B  024F               	subwf	_count_lux,w
  6972  0B0C  1C03               	skipc
  6973  0B0D  2B0F               	goto	u245_21
  6974  0B0E  2B10               	goto	u245_20
  6975  0B0F                     u245_21:	
  6976  0B0F  2B16               	goto	i1l2814
  6977  0B10                     u245_20:	
  6978  0B10                     i1l2808:	
  6979                           
  6980                           ;main.c: 532:         {;main.c: 533:             secondPassed.Bit = 1;
  6981  0B10  1452               	bsf	_secondPassed,0
  6982  0B11                     i1l2810:	
  6983                           
  6984                           ;main.c: 534:             count_lux = 0;
  6985  0B11  01CF               	clrf	_count_lux
  6986  0B12                     i1l2812:	
  6987                           
  6988                           ;main.c: 535:             timerReadFromGateway++;
  6989  0B12  3001               	movlw	1
  6990  0B13  00A0               	movwf	??_ISR
  6991  0B14  0820               	movf	??_ISR,w
  6992  0B15  07CD               	addwf	_timerReadFromGateway,f
  6993  0B16                     i1l2814:	
  6994                           
  6995                           ;main.c: 538:         TMR1H = 60;
  6996  0B16  303C               	movlw	60
  6997  0B17  008F               	movwf	15	;volatile
  6998  0B18                     i1l2816:	
  6999                           
  7000                           ;main.c: 539:         TMR1L = 176;
  7001  0B18  30B0               	movlw	176
  7002  0B19  008E               	movwf	14	;volatile
  7003  0B1A                     i1l362:	
  7004  0B1A  0823               	movf	??_ISR+3,w
  7005  0B1B  008A               	movwf	10
  7006  0B1C  0822               	movf	??_ISR+2,w
  7007  0B1D  0084               	movwf	4
  7008  0B1E  0E21               	swapf	(??_ISR+1)^0,w
  7009  0B1F  0083               	movwf	3
  7010  0B20  0EFE               	swapf	btemp,f
  7011  0B21  0E7E               	swapf	btemp,w
  7012  0B22  0009               	retfie
  7013  0B23                     __end_of_ISR:	
  7014                           
  7015                           	psect	intentry
  7016  0004                     __pintentry:	
  7017                           ;incstack = 0
  7018                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7019                           
  7020  0004                     interrupt_function:	
  7021  007E                     saved_w	set	btemp
  7022  0004  00FE               	movwf	btemp
  7023  0005  0E03               	swapf	3,w
  7024  0006  1283               	bcf	3,5	;RP0=0, select bank0
  7025  0007  1303               	bcf	3,6	;RP1=0, select bank0
  7026  0008  00A1               	movwf	??_ISR+1
  7027  0009  0804               	movf	4,w
  7028  000A  00A2               	movwf	??_ISR+2
  7029  000B  080A               	movf	10,w
  7030  000C  00A3               	movwf	??_ISR+3
  7031  000D  120A  158A  2ACB   	ljmp	_ISR
  7032                           
  7033                           	psect	text26
  7034  0B7E                     __ptext26:	
  7035 ;; *************** function _conteggioVeicoli *****************
  7036 ;; Defined at:
  7037 ;;		line 407 in file "main.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;		None
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  i               1   13[COMMON] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  1    wreg      void 
  7044 ;; Registers used:
  7045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7051 ;;      Params:         0       0       0       0       0
  7052 ;;      Locals:         1       0       0       0       0
  7053 ;;      Temps:          4       0       0       0       0
  7054 ;;      Totals:         5       0       0       0       0
  7055 ;;Total ram usage:        5 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:    1
  7058 ;; This function calls:
  7059 ;;		_Conteggio
  7060 ;; This function is called by:
  7061 ;;		_ISR
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           
  7066                           ;psect for function _conteggioVeicoli
  7067  0B7E                     _conteggioVeicoli:	
  7068  0B7E                     i1l2534:	
  7069                           ;incstack = 0
  7070                           ; Regs used in _conteggioVeicoli: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7071                           
  7072                           
  7073                           ;main.c: 409:     RoadsSensors[0] = PORTBbits.RB3;
  7074  0B7E  3000               	movlw	0
  7075  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
  7076  0B80  1303               	bcf	3,6	;RP1=0, select bank0
  7077  0B81  1986               	btfsc	6,3	;volatile
  7078  0B82  3001               	movlw	1
  7079  0B83  1683               	bsf	3,5	;RP0=1, select bank1
  7080  0B84  1303               	bcf	3,6	;RP1=0, select bank1
  7081  0B85  00A8               	movwf	_RoadsSensors^(0+128)
  7082                           
  7083                           ;main.c: 410:     RoadsSensors[1] = PORTBbits.RB4;
  7084  0B86  3000               	movlw	0
  7085  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  7086  0B88  1303               	bcf	3,6	;RP1=0, select bank0
  7087  0B89  1A06               	btfsc	6,4	;volatile
  7088  0B8A  3001               	movlw	1
  7089  0B8B  1683               	bsf	3,5	;RP0=1, select bank1
  7090  0B8C  1303               	bcf	3,6	;RP1=0, select bank1
  7091  0B8D  00A9               	movwf	(_RoadsSensors^(0+128)+1)
  7092                           
  7093                           ;main.c: 411:     RoadsSensors[2] = PORTBbits.RB5;
  7094  0B8E  3000               	movlw	0
  7095  0B8F  1283               	bcf	3,5	;RP0=0, select bank0
  7096  0B90  1303               	bcf	3,6	;RP1=0, select bank0
  7097  0B91  1A86               	btfsc	6,5	;volatile
  7098  0B92  3001               	movlw	1
  7099  0B93  1683               	bsf	3,5	;RP0=1, select bank1
  7100  0B94  1303               	bcf	3,6	;RP1=0, select bank1
  7101  0B95  00AA               	movwf	(_RoadsSensors^(0+128)+2)
  7102                           
  7103                           ;main.c: 412:     RoadsSensors[3] = PORTAbits.RA5;
  7104  0B96  3000               	movlw	0
  7105  0B97  1283               	bcf	3,5	;RP0=0, select bank0
  7106  0B98  1303               	bcf	3,6	;RP1=0, select bank0
  7107  0B99  1A85               	btfsc	5,5	;volatile
  7108  0B9A  3001               	movlw	1
  7109  0B9B  1683               	bsf	3,5	;RP0=1, select bank1
  7110  0B9C  1303               	bcf	3,6	;RP1=0, select bank1
  7111  0B9D  00AB               	movwf	(_RoadsSensors^(0+128)+3)
  7112  0B9E                     i1l2536:	
  7113                           
  7114                           ;main.c: 414:     for (unsigned char i = 0; i < 4; i++)
  7115  0B9E  01FD               	clrf	conteggioVeicoli@i
  7116  0B9F                     i1l2540:	
  7117                           
  7118                           ;main.c: 415:     {;main.c: 416:         if (!RoadsSensors[i])
  7119  0B9F  087D               	movf	conteggioVeicoli@i,w
  7120  0BA0  3EA8               	addlw	(low (_RoadsSensors| 0))& (0+255)
  7121  0BA1  0084               	movwf	4
  7122  0BA2  1383               	bcf	3,7	;select IRP bank1
  7123  0BA3  0800               	movf	0,w
  7124  0BA4  1D03               	btfss	3,2
  7125  0BA5  2BA7               	goto	u210_21
  7126  0BA6  2BA8               	goto	u210_20
  7127  0BA7                     u210_21:	
  7128  0BA7  2BB1               	goto	i1l2544
  7129  0BA8                     u210_20:	
  7130  0BA8                     i1l2542:	
  7131                           
  7132                           ;main.c: 417:         {;main.c: 418:             count++;
  7133  0BA8  3001               	movlw	1
  7134  0BA9  1283               	bcf	3,5	;RP0=0, select bank0
  7135  0BAA  1303               	bcf	3,6	;RP1=0, select bank0
  7136  0BAB  07C8               	addwf	_count,f
  7137  0BAC  1803               	skipnc
  7138  0BAD  0AC9               	incf	_count+1,f
  7139  0BAE  3000               	movlw	0
  7140  0BAF  07C9               	addwf	_count+1,f
  7141                           
  7142                           ;main.c: 419:         }
  7143  0BB0  2BD8               	goto	i1l2550
  7144  0BB1                     i1l2544:	
  7145  0BB1  087D               	movf	conteggioVeicoli@i,w
  7146  0BB2  3EA8               	addlw	(low (_RoadsSensors| 0))& (0+255)
  7147  0BB3  0084               	movwf	4
  7148  0BB4  0800               	movf	0,w
  7149  0BB5  1903               	btfsc	3,2
  7150  0BB6  2BB8               	goto	u211_21
  7151  0BB7  2BB9               	goto	u211_20
  7152  0BB8                     u211_21:	
  7153  0BB8  2BD8               	goto	i1l2550
  7154  0BB9                     u211_20:	
  7155  0BB9                     i1l2546:	
  7156                           
  7157                           ;main.c: 421:         {;main.c: 422:             Conteggio(count, motorcycle, car, truck
      +                          , i);
  7158  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
  7159  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
  7160  0BBB  0849               	movf	_count+1,w
  7161  0BBC  00F1               	movwf	Conteggio@_count+1
  7162  0BBD  0848               	movf	_count,w
  7163  0BBE  00F0               	movwf	Conteggio@_count
  7164  0BBF  3055               	movlw	(low (_motorcycle| 0))& (0+255)
  7165  0BC0  00F9               	movwf	??_conteggioVeicoli
  7166  0BC1  0879               	movf	??_conteggioVeicoli,w
  7167  0BC2  00F2               	movwf	Conteggio@_motorcycle
  7168  0BC3  30E9               	movlw	(low (_car| 0))& (0+255)
  7169  0BC4  00FA               	movwf	??_conteggioVeicoli+1
  7170  0BC5  087A               	movf	??_conteggioVeicoli+1,w
  7171  0BC6  00F3               	movwf	Conteggio@_car
  7172  0BC7  30E5               	movlw	(low (_truck| 0))& (0+255)
  7173  0BC8  00FB               	movwf	??_conteggioVeicoli+2
  7174  0BC9  087B               	movf	??_conteggioVeicoli+2,w
  7175  0BCA  00F4               	movwf	Conteggio@_truck
  7176  0BCB  087D               	movf	conteggioVeicoli@i,w
  7177  0BCC  00FC               	movwf	??_conteggioVeicoli+3
  7178  0BCD  087C               	movf	??_conteggioVeicoli+3,w
  7179  0BCE  00F5               	movwf	Conteggio@index
  7180  0BCF  120A  158A  222C  120A  158A  	fcall	_Conteggio
  7181  0BD4                     i1l2548:	
  7182                           
  7183                           ;main.c: 423:             count = 0;
  7184  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  7185  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  7186  0BD6  01C8               	clrf	_count
  7187  0BD7  01C9               	clrf	_count+1
  7188  0BD8                     i1l2550:	
  7189                           
  7190                           ;main.c: 425:     }
  7191  0BD8  3001               	movlw	1
  7192  0BD9  00F9               	movwf	??_conteggioVeicoli
  7193  0BDA  0879               	movf	??_conteggioVeicoli,w
  7194  0BDB  07FD               	addwf	conteggioVeicoli@i,f
  7195  0BDC                     i1l2552:	
  7196  0BDC  3004               	movlw	4
  7197  0BDD  027D               	subwf	conteggioVeicoli@i,w
  7198  0BDE  1C03               	skipc
  7199  0BDF  2BE1               	goto	u212_21
  7200  0BE0  2BE2               	goto	u212_20
  7201  0BE1                     u212_21:	
  7202  0BE1  2B9F               	goto	i1l2540
  7203  0BE2                     u212_20:	
  7204  0BE2                     i1l323:	
  7205  0BE2  0008               	return
  7206  0BE3                     __end_of_conteggioVeicoli:	
  7207                           
  7208                           	psect	text27
  7209  0A2C                     __ptext27:	
  7210 ;; *************** function _Conteggio *****************
  7211 ;; Defined at:
  7212 ;;		line 99 in file "./CustomLib/TrafficLight.h"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;  _count          2    0[COMMON] unsigned int 
  7215 ;;  _motorcycle     1    2[COMMON] PTR unsigned char 
  7216 ;;		 -> motorcycle(4), 
  7217 ;;  _car            1    3[COMMON] PTR unsigned char 
  7218 ;;		 -> car(4), 
  7219 ;;  _truck          1    4[COMMON] PTR unsigned char 
  7220 ;;		 -> truck(4), 
  7221 ;;  index           1    5[COMMON] unsigned char 
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;		None
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  1    wreg      void 
  7226 ;; Registers used:
  7227 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7233 ;;      Params:         6       0       0       0       0
  7234 ;;      Locals:         0       0       0       0       0
  7235 ;;      Temps:          3       0       0       0       0
  7236 ;;      Totals:         9       0       0       0       0
  7237 ;;Total ram usage:        9 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; This function calls:
  7240 ;;		Nothing
  7241 ;; This function is called by:
  7242 ;;		_conteggioVeicoli
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           
  7247                           ;psect for function _Conteggio
  7248  0A2C                     _Conteggio:	
  7249  0A2C                     i1l2086:	
  7250                           ;incstack = 0
  7251                           ; Regs used in _Conteggio: [wreg-fsr0h+status,2+status,0]
  7252                           
  7253                           
  7254                           ;./CustomLib/TrafficLight.h: 99: void Conteggio(unsigned int _count, unsigned char _moto
      +                          rcycle[4], unsigned char _car[4], unsigned char _truck[4], unsigned char index);./Custom
      +                          Lib/TrafficLight.h: 100: {;./CustomLib/TrafficLight.h: 101:     if (_count >= 500)
  7255  0A2C  3001               	movlw	1
  7256  0A2D  0271               	subwf	Conteggio@_count+1,w
  7257  0A2E  30F4               	movlw	244
  7258  0A2F  1903               	skipnz
  7259  0A30  0270               	subwf	Conteggio@_count,w
  7260  0A31  1C03               	skipc
  7261  0A32  2A34               	goto	u139_21
  7262  0A33  2A35               	goto	u139_20
  7263  0A34                     u139_21:	
  7264  0A34  2A45               	goto	i1l2090
  7265  0A35                     u139_20:	
  7266  0A35                     i1l2088:	
  7267                           
  7268                           ;./CustomLib/TrafficLight.h: 102:     {;./CustomLib/TrafficLight.h: 103:         _motorc
      +                          ycle[index] = _motorcycle[index] + 1;
  7269  0A35  0875               	movf	Conteggio@index,w
  7270  0A36  0772               	addwf	Conteggio@_motorcycle,w
  7271  0A37  00F6               	movwf	??_Conteggio
  7272  0A38  0876               	movf	??_Conteggio,w
  7273  0A39  0084               	movwf	4
  7274  0A3A  1383               	bcf	3,7	;select IRP bank0
  7275  0A3B  0800               	movf	0,w
  7276  0A3C  3E01               	addlw	1
  7277  0A3D  00F7               	movwf	??_Conteggio+1
  7278  0A3E  0875               	movf	Conteggio@index,w
  7279  0A3F  0772               	addwf	Conteggio@_motorcycle,w
  7280  0A40  00F8               	movwf	??_Conteggio+2
  7281  0A41  0878               	movf	??_Conteggio+2,w
  7282  0A42  0084               	movwf	4
  7283  0A43  0877               	movf	??_Conteggio+1,w
  7284  0A44  0080               	movwf	0
  7285  0A45                     i1l2090:	
  7286                           
  7287                           ;./CustomLib/TrafficLight.h: 105:     if (_count >= 1500)
  7288  0A45  3005               	movlw	5
  7289  0A46  0271               	subwf	Conteggio@_count+1,w
  7290  0A47  30DC               	movlw	220
  7291  0A48  1903               	skipnz
  7292  0A49  0270               	subwf	Conteggio@_count,w
  7293  0A4A  1C03               	skipc
  7294  0A4B  2A4D               	goto	u140_21
  7295  0A4C  2A4E               	goto	u140_20
  7296  0A4D                     u140_21:	
  7297  0A4D  2A5E               	goto	i1l2094
  7298  0A4E                     u140_20:	
  7299  0A4E                     i1l2092:	
  7300                           
  7301                           ;./CustomLib/TrafficLight.h: 106:     {;./CustomLib/TrafficLight.h: 107:         _car[in
      +                          dex] = _car[index] + 1;
  7302  0A4E  0875               	movf	Conteggio@index,w
  7303  0A4F  0773               	addwf	Conteggio@_car,w
  7304  0A50  00F6               	movwf	??_Conteggio
  7305  0A51  0876               	movf	??_Conteggio,w
  7306  0A52  0084               	movwf	4
  7307  0A53  1383               	bcf	3,7	;select IRP bank0
  7308  0A54  0800               	movf	0,w
  7309  0A55  3E01               	addlw	1
  7310  0A56  00F7               	movwf	??_Conteggio+1
  7311  0A57  0875               	movf	Conteggio@index,w
  7312  0A58  0773               	addwf	Conteggio@_car,w
  7313  0A59  00F8               	movwf	??_Conteggio+2
  7314  0A5A  0878               	movf	??_Conteggio+2,w
  7315  0A5B  0084               	movwf	4
  7316  0A5C  0877               	movf	??_Conteggio+1,w
  7317  0A5D  0080               	movwf	0
  7318  0A5E                     i1l2094:	
  7319                           
  7320                           ;./CustomLib/TrafficLight.h: 109:     if (_count >= 3000)
  7321  0A5E  300B               	movlw	11
  7322  0A5F  0271               	subwf	Conteggio@_count+1,w
  7323  0A60  30B8               	movlw	184
  7324  0A61  1903               	skipnz
  7325  0A62  0270               	subwf	Conteggio@_count,w
  7326  0A63  1C03               	skipc
  7327  0A64  2A66               	goto	u141_21
  7328  0A65  2A67               	goto	u141_20
  7329  0A66                     u141_21:	
  7330  0A66  2A77               	goto	i1l180
  7331  0A67                     u141_20:	
  7332  0A67                     i1l2096:	
  7333                           
  7334                           ;./CustomLib/TrafficLight.h: 110:     {;./CustomLib/TrafficLight.h: 111:         _truck[
      +                          index] = _truck[index] + 1;
  7335  0A67  0875               	movf	Conteggio@index,w
  7336  0A68  0774               	addwf	Conteggio@_truck,w
  7337  0A69  00F6               	movwf	??_Conteggio
  7338  0A6A  0876               	movf	??_Conteggio,w
  7339  0A6B  0084               	movwf	4
  7340  0A6C  1383               	bcf	3,7	;select IRP bank0
  7341  0A6D  0800               	movf	0,w
  7342  0A6E  3E01               	addlw	1
  7343  0A6F  00F7               	movwf	??_Conteggio+1
  7344  0A70  0875               	movf	Conteggio@index,w
  7345  0A71  0774               	addwf	Conteggio@_truck,w
  7346  0A72  00F8               	movwf	??_Conteggio+2
  7347  0A73  0878               	movf	??_Conteggio+2,w
  7348  0A74  0084               	movwf	4
  7349  0A75  0877               	movf	??_Conteggio+1,w
  7350  0A76  0080               	movwf	0
  7351  0A77                     i1l180:	
  7352  0A77  0008               	return
  7353  0A78                     __end_of_Conteggio:	
  7354                           
  7355                           	psect	text28
  7356  17F7                     __ptext28:	
  7357 ;; *************** function _UART_Read *****************
  7358 ;; Defined at:
  7359 ;;		line 380 in file "main.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;		None
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;		None
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      unsigned char 
  7366 ;; Registers used:
  7367 ;;		wreg
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7373 ;;      Params:         0       0       0       0       0
  7374 ;;      Locals:         0       0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0
  7376 ;;      Totals:         0       0       0       0       0
  7377 ;;Total ram usage:        0 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; This function calls:
  7380 ;;		Nothing
  7381 ;; This function is called by:
  7382 ;;		_ISR
  7383 ;; This function uses a non-reentrant model
  7384 ;;
  7385                           
  7386                           
  7387                           ;psect for function _UART_Read
  7388  17F7                     _UART_Read:	
  7389  17F7                     i1l2528:	
  7390                           ;incstack = 0
  7391                           ; Regs used in _UART_Read: [wreg]
  7392                           
  7393  17F7                     i1l304:	
  7394                           ;main.c: 383:         ;
  7395                           
  7396                           
  7397                           ;main.c: 382:     while (!RCIF)
  7398  17F7  1283               	bcf	3,5	;RP0=0, select bank0
  7399  17F8  1303               	bcf	3,6	;RP1=0, select bank0
  7400  17F9  1E8C               	btfss	12,5	;volatile
  7401  17FA  2FFC               	goto	u209_21
  7402  17FB  2FFD               	goto	u209_20
  7403  17FC                     u209_21:	
  7404  17FC  2FF7               	goto	i1l304
  7405  17FD                     u209_20:	
  7406  17FD                     i1l306:	
  7407                           
  7408                           ;main.c: 384:     RCIF = 0;
  7409  17FD  128C               	bcf	12,5	;volatile
  7410  17FE                     i1l2530:	
  7411                           
  7412                           ;main.c: 385:     return RCREG;
  7413  17FE  081A               	movf	26,w	;volatile
  7414  17FF                     i1l307:	
  7415  17FF  0008               	return
  7416  1800                     __end_of_UART_Read:	
  7417  007E                     btemp	set	126	;btemp
  7418  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    12
    Data        12
    BSS         111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      72
    BANK1            80      0      77
    BANK3            96     13      27
    BANK2            96      0       0

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[4] size(2) Largest target is 14
		 -> s3(BANK3[14]), s2(BANK1[14]), s1(BANK1[14]), s0(BANK1[14]), 

    Conteggio@_truck	PTR unsigned char  size(1) Largest target is 4
		 -> truck(BANK1[4]), 

    Conteggio@_car	PTR unsigned char  size(1) Largest target is 4
		 -> car(BANK1[4]), 

    Conteggio@_motorcycle	PTR unsigned char  size(1) Largest target is 4
		 -> motorcycle(BANK0[4]), 

    SetReceivedTimes@_semafori	PTR PTR struct . size(1) Largest target is 8
		 -> Semafori(BANK0[8]), 

    SetReceivedTimes@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 

    SetDefaultTimers@_semafori	PTR PTR struct . size(1) Largest target is 8
		 -> Semafori(BANK0[8]), 

    GetTime@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 

    UpdateTimes@_semafori	PTR PTR struct . size(1) Largest target is 8
		 -> Semafori(BANK0[8]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 

    GetDigits@unita	PTR unsigned char  size(1) Largest target is 1
		 -> unita(BANK0[1]), 

    GetDigits@decine	PTR unsigned char  size(1) Largest target is 1
		 -> decine(BANK0[1]), 

    GetDigits@centinaia	PTR unsigned char  size(1) Largest target is 1
		 -> centinaia(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli
    _conteggioVeicoli->_Conteggio

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _rand->___lmul
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _ShowDigitsOnDisplay->___awmod
    _SetReceivedTimes->_GetTime
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   28533
                                             32 BANK0      8     8      0
                                              0 BANK3     13    13      0
                           _ADC_Read
                          _GetDigits
                   _SetDefaultTimers
                   _SetReceivedTimes
                _ShowDigitsOnDisplay
                          _UART_Init
                        _UpdateTimes
                          _bitParita
                           _init_ADC
                       _luciSemaforo
                                _map
                               _rand
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    5066
                                             24 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      42
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1568
                                              4 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _rand                                                 7     5      2     404
                                             17 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     404
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    5720
                                             20 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1934
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _luciSemaforo                                         4     3      1     232
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1519
                                              8 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     358
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UpdateTimes                                         21    21      0    1071
                                              4 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     990
                                             19 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     842
                                              4 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _ShowDigitsOnDisplay                                  2     2      0    3000
                                             11 BANK0      2     2      0
                         _SetDisplay
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _SetDisplay                                           4     1      3    1122
                                              4 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetReceivedTimes                                    14    13      1    1986
                                             12 BANK0     14    13      1
                            _GetTime
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     793
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              8     6      2     514
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    16     9      7    1834
                                              4 BANK0     16     9      7
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            8     4      4    4527
                                             20 BANK0      8     4      4
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1878
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1902
                                             11 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      42
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0     822
                                              0 BANK0      4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     5     5      0     822
                                              9 COMMON     5     5      0
                          _Conteggio
 ---------------------------------------------------------------------------------
 (5) _Conteggio                                            9     3      6     710
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _SetDefaultTimers
   _SetReceivedTimes
     _GetTime
     ___bmul
   _ShowDigitsOnDisplay
     _SetDisplay
     ___awmod
   _UART_Init
     ___aldiv
   _UpdateTimes
   _bitParita
     _bitChange
   _init_ADC
   _luciSemaforo
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _rand
     ___lmul
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli
     _Conteggio

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      D      1B       9       28.1%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4D       7       96.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     28      48       5       90.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      BE      12        0.0%
ABS                  0      0      BE       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Jul 12 17:50:29 2020

                 luciSemaforo@lux 0024                                 pc 0002                    ___bmul@product 0026  
                     __CFG_CP$OFF 0000                                l83 0956                      ___awdiv@sign 0031  
                              _s0 00D7                                _s1 00C9                                _s2 00BB  
                              _s3 0190                                fsr 0004               ___wmul@multiplicand 0026  
                  _GetDigits$1212 0039                 luciSemaforo@index 0027                       __CFG_LVP$ON 0000  
                             l100 0DD1                               l111 0F6E                               l104 08F0  
                             l112 0F7A                               l131 0F0E                               l116 0FBE  
                             l117 0FCA                               l125 0EBD                               l134 0F36  
                             l119 0FFF                               l312 0921                               l240 008E  
                             l315 085B                               l147 07BA                               l331 0A80  
                             l332 0A84                               l340 0ACA                               l157 099C  
                             l174 0CB9                               l238 0398                               l255 0263  
                             l352 0D35                               l280 0833                               l336 0A9B  
                             l601 0C4B                               l169 06A0                               l513 0DE6  
                             l329 0A7C                               l273 0545                               l338 0A9F  
                             l450 08BF                               l283 088C                               l523 0E6E  
                             l339 0AA3                               l292 07F8                               l286 0898  
                             l614 0B7D                               l462 0A2B                               l294 07FC  
                             l295 07FF                               l448 08A7                               l289 07F4  
                             l474 0872                               l898 09E3                      __CFG_CPD$OFF 0000  
                             _ISR 0ACB                               _car 00E9                               _map 0922  
                             fsr0 0004                               indf 0000                      ___awmod@sign 002A  
                    __CFG_FOSC$HS 0000                              ?_ISR 0070             ??_ShowDigitsOnDisplay 002B  
                            l4010 0F21                              l4002 0EE7                              l4100 0E09  
                            l4004 0EFB                              l4030 0990                              l4022 095A  
                            l4110 0E38                              l4102 0E0C                              l4014 0F22  
                            l4006 0F01                              l4200 0B6F                              l4032 0998  
                            l4024 0969                              l4040 084A                              l4120 0E5B  
                            l4112 0E46                              l4104 0E19                              l4016 0F28  
                            l4008 0F14                              l4130 0BEA                              l4202 0B74  
                            l4026 0971                              l4042 0859                              l4122 0E66  
                            l4114 0E47                              l4106 0E1D                              l4050 08AE  
                            l4018 0F35                              l4140 0BFE                              l4132 0BEF  
                            l4204 0B79                              l4220 0DA8                              l4212 0D39  
                            l4028 0982                              l4116 0E50                              l4108 0E26  
                            l4300 07B0                              l4052 08B5                              l4044 0899  
                            l4060 09EE                              l4036 07F8                              l4150 0C14  
                            l4142 0C00                              l4134 0BF1                              l4126 0BE3  
                            l4222 0DBB                              l4214 0D3A                              l4310 0555  
                            l4118 0E56                              l4302 07B4                              l4230 0F41  
                            l4054 08BB                              l4046 089D                              l4062 09F2  
                            l4038 07FD                              l4400 0876                              l4160 0C37  
                            l4152 0C18                              l4144 0C06                              l4136 0BF5  
                            l4128 0BE6                              l4216 0D4F                              l4320 05DB  
                            l4304 0552                              l4080 086A                              l4072 085F  
                            l4240 0F61                              l4224 0F3A                              l4048 08A1  
                            l4208 0922                              l4064 0A09                              l4402 0882  
                            l4154 0C29                              l4146 0C09                              l4162 0C3D  
                            l4138 0BFA                              l4170 0B23                              l4218 0D6B  
                            l4330 063A                              l4082 0871                              l4074 0860  
                            l4090 0DD9                              l4242 0F74                              l4410 0A7B  
                            l4066 0A12                              l4058 09E4                              l4404 0889  
                            l4164 0C42                              l4156 0C2F                              l4148 0C10  
                            l4180 0B35                              l4172 0B26                              l4332 063E  
                            l4316 0557                              l4324 061D                              l4076 0864  
                            l4340 0C4F                              l4092 0DEA                              l4260 0F95  
                            l4244 0F76                              l4236 0F45                              l4068 0A23  
                            l4500 0054                              l4406 0890                              l4166 0C47  
                            l4158 0C30                              l4190 0B4E                              l4182 0B3A  
                            l4174 0B2A                              l4334 0644                              l4318 0599  
                            l4326 0630                              l4078 0868                              l4350 0C74  
                            l4342 0C50                              l4094 0DF5                              l4086 0DD2  
                            l4270 0FD0                              l4262 0FAB                              l4254 0F91  
                            l4246 0F80                              l4238 0F5B                              l4414 0A88  
                            l4422 0ABA                              l4510 0084                              l4502 0056  
                            l4192 0B52                              l4184 0B40                              l4176 0B2F  
                            l4328 0634                              l4352 0C87                              l4096 0DF9  
                            l4088 0DD5                              l4272 0FDD                              l4264 0FB1  
                            l4248 0F8D                              l4360 0825                              l4600 0379  
                            l4520 0089                              l4512 0085                              l4504 005B  
                            l4194 0B5C                              l4186 0B43                              l4178 0B31  
                            l4354 0CB4                              l4346 0C57                              l4450 0CD9  
                            l4442 0CBA                              l4098 0E01                              l4370 07F1  
                            l4290 06F1                              l4282 06A5                              l4274 0FE4  
                            l4266 0FC4                              l4362 0828                              l4418 0AA7  
                            l4610 039D                              l4602 037F                              l4530 0093  
                            l4514 0086                              l4506 0066                              l4196 0B62  
                            l4188 0B4A                              l4348 0C66                              l4452 0CDE  
                            l4460 0D1D                              l4444 0CBB                              l4372 07F2  
                            l4292 0732                              l4276 06A4                              l4268 0FC6  
                            l4364 082C                              l4380 09CC                              l4612 039E  
                            l4620 03BA                              l4540 016A                              l4532 00A2  
                            l4524 0092                              l4516 0087                              l4508 0081  
                            l4198 0B69                              l4454 0CF3                              l4446 0CC0  
                            l4374 07F3                              l4366 07BB                              l4294 0736  
                            l4358 0821                              l4630 0451                              l4622 03C0  
                            l4614 03A0                              l4550 0222                              l4542 01B5  
                            l4534 00A7                              l4606 0383                              l4518 0088  
                            ?_map 0034                              l4448 0CD4                              l4368 07C3  
                            l4296 073C                              l4288 06A6                              l4376 099D  
                            l4392 0908                              l4384 08F4                              l4640 0472  
                            l4632 0457                              l4624 03C4                              l4616 03A4  
                            l4608 039C                              l4560 0239                              l4552 0228  
                            l4536 00D4                              l4458 0D08                              l4298 0778  
                            l4378 09BE                              l4394 0911                              l4386 0907  
                            l4634 0464                              l4642 0478                              l4626 03C6  
                            l4650 04D6                              l4618 03A6                              l4570 024F  
                            l4562 023F                              l4538 011F                              l4546 0200  
                            l4490 0048                              l4396 0917                              l4660 0543  
                            l4652 04DC                              l4644 049C                              l4636 046C  
                            l4628 03E3                              l4580 0334                              l4572 0254  
                            l4564 024C                              l4548 021A                              l4492 004A  
                            l4484 003F                              l3950 08E1                              l3942 08C3  
                            l4398 091B                              l4662 0549                              l4654 0534  
                            l4646 04AA                              l4638 046D                              l4590 0360  
                            l4582 0345                              l4574 025C                              l4558 022A  
                            l4494 004C                              l4486 0045                              l3944 08D2  
                            l3960 0E8F                              l4664 054D                              l4648 04CE  
                            l4656 0539                              l4592 0365                              l4584 0356  
                            l4576 0267                              l4496 0050                              l4488 0046  
                            l3962 0E90                              l3954 0E72                              l4658 053F  
                            l4586 0359                              l4578 0325                              l4498 0052  
                            l3980 0EC3                              l3956 0E81                              l4596 036E  
                            l3990 0EDF                              l3982 0ECB                              l3974 0E96  
                            l3958 0E8E                              l4598 0376                              l4880 0A90  
                            l3976 0EAA                              l3968 0E92                              l4882 0AAF  
                            l3986 0ECC                              l3978 0EB0                              l4884 0AC2  
                            l3996 0EE3                              l3988 0ED2                              l4876 020C  
                            l4886 0D12                              l4878 0390                              l4888 0625  
                            u4000 0C42                              u4001 0C41                              u4010 0B2A  
                            u4011 0B29                              u4020 0B35                              u4100 0D6B  
                            u4021 0B34                              u4101 0D6A                              u4030 0B40  
                            u4031 0B3F                              u4200 06F1                              u4120 0F6E  
                            u4105 0D67                              u4201 06F0                              u4121 0F6D  
                            u4050 0B52                              u4210 073C                              u4130 0F74  
                            u4114 0F53                              u4051 0B51                              u4211 073B  
                            u4131 0F73                              u4115 0F51                              u4060 0B5C  
                            u4220 0778                              u4140 0F8D                              u4300 0921  
                            u4061 0B5B                              u4045 0B44                              u4221 0777  
                            u4205 06ED                              u4141 0F8C                              u4125 0F6A  
                            u4301 0920                              u4230 07BA                              u4231 07B9  
                            u4320 0890                              u4080 0B6F                              u4240 063A  
                            u4160 0FBE                              u3600 0EBD                              u4400 00A7  
                            u4321 088F                              u4081 0B6E                              u4065 0B58  
                            u4241 0639                              u4161 0FBD                              u4145 0F89  
                            u3601 0EBC                              u4401 00A6                              u4090 0B74  
                            u4250 0644                              u4330 0CC0                              u4170 0FC4  
                            u4154 0FA3                              u3610 0EC3                              u4410 0228  
                            u4315 0879                              u4091 0B73                              u4075 0B63  
                            u4251 0643                              u4331 0CBF                              u4171 0FC3  
                            u4155 0FA1                              u3611 0EC2                              u4411 0227  
                            u4260 0C56                              u4340 0CD9                              u4180 0FDD  
                            u3700 08A1                              u3620 0EDF                              u4500 03C4  
                            u4420 024C                              u4261 0C55                              u4341 0CD8  
                            u4181 0FDC                              u4165 0FBA                              u3701 08A0  
                            u3621 0EDE                              u3605 0EB9                              u4501 03C3  
                            u4421 024B                              u4350 0CDE                              u3550 08D2  
                            u4190 0FE4                              u4510 03E3                              u4430 0262  
                            u4351 0CDD                              u3551 08D1                              u4191 0FE3  
                            u4511 03E2                              u4431 0261                              u3800 0871  
                            u4280 07D2                              u3544 08C9                              u3640 0F0E  
                            u4600 054D                              u4520 0451                              u4440 035F  
                            u3801 0870                              u3545 08C7                              u4185 0FD9  
                            u3641 0F0D                              u3625 0EDB                              u4601 054C  
                            u4521 0450                              u4441 035E                              u4425 0248  
                            u3810 0DD9                              u3730 08BB                              u4290 09DB  
                            u3650 0F14                              u3634 0EF3                              u4530 046C  
                            u4450 0376                              u4275 0C7C                              u3811 0DD8  
                            u3731 08BA                              u3715 08A8                              u3651 0F13  
                            u3635 0EF1                              u4531 046B                              u4451 0375  
                            u3900 0E5B                              u3820 0DEA                              u3564 08D8  
                            u3740 09F2                              u4540 0472                              u4460 037F  
                            u3901 0E5A                              u3821 0DE9                              u4285 07CD  
                            u3565 08D6                              u3725 08AF                              u3741 09F1  
                            u3645 0F0A                              u4541 0471                              u4461 037E  
                            u3910 0BEA                              u3830 0E09                              u3574 08E7  
                            u3670 0F35                              u4550 049C                              u4470 039C  
                            u4390 008D                              u3911 0BE9                              u3831 0E08  
                            u3575 08E5                              u3751 09FB                              u4295 09D6  
                            u3671 0F34                              u4551 049B                              u4471 039B  
                            u4391 008C                              u3920 0BF5                              u3752 0A02  
                            u3664 0F1A                              u4560 04DC                              u4480 03A4  
                            u3921 0BF4                              u3753 0A09                              u3665 0F18  
                            u3585 0E84                              u4561 04DB                              u4481 03A3  
                            u3930 0C06                              u3850 0E1D                              u3594 0EA2  
                            u3690 07FC                              u4570 053F                              u4490 03C0  
                            u3931 0C05                              u3851 0E1C                              u4627 0830  
                            u3675 0F31                              u3595 0EA0                              u3691 07FB  
                            u4571 053E                              u4491 03BF                              u3780 0A23  
                            u4580 0543                              _RCIF 0065                              u4637 0886  
                            u3685 0977                              u3845 0E0E                              u3781 0A22  
                            u3765 0A0B                              u4581 0542                              u3950 0C18  
                            u3790 0864                              u3870 0E38                              u4590 0549  
                            u3951 0C17                              u3791 0863                              u3871 0E37  
                            u3775 0A13                              u4591 0548                              u3945 0C0A  
                            u3865 0E1F                              u3970 0C29                              u3890 0E56  
                            u3971 0C28                              u3891 0E55                              u3875 0E34  
                            u3965 0C19                              u3885 0E48                              u3990 0C3D  
                            u3991 0C3C                              u3975 0C25                              u3985 0C31  
                            _TMR0 0001                              _TXIF 0064                      __CFG_WRT$OFF 0000  
                            _disp 0050                              _main 003F                              _rand 099D  
                            _temp 004C                              _time 00A0                              map@x 0034  
                            btemp 007E                  __end_of_ADC_Read 0899                     __CFG_BOREN$ON 0000  
                            start 0010                   __end_of_GetTime 099D                 ___bmul@multiplier 0027  
                           ??_ISR 0020         __size_of_conteggioVeicoli 0065                             ??_map 003E  
                 __end_of___aldiv 0E6F                             ?_main 0070                             ?_rand 0031  
                 __end_of___awdiv 0C4C                     __CFG_WDTE$OFF 0000                   __end_of___awmod 0B7E  
                 ___awdiv@divisor 002B                             _T1CON 0010              bitParita@errorColumn 002E  
                           i1l304 17F7                             i1l306 17FD                             i1l307 17FF  
                           i1l323 0BE2                             i1l180 0A77                             i1l362 0B1A  
                 ___awdiv@counter 0030                             _RCREG 001A              UpdateTimes@_semafori 0037  
                           _TMR1H 000F                             _TMR1L 000E                             _SPBRG 0099  
                           _PORTD 0008                             _TRISA 0085                             _TRISB 0086  
                           _TRISC 0087                             _TRISD 0088                             _TRISE 0089  
                           _TXREG 0019               ___lmul@multiplicand 0028                     __CFG_PWRTE$ON 0000  
              __size_of_UART_Init 003A                __size_of_UART_Read 0009                   __end_of_display 0811  
                           _count 0048                             _randx 005C                             _unita 005B  
                           main@i 0047                             _truck 00E5                             pclath 000A  
                           status 0003                             wtemp0 007E                   __initialization 0013  
                    __end_of_main 0552                      __end_of_rand 09E4         __size_of_SetReceivedTimes 006E  
              __size_of_GetDigits 009C                            ??_main 019E                            ??_rand 0033  
               SetDefaultTimers@i 0033                 SetDefaultTimers@l 0032                __size_of_BuildByte 00C8  
                      _SetDisplay 0847                     bitChange@dato 0027                            _ADCON0 001F  
                          _ADCON1 009F                __size_of_Conteggio 004C                            _ADRESH 001E  
                          _ADRESL 009E                  ___awdiv@dividend 002D                            i1l2090 0A45  
                          i1l2092 0A4E                            i1l2094 0A5E                            i1l2086 0A2C  
                          i1l2096 0A67                            i1l2088 0A35                            i1l2530 17FE  
                          i1l2540 0B9F                            i1l2550 0BD8                            i1l2542 0BA8  
                          i1l2534 0B7E                            i1l2528 17F7                            i1l2552 0BDC  
                          i1l2544 0BB1                            u210_20 0BA8                            i1l2536 0B9E  
                          i1l2800 0B01                            u210_21 0BA7                            i1l2546 0BB9  
                          i1l2810 0B11                            i1l2802 0B05                            i1l2548 0BD4  
                          i1l2812 0B12                            i1l2804 0B06                            i1l2814 0B16  
                          i1l2806 0B0A                            u211_20 0BB9                            i1l2816 0B18  
                          i1l2808 0B10                            u211_21 0BB8                            i1l2780 0AD6  
                          i1l2790 0AF2                            i1l2782 0AD8                            i1l2774 0ACB  
                          u140_20 0A4E                            u212_20 0BE2                            i1l2784 0ADC  
                          i1l2792 0AF3                            i1l2776 0ACF                            u140_21 0A4D  
                          u212_21 0BE1                            i1l2794 0AF7                            i1l2786 0AE0  
                          i1l2778 0AD3                            i1l2796 0AF8                            i1l2788 0AEE  
                          i1l2798 0AFD                            u141_20 0A67                            u141_21 0A66  
                          u240_20 0AD3                            u240_21 0AD2                            u209_20 17FD  
                          u241_20 0ADC                            _INTCON 000B                            u209_21 17FC  
                          u241_21 0ADB                            u242_20 0AE0                            u242_21 0ADF  
                          u139_20 0A35                            u243_20 0AF7                            u139_21 0A34  
                          u243_21 0AF6                            u244_20 0B05                            u244_21 0B04  
                          u245_20 0B10                            u245_21 0B0F                            u239_20 0ACF  
                          u239_21 0ACE                            _TMR0IF 005A                            _TMR1IF 0060  
                       ??_GetTime 0026                      ?_UART_TxChar 0070                 __end_of_UART_Init 07F5  
               __end_of_UART_Read 1800                            ___bmul 085C                            ___lmul 09E4  
                       ??___aldiv 002C                   GetTime@shortInt 0029                            ___wmul 0899  
                       ??___awdiv 002F                            _decine 005A                         ??___awmod 0028  
                __end_of_init_ADC 0834                            _cycled 0051                  ___awdiv@quotient 0032  
                 ___awmod@divisor 0024                   ___awmod@counter 0029                  __end_of_sendByte 0922  
                 GetDigits@decine 0034                         ?_ADC_Read 0024                            saved_w 007E  
         __end_of__initialization 003B                 __end_of_GetDigits 0DD2                     ??_UpdateTimes 0024  
            bitParita@sommaColumn 002D         __size_of_SetDefaultTimers 014F               ___bmul@multiplicand 0024  
                  __pcstackCOMMON 0070                 __end_of_BuildByte 0F37                      __pidataBANK0 0815  
              __size_of_bitChange 0031                  _conteggioVeicoli 0B7E                 __end_of_Conteggio 0A78  
                   ?_luciSemaforo 0024                __size_of_bitParita 00C9                        ??_ADC_Read 0026  
          SetDefaultTimers@giallo 0028         SetReceivedTimes@_semafori 002C                       ?_SetDisplay 0024  
                   GetDigits@Time 0036              _dataFromGatewayIndex 004E              _timerReadFromGateway 004D  
                      __pbssBANK0 0048                        __pbssBANK1 00A0                        __pbssBANK3 0190  
                      __pmaintext 003F                           ?___bmul 0024                           ?___lmul 0024  
                         ?___wmul 0024                    ??_luciSemaforo 0025               __end_of_UpdateTimes 07BB  
                   sendByte@byte0 003D                     sendByte@byte1 0038                        __pintentry 0004  
                  ___lmul@product 002D                  _SetReceivedTimes 0C4C       __end_of_ShowDigitsOnDisplay 0D36  
               __end_of_bitChange 08F1                        __stringtab 0800                 __end_of_bitParita 1000  
                       ?_init_ADC 0070                           _GetTime 0957                   BuildByte@valore 0025  
                 BuildByte@txByte 0029           GetTime@_dataFromGateway 0024                         ?_sendByte 0038  
                      bitChange@n 0024                        _n_semafori 0811              __size_of_UART_TxChar 000B  
                         ___aldiv 0DD2                   __size_of___bmul 0017                           ___awdiv 0BE3  
                 __size_of___lmul 0048                           ___awmod 0B23               __size_of_SetDisplay 0015  
                 __size_of___wmul 0027                 conteggioVeicoli@i 007D                           __ptext1 08F1  
                         __ptext2 07F5                           __ptext3 0E6F                           __ptext4 099D  
                         __ptext5 09E4                           __ptext6 0922                           __ptext7 0899  
                         __ptext8 0A78                           __ptext9 0821                           _display 0806  
                    __size_of_ISR 0058                        bitParita@i 0036                        bitParita@y 0031  
                    __size_of_map 0035                  ___awmod@dividend 0026                  ___aldiv@dividend 0028  
            BuildByte@sommaColumn 002F                           _umidita 004B                           clrloop0 17F0  
            end_of_initialization 003B                        ??_init_ADC 0024                    main@lux_select 0045  
                     _UpdateTimes 06A1                        ??_sendByte 003A                  _SetDefaultTimers 0552  
                       _RCSTAbits 0018                  ___aldiv@quotient 002F                        _motorcycle 0055  
                       _UART_Init 07BB                         _UART_Read 17F7             SetReceivedTimes@index 0038  
                       _PORTAbits 0005                         _PORTBbits 0006                         _PORTCbits 0007  
                    SetDisplay@d1 0027                      SetDisplay@d2 0024                      SetDisplay@d3 0025  
                       _TRISCbits 0087                 __size_of_ADC_Read 0026          __end_of_conteggioVeicoli 0BE3  
            __end_of_luciSemaforo 0ACB                        map@out_max 003C                 bitParita@errorRow 0030  
                      map@out_min 003A  SetReceivedTimes@_dataFromGateway 0037                         _TXSTAbits 0098  
                      main@random 0042                         _GetDigits 0D36                 bitParita@sommaRow 002C  
                  __end_of___bmul 0873                    __end_of___lmul 0A2C                    __end_of___wmul 08C0  
                      ?_UART_Init 0033                        ?_UART_Read 0070                         _BuildByte 0E6F  
                       _Conteggio 0A2C                 BuildByte@sommaRow 002E               start_initialization 0013  
                     __end_of_ISR 0B23                      ??_SetDisplay 0027                       __end_of_map 0957  
        __end_of_SetReceivedTimes 0CBA                        ?_GetDigits 0034                          ??___bmul 0025  
                        ??___lmul 002C                    ADC_Read@canale 0027                          ??___wmul 0028  
                      init_fetch0 0834                       __pdataBANK0 005C                __end_of_SetDisplay 085C  
                      ?_BuildByte 0024                    GetDigits@unita 0035                        ?_Conteggio 0070  
                       ___latbits 0002                     __pcstackBANK0 0020                     __pcstackBANK3 019E  
                        ?_GetTime 0024                         _bitChange 08C0             SetDefaultTimers@verde 0026  
           SetDefaultTimers@rosso 0024                 __size_of_init_ADC 0013                         _bitParita 0F37  
                       _centinaia 0059                 __size_of_sendByte 0031                          ?___aldiv 0024  
                        ?___awdiv 002B                          ?___awmod 0024                       ??_UART_Init 0035  
                     ??_UART_Read 0070                    BuildByte@i_359 0036                         __pstrings 0800  
                  BuildByte@y_360 0032                    sendByte@valore 0039                    sendByte@txByte 003E  
                  BuildByte@byte0 0028                    BuildByte@byte1 0024          __end_of_SetDefaultTimers 06A1  
                        _ADC_Read 0873             __size_of_luciSemaforo 0053                         _count_lux 004F  
                   UART_TxChar@ch 0024      __size_of_ShowDigitsOnDisplay 007C                   ___aldiv@divisor 0024  
               SetReceivedTimes@i 0039                 interrupt_function 0004                   ___aldiv@counter 002D  
                      ?_bitChange 0024                    ___wmul@product 0028        SetReceivedTimes@semaforoId 0035  
                    ?_UpdateTimes 0070                         clear_ram0 17EF                          _PIE1bits 008C  
                   ??_UART_TxChar 0024                        ?_bitParita 0070                       ??_GetDigits 0038  
                        _GO_nDONE 00FA                      _luciSemaforo 0A78                         _pressione 004A  
               UART_Init@baudrate 0033                       ??_BuildByte 0026                         map@in_max 0038  
                       map@in_min 0036                       __stringbase 0805                         main@i_490 0041  
                       main@i_493 0046                       ??_Conteggio 0076                         main@i_487 0043  
                       main@i_488 0040                 ___wmul@multiplier 0024                      GetTime@index 0028  
               ___lmul@multiplier 0024                      _RoadsSensors 00A8                 ?_conteggioVeicoli 0070  
                    _secondPassed 0052                ??_conteggioVeicoli 0079                  __size_of_GetTime 0046  
                        _Semafori 0060                GetDigits@centinaia 003B                    bitParita@i_347 0038  
                     _readGateway 0053                    bitParita@y_348 0033                  __size_of___aldiv 009D  
             __end_of_UART_TxChar 0800                  __size_of___awdiv 0069                  __size_of___awmod 005B  
                  bitParita@error 002F                __end_of__stringtab 0806                         sendByte@i 003F  
                        __ptext10 0F37                          __ptext11 08C0                          __ptext20 0552  
                        __ptext12 06A1                          __ptext21 0D36                          __ptext13 07BB  
                        __ptext22 0B23                          __ptext14 0DD2                          __ptext23 0BE3  
                        __ptext15 0CBA                          __ptext24 0873                          __ptext16 0847  
                        __ptext25 0ACB                          __ptext17 0C4C                          __ptext26 0B7E  
                        __ptext18 085C                          __ptext27 0A2C                          __ptext19 0957  
                        __ptext28 17F7                __end_of_n_semafori 0812                          _init_ADC 0821  
                     bitParita@rx 0035                       ??_bitChange 0025                 ?_SetReceivedTimes 002C  
                   __size_of_main 0513                   _dataFromGateway 00AC                     __size_of_rand 0047  
                     ??_bitParita 0028                          _sendByte 08F1                ??_SetReceivedTimes 002D  
                      _INTCONbits 000B                          init_ram0 0838              Conteggio@_motorcycle 0072  
                        intlevel1 0000                   _readGatewayDone 0054                         stringcode 0800  
                     _UART_TxChar 07F5           SetReceivedTimes@colorId 0036              __size_of_UpdateTimes 011A  
                      GetTime@tmp 002A               _ShowDigitsOnDisplay 0CBA                        _OPTION_REG 0081  
                 SetDisplay@value 0026                          stringdir 0800                          stringtab 0800  
                    UpdateTimes@i 0036                      UpdateTimes@l 0038                 ?_SetDefaultTimers 0024  
                    ___aldiv@sign 002E                ??_SetDefaultTimers 002B              ?_ShowDigitsOnDisplay 0070  
                      BuildByte@i 0034                        BuildByte@y 0030         SetDefaultTimers@_semafori 002A  
                 Conteggio@_count 0070                     Conteggio@_car 0073                   Conteggio@_truck 0074  
                  Conteggio@index 0075  
