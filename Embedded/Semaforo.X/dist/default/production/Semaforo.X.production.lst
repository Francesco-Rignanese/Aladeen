

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Jul 12 18:04:04 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 2.10
    49                           ; Generated 31/07/2019 GMT
    50                           ; 
    51                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F877A Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000D                     	;# 
    96  000E                     	;# 
    97  000E                     	;# 
    98  000F                     	;# 
    99  0010                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0013                     	;# 
   103  0014                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001B                     	;# 
   113  001C                     	;# 
   114  001D                     	;# 
   115  001E                     	;# 
   116  001F                     	;# 
   117  0081                     	;# 
   118  0085                     	;# 
   119  0086                     	;# 
   120  0087                     	;# 
   121  0088                     	;# 
   122  0089                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  008E                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  009F                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  0000                     	;# 
   143  0001                     	;# 
   144  0002                     	;# 
   145  0003                     	;# 
   146  0004                     	;# 
   147  0005                     	;# 
   148  0006                     	;# 
   149  0007                     	;# 
   150  0008                     	;# 
   151  0009                     	;# 
   152  000A                     	;# 
   153  000B                     	;# 
   154  000C                     	;# 
   155  000D                     	;# 
   156  000E                     	;# 
   157  000E                     	;# 
   158  000F                     	;# 
   159  0010                     	;# 
   160  0011                     	;# 
   161  0012                     	;# 
   162  0013                     	;# 
   163  0014                     	;# 
   164  0015                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001D                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  0081                     	;# 
   178  0085                     	;# 
   179  0086                     	;# 
   180  0087                     	;# 
   181  0088                     	;# 
   182  0089                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0093                     	;# 
   189  0094                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  010F                     	;# 
   200  018C                     	;# 
   201  018D                     	;# 
   202                           
   203                           	psect	idataBANK0
   204  0805                     __pidataBANK0:	
   205                           
   206                           ;initializer for _randx
   207  0805  3401               	retlw	1
   208  0806  3400               	retlw	0
   209  0807  3400               	retlw	0
   210  0808  3400               	retlw	0
   211                           
   212                           ;initializer for _Semafori
   213  0809  34D7               	retlw	low (_s0| 0)
   214  080A  3400               	retlw	high (_s0| 0)
   215  080B  34C9               	retlw	low (_s1| 0)
   216  080C  3400               	retlw	high (_s1| 0)
   217  080D  34BB               	retlw	low (_s2| 0)
   218  080E  3400               	retlw	high (_s2| 0)
   219  080F  3490               	retlw	low (_s3| (0+256))
   220  0810  3401               	retlw	high (_s3| (0+256))
   221                           
   222                           	psect	strings
   223  1000                     __pstrings:	
   224  1000                     stringtab:	
   225  1000                     __stringtab:	
   226  1000                     stringcode:	
   227                           ;	String table - string pointers are 1 byte each
   228                           
   229  1000                     stringdir:	
   230  1000  3010               	movlw	high stringdir
   231  1001  008A               	movwf	10
   232  1002  0804               	movf	4,w
   233  1003  0A84               	incf	4,f
   234  1004  0782               	addwf	2,f
   235  1005                     __stringbase:	
   236  1005  3400               	retlw	0
   237  1006                     __end_of__stringtab:	
   238  1006                     _display:	
   239  1006  343F               	retlw	63
   240  1007  3406               	retlw	6
   241  1008  345B               	retlw	91
   242  1009  344F               	retlw	79
   243  100A  3466               	retlw	102
   244  100B  346D               	retlw	109
   245  100C  347D               	retlw	125
   246  100D  3407               	retlw	7
   247  100E  347F               	retlw	127
   248  100F  346F               	retlw	111
   249  1010  3400               	retlw	0
   250  1011                     __end_of_display:	
   251  1011                     _n_semafori:	
   252  1011  3402               	retlw	2
   253  1012                     __end_of_n_semafori:	
   254  0008                     _PORTD	set	8
   255  0005                     _PORTAbits	set	5
   256  001A                     _RCREG	set	26
   257  0019                     _TXREG	set	25
   258  000B                     _INTCONbits	set	11
   259  0018                     _RCSTAbits	set	24
   260  001E                     _ADRESH	set	30
   261  001F                     _ADCON0	set	31
   262  0006                     _PORTBbits	set	6
   263  0007                     _PORTCbits	set	7
   264  000E                     _TMR1L	set	14
   265  000F                     _TMR1H	set	15
   266  0010                     _T1CON	set	16
   267  0001                     _TMR0	set	1
   268  000B                     _INTCON	set	11
   269  0060                     _TMR1IF	set	96
   270  005A                     _TMR0IF	set	90
   271  0065                     _RCIF	set	101
   272  0064                     _TXIF	set	100
   273  00FA                     _GO_nDONE	set	250
   274  008C                     _PIE1bits	set	140
   275  0099                     _SPBRG	set	153
   276  0098                     _TXSTAbits	set	152
   277  0087                     _TRISCbits	set	135
   278  009E                     _ADRESL	set	158
   279  009F                     _ADCON1	set	159
   280  0085                     _TRISA	set	133
   281  0081                     _OPTION_REG	set	129
   282  0089                     _TRISE	set	137
   283  0088                     _TRISD	set	136
   284  0087                     _TRISC	set	135
   285  0086                     _TRISB	set	134
   286                           
   287                           ; #config settings
   288  0000                     
   289                           	psect	cinit
   290  0013                     start_initialization:	
   291  0013                     __initialization:	
   292                           
   293                           ; Initialize objects allocated to BANK0
   294  0013  1383               	bcf	3,7	;select IRP bank0
   295  0014  306A               	movlw	low (__pdataBANK0+12)
   296  0015  00FD               	movwf	btemp+-1
   297  0016  3008               	movlw	high __pidataBANK0
   298  0017  00FE               	movwf	btemp
   299  0018  3005               	movlw	low __pidataBANK0
   300  0019  00FF               	movwf	btemp+1
   301  001A  305E               	movlw	low __pdataBANK0
   302  001B  0084               	movwf	4
   303  001C  120A  158A  2015  120A  118A  	fcall	init_ram0
   304                           
   305                           ; Clear objects allocated to BANK3
   306  0021  1783               	bsf	3,7	;select IRP bank2
   307  0022  3090               	movlw	low __pbssBANK3
   308  0023  0084               	movwf	4
   309  0024  309E               	movlw	low (__pbssBANK3+14)
   310  0025  160A  118A  27D1  120A  118A  	fcall	clear_ram0
   311                           
   312                           ; Clear objects allocated to BANK1
   313  002A  1383               	bcf	3,7	;select IRP bank0
   314  002B  30A0               	movlw	low __pbssBANK1
   315  002C  0084               	movwf	4
   316  002D  30ED               	movlw	low (__pbssBANK1+77)
   317  002E  160A  118A  27D1  120A  118A  	fcall	clear_ram0
   318                           
   319                           ; Clear objects allocated to BANK0
   320  0033  304A               	movlw	low __pbssBANK0
   321  0034  0084               	movwf	4
   322  0035  305E               	movlw	low (__pbssBANK0+20)
   323  0036  160A  118A  27D1  120A  118A  	fcall	clear_ram0
   324  003B                     end_of_initialization:	
   325                           ;End of C runtime variable initialization code
   326                           
   327  003B                     __end_of__initialization:	
   328  003B  0183               	clrf	3
   329  003C  120A  118A  283F   	ljmp	_main	;jump to C main() function
   330                           
   331                           	psect	bssBANK0
   332  004A                     __pbssBANK0:	
   333  004A                     _count:	
   334  004A                     	ds	2
   335  004C                     _pressione:	
   336  004C                     	ds	1
   337  004D                     _umidita:	
   338  004D                     	ds	1
   339  004E                     _temp:	
   340  004E                     	ds	1
   341  004F                     _timerReadFromGateway:	
   342  004F                     	ds	1
   343  0050                     _dataFromGatewayIndex:	
   344  0050                     	ds	1
   345  0051                     _count_lux:	
   346  0051                     	ds	1
   347  0052                     _disp:	
   348  0052                     	ds	1
   349  0053                     _cycled:	
   350  0053                     	ds	1
   351  0054                     _secondPassed:	
   352  0054                     	ds	1
   353  0055                     _readGateway:	
   354  0055                     	ds	1
   355  0056                     _readGatewayDone:	
   356  0056                     	ds	1
   357  0057                     _motorcycle:	
   358  0057                     	ds	4
   359  005B                     _centinaia:	
   360  005B                     	ds	1
   361  005C                     _decine:	
   362  005C                     	ds	1
   363  005D                     _unita:	
   364  005D                     	ds	1
   365                           
   366                           	psect	dataBANK0
   367  005E                     __pdataBANK0:	
   368  005E                     _randx:	
   369  005E                     	ds	4
   370  0062                     _Semafori:	
   371  0062                     	ds	8
   372                           
   373                           	psect	bssBANK1
   374  00A0                     __pbssBANK1:	
   375  00A0                     _time:	
   376  00A0                     	ds	8
   377  00A8                     _RoadsSensors:	
   378  00A8                     	ds	4
   379  00AC                     _dataFromGateway:	
   380  00AC                     	ds	15
   381  00BB                     _s2:	
   382  00BB                     	ds	14
   383  00C9                     _s1:	
   384  00C9                     	ds	14
   385  00D7                     _s0:	
   386  00D7                     	ds	14
   387  00E5                     _truck:	
   388  00E5                     	ds	4
   389  00E9                     _car:	
   390  00E9                     	ds	4
   391                           
   392                           	psect	bssBANK3
   393  0190                     __pbssBANK3:	
   394  0190                     _s3:	
   395  0190                     	ds	14
   396                           
   397                           	psect	inittext
   398  0811                     init_fetch0:	
   399                           ;	Called with low address in FSR and high address in W
   400                           
   401  0811  087E               	movf	btemp,w
   402  0812  008A               	movwf	10
   403  0813  087F               	movf	btemp+1,w
   404  0814  0082               	movwf	2
   405  0815                     init_ram0:	
   406                           ;Called with:
   407                           ;	high address of idata address in btemp 
   408                           ;	low address of idata address in btemp+1 
   409                           ;	low address of data in FSR
   410                           ;	high address + 1 of data in btemp-1
   411                           
   412  0815  120A  158A  2011  120A  158A  	fcall	init_fetch0
   413  081A  0080               	movwf	0
   414  081B  0A84               	incf	4,f
   415  081C  0804               	movf	4,w
   416  081D  067D               	xorwf	btemp+-1,w
   417  081E  1903               	btfsc	3,2
   418  081F  3400               	retlw	0
   419  0820  0AFF               	incf	btemp+1,f
   420  0821  1903               	btfsc	3,2
   421  0822  0AFE               	incf	btemp,f
   422  0823  2815               	goto	init_ram0
   423                           
   424                           	psect	clrtext
   425  17D1                     clear_ram0:	
   426                           ;	Called with FSR containing the base address, and
   427                           ;	W with the last address+1
   428                           
   429  17D1  0064               	clrwdt	;clear the watchdog before getting into this loop
   430  17D2                     clrloop0:	
   431  17D2  0180               	clrf	0	;clear RAM location pointed to by FSR
   432  17D3  0A84               	incf	4,f	;increment pointer
   433  17D4  0604               	xorwf	4,w	;XOR with final address
   434  17D5  1903               	btfsc	3,2	;have we reached the end yet?
   435  17D6  3400               	retlw	0	;all done for this memory range, return
   436  17D7  0604               	xorwf	4,w	;XOR again to restore value
   437  17D8  2FD2               	goto	clrloop0	;do the next byte
   438                           
   439                           	psect	cstackBANK3
   440  019E                     __pcstackBANK3:	
   441  019E                     ??_main:	
   442                           
   443                           ; 1 bytes @ 0x0
   444  019E                     	ds	13
   445                           
   446                           	psect	cstackCOMMON
   447  0070                     __pcstackCOMMON:	
   448  0070                     ?_init_ADC:	
   449  0070                     ?_ShowDigitsOnDisplay:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_bitParita:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_UpdateTimes:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_Conteggio:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_main:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?_UART_TxChar:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_UART_Read:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ??_UART_Read:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_conteggioVeicoli:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_ISR:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     Conteggio@_count:	
   480                           ; 1 bytes @ 0x0
   481                           
   482                           
   483                           ; 2 bytes @ 0x0
   484  0070                     	ds	2
   485  0072                     Conteggio@_motorcycle:	
   486                           
   487                           ; 1 bytes @ 0x2
   488  0072                     	ds	1
   489  0073                     Conteggio@_car:	
   490                           
   491                           ; 1 bytes @ 0x3
   492  0073                     	ds	1
   493  0074                     Conteggio@_truck:	
   494                           
   495                           ; 1 bytes @ 0x4
   496  0074                     	ds	1
   497  0075                     Conteggio@index:	
   498                           
   499                           ; 1 bytes @ 0x5
   500  0075                     	ds	1
   501  0076                     ??_Conteggio:	
   502                           
   503                           ; 1 bytes @ 0x6
   504  0076                     	ds	3
   505  0079                     ??_conteggioVeicoli:	
   506                           
   507                           ; 1 bytes @ 0x9
   508  0079                     	ds	4
   509  007D                     conteggioVeicoli@i:	
   510                           
   511                           ; 1 bytes @ 0xD
   512  007D                     	ds	1
   513                           
   514                           	psect	cstackBANK0
   515  0020                     __pcstackBANK0:	
   516  0020                     ??_ISR:	
   517                           
   518                           ; 1 bytes @ 0x0
   519  0020                     	ds	4
   520  0024                     ??_init_ADC:	
   521  0024                     ?_luciSemaforo:	
   522                           ; 1 bytes @ 0x4
   523                           
   524  0024                     ?_BuildByte:	
   525                           ; 1 bytes @ 0x4
   526                           
   527  0024                     ?_bitChange:	
   528                           ; 1 bytes @ 0x4
   529                           
   530  0024                     ??_UpdateTimes:	
   531                           ; 1 bytes @ 0x4
   532                           
   533  0024                     ?_SetDefaultTimers:	
   534                           ; 1 bytes @ 0x4
   535                           
   536  0024                     ??_UART_TxChar:	
   537                           ; 1 bytes @ 0x4
   538                           
   539  0024                     ?_SetDisplay:	
   540                           ; 1 bytes @ 0x4
   541                           
   542  0024                     ?___bmul:	
   543                           ; 1 bytes @ 0x4
   544                           
   545  0024                     ?_ADC_Read:	
   546                           ; 1 bytes @ 0x4
   547                           
   548  0024                     ?_GetTime:	
   549                           ; 2 bytes @ 0x4
   550                           
   551  0024                     ?___wmul:	
   552                           ; 2 bytes @ 0x4
   553                           
   554  0024                     ?___awmod:	
   555                           ; 2 bytes @ 0x4
   556                           
   557  0024                     ?___lmul:	
   558                           ; 2 bytes @ 0x4
   559                           
   560  0024                     ?___aldiv:	
   561                           ; 4 bytes @ 0x4
   562                           
   563  0024                     bitChange@n:	
   564                           ; 4 bytes @ 0x4
   565                           
   566  0024                     BuildByte@byte1:	
   567                           ; 1 bytes @ 0x4
   568                           
   569  0024                     GetTime@_dataFromGateway:	
   570                           ; 1 bytes @ 0x4
   571                           
   572  0024                     UART_TxChar@ch:	
   573                           ; 1 bytes @ 0x4
   574                           
   575  0024                     SetDisplay@d2:	
   576                           ; 1 bytes @ 0x4
   577                           
   578  0024                     luciSemaforo@lux:	
   579                           ; 1 bytes @ 0x4
   580                           
   581  0024                     ___bmul@multiplicand:	
   582                           ; 1 bytes @ 0x4
   583                           
   584  0024                     SetDefaultTimers@rosso:	
   585                           ; 1 bytes @ 0x4
   586                           
   587  0024                     ___wmul@multiplier:	
   588                           ; 2 bytes @ 0x4
   589                           
   590  0024                     ___awmod@divisor:	
   591                           ; 2 bytes @ 0x4
   592                           
   593  0024                     ___lmul@multiplier:	
   594                           ; 2 bytes @ 0x4
   595                           
   596  0024                     ___aldiv@divisor:	
   597                           ; 4 bytes @ 0x4
   598                           
   599                           
   600                           ; 4 bytes @ 0x4
   601  0024                     	ds	1
   602  0025                     ??_luciSemaforo:	
   603  0025                     ??_bitChange:	
   604                           ; 1 bytes @ 0x5
   605                           
   606  0025                     ??___bmul:	
   607                           ; 1 bytes @ 0x5
   608                           
   609  0025                     BuildByte@valore:	
   610                           ; 1 bytes @ 0x5
   611                           
   612  0025                     SetDisplay@d3:	
   613                           ; 1 bytes @ 0x5
   614                           
   615                           
   616                           ; 1 bytes @ 0x5
   617  0025                     	ds	1
   618  0026                     ??_ADC_Read:	
   619  0026                     ??_BuildByte:	
   620                           ; 1 bytes @ 0x6
   621                           
   622  0026                     ??_GetTime:	
   623                           ; 1 bytes @ 0x6
   624                           
   625  0026                     SetDisplay@value:	
   626                           ; 1 bytes @ 0x6
   627                           
   628  0026                     ___bmul@product:	
   629                           ; 1 bytes @ 0x6
   630                           
   631  0026                     SetDefaultTimers@verde:	
   632                           ; 1 bytes @ 0x6
   633                           
   634  0026                     ___wmul@multiplicand:	
   635                           ; 2 bytes @ 0x6
   636                           
   637  0026                     ___awmod@dividend:	
   638                           ; 2 bytes @ 0x6
   639                           
   640                           
   641                           ; 2 bytes @ 0x6
   642  0026                     	ds	1
   643  0027                     ??_SetDisplay:	
   644  0027                     bitChange@dato:	
   645                           ; 1 bytes @ 0x7
   646                           
   647  0027                     ADC_Read@canale:	
   648                           ; 1 bytes @ 0x7
   649                           
   650  0027                     SetDisplay@d1:	
   651                           ; 1 bytes @ 0x7
   652                           
   653  0027                     luciSemaforo@index:	
   654                           ; 1 bytes @ 0x7
   655                           
   656  0027                     ___bmul@multiplier:	
   657                           ; 1 bytes @ 0x7
   658                           
   659                           
   660                           ; 1 bytes @ 0x7
   661  0027                     	ds	1
   662  0028                     ??_bitParita:	
   663  0028                     ??___wmul:	
   664                           ; 1 bytes @ 0x8
   665                           
   666  0028                     ??___awmod:	
   667                           ; 1 bytes @ 0x8
   668                           
   669  0028                     BuildByte@byte0:	
   670                           ; 1 bytes @ 0x8
   671                           
   672  0028                     GetTime@index:	
   673                           ; 1 bytes @ 0x8
   674                           
   675  0028                     SetDefaultTimers@giallo:	
   676                           ; 1 bytes @ 0x8
   677                           
   678  0028                     ___wmul@product:	
   679                           ; 2 bytes @ 0x8
   680                           
   681  0028                     ___lmul@multiplicand:	
   682                           ; 2 bytes @ 0x8
   683                           
   684  0028                     ___aldiv@dividend:	
   685                           ; 4 bytes @ 0x8
   686                           
   687                           
   688                           ; 4 bytes @ 0x8
   689  0028                     	ds	1
   690  0029                     GetTime@shortInt:	
   691  0029                     ___awmod@counter:	
   692                           ; 1 bytes @ 0x9
   693                           
   694  0029                     BuildByte@txByte:	
   695                           ; 1 bytes @ 0x9
   696                           
   697                           
   698                           ; 5 bytes @ 0x9
   699  0029                     	ds	1
   700  002A                     SetDefaultTimers@_semafori:	
   701  002A                     ___awmod@sign:	
   702                           ; 1 bytes @ 0xA
   703                           
   704  002A                     GetTime@tmp:	
   705                           ; 1 bytes @ 0xA
   706                           
   707                           
   708                           ; 2 bytes @ 0xA
   709  002A                     	ds	1
   710  002B                     ??_ShowDigitsOnDisplay:	
   711  002B                     ??_SetDefaultTimers:	
   712                           ; 1 bytes @ 0xB
   713                           
   714  002B                     ?___awdiv:	
   715                           ; 1 bytes @ 0xB
   716                           
   717  002B                     ___awdiv@divisor:	
   718                           ; 2 bytes @ 0xB
   719                           
   720                           
   721                           ; 2 bytes @ 0xB
   722  002B                     	ds	1
   723  002C                     ?_SetReceivedTimes:	
   724  002C                     ??___lmul:	
   725                           ; 1 bytes @ 0xC
   726                           
   727  002C                     ??___aldiv:	
   728                           ; 1 bytes @ 0xC
   729                           
   730  002C                     bitParita@sommaRow:	
   731                           ; 1 bytes @ 0xC
   732                           
   733  002C                     SetReceivedTimes@_semafori:	
   734                           ; 1 bytes @ 0xC
   735                           
   736                           
   737                           ; 1 bytes @ 0xC
   738  002C                     	ds	1
   739  002D                     ??_SetReceivedTimes:	
   740  002D                     bitParita@sommaColumn:	
   741                           ; 1 bytes @ 0xD
   742                           
   743  002D                     ___aldiv@counter:	
   744                           ; 1 bytes @ 0xD
   745                           
   746  002D                     ___awdiv@dividend:	
   747                           ; 1 bytes @ 0xD
   748                           
   749  002D                     ___lmul@product:	
   750                           ; 2 bytes @ 0xD
   751                           
   752                           
   753                           ; 4 bytes @ 0xD
   754  002D                     	ds	1
   755  002E                     bitParita@errorColumn:	
   756  002E                     BuildByte@sommaRow:	
   757                           ; 1 bytes @ 0xE
   758                           
   759  002E                     ___aldiv@sign:	
   760                           ; 1 bytes @ 0xE
   761                           
   762                           
   763                           ; 1 bytes @ 0xE
   764  002E                     	ds	1
   765  002F                     ??___awdiv:	
   766  002F                     bitParita@error:	
   767                           ; 1 bytes @ 0xF
   768                           
   769  002F                     BuildByte@sommaColumn:	
   770                           ; 1 bytes @ 0xF
   771                           
   772  002F                     ___aldiv@quotient:	
   773                           ; 1 bytes @ 0xF
   774                           
   775                           
   776                           ; 4 bytes @ 0xF
   777  002F                     	ds	1
   778  0030                     bitParita@errorRow:	
   779  0030                     ___awdiv@counter:	
   780                           ; 1 bytes @ 0x10
   781                           
   782  0030                     BuildByte@y:	
   783                           ; 1 bytes @ 0x10
   784                           
   785                           
   786                           ; 2 bytes @ 0x10
   787  0030                     	ds	1
   788  0031                     ?_rand:	
   789  0031                     ___awdiv@sign:	
   790                           ; 2 bytes @ 0x11
   791                           
   792  0031                     bitParita@y:	
   793                           ; 1 bytes @ 0x11
   794                           
   795                           
   796                           ; 2 bytes @ 0x11
   797  0031                     	ds	1
   798  0032                     SetDefaultTimers@l:	
   799  0032                     BuildByte@y_360:	
   800                           ; 1 bytes @ 0x12
   801                           
   802  0032                     ___awdiv@quotient:	
   803                           ; 2 bytes @ 0x12
   804                           
   805                           
   806                           ; 2 bytes @ 0x12
   807  0032                     	ds	1
   808  0033                     ?_UART_Init:	
   809  0033                     ??_rand:	
   810                           ; 1 bytes @ 0x13
   811                           
   812  0033                     SetDefaultTimers@i:	
   813                           ; 1 bytes @ 0x13
   814                           
   815  0033                     bitParita@y_348:	
   816                           ; 1 bytes @ 0x13
   817                           
   818  0033                     UART_Init@baudrate:	
   819                           ; 2 bytes @ 0x13
   820                           
   821                           
   822                           ; 2 bytes @ 0x13
   823  0033                     	ds	1
   824  0034                     ?_GetDigits:	
   825  0034                     ?_map:	
   826                           ; 1 bytes @ 0x14
   827                           
   828  0034                     GetDigits@decine:	
   829                           ; 2 bytes @ 0x14
   830                           
   831  0034                     map@x:	
   832                           ; 1 bytes @ 0x14
   833                           
   834  0034                     BuildByte@i:	
   835                           ; 2 bytes @ 0x14
   836                           
   837                           
   838                           ; 2 bytes @ 0x14
   839  0034                     	ds	1
   840  0035                     ??_UART_Init:	
   841  0035                     GetDigits@unita:	
   842                           ; 1 bytes @ 0x15
   843                           
   844  0035                     bitParita@rx:	
   845                           ; 1 bytes @ 0x15
   846                           
   847  0035                     SetReceivedTimes@semaforoId:	
   848                           ; 1 bytes @ 0x15
   849                           
   850                           
   851                           ; 1 bytes @ 0x15
   852  0035                     	ds	1
   853  0036                     UpdateTimes@i:	
   854  0036                     SetReceivedTimes@colorId:	
   855                           ; 1 bytes @ 0x16
   856                           
   857  0036                     map@in_min:	
   858                           ; 1 bytes @ 0x16
   859                           
   860  0036                     GetDigits@Time:	
   861                           ; 2 bytes @ 0x16
   862                           
   863  0036                     bitParita@i:	
   864                           ; 2 bytes @ 0x16
   865                           
   866  0036                     BuildByte@i_359:	
   867                           ; 2 bytes @ 0x16
   868                           
   869                           
   870                           ; 2 bytes @ 0x16
   871  0036                     	ds	1
   872  0037                     UpdateTimes@_semafori:	
   873  0037                     SetReceivedTimes@_dataFromGateway:	
   874                           ; 1 bytes @ 0x17
   875                           
   876                           
   877                           ; 1 bytes @ 0x17
   878  0037                     	ds	1
   879  0038                     ?_sendByte:	
   880  0038                     ??_GetDigits:	
   881                           ; 1 bytes @ 0x18
   882                           
   883  0038                     UpdateTimes@l:	
   884                           ; 1 bytes @ 0x18
   885                           
   886  0038                     SetReceivedTimes@index:	
   887                           ; 1 bytes @ 0x18
   888                           
   889  0038                     sendByte@byte1:	
   890                           ; 1 bytes @ 0x18
   891                           
   892  0038                     map@in_max:	
   893                           ; 1 bytes @ 0x18
   894                           
   895  0038                     bitParita@i_347:	
   896                           ; 2 bytes @ 0x18
   897                           
   898                           
   899                           ; 2 bytes @ 0x18
   900  0038                     	ds	1
   901  0039                     SetReceivedTimes@i:	
   902  0039                     sendByte@valore:	
   903                           ; 1 bytes @ 0x19
   904                           
   905  0039                     _GetDigits$1214:	
   906                           ; 1 bytes @ 0x19
   907                           
   908                           
   909                           ; 2 bytes @ 0x19
   910  0039                     	ds	1
   911  003A                     ??_sendByte:	
   912  003A                     map@out_min:	
   913                           ; 1 bytes @ 0x1A
   914                           
   915                           
   916                           ; 2 bytes @ 0x1A
   917  003A                     	ds	1
   918  003B                     GetDigits@centinaia:	
   919                           
   920                           ; 1 bytes @ 0x1B
   921  003B                     	ds	1
   922  003C                     map@out_max:	
   923                           
   924                           ; 2 bytes @ 0x1C
   925  003C                     	ds	1
   926  003D                     sendByte@byte0:	
   927                           
   928                           ; 1 bytes @ 0x1D
   929  003D                     	ds	1
   930  003E                     ??_map:	
   931  003E                     sendByte@txByte:	
   932                           ; 1 bytes @ 0x1E
   933                           
   934                           
   935                           ; 1 bytes @ 0x1E
   936  003E                     	ds	1
   937  003F                     sendByte@i:	
   938                           
   939                           ; 1 bytes @ 0x1F
   940  003F                     	ds	1
   941  0040                     main@randomMoto:	
   942                           
   943                           ; 1 bytes @ 0x20
   944  0040                     	ds	1
   945  0041                     main@randomCar:	
   946                           
   947                           ; 1 bytes @ 0x21
   948  0041                     	ds	1
   949  0042                     main@randomTruck:	
   950                           
   951                           ; 1 bytes @ 0x22
   952  0042                     	ds	1
   953  0043                     main@i_490:	
   954                           
   955                           ; 1 bytes @ 0x23
   956  0043                     	ds	1
   957  0044                     main@i_492:	
   958                           
   959                           ; 1 bytes @ 0x24
   960  0044                     	ds	1
   961  0045                     main@i_489:	
   962                           
   963                           ; 2 bytes @ 0x25
   964  0045                     	ds	2
   965  0047                     main@lux_select:	
   966                           
   967                           ; 1 bytes @ 0x27
   968  0047                     	ds	1
   969  0048                     main@i_495:	
   970                           
   971                           ; 1 bytes @ 0x28
   972  0048                     	ds	1
   973  0049                     main@i:	
   974                           
   975                           ; 1 bytes @ 0x29
   976  0049                     	ds	1
   977                           
   978                           	psect	maintext
   979  003F                     __pmaintext:	
   980 ;;
   981 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
   982 ;;
   983 ;; *************** function _main *****************
   984 ;; Defined at:
   985 ;;		line 127 in file "main.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;		None
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  randomTruck     1   34[BANK0 ] unsigned char 
   990 ;;  randomCar       1   33[BANK0 ] unsigned char 
   991 ;;  randomMoto      1   32[BANK0 ] unsigned char 
   992 ;;  lux_select      1   39[BANK0 ] unsigned char 
   993 ;;  i               1   36[BANK0 ] unsigned char 
   994 ;;  i               1   35[BANK0 ] unsigned char 
   995 ;;  i               2   37[BANK0 ] int 
   996 ;;  i               1   41[BANK0 ] unsigned char 
   997 ;;  i               1   40[BANK0 ] unsigned char 
   998 ;; Return value:  Size  Location     Type
   999 ;;                  1    wreg      void 
  1000 ;; Registers used:
  1001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1002 ;; Tracked objects:
  1003 ;;		On entry : B00/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1007 ;;      Params:         0       0       0       0       0
  1008 ;;      Locals:         0      10       0       0       0
  1009 ;;      Temps:          0       0       0      13       0
  1010 ;;      Totals:         0      10       0      13       0
  1011 ;;Total ram usage:       23 bytes
  1012 ;; Hardware stack levels required when called:    5
  1013 ;; This function calls:
  1014 ;;		_ADC_Read
  1015 ;;		_GetDigits
  1016 ;;		_SetDefaultTimers
  1017 ;;		_SetReceivedTimes
  1018 ;;		_ShowDigitsOnDisplay
  1019 ;;		_UART_Init
  1020 ;;		_UpdateTimes
  1021 ;;		_bitParita
  1022 ;;		_init_ADC
  1023 ;;		_luciSemaforo
  1024 ;;		_map
  1025 ;;		_rand
  1026 ;;		_sendByte
  1027 ;; This function is called by:
  1028 ;;		Startup code after reset
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           
  1033                           ;psect for function _main
  1034  003F                     _main:	
  1035  003F                     l4510:	
  1036                           ;incstack = 0
  1037                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1038                           
  1039                           
  1040                           ;main.c: 129:     TRISB = 0x38;
  1041  003F  3038               	movlw	56
  1042  0040  1683               	bsf	3,5	;RP0=1, select bank1
  1043  0041  1303               	bcf	3,6	;RP1=0, select bank1
  1044  0042  0086               	movwf	6	;volatile
  1045                           
  1046                           ;main.c: 130:     TRISC = 0x80;
  1047  0043  3080               	movlw	128
  1048  0044  0087               	movwf	7	;volatile
  1049  0045                     l4512:	
  1050                           
  1051                           ;main.c: 131:     TRISD = 0x00;
  1052  0045  0188               	clrf	8	;volatile
  1053  0046                     l4514:	
  1054                           
  1055                           ;main.c: 132:     TRISE = 0x01;
  1056  0046  3001               	movlw	1
  1057  0047  0089               	movwf	9	;volatile
  1058  0048                     l4516:	
  1059                           
  1060                           ;main.c: 133:     INTCON = 0xE0;
  1061  0048  30E0               	movlw	224
  1062  0049  008B               	movwf	11	;volatile
  1063  004A                     l4518:	
  1064                           
  1065                           ;main.c: 134:     OPTION_REG = 0x04;
  1066  004A  3004               	movlw	4
  1067  004B  0081               	movwf	1	;volatile
  1068  004C                     l4520:	
  1069                           
  1070                           ;main.c: 135:     TMR0 = 6;
  1071  004C  3006               	movlw	6
  1072  004D  1283               	bcf	3,5	;RP0=0, select bank0
  1073  004E  1303               	bcf	3,6	;RP1=0, select bank0
  1074  004F  0081               	movwf	1	;volatile
  1075  0050                     l4522:	
  1076                           
  1077                           ;main.c: 136:     T1CON = 0x31;
  1078  0050  3031               	movlw	49
  1079  0051  0090               	movwf	16	;volatile
  1080  0052                     l4524:	
  1081                           
  1082                           ;main.c: 138:     TMR1H = 60;
  1083  0052  303C               	movlw	60
  1084  0053  008F               	movwf	15	;volatile
  1085  0054                     l4526:	
  1086                           
  1087                           ;main.c: 139:     TMR1L = 176;
  1088  0054  30B0               	movlw	176
  1089  0055  008E               	movwf	14	;volatile
  1090  0056                     l4528:	
  1091                           
  1092                           ;main.c: 142:     init_ADC();
  1093  0056  160A  118A  27ED  120A  118A  	fcall	_init_ADC
  1094  005B                     l4530:	
  1095                           
  1096                           ;main.c: 143:     UART_Init(9600);
  1097  005B  3080               	movlw	128
  1098  005C  1283               	bcf	3,5	;RP0=0, select bank0
  1099  005D  1303               	bcf	3,6	;RP1=0, select bank0
  1100  005E  00B3               	movwf	UART_Init@baudrate
  1101  005F  3025               	movlw	37
  1102  0060  00B4               	movwf	UART_Init@baudrate+1
  1103  0061  120A  158A  211D  120A  118A  	fcall	_UART_Init
  1104  0066                     l4532:	
  1105                           
  1106                           ;main.c: 144:     SetDefaultTimers(6, 4, 2, Semafori);
  1107  0066  3006               	movlw	6
  1108  0067  1283               	bcf	3,5	;RP0=0, select bank0
  1109  0068  1303               	bcf	3,6	;RP1=0, select bank0
  1110  0069  00A4               	movwf	SetDefaultTimers@rosso
  1111  006A  3000               	movlw	0
  1112  006B  00A5               	movwf	SetDefaultTimers@rosso+1
  1113  006C  3004               	movlw	4
  1114  006D  00A6               	movwf	SetDefaultTimers@verde
  1115  006E  3000               	movlw	0
  1116  006F  00A7               	movwf	SetDefaultTimers@verde+1
  1117  0070  3002               	movlw	2
  1118  0071  00A8               	movwf	SetDefaultTimers@giallo
  1119  0072  3000               	movlw	0
  1120  0073  00A9               	movwf	SetDefaultTimers@giallo+1
  1121  0074  3062               	movlw	(low (_Semafori| 0))& (0+255)
  1122  0075  1683               	bsf	3,5	;RP0=1, select bank3
  1123  0076  1703               	bsf	3,6	;RP1=1, select bank3
  1124  0077  009E               	movwf	??_main^(0+384)
  1125  0078  081E               	movf	??_main^(0+384),w
  1126  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1127  007A  1303               	bcf	3,6	;RP1=0, select bank0
  1128  007B  00AA               	movwf	SetDefaultTimers@_semafori
  1129  007C  120A  118A  257C  120A  118A  	fcall	_SetDefaultTimers
  1130  0081                     l4534:	
  1131                           
  1132                           ;main.c: 146:     PORTCbits.RC0 = 0;
  1133  0081  1283               	bcf	3,5	;RP0=0, select bank0
  1134  0082  1303               	bcf	3,6	;RP1=0, select bank0
  1135  0083  1007               	bcf	7,0	;volatile
  1136  0084                     l4536:	
  1137                           
  1138                           ;main.c: 147:     PORTBbits.RB7 = 0;
  1139  0084  1386               	bcf	6,7	;volatile
  1140  0085                     l4538:	
  1141                           
  1142                           ;main.c: 148:     PORTCbits.RC3 = 0;
  1143  0085  1187               	bcf	7,3	;volatile
  1144  0086                     l4540:	
  1145                           
  1146                           ;main.c: 149:     PORTBbits.RB6 = 0;
  1147  0086  1306               	bcf	6,6	;volatile
  1148  0087                     l4542:	
  1149                           
  1150                           ;main.c: 150:     PORTCbits.RC1 = 0;
  1151  0087  1087               	bcf	7,1	;volatile
  1152  0088                     l4544:	
  1153                           
  1154                           ;main.c: 151:     PORTBbits.RB1 = 0;
  1155  0088  1086               	bcf	6,1	;volatile
  1156  0089                     l4546:	
  1157                           
  1158                           ;main.c: 154:     {;main.c: 156:         if (readGateway.Bit)
  1159  0089  1C55               	btfss	_readGateway,0
  1160  008A  288C               	goto	u4451
  1161  008B  288D               	goto	u4450
  1162  008C                     u4451:	
  1163  008C  2BC2               	goto	l238
  1164  008D                     u4450:	
  1165  008D  2BAD               	goto	l4640
  1166  008E                     l240:	
  1167                           ;main.c: 159:             {;main.c: 160:             case 0x08:
  1168                           
  1169                           
  1170                           ;main.c: 161:                 readGatewayDone.Bit = 1;
  1171  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1172  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1173  0090  1456               	bsf	_readGatewayDone,0
  1174                           
  1175                           ;main.c: 162:                 readGateway.Bit = 0;
  1176  0091  1055               	bcf	_readGateway,0
  1177  0092                     l4550:	
  1178                           
  1179                           ;main.c: 164:                 for (unsigned char i = 0; i < 4; i++)
  1180  0092  01C9               	clrf	main@i
  1181  0093                     l4556:	
  1182                           
  1183                           ;main.c: 165:                 {;main.c: 167:                     unsigned char randomMot
      +                          o = (char)rand();
  1184  0093  120A  158A  219D  120A  118A  	fcall	_rand
  1185  0098  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0099  1303               	bcf	3,6	;RP1=0, select bank0
  1187  009A  0831               	movf	?_rand,w
  1188  009B  1683               	bsf	3,5	;RP0=1, select bank3
  1189  009C  1703               	bsf	3,6	;RP1=1, select bank3
  1190  009D  009E               	movwf	??_main^(0+384)
  1191  009E  081E               	movf	??_main^(0+384),w
  1192  009F  1283               	bcf	3,5	;RP0=0, select bank0
  1193  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  1194  00A1  00C0               	movwf	main@randomMoto
  1195                           
  1196                           ;main.c: 168:                     unsigned char randomCar = (char)rand();
  1197  00A2  120A  158A  219D  120A  118A  	fcall	_rand
  1198  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  1199  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  1200  00A9  0831               	movf	?_rand,w
  1201  00AA  1683               	bsf	3,5	;RP0=1, select bank3
  1202  00AB  1703               	bsf	3,6	;RP1=1, select bank3
  1203  00AC  009E               	movwf	??_main^(0+384)
  1204  00AD  081E               	movf	??_main^(0+384),w
  1205  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1206  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  1207  00B0  00C1               	movwf	main@randomCar
  1208                           
  1209                           ;main.c: 169:                     unsigned char randomTruck = (char)rand();
  1210  00B1  120A  158A  219D  120A  118A  	fcall	_rand
  1211  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1212  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  1213  00B8  0831               	movf	?_rand,w
  1214  00B9  1683               	bsf	3,5	;RP0=1, select bank3
  1215  00BA  1703               	bsf	3,6	;RP1=1, select bank3
  1216  00BB  009E               	movwf	??_main^(0+384)
  1217  00BC  081E               	movf	??_main^(0+384),w
  1218  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1219  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  1220  00BF  00C2               	movwf	main@randomTruck
  1221  00C0                     l4558:	
  1222                           
  1223                           ;main.c: 170:                     if (randomMoto < 255)
  1224  00C0  0A40               	incf	main@randomMoto,w
  1225  00C1  1903               	btfsc	3,2
  1226  00C2  28C4               	goto	u4461
  1227  00C3  28C5               	goto	u4460
  1228  00C4                     u4461:	
  1229  00C4  28D3               	goto	l4562
  1230  00C5                     u4460:	
  1231  00C5                     l4560:	
  1232                           
  1233                           ;main.c: 171:                     {;main.c: 172:                         motorcycle[i] =
      +                           randomMoto;
  1234  00C5  0840               	movf	main@randomMoto,w
  1235  00C6  1683               	bsf	3,5	;RP0=1, select bank3
  1236  00C7  1703               	bsf	3,6	;RP1=1, select bank3
  1237  00C8  009E               	movwf	??_main^(0+384)
  1238  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  1239  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  1240  00CB  0849               	movf	main@i,w
  1241  00CC  3E57               	addlw	(low (_motorcycle| 0))& (0+255)
  1242  00CD  0084               	movwf	4
  1243  00CE  1683               	bsf	3,5	;RP0=1, select bank3
  1244  00CF  1703               	bsf	3,6	;RP1=1, select bank3
  1245  00D0  081E               	movf	??_main^(0+384),w
  1246  00D1  1383               	bcf	3,7	;select IRP bank0
  1247  00D2  0080               	movwf	0
  1248  00D3                     l4562:	
  1249                           
  1250                           ;main.c: 174:                     if (randomCar < 255)
  1251  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1252  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  1253  00D5  0A41               	incf	main@randomCar,w
  1254  00D6  1903               	btfsc	3,2
  1255  00D7  28D9               	goto	u4471
  1256  00D8  28DA               	goto	u4470
  1257  00D9                     u4471:	
  1258  00D9  28E8               	goto	l4566
  1259  00DA                     u4470:	
  1260  00DA                     l4564:	
  1261                           
  1262                           ;main.c: 175:                     {;main.c: 176:                         car[i] = random
      +                          Car;
  1263  00DA  0841               	movf	main@randomCar,w
  1264  00DB  1683               	bsf	3,5	;RP0=1, select bank3
  1265  00DC  1703               	bsf	3,6	;RP1=1, select bank3
  1266  00DD  009E               	movwf	??_main^(0+384)
  1267  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  1268  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  1269  00E0  0849               	movf	main@i,w
  1270  00E1  3EE9               	addlw	(low (_car| 0))& (0+255)
  1271  00E2  0084               	movwf	4
  1272  00E3  1683               	bsf	3,5	;RP0=1, select bank3
  1273  00E4  1703               	bsf	3,6	;RP1=1, select bank3
  1274  00E5  081E               	movf	??_main^(0+384),w
  1275  00E6  1383               	bcf	3,7	;select IRP bank1
  1276  00E7  0080               	movwf	0
  1277  00E8                     l4566:	
  1278                           
  1279                           ;main.c: 178:                     if (randomTruck < 255)
  1280  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1281  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  1282  00EA  0A42               	incf	main@randomTruck,w
  1283  00EB  1903               	btfsc	3,2
  1284  00EC  28EE               	goto	u4481
  1285  00ED  28EF               	goto	u4480
  1286  00EE                     u4481:	
  1287  00EE  2A2A               	goto	l4580
  1288  00EF                     u4480:	
  1289  00EF                     l4568:	
  1290                           
  1291                           ;main.c: 179:                     {;main.c: 180:                         truck[i] = rand
      +                          omTruck;
  1292  00EF  0842               	movf	main@randomTruck,w
  1293  00F0  1683               	bsf	3,5	;RP0=1, select bank3
  1294  00F1  1703               	bsf	3,6	;RP1=1, select bank3
  1295  00F2  009E               	movwf	??_main^(0+384)
  1296  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1297  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1298  00F5  0849               	movf	main@i,w
  1299  00F6  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1300  00F7  0084               	movwf	4
  1301  00F8  1683               	bsf	3,5	;RP0=1, select bank3
  1302  00F9  1703               	bsf	3,6	;RP1=1, select bank3
  1303  00FA  081E               	movf	??_main^(0+384),w
  1304  00FB  1383               	bcf	3,7	;select IRP bank1
  1305  00FC  0080               	movwf	0
  1306  00FD  2A2A               	goto	l4580
  1307  00FE                     l4570:	
  1308                           
  1309                           ;main.c: 187:                         sendByte(0x03, 0x01, motorcycle[i]);
  1310  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1311  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1312  0100  01B8               	clrf	sendByte@byte1
  1313  0101  0AB8               	incf	sendByte@byte1,f
  1314  0102  0849               	movf	main@i,w
  1315  0103  3E57               	addlw	(low (_motorcycle| 0))& (0+255)
  1316  0104  0084               	movwf	4
  1317  0105  1383               	bcf	3,7	;select IRP bank0
  1318  0106  0800               	movf	0,w
  1319  0107  1683               	bsf	3,5	;RP0=1, select bank3
  1320  0108  1703               	bsf	3,6	;RP1=1, select bank3
  1321  0109  009E               	movwf	??_main^(0+384)
  1322  010A  081E               	movf	??_main^(0+384),w
  1323  010B  1283               	bcf	3,5	;RP0=0, select bank0
  1324  010C  1303               	bcf	3,6	;RP1=0, select bank0
  1325  010D  00B9               	movwf	sendByte@valore
  1326  010E  3003               	movlw	3
  1327  010F  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1328                           
  1329                           ;main.c: 188:                         sendByte(0x03, 0x02, car[i]);
  1330  0114  3002               	movlw	2
  1331  0115  1683               	bsf	3,5	;RP0=1, select bank3
  1332  0116  1703               	bsf	3,6	;RP1=1, select bank3
  1333  0117  009E               	movwf	??_main^(0+384)
  1334  0118  081E               	movf	??_main^(0+384),w
  1335  0119  1283               	bcf	3,5	;RP0=0, select bank0
  1336  011A  1303               	bcf	3,6	;RP1=0, select bank0
  1337  011B  00B8               	movwf	sendByte@byte1
  1338  011C  0849               	movf	main@i,w
  1339  011D  3EE9               	addlw	(low (_car| 0))& (0+255)
  1340  011E  0084               	movwf	4
  1341  011F  1383               	bcf	3,7	;select IRP bank1
  1342  0120  0800               	movf	0,w
  1343  0121  1683               	bsf	3,5	;RP0=1, select bank3
  1344  0122  1703               	bsf	3,6	;RP1=1, select bank3
  1345  0123  009F               	movwf	(??_main+1)^(0+384)
  1346  0124  081F               	movf	(??_main+1)^(0+384),w
  1347  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1348  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1349  0127  00B9               	movwf	sendByte@valore
  1350  0128  3003               	movlw	3
  1351  0129  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1352                           
  1353                           ;main.c: 189:                         sendByte(0x03, 0x03, truck[i]);
  1354  012E  3003               	movlw	3
  1355  012F  1683               	bsf	3,5	;RP0=1, select bank3
  1356  0130  1703               	bsf	3,6	;RP1=1, select bank3
  1357  0131  009E               	movwf	??_main^(0+384)
  1358  0132  081E               	movf	??_main^(0+384),w
  1359  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1360  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1361  0135  00B8               	movwf	sendByte@byte1
  1362  0136  0849               	movf	main@i,w
  1363  0137  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1364  0138  0084               	movwf	4
  1365  0139  1383               	bcf	3,7	;select IRP bank1
  1366  013A  0800               	movf	0,w
  1367  013B  1683               	bsf	3,5	;RP0=1, select bank3
  1368  013C  1703               	bsf	3,6	;RP1=1, select bank3
  1369  013D  009F               	movwf	(??_main+1)^(0+384)
  1370  013E  081F               	movf	(??_main+1)^(0+384),w
  1371  013F  1283               	bcf	3,5	;RP0=0, select bank0
  1372  0140  1303               	bcf	3,6	;RP1=0, select bank0
  1373  0141  00B9               	movwf	sendByte@valore
  1374  0142  3003               	movlw	3
  1375  0143  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1376                           
  1377                           ;main.c: 190:                         break;
  1378  0148  2A44               	goto	l4582
  1379  0149                     l4572:	
  1380                           
  1381                           ;main.c: 192:                         sendByte(0x05, 0x01, motorcycle[i]);
  1382  0149  1283               	bcf	3,5	;RP0=0, select bank0
  1383  014A  1303               	bcf	3,6	;RP1=0, select bank0
  1384  014B  01B8               	clrf	sendByte@byte1
  1385  014C  0AB8               	incf	sendByte@byte1,f
  1386  014D  0849               	movf	main@i,w
  1387  014E  3E57               	addlw	(low (_motorcycle| 0))& (0+255)
  1388  014F  0084               	movwf	4
  1389  0150  1383               	bcf	3,7	;select IRP bank0
  1390  0151  0800               	movf	0,w
  1391  0152  1683               	bsf	3,5	;RP0=1, select bank3
  1392  0153  1703               	bsf	3,6	;RP1=1, select bank3
  1393  0154  009E               	movwf	??_main^(0+384)
  1394  0155  081E               	movf	??_main^(0+384),w
  1395  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1396  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1397  0158  00B9               	movwf	sendByte@valore
  1398  0159  3005               	movlw	5
  1399  015A  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1400                           
  1401                           ;main.c: 193:                         sendByte(0x05, 0x02, car[i]);
  1402  015F  3002               	movlw	2
  1403  0160  1683               	bsf	3,5	;RP0=1, select bank3
  1404  0161  1703               	bsf	3,6	;RP1=1, select bank3
  1405  0162  009E               	movwf	??_main^(0+384)
  1406  0163  081E               	movf	??_main^(0+384),w
  1407  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1408  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1409  0166  00B8               	movwf	sendByte@byte1
  1410  0167  0849               	movf	main@i,w
  1411  0168  3EE9               	addlw	(low (_car| 0))& (0+255)
  1412  0169  0084               	movwf	4
  1413  016A  1383               	bcf	3,7	;select IRP bank1
  1414  016B  0800               	movf	0,w
  1415  016C  1683               	bsf	3,5	;RP0=1, select bank3
  1416  016D  1703               	bsf	3,6	;RP1=1, select bank3
  1417  016E  009F               	movwf	(??_main+1)^(0+384)
  1418  016F  081F               	movf	(??_main+1)^(0+384),w
  1419  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1420  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1421  0172  00B9               	movwf	sendByte@valore
  1422  0173  3005               	movlw	5
  1423  0174  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1424                           
  1425                           ;main.c: 194:                         sendByte(0x05, 0x03, truck[i]);
  1426  0179  3003               	movlw	3
  1427  017A  1683               	bsf	3,5	;RP0=1, select bank3
  1428  017B  1703               	bsf	3,6	;RP1=1, select bank3
  1429  017C  009E               	movwf	??_main^(0+384)
  1430  017D  081E               	movf	??_main^(0+384),w
  1431  017E  1283               	bcf	3,5	;RP0=0, select bank0
  1432  017F  1303               	bcf	3,6	;RP1=0, select bank0
  1433  0180  00B8               	movwf	sendByte@byte1
  1434  0181  0849               	movf	main@i,w
  1435  0182  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1436  0183  0084               	movwf	4
  1437  0184  1383               	bcf	3,7	;select IRP bank1
  1438  0185  0800               	movf	0,w
  1439  0186  1683               	bsf	3,5	;RP0=1, select bank3
  1440  0187  1703               	bsf	3,6	;RP1=1, select bank3
  1441  0188  009F               	movwf	(??_main+1)^(0+384)
  1442  0189  081F               	movf	(??_main+1)^(0+384),w
  1443  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1444  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1445  018C  00B9               	movwf	sendByte@valore
  1446  018D  3005               	movlw	5
  1447  018E  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1448                           
  1449                           ;main.c: 195:                         break;
  1450  0193  2A44               	goto	l4582
  1451  0194                     l4574:	
  1452                           
  1453                           ;main.c: 197:                         sendByte(0x07, 0x01, motorcycle[i]);
  1454  0194  1283               	bcf	3,5	;RP0=0, select bank0
  1455  0195  1303               	bcf	3,6	;RP1=0, select bank0
  1456  0196  01B8               	clrf	sendByte@byte1
  1457  0197  0AB8               	incf	sendByte@byte1,f
  1458  0198  0849               	movf	main@i,w
  1459  0199  3E57               	addlw	(low (_motorcycle| 0))& (0+255)
  1460  019A  0084               	movwf	4
  1461  019B  1383               	bcf	3,7	;select IRP bank0
  1462  019C  0800               	movf	0,w
  1463  019D  1683               	bsf	3,5	;RP0=1, select bank3
  1464  019E  1703               	bsf	3,6	;RP1=1, select bank3
  1465  019F  009E               	movwf	??_main^(0+384)
  1466  01A0  081E               	movf	??_main^(0+384),w
  1467  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1468  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1469  01A3  00B9               	movwf	sendByte@valore
  1470  01A4  3007               	movlw	7
  1471  01A5  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1472                           
  1473                           ;main.c: 198:                         sendByte(0x07, 0x02, car[i]);
  1474  01AA  3002               	movlw	2
  1475  01AB  1683               	bsf	3,5	;RP0=1, select bank3
  1476  01AC  1703               	bsf	3,6	;RP1=1, select bank3
  1477  01AD  009E               	movwf	??_main^(0+384)
  1478  01AE  081E               	movf	??_main^(0+384),w
  1479  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1480  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1481  01B1  00B8               	movwf	sendByte@byte1
  1482  01B2  0849               	movf	main@i,w
  1483  01B3  3EE9               	addlw	(low (_car| 0))& (0+255)
  1484  01B4  0084               	movwf	4
  1485  01B5  1383               	bcf	3,7	;select IRP bank1
  1486  01B6  0800               	movf	0,w
  1487  01B7  1683               	bsf	3,5	;RP0=1, select bank3
  1488  01B8  1703               	bsf	3,6	;RP1=1, select bank3
  1489  01B9  009F               	movwf	(??_main+1)^(0+384)
  1490  01BA  081F               	movf	(??_main+1)^(0+384),w
  1491  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1492  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1493  01BD  00B9               	movwf	sendByte@valore
  1494  01BE  3007               	movlw	7
  1495  01BF  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1496                           
  1497                           ;main.c: 199:                         sendByte(0x07, 0x03, truck[i]);
  1498  01C4  3003               	movlw	3
  1499  01C5  1683               	bsf	3,5	;RP0=1, select bank3
  1500  01C6  1703               	bsf	3,6	;RP1=1, select bank3
  1501  01C7  009E               	movwf	??_main^(0+384)
  1502  01C8  081E               	movf	??_main^(0+384),w
  1503  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1504  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1505  01CB  00B8               	movwf	sendByte@byte1
  1506  01CC  0849               	movf	main@i,w
  1507  01CD  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1508  01CE  0084               	movwf	4
  1509  01CF  1383               	bcf	3,7	;select IRP bank1
  1510  01D0  0800               	movf	0,w
  1511  01D1  1683               	bsf	3,5	;RP0=1, select bank3
  1512  01D2  1703               	bsf	3,6	;RP1=1, select bank3
  1513  01D3  009F               	movwf	(??_main+1)^(0+384)
  1514  01D4  081F               	movf	(??_main+1)^(0+384),w
  1515  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  1516  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  1517  01D7  00B9               	movwf	sendByte@valore
  1518  01D8  3007               	movlw	7
  1519  01D9  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1520                           
  1521                           ;main.c: 200:                         break;
  1522  01DE  2A44               	goto	l4582
  1523  01DF                     l4576:	
  1524                           
  1525                           ;main.c: 202:                         sendByte(0x09, 0x01, motorcycle[i]);
  1526  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1527  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  1528  01E1  01B8               	clrf	sendByte@byte1
  1529  01E2  0AB8               	incf	sendByte@byte1,f
  1530  01E3  0849               	movf	main@i,w
  1531  01E4  3E57               	addlw	(low (_motorcycle| 0))& (0+255)
  1532  01E5  0084               	movwf	4
  1533  01E6  1383               	bcf	3,7	;select IRP bank0
  1534  01E7  0800               	movf	0,w
  1535  01E8  1683               	bsf	3,5	;RP0=1, select bank3
  1536  01E9  1703               	bsf	3,6	;RP1=1, select bank3
  1537  01EA  009E               	movwf	??_main^(0+384)
  1538  01EB  081E               	movf	??_main^(0+384),w
  1539  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1540  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1541  01EE  00B9               	movwf	sendByte@valore
  1542  01EF  3009               	movlw	9
  1543  01F0  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1544                           
  1545                           ;main.c: 203:                         sendByte(0x09, 0x02, car[i]);
  1546  01F5  3002               	movlw	2
  1547  01F6  1683               	bsf	3,5	;RP0=1, select bank3
  1548  01F7  1703               	bsf	3,6	;RP1=1, select bank3
  1549  01F8  009E               	movwf	??_main^(0+384)
  1550  01F9  081E               	movf	??_main^(0+384),w
  1551  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1552  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  1553  01FC  00B8               	movwf	sendByte@byte1
  1554  01FD  0849               	movf	main@i,w
  1555  01FE  3EE9               	addlw	(low (_car| 0))& (0+255)
  1556  01FF  0084               	movwf	4
  1557  0200  1383               	bcf	3,7	;select IRP bank1
  1558  0201  0800               	movf	0,w
  1559  0202  1683               	bsf	3,5	;RP0=1, select bank3
  1560  0203  1703               	bsf	3,6	;RP1=1, select bank3
  1561  0204  009F               	movwf	(??_main+1)^(0+384)
  1562  0205  081F               	movf	(??_main+1)^(0+384),w
  1563  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1564  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1565  0208  00B9               	movwf	sendByte@valore
  1566  0209  3009               	movlw	9
  1567  020A  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1568                           
  1569                           ;main.c: 204:                         sendByte(0x09, 0x03, truck[i]);
  1570  020F  3003               	movlw	3
  1571  0210  1683               	bsf	3,5	;RP0=1, select bank3
  1572  0211  1703               	bsf	3,6	;RP1=1, select bank3
  1573  0212  009E               	movwf	??_main^(0+384)
  1574  0213  081E               	movf	??_main^(0+384),w
  1575  0214  1283               	bcf	3,5	;RP0=0, select bank0
  1576  0215  1303               	bcf	3,6	;RP1=0, select bank0
  1577  0216  00B8               	movwf	sendByte@byte1
  1578  0217  0849               	movf	main@i,w
  1579  0218  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1580  0219  0084               	movwf	4
  1581  021A  1383               	bcf	3,7	;select IRP bank1
  1582  021B  0800               	movf	0,w
  1583  021C  1683               	bsf	3,5	;RP0=1, select bank3
  1584  021D  1703               	bsf	3,6	;RP1=1, select bank3
  1585  021E  009F               	movwf	(??_main+1)^(0+384)
  1586  021F  081F               	movf	(??_main+1)^(0+384),w
  1587  0220  1283               	bcf	3,5	;RP0=0, select bank0
  1588  0221  1303               	bcf	3,6	;RP1=0, select bank0
  1589  0222  00B9               	movwf	sendByte@valore
  1590  0223  3009               	movlw	9
  1591  0224  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1592                           
  1593                           ;main.c: 205:                         break;
  1594  0229  2A44               	goto	l4582
  1595  022A                     l4580:	
  1596  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1597  022B  1303               	bcf	3,6	;RP1=0, select bank0
  1598  022C  0849               	movf	main@i,w
  1599  022D  1683               	bsf	3,5	;RP0=1, select bank3
  1600  022E  1703               	bsf	3,6	;RP1=1, select bank3
  1601  022F  009E               	movwf	??_main^(0+384)
  1602  0230  019F               	clrf	(??_main^(0+384)+1)
  1603                           
  1604                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1605                           ; Switch size 1, requested type "simple"
  1606                           ; Number of cases is 1, Range of values is 0 to 0
  1607                           ; switch strategies available:
  1608                           ; Name         Instructions Cycles
  1609                           ; simple_byte            4     3 (average)
  1610                           ; direct_byte           11     8 (fixed)
  1611                           ; jumptable            260     6 (fixed)
  1612                           ;	Chosen strategy is simple_byte
  1613  0231  081F               	movf	(??_main+1)^(0+384),w
  1614  0232  3A00               	xorlw	0	; case 0
  1615  0233  1903               	skipnz
  1616  0234  2A36               	goto	l4910
  1617  0235  2A44               	goto	l4582
  1618  0236                     l4910:	
  1619                           
  1620                           ; Switch size 1, requested type "simple"
  1621                           ; Number of cases is 4, Range of values is 0 to 3
  1622                           ; switch strategies available:
  1623                           ; Name         Instructions Cycles
  1624                           ; simple_byte           13     7 (average)
  1625                           ; direct_byte           20     8 (fixed)
  1626                           ; jumptable            260     6 (fixed)
  1627                           ;	Chosen strategy is simple_byte
  1628  0236  081E               	movf	??_main^(0+384),w
  1629  0237  3A00               	xorlw	0	; case 0
  1630  0238  1903               	skipnz
  1631  0239  28FE               	goto	l4570
  1632  023A  3A01               	xorlw	1	; case 1
  1633  023B  1903               	skipnz
  1634  023C  2949               	goto	l4572
  1635  023D  3A03               	xorlw	3	; case 2
  1636  023E  1903               	skipnz
  1637  023F  2994               	goto	l4574
  1638  0240  3A01               	xorlw	1	; case 3
  1639  0241  1903               	skipnz
  1640  0242  29DF               	goto	l4576
  1641  0243  2A44               	goto	l4582
  1642  0244                     l4582:	
  1643                           
  1644                           ;main.c: 207:                 }
  1645  0244  3001               	movlw	1
  1646  0245  1683               	bsf	3,5	;RP0=1, select bank3
  1647  0246  1703               	bsf	3,6	;RP1=1, select bank3
  1648  0247  009E               	movwf	??_main^(0+384)
  1649  0248  081E               	movf	??_main^(0+384),w
  1650  0249  1283               	bcf	3,5	;RP0=0, select bank0
  1651  024A  1303               	bcf	3,6	;RP1=0, select bank0
  1652  024B  07C9               	addwf	main@i,f
  1653  024C                     l4584:	
  1654  024C  3004               	movlw	4
  1655  024D  0249               	subwf	main@i,w
  1656  024E  1C03               	skipc
  1657  024F  2A51               	goto	u4491
  1658  0250  2A52               	goto	u4490
  1659  0251                     u4491:	
  1660  0251  2893               	goto	l4556
  1661  0252                     u4490:	
  1662  0252                     l4586:	
  1663                           
  1664                           ;main.c: 209:                 for (int i = 0; i < 4; i++)
  1665  0252  01C5               	clrf	main@i_489
  1666  0253  01C6               	clrf	main@i_489+1
  1667  0254                     l4592:	
  1668                           
  1669                           ;main.c: 210:                 {;main.c: 211:                     motorcycle[i] = 0;
  1670  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0256  0845               	movf	main@i_489,w
  1673  0257  3E57               	addlw	(low (_motorcycle| 0))& (0+255)
  1674  0258  0084               	movwf	4
  1675  0259  1383               	bcf	3,7	;select IRP bank0
  1676  025A  0180               	clrf	0
  1677                           
  1678                           ;main.c: 212:                     car[i] = 0;
  1679  025B  0845               	movf	main@i_489,w
  1680  025C  3EE9               	addlw	(low (_car| 0))& (0+255)
  1681  025D  0084               	movwf	4
  1682  025E  0180               	clrf	0
  1683                           
  1684                           ;main.c: 213:                     truck[i] = 0;
  1685  025F  0845               	movf	main@i_489,w
  1686  0260  3EE5               	addlw	(low (_truck| 0))& (0+255)
  1687  0261  0084               	movwf	4
  1688  0262  0180               	clrf	0
  1689  0263                     l4594:	
  1690                           
  1691                           ;main.c: 214:                 }
  1692  0263  3001               	movlw	1
  1693  0264  07C5               	addwf	main@i_489,f
  1694  0265  1803               	skipnc
  1695  0266  0AC6               	incf	main@i_489+1,f
  1696  0267  3000               	movlw	0
  1697  0268  07C6               	addwf	main@i_489+1,f
  1698  0269                     l4596:	
  1699  0269  0846               	movf	main@i_489+1,w
  1700  026A  3A80               	xorlw	128
  1701  026B  00FF               	movwf	btemp+1
  1702  026C  3080               	movlw	128
  1703  026D  027F               	subwf	btemp+1,w
  1704  026E  1D03               	skipz
  1705  026F  2A72               	goto	u4505
  1706  0270  3004               	movlw	4
  1707  0271  0245               	subwf	main@i_489,w
  1708  0272                     u4505:	
  1709  0272  1C03               	skipc
  1710  0273  2A75               	goto	u4501
  1711  0274  2A76               	goto	u4500
  1712  0275                     u4501:	
  1713  0275  2A54               	goto	l4592
  1714  0276                     u4500:	
  1715  0276                     l4598:	
  1716                           
  1717                           ;main.c: 216:                 for (unsigned char i = 0; i < 5; i++)
  1718  0276  1283               	bcf	3,5	;RP0=0, select bank0
  1719  0277  1303               	bcf	3,6	;RP1=0, select bank0
  1720  0278  01C3               	clrf	main@i_490
  1721  0279                     l4604:	
  1722                           
  1723                           ;main.c: 217:                 {;main.c: 218:                     dataFromGateway[i] = 0;
  1724  0279  0843               	movf	main@i_490,w
  1725  027A  3EAC               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1726  027B  0084               	movwf	4
  1727  027C  1383               	bcf	3,7	;select IRP bank1
  1728  027D  0180               	clrf	0
  1729  027E                     l4606:	
  1730                           
  1731                           ;main.c: 219:                 }
  1732  027E  3001               	movlw	1
  1733  027F  1683               	bsf	3,5	;RP0=1, select bank3
  1734  0280  1703               	bsf	3,6	;RP1=1, select bank3
  1735  0281  009E               	movwf	??_main^(0+384)
  1736  0282  081E               	movf	??_main^(0+384),w
  1737  0283  1283               	bcf	3,5	;RP0=0, select bank0
  1738  0284  1303               	bcf	3,6	;RP1=0, select bank0
  1739  0285  07C3               	addwf	main@i_490,f
  1740  0286                     l4608:	
  1741  0286  3005               	movlw	5
  1742  0287  0243               	subwf	main@i_490,w
  1743  0288  1C03               	skipc
  1744  0289  2A8B               	goto	u4511
  1745  028A  2A8C               	goto	u4510
  1746  028B                     u4511:	
  1747  028B  2A79               	goto	l4604
  1748  028C                     u4510:	
  1749  028C  2BC2               	goto	l238
  1750  028D                     l257:	
  1751                           ;main.c: 221:             case 0x0A:
  1752                           
  1753                           
  1754                           ;main.c: 222:                 readGatewayDone.Bit = 1;
  1755  028D  1283               	bcf	3,5	;RP0=0, select bank0
  1756  028E  1303               	bcf	3,6	;RP1=0, select bank0
  1757  028F  1456               	bsf	_readGatewayDone,0
  1758                           
  1759                           ;main.c: 223:                 readGateway.Bit = 0;
  1760  0290  1055               	bcf	_readGateway,0
  1761  0291                     l4610:	
  1762                           
  1763                           ;main.c: 225:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1764  0291  3000               	movlw	0
  1765  0292  120A  158A  2039  120A  118A  	fcall	_ADC_Read
  1766  0297  1283               	bcf	3,5	;RP0=0, select bank0
  1767  0298  1303               	bcf	3,6	;RP1=0, select bank0
  1768  0299  0824               	movf	?_ADC_Read,w
  1769  029A  1683               	bsf	3,5	;RP0=1, select bank3
  1770  029B  1703               	bsf	3,6	;RP1=1, select bank3
  1771  029C  009E               	movwf	??_main^(0+384)
  1772  029D  1283               	bcf	3,5	;RP0=0, select bank0
  1773  029E  1303               	bcf	3,6	;RP1=0, select bank0
  1774  029F  0825               	movf	?_ADC_Read+1,w
  1775  02A0  1683               	bsf	3,5	;RP0=1, select bank3
  1776  02A1  1703               	bsf	3,6	;RP1=1, select bank3
  1777  02A2  009F               	movwf	(??_main^(0+384)+1)
  1778  02A3  0D1F               	rlf	(??_main^(0+384)+1),w
  1779  02A4  0C9F               	rrf	(??_main^(0+384)+1),f
  1780  02A5  0C9E               	rrf	??_main^(0+384),f
  1781  02A6  0D1F               	rlf	(??_main^(0+384)+1),w
  1782  02A7  0C9F               	rrf	(??_main^(0+384)+1),f
  1783  02A8  0C9E               	rrf	??_main^(0+384),f
  1784  02A9  081E               	movf	??_main^(0+384),w
  1785  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  1786  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  1787  02AC  00B4               	movwf	map@x
  1788  02AD  1683               	bsf	3,5	;RP0=1, select bank3
  1789  02AE  1703               	bsf	3,6	;RP1=1, select bank3
  1790  02AF  081F               	movf	(??_main+1)^(0+384),w
  1791  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  1792  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  1793  02B2  00B5               	movwf	map@x+1
  1794  02B3  3000               	movlw	0
  1795  02B4  00B6               	movwf	map@in_min
  1796  02B5  00B7               	movwf	map@in_min+1
  1797  02B6  30FF               	movlw	255
  1798  02B7  00B8               	movwf	map@in_max
  1799  02B8  3000               	movlw	0
  1800  02B9  00B9               	movwf	map@in_max+1
  1801  02BA  30EC               	movlw	236
  1802  02BB  00BA               	movwf	map@out_min
  1803  02BC  30FF               	movlw	255
  1804  02BD  00BB               	movwf	map@out_min+1
  1805  02BE  303C               	movlw	60
  1806  02BF  00BC               	movwf	map@out_max
  1807  02C0  3000               	movlw	0
  1808  02C1  00BD               	movwf	map@out_max+1
  1809  02C2  120A  158A  20E8  120A  118A  	fcall	_map
  1810  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1811  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1812  02C9  0834               	movf	?_map,w
  1813  02CA  1683               	bsf	3,5	;RP0=1, select bank3
  1814  02CB  1703               	bsf	3,6	;RP1=1, select bank3
  1815  02CC  00A0               	movwf	(??_main+2)^(0+384)
  1816  02CD  0820               	movf	(??_main+2)^(0+384),w
  1817  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1818  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  1819  02D0  00CE               	movwf	_temp
  1820                           
  1821                           ;main.c: 226:                 umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  1822  02D1  3001               	movlw	1
  1823  02D2  120A  158A  2039  120A  118A  	fcall	_ADC_Read
  1824  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  1825  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  1826  02D9  0824               	movf	?_ADC_Read,w
  1827  02DA  1683               	bsf	3,5	;RP0=1, select bank3
  1828  02DB  1703               	bsf	3,6	;RP1=1, select bank3
  1829  02DC  009E               	movwf	??_main^(0+384)
  1830  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  1831  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  1832  02DF  0825               	movf	?_ADC_Read+1,w
  1833  02E0  1683               	bsf	3,5	;RP0=1, select bank3
  1834  02E1  1703               	bsf	3,6	;RP1=1, select bank3
  1835  02E2  009F               	movwf	(??_main^(0+384)+1)
  1836  02E3  0D1F               	rlf	(??_main^(0+384)+1),w
  1837  02E4  0C9F               	rrf	(??_main^(0+384)+1),f
  1838  02E5  0C9E               	rrf	??_main^(0+384),f
  1839  02E6  0D1F               	rlf	(??_main^(0+384)+1),w
  1840  02E7  0C9F               	rrf	(??_main^(0+384)+1),f
  1841  02E8  0C9E               	rrf	??_main^(0+384),f
  1842  02E9  081E               	movf	??_main^(0+384),w
  1843  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  1844  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  1845  02EC  00B4               	movwf	map@x
  1846  02ED  1683               	bsf	3,5	;RP0=1, select bank3
  1847  02EE  1703               	bsf	3,6	;RP1=1, select bank3
  1848  02EF  081F               	movf	(??_main+1)^(0+384),w
  1849  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  1850  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  1851  02F2  00B5               	movwf	map@x+1
  1852  02F3  3000               	movlw	0
  1853  02F4  00B6               	movwf	map@in_min
  1854  02F5  00B7               	movwf	map@in_min+1
  1855  02F6  30FF               	movlw	255
  1856  02F7  00B8               	movwf	map@in_max
  1857  02F8  3000               	movlw	0
  1858  02F9  00B9               	movwf	map@in_max+1
  1859  02FA  3000               	movlw	0
  1860  02FB  00BA               	movwf	map@out_min
  1861  02FC  00BB               	movwf	map@out_min+1
  1862  02FD  3064               	movlw	100
  1863  02FE  00BC               	movwf	map@out_max
  1864  02FF  3000               	movlw	0
  1865  0300  00BD               	movwf	map@out_max+1
  1866  0301  120A  158A  20E8  120A  118A  	fcall	_map
  1867  0306  1283               	bcf	3,5	;RP0=0, select bank0
  1868  0307  1303               	bcf	3,6	;RP1=0, select bank0
  1869  0308  0834               	movf	?_map,w
  1870  0309  1683               	bsf	3,5	;RP0=1, select bank3
  1871  030A  1703               	bsf	3,6	;RP1=1, select bank3
  1872  030B  00A0               	movwf	(??_main+2)^(0+384)
  1873  030C  0820               	movf	(??_main+2)^(0+384),w
  1874  030D  1283               	bcf	3,5	;RP0=0, select bank0
  1875  030E  1303               	bcf	3,6	;RP1=0, select bank0
  1876  030F  00CD               	movwf	_umidita
  1877                           
  1878                           ;main.c: 227:                 pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  1879  0310  3005               	movlw	5
  1880  0311  120A  158A  2039  120A  118A  	fcall	_ADC_Read
  1881  0316  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0317  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0318  0824               	movf	?_ADC_Read,w
  1884  0319  1683               	bsf	3,5	;RP0=1, select bank3
  1885  031A  1703               	bsf	3,6	;RP1=1, select bank3
  1886  031B  009E               	movwf	??_main^(0+384)
  1887  031C  1283               	bcf	3,5	;RP0=0, select bank0
  1888  031D  1303               	bcf	3,6	;RP1=0, select bank0
  1889  031E  0825               	movf	?_ADC_Read+1,w
  1890  031F  1683               	bsf	3,5	;RP0=1, select bank3
  1891  0320  1703               	bsf	3,6	;RP1=1, select bank3
  1892  0321  009F               	movwf	(??_main^(0+384)+1)
  1893  0322  0D1F               	rlf	(??_main^(0+384)+1),w
  1894  0323  0C9F               	rrf	(??_main^(0+384)+1),f
  1895  0324  0C9E               	rrf	??_main^(0+384),f
  1896  0325  0D1F               	rlf	(??_main^(0+384)+1),w
  1897  0326  0C9F               	rrf	(??_main^(0+384)+1),f
  1898  0327  0C9E               	rrf	??_main^(0+384),f
  1899  0328  081E               	movf	??_main^(0+384),w
  1900  0329  1283               	bcf	3,5	;RP0=0, select bank0
  1901  032A  1303               	bcf	3,6	;RP1=0, select bank0
  1902  032B  00B4               	movwf	map@x
  1903  032C  1683               	bsf	3,5	;RP0=1, select bank3
  1904  032D  1703               	bsf	3,6	;RP1=1, select bank3
  1905  032E  081F               	movf	(??_main+1)^(0+384),w
  1906  032F  1283               	bcf	3,5	;RP0=0, select bank0
  1907  0330  1303               	bcf	3,6	;RP1=0, select bank0
  1908  0331  00B5               	movwf	map@x+1
  1909  0332  3000               	movlw	0
  1910  0333  00B6               	movwf	map@in_min
  1911  0334  00B7               	movwf	map@in_min+1
  1912  0335  30FF               	movlw	255
  1913  0336  00B8               	movwf	map@in_max
  1914  0337  3000               	movlw	0
  1915  0338  00B9               	movwf	map@in_max+1
  1916  0339  3000               	movlw	0
  1917  033A  00BA               	movwf	map@out_min
  1918  033B  00BB               	movwf	map@out_min+1
  1919  033C  3064               	movlw	100
  1920  033D  00BC               	movwf	map@out_max
  1921  033E  3000               	movlw	0
  1922  033F  00BD               	movwf	map@out_max+1
  1923  0340  120A  158A  20E8  120A  118A  	fcall	_map
  1924  0345  1283               	bcf	3,5	;RP0=0, select bank0
  1925  0346  1303               	bcf	3,6	;RP1=0, select bank0
  1926  0347  0834               	movf	?_map,w
  1927  0348  1683               	bsf	3,5	;RP0=1, select bank3
  1928  0349  1703               	bsf	3,6	;RP1=1, select bank3
  1929  034A  00A0               	movwf	(??_main+2)^(0+384)
  1930  034B  0820               	movf	(??_main+2)^(0+384),w
  1931  034C  1283               	bcf	3,5	;RP0=0, select bank0
  1932  034D  1303               	bcf	3,6	;RP1=0, select bank0
  1933  034E  00CC               	movwf	_pressione
  1934  034F                     l4612:	
  1935                           
  1936                           ;main.c: 228:                 sendByte(0x02, 0x00, temp);
  1937  034F  01B8               	clrf	sendByte@byte1
  1938  0350  084E               	movf	_temp,w
  1939  0351  1683               	bsf	3,5	;RP0=1, select bank3
  1940  0352  1703               	bsf	3,6	;RP1=1, select bank3
  1941  0353  009E               	movwf	??_main^(0+384)
  1942  0354  081E               	movf	??_main^(0+384),w
  1943  0355  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0356  1303               	bcf	3,6	;RP1=0, select bank0
  1945  0357  00B9               	movwf	sendByte@valore
  1946  0358  3002               	movlw	2
  1947  0359  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1948  035E                     l4614:	
  1949                           
  1950                           ;main.c: 229:                 sendByte(0x04, 0x00, umidita);
  1951  035E  1283               	bcf	3,5	;RP0=0, select bank0
  1952  035F  1303               	bcf	3,6	;RP1=0, select bank0
  1953  0360  01B8               	clrf	sendByte@byte1
  1954  0361  084D               	movf	_umidita,w
  1955  0362  1683               	bsf	3,5	;RP0=1, select bank3
  1956  0363  1703               	bsf	3,6	;RP1=1, select bank3
  1957  0364  009E               	movwf	??_main^(0+384)
  1958  0365  081E               	movf	??_main^(0+384),w
  1959  0366  1283               	bcf	3,5	;RP0=0, select bank0
  1960  0367  1303               	bcf	3,6	;RP1=0, select bank0
  1961  0368  00B9               	movwf	sendByte@valore
  1962  0369  3004               	movlw	4
  1963  036A  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1964  036F                     l4616:	
  1965                           
  1966                           ;main.c: 230:                 sendByte(0x06, 0x00, pressione);
  1967  036F  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0370  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0371  01B8               	clrf	sendByte@byte1
  1970  0372  084C               	movf	_pressione,w
  1971  0373  1683               	bsf	3,5	;RP0=1, select bank3
  1972  0374  1703               	bsf	3,6	;RP1=1, select bank3
  1973  0375  009E               	movwf	??_main^(0+384)
  1974  0376  081E               	movf	??_main^(0+384),w
  1975  0377  1283               	bcf	3,5	;RP0=0, select bank0
  1976  0378  1303               	bcf	3,6	;RP1=0, select bank0
  1977  0379  00B9               	movwf	sendByte@valore
  1978  037A  3006               	movlw	6
  1979  037B  120A  158A  20B7  120A  118A  	fcall	_sendByte
  1980  0380                     l4618:	
  1981                           
  1982                           ;main.c: 232:                 for (unsigned char i = 0; i < 5; i++)
  1983  0380  1283               	bcf	3,5	;RP0=0, select bank0
  1984  0381  1303               	bcf	3,6	;RP1=0, select bank0
  1985  0382  01C4               	clrf	main@i_492
  1986  0383                     l4620:	
  1987  0383  3005               	movlw	5
  1988  0384  0244               	subwf	main@i_492,w
  1989  0385  1C03               	skipc
  1990  0386  2B88               	goto	u4521
  1991  0387  2B89               	goto	u4520
  1992  0388                     u4521:	
  1993  0388  2B8A               	goto	l4624
  1994  0389                     u4520:	
  1995  0389  2BC2               	goto	l238
  1996  038A                     l4624:	
  1997                           
  1998                           ;main.c: 233:                 {;main.c: 234:                     dataFromGateway[i] = 0;
  1999  038A  0844               	movf	main@i_492,w
  2000  038B  3EAC               	addlw	(low (_dataFromGateway| 0))& (0+255)
  2001  038C  0084               	movwf	4
  2002  038D  1383               	bcf	3,7	;select IRP bank1
  2003  038E  0180               	clrf	0
  2004  038F                     l4626:	
  2005                           
  2006                           ;main.c: 235:                 }
  2007  038F  3001               	movlw	1
  2008  0390  1683               	bsf	3,5	;RP0=1, select bank3
  2009  0391  1703               	bsf	3,6	;RP1=1, select bank3
  2010  0392  009E               	movwf	??_main^(0+384)
  2011  0393  081E               	movf	??_main^(0+384),w
  2012  0394  1283               	bcf	3,5	;RP0=0, select bank0
  2013  0395  1303               	bcf	3,6	;RP1=0, select bank0
  2014  0396  07C4               	addwf	main@i_492,f
  2015  0397  2B83               	goto	l4620
  2016  0398                     l4630:	
  2017                           
  2018                           ;main.c: 239:                 if (timerReadFromGateway >= 4)
  2019  0398  3004               	movlw	4
  2020  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2021  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2022  039B  024F               	subwf	_timerReadFromGateway,w
  2023  039C  1C03               	skipc
  2024  039D  2B9F               	goto	u4531
  2025  039E  2BA0               	goto	u4530
  2026  039F                     u4531:	
  2027  039F  2BA3               	goto	l4634
  2028  03A0                     u4530:	
  2029  03A0                     l4632:	
  2030                           
  2031                           ;main.c: 240:                 {;main.c: 241:                     readGatewayDone.Bit = 1
      +                          ;
  2032  03A0  1456               	bsf	_readGatewayDone,0
  2033                           
  2034                           ;main.c: 242:                     readGatewayDone.Timeout = 1;
  2035  03A1  14D6               	bsf	_readGatewayDone,1
  2036                           
  2037                           ;main.c: 243:                     readGateway.Bit = 0;
  2038  03A2  1055               	bcf	_readGateway,0
  2039  03A3                     l4634:	
  2040                           
  2041                           ;main.c: 246:                 if (dataFromGatewayIndex >= 15)
  2042  03A3  300F               	movlw	15
  2043  03A4  0250               	subwf	_dataFromGatewayIndex,w
  2044  03A5  1C03               	skipc
  2045  03A6  2BA8               	goto	u4541
  2046  03A7  2BA9               	goto	u4540
  2047  03A8                     u4541:	
  2048  03A8  2BC2               	goto	l238
  2049  03A9                     u4540:	
  2050  03A9                     l4636:	
  2051                           
  2052                           ;main.c: 247:                 {;main.c: 248:                     readGatewayDone.Bit = 1
      +                          ;
  2053  03A9  1456               	bsf	_readGatewayDone,0
  2054                           
  2055                           ;main.c: 249:                     readGatewayDone.Timeout = 0;
  2056  03AA  10D6               	bcf	_readGatewayDone,1
  2057                           
  2058                           ;main.c: 250:                     readGateway.Bit = 0;
  2059  03AB  1055               	bcf	_readGateway,0
  2060  03AC  2BC2               	goto	l238
  2061  03AD                     l4640:	
  2062  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  2063  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  2064  03AF  082C               	movf	_dataFromGateway^(0+128),w
  2065  03B0  397F               	andlw	127
  2066  03B1  1683               	bsf	3,5	;RP0=1, select bank3
  2067  03B2  1703               	bsf	3,6	;RP1=1, select bank3
  2068  03B3  009E               	movwf	??_main^(0+384)
  2069  03B4  019F               	clrf	(??_main^(0+384)+1)
  2070                           
  2071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2072                           ; Switch size 1, requested type "simple"
  2073                           ; Number of cases is 1, Range of values is 0 to 0
  2074                           ; switch strategies available:
  2075                           ; Name         Instructions Cycles
  2076                           ; simple_byte            4     3 (average)
  2077                           ; direct_byte           11     8 (fixed)
  2078                           ; jumptable            260     6 (fixed)
  2079                           ;	Chosen strategy is simple_byte
  2080  03B5  081F               	movf	(??_main+1)^(0+384),w
  2081  03B6  3A00               	xorlw	0	; case 0
  2082  03B7  1903               	skipnz
  2083  03B8  2BBA               	goto	l4912
  2084  03B9  2B98               	goto	l4630
  2085  03BA                     l4912:	
  2086                           
  2087                           ; Switch size 1, requested type "simple"
  2088                           ; Number of cases is 2, Range of values is 8 to 10
  2089                           ; switch strategies available:
  2090                           ; Name         Instructions Cycles
  2091                           ; simple_byte            7     4 (average)
  2092                           ; direct_byte           20    11 (fixed)
  2093                           ; jumptable            263     9 (fixed)
  2094                           ;	Chosen strategy is simple_byte
  2095  03BA  081E               	movf	??_main^(0+384),w
  2096  03BB  3A08               	xorlw	8	; case 8
  2097  03BC  1903               	skipnz
  2098  03BD  288E               	goto	l240
  2099  03BE  3A02               	xorlw	2	; case 10
  2100  03BF  1903               	skipnz
  2101  03C0  2A8D               	goto	l257
  2102  03C1  2B98               	goto	l4630
  2103  03C2                     l238:	
  2104                           ;main.c: 254:         }
  2105                           
  2106                           
  2107                           ;main.c: 257:         if (readGatewayDone.Bit)
  2108  03C2  1C56               	btfss	_readGatewayDone,0
  2109  03C3  2BC5               	goto	u4551
  2110  03C4  2BC6               	goto	u4550
  2111  03C5                     u4551:	
  2112  03C5  2BE4               	goto	l4654
  2113  03C6                     u4550:	
  2114  03C6                     l4642:	
  2115                           
  2116                           ;main.c: 258:         {;main.c: 260:             readGateway.Bit = 0;
  2117  03C6  1055               	bcf	_readGateway,0
  2118  03C7                     l4644:	
  2119                           
  2120                           ;main.c: 261:             dataFromGatewayIndex = 0;
  2121  03C7  01D0               	clrf	_dataFromGatewayIndex
  2122  03C8                     l4646:	
  2123                           
  2124                           ;main.c: 262:             readGatewayDone.Bit = 0;
  2125  03C8  1056               	bcf	_readGatewayDone,0
  2126                           
  2127                           ;main.c: 263:             timerReadFromGateway = 0;
  2128  03C9  01CF               	clrf	_timerReadFromGateway
  2129  03CA                     l4648:	
  2130                           
  2131                           ;main.c: 266:             if (readGatewayDone.Timeout)
  2132  03CA  1CD6               	btfss	_readGatewayDone,1
  2133  03CB  2BCD               	goto	u4561
  2134  03CC  2BCE               	goto	u4560
  2135  03CD                     u4561:	
  2136  03CD  2BD0               	goto	l4652
  2137  03CE                     u4560:	
  2138  03CE                     l4650:	
  2139                           
  2140                           ;main.c: 267:             {;main.c: 268:                 readGatewayDone.Timeout = 0;
  2141  03CE  10D6               	bcf	_readGatewayDone,1
  2142                           
  2143                           ;main.c: 269:             }
  2144  03CF  2BE4               	goto	l4654
  2145  03D0                     l4652:	
  2146                           
  2147                           ;main.c: 272:             {;main.c: 273:                 bitParita(dataFromGateway);
  2148  03D0  30AC               	movlw	(low (_dataFromGateway| 0))& (0+255)
  2149  03D1  120A  158A  2737  120A  118A  	fcall	_bitParita
  2150                           
  2151                           ;main.c: 274:                 SetReceivedTimes(dataFromGateway, Semafori);
  2152  03D6  3062               	movlw	(low (_Semafori| 0))& (0+255)
  2153  03D7  1683               	bsf	3,5	;RP0=1, select bank3
  2154  03D8  1703               	bsf	3,6	;RP1=1, select bank3
  2155  03D9  009E               	movwf	??_main^(0+384)
  2156  03DA  081E               	movf	??_main^(0+384),w
  2157  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2158  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2159  03DD  00AC               	movwf	SetReceivedTimes@_semafori
  2160  03DE  30AC               	movlw	(low (_dataFromGateway| 0))& (0+255)
  2161  03DF  120A  158A  244C  120A  118A  	fcall	_SetReceivedTimes
  2162  03E4                     l4654:	
  2163                           
  2164                           ;main.c: 280:         if (secondPassed.Bit && cycled.Bit)
  2165  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  2166  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  2167  03E6  1C54               	btfss	_secondPassed,0
  2168  03E7  2BE9               	goto	u4571
  2169  03E8  2BEA               	goto	u4570
  2170  03E9                     u4571:	
  2171  03E9  2D63               	goto	l4690
  2172  03EA                     u4570:	
  2173  03EA                     l4656:	
  2174  03EA  1C53               	btfss	_cycled,0
  2175  03EB  2BED               	goto	u4581
  2176  03EC  2BEE               	goto	u4580
  2177  03ED                     u4581:	
  2178  03ED  2D63               	goto	l4690
  2179  03EE                     u4580:	
  2180  03EE                     l4658:	
  2181                           
  2182                           ;main.c: 281:         {;main.c: 282:             unsigned char i = 0;
  2183  03EE  01C8               	clrf	main@i_495
  2184                           
  2185                           ;main.c: 283:             while (i < n_semafori)
  2186  03EF  2D00               	goto	l4684
  2187  03F0                     l4660:	
  2188                           
  2189                           ;main.c: 284:             {;main.c: 285:                 if ((*Semafori[i]).times[0] != 
      +                          0)
  2190  03F0  0848               	movf	main@i_495,w
  2191  03F1  1683               	bsf	3,5	;RP0=1, select bank3
  2192  03F2  1703               	bsf	3,6	;RP1=1, select bank3
  2193  03F3  009E               	movwf	??_main^(0+384)
  2194  03F4  071E               	addwf	??_main^(0+384),w
  2195  03F5  3E62               	addlw	(low (_Semafori| 0))& (0+255)
  2196  03F6  0084               	movwf	4
  2197  03F7  1383               	bcf	3,7	;select IRP bank0
  2198  03F8  0800               	movf	0,w
  2199  03F9  009F               	movwf	(??_main+1)^(0+384)
  2200  03FA  0A84               	incf	4,f
  2201  03FB  0800               	movf	0,w
  2202  03FC  00A0               	movwf	((??_main+1)^(0+384)+1)
  2203  03FD  081F               	movf	(??_main+1)^(0+384),w
  2204  03FE  0084               	movwf	4
  2205  03FF  1783               	bsf	3,7
  2206  0400  1C20               	btfss	(??_main+2)^(0+384),0
  2207  0401  1383               	bcf	3,7
  2208  0402  0800               	movf	0,w
  2209  0403  00A1               	movwf	(??_main+3)^(0+384)
  2210  0404  0A84               	incf	4,f
  2211  0405  0800               	movf	0,w
  2212  0406  00A2               	movwf	((??_main+3)^(0+384)+1)
  2213  0407  0821               	movf	(??_main+3)^(0+384),w
  2214  0408  0422               	iorwf	((??_main+3)^(0+384)+1),w
  2215  0409  1903               	btfsc	3,2
  2216  040A  2C0C               	goto	u4591
  2217  040B  2C0D               	goto	u4590
  2218  040C                     u4591:	
  2219  040C  2CF8               	goto	l4682
  2220  040D                     u4590:	
  2221  040D                     l4662:	
  2222                           
  2223                           ;main.c: 286:                 {;main.c: 287:                     time[i]++;
  2224  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2225  040E  1303               	bcf	3,6	;RP1=0, select bank0
  2226  040F  0848               	movf	main@i_495,w
  2227  0410  1683               	bsf	3,5	;RP0=1, select bank3
  2228  0411  1703               	bsf	3,6	;RP1=1, select bank3
  2229  0412  009E               	movwf	??_main^(0+384)
  2230  0413  071E               	addwf	??_main^(0+384),w
  2231  0414  3EA0               	addlw	(low (_time| 0))& (0+255)
  2232  0415  0084               	movwf	4
  2233  0416  3001               	movlw	1
  2234  0417  1383               	bcf	3,7	;select IRP bank1
  2235  0418  0780               	addwf	0,f
  2236  0419  0A84               	incf	4,f
  2237  041A  1803               	skipnc
  2238  041B  0A80               	incf	0,f
  2239                           
  2240                           ;main.c: 288:                     unsigned char lux_select = (*Semafori[i]).lux_select;
  2241  041C  1283               	bcf	3,5	;RP0=0, select bank0
  2242  041D  1303               	bcf	3,6	;RP1=0, select bank0
  2243  041E  0848               	movf	main@i_495,w
  2244  041F  1683               	bsf	3,5	;RP0=1, select bank3
  2245  0420  1703               	bsf	3,6	;RP1=1, select bank3
  2246  0421  009E               	movwf	??_main^(0+384)
  2247  0422  071E               	addwf	??_main^(0+384),w
  2248  0423  3E62               	addlw	(low (_Semafori| 0))& (0+255)
  2249  0424  0084               	movwf	4
  2250  0425  0800               	movf	0,w
  2251  0426  009F               	movwf	(??_main+1)^(0+384)
  2252  0427  0A84               	incf	4,f
  2253  0428  0800               	movf	0,w
  2254  0429  00A0               	movwf	((??_main+1)^(0+384)+1)
  2255  042A  081F               	movf	(??_main+1)^(0+384),w
  2256  042B  3E0C               	addlw	12
  2257  042C  00A1               	movwf	(??_main+3)^(0+384)
  2258  042D  0820               	movf	(??_main+2)^(0+384),w
  2259  042E  1803               	skipnc
  2260  042F  3E01               	addlw	1
  2261  0430  3E00               	addlw	0
  2262  0431  00A2               	movwf	(??_main+4)^(0+384)
  2263  0432  0821               	movf	(??_main+3)^(0+384),w
  2264  0433  0084               	movwf	4
  2265  0434  1783               	bsf	3,7
  2266  0435  1C22               	btfss	(??_main+4)^(0+384),0
  2267  0436  1383               	bcf	3,7
  2268  0437  0800               	movf	0,w
  2269  0438  00A3               	movwf	(??_main+5)^(0+384)
  2270  0439  0823               	movf	(??_main+5)^(0+384),w
  2271  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2272  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2273  043C  00C7               	movwf	main@lux_select
  2274                           
  2275                           ;main.c: 290:                     if ((*Semafori[i]).times[lux_select] - time[i] < 0)
  2276  043D  0848               	movf	main@i_495,w
  2277  043E  1683               	bsf	3,5	;RP0=1, select bank3
  2278  043F  1703               	bsf	3,6	;RP1=1, select bank3
  2279  0440  009E               	movwf	??_main^(0+384)
  2280  0441  071E               	addwf	??_main^(0+384),w
  2281  0442  3EA0               	addlw	(low (_time| 0))& (0+255)
  2282  0443  0084               	movwf	4
  2283  0444  1383               	bcf	3,7	;select IRP bank1
  2284  0445  0800               	movf	0,w
  2285  0446  009F               	movwf	(??_main+1)^(0+384)
  2286  0447  0A84               	incf	4,f
  2287  0448  0800               	movf	0,w
  2288  0449  00A0               	movwf	((??_main+1)^(0+384)+1)
  2289  044A  1283               	bcf	3,5	;RP0=0, select bank0
  2290  044B  1303               	bcf	3,6	;RP1=0, select bank0
  2291  044C  0848               	movf	main@i_495,w
  2292  044D  1683               	bsf	3,5	;RP0=1, select bank3
  2293  044E  1703               	bsf	3,6	;RP1=1, select bank3
  2294  044F  00A1               	movwf	(??_main+3)^(0+384)
  2295  0450  0721               	addwf	(??_main+3)^(0+384),w
  2296  0451  3E62               	addlw	(low (_Semafori| 0))& (0+255)
  2297  0452  0084               	movwf	4
  2298  0453  0800               	movf	0,w
  2299  0454  00A2               	movwf	(??_main+4)^(0+384)
  2300  0455  0A84               	incf	4,f
  2301  0456  0800               	movf	0,w
  2302  0457  00A3               	movwf	((??_main+4)^(0+384)+1)
  2303  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2304  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2305  045A  0847               	movf	main@lux_select,w
  2306  045B  1683               	bsf	3,5	;RP0=1, select bank3
  2307  045C  1703               	bsf	3,6	;RP1=1, select bank3
  2308  045D  00A4               	movwf	(??_main+6)^(0+384)
  2309  045E  0724               	addwf	(??_main+6)^(0+384),w
  2310  045F  0722               	addwf	(??_main+4)^(0+384),w
  2311  0460  00A5               	movwf	(??_main+7)^(0+384)
  2312  0461  0823               	movf	(??_main+5)^(0+384),w
  2313  0462  1803               	skipnc
  2314  0463  3E01               	addlw	1
  2315  0464  00A6               	movwf	((??_main+7)^(0+384)+1)
  2316  0465  0825               	movf	(??_main+7)^(0+384),w
  2317  0466  0084               	movwf	4
  2318  0467  1783               	bsf	3,7
  2319  0468  1C26               	btfss	(??_main+8)^(0+384),0
  2320  0469  1383               	bcf	3,7
  2321  046A  0800               	movf	0,w
  2322  046B  00A7               	movwf	(??_main+9)^(0+384)
  2323  046C  0A84               	incf	4,f
  2324  046D  0800               	movf	0,w
  2325  046E  00A8               	movwf	((??_main+9)^(0+384)+1)
  2326  046F  081F               	movf	(??_main+1)^(0+384),w
  2327  0470  0227               	subwf	(??_main+9)^(0+384),w
  2328  0471  00A9               	movwf	(??_main+11)^(0+384)
  2329  0472  0820               	movf	(??_main+2)^(0+384),w
  2330  0473  1C03               	skipc
  2331  0474  0A20               	incf	(??_main+2)^(0+384),w
  2332  0475  0228               	subwf	(??_main+10)^(0+384),w
  2333  0476  00AA               	movwf	(??_main+12)^(0+384)
  2334  0477  1FAA               	btfss	(??_main+12)^(0+384),7
  2335  0478  2C7A               	goto	u4601
  2336  0479  2C7B               	goto	u4600
  2337  047A                     u4601:	
  2338  047A  2CA2               	goto	l4676
  2339  047B                     u4600:	
  2340  047B                     l4664:	
  2341                           
  2342                           ;main.c: 291:                     {;main.c: 292:                         lux_select++;
  2343  047B  3001               	movlw	1
  2344  047C  009E               	movwf	??_main^(0+384)
  2345  047D  081E               	movf	??_main^(0+384),w
  2346  047E  1283               	bcf	3,5	;RP0=0, select bank0
  2347  047F  1303               	bcf	3,6	;RP1=0, select bank0
  2348  0480  07C7               	addwf	main@lux_select,f
  2349  0481                     l4666:	
  2350                           
  2351                           ;main.c: 293:                         time[i] = 1;
  2352  0481  0848               	movf	main@i_495,w
  2353  0482  1683               	bsf	3,5	;RP0=1, select bank3
  2354  0483  1703               	bsf	3,6	;RP1=1, select bank3
  2355  0484  009E               	movwf	??_main^(0+384)
  2356  0485  071E               	addwf	??_main^(0+384),w
  2357  0486  3EA0               	addlw	(low (_time| 0))& (0+255)
  2358  0487  0084               	movwf	4
  2359  0488  3001               	movlw	1
  2360  0489  1383               	bcf	3,7	;select IRP bank1
  2361  048A  0080               	movwf	0
  2362  048B  0A84               	incf	4,f
  2363  048C  3000               	movlw	0
  2364  048D  0080               	movwf	0
  2365  048E                     l4668:	
  2366                           
  2367                           ;main.c: 295:                         if (lux_select >= 3)
  2368  048E  3003               	movlw	3
  2369  048F  1283               	bcf	3,5	;RP0=0, select bank0
  2370  0490  1303               	bcf	3,6	;RP1=0, select bank0
  2371  0491  0247               	subwf	main@lux_select,w
  2372  0492  1C03               	skipc
  2373  0493  2C95               	goto	u4611
  2374  0494  2C96               	goto	u4610
  2375  0495                     u4611:	
  2376  0495  2CA2               	goto	l4676
  2377  0496                     u4610:	
  2378  0496                     l4670:	
  2379                           
  2380                           ;main.c: 296:                         {;main.c: 297:                             lux_sel
      +                          ect = 0;
  2381  0496  01C7               	clrf	main@lux_select
  2382  0497                     l4672:	
  2383                           
  2384                           ;main.c: 299:                             if (i == 0)
  2385  0497  0848               	movf	main@i_495,w
  2386  0498  1D03               	btfss	3,2
  2387  0499  2C9B               	goto	u4621
  2388  049A  2C9C               	goto	u4620
  2389  049B                     u4621:	
  2390  049B  2CA2               	goto	l4676
  2391  049C                     u4620:	
  2392  049C                     l4674:	
  2393                           
  2394                           ;main.c: 300:                             {;main.c: 301:                                
      +                           UpdateTimes(Semafori);
  2395  049C  3062               	movlw	(low (_Semafori| 0))& (0+255)
  2396  049D  120A  118A  26CB  120A  118A  	fcall	_UpdateTimes
  2397  04A2                     l4676:	
  2398                           
  2399                           ;main.c: 306:                     if (lux_select != (*Semafori[i]).lux_select)
  2400  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  2401  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  2402  04A4  0848               	movf	main@i_495,w
  2403  04A5  1683               	bsf	3,5	;RP0=1, select bank3
  2404  04A6  1703               	bsf	3,6	;RP1=1, select bank3
  2405  04A7  009E               	movwf	??_main^(0+384)
  2406  04A8  071E               	addwf	??_main^(0+384),w
  2407  04A9  3E62               	addlw	(low (_Semafori| 0))& (0+255)
  2408  04AA  0084               	movwf	4
  2409  04AB  1383               	bcf	3,7	;select IRP bank0
  2410  04AC  0800               	movf	0,w
  2411  04AD  009F               	movwf	(??_main+1)^(0+384)
  2412  04AE  0A84               	incf	4,f
  2413  04AF  0800               	movf	0,w
  2414  04B0  00A0               	movwf	((??_main+1)^(0+384)+1)
  2415  04B1  081F               	movf	(??_main+1)^(0+384),w
  2416  04B2  3E0C               	addlw	12
  2417  04B3  00A1               	movwf	(??_main+3)^(0+384)
  2418  04B4  0820               	movf	(??_main+2)^(0+384),w
  2419  04B5  1803               	skipnc
  2420  04B6  3E01               	addlw	1
  2421  04B7  3E00               	addlw	0
  2422  04B8  00A2               	movwf	(??_main+4)^(0+384)
  2423  04B9  0821               	movf	(??_main+3)^(0+384),w
  2424  04BA  0084               	movwf	4
  2425  04BB  1783               	bsf	3,7
  2426  04BC  1C22               	btfss	(??_main+4)^(0+384),0
  2427  04BD  1383               	bcf	3,7
  2428  04BE  0800               	movf	0,w
  2429  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  2430  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  2431  04C1  0647               	xorwf	main@lux_select,w
  2432  04C2  1903               	skipnz
  2433  04C3  2CC5               	goto	u4631
  2434  04C4  2CC6               	goto	u4630
  2435  04C5                     u4631:	
  2436  04C5  2CF8               	goto	l4682
  2437  04C6                     u4630:	
  2438  04C6                     l4678:	
  2439                           
  2440                           ;main.c: 307:                     {;main.c: 308:                         luciSemaforo(i,
      +                           lux_select);
  2441  04C6  0847               	movf	main@lux_select,w
  2442  04C7  1683               	bsf	3,5	;RP0=1, select bank3
  2443  04C8  1703               	bsf	3,6	;RP1=1, select bank3
  2444  04C9  009E               	movwf	??_main^(0+384)
  2445  04CA  081E               	movf	??_main^(0+384),w
  2446  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2447  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  2448  04CD  00A4               	movwf	luciSemaforo@lux
  2449  04CE  0848               	movf	main@i_495,w
  2450  04CF  120A  158A  2278  120A  118A  	fcall	_luciSemaforo
  2451  04D4                     l4680:	
  2452                           
  2453                           ;main.c: 309:                         (*Semafori[i]).lux_select = lux_select;
  2454  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  2455  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  2456  04D6  0847               	movf	main@lux_select,w
  2457  04D7  1683               	bsf	3,5	;RP0=1, select bank3
  2458  04D8  1703               	bsf	3,6	;RP1=1, select bank3
  2459  04D9  009E               	movwf	??_main^(0+384)
  2460  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  2461  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  2462  04DC  0848               	movf	main@i_495,w
  2463  04DD  1683               	bsf	3,5	;RP0=1, select bank3
  2464  04DE  1703               	bsf	3,6	;RP1=1, select bank3
  2465  04DF  009F               	movwf	(??_main+1)^(0+384)
  2466  04E0  071F               	addwf	(??_main+1)^(0+384),w
  2467  04E1  3E62               	addlw	(low (_Semafori| 0))& (0+255)
  2468  04E2  0084               	movwf	4
  2469  04E3  1383               	bcf	3,7	;select IRP bank0
  2470  04E4  0800               	movf	0,w
  2471  04E5  00A0               	movwf	(??_main+2)^(0+384)
  2472  04E6  0A84               	incf	4,f
  2473  04E7  0800               	movf	0,w
  2474  04E8  00A1               	movwf	((??_main+2)^(0+384)+1)
  2475  04E9  0820               	movf	(??_main+2)^(0+384),w
  2476  04EA  3E0C               	addlw	12
  2477  04EB  00A2               	movwf	(??_main+4)^(0+384)
  2478  04EC  0821               	movf	(??_main+3)^(0+384),w
  2479  04ED  1803               	skipnc
  2480  04EE  3E01               	addlw	1
  2481  04EF  3E00               	addlw	0
  2482  04F0  00A3               	movwf	(??_main+5)^(0+384)
  2483  04F1  0822               	movf	(??_main+4)^(0+384),w
  2484  04F2  0084               	movwf	4
  2485  04F3  1783               	bsf	3,7
  2486  04F4  1C23               	btfss	(??_main+5)^(0+384),0
  2487  04F5  1383               	bcf	3,7
  2488  04F6  081E               	movf	??_main^(0+384),w
  2489  04F7  0080               	movwf	0
  2490  04F8                     l4682:	
  2491                           
  2492                           ;main.c: 315:                 i++;
  2493  04F8  3001               	movlw	1
  2494  04F9  1683               	bsf	3,5	;RP0=1, select bank3
  2495  04FA  1703               	bsf	3,6	;RP1=1, select bank3
  2496  04FB  009E               	movwf	??_main^(0+384)
  2497  04FC  081E               	movf	??_main^(0+384),w
  2498  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  2499  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  2500  04FF  07C8               	addwf	main@i_495,f
  2501  0500                     l4684:	
  2502  0500  3002               	movlw	2
  2503  0501  0248               	subwf	main@i_495,w
  2504  0502  1C03               	skipc
  2505  0503  2D05               	goto	u4641
  2506  0504  2D06               	goto	u4640
  2507  0505                     u4641:	
  2508  0505  2BF0               	goto	l4660
  2509  0506                     u4640:	
  2510  0506                     l4686:	
  2511                           
  2512                           ;main.c: 318:             GetDigits(&centinaia, &decine, &unita, (*Semafori[0]).times[(*
      +                          Semafori[0]).lux_select] - time[0]);
  2513  0506  305C               	movlw	(low (_decine| 0))& (0+255)
  2514  0507  1683               	bsf	3,5	;RP0=1, select bank3
  2515  0508  1703               	bsf	3,6	;RP1=1, select bank3
  2516  0509  009E               	movwf	??_main^(0+384)
  2517  050A  081E               	movf	??_main^(0+384),w
  2518  050B  1283               	bcf	3,5	;RP0=0, select bank0
  2519  050C  1303               	bcf	3,6	;RP1=0, select bank0
  2520  050D  00B4               	movwf	GetDigits@decine
  2521  050E  305D               	movlw	(low (_unita| 0))& (0+255)
  2522  050F  1683               	bsf	3,5	;RP0=1, select bank3
  2523  0510  1703               	bsf	3,6	;RP1=1, select bank3
  2524  0511  009F               	movwf	(??_main+1)^(0+384)
  2525  0512  081F               	movf	(??_main+1)^(0+384),w
  2526  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2527  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2528  0515  00B5               	movwf	GetDigits@unita
  2529  0516  0862               	movf	_Semafori,w
  2530  0517  3E0C               	addlw	12
  2531  0518  1683               	bsf	3,5	;RP0=1, select bank3
  2532  0519  1703               	bsf	3,6	;RP1=1, select bank3
  2533  051A  00A0               	movwf	(??_main+2)^(0+384)
  2534  051B  1283               	bcf	3,5	;RP0=0, select bank0
  2535  051C  1303               	bcf	3,6	;RP1=0, select bank0
  2536  051D  0863               	movf	_Semafori+1,w
  2537  051E  1803               	skipnc
  2538  051F  3E01               	addlw	1
  2539  0520  3E00               	addlw	0
  2540  0521  1683               	bsf	3,5	;RP0=1, select bank3
  2541  0522  1703               	bsf	3,6	;RP1=1, select bank3
  2542  0523  00A1               	movwf	(??_main+3)^(0+384)
  2543  0524  0820               	movf	(??_main+2)^(0+384),w
  2544  0525  0084               	movwf	4
  2545  0526  1783               	bsf	3,7
  2546  0527  1C21               	btfss	(??_main+3)^(0+384),0
  2547  0528  1383               	bcf	3,7
  2548  0529  0800               	movf	0,w
  2549  052A  00A2               	movwf	(??_main+4)^(0+384)
  2550  052B  0722               	addwf	(??_main+4)^(0+384),w
  2551  052C  1283               	bcf	3,5	;RP0=0, select bank0
  2552  052D  1303               	bcf	3,6	;RP1=0, select bank0
  2553  052E  0762               	addwf	_Semafori,w
  2554  052F  1683               	bsf	3,5	;RP0=1, select bank3
  2555  0530  1703               	bsf	3,6	;RP1=1, select bank3
  2556  0531  00A3               	movwf	(??_main+5)^(0+384)
  2557  0532  1283               	bcf	3,5	;RP0=0, select bank0
  2558  0533  1303               	bcf	3,6	;RP1=0, select bank0
  2559  0534  0863               	movf	_Semafori+1,w
  2560  0535  1803               	skipnc
  2561  0536  3E01               	addlw	1
  2562  0537  1683               	bsf	3,5	;RP0=1, select bank3
  2563  0538  1703               	bsf	3,6	;RP1=1, select bank3
  2564  0539  00A4               	movwf	((??_main+5)^(0+384)+1)
  2565  053A  0823               	movf	(??_main+5)^(0+384),w
  2566  053B  0084               	movwf	4
  2567  053C  1783               	bsf	3,7
  2568  053D  1C24               	btfss	(??_main+6)^(0+384),0
  2569  053E  1383               	bcf	3,7
  2570  053F  0800               	movf	0,w
  2571  0540  00A5               	movwf	(??_main+7)^(0+384)
  2572  0541  0A84               	incf	4,f
  2573  0542  0800               	movf	0,w
  2574  0543  00A6               	movwf	((??_main+7)^(0+384)+1)
  2575  0544  1683               	bsf	3,5	;RP0=1, select bank1
  2576  0545  1303               	bcf	3,6	;RP1=0, select bank1
  2577  0546  0820               	movf	_time^(0+128),w
  2578  0547  1683               	bsf	3,5	;RP0=1, select bank3
  2579  0548  1703               	bsf	3,6	;RP1=1, select bank3
  2580  0549  0225               	subwf	(??_main+7)^(0+384),w
  2581  054A  1283               	bcf	3,5	;RP0=0, select bank0
  2582  054B  1303               	bcf	3,6	;RP1=0, select bank0
  2583  054C  00B6               	movwf	GetDigits@Time
  2584  054D  1683               	bsf	3,5	;RP0=1, select bank1
  2585  054E  1303               	bcf	3,6	;RP1=0, select bank1
  2586  054F  0821               	movf	(_time+1)^(0+128),w
  2587  0550  1C03               	skipc
  2588  0551  0A21               	incf	(_time+1)^(0+128),w
  2589  0552  1683               	bsf	3,5	;RP0=1, select bank3
  2590  0553  1703               	bsf	3,6	;RP1=1, select bank3
  2591  0554  0226               	subwf	(??_main+8)^(0+384),w
  2592  0555  1283               	bcf	3,5	;RP0=0, select bank0
  2593  0556  1303               	bcf	3,6	;RP1=0, select bank0
  2594  0557  00B7               	movwf	GetDigits@Time+1
  2595  0558  305B               	movlw	(low (_centinaia| 0))& (0+255)
  2596  0559  120A  158A  2536  120A  118A  	fcall	_GetDigits
  2597  055E                     l4688:	
  2598                           
  2599                           ;main.c: 319:             ShowDigitsOnDisplay();
  2600  055E  120A  158A  24BA  120A  118A  	fcall	_ShowDigitsOnDisplay
  2601  0563                     l4690:	
  2602                           
  2603                           ;main.c: 326:         if (secondPassed.Bit && cycled.Bit)
  2604  0563  1283               	bcf	3,5	;RP0=0, select bank0
  2605  0564  1303               	bcf	3,6	;RP1=0, select bank0
  2606  0565  1C54               	btfss	_secondPassed,0
  2607  0566  2D68               	goto	u4651
  2608  0567  2D69               	goto	u4650
  2609  0568                     u4651:	
  2610  0568  2D6F               	goto	l275
  2611  0569                     u4650:	
  2612  0569                     l4692:	
  2613  0569  1C53               	btfss	_cycled,0
  2614  056A  2D6C               	goto	u4661
  2615  056B  2D6D               	goto	u4660
  2616  056C                     u4661:	
  2617  056C  2D6F               	goto	l275
  2618  056D                     u4660:	
  2619  056D                     l4694:	
  2620                           
  2621                           ;main.c: 327:         {;main.c: 328:             secondPassed.Bit = 0;
  2622  056D  1054               	bcf	_secondPassed,0
  2623                           
  2624                           ;main.c: 329:             cycled.Bit = 0;
  2625  056E  1053               	bcf	_cycled,0
  2626  056F                     l275:	
  2627                           ;main.c: 330:         }
  2628                           
  2629                           
  2630                           ;main.c: 331:         if (secondPassed.Bit && !cycled.Bit)
  2631  056F  1C54               	btfss	_secondPassed,0
  2632  0570  2D72               	goto	u4671
  2633  0571  2D73               	goto	u4670
  2634  0572                     u4671:	
  2635  0572  2889               	goto	l4546
  2636  0573                     u4670:	
  2637  0573                     l4696:	
  2638  0573  1853               	btfsc	_cycled,0
  2639  0574  2D76               	goto	u4681
  2640  0575  2D77               	goto	u4680
  2641  0576                     u4681:	
  2642  0576  2889               	goto	l4546
  2643  0577                     u4680:	
  2644  0577                     l4698:	
  2645                           
  2646                           ;main.c: 332:         {;main.c: 333:             cycled.Bit = 1;
  2647  0577  1453               	bsf	_cycled,0
  2648  0578  2889               	goto	l4546
  2649  0579  120A  118A  2810   	ljmp	start
  2650  057C                     __end_of_main:	
  2651                           
  2652                           	psect	text1
  2653  08B7                     __ptext1:	
  2654 ;; *************** function _sendByte *****************
  2655 ;; Defined at:
  2656 ;;		line 397 in file "main.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  byte0           1    wreg     unsigned char 
  2659 ;;  byte1           1   24[BANK0 ] unsigned char 
  2660 ;;  valore          1   25[BANK0 ] unsigned char 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  byte0           1   29[BANK0 ] unsigned char 
  2663 ;;  i               1   31[BANK0 ] unsigned char 
  2664 ;;  txByte          1   30[BANK0 ] PTR unsigned char 
  2665 ;;		 -> BuildByte@txByte(5), 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2675 ;;      Params:         0       2       0       0       0
  2676 ;;      Locals:         0       3       0       0       0
  2677 ;;      Temps:          0       3       0       0       0
  2678 ;;      Totals:         0       8       0       0       0
  2679 ;;Total ram usage:        8 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    4
  2682 ;; This function calls:
  2683 ;;		_BuildByte
  2684 ;;		_UART_TxChar
  2685 ;; This function is called by:
  2686 ;;		_main
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           
  2691                           ;psect for function _sendByte
  2692  08B7                     _sendByte:	
  2693                           
  2694                           ;incstack = 0
  2695                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2696                           ;sendByte@byte0 stored from wreg
  2697  08B7  1283               	bcf	3,5	;RP0=0, select bank0
  2698  08B8  1303               	bcf	3,6	;RP1=0, select bank0
  2699  08B9  00BD               	movwf	sendByte@byte0
  2700  08BA                     l4410:	
  2701                           
  2702                           ;main.c: 397: void sendByte(char byte0, char byte1, char valore);main.c: 398: {;main.c: 
      +                          399:     char *txByte;;main.c: 400:     txByte = BuildByte(byte0, byte1, valore);
  2703  08BA  0838               	movf	sendByte@byte1,w
  2704  08BB  00BA               	movwf	??_sendByte
  2705  08BC  083A               	movf	??_sendByte,w
  2706  08BD  00A4               	movwf	BuildByte@byte1
  2707  08BE  0839               	movf	sendByte@valore,w
  2708  08BF  00BB               	movwf	??_sendByte+1
  2709  08C0  083B               	movf	??_sendByte+1,w
  2710  08C1  00A5               	movwf	BuildByte@valore
  2711  08C2  083D               	movf	sendByte@byte0,w
  2712  08C3  120A  158A  266F  120A  158A  	fcall	_BuildByte
  2713  08C8  1283               	bcf	3,5	;RP0=0, select bank0
  2714  08C9  1303               	bcf	3,6	;RP1=0, select bank0
  2715  08CA  00BC               	movwf	??_sendByte+2
  2716  08CB  083C               	movf	??_sendByte+2,w
  2717  08CC  00BE               	movwf	sendByte@txByte
  2718  08CD                     l4412:	
  2719                           
  2720                           ;main.c: 402:     for (unsigned char i = 0; i < 5; i++)
  2721  08CD  01BF               	clrf	sendByte@i
  2722  08CE                     l4418:	
  2723                           
  2724                           ;main.c: 403:     {;main.c: 404:         UART_TxChar(*(txByte++));
  2725  08CE  083E               	movf	sendByte@txByte,w
  2726  08CF  0084               	movwf	4
  2727  08D0  1383               	bcf	3,7	;select IRP bank0
  2728  08D1  0800               	movf	0,w
  2729  08D2  160A  118A  27E2  120A  158A  	fcall	_UART_TxChar
  2730  08D7                     l4420:	
  2731  08D7  3001               	movlw	1
  2732  08D8  1283               	bcf	3,5	;RP0=0, select bank0
  2733  08D9  1303               	bcf	3,6	;RP1=0, select bank0
  2734  08DA  00BA               	movwf	??_sendByte
  2735  08DB  083A               	movf	??_sendByte,w
  2736  08DC  07BE               	addwf	sendByte@txByte,f
  2737  08DD                     l4422:	
  2738                           
  2739                           ;main.c: 405:     }
  2740  08DD  3001               	movlw	1
  2741  08DE  00BA               	movwf	??_sendByte
  2742  08DF  083A               	movf	??_sendByte,w
  2743  08E0  07BF               	addwf	sendByte@i,f
  2744  08E1                     l4424:	
  2745  08E1  3005               	movlw	5
  2746  08E2  023F               	subwf	sendByte@i,w
  2747  08E3  1C03               	skipc
  2748  08E4  28E6               	goto	u4361
  2749  08E5  28E7               	goto	u4360
  2750  08E6                     u4361:	
  2751  08E6  28CE               	goto	l4418
  2752  08E7                     u4360:	
  2753  08E7                     l314:	
  2754  08E7  0008               	return
  2755  08E8                     __end_of_sendByte:	
  2756                           
  2757                           	psect	text2
  2758  17E2                     __ptext2:	
  2759 ;; *************** function _UART_TxChar *****************
  2760 ;; Defined at:
  2761 ;;		line 372 in file "main.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;  ch              1    wreg     unsigned char 
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;  ch              1    4[BANK0 ] unsigned char 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      void 
  2768 ;; Registers used:
  2769 ;;		wreg
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2775 ;;      Params:         0       0       0       0       0
  2776 ;;      Locals:         0       1       0       0       0
  2777 ;;      Temps:          0       0       0       0       0
  2778 ;;      Totals:         0       1       0       0       0
  2779 ;;Total ram usage:        1 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    3
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_sendByte
  2786 ;;		_UART_Write_Text
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           
  2791                           ;psect for function _UART_TxChar
  2792  17E2                     _UART_TxChar:	
  2793                           
  2794                           ;incstack = 0
  2795                           ; Regs used in _UART_TxChar: [wreg]
  2796                           ;UART_TxChar@ch stored from wreg
  2797  17E2  1283               	bcf	3,5	;RP0=0, select bank0
  2798  17E3  1303               	bcf	3,6	;RP1=0, select bank0
  2799  17E4  00A4               	movwf	UART_TxChar@ch
  2800  17E5                     l4062:	
  2801  17E5                     l294:	
  2802                           ;main.c: 375:         ;
  2803                           
  2804                           
  2805                           ;main.c: 374:     while (!TXIF)
  2806  17E5  1E0C               	btfss	12,4	;volatile
  2807  17E6  2FE8               	goto	u3751
  2808  17E7  2FE9               	goto	u3750
  2809  17E8                     u3751:	
  2810  17E8  2FE5               	goto	l294
  2811  17E9                     u3750:	
  2812  17E9                     l296:	
  2813                           
  2814                           ;main.c: 376:     TXIF = 0;
  2815  17E9  120C               	bcf	12,4	;volatile
  2816  17EA                     l4064:	
  2817                           
  2818                           ;main.c: 377:     TXREG = ch;
  2819  17EA  0824               	movf	UART_TxChar@ch,w
  2820  17EB  0099               	movwf	25	;volatile
  2821  17EC                     l297:	
  2822  17EC  0008               	return
  2823  17ED                     __end_of_UART_TxChar:	
  2824                           
  2825                           	psect	text3
  2826  0E6F                     __ptext3:	
  2827 ;; *************** function _BuildByte *****************
  2828 ;; Defined at:
  2829 ;;		line 2 in file "./CustomLib/Serial.h"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;  byte0           1    wreg     unsigned char 
  2832 ;;  byte1           1    4[BANK0 ] unsigned char 
  2833 ;;  valore          1    5[BANK0 ] unsigned char 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  byte0           1    8[BANK0 ] unsigned char 
  2836 ;;  y               2   18[BANK0 ] int 
  2837 ;;  y               2   16[BANK0 ] int 
  2838 ;;  i               2   22[BANK0 ] int 
  2839 ;;  i               2   20[BANK0 ] int 
  2840 ;;  txByte          5    9[BANK0 ] unsigned char [5]
  2841 ;;  sommaColumn     1   15[BANK0 ] unsigned char 
  2842 ;;  sommaRow        1   14[BANK0 ] unsigned char 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      PTR unsigned char 
  2845 ;; Registers used:
  2846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2852 ;;      Params:         0       2       0       0       0
  2853 ;;      Locals:         0      16       0       0       0
  2854 ;;      Temps:          0       2       0       0       0
  2855 ;;      Totals:         0      20       0       0       0
  2856 ;;Total ram usage:       20 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    3
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_sendByte
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           
  2867                           ;psect for function _BuildByte
  2868  0E6F                     _BuildByte:	
  2869                           
  2870                           ;incstack = 0
  2871                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2872                           ;BuildByte@byte0 stored from wreg
  2873  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0E71  00A8               	movwf	BuildByte@byte0
  2876  0E72                     l3980:	
  2877                           
  2878                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2879  0E72  0828               	movf	BuildByte@byte0,w
  2880  0E73  397F               	andlw	127
  2881  0E74  00A6               	movwf	??_BuildByte
  2882  0E75  0826               	movf	??_BuildByte,w
  2883  0E76  00A9               	movwf	BuildByte@txByte
  2884                           
  2885                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2886  0E77  0824               	movf	BuildByte@byte1,w
  2887  0E78  397F               	andlw	127
  2888  0E79  00A6               	movwf	??_BuildByte
  2889  0E7A  0826               	movf	??_BuildByte,w
  2890  0E7B  00AA               	movwf	BuildByte@txByte+1
  2891                           
  2892                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2893  0E7C  0825               	movf	BuildByte@valore,w
  2894  0E7D  397F               	andlw	127
  2895  0E7E  00A6               	movwf	??_BuildByte
  2896  0E7F  0826               	movf	??_BuildByte,w
  2897  0E80  00AB               	movwf	BuildByte@txByte+2
  2898  0E81                     l3982:	
  2899                           
  2900                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2901  0E81  0825               	movf	BuildByte@valore,w
  2902  0E82  00A6               	movwf	??_BuildByte
  2903  0E83  3007               	movlw	7
  2904  0E84                     u3645:	
  2905  0E84  1003               	clrc
  2906  0E85  0CA6               	rrf	??_BuildByte,f
  2907  0E86  3EFF               	addlw	-1
  2908  0E87  1D03               	skipz
  2909  0E88  2E84               	goto	u3645
  2910  0E89  0826               	movf	??_BuildByte,w
  2911  0E8A  397F               	andlw	127
  2912  0E8B  00A7               	movwf	??_BuildByte+1
  2913  0E8C  0827               	movf	??_BuildByte+1,w
  2914  0E8D  00AC               	movwf	BuildByte@txByte+3
  2915  0E8E                     l3984:	
  2916                           
  2917                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2918  0E8E  01AE               	clrf	BuildByte@sommaRow
  2919  0E8F                     l3986:	
  2920                           
  2921                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2922  0E8F  01AF               	clrf	BuildByte@sommaColumn
  2923  0E90                     l3988:	
  2924                           
  2925                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2926  0E90  01B4               	clrf	BuildByte@i
  2927  0E91  01B5               	clrf	BuildByte@i+1
  2928  0E92                     l3994:	
  2929                           
  2930                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2931  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  2932  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  2933  0E94  01B0               	clrf	BuildByte@y
  2934  0E95  01B1               	clrf	BuildByte@y+1
  2935  0E96                     l4000:	
  2936                           
  2937                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2938  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  2939  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  2940  0E98  0834               	movf	BuildByte@i,w
  2941  0E99  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2942  0E9A  0084               	movwf	4
  2943  0E9B  1383               	bcf	3,7	;select IRP bank0
  2944  0E9C  0800               	movf	0,w
  2945  0E9D  00A6               	movwf	??_BuildByte
  2946  0E9E  0A30               	incf	BuildByte@y,w
  2947  0E9F  2EA2               	goto	u3654
  2948  0EA0                     u3655:	
  2949  0EA0  1003               	clrc
  2950  0EA1  0CA6               	rrf	??_BuildByte,f
  2951  0EA2                     u3654:	
  2952  0EA2  3EFF               	addlw	-1
  2953  0EA3  1D03               	skipz
  2954  0EA4  2EA0               	goto	u3655
  2955  0EA5  0826               	movf	??_BuildByte,w
  2956  0EA6  3901               	andlw	1
  2957  0EA7  00A7               	movwf	??_BuildByte+1
  2958  0EA8  0827               	movf	??_BuildByte+1,w
  2959  0EA9  07AE               	addwf	BuildByte@sommaRow,f
  2960  0EAA                     l4002:	
  2961                           
  2962                           ;./CustomLib/Serial.h: 18:         }
  2963  0EAA  3001               	movlw	1
  2964  0EAB  07B0               	addwf	BuildByte@y,f
  2965  0EAC  1803               	skipnc
  2966  0EAD  0AB1               	incf	BuildByte@y+1,f
  2967  0EAE  3000               	movlw	0
  2968  0EAF  07B1               	addwf	BuildByte@y+1,f
  2969  0EB0                     l4004:	
  2970  0EB0  0831               	movf	BuildByte@y+1,w
  2971  0EB1  3A80               	xorlw	128
  2972  0EB2  00FF               	movwf	btemp+1
  2973  0EB3  3080               	movlw	128
  2974  0EB4  027F               	subwf	btemp+1,w
  2975  0EB5  1D03               	skipz
  2976  0EB6  2EB9               	goto	u3665
  2977  0EB7  3008               	movlw	8
  2978  0EB8  0230               	subwf	BuildByte@y,w
  2979  0EB9                     u3665:	
  2980  0EB9  1C03               	skipc
  2981  0EBA  2EBC               	goto	u3661
  2982  0EBB  2EBD               	goto	u3660
  2983  0EBC                     u3661:	
  2984  0EBC  2E96               	goto	l4000
  2985  0EBD                     u3660:	
  2986  0EBD                     l125:	
  2987                           
  2988                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  2989  0EBD  1283               	bcf	3,5	;RP0=0, select bank0
  2990  0EBE  1303               	bcf	3,6	;RP1=0, select bank0
  2991  0EBF  1C2E               	btfss	BuildByte@sommaRow,0
  2992  0EC0  2EC2               	goto	u3671
  2993  0EC1  2EC3               	goto	u3670
  2994  0EC2                     u3671:	
  2995  0EC2  2ECB               	goto	l4008
  2996  0EC3                     u3670:	
  2997  0EC3                     l4006:	
  2998                           
  2999                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  3000  0EC3  3080               	movlw	128
  3001  0EC4  00A6               	movwf	??_BuildByte
  3002  0EC5  0834               	movf	BuildByte@i,w
  3003  0EC6  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3004  0EC7  0084               	movwf	4
  3005  0EC8  0826               	movf	??_BuildByte,w
  3006  0EC9  1383               	bcf	3,7	;select IRP bank0
  3007  0ECA  0780               	addwf	0,f
  3008  0ECB                     l4008:	
  3009                           
  3010                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  3011  0ECB  01AE               	clrf	BuildByte@sommaRow
  3012  0ECC                     l4012:	
  3013                           ;./CustomLib/Serial.h: 23:         }
  3014                           
  3015                           
  3016                           ;./CustomLib/Serial.h: 28:     }
  3017  0ECC  3001               	movlw	1
  3018  0ECD  07B4               	addwf	BuildByte@i,f
  3019  0ECE  1803               	skipnc
  3020  0ECF  0AB5               	incf	BuildByte@i+1,f
  3021  0ED0  3000               	movlw	0
  3022  0ED1  07B5               	addwf	BuildByte@i+1,f
  3023  0ED2                     l4014:	
  3024  0ED2  0835               	movf	BuildByte@i+1,w
  3025  0ED3  3A80               	xorlw	128
  3026  0ED4  00FF               	movwf	btemp+1
  3027  0ED5  3080               	movlw	128
  3028  0ED6  027F               	subwf	btemp+1,w
  3029  0ED7  1D03               	skipz
  3030  0ED8  2EDB               	goto	u3685
  3031  0ED9  3004               	movlw	4
  3032  0EDA  0234               	subwf	BuildByte@i,w
  3033  0EDB                     u3685:	
  3034  0EDB  1C03               	skipc
  3035  0EDC  2EDE               	goto	u3681
  3036  0EDD  2EDF               	goto	u3680
  3037  0EDE                     u3681:	
  3038  0EDE  2E92               	goto	l3994
  3039  0EDF                     u3680:	
  3040  0EDF                     l4016:	
  3041                           
  3042                           ;./CustomLib/Serial.h: 31:     for (int i = 0; i < 8; i++)
  3043  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0EE1  01B6               	clrf	BuildByte@i_359
  3046  0EE2  01B7               	clrf	BuildByte@i_359+1
  3047  0EE3                     l4022:	
  3048                           
  3049                           ;./CustomLib/Serial.h: 32:     {;./CustomLib/Serial.h: 33:         for (int y = 0; y < 4
      +                          ; y++)
  3050  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  3051  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  3052  0EE5  01B2               	clrf	BuildByte@y_360
  3053  0EE6  01B3               	clrf	BuildByte@y_360+1
  3054  0EE7                     l4028:	
  3055                           
  3056                           ;./CustomLib/Serial.h: 35:         {;./CustomLib/Serial.h: 36:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3057  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  3058  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  3059  0EE9  0832               	movf	BuildByte@y_360,w
  3060  0EEA  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3061  0EEB  0084               	movwf	4
  3062  0EEC  1383               	bcf	3,7	;select IRP bank0
  3063  0EED  0800               	movf	0,w
  3064  0EEE  00A6               	movwf	??_BuildByte
  3065  0EEF  0A36               	incf	BuildByte@i_359,w
  3066  0EF0  2EF3               	goto	u3694
  3067  0EF1                     u3695:	
  3068  0EF1  1003               	clrc
  3069  0EF2  0CA6               	rrf	??_BuildByte,f
  3070  0EF3                     u3694:	
  3071  0EF3  3EFF               	addlw	-1
  3072  0EF4  1D03               	skipz
  3073  0EF5  2EF1               	goto	u3695
  3074  0EF6  0826               	movf	??_BuildByte,w
  3075  0EF7  3901               	andlw	1
  3076  0EF8  00A7               	movwf	??_BuildByte+1
  3077  0EF9  0827               	movf	??_BuildByte+1,w
  3078  0EFA  07AF               	addwf	BuildByte@sommaColumn,f
  3079  0EFB                     l4030:	
  3080                           
  3081                           ;./CustomLib/Serial.h: 37:         }
  3082  0EFB  3001               	movlw	1
  3083  0EFC  07B2               	addwf	BuildByte@y_360,f
  3084  0EFD  1803               	skipnc
  3085  0EFE  0AB3               	incf	BuildByte@y_360+1,f
  3086  0EFF  3000               	movlw	0
  3087  0F00  07B3               	addwf	BuildByte@y_360+1,f
  3088  0F01                     l4032:	
  3089  0F01  0833               	movf	BuildByte@y_360+1,w
  3090  0F02  3A80               	xorlw	128
  3091  0F03  00FF               	movwf	btemp+1
  3092  0F04  3080               	movlw	128
  3093  0F05  027F               	subwf	btemp+1,w
  3094  0F06  1D03               	skipz
  3095  0F07  2F0A               	goto	u3705
  3096  0F08  3004               	movlw	4
  3097  0F09  0232               	subwf	BuildByte@y_360,w
  3098  0F0A                     u3705:	
  3099  0F0A  1C03               	skipc
  3100  0F0B  2F0D               	goto	u3701
  3101  0F0C  2F0E               	goto	u3700
  3102  0F0D                     u3701:	
  3103  0F0D  2EE7               	goto	l4028
  3104  0F0E                     u3700:	
  3105  0F0E                     l131:	
  3106                           
  3107                           ;./CustomLib/Serial.h: 38:         if (sommaColumn % 2 == 1)
  3108  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  3109  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  3110  0F10  1C2F               	btfss	BuildByte@sommaColumn,0
  3111  0F11  2F13               	goto	u3711
  3112  0F12  2F14               	goto	u3710
  3113  0F13                     u3711:	
  3114  0F13  2F21               	goto	l4036
  3115  0F14                     u3710:	
  3116  0F14                     l4034:	
  3117                           
  3118                           ;./CustomLib/Serial.h: 39:         {;./CustomLib/Serial.h: 40:             txByte[4] += 
      +                          0x01 << i;
  3119  0F14  3001               	movlw	1
  3120  0F15  00A6               	movwf	??_BuildByte
  3121  0F16  0A36               	incf	BuildByte@i_359,w
  3122  0F17  2F1A               	goto	u3724
  3123  0F18                     u3725:	
  3124  0F18  1003               	clrc
  3125  0F19  0DA6               	rlf	??_BuildByte,f
  3126  0F1A                     u3724:	
  3127  0F1A  3EFF               	addlw	-1
  3128  0F1B  1D03               	skipz
  3129  0F1C  2F18               	goto	u3725
  3130  0F1D  0826               	movf	??_BuildByte,w
  3131  0F1E  00A7               	movwf	??_BuildByte+1
  3132  0F1F  0827               	movf	??_BuildByte+1,w
  3133  0F20  07AD               	addwf	BuildByte@txByte+4,f
  3134  0F21                     l4036:	
  3135                           
  3136                           ;./CustomLib/Serial.h: 41:             sommaColumn = 0;
  3137  0F21  01AF               	clrf	BuildByte@sommaColumn
  3138  0F22                     l4040:	
  3139                           ;./CustomLib/Serial.h: 42:         }
  3140                           
  3141                           
  3142                           ;./CustomLib/Serial.h: 47:     }
  3143  0F22  3001               	movlw	1
  3144  0F23  07B6               	addwf	BuildByte@i_359,f
  3145  0F24  1803               	skipnc
  3146  0F25  0AB7               	incf	BuildByte@i_359+1,f
  3147  0F26  3000               	movlw	0
  3148  0F27  07B7               	addwf	BuildByte@i_359+1,f
  3149  0F28                     l4042:	
  3150  0F28  0837               	movf	BuildByte@i_359+1,w
  3151  0F29  3A80               	xorlw	128
  3152  0F2A  00FF               	movwf	btemp+1
  3153  0F2B  3080               	movlw	128
  3154  0F2C  027F               	subwf	btemp+1,w
  3155  0F2D  1D03               	skipz
  3156  0F2E  2F31               	goto	u3735
  3157  0F2F  3008               	movlw	8
  3158  0F30  0236               	subwf	BuildByte@i_359,w
  3159  0F31                     u3735:	
  3160  0F31  1C03               	skipc
  3161  0F32  2F34               	goto	u3731
  3162  0F33  2F35               	goto	u3730
  3163  0F34                     u3731:	
  3164  0F34  2EE3               	goto	l4022
  3165  0F35                     u3730:	
  3166  0F35                     l4044:	
  3167                           
  3168                           ;./CustomLib/Serial.h: 49:     return txByte;
  3169  0F35  3029               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3170  0F36                     l134:	
  3171  0F36  0008               	return
  3172  0F37                     __end_of_BuildByte:	
  3173                           
  3174                           	psect	text4
  3175  099D                     __ptext4:	
  3176 ;; *************** function _rand *****************
  3177 ;; Defined at:
  3178 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;		None
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;		None
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  2   17[BANK0 ] int 
  3185 ;; Registers used:
  3186 ;;		wreg, status,2, status,0, pclath, cstack
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3192 ;;      Params:         0       2       0       0       0
  3193 ;;      Locals:         0       0       0       0       0
  3194 ;;      Temps:          0       5       0       0       0
  3195 ;;      Totals:         0       7       0       0       0
  3196 ;;Total ram usage:        7 bytes
  3197 ;; Hardware stack levels used:    1
  3198 ;; Hardware stack levels required when called:    4
  3199 ;; This function calls:
  3200 ;;		___lmul
  3201 ;; This function is called by:
  3202 ;;		_main
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           
  3207                           ;psect for function _rand
  3208  099D                     _rand:	
  3209  099D                     l4402:	
  3210                           ;incstack = 0
  3211                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  3212                           
  3213  099D  1283               	bcf	3,5	;RP0=0, select bank0
  3214  099E  1303               	bcf	3,6	;RP1=0, select bank0
  3215  099F  0861               	movf	_randx+3,w
  3216  09A0  00A7               	movwf	___lmul@multiplier+3
  3217  09A1  0860               	movf	_randx+2,w
  3218  09A2  00A6               	movwf	___lmul@multiplier+2
  3219  09A3  085F               	movf	_randx+1,w
  3220  09A4  00A5               	movwf	___lmul@multiplier+1
  3221  09A5  085E               	movf	_randx,w
  3222  09A6  00A4               	movwf	___lmul@multiplier
  3223  09A7  3041               	movlw	65
  3224  09A8  00AB               	movwf	___lmul@multiplicand+3
  3225  09A9  30C6               	movlw	198
  3226  09AA  00AA               	movwf	___lmul@multiplicand+2
  3227  09AB  304E               	movlw	78
  3228  09AC  00A9               	movwf	___lmul@multiplicand+1
  3229  09AD  306D               	movlw	109
  3230  09AE  00A8               	movwf	___lmul@multiplicand
  3231  09AF  120A  158A  21E4  120A  158A  	fcall	___lmul
  3232  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  3233  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  3234  09B6  0827               	movf	?___lmul+3,w
  3235  09B7  00E1               	movwf	_randx+3
  3236  09B8  0826               	movf	?___lmul+2,w
  3237  09B9  00E0               	movwf	_randx+2
  3238  09BA  0825               	movf	?___lmul+1,w
  3239  09BB  00DF               	movwf	_randx+1
  3240  09BC  0824               	movf	?___lmul,w
  3241  09BD  00DE               	movwf	_randx
  3242  09BE                     l4404:	
  3243  09BE  3039               	movlw	57
  3244  09BF  07DE               	addwf	_randx,f
  3245  09C0  3030               	movlw	48
  3246  09C1  1803               	skipnc
  3247  09C2  3031               	movlw	49
  3248  09C3  07DF               	addwf	_randx+1,f
  3249  09C4  3000               	movlw	0
  3250  09C5  1803               	skipnc
  3251  09C6  3001               	movlw	1
  3252  09C7  07E0               	addwf	_randx+2,f
  3253  09C8  3000               	movlw	0
  3254  09C9  1803               	skipnc
  3255  09CA  3001               	movlw	1
  3256  09CB  07E1               	addwf	_randx+3,f
  3257  09CC                     l4406:	
  3258  09CC  085E               	movf	_randx,w
  3259  09CD  00B3               	movwf	??_rand
  3260  09CE  085F               	movf	_randx+1,w
  3261  09CF  00B4               	movwf	??_rand+1
  3262  09D0  0860               	movf	_randx+2,w
  3263  09D1  00B5               	movwf	??_rand+2
  3264  09D2  0861               	movf	_randx+3,w
  3265  09D3  00B6               	movwf	??_rand+3
  3266  09D4  3010               	movlw	16
  3267  09D5  00B7               	movwf	??_rand+4
  3268  09D6                     u4355:	
  3269  09D6  0D36               	rlf	??_rand+3,w
  3270  09D7  0CB6               	rrf	??_rand+3,f
  3271  09D8  0CB5               	rrf	??_rand+2,f
  3272  09D9  0CB4               	rrf	??_rand+1,f
  3273  09DA  0CB3               	rrf	??_rand,f
  3274  09DB                     u4350:	
  3275  09DB  0BB7               	decfsz	??_rand+4,f
  3276  09DC  29D6               	goto	u4355
  3277  09DD  30FF               	movlw	255
  3278  09DE  0533               	andwf	??_rand,w
  3279  09DF  00B1               	movwf	?_rand
  3280  09E0  307F               	movlw	127
  3281  09E1  0534               	andwf	??_rand+1,w
  3282  09E2  00B2               	movwf	?_rand+1
  3283  09E3                     l900:	
  3284  09E3  0008               	return
  3285  09E4                     __end_of_rand:	
  3286                           
  3287                           	psect	text5
  3288  09E4                     __ptext5:	
  3289 ;; *************** function ___lmul *****************
  3290 ;; Defined at:
  3291 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;  multiplier      4    4[BANK0 ] unsigned long 
  3294 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  product         4   13[BANK0 ] unsigned long 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  4    4[BANK0 ] unsigned long 
  3299 ;; Registers used:
  3300 ;;		wreg, status,2, status,0
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3306 ;;      Params:         0       8       0       0       0
  3307 ;;      Locals:         0       4       0       0       0
  3308 ;;      Temps:          0       1       0       0       0
  3309 ;;      Totals:         0      13       0       0       0
  3310 ;;Total ram usage:       13 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    3
  3313 ;; This function calls:
  3314 ;;		Nothing
  3315 ;; This function is called by:
  3316 ;;		_rand
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           
  3321                           ;psect for function ___lmul
  3322  09E4                     ___lmul:	
  3323  09E4                     l4084:	
  3324                           ;incstack = 0
  3325                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3326                           
  3327  09E4  3000               	movlw	0
  3328  09E5  1283               	bcf	3,5	;RP0=0, select bank0
  3329  09E6  1303               	bcf	3,6	;RP1=0, select bank0
  3330  09E7  00B0               	movwf	___lmul@product+3
  3331  09E8  3000               	movlw	0
  3332  09E9  00AF               	movwf	___lmul@product+2
  3333  09EA  3000               	movlw	0
  3334  09EB  00AE               	movwf	___lmul@product+1
  3335  09EC  3000               	movlw	0
  3336  09ED  00AD               	movwf	___lmul@product
  3337  09EE                     l4086:	
  3338  09EE  1C24               	btfss	___lmul@multiplier,0
  3339  09EF  29F1               	goto	u3801
  3340  09F0  29F2               	goto	u3800
  3341  09F1                     u3801:	
  3342  09F1  2A09               	goto	l4090
  3343  09F2                     u3800:	
  3344  09F2                     l4088:	
  3345  09F2  0828               	movf	___lmul@multiplicand,w
  3346  09F3  07AD               	addwf	___lmul@product,f
  3347  09F4  0829               	movf	___lmul@multiplicand+1,w
  3348  09F5  1103               	clrz
  3349  09F6  1803               	skipnc
  3350  09F7  3E01               	addlw	1
  3351  09F8  1903               	skipnz
  3352  09F9  29FB               	goto	u3811
  3353  09FA  07AE               	addwf	___lmul@product+1,f
  3354  09FB                     u3811:	
  3355  09FB  082A               	movf	___lmul@multiplicand+2,w
  3356  09FC  1103               	clrz
  3357  09FD  1803               	skipnc
  3358  09FE  3E01               	addlw	1
  3359  09FF  1903               	skipnz
  3360  0A00  2A02               	goto	u3812
  3361  0A01  07AF               	addwf	___lmul@product+2,f
  3362  0A02                     u3812:	
  3363  0A02  082B               	movf	___lmul@multiplicand+3,w
  3364  0A03  1103               	clrz
  3365  0A04  1803               	skipnc
  3366  0A05  3E01               	addlw	1
  3367  0A06  1903               	skipnz
  3368  0A07  2A09               	goto	u3813
  3369  0A08  07B0               	addwf	___lmul@product+3,f
  3370  0A09                     u3813:	
  3371  0A09                     l4090:	
  3372  0A09  3001               	movlw	1
  3373  0A0A  00AC               	movwf	??___lmul
  3374  0A0B                     u3825:	
  3375  0A0B  1003               	clrc
  3376  0A0C  0DA8               	rlf	___lmul@multiplicand,f
  3377  0A0D  0DA9               	rlf	___lmul@multiplicand+1,f
  3378  0A0E  0DAA               	rlf	___lmul@multiplicand+2,f
  3379  0A0F  0DAB               	rlf	___lmul@multiplicand+3,f
  3380  0A10  0BAC               	decfsz	??___lmul,f
  3381  0A11  2A0B               	goto	u3825
  3382  0A12                     l4092:	
  3383  0A12  3001               	movlw	1
  3384  0A13                     u3835:	
  3385  0A13  1003               	clrc
  3386  0A14  0CA7               	rrf	___lmul@multiplier+3,f
  3387  0A15  0CA6               	rrf	___lmul@multiplier+2,f
  3388  0A16  0CA5               	rrf	___lmul@multiplier+1,f
  3389  0A17  0CA4               	rrf	___lmul@multiplier,f
  3390  0A18  3EFF               	addlw	-1
  3391  0A19  1D03               	skipz
  3392  0A1A  2A13               	goto	u3835
  3393  0A1B  0827               	movf	___lmul@multiplier+3,w
  3394  0A1C  0426               	iorwf	___lmul@multiplier+2,w
  3395  0A1D  0425               	iorwf	___lmul@multiplier+1,w
  3396  0A1E  0424               	iorwf	___lmul@multiplier,w
  3397  0A1F  1D03               	skipz
  3398  0A20  2A22               	goto	u3841
  3399  0A21  2A23               	goto	u3840
  3400  0A22                     u3841:	
  3401  0A22  29EE               	goto	l4086
  3402  0A23                     u3840:	
  3403  0A23                     l4094:	
  3404  0A23  0830               	movf	___lmul@product+3,w
  3405  0A24  00A7               	movwf	?___lmul+3
  3406  0A25  082F               	movf	___lmul@product+2,w
  3407  0A26  00A6               	movwf	?___lmul+2
  3408  0A27  082E               	movf	___lmul@product+1,w
  3409  0A28  00A5               	movwf	?___lmul+1
  3410  0A29  082D               	movf	___lmul@product,w
  3411  0A2A  00A4               	movwf	?___lmul
  3412  0A2B                     l464:	
  3413  0A2B  0008               	return
  3414  0A2C                     __end_of___lmul:	
  3415                           
  3416                           	psect	text6
  3417  08E8                     __ptext6:	
  3418 ;; *************** function _map *****************
  3419 ;; Defined at:
  3420 ;;		line 1 in file "./CustomLib/Conversions.h"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  x               2   20[BANK0 ] int 
  3423 ;;  in_min          2   22[BANK0 ] int 
  3424 ;;  in_max          2   24[BANK0 ] int 
  3425 ;;  out_min         2   26[BANK0 ] int 
  3426 ;;  out_max         2   28[BANK0 ] int 
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;		None
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  2   20[BANK0 ] int 
  3431 ;; Registers used:
  3432 ;;		wreg, status,2, status,0, pclath, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3438 ;;      Params:         0      10       0       0       0
  3439 ;;      Locals:         0       0       0       0       0
  3440 ;;      Temps:          0       0       0       0       0
  3441 ;;      Totals:         0      10       0       0       0
  3442 ;;Total ram usage:       10 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    4
  3445 ;; This function calls:
  3446 ;;		___awdiv
  3447 ;;		___wmul
  3448 ;; This function is called by:
  3449 ;;		_main
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           
  3454                           ;psect for function _map
  3455  08E8                     _map:	
  3456  08E8                     l4234:	
  3457                           ;incstack = 0
  3458                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3459                           
  3460                           
  3461                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3462  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  3463  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  3464  08EA  0836               	movf	map@in_min,w
  3465  08EB  0238               	subwf	map@in_max,w
  3466  08EC  00AB               	movwf	___awdiv@divisor
  3467  08ED  0837               	movf	map@in_min+1,w
  3468  08EE  1C03               	skipc
  3469  08EF  0A37               	incf	map@in_min+1,w
  3470  08F0  0239               	subwf	map@in_max+1,w
  3471  08F1  00AC               	movwf	___awdiv@divisor+1
  3472  08F2  0836               	movf	map@in_min,w
  3473  08F3  0234               	subwf	map@x,w
  3474  08F4  00A4               	movwf	___wmul@multiplier
  3475  08F5  0837               	movf	map@in_min+1,w
  3476  08F6  1C03               	skipc
  3477  08F7  0A37               	incf	map@in_min+1,w
  3478  08F8  0235               	subwf	map@x+1,w
  3479  08F9  00A5               	movwf	___wmul@multiplier+1
  3480  08FA  083A               	movf	map@out_min,w
  3481  08FB  023C               	subwf	map@out_max,w
  3482  08FC  00A6               	movwf	___wmul@multiplicand
  3483  08FD  083B               	movf	map@out_min+1,w
  3484  08FE  1C03               	skipc
  3485  08FF  0A3B               	incf	map@out_min+1,w
  3486  0900  023D               	subwf	map@out_max+1,w
  3487  0901  00A7               	movwf	___wmul@multiplicand+1
  3488  0902  120A  158A  205F  120A  158A  	fcall	___wmul
  3489  0907  1283               	bcf	3,5	;RP0=0, select bank0
  3490  0908  1303               	bcf	3,6	;RP1=0, select bank0
  3491  0909  0825               	movf	?___wmul+1,w
  3492  090A  00AE               	movwf	___awdiv@dividend+1
  3493  090B  0824               	movf	?___wmul,w
  3494  090C  00AD               	movwf	___awdiv@dividend
  3495  090D  120A  158A  23E3  120A  158A  	fcall	___awdiv
  3496  0912  1283               	bcf	3,5	;RP0=0, select bank0
  3497  0913  1303               	bcf	3,6	;RP1=0, select bank0
  3498  0914  083A               	movf	map@out_min,w
  3499  0915  072B               	addwf	?___awdiv,w
  3500  0916  00B4               	movwf	?_map
  3501  0917  083B               	movf	map@out_min+1,w
  3502  0918  1803               	skipnc
  3503  0919  0A3B               	incf	map@out_min+1,w
  3504  091A  072C               	addwf	?___awdiv+1,w
  3505  091B  00B5               	movwf	?_map+1
  3506  091C                     l83:	
  3507  091C  0008               	return
  3508  091D                     __end_of_map:	
  3509                           
  3510                           	psect	text7
  3511  085F                     __ptext7:	
  3512 ;; *************** function ___wmul *****************
  3513 ;; Defined at:
  3514 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;  multiplier      2    4[BANK0 ] unsigned int 
  3517 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;  product         2    8[BANK0 ] unsigned int 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  2    4[BANK0 ] unsigned int 
  3522 ;; Registers used:
  3523 ;;		wreg, status,2, status,0
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3529 ;;      Params:         0       4       0       0       0
  3530 ;;      Locals:         0       2       0       0       0
  3531 ;;      Temps:          0       0       0       0       0
  3532 ;;      Totals:         0       6       0       0       0
  3533 ;;Total ram usage:        6 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    3
  3536 ;; This function calls:
  3537 ;;		Nothing
  3538 ;; This function is called by:
  3539 ;;		_map
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           
  3544                           ;psect for function ___wmul
  3545  085F                     ___wmul:	
  3546  085F                     l4070:	
  3547                           ;incstack = 0
  3548                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3549                           
  3550  085F  1283               	bcf	3,5	;RP0=0, select bank0
  3551  0860  1303               	bcf	3,6	;RP1=0, select bank0
  3552  0861  01A8               	clrf	___wmul@product
  3553  0862  01A9               	clrf	___wmul@product+1
  3554  0863                     l4072:	
  3555  0863  1C24               	btfss	___wmul@multiplier,0
  3556  0864  2866               	goto	u3761
  3557  0865  2867               	goto	u3760
  3558  0866                     u3761:	
  3559  0866  286D               	goto	l450
  3560  0867                     u3760:	
  3561  0867                     l4074:	
  3562  0867  0826               	movf	___wmul@multiplicand,w
  3563  0868  07A8               	addwf	___wmul@product,f
  3564  0869  1803               	skipnc
  3565  086A  0AA9               	incf	___wmul@product+1,f
  3566  086B  0827               	movf	___wmul@multiplicand+1,w
  3567  086C  07A9               	addwf	___wmul@product+1,f
  3568  086D                     l450:	
  3569  086D  3001               	movlw	1
  3570  086E                     u3775:	
  3571  086E  1003               	clrc
  3572  086F  0DA6               	rlf	___wmul@multiplicand,f
  3573  0870  0DA7               	rlf	___wmul@multiplicand+1,f
  3574  0871  3EFF               	addlw	-1
  3575  0872  1D03               	skipz
  3576  0873  286E               	goto	u3775
  3577  0874                     l4076:	
  3578  0874  3001               	movlw	1
  3579  0875                     u3785:	
  3580  0875  1003               	clrc
  3581  0876  0CA5               	rrf	___wmul@multiplier+1,f
  3582  0877  0CA4               	rrf	___wmul@multiplier,f
  3583  0878  3EFF               	addlw	-1
  3584  0879  1D03               	skipz
  3585  087A  2875               	goto	u3785
  3586  087B                     l4078:	
  3587  087B  0824               	movf	___wmul@multiplier,w
  3588  087C  0425               	iorwf	___wmul@multiplier+1,w
  3589  087D  1D03               	btfss	3,2
  3590  087E  2880               	goto	u3791
  3591  087F  2881               	goto	u3790
  3592  0880                     u3791:	
  3593  0880  2863               	goto	l4072
  3594  0881                     u3790:	
  3595  0881                     l4080:	
  3596  0881  0829               	movf	___wmul@product+1,w
  3597  0882  00A5               	movwf	?___wmul+1
  3598  0883  0828               	movf	___wmul@product,w
  3599  0884  00A4               	movwf	?___wmul
  3600  0885                     l452:	
  3601  0885  0008               	return
  3602  0886                     __end_of___wmul:	
  3603                           
  3604                           	psect	text8
  3605  0A78                     __ptext8:	
  3606 ;; *************** function _luciSemaforo *****************
  3607 ;; Defined at:
  3608 ;;		line 437 in file "main.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  index           1    wreg     unsigned char 
  3611 ;;  lux             1    4[BANK0 ] unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  index           1    7[BANK0 ] unsigned char 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3623 ;;      Params:         0       1       0       0       0
  3624 ;;      Locals:         0       1       0       0       0
  3625 ;;      Temps:          0       2       0       0       0
  3626 ;;      Totals:         0       4       0       0       0
  3627 ;;Total ram usage:        4 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    3
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_main
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function _luciSemaforo
  3639  0A78                     _luciSemaforo:	
  3640                           
  3641                           ;incstack = 0
  3642                           ; Regs used in _luciSemaforo: [wreg-fsr0h+status,2+status,0]
  3643                           ;luciSemaforo@index stored from wreg
  3644  0A78  1283               	bcf	3,5	;RP0=0, select bank0
  3645  0A79  1303               	bcf	3,6	;RP1=0, select bank0
  3646  0A7A  00A7               	movwf	luciSemaforo@index
  3647  0A7B                     l4436:	
  3648                           
  3649                           ;main.c: 437: void luciSemaforo(unsigned char index, unsigned char lux);main.c: 438: {;m
      +                          ain.c: 439:     switch (index)
  3650  0A7B  2ABA               	goto	l4448
  3651  0A7C                     l331:	
  3652                           ;main.c: 443:         {;main.c: 444:         case 0:
  3653                           
  3654                           
  3655                           ;main.c: 445:             PORTCbits.RC1 = 0;
  3656  0A7C  1087               	bcf	7,1	;volatile
  3657                           
  3658                           ;main.c: 446:             PORTCbits.RC3 = 0;
  3659  0A7D  1187               	bcf	7,3	;volatile
  3660                           
  3661                           ;main.c: 447:             PORTCbits.RC0 = 1;
  3662  0A7E  1407               	bsf	7,0	;volatile
  3663                           
  3664                           ;main.c: 448:             break;
  3665  0A7F  2ACA               	goto	l342
  3666  0A80                     l333:	
  3667                           ;main.c: 449:         case 1:
  3668                           
  3669                           
  3670                           ;main.c: 450:             PORTCbits.RC0 = 0;
  3671  0A80  1007               	bcf	7,0	;volatile
  3672                           
  3673                           ;main.c: 451:             PORTCbits.RC3 = 0;
  3674  0A81  1187               	bcf	7,3	;volatile
  3675                           
  3676                           ;main.c: 452:             PORTCbits.RC1 = 1;
  3677  0A82  1487               	bsf	7,1	;volatile
  3678                           
  3679                           ;main.c: 453:             break;
  3680  0A83  2ACA               	goto	l342
  3681  0A84                     l334:	
  3682                           ;main.c: 454:         case 2:
  3683                           
  3684                           
  3685                           ;main.c: 455:             PORTCbits.RC0 = 0;
  3686  0A84  1007               	bcf	7,0	;volatile
  3687                           
  3688                           ;main.c: 456:             PORTCbits.RC1 = 0;
  3689  0A85  1087               	bcf	7,1	;volatile
  3690                           
  3691                           ;main.c: 457:             PORTCbits.RC3 = 1;
  3692  0A86  1587               	bsf	7,3	;volatile
  3693                           
  3694                           ;main.c: 458:             break;
  3695  0A87  2ACA               	goto	l342
  3696  0A88                     l4440:	
  3697  0A88  0824               	movf	luciSemaforo@lux,w
  3698  0A89  00A5               	movwf	??_luciSemaforo
  3699  0A8A  01A6               	clrf	??_luciSemaforo+1
  3700                           
  3701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3702                           ; Switch size 1, requested type "simple"
  3703                           ; Number of cases is 1, Range of values is 0 to 0
  3704                           ; switch strategies available:
  3705                           ; Name         Instructions Cycles
  3706                           ; simple_byte            4     3 (average)
  3707                           ; direct_byte           11     8 (fixed)
  3708                           ; jumptable            260     6 (fixed)
  3709                           ;	Chosen strategy is simple_byte
  3710  0A8B  0826               	movf	??_luciSemaforo+1,w
  3711  0A8C  3A00               	xorlw	0	; case 0
  3712  0A8D  1903               	skipnz
  3713  0A8E  2A90               	goto	l4914
  3714  0A8F  2ACA               	goto	l342
  3715  0A90                     l4914:	
  3716                           
  3717                           ; Switch size 1, requested type "simple"
  3718                           ; Number of cases is 3, Range of values is 0 to 2
  3719                           ; switch strategies available:
  3720                           ; Name         Instructions Cycles
  3721                           ; simple_byte           10     6 (average)
  3722                           ; direct_byte           17     8 (fixed)
  3723                           ; jumptable            260     6 (fixed)
  3724                           ;	Chosen strategy is simple_byte
  3725  0A90  0825               	movf	??_luciSemaforo,w
  3726  0A91  3A00               	xorlw	0	; case 0
  3727  0A92  1903               	skipnz
  3728  0A93  2A7C               	goto	l331
  3729  0A94  3A01               	xorlw	1	; case 1
  3730  0A95  1903               	skipnz
  3731  0A96  2A80               	goto	l333
  3732  0A97  3A03               	xorlw	3	; case 2
  3733  0A98  1903               	skipnz
  3734  0A99  2A84               	goto	l334
  3735  0A9A  2ACA               	goto	l342
  3736  0A9B                     l338:	
  3737                           ;main.c: 464:         {;main.c: 465:         case 0:
  3738                           
  3739                           
  3740                           ;main.c: 466:             PORTBbits.RB1 = 0;
  3741  0A9B  1086               	bcf	6,1	;volatile
  3742                           
  3743                           ;main.c: 467:             PORTBbits.RB6 = 0;
  3744  0A9C  1306               	bcf	6,6	;volatile
  3745                           
  3746                           ;main.c: 468:             PORTBbits.RB7 = 1;
  3747  0A9D  1786               	bsf	6,7	;volatile
  3748                           
  3749                           ;main.c: 469:             break;
  3750  0A9E  2ACA               	goto	l342
  3751  0A9F                     l340:	
  3752                           ;main.c: 470:         case 1:
  3753                           
  3754                           
  3755                           ;main.c: 471:             PORTBbits.RB7 = 0;
  3756  0A9F  1386               	bcf	6,7	;volatile
  3757                           
  3758                           ;main.c: 472:             PORTBbits.RB6 = 0;
  3759  0AA0  1306               	bcf	6,6	;volatile
  3760                           
  3761                           ;main.c: 473:             PORTBbits.RB1 = 1;
  3762  0AA1  1486               	bsf	6,1	;volatile
  3763                           
  3764                           ;main.c: 474:             break;
  3765  0AA2  2ACA               	goto	l342
  3766  0AA3                     l341:	
  3767                           ;main.c: 475:         case 2:
  3768                           
  3769                           
  3770                           ;main.c: 476:             PORTBbits.RB7 = 0;
  3771  0AA3  1386               	bcf	6,7	;volatile
  3772                           
  3773                           ;main.c: 477:             PORTBbits.RB1 = 0;
  3774  0AA4  1086               	bcf	6,1	;volatile
  3775                           
  3776                           ;main.c: 478:             PORTBbits.RB6 = 1;
  3777  0AA5  1706               	bsf	6,6	;volatile
  3778                           
  3779                           ;main.c: 479:             break;
  3780  0AA6  2ACA               	goto	l342
  3781  0AA7                     l4444:	
  3782  0AA7  0824               	movf	luciSemaforo@lux,w
  3783  0AA8  00A5               	movwf	??_luciSemaforo
  3784  0AA9  01A6               	clrf	??_luciSemaforo+1
  3785                           
  3786                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3787                           ; Switch size 1, requested type "simple"
  3788                           ; Number of cases is 1, Range of values is 0 to 0
  3789                           ; switch strategies available:
  3790                           ; Name         Instructions Cycles
  3791                           ; simple_byte            4     3 (average)
  3792                           ; direct_byte           11     8 (fixed)
  3793                           ; jumptable            260     6 (fixed)
  3794                           ;	Chosen strategy is simple_byte
  3795  0AAA  0826               	movf	??_luciSemaforo+1,w
  3796  0AAB  3A00               	xorlw	0	; case 0
  3797  0AAC  1903               	skipnz
  3798  0AAD  2AAF               	goto	l4916
  3799  0AAE  2ACA               	goto	l342
  3800  0AAF                     l4916:	
  3801                           
  3802                           ; Switch size 1, requested type "simple"
  3803                           ; Number of cases is 3, Range of values is 0 to 2
  3804                           ; switch strategies available:
  3805                           ; Name         Instructions Cycles
  3806                           ; simple_byte           10     6 (average)
  3807                           ; direct_byte           17     8 (fixed)
  3808                           ; jumptable            260     6 (fixed)
  3809                           ;	Chosen strategy is simple_byte
  3810  0AAF  0825               	movf	??_luciSemaforo,w
  3811  0AB0  3A00               	xorlw	0	; case 0
  3812  0AB1  1903               	skipnz
  3813  0AB2  2A9B               	goto	l338
  3814  0AB3  3A01               	xorlw	1	; case 1
  3815  0AB4  1903               	skipnz
  3816  0AB5  2A9F               	goto	l340
  3817  0AB6  3A03               	xorlw	3	; case 2
  3818  0AB7  1903               	skipnz
  3819  0AB8  2AA3               	goto	l341
  3820  0AB9  2ACA               	goto	l342
  3821  0ABA                     l4448:	
  3822  0ABA  0827               	movf	luciSemaforo@index,w
  3823  0ABB  00A5               	movwf	??_luciSemaforo
  3824  0ABC  01A6               	clrf	??_luciSemaforo+1
  3825                           
  3826                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3827                           ; Switch size 1, requested type "simple"
  3828                           ; Number of cases is 1, Range of values is 0 to 0
  3829                           ; switch strategies available:
  3830                           ; Name         Instructions Cycles
  3831                           ; simple_byte            4     3 (average)
  3832                           ; direct_byte           11     8 (fixed)
  3833                           ; jumptable            260     6 (fixed)
  3834                           ;	Chosen strategy is simple_byte
  3835  0ABD  0826               	movf	??_luciSemaforo+1,w
  3836  0ABE  3A00               	xorlw	0	; case 0
  3837  0ABF  1903               	skipnz
  3838  0AC0  2AC2               	goto	l4918
  3839  0AC1  2ACA               	goto	l342
  3840  0AC2                     l4918:	
  3841                           
  3842                           ; Switch size 1, requested type "simple"
  3843                           ; Number of cases is 2, Range of values is 0 to 1
  3844                           ; switch strategies available:
  3845                           ; Name         Instructions Cycles
  3846                           ; simple_byte            7     4 (average)
  3847                           ; direct_byte           14     8 (fixed)
  3848                           ; jumptable            260     6 (fixed)
  3849                           ;	Chosen strategy is simple_byte
  3850  0AC2  0825               	movf	??_luciSemaforo,w
  3851  0AC3  3A00               	xorlw	0	; case 0
  3852  0AC4  1903               	skipnz
  3853  0AC5  2A88               	goto	l4440
  3854  0AC6  3A01               	xorlw	1	; case 1
  3855  0AC7  1903               	skipnz
  3856  0AC8  2AA7               	goto	l4444
  3857  0AC9  2ACA               	goto	l342
  3858  0ACA                     l342:	
  3859  0ACA  0008               	return
  3860  0ACB                     __end_of_luciSemaforo:	
  3861                           
  3862                           	psect	text9
  3863  17ED                     __ptext9:	
  3864 ;; *************** function _init_ADC *****************
  3865 ;; Defined at:
  3866 ;;		line 341 in file "main.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;		None
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;		None
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, status,2
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3880 ;;      Params:         0       0       0       0       0
  3881 ;;      Locals:         0       0       0       0       0
  3882 ;;      Temps:          0       1       0       0       0
  3883 ;;      Totals:         0       1       0       0       0
  3884 ;;Total ram usage:        1 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    3
  3887 ;; This function calls:
  3888 ;;		Nothing
  3889 ;; This function is called by:
  3890 ;;		_main
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           
  3895                           ;psect for function _init_ADC
  3896  17ED                     _init_ADC:	
  3897  17ED                     l4384:	
  3898                           ;incstack = 0
  3899                           ; Regs used in _init_ADC: [wreg+status,2]
  3900                           
  3901                           
  3902                           ;main.c: 343:     TRISA = 0xE3;
  3903  17ED  30E3               	movlw	227
  3904  17EE  1683               	bsf	3,5	;RP0=1, select bank1
  3905  17EF  1303               	bcf	3,6	;RP1=0, select bank1
  3906  17F0  0085               	movwf	5	;volatile
  3907  17F1                     l4386:	
  3908                           
  3909                           ;main.c: 344:     ADCON0 = 0x00;
  3910  17F1  1283               	bcf	3,5	;RP0=0, select bank0
  3911  17F2  1303               	bcf	3,6	;RP1=0, select bank0
  3912  17F3  019F               	clrf	31	;volatile
  3913  17F4                     l4388:	
  3914                           
  3915                           ;main.c: 345:     ADCON1 = 0x80;
  3916  17F4  3080               	movlw	128
  3917  17F5  1683               	bsf	3,5	;RP0=1, select bank1
  3918  17F6  1303               	bcf	3,6	;RP1=0, select bank1
  3919  17F7  009F               	movwf	31	;volatile
  3920  17F8                     l4390:	
  3921                           
  3922                           ;main.c: 346:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3923  17F8  3019               	movlw	25
  3924  17F9  1283               	bcf	3,5	;RP0=0, select bank0
  3925  17FA  1303               	bcf	3,6	;RP1=0, select bank0
  3926  17FB  00A4               	movwf	??_init_ADC
  3927  17FC                     u4707:	
  3928  17FC  0BA4               	decfsz	??_init_ADC,f
  3929  17FD  2FFC               	goto	u4707
  3930  17FE  2FFF               	nop2
  3931  17FF                     l282:	
  3932  17FF  0008               	return
  3933  1800                     __end_of_init_ADC:	
  3934                           
  3935                           	psect	text10
  3936  0F37                     __ptext10:	
  3937 ;; *************** function _bitParita *****************
  3938 ;; Defined at:
  3939 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  rx              1    wreg     PTR unsigned char 
  3942 ;;		 -> dataFromGateway(15), 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;  rx              1   21[BANK0 ] PTR unsigned char 
  3945 ;;		 -> dataFromGateway(15), 
  3946 ;;  y               2   19[BANK0 ] int 
  3947 ;;  y               2   17[BANK0 ] int 
  3948 ;;  i               2   24[BANK0 ] int 
  3949 ;;  i               2   22[BANK0 ] int 
  3950 ;;  errorRow        1   16[BANK0 ] unsigned char 
  3951 ;;  error           1   15[BANK0 ] unsigned char 
  3952 ;;  errorColumn     1   14[BANK0 ] unsigned char 
  3953 ;;  sommaColumn     1   13[BANK0 ] unsigned char 
  3954 ;;  sommaRow        1   12[BANK0 ] unsigned char 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3964 ;;      Params:         0       0       0       0       0
  3965 ;;      Locals:         0      14       0       0       0
  3966 ;;      Temps:          0       4       0       0       0
  3967 ;;      Totals:         0      18       0       0       0
  3968 ;;Total ram usage:       18 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    4
  3971 ;; This function calls:
  3972 ;;		_bitChange
  3973 ;; This function is called by:
  3974 ;;		_main
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           
  3979                           ;psect for function _bitParita
  3980  0F37                     _bitParita:	
  3981                           
  3982                           ;incstack = 0
  3983                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3984                           ;bitParita@rx stored from wreg
  3985  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  3986  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  3987  0F39  00B5               	movwf	bitParita@rx
  3988  0F3A                     l4250:	
  3989                           
  3990                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3991  0F3A  01AF               	clrf	bitParita@error
  3992                           
  3993                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3994  0F3B  01AC               	clrf	bitParita@sommaRow
  3995                           
  3996                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3997  0F3C  01B0               	clrf	bitParita@errorRow
  3998                           
  3999                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  4000  0F3D  01AD               	clrf	bitParita@sommaColumn
  4001                           
  4002                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  4003  0F3E  01AE               	clrf	bitParita@errorColumn
  4004                           
  4005                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  4006  0F3F  01B6               	clrf	bitParita@i
  4007  0F40  01B7               	clrf	bitParita@i+1
  4008  0F41                     l4256:	
  4009                           
  4010                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  4011  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0F43  01B1               	clrf	bitParita@y
  4014  0F44  01B2               	clrf	bitParita@y+1
  4015  0F45                     l4262:	
  4016                           
  4017                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  4018  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  4020  0F47  0836               	movf	bitParita@i,w
  4021  0F48  0735               	addwf	bitParita@rx,w
  4022  0F49  00A8               	movwf	??_bitParita
  4023  0F4A  0828               	movf	??_bitParita,w
  4024  0F4B  0084               	movwf	4
  4025  0F4C  1383               	bcf	3,7	;select IRP bank0
  4026  0F4D  0800               	movf	0,w
  4027  0F4E  00A9               	movwf	??_bitParita+1
  4028  0F4F  0A31               	incf	bitParita@y,w
  4029  0F50  2F53               	goto	u4174
  4030  0F51                     u4175:	
  4031  0F51  1003               	clrc
  4032  0F52  0CA9               	rrf	??_bitParita+1,f
  4033  0F53                     u4174:	
  4034  0F53  3EFF               	addlw	-1
  4035  0F54  1D03               	skipz
  4036  0F55  2F51               	goto	u4175
  4037  0F56  0829               	movf	??_bitParita+1,w
  4038  0F57  3901               	andlw	1
  4039  0F58  00AA               	movwf	??_bitParita+2
  4040  0F59  082A               	movf	??_bitParita+2,w
  4041  0F5A  07AC               	addwf	bitParita@sommaRow,f
  4042  0F5B                     l4264:	
  4043                           
  4044                           ;./CustomLib/BitsFlow.h: 26:         }
  4045  0F5B  3001               	movlw	1
  4046  0F5C  07B1               	addwf	bitParita@y,f
  4047  0F5D  1803               	skipnc
  4048  0F5E  0AB2               	incf	bitParita@y+1,f
  4049  0F5F  3000               	movlw	0
  4050  0F60  07B2               	addwf	bitParita@y+1,f
  4051  0F61                     l4266:	
  4052  0F61  0832               	movf	bitParita@y+1,w
  4053  0F62  3A80               	xorlw	128
  4054  0F63  00FF               	movwf	btemp+1
  4055  0F64  3080               	movlw	128
  4056  0F65  027F               	subwf	btemp+1,w
  4057  0F66  1D03               	skipz
  4058  0F67  2F6A               	goto	u4185
  4059  0F68  3008               	movlw	8
  4060  0F69  0231               	subwf	bitParita@y,w
  4061  0F6A                     u4185:	
  4062  0F6A  1C03               	skipc
  4063  0F6B  2F6D               	goto	u4181
  4064  0F6C  2F6E               	goto	u4180
  4065  0F6D                     u4181:	
  4066  0F6D  2F45               	goto	l4262
  4067  0F6E                     u4180:	
  4068  0F6E                     l111:	
  4069                           
  4070                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  4071  0F6E  1283               	bcf	3,5	;RP0=0, select bank0
  4072  0F6F  1303               	bcf	3,6	;RP1=0, select bank0
  4073  0F70  1C2C               	btfss	bitParita@sommaRow,0
  4074  0F71  2F73               	goto	u4191
  4075  0F72  2F74               	goto	u4190
  4076  0F73                     u4191:	
  4077  0F73  2F7A               	goto	l112
  4078  0F74                     u4190:	
  4079  0F74                     l4268:	
  4080                           
  4081                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  4082  0F74  01AF               	clrf	bitParita@error
  4083  0F75  0AAF               	incf	bitParita@error,f
  4084  0F76                     l4270:	
  4085                           
  4086                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  4087  0F76  0836               	movf	bitParita@i,w
  4088  0F77  00A8               	movwf	??_bitParita
  4089  0F78  0828               	movf	??_bitParita,w
  4090  0F79  00B0               	movwf	bitParita@errorRow
  4091  0F7A                     l112:	
  4092                           ;./CustomLib/BitsFlow.h: 31:         }
  4093                           
  4094                           
  4095                           ;./CustomLib/BitsFlow.h: 32:     }
  4096  0F7A  3001               	movlw	1
  4097  0F7B  07B6               	addwf	bitParita@i,f
  4098  0F7C  1803               	skipnc
  4099  0F7D  0AB7               	incf	bitParita@i+1,f
  4100  0F7E  3000               	movlw	0
  4101  0F7F  07B7               	addwf	bitParita@i+1,f
  4102  0F80                     l4272:	
  4103  0F80  0837               	movf	bitParita@i+1,w
  4104  0F81  3A80               	xorlw	128
  4105  0F82  00FF               	movwf	btemp+1
  4106  0F83  3080               	movlw	128
  4107  0F84  027F               	subwf	btemp+1,w
  4108  0F85  1D03               	skipz
  4109  0F86  2F89               	goto	u4205
  4110  0F87  3005               	movlw	5
  4111  0F88  0236               	subwf	bitParita@i,w
  4112  0F89                     u4205:	
  4113  0F89  1C03               	skipc
  4114  0F8A  2F8C               	goto	u4201
  4115  0F8B  2F8D               	goto	u4200
  4116  0F8C                     u4201:	
  4117  0F8C  2F41               	goto	l4256
  4118  0F8D                     u4200:	
  4119  0F8D                     l4274:	
  4120                           
  4121                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  4122  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  4123  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  4124  0F8F  01B8               	clrf	bitParita@i_347
  4125  0F90  01B9               	clrf	bitParita@i_347+1
  4126  0F91                     l4280:	
  4127                           
  4128                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  4129  0F91  1283               	bcf	3,5	;RP0=0, select bank0
  4130  0F92  1303               	bcf	3,6	;RP1=0, select bank0
  4131  0F93  01B3               	clrf	bitParita@y_348
  4132  0F94  01B4               	clrf	bitParita@y_348+1
  4133  0F95                     l4286:	
  4134                           
  4135                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  4136  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  4137  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  4138  0F97  0833               	movf	bitParita@y_348,w
  4139  0F98  0735               	addwf	bitParita@rx,w
  4140  0F99  00A8               	movwf	??_bitParita
  4141  0F9A  0828               	movf	??_bitParita,w
  4142  0F9B  0084               	movwf	4
  4143  0F9C  1383               	bcf	3,7	;select IRP bank0
  4144  0F9D  0800               	movf	0,w
  4145  0F9E  00A9               	movwf	??_bitParita+1
  4146  0F9F  0A38               	incf	bitParita@i_347,w
  4147  0FA0  2FA3               	goto	u4214
  4148  0FA1                     u4215:	
  4149  0FA1  1003               	clrc
  4150  0FA2  0CA9               	rrf	??_bitParita+1,f
  4151  0FA3                     u4214:	
  4152  0FA3  3EFF               	addlw	-1
  4153  0FA4  1D03               	skipz
  4154  0FA5  2FA1               	goto	u4215
  4155  0FA6  0829               	movf	??_bitParita+1,w
  4156  0FA7  3901               	andlw	1
  4157  0FA8  00AA               	movwf	??_bitParita+2
  4158  0FA9  082A               	movf	??_bitParita+2,w
  4159  0FAA  07AD               	addwf	bitParita@sommaColumn,f
  4160  0FAB                     l4288:	
  4161                           
  4162                           ;./CustomLib/BitsFlow.h: 39:         }
  4163  0FAB  3001               	movlw	1
  4164  0FAC  07B3               	addwf	bitParita@y_348,f
  4165  0FAD  1803               	skipnc
  4166  0FAE  0AB4               	incf	bitParita@y_348+1,f
  4167  0FAF  3000               	movlw	0
  4168  0FB0  07B4               	addwf	bitParita@y_348+1,f
  4169  0FB1                     l4290:	
  4170  0FB1  0834               	movf	bitParita@y_348+1,w
  4171  0FB2  3A80               	xorlw	128
  4172  0FB3  00FF               	movwf	btemp+1
  4173  0FB4  3080               	movlw	128
  4174  0FB5  027F               	subwf	btemp+1,w
  4175  0FB6  1D03               	skipz
  4176  0FB7  2FBA               	goto	u4225
  4177  0FB8  3004               	movlw	4
  4178  0FB9  0233               	subwf	bitParita@y_348,w
  4179  0FBA                     u4225:	
  4180  0FBA  1C03               	skipc
  4181  0FBB  2FBD               	goto	u4221
  4182  0FBC  2FBE               	goto	u4220
  4183  0FBD                     u4221:	
  4184  0FBD  2F95               	goto	l4286
  4185  0FBE                     u4220:	
  4186  0FBE                     l116:	
  4187                           
  4188                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  4189  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  4190  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  4191  0FC0  1C2D               	btfss	bitParita@sommaColumn,0
  4192  0FC1  2FC3               	goto	u4231
  4193  0FC2  2FC4               	goto	u4230
  4194  0FC3                     u4231:	
  4195  0FC3  2FCA               	goto	l117
  4196  0FC4                     u4230:	
  4197  0FC4                     l4292:	
  4198                           
  4199                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  4200  0FC4  01AF               	clrf	bitParita@error
  4201  0FC5  0AAF               	incf	bitParita@error,f
  4202  0FC6                     l4294:	
  4203                           
  4204                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  4205  0FC6  0838               	movf	bitParita@i_347,w
  4206  0FC7  00A8               	movwf	??_bitParita
  4207  0FC8  0828               	movf	??_bitParita,w
  4208  0FC9  00AE               	movwf	bitParita@errorColumn
  4209  0FCA                     l117:	
  4210                           ;./CustomLib/BitsFlow.h: 44:         }
  4211                           
  4212                           
  4213                           ;./CustomLib/BitsFlow.h: 45:     }
  4214  0FCA  3001               	movlw	1
  4215  0FCB  07B8               	addwf	bitParita@i_347,f
  4216  0FCC  1803               	skipnc
  4217  0FCD  0AB9               	incf	bitParita@i_347+1,f
  4218  0FCE  3000               	movlw	0
  4219  0FCF  07B9               	addwf	bitParita@i_347+1,f
  4220  0FD0                     l4296:	
  4221  0FD0  0839               	movf	bitParita@i_347+1,w
  4222  0FD1  3A80               	xorlw	128
  4223  0FD2  00FF               	movwf	btemp+1
  4224  0FD3  3080               	movlw	128
  4225  0FD4  027F               	subwf	btemp+1,w
  4226  0FD5  1D03               	skipz
  4227  0FD6  2FD9               	goto	u4245
  4228  0FD7  3008               	movlw	8
  4229  0FD8  0238               	subwf	bitParita@i_347,w
  4230  0FD9                     u4245:	
  4231  0FD9  1C03               	skipc
  4232  0FDA  2FDC               	goto	u4241
  4233  0FDB  2FDD               	goto	u4240
  4234  0FDC                     u4241:	
  4235  0FDC  2F91               	goto	l4280
  4236  0FDD                     u4240:	
  4237  0FDD                     l4298:	
  4238                           
  4239                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  4240  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  4241  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  4242  0FDF  082F               	movf	bitParita@error,w
  4243  0FE0  1903               	btfsc	3,2
  4244  0FE1  2FE3               	goto	u4251
  4245  0FE2  2FE4               	goto	u4250
  4246  0FE3                     u4251:	
  4247  0FE3  2FFF               	goto	l119
  4248  0FE4                     u4250:	
  4249  0FE4                     l4300:	
  4250                           
  4251                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  4252  0FE4  082E               	movf	bitParita@errorColumn,w
  4253  0FE5  00A8               	movwf	??_bitParita
  4254  0FE6  0828               	movf	??_bitParita,w
  4255  0FE7  00A4               	movwf	bitChange@n
  4256  0FE8  0830               	movf	bitParita@errorRow,w
  4257  0FE9  0735               	addwf	bitParita@rx,w
  4258  0FEA  00A9               	movwf	??_bitParita+1
  4259  0FEB  0829               	movf	??_bitParita+1,w
  4260  0FEC  0084               	movwf	4
  4261  0FED  1383               	bcf	3,7	;select IRP bank0
  4262  0FEE  0800               	movf	0,w
  4263  0FEF  120A  158A  2086  120A  158A  	fcall	_bitChange
  4264  0FF4  1283               	bcf	3,5	;RP0=0, select bank0
  4265  0FF5  1303               	bcf	3,6	;RP1=0, select bank0
  4266  0FF6  00AA               	movwf	??_bitParita+2
  4267  0FF7  0830               	movf	bitParita@errorRow,w
  4268  0FF8  0735               	addwf	bitParita@rx,w
  4269  0FF9  00AB               	movwf	??_bitParita+3
  4270  0FFA  082B               	movf	??_bitParita+3,w
  4271  0FFB  0084               	movwf	4
  4272  0FFC  082A               	movf	??_bitParita+2,w
  4273  0FFD  1383               	bcf	3,7	;select IRP bank0
  4274  0FFE  0080               	movwf	0
  4275  0FFF                     l119:	
  4276  0FFF  0008               	return
  4277  1000                     __end_of_bitParita:	
  4278                           
  4279                           	psect	text11
  4280  0886                     __ptext11:	
  4281 ;; *************** function _bitChange *****************
  4282 ;; Defined at:
  4283 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  dato            1    wreg     unsigned char 
  4286 ;;  n               1    4[BANK0 ] unsigned char 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  dato            1    7[BANK0 ] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  1    wreg      unsigned char 
  4291 ;; Registers used:
  4292 ;;		wreg, status,2, status,0
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4298 ;;      Params:         0       1       0       0       0
  4299 ;;      Locals:         0       1       0       0       0
  4300 ;;      Temps:          0       2       0       0       0
  4301 ;;      Totals:         0       4       0       0       0
  4302 ;;Total ram usage:        4 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    3
  4305 ;; This function calls:
  4306 ;;		Nothing
  4307 ;; This function is called by:
  4308 ;;		_bitParita
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           
  4313                           ;psect for function _bitChange
  4314  0886                     _bitChange:	
  4315                           
  4316                           ;incstack = 0
  4317                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  4318                           ;bitChange@dato stored from wreg
  4319  0886  1283               	bcf	3,5	;RP0=0, select bank0
  4320  0887  1303               	bcf	3,6	;RP1=0, select bank0
  4321  0888  00A7               	movwf	bitChange@dato
  4322  0889                     l3968:	
  4323                           
  4324                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  4325  0889  3001               	movlw	1
  4326  088A  00A5               	movwf	??_bitChange
  4327  088B  0A24               	incf	bitChange@n,w
  4328  088C  288F               	goto	u3604
  4329  088D                     u3605:	
  4330  088D  1003               	clrc
  4331  088E  0DA5               	rlf	??_bitChange,f
  4332  088F                     u3604:	
  4333  088F  3EFF               	addlw	-1
  4334  0890  1D03               	skipz
  4335  0891  288D               	goto	u3605
  4336  0892  0825               	movf	??_bitChange,w
  4337  0893  0527               	andwf	bitChange@dato,w
  4338  0894  1903               	btfsc	3,2
  4339  0895  2897               	goto	u3611
  4340  0896  2898               	goto	u3610
  4341  0897                     u3611:	
  4342  0897  28A7               	goto	l3976
  4343  0898                     u3610:	
  4344  0898                     l3970:	
  4345                           
  4346                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  4347  0898  3001               	movlw	1
  4348  0899  00A5               	movwf	??_bitChange
  4349  089A  0A24               	incf	bitChange@n,w
  4350  089B  289E               	goto	u3624
  4351  089C                     u3625:	
  4352  089C  1003               	clrc
  4353  089D  0DA5               	rlf	??_bitChange,f
  4354  089E                     u3624:	
  4355  089E  3EFF               	addlw	-1
  4356  089F  1D03               	skipz
  4357  08A0  289C               	goto	u3625
  4358  08A1  0825               	movf	??_bitChange,w
  4359  08A2  00A6               	movwf	??_bitChange+1
  4360  08A3  0826               	movf	??_bitChange+1,w
  4361  08A4  04A7               	iorwf	bitChange@dato,f
  4362  08A5  0827               	movf	bitChange@dato,w
  4363  08A6  28B6               	goto	l104
  4364  08A7                     l3976:	
  4365                           
  4366                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  4367  08A7  3001               	movlw	1
  4368  08A8  00A5               	movwf	??_bitChange
  4369  08A9  0A24               	incf	bitChange@n,w
  4370  08AA  28AD               	goto	u3634
  4371  08AB                     u3635:	
  4372  08AB  1003               	clrc
  4373  08AC  0DA5               	rlf	??_bitChange,f
  4374  08AD                     u3634:	
  4375  08AD  3EFF               	addlw	-1
  4376  08AE  1D03               	skipz
  4377  08AF  28AB               	goto	u3635
  4378  08B0  0825               	movf	??_bitChange,w
  4379  08B1  3AFF               	xorlw	255
  4380  08B2  00A6               	movwf	??_bitChange+1
  4381  08B3  0826               	movf	??_bitChange+1,w
  4382  08B4  05A7               	andwf	bitChange@dato,f
  4383  08B5  0827               	movf	bitChange@dato,w
  4384  08B6                     l104:	
  4385  08B6  0008               	return
  4386  08B7                     __end_of_bitChange:	
  4387                           
  4388                           	psect	text12
  4389  06CB                     __ptext12:	
  4390 ;; *************** function _UpdateTimes *****************
  4391 ;; Defined at:
  4392 ;;		line 4 in file "./CustomLib/TrafficLight.h"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  _semafori       1    wreg     PTR PTR struct .
  4395 ;;		 -> Semafori(8), 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  _semafori       1   23[BANK0 ] PTR PTR struct .
  4398 ;;		 -> Semafori(8), 
  4399 ;;  i               1   22[BANK0 ] unsigned char 
  4400 ;;  l               1   24[BANK0 ] unsigned char 
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  1    wreg      void 
  4403 ;; Registers used:
  4404 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4410 ;;      Params:         0       0       0       0       0
  4411 ;;      Locals:         0       3       0       0       0
  4412 ;;      Temps:          0      18       0       0       0
  4413 ;;      Totals:         0      21       0       0       0
  4414 ;;Total ram usage:       21 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    3
  4417 ;; This function calls:
  4418 ;;		Nothing
  4419 ;; This function is called by:
  4420 ;;		_main
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function _UpdateTimes
  4426  06CB                     _UpdateTimes:	
  4427                           
  4428                           ;incstack = 0
  4429                           ; Regs used in _UpdateTimes: [wreg-fsr0h+status,2+status,0]
  4430                           ;UpdateTimes@_semafori stored from wreg
  4431  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  4432  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  4433  06CD  00B7               	movwf	UpdateTimes@_semafori
  4434  06CE                     l4302:	
  4435                           
  4436                           ;./CustomLib/TrafficLight.h: 4: void UpdateTimes(_Semafori _semafori);./CustomLib/Traffi
      +                          cLight.h: 5: {;./CustomLib/TrafficLight.h: 7:     for (unsigned char l = 0; l < n_semafo
      +                          ri; l++)
  4437  06CE  01B8               	clrf	UpdateTimes@l
  4438  06CF                     l4308:	
  4439                           
  4440                           ;./CustomLib/TrafficLight.h: 8:     {;./CustomLib/TrafficLight.h: 9:         for (unsign
      +                          ed char i = 0; i < 3; i++)
  4441  06CF  01B6               	clrf	UpdateTimes@i
  4442  06D0                     l4314:	
  4443                           
  4444                           ;./CustomLib/TrafficLight.h: 10:         {;./CustomLib/TrafficLight.h: 11:             i
      +                          f ((*(_semafori)[l]).times[i] != (*(_semafori)[l]).new_times[i])
  4445  06D0  0838               	movf	UpdateTimes@l,w
  4446  06D1  00A4               	movwf	??_UpdateTimes
  4447  06D2  0724               	addwf	??_UpdateTimes,w
  4448  06D3  0737               	addwf	UpdateTimes@_semafori,w
  4449  06D4  00A5               	movwf	??_UpdateTimes+1
  4450  06D5  0825               	movf	??_UpdateTimes+1,w
  4451  06D6  0084               	movwf	4
  4452  06D7  1383               	bcf	3,7	;select IRP bank0
  4453  06D8  0800               	movf	0,w
  4454  06D9  00A6               	movwf	??_UpdateTimes+2
  4455  06DA  0A84               	incf	4,f
  4456  06DB  0800               	movf	0,w
  4457  06DC  00A7               	movwf	??_UpdateTimes+3
  4458  06DD  0836               	movf	UpdateTimes@i,w
  4459  06DE  00A8               	movwf	??_UpdateTimes+4
  4460  06DF  0728               	addwf	??_UpdateTimes+4,w
  4461  06E0  3E06               	addlw	6
  4462  06E1  0726               	addwf	??_UpdateTimes+2,w
  4463  06E2  00A9               	movwf	??_UpdateTimes+5
  4464  06E3  0827               	movf	??_UpdateTimes+3,w
  4465  06E4  1803               	skipnc
  4466  06E5  3E01               	addlw	1
  4467  06E6  00AA               	movwf	??_UpdateTimes+6
  4468  06E7  0829               	movf	??_UpdateTimes+5,w
  4469  06E8  0084               	movwf	4
  4470  06E9  1783               	bsf	3,7
  4471  06EA  1C2A               	btfss	??_UpdateTimes+6,0
  4472  06EB  1383               	bcf	3,7
  4473  06EC  0800               	movf	0,w
  4474  06ED  00AB               	movwf	??_UpdateTimes+7
  4475  06EE  0A84               	incf	4,f
  4476  06EF  0800               	movf	0,w
  4477  06F0  00AC               	movwf	??_UpdateTimes+8
  4478  06F1  0838               	movf	UpdateTimes@l,w
  4479  06F2  00AD               	movwf	??_UpdateTimes+9
  4480  06F3  072D               	addwf	??_UpdateTimes+9,w
  4481  06F4  0737               	addwf	UpdateTimes@_semafori,w
  4482  06F5  00AE               	movwf	??_UpdateTimes+10
  4483  06F6  082E               	movf	??_UpdateTimes+10,w
  4484  06F7  0084               	movwf	4
  4485  06F8  1383               	bcf	3,7	;select IRP bank0
  4486  06F9  0800               	movf	0,w
  4487  06FA  00AF               	movwf	??_UpdateTimes+11
  4488  06FB  0A84               	incf	4,f
  4489  06FC  0800               	movf	0,w
  4490  06FD  00B0               	movwf	??_UpdateTimes+12
  4491  06FE  0836               	movf	UpdateTimes@i,w
  4492  06FF  00B1               	movwf	??_UpdateTimes+13
  4493  0700  0731               	addwf	??_UpdateTimes+13,w
  4494  0701  072F               	addwf	??_UpdateTimes+11,w
  4495  0702  00B2               	movwf	??_UpdateTimes+14
  4496  0703  0830               	movf	??_UpdateTimes+12,w
  4497  0704  1803               	skipnc
  4498  0705  3E01               	addlw	1
  4499  0706  00B3               	movwf	??_UpdateTimes+15
  4500  0707  0832               	movf	??_UpdateTimes+14,w
  4501  0708  0084               	movwf	4
  4502  0709  1783               	bsf	3,7
  4503  070A  1C33               	btfss	??_UpdateTimes+15,0
  4504  070B  1383               	bcf	3,7
  4505  070C  0800               	movf	0,w
  4506  070D  00B4               	movwf	??_UpdateTimes+16
  4507  070E  0A84               	incf	4,f
  4508  070F  0800               	movf	0,w
  4509  0710  00B5               	movwf	??_UpdateTimes+17
  4510  0711  082C               	movf	??_UpdateTimes+8,w
  4511  0712  0635               	xorwf	??_UpdateTimes+17,w
  4512  0713  1D03               	skipz
  4513  0714  2F17               	goto	u4265
  4514  0715  082B               	movf	??_UpdateTimes+7,w
  4515  0716  0634               	xorwf	??_UpdateTimes+16,w
  4516  0717                     u4265:	
  4517  0717  1903               	skipnz
  4518  0718  2F1A               	goto	u4261
  4519  0719  2F1B               	goto	u4260
  4520  071A                     u4261:	
  4521  071A  2F5C               	goto	l4318
  4522  071B                     u4260:	
  4523  071B                     l4316:	
  4524                           
  4525                           ;./CustomLib/TrafficLight.h: 12:             {;./CustomLib/TrafficLight.h: 13:          
      +                                 (*(_semafori)[l]).times[i] = (*(_semafori)[l]).new_times[i];
  4526  071B  0838               	movf	UpdateTimes@l,w
  4527  071C  00A4               	movwf	??_UpdateTimes
  4528  071D  0724               	addwf	??_UpdateTimes,w
  4529  071E  0737               	addwf	UpdateTimes@_semafori,w
  4530  071F  00A5               	movwf	??_UpdateTimes+1
  4531  0720  0825               	movf	??_UpdateTimes+1,w
  4532  0721  0084               	movwf	4
  4533  0722  1383               	bcf	3,7	;select IRP bank0
  4534  0723  0800               	movf	0,w
  4535  0724  00A6               	movwf	??_UpdateTimes+2
  4536  0725  0A84               	incf	4,f
  4537  0726  0800               	movf	0,w
  4538  0727  00A7               	movwf	??_UpdateTimes+3
  4539  0728  0836               	movf	UpdateTimes@i,w
  4540  0729  00A8               	movwf	??_UpdateTimes+4
  4541  072A  0728               	addwf	??_UpdateTimes+4,w
  4542  072B  3E06               	addlw	6
  4543  072C  0726               	addwf	??_UpdateTimes+2,w
  4544  072D  00A9               	movwf	??_UpdateTimes+5
  4545  072E  0827               	movf	??_UpdateTimes+3,w
  4546  072F  1803               	skipnc
  4547  0730  3E01               	addlw	1
  4548  0731  00AA               	movwf	??_UpdateTimes+6
  4549  0732  0829               	movf	??_UpdateTimes+5,w
  4550  0733  0084               	movwf	4
  4551  0734  1783               	bsf	3,7
  4552  0735  1C2A               	btfss	??_UpdateTimes+6,0
  4553  0736  1383               	bcf	3,7
  4554  0737  0800               	movf	0,w
  4555  0738  00AB               	movwf	??_UpdateTimes+7
  4556  0739  0A84               	incf	4,f
  4557  073A  0800               	movf	0,w
  4558  073B  00AC               	movwf	??_UpdateTimes+8
  4559  073C  0838               	movf	UpdateTimes@l,w
  4560  073D  00AD               	movwf	??_UpdateTimes+9
  4561  073E  072D               	addwf	??_UpdateTimes+9,w
  4562  073F  0737               	addwf	UpdateTimes@_semafori,w
  4563  0740  00AE               	movwf	??_UpdateTimes+10
  4564  0741  082E               	movf	??_UpdateTimes+10,w
  4565  0742  0084               	movwf	4
  4566  0743  1383               	bcf	3,7	;select IRP bank0
  4567  0744  0800               	movf	0,w
  4568  0745  00AF               	movwf	??_UpdateTimes+11
  4569  0746  0A84               	incf	4,f
  4570  0747  0800               	movf	0,w
  4571  0748  00B0               	movwf	??_UpdateTimes+12
  4572  0749  0836               	movf	UpdateTimes@i,w
  4573  074A  00B1               	movwf	??_UpdateTimes+13
  4574  074B  0731               	addwf	??_UpdateTimes+13,w
  4575  074C  072F               	addwf	??_UpdateTimes+11,w
  4576  074D  00B2               	movwf	??_UpdateTimes+14
  4577  074E  0830               	movf	??_UpdateTimes+12,w
  4578  074F  1803               	skipnc
  4579  0750  3E01               	addlw	1
  4580  0751  00B3               	movwf	??_UpdateTimes+15
  4581  0752  0832               	movf	??_UpdateTimes+14,w
  4582  0753  0084               	movwf	4
  4583  0754  1783               	bsf	3,7
  4584  0755  1C33               	btfss	??_UpdateTimes+15,0
  4585  0756  1383               	bcf	3,7
  4586  0757  082B               	movf	??_UpdateTimes+7,w
  4587  0758  0080               	movwf	0
  4588  0759  0A84               	incf	4,f
  4589  075A  082C               	movf	??_UpdateTimes+8,w
  4590  075B  0080               	movwf	0
  4591  075C                     l4318:	
  4592                           
  4593                           ;./CustomLib/TrafficLight.h: 15:         }
  4594  075C  3001               	movlw	1
  4595  075D  00A4               	movwf	??_UpdateTimes
  4596  075E  0824               	movf	??_UpdateTimes,w
  4597  075F  07B6               	addwf	UpdateTimes@i,f
  4598  0760                     l4320:	
  4599  0760  3003               	movlw	3
  4600  0761  0236               	subwf	UpdateTimes@i,w
  4601  0762  1C03               	skipc
  4602  0763  2F65               	goto	u4271
  4603  0764  2F66               	goto	u4270
  4604  0765                     u4271:	
  4605  0765  2ED0               	goto	l4314
  4606  0766                     u4270:	
  4607  0766                     l4322:	
  4608                           
  4609                           ;./CustomLib/TrafficLight.h: 17:         if ((*(_semafori)[l]).lux_select != (*(_semafor
      +                          i)[l]).new_lux_select)
  4610  0766  0838               	movf	UpdateTimes@l,w
  4611  0767  00A4               	movwf	??_UpdateTimes
  4612  0768  0724               	addwf	??_UpdateTimes,w
  4613  0769  0737               	addwf	UpdateTimes@_semafori,w
  4614  076A  00A5               	movwf	??_UpdateTimes+1
  4615  076B  0825               	movf	??_UpdateTimes+1,w
  4616  076C  0084               	movwf	4
  4617  076D  1383               	bcf	3,7	;select IRP bank0
  4618  076E  0800               	movf	0,w
  4619  076F  00A6               	movwf	??_UpdateTimes+2
  4620  0770  0A84               	incf	4,f
  4621  0771  0800               	movf	0,w
  4622  0772  00A7               	movwf	??_UpdateTimes+3
  4623  0773  0826               	movf	??_UpdateTimes+2,w
  4624  0774  3E0D               	addlw	13
  4625  0775  00A8               	movwf	??_UpdateTimes+4
  4626  0776  0827               	movf	??_UpdateTimes+3,w
  4627  0777  1803               	skipnc
  4628  0778  3E01               	addlw	1
  4629  0779  3E00               	addlw	0
  4630  077A  00A9               	movwf	??_UpdateTimes+5
  4631  077B  0828               	movf	??_UpdateTimes+4,w
  4632  077C  0084               	movwf	4
  4633  077D  1783               	bsf	3,7
  4634  077E  1C29               	btfss	??_UpdateTimes+5,0
  4635  077F  1383               	bcf	3,7
  4636  0780  0800               	movf	0,w
  4637  0781  00AA               	movwf	??_UpdateTimes+6
  4638  0782  0838               	movf	UpdateTimes@l,w
  4639  0783  00AB               	movwf	??_UpdateTimes+7
  4640  0784  072B               	addwf	??_UpdateTimes+7,w
  4641  0785  0737               	addwf	UpdateTimes@_semafori,w
  4642  0786  00AC               	movwf	??_UpdateTimes+8
  4643  0787  082C               	movf	??_UpdateTimes+8,w
  4644  0788  0084               	movwf	4
  4645  0789  1383               	bcf	3,7	;select IRP bank0
  4646  078A  0800               	movf	0,w
  4647  078B  00AD               	movwf	??_UpdateTimes+9
  4648  078C  0A84               	incf	4,f
  4649  078D  0800               	movf	0,w
  4650  078E  00AE               	movwf	??_UpdateTimes+10
  4651  078F  082D               	movf	??_UpdateTimes+9,w
  4652  0790  3E0C               	addlw	12
  4653  0791  00AF               	movwf	??_UpdateTimes+11
  4654  0792  082E               	movf	??_UpdateTimes+10,w
  4655  0793  1803               	skipnc
  4656  0794  3E01               	addlw	1
  4657  0795  3E00               	addlw	0
  4658  0796  00B0               	movwf	??_UpdateTimes+12
  4659  0797  082F               	movf	??_UpdateTimes+11,w
  4660  0798  0084               	movwf	4
  4661  0799  1783               	bsf	3,7
  4662  079A  1C30               	btfss	??_UpdateTimes+12,0
  4663  079B  1383               	bcf	3,7
  4664  079C  0800               	movf	0,w
  4665  079D  062A               	xorwf	??_UpdateTimes+6,w
  4666  079E  1903               	skipnz
  4667  079F  2FA1               	goto	u4281
  4668  07A0  2FA2               	goto	u4280
  4669  07A1                     u4281:	
  4670  07A1  2FDA               	goto	l4326
  4671  07A2                     u4280:	
  4672  07A2                     l4324:	
  4673                           
  4674                           ;./CustomLib/TrafficLight.h: 18:         {;./CustomLib/TrafficLight.h: 19:             (
      +                          *(_semafori)[l]).lux_select = (*(_semafori)[l]).new_lux_select;
  4675  07A2  0838               	movf	UpdateTimes@l,w
  4676  07A3  00A4               	movwf	??_UpdateTimes
  4677  07A4  0724               	addwf	??_UpdateTimes,w
  4678  07A5  0737               	addwf	UpdateTimes@_semafori,w
  4679  07A6  00A5               	movwf	??_UpdateTimes+1
  4680  07A7  0825               	movf	??_UpdateTimes+1,w
  4681  07A8  0084               	movwf	4
  4682  07A9  1383               	bcf	3,7	;select IRP bank0
  4683  07AA  0800               	movf	0,w
  4684  07AB  00A6               	movwf	??_UpdateTimes+2
  4685  07AC  0A84               	incf	4,f
  4686  07AD  0800               	movf	0,w
  4687  07AE  00A7               	movwf	??_UpdateTimes+3
  4688  07AF  0826               	movf	??_UpdateTimes+2,w
  4689  07B0  3E0D               	addlw	13
  4690  07B1  00A8               	movwf	??_UpdateTimes+4
  4691  07B2  0827               	movf	??_UpdateTimes+3,w
  4692  07B3  1803               	skipnc
  4693  07B4  3E01               	addlw	1
  4694  07B5  3E00               	addlw	0
  4695  07B6  00A9               	movwf	??_UpdateTimes+5
  4696  07B7  0828               	movf	??_UpdateTimes+4,w
  4697  07B8  0084               	movwf	4
  4698  07B9  1783               	bsf	3,7
  4699  07BA  1C29               	btfss	??_UpdateTimes+5,0
  4700  07BB  1383               	bcf	3,7
  4701  07BC  0800               	movf	0,w
  4702  07BD  00AA               	movwf	??_UpdateTimes+6
  4703  07BE  0838               	movf	UpdateTimes@l,w
  4704  07BF  00AB               	movwf	??_UpdateTimes+7
  4705  07C0  072B               	addwf	??_UpdateTimes+7,w
  4706  07C1  0737               	addwf	UpdateTimes@_semafori,w
  4707  07C2  00AC               	movwf	??_UpdateTimes+8
  4708  07C3  082C               	movf	??_UpdateTimes+8,w
  4709  07C4  0084               	movwf	4
  4710  07C5  1383               	bcf	3,7	;select IRP bank0
  4711  07C6  0800               	movf	0,w
  4712  07C7  00AD               	movwf	??_UpdateTimes+9
  4713  07C8  0A84               	incf	4,f
  4714  07C9  0800               	movf	0,w
  4715  07CA  00AE               	movwf	??_UpdateTimes+10
  4716  07CB  082D               	movf	??_UpdateTimes+9,w
  4717  07CC  3E0C               	addlw	12
  4718  07CD  00AF               	movwf	??_UpdateTimes+11
  4719  07CE  082E               	movf	??_UpdateTimes+10,w
  4720  07CF  1803               	skipnc
  4721  07D0  3E01               	addlw	1
  4722  07D1  3E00               	addlw	0
  4723  07D2  00B0               	movwf	??_UpdateTimes+12
  4724  07D3  082F               	movf	??_UpdateTimes+11,w
  4725  07D4  0084               	movwf	4
  4726  07D5  1783               	bsf	3,7
  4727  07D6  1C30               	btfss	??_UpdateTimes+12,0
  4728  07D7  1383               	bcf	3,7
  4729  07D8  082A               	movf	??_UpdateTimes+6,w
  4730  07D9  0080               	movwf	0
  4731  07DA                     l4326:	
  4732                           
  4733                           ;./CustomLib/TrafficLight.h: 21:     }
  4734  07DA  3001               	movlw	1
  4735  07DB  00A4               	movwf	??_UpdateTimes
  4736  07DC  0824               	movf	??_UpdateTimes,w
  4737  07DD  07B8               	addwf	UpdateTimes@l,f
  4738  07DE                     l4328:	
  4739  07DE  3002               	movlw	2
  4740  07DF  0238               	subwf	UpdateTimes@l,w
  4741  07E0  1C03               	skipc
  4742  07E1  2FE3               	goto	u4291
  4743  07E2  2FE4               	goto	u4290
  4744  07E3                     u4291:	
  4745  07E3  2ECF               	goto	l4308
  4746  07E4                     u4290:	
  4747  07E4                     l147:	
  4748  07E4  0008               	return
  4749  07E5                     __end_of_UpdateTimes:	
  4750                           
  4751                           	psect	text13
  4752  091D                     __ptext13:	
  4753 ;; *************** function _UART_Init *****************
  4754 ;; Defined at:
  4755 ;;		line 360 in file "main.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  baudrate        2   19[BANK0 ] int 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0, pclath, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4769 ;;      Params:         0       2       0       0       0
  4770 ;;      Locals:         0       0       0       0       0
  4771 ;;      Temps:          0       4       0       0       0
  4772 ;;      Totals:         0       6       0       0       0
  4773 ;;Total ram usage:        6 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    4
  4776 ;; This function calls:
  4777 ;;		___aldiv
  4778 ;; This function is called by:
  4779 ;;		_main
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           
  4784                           ;psect for function _UART_Init
  4785  091D                     _UART_Init:	
  4786  091D                     l4392:	
  4787                           ;incstack = 0
  4788                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4789                           
  4790                           
  4791                           ;main.c: 360: void UART_Init(int baudrate);main.c: 361: {;main.c: 362:     TRISCbits.TRI
      +                          SC6 = 0;
  4792  091D  1683               	bsf	3,5	;RP0=1, select bank1
  4793  091E  1303               	bcf	3,6	;RP1=0, select bank1
  4794  091F  1307               	bcf	7,6	;volatile
  4795                           
  4796                           ;main.c: 363:     TXSTAbits.TXEN = 1;
  4797  0920  1698               	bsf	24,5	;volatile
  4798                           
  4799                           ;main.c: 364:     RCSTAbits.SPEN = 1;
  4800  0921  1283               	bcf	3,5	;RP0=0, select bank0
  4801  0922  1303               	bcf	3,6	;RP1=0, select bank0
  4802  0923  1798               	bsf	24,7	;volatile
  4803                           
  4804                           ;main.c: 365:     RCSTAbits.CREN = 1;
  4805  0924  1618               	bsf	24,4	;volatile
  4806  0925                     l4394:	
  4807                           
  4808                           ;main.c: 366:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4809  0925  0833               	movf	UART_Init@baudrate,w
  4810  0926  00B5               	movwf	??_UART_Init
  4811  0927  0834               	movf	UART_Init@baudrate+1,w
  4812  0928  00B6               	movwf	??_UART_Init+1
  4813  0929  3000               	movlw	0
  4814  092A  1BB6               	btfsc	??_UART_Init+1,7
  4815  092B  30FF               	movlw	255
  4816  092C  00B7               	movwf	??_UART_Init+2
  4817  092D  00B8               	movwf	??_UART_Init+3
  4818  092E  3006               	movlw	6
  4819  092F                     u4345:	
  4820  092F  1003               	clrc
  4821  0930  0DB5               	rlf	??_UART_Init,f
  4822  0931  0DB6               	rlf	??_UART_Init+1,f
  4823  0932  0DB7               	rlf	??_UART_Init+2,f
  4824  0933  0DB8               	rlf	??_UART_Init+3,f
  4825  0934                     u4340:	
  4826  0934  3EFF               	addlw	-1
  4827  0935  1D03               	skipz
  4828  0936  292F               	goto	u4345
  4829  0937  0838               	movf	??_UART_Init+3,w
  4830  0938  00A7               	movwf	___aldiv@divisor+3
  4831  0939  0837               	movf	??_UART_Init+2,w
  4832  093A  00A6               	movwf	___aldiv@divisor+2
  4833  093B  0836               	movf	??_UART_Init+1,w
  4834  093C  00A5               	movwf	___aldiv@divisor+1
  4835  093D  0835               	movf	??_UART_Init,w
  4836  093E  00A4               	movwf	___aldiv@divisor
  4837  093F  3001               	movlw	1
  4838  0940  00AB               	movwf	___aldiv@dividend+3
  4839  0941  30E8               	movlw	232
  4840  0942  00AA               	movwf	___aldiv@dividend+2
  4841  0943  3048               	movlw	72
  4842  0944  00A9               	movwf	___aldiv@dividend+1
  4843  0945  3000               	movlw	0
  4844  0946  00A8               	movwf	___aldiv@dividend
  4845  0947  120A  158A  25D2  120A  158A  	fcall	___aldiv
  4846  094C  1283               	bcf	3,5	;RP0=0, select bank0
  4847  094D  1303               	bcf	3,6	;RP1=0, select bank0
  4848  094E  0824               	movf	?___aldiv,w
  4849  094F  3EFF               	addlw	255
  4850  0950  1683               	bsf	3,5	;RP0=1, select bank1
  4851  0951  1303               	bcf	3,6	;RP1=0, select bank1
  4852  0952  0099               	movwf	25	;volatile
  4853  0953                     l4396:	
  4854                           
  4855                           ;main.c: 367:     INTCONbits.GIE = 1;
  4856  0953  178B               	bsf	11,7	;volatile
  4857  0954                     l4398:	
  4858                           
  4859                           ;main.c: 368:     INTCONbits.PEIE = 1;
  4860  0954  170B               	bsf	11,6	;volatile
  4861  0955                     l4400:	
  4862                           
  4863                           ;main.c: 369:     PIE1bits.RCIE = 1;
  4864  0955  168C               	bsf	12,5	;volatile
  4865  0956                     l291:	
  4866  0956  0008               	return
  4867  0957                     __end_of_UART_Init:	
  4868                           
  4869                           	psect	text14
  4870  0DD2                     __ptext14:	
  4871 ;; *************** function ___aldiv *****************
  4872 ;; Defined at:
  4873 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;  divisor         4    4[BANK0 ] long 
  4876 ;;  dividend        4    8[BANK0 ] long 
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  quotient        4   15[BANK0 ] long 
  4879 ;;  sign            1   14[BANK0 ] unsigned char 
  4880 ;;  counter         1   13[BANK0 ] unsigned char 
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  4    4[BANK0 ] long 
  4883 ;; Registers used:
  4884 ;;		wreg, status,2, status,0
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4890 ;;      Params:         0       8       0       0       0
  4891 ;;      Locals:         0       6       0       0       0
  4892 ;;      Temps:          0       1       0       0       0
  4893 ;;      Totals:         0      15       0       0       0
  4894 ;;Total ram usage:       15 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    3
  4897 ;; This function calls:
  4898 ;;		Nothing
  4899 ;; This function is called by:
  4900 ;;		_UART_Init
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           
  4905                           ;psect for function ___aldiv
  4906  0DD2                     ___aldiv:	
  4907  0DD2                     l4112:	
  4908                           ;incstack = 0
  4909                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4910                           
  4911  0DD2  1283               	bcf	3,5	;RP0=0, select bank0
  4912  0DD3  1303               	bcf	3,6	;RP1=0, select bank0
  4913  0DD4  01AE               	clrf	___aldiv@sign
  4914  0DD5                     l4114:	
  4915  0DD5  1FA7               	btfss	___aldiv@divisor+3,7
  4916  0DD6  2DD8               	goto	u3871
  4917  0DD7  2DD9               	goto	u3870
  4918  0DD8                     u3871:	
  4919  0DD8  2DE6               	goto	l515
  4920  0DD9                     u3870:	
  4921  0DD9                     l4116:	
  4922  0DD9  09A4               	comf	___aldiv@divisor,f
  4923  0DDA  09A5               	comf	___aldiv@divisor+1,f
  4924  0DDB  09A6               	comf	___aldiv@divisor+2,f
  4925  0DDC  09A7               	comf	___aldiv@divisor+3,f
  4926  0DDD  0AA4               	incf	___aldiv@divisor,f
  4927  0DDE  1903               	skipnz
  4928  0DDF  0AA5               	incf	___aldiv@divisor+1,f
  4929  0DE0  1903               	skipnz
  4930  0DE1  0AA6               	incf	___aldiv@divisor+2,f
  4931  0DE2  1903               	skipnz
  4932  0DE3  0AA7               	incf	___aldiv@divisor+3,f
  4933  0DE4  01AE               	clrf	___aldiv@sign
  4934  0DE5  0AAE               	incf	___aldiv@sign,f
  4935  0DE6                     l515:	
  4936  0DE6  1FAB               	btfss	___aldiv@dividend+3,7
  4937  0DE7  2DE9               	goto	u3881
  4938  0DE8  2DEA               	goto	u3880
  4939  0DE9                     u3881:	
  4940  0DE9  2DF9               	goto	l4122
  4941  0DEA                     u3880:	
  4942  0DEA                     l4118:	
  4943  0DEA  09A8               	comf	___aldiv@dividend,f
  4944  0DEB  09A9               	comf	___aldiv@dividend+1,f
  4945  0DEC  09AA               	comf	___aldiv@dividend+2,f
  4946  0DED  09AB               	comf	___aldiv@dividend+3,f
  4947  0DEE  0AA8               	incf	___aldiv@dividend,f
  4948  0DEF  1903               	skipnz
  4949  0DF0  0AA9               	incf	___aldiv@dividend+1,f
  4950  0DF1  1903               	skipnz
  4951  0DF2  0AAA               	incf	___aldiv@dividend+2,f
  4952  0DF3  1903               	skipnz
  4953  0DF4  0AAB               	incf	___aldiv@dividend+3,f
  4954  0DF5                     l4120:	
  4955  0DF5  3001               	movlw	1
  4956  0DF6  00AC               	movwf	??___aldiv
  4957  0DF7  082C               	movf	??___aldiv,w
  4958  0DF8  06AE               	xorwf	___aldiv@sign,f
  4959  0DF9                     l4122:	
  4960  0DF9  3000               	movlw	0
  4961  0DFA  00B2               	movwf	___aldiv@quotient+3
  4962  0DFB  3000               	movlw	0
  4963  0DFC  00B1               	movwf	___aldiv@quotient+2
  4964  0DFD  3000               	movlw	0
  4965  0DFE  00B0               	movwf	___aldiv@quotient+1
  4966  0DFF  3000               	movlw	0
  4967  0E00  00AF               	movwf	___aldiv@quotient
  4968  0E01                     l4124:	
  4969  0E01  0827               	movf	___aldiv@divisor+3,w
  4970  0E02  0426               	iorwf	___aldiv@divisor+2,w
  4971  0E03  0425               	iorwf	___aldiv@divisor+1,w
  4972  0E04  0424               	iorwf	___aldiv@divisor,w
  4973  0E05  1903               	skipnz
  4974  0E06  2E08               	goto	u3891
  4975  0E07  2E09               	goto	u3890
  4976  0E08                     u3891:	
  4977  0E08  2E56               	goto	l4144
  4978  0E09                     u3890:	
  4979  0E09                     l4126:	
  4980  0E09  01AD               	clrf	___aldiv@counter
  4981  0E0A  0AAD               	incf	___aldiv@counter,f
  4982  0E0B  2E19               	goto	l4130
  4983  0E0C                     l4128:	
  4984  0E0C  3001               	movlw	1
  4985  0E0D  00AC               	movwf	??___aldiv
  4986  0E0E                     u3905:	
  4987  0E0E  1003               	clrc
  4988  0E0F  0DA4               	rlf	___aldiv@divisor,f
  4989  0E10  0DA5               	rlf	___aldiv@divisor+1,f
  4990  0E11  0DA6               	rlf	___aldiv@divisor+2,f
  4991  0E12  0DA7               	rlf	___aldiv@divisor+3,f
  4992  0E13  0BAC               	decfsz	??___aldiv,f
  4993  0E14  2E0E               	goto	u3905
  4994  0E15  3001               	movlw	1
  4995  0E16  00AC               	movwf	??___aldiv
  4996  0E17  082C               	movf	??___aldiv,w
  4997  0E18  07AD               	addwf	___aldiv@counter,f
  4998  0E19                     l4130:	
  4999  0E19  1FA7               	btfss	___aldiv@divisor+3,7
  5000  0E1A  2E1C               	goto	u3911
  5001  0E1B  2E1D               	goto	u3910
  5002  0E1C                     u3911:	
  5003  0E1C  2E0C               	goto	l4128
  5004  0E1D                     u3910:	
  5005  0E1D                     l4132:	
  5006  0E1D  3001               	movlw	1
  5007  0E1E  00AC               	movwf	??___aldiv
  5008  0E1F                     u3925:	
  5009  0E1F  1003               	clrc
  5010  0E20  0DAF               	rlf	___aldiv@quotient,f
  5011  0E21  0DB0               	rlf	___aldiv@quotient+1,f
  5012  0E22  0DB1               	rlf	___aldiv@quotient+2,f
  5013  0E23  0DB2               	rlf	___aldiv@quotient+3,f
  5014  0E24  0BAC               	decfsz	??___aldiv,f
  5015  0E25  2E1F               	goto	u3925
  5016  0E26                     l4134:	
  5017  0E26  0827               	movf	___aldiv@divisor+3,w
  5018  0E27  022B               	subwf	___aldiv@dividend+3,w
  5019  0E28  1D03               	skipz
  5020  0E29  2E34               	goto	u3935
  5021  0E2A  0826               	movf	___aldiv@divisor+2,w
  5022  0E2B  022A               	subwf	___aldiv@dividend+2,w
  5023  0E2C  1D03               	skipz
  5024  0E2D  2E34               	goto	u3935
  5025  0E2E  0825               	movf	___aldiv@divisor+1,w
  5026  0E2F  0229               	subwf	___aldiv@dividend+1,w
  5027  0E30  1D03               	skipz
  5028  0E31  2E34               	goto	u3935
  5029  0E32  0824               	movf	___aldiv@divisor,w
  5030  0E33  0228               	subwf	___aldiv@dividend,w
  5031  0E34                     u3935:	
  5032  0E34  1C03               	skipc
  5033  0E35  2E37               	goto	u3931
  5034  0E36  2E38               	goto	u3930
  5035  0E37                     u3931:	
  5036  0E37  2E47               	goto	l4140
  5037  0E38                     u3930:	
  5038  0E38                     l4136:	
  5039  0E38  0824               	movf	___aldiv@divisor,w
  5040  0E39  02A8               	subwf	___aldiv@dividend,f
  5041  0E3A  0825               	movf	___aldiv@divisor+1,w
  5042  0E3B  1C03               	skipc
  5043  0E3C  0F25               	incfsz	___aldiv@divisor+1,w
  5044  0E3D  02A9               	subwf	___aldiv@dividend+1,f
  5045  0E3E  0826               	movf	___aldiv@divisor+2,w
  5046  0E3F  1C03               	skipc
  5047  0E40  0F26               	incfsz	___aldiv@divisor+2,w
  5048  0E41  02AA               	subwf	___aldiv@dividend+2,f
  5049  0E42  0827               	movf	___aldiv@divisor+3,w
  5050  0E43  1C03               	skipc
  5051  0E44  0F27               	incfsz	___aldiv@divisor+3,w
  5052  0E45  02AB               	subwf	___aldiv@dividend+3,f
  5053  0E46                     l4138:	
  5054  0E46  142F               	bsf	___aldiv@quotient,0
  5055  0E47                     l4140:	
  5056  0E47  3001               	movlw	1
  5057  0E48                     u3945:	
  5058  0E48  1003               	clrc
  5059  0E49  0CA7               	rrf	___aldiv@divisor+3,f
  5060  0E4A  0CA6               	rrf	___aldiv@divisor+2,f
  5061  0E4B  0CA5               	rrf	___aldiv@divisor+1,f
  5062  0E4C  0CA4               	rrf	___aldiv@divisor,f
  5063  0E4D  3EFF               	addlw	-1
  5064  0E4E  1D03               	skipz
  5065  0E4F  2E48               	goto	u3945
  5066  0E50                     l4142:	
  5067  0E50  3001               	movlw	1
  5068  0E51  02AD               	subwf	___aldiv@counter,f
  5069  0E52  1D03               	btfss	3,2
  5070  0E53  2E55               	goto	u3951
  5071  0E54  2E56               	goto	u3950
  5072  0E55                     u3951:	
  5073  0E55  2E1D               	goto	l4132
  5074  0E56                     u3950:	
  5075  0E56                     l4144:	
  5076  0E56  082E               	movf	___aldiv@sign,w
  5077  0E57  1903               	btfsc	3,2
  5078  0E58  2E5A               	goto	u3961
  5079  0E59  2E5B               	goto	u3960
  5080  0E5A                     u3961:	
  5081  0E5A  2E66               	goto	l4148
  5082  0E5B                     u3960:	
  5083  0E5B                     l4146:	
  5084  0E5B  09AF               	comf	___aldiv@quotient,f
  5085  0E5C  09B0               	comf	___aldiv@quotient+1,f
  5086  0E5D  09B1               	comf	___aldiv@quotient+2,f
  5087  0E5E  09B2               	comf	___aldiv@quotient+3,f
  5088  0E5F  0AAF               	incf	___aldiv@quotient,f
  5089  0E60  1903               	skipnz
  5090  0E61  0AB0               	incf	___aldiv@quotient+1,f
  5091  0E62  1903               	skipnz
  5092  0E63  0AB1               	incf	___aldiv@quotient+2,f
  5093  0E64  1903               	skipnz
  5094  0E65  0AB2               	incf	___aldiv@quotient+3,f
  5095  0E66                     l4148:	
  5096  0E66  0832               	movf	___aldiv@quotient+3,w
  5097  0E67  00A7               	movwf	?___aldiv+3
  5098  0E68  0831               	movf	___aldiv@quotient+2,w
  5099  0E69  00A6               	movwf	?___aldiv+2
  5100  0E6A  0830               	movf	___aldiv@quotient+1,w
  5101  0E6B  00A5               	movwf	?___aldiv+1
  5102  0E6C  082F               	movf	___aldiv@quotient,w
  5103  0E6D  00A4               	movwf	?___aldiv
  5104  0E6E                     l525:	
  5105  0E6E  0008               	return
  5106  0E6F                     __end_of___aldiv:	
  5107                           
  5108                           	psect	text15
  5109  0CBA                     __ptext15:	
  5110 ;; *************** function _ShowDigitsOnDisplay *****************
  5111 ;; Defined at:
  5112 ;;		line 485 in file "main.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;		None
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;		None
  5117 ;; Return value:  Size  Location     Type
  5118 ;;                  1    wreg      void 
  5119 ;; Registers used:
  5120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5126 ;;      Params:         0       0       0       0       0
  5127 ;;      Locals:         0       0       0       0       0
  5128 ;;      Temps:          0       2       0       0       0
  5129 ;;      Totals:         0       2       0       0       0
  5130 ;;Total ram usage:        2 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; Hardware stack levels required when called:    4
  5133 ;; This function calls:
  5134 ;;		_SetDisplay
  5135 ;;		___awmod
  5136 ;; This function is called by:
  5137 ;;		_main
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           
  5142                           ;psect for function _ShowDigitsOnDisplay
  5143  0CBA                     _ShowDigitsOnDisplay:	
  5144  0CBA                     l4468:	
  5145                           ;incstack = 0
  5146                           ; Regs used in _ShowDigitsOnDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5147                           
  5148                           
  5149                           ;main.c: 487:     switch (disp)
  5150  0CBA  2D08               	goto	l4484
  5151  0CBB                     l4470:	
  5152                           
  5153                           ;main.c: 490:         if (centinaia > 0)
  5154  0CBB  085B               	movf	_centinaia,w
  5155  0CBC  1903               	btfsc	3,2
  5156  0CBD  2CBF               	goto	u4391
  5157  0CBE  2CC0               	goto	u4390
  5158  0CBF                     u4391:	
  5159  0CBF  2D1D               	goto	l4486
  5160  0CC0                     u4390:	
  5161  0CC0                     l4472:	
  5162                           
  5163                           ;main.c: 491:         {;main.c: 492:             SetDisplay(1, 0, 0, display[centinaia])
      +                          ;
  5164  0CC0  01A4               	clrf	SetDisplay@d2
  5165  0CC1  01A5               	clrf	SetDisplay@d3
  5166  0CC2  085B               	movf	_centinaia,w
  5167  0CC3  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  5168  0CC4  0084               	movwf	4
  5169  0CC5  160A  118A  2000  120A  158A  	fcall	stringdir
  5170  0CCA  00AB               	movwf	??_ShowDigitsOnDisplay
  5171  0CCB  082B               	movf	??_ShowDigitsOnDisplay,w
  5172  0CCC  00A6               	movwf	SetDisplay@value
  5173  0CCD  3001               	movlw	1
  5174  0CCE  120A  158A  2024  120A  158A  	fcall	_SetDisplay
  5175  0CD3  2D1D               	goto	l4486
  5176  0CD4                     l4474:	
  5177                           
  5178                           ;main.c: 496:         if (decine > 0 || centinaia > 0)
  5179  0CD4  085C               	movf	_decine,w
  5180  0CD5  1D03               	btfss	3,2
  5181  0CD6  2CD8               	goto	u4401
  5182  0CD7  2CD9               	goto	u4400
  5183  0CD8                     u4401:	
  5184  0CD8  2CDE               	goto	l4478
  5185  0CD9                     u4400:	
  5186  0CD9                     l4476:	
  5187  0CD9  085B               	movf	_centinaia,w
  5188  0CDA  1903               	btfsc	3,2
  5189  0CDB  2CDD               	goto	u4411
  5190  0CDC  2CDE               	goto	u4410
  5191  0CDD                     u4411:	
  5192  0CDD  2D1D               	goto	l4486
  5193  0CDE                     u4410:	
  5194  0CDE                     l4478:	
  5195                           
  5196                           ;main.c: 497:         {;main.c: 498:             SetDisplay(0, 1, 0, display[decine]);
  5197  0CDE  01A4               	clrf	SetDisplay@d2
  5198  0CDF  0AA4               	incf	SetDisplay@d2,f
  5199  0CE0  01A5               	clrf	SetDisplay@d3
  5200  0CE1  085C               	movf	_decine,w
  5201  0CE2  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  5202  0CE3  0084               	movwf	4
  5203  0CE4  160A  118A  2000  120A  158A  	fcall	stringdir
  5204  0CE9  00AB               	movwf	??_ShowDigitsOnDisplay
  5205  0CEA  082B               	movf	??_ShowDigitsOnDisplay,w
  5206  0CEB  00A6               	movwf	SetDisplay@value
  5207  0CEC  3000               	movlw	0
  5208  0CED  120A  158A  2024  120A  158A  	fcall	_SetDisplay
  5209  0CF2  2D1D               	goto	l4486
  5210  0CF3                     l4480:	
  5211                           
  5212                           ;main.c: 502:         SetDisplay(0, 0, 1, display[unita]);
  5213  0CF3  01A4               	clrf	SetDisplay@d2
  5214  0CF4  01A5               	clrf	SetDisplay@d3
  5215  0CF5  0AA5               	incf	SetDisplay@d3,f
  5216  0CF6  085D               	movf	_unita,w
  5217  0CF7  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  5218  0CF8  0084               	movwf	4
  5219  0CF9  160A  118A  2000  120A  158A  	fcall	stringdir
  5220  0CFE  00AB               	movwf	??_ShowDigitsOnDisplay
  5221  0CFF  082B               	movf	??_ShowDigitsOnDisplay,w
  5222  0D00  00A6               	movwf	SetDisplay@value
  5223  0D01  3000               	movlw	0
  5224  0D02  120A  158A  2024  120A  158A  	fcall	_SetDisplay
  5225                           
  5226                           ;main.c: 503:         break;
  5227  0D07  2D1D               	goto	l4486
  5228  0D08                     l4484:	
  5229  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  5230  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  5231  0D0A  0852               	movf	_disp,w
  5232  0D0B  00AB               	movwf	??_ShowDigitsOnDisplay
  5233  0D0C  01AC               	clrf	??_ShowDigitsOnDisplay+1
  5234                           
  5235                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5236                           ; Switch size 1, requested type "simple"
  5237                           ; Number of cases is 1, Range of values is 0 to 0
  5238                           ; switch strategies available:
  5239                           ; Name         Instructions Cycles
  5240                           ; simple_byte            4     3 (average)
  5241                           ; direct_byte           11     8 (fixed)
  5242                           ; jumptable            260     6 (fixed)
  5243                           ;	Chosen strategy is simple_byte
  5244  0D0D  082C               	movf	??_ShowDigitsOnDisplay+1,w
  5245  0D0E  3A00               	xorlw	0	; case 0
  5246  0D0F  1903               	skipnz
  5247  0D10  2D12               	goto	l4920
  5248  0D11  2D1D               	goto	l4486
  5249  0D12                     l4920:	
  5250                           
  5251                           ; Switch size 1, requested type "simple"
  5252                           ; Number of cases is 3, Range of values is 0 to 2
  5253                           ; switch strategies available:
  5254                           ; Name         Instructions Cycles
  5255                           ; simple_byte           10     6 (average)
  5256                           ; direct_byte           17     8 (fixed)
  5257                           ; jumptable            260     6 (fixed)
  5258                           ;	Chosen strategy is simple_byte
  5259  0D12  082B               	movf	??_ShowDigitsOnDisplay,w
  5260  0D13  3A00               	xorlw	0	; case 0
  5261  0D14  1903               	skipnz
  5262  0D15  2CBB               	goto	l4470
  5263  0D16  3A01               	xorlw	1	; case 1
  5264  0D17  1903               	skipnz
  5265  0D18  2CD4               	goto	l4474
  5266  0D19  3A03               	xorlw	3	; case 2
  5267  0D1A  1903               	skipnz
  5268  0D1B  2CF3               	goto	l4480
  5269  0D1C  2D1D               	goto	l4486
  5270  0D1D                     l4486:	
  5271                           
  5272                           ;main.c: 505:     disp = (disp + 1) % 3;
  5273  0D1D  3003               	movlw	3
  5274  0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  5275  0D1F  1303               	bcf	3,6	;RP1=0, select bank0
  5276  0D20  00A4               	movwf	___awmod@divisor
  5277  0D21  3000               	movlw	0
  5278  0D22  00A5               	movwf	___awmod@divisor+1
  5279  0D23  0852               	movf	_disp,w
  5280  0D24  3E01               	addlw	1
  5281  0D25  00A6               	movwf	___awmod@dividend
  5282  0D26  3000               	movlw	0
  5283  0D27  1803               	skipnc
  5284  0D28  3001               	movlw	1
  5285  0D29  00A7               	movwf	___awmod@dividend+1
  5286  0D2A  120A  158A  2323  120A  158A  	fcall	___awmod
  5287  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  5288  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  5289  0D31  0824               	movf	?___awmod,w
  5290  0D32  00AB               	movwf	??_ShowDigitsOnDisplay
  5291  0D33  082B               	movf	??_ShowDigitsOnDisplay,w
  5292  0D34  00D2               	movwf	_disp
  5293  0D35                     l354:	
  5294  0D35  0008               	return
  5295  0D36                     __end_of_ShowDigitsOnDisplay:	
  5296                           
  5297                           	psect	text16
  5298  0824                     __ptext16:	
  5299 ;; *************** function _SetDisplay *****************
  5300 ;; Defined at:
  5301 ;;		line 408 in file "main.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;  d1              1    wreg     unsigned char 
  5304 ;;  d2              1    4[BANK0 ] unsigned char 
  5305 ;;  d3              1    5[BANK0 ] unsigned char 
  5306 ;;  value           1    6[BANK0 ] unsigned char 
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;  d1              1    7[BANK0 ] unsigned char 
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  1    wreg      void 
  5311 ;; Registers used:
  5312 ;;		wreg, status,0
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5318 ;;      Params:         0       3       0       0       0
  5319 ;;      Locals:         0       1       0       0       0
  5320 ;;      Temps:          0       0       0       0       0
  5321 ;;      Totals:         0       4       0       0       0
  5322 ;;Total ram usage:        4 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    3
  5325 ;; This function calls:
  5326 ;;		Nothing
  5327 ;; This function is called by:
  5328 ;;		_ShowDigitsOnDisplay
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           
  5333                           ;psect for function _SetDisplay
  5334  0824                     _SetDisplay:	
  5335                           
  5336                           ;incstack = 0
  5337                           ; Regs used in _SetDisplay: [wreg+status,0]
  5338                           ;SetDisplay@d1 stored from wreg
  5339  0824  1283               	bcf	3,5	;RP0=0, select bank0
  5340  0825  1303               	bcf	3,6	;RP1=0, select bank0
  5341  0826  00A7               	movwf	SetDisplay@d1
  5342  0827                     l4066:	
  5343                           
  5344                           ;main.c: 408: void SetDisplay(char d1, char d2, char d3, char value);main.c: 409: {;main
      +                          .c: 410:     PORTAbits.RA2 = d1;
  5345  0827  0C27               	rrf	SetDisplay@d1,w
  5346  0828  1C03               	skipc
  5347  0829  1105               	bcf	5,2	;volatile
  5348  082A  1803               	skipnc
  5349  082B  1505               	bsf	5,2	;volatile
  5350                           
  5351                           ;main.c: 411:     PORTAbits.RA3 = d2;
  5352  082C  0C24               	rrf	SetDisplay@d2,w
  5353  082D  1C03               	skipc
  5354  082E  1185               	bcf	5,3	;volatile
  5355  082F  1803               	skipnc
  5356  0830  1585               	bsf	5,3	;volatile
  5357                           
  5358                           ;main.c: 412:     PORTAbits.RA4 = d3;
  5359  0831  0C25               	rrf	SetDisplay@d3,w
  5360  0832  1C03               	skipc
  5361  0833  1205               	bcf	5,4	;volatile
  5362  0834  1803               	skipnc
  5363  0835  1605               	bsf	5,4	;volatile
  5364  0836                     l4068:	
  5365                           
  5366                           ;main.c: 413:     PORTD = value;
  5367  0836  0826               	movf	SetDisplay@value,w
  5368  0837  0088               	movwf	8	;volatile
  5369  0838                     l317:	
  5370  0838  0008               	return
  5371  0839                     __end_of_SetDisplay:	
  5372                           
  5373                           	psect	text17
  5374  0C4C                     __ptext17:	
  5375 ;; *************** function _SetReceivedTimes *****************
  5376 ;; Defined at:
  5377 ;;		line 86 in file "./CustomLib/TrafficLight.h"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;  _dataFromGat    1    wreg     PTR unsigned char 
  5380 ;;		 -> dataFromGateway(15), 
  5381 ;;  _semafori       1   12[BANK0 ] PTR PTR struct .
  5382 ;;		 -> Semafori(8), 
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;  _dataFromGat    1   23[BANK0 ] PTR unsigned char 
  5385 ;;		 -> dataFromGateway(15), 
  5386 ;;  index           1   24[BANK0 ] unsigned char 
  5387 ;;  colorId         1   22[BANK0 ] unsigned char 
  5388 ;;  semaforoId      1   21[BANK0 ] unsigned char 
  5389 ;;  i               1   25[BANK0 ] unsigned char 
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  1    wreg      void 
  5392 ;; Registers used:
  5393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5399 ;;      Params:         0       1       0       0       0
  5400 ;;      Locals:         0       5       0       0       0
  5401 ;;      Temps:          0       8       0       0       0
  5402 ;;      Totals:         0      14       0       0       0
  5403 ;;Total ram usage:       14 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    4
  5406 ;; This function calls:
  5407 ;;		_GetTime
  5408 ;;		___bmul
  5409 ;; This function is called by:
  5410 ;;		_main
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           
  5415                           ;psect for function _SetReceivedTimes
  5416  0C4C                     _SetReceivedTimes:	
  5417                           
  5418                           ;incstack = 0
  5419                           ; Regs used in _SetReceivedTimes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5420                           ;SetReceivedTimes@_dataFromGateway stored from wreg
  5421  0C4C  1283               	bcf	3,5	;RP0=0, select bank0
  5422  0C4D  1303               	bcf	3,6	;RP1=0, select bank0
  5423  0C4E  00B7               	movwf	SetReceivedTimes@_dataFromGateway
  5424  0C4F                     l4366:	
  5425                           
  5426                           ;./CustomLib/TrafficLight.h: 86: void SetReceivedTimes(ProtocolBytes _dataFromGateway, _
      +                          Semafori _semafori);./CustomLib/TrafficLight.h: 87: {;./CustomLib/TrafficLight.h: 88:   
      +                            for (unsigned char i = 0; i < 3; i++)
  5427  0C4F  01B9               	clrf	SetReceivedTimes@i
  5428  0C50                     l4368:	
  5429  0C50  3003               	movlw	3
  5430  0C51  0239               	subwf	SetReceivedTimes@i,w
  5431  0C52  1C03               	skipc
  5432  0C53  2C55               	goto	u4321
  5433  0C54  2C56               	goto	u4320
  5434  0C55                     u4321:	
  5435  0C55  2C57               	goto	l4372
  5436  0C56                     u4320:	
  5437  0C56  2CB9               	goto	l174
  5438  0C57                     l4372:	
  5439                           
  5440                           ;./CustomLib/TrafficLight.h: 89:     {;./CustomLib/TrafficLight.h: 90:         unsigned 
      +                          char index = i * 5;
  5441  0C57  3005               	movlw	5
  5442  0C58  00AD               	movwf	??_SetReceivedTimes
  5443  0C59  082D               	movf	??_SetReceivedTimes,w
  5444  0C5A  00A4               	movwf	___bmul@multiplicand
  5445  0C5B  0839               	movf	SetReceivedTimes@i,w
  5446  0C5C  120A  118A  27E5  120A  158A  	fcall	___bmul
  5447  0C61  1283               	bcf	3,5	;RP0=0, select bank0
  5448  0C62  1303               	bcf	3,6	;RP1=0, select bank0
  5449  0C63  00AE               	movwf	??_SetReceivedTimes+1
  5450  0C64  082E               	movf	??_SetReceivedTimes+1,w
  5451  0C65  00B8               	movwf	SetReceivedTimes@index
  5452  0C66                     l4374:	
  5453                           
  5454                           ;./CustomLib/TrafficLight.h: 91:         unsigned char semaforoId = (_dataFromGateway[in
      +                          dex] >> 1) & 0x0F;
  5455  0C66  0838               	movf	SetReceivedTimes@index,w
  5456  0C67  0737               	addwf	SetReceivedTimes@_dataFromGateway,w
  5457  0C68  00AD               	movwf	??_SetReceivedTimes
  5458  0C69  082D               	movf	??_SetReceivedTimes,w
  5459  0C6A  0084               	movwf	4
  5460  0C6B  1383               	bcf	3,7	;select IRP bank0
  5461  0C6C  0800               	movf	0,w
  5462  0C6D  00AE               	movwf	??_SetReceivedTimes+1
  5463  0C6E  1003               	clrc
  5464  0C6F  0C2E               	rrf	??_SetReceivedTimes+1,w
  5465  0C70  390F               	andlw	15
  5466  0C71  00AF               	movwf	??_SetReceivedTimes+2
  5467  0C72  082F               	movf	??_SetReceivedTimes+2,w
  5468  0C73  00B5               	movwf	SetReceivedTimes@semaforoId
  5469  0C74                     l4376:	
  5470                           
  5471                           ;./CustomLib/TrafficLight.h: 92:         unsigned char colorId = ((_dataFromGateway[inde
      +                          x] >> 5) & 0x03) - 1;
  5472  0C74  0838               	movf	SetReceivedTimes@index,w
  5473  0C75  0737               	addwf	SetReceivedTimes@_dataFromGateway,w
  5474  0C76  00AD               	movwf	??_SetReceivedTimes
  5475  0C77  082D               	movf	??_SetReceivedTimes,w
  5476  0C78  0084               	movwf	4
  5477  0C79  0800               	movf	0,w
  5478  0C7A  00AE               	movwf	??_SetReceivedTimes+1
  5479  0C7B  3005               	movlw	5
  5480  0C7C                     u4335:	
  5481  0C7C  1003               	clrc
  5482  0C7D  0CAE               	rrf	??_SetReceivedTimes+1,f
  5483  0C7E  3EFF               	addlw	-1
  5484  0C7F  1D03               	skipz
  5485  0C80  2C7C               	goto	u4335
  5486  0C81  082E               	movf	??_SetReceivedTimes+1,w
  5487  0C82  3903               	andlw	3
  5488  0C83  3EFF               	addlw	255
  5489  0C84  00AF               	movwf	??_SetReceivedTimes+2
  5490  0C85  082F               	movf	??_SetReceivedTimes+2,w
  5491  0C86  00B6               	movwf	SetReceivedTimes@colorId
  5492  0C87                     l4378:	
  5493                           
  5494                           ;./CustomLib/TrafficLight.h: 94:         (*(_semafori)[semaforoId]).new_times[colorId] =
      +                           GetTime(index, _dataFromGateway);
  5495  0C87  0837               	movf	SetReceivedTimes@_dataFromGateway,w
  5496  0C88  00AD               	movwf	??_SetReceivedTimes
  5497  0C89  082D               	movf	??_SetReceivedTimes,w
  5498  0C8A  00A4               	movwf	GetTime@_dataFromGateway
  5499  0C8B  0838               	movf	SetReceivedTimes@index,w
  5500  0C8C  120A  158A  2157  120A  158A  	fcall	_GetTime
  5501  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  5502  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  5503  0C93  0835               	movf	SetReceivedTimes@semaforoId,w
  5504  0C94  00AE               	movwf	??_SetReceivedTimes+1
  5505  0C95  072E               	addwf	??_SetReceivedTimes+1,w
  5506  0C96  072C               	addwf	SetReceivedTimes@_semafori,w
  5507  0C97  00AF               	movwf	??_SetReceivedTimes+2
  5508  0C98  082F               	movf	??_SetReceivedTimes+2,w
  5509  0C99  0084               	movwf	4
  5510  0C9A  1383               	bcf	3,7	;select IRP bank0
  5511  0C9B  0800               	movf	0,w
  5512  0C9C  00B0               	movwf	??_SetReceivedTimes+3
  5513  0C9D  0A84               	incf	4,f
  5514  0C9E  0800               	movf	0,w
  5515  0C9F  00B1               	movwf	??_SetReceivedTimes+4
  5516  0CA0  0836               	movf	SetReceivedTimes@colorId,w
  5517  0CA1  00B2               	movwf	??_SetReceivedTimes+5
  5518  0CA2  0732               	addwf	??_SetReceivedTimes+5,w
  5519  0CA3  3E06               	addlw	6
  5520  0CA4  0730               	addwf	??_SetReceivedTimes+3,w
  5521  0CA5  00B3               	movwf	??_SetReceivedTimes+6
  5522  0CA6  0831               	movf	??_SetReceivedTimes+4,w
  5523  0CA7  1803               	skipnc
  5524  0CA8  3E01               	addlw	1
  5525  0CA9  00B4               	movwf	??_SetReceivedTimes+7
  5526  0CAA  0833               	movf	??_SetReceivedTimes+6,w
  5527  0CAB  0084               	movwf	4
  5528  0CAC  1783               	bsf	3,7
  5529  0CAD  1C34               	btfss	??_SetReceivedTimes+7,0
  5530  0CAE  1383               	bcf	3,7
  5531  0CAF  0824               	movf	?_GetTime,w
  5532  0CB0  0080               	movwf	0
  5533  0CB1  0A84               	incf	4,f
  5534  0CB2  0825               	movf	?_GetTime+1,w
  5535  0CB3  0080               	movwf	0
  5536  0CB4                     l4380:	
  5537                           
  5538                           ;./CustomLib/TrafficLight.h: 95:     }
  5539  0CB4  3001               	movlw	1
  5540  0CB5  00AD               	movwf	??_SetReceivedTimes
  5541  0CB6  082D               	movf	??_SetReceivedTimes,w
  5542  0CB7  07B9               	addwf	SetReceivedTimes@i,f
  5543  0CB8  2C50               	goto	l4368
  5544  0CB9                     l174:	
  5545  0CB9  0008               	return
  5546  0CBA                     __end_of_SetReceivedTimes:	
  5547                           
  5548                           	psect	text18
  5549  07E5                     __ptext18:	
  5550 ;; *************** function ___bmul *****************
  5551 ;; Defined at:
  5552 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;  multiplier      1    wreg     unsigned char 
  5555 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;  multiplier      1    7[BANK0 ] unsigned char 
  5558 ;;  product         1    6[BANK0 ] unsigned char 
  5559 ;; Return value:  Size  Location     Type
  5560 ;;                  1    wreg      unsigned char 
  5561 ;; Registers used:
  5562 ;;		wreg, status,2, status,0
  5563 ;; Tracked objects:
  5564 ;;		On entry : 0/0
  5565 ;;		On exit  : 0/0
  5566 ;;		Unchanged: 0/0
  5567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5568 ;;      Params:         0       1       0       0       0
  5569 ;;      Locals:         0       2       0       0       0
  5570 ;;      Temps:          0       1       0       0       0
  5571 ;;      Totals:         0       4       0       0       0
  5572 ;;Total ram usage:        4 bytes
  5573 ;; Hardware stack levels used:    1
  5574 ;; Hardware stack levels required when called:    3
  5575 ;; This function calls:
  5576 ;;		Nothing
  5577 ;; This function is called by:
  5578 ;;		_SetReceivedTimes
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           
  5583                           ;psect for function ___bmul
  5584  07E5                     ___bmul:	
  5585                           
  5586                           ;incstack = 0
  5587                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5588                           ;___bmul@multiplier stored from wreg
  5589  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  5590  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  5591  07E7  00A7               	movwf	___bmul@multiplier
  5592  07E8                     l4098:	
  5593  07E8  01A6               	clrf	___bmul@product
  5594  07E9                     l4100:	
  5595  07E9  1C27               	btfss	___bmul@multiplier,0
  5596  07EA  2FEC               	goto	u3851
  5597  07EB  2FED               	goto	u3850
  5598  07EC                     u3851:	
  5599  07EC  2FF1               	goto	l4104
  5600  07ED                     u3850:	
  5601  07ED                     l4102:	
  5602  07ED  0824               	movf	___bmul@multiplicand,w
  5603  07EE  00A5               	movwf	??___bmul
  5604  07EF  0825               	movf	??___bmul,w
  5605  07F0  07A6               	addwf	___bmul@product,f
  5606  07F1                     l4104:	
  5607  07F1  1003               	clrc
  5608  07F2  0DA4               	rlf	___bmul@multiplicand,f
  5609  07F3                     l4106:	
  5610  07F3  1003               	clrc
  5611  07F4  0CA7               	rrf	___bmul@multiplier,f
  5612  07F5  0827               	movf	___bmul@multiplier,w
  5613  07F6  1D03               	btfss	3,2
  5614  07F7  2FF9               	goto	u3861
  5615  07F8  2FFA               	goto	u3860
  5616  07F9                     u3861:	
  5617  07F9  2FE9               	goto	l4100
  5618  07FA                     u3860:	
  5619  07FA                     l4108:	
  5620  07FA  0826               	movf	___bmul@product,w
  5621  07FB                     l476:	
  5622  07FB  0008               	return
  5623  07FC                     __end_of___bmul:	
  5624                           
  5625                           	psect	text19
  5626  0957                     __ptext19:	
  5627 ;; *************** function _GetTime *****************
  5628 ;; Defined at:
  5629 ;;		line 37 in file "./CustomLib/TrafficLight.h"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;  index           1    wreg     unsigned char 
  5632 ;;  _dataFromGat    1    4[BANK0 ] PTR unsigned char 
  5633 ;;		 -> dataFromGateway(15), 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  index           1    8[BANK0 ] unsigned char 
  5636 ;;  tmp             2   10[BANK0 ] int 
  5637 ;;  shortInt        1    9[BANK0 ] struct .
  5638 ;; Return value:  Size  Location     Type
  5639 ;;                  2    4[BANK0 ] int 
  5640 ;; Registers used:
  5641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5647 ;;      Params:         0       2       0       0       0
  5648 ;;      Locals:         0       4       0       0       0
  5649 ;;      Temps:          0       2       0       0       0
  5650 ;;      Totals:         0       8       0       0       0
  5651 ;;Total ram usage:        8 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    3
  5654 ;; This function calls:
  5655 ;;		Nothing
  5656 ;; This function is called by:
  5657 ;;		_SetReceivedTimes
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           
  5662                           ;psect for function _GetTime
  5663  0957                     _GetTime:	
  5664                           
  5665                           ;incstack = 0
  5666                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  5667                           ;GetTime@index stored from wreg
  5668  0957  1283               	bcf	3,5	;RP0=0, select bank0
  5669  0958  1303               	bcf	3,6	;RP1=0, select bank0
  5670  0959  00A8               	movwf	GetTime@index
  5671  095A                     l4048:	
  5672                           
  5673                           ;./CustomLib/TrafficLight.h: 37: int GetTime(unsigned char index, ProtocolBytes _dataFro
      +                          mGateway);./CustomLib/TrafficLight.h: 38: {;./CustomLib/TrafficLight.h: 39:     int tmp;
      +                          ;./CustomLib/TrafficLight.h: 43:     } shortInt;;./CustomLib/TrafficLight.h: 45:     sho
      +                          rtInt.Val = _dataFromGateway[index + 3] & 0x7F;
  5674  095A  0828               	movf	GetTime@index,w
  5675  095B  0724               	addwf	GetTime@_dataFromGateway,w
  5676  095C  00A6               	movwf	??_GetTime
  5677  095D  0826               	movf	??_GetTime,w
  5678  095E  3E03               	addlw	3
  5679  095F  0084               	movwf	4
  5680  0960  307F               	movlw	127
  5681  0961  1383               	bcf	3,7	;select IRP bank0
  5682  0962  0500               	andwf	0,w
  5683  0963  00A7               	movwf	??_GetTime+1
  5684  0964  0829               	movf	GetTime@shortInt,w
  5685  0965  0627               	xorwf	??_GetTime+1,w
  5686  0966  3980               	andlw	-128
  5687  0967  0627               	xorwf	??_GetTime+1,w
  5688  0968  00A9               	movwf	GetTime@shortInt
  5689  0969                     l4050:	
  5690                           
  5691                           ;./CustomLib/TrafficLight.h: 46:     tmp = shortInt.Val;
  5692  0969  0829               	movf	GetTime@shortInt,w
  5693  096A  397F               	andlw	127
  5694  096B  00A6               	movwf	??_GetTime
  5695  096C  01A7               	clrf	??_GetTime+1
  5696  096D  0826               	movf	??_GetTime,w
  5697  096E  00AA               	movwf	GetTime@tmp
  5698  096F  0827               	movf	??_GetTime+1,w
  5699  0970  00AB               	movwf	GetTime@tmp+1
  5700  0971                     l4052:	
  5701                           
  5702                           ;./CustomLib/TrafficLight.h: 47:     tmp = (tmp << 7) & 0x80;
  5703  0971  082B               	movf	GetTime@tmp+1,w
  5704  0972  00A7               	movwf	??_GetTime+1
  5705  0973  082A               	movf	GetTime@tmp,w
  5706  0974  00A6               	movwf	??_GetTime
  5707  0975  3007               	movlw	7
  5708  0976  00FF               	movwf	btemp+1
  5709  0977                     u3745:	
  5710  0977  1003               	clrc
  5711  0978  0DA6               	rlf	??_GetTime,f
  5712  0979  0DA7               	rlf	??_GetTime+1,f
  5713  097A  0BFF               	decfsz	btemp+1,f
  5714  097B  2977               	goto	u3745
  5715  097C  3080               	movlw	128
  5716  097D  0526               	andwf	??_GetTime,w
  5717  097E  00AA               	movwf	GetTime@tmp
  5718  097F  3000               	movlw	0
  5719  0980  0527               	andwf	??_GetTime+1,w
  5720  0981  00AB               	movwf	GetTime@tmp+1
  5721  0982                     l4054:	
  5722                           
  5723                           ;./CustomLib/TrafficLight.h: 49:     shortInt.Val = _dataFromGateway[index + 2] & 0x7F;
  5724  0982  0828               	movf	GetTime@index,w
  5725  0983  0724               	addwf	GetTime@_dataFromGateway,w
  5726  0984  00A6               	movwf	??_GetTime
  5727  0985  0826               	movf	??_GetTime,w
  5728  0986  3E02               	addlw	2
  5729  0987  0084               	movwf	4
  5730  0988  307F               	movlw	127
  5731  0989  0500               	andwf	0,w
  5732  098A  00A7               	movwf	??_GetTime+1
  5733  098B  0829               	movf	GetTime@shortInt,w
  5734  098C  0627               	xorwf	??_GetTime+1,w
  5735  098D  3980               	andlw	-128
  5736  098E  0627               	xorwf	??_GetTime+1,w
  5737  098F  00A9               	movwf	GetTime@shortInt
  5738  0990                     l4056:	
  5739                           
  5740                           ;./CustomLib/TrafficLight.h: 50:     tmp = tmp | shortInt.Val;
  5741  0990  0829               	movf	GetTime@shortInt,w
  5742  0991  397F               	andlw	127
  5743  0992  00A6               	movwf	??_GetTime
  5744  0993  082A               	movf	GetTime@tmp,w
  5745  0994  0426               	iorwf	??_GetTime,w
  5746  0995  00AA               	movwf	GetTime@tmp
  5747  0996  082B               	movf	GetTime@tmp+1,w
  5748  0997  00AB               	movwf	GetTime@tmp+1
  5749  0998                     l4058:	
  5750                           
  5751                           ;./CustomLib/TrafficLight.h: 52:     return tmp;
  5752  0998  082B               	movf	GetTime@tmp+1,w
  5753  0999  00A5               	movwf	?_GetTime+1
  5754  099A  082A               	movf	GetTime@tmp,w
  5755  099B  00A4               	movwf	?_GetTime
  5756  099C                     l157:	
  5757  099C  0008               	return
  5758  099D                     __end_of_GetTime:	
  5759                           
  5760                           	psect	text20
  5761  057C                     __ptext20:	
  5762 ;; *************** function _SetDefaultTimers *****************
  5763 ;; Defined at:
  5764 ;;		line 56 in file "./CustomLib/TrafficLight.h"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;  rosso           2    4[BANK0 ] int 
  5767 ;;  verde           2    6[BANK0 ] int 
  5768 ;;  giallo          2    8[BANK0 ] int 
  5769 ;;  _semafori       1   10[BANK0 ] PTR PTR struct .
  5770 ;;		 -> Semafori(8), 
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;  i               1   19[BANK0 ] unsigned char 
  5773 ;;  l               1   18[BANK0 ] unsigned char 
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      void 
  5776 ;; Registers used:
  5777 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5783 ;;      Params:         0       7       0       0       0
  5784 ;;      Locals:         0       2       0       0       0
  5785 ;;      Temps:          0       7       0       0       0
  5786 ;;      Totals:         0      16       0       0       0
  5787 ;;Total ram usage:       16 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    3
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_main
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           
  5798                           ;psect for function _SetDefaultTimers
  5799  057C                     _SetDefaultTimers:	
  5800  057C                     l4330:	
  5801                           ;incstack = 0
  5802                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  5803                           
  5804                           
  5805                           ;./CustomLib/TrafficLight.h: 56: void SetDefaultTimers(int rosso, int verde, int giallo,
      +                           _Semafori _semafori);./CustomLib/TrafficLight.h: 57: {;./CustomLib/TrafficLight.h: 58: 
      +                              for (unsigned char l = 0; l < n_semafori; l++)
  5806  057C  1283               	bcf	3,5	;RP0=0, select bank0
  5807  057D  1303               	bcf	3,6	;RP1=0, select bank0
  5808  057E  01B2               	clrf	SetDefaultTimers@l
  5809  057F                     l4336:	
  5810                           
  5811                           ;./CustomLib/TrafficLight.h: 59:     {;./CustomLib/TrafficLight.h: 60:         for (unsi
      +                          gned char i = 0; i < 3; i++)
  5812  057F  01B3               	clrf	SetDefaultTimers@i
  5813  0580  2E47               	goto	l4350
  5814  0581                     l4342:	
  5815                           
  5816                           ;./CustomLib/TrafficLight.h: 65:                 (*(_semafori)[l]).times[i] = rosso;
  5817  0581  0832               	movf	SetDefaultTimers@l,w
  5818  0582  00AB               	movwf	??_SetDefaultTimers
  5819  0583  072B               	addwf	??_SetDefaultTimers,w
  5820  0584  072A               	addwf	SetDefaultTimers@_semafori,w
  5821  0585  00AC               	movwf	??_SetDefaultTimers+1
  5822  0586  082C               	movf	??_SetDefaultTimers+1,w
  5823  0587  0084               	movwf	4
  5824  0588  1383               	bcf	3,7	;select IRP bank0
  5825  0589  0800               	movf	0,w
  5826  058A  00AD               	movwf	??_SetDefaultTimers+2
  5827  058B  0A84               	incf	4,f
  5828  058C  0800               	movf	0,w
  5829  058D  00AE               	movwf	??_SetDefaultTimers+3
  5830  058E  0833               	movf	SetDefaultTimers@i,w
  5831  058F  00AF               	movwf	??_SetDefaultTimers+4
  5832  0590  072F               	addwf	??_SetDefaultTimers+4,w
  5833  0591  072D               	addwf	??_SetDefaultTimers+2,w
  5834  0592  00B0               	movwf	??_SetDefaultTimers+5
  5835  0593  082E               	movf	??_SetDefaultTimers+3,w
  5836  0594  1803               	skipnc
  5837  0595  3E01               	addlw	1
  5838  0596  00B1               	movwf	??_SetDefaultTimers+6
  5839  0597  0830               	movf	??_SetDefaultTimers+5,w
  5840  0598  0084               	movwf	4
  5841  0599  1783               	bsf	3,7
  5842  059A  1C31               	btfss	??_SetDefaultTimers+6,0
  5843  059B  1383               	bcf	3,7
  5844  059C  0824               	movf	SetDefaultTimers@rosso,w
  5845  059D  0080               	movwf	0
  5846  059E  0A84               	incf	4,f
  5847  059F  0825               	movf	SetDefaultTimers@rosso+1,w
  5848  05A0  0080               	movwf	0
  5849                           
  5850                           ;./CustomLib/TrafficLight.h: 66:                 (*(_semafori)[l]).new_times[i] = rosso;
  5851  05A1  0832               	movf	SetDefaultTimers@l,w
  5852  05A2  00AB               	movwf	??_SetDefaultTimers
  5853  05A3  072B               	addwf	??_SetDefaultTimers,w
  5854  05A4  072A               	addwf	SetDefaultTimers@_semafori,w
  5855  05A5  00AC               	movwf	??_SetDefaultTimers+1
  5856  05A6  082C               	movf	??_SetDefaultTimers+1,w
  5857  05A7  0084               	movwf	4
  5858  05A8  1383               	bcf	3,7	;select IRP bank0
  5859  05A9  0800               	movf	0,w
  5860  05AA  00AD               	movwf	??_SetDefaultTimers+2
  5861  05AB  0A84               	incf	4,f
  5862  05AC  0800               	movf	0,w
  5863  05AD  00AE               	movwf	??_SetDefaultTimers+3
  5864  05AE  0833               	movf	SetDefaultTimers@i,w
  5865  05AF  00AF               	movwf	??_SetDefaultTimers+4
  5866  05B0  072F               	addwf	??_SetDefaultTimers+4,w
  5867  05B1  3E06               	addlw	6
  5868  05B2  072D               	addwf	??_SetDefaultTimers+2,w
  5869  05B3  00B0               	movwf	??_SetDefaultTimers+5
  5870  05B4  082E               	movf	??_SetDefaultTimers+3,w
  5871  05B5  1803               	skipnc
  5872  05B6  3E01               	addlw	1
  5873  05B7  00B1               	movwf	??_SetDefaultTimers+6
  5874  05B8  0830               	movf	??_SetDefaultTimers+5,w
  5875  05B9  0084               	movwf	4
  5876  05BA  1783               	bsf	3,7
  5877  05BB  1C31               	btfss	??_SetDefaultTimers+6,0
  5878  05BC  1383               	bcf	3,7
  5879  05BD  0824               	movf	SetDefaultTimers@rosso,w
  5880  05BE  0080               	movwf	0
  5881  05BF  0A84               	incf	4,f
  5882  05C0  0825               	movf	SetDefaultTimers@rosso+1,w
  5883  05C1  0080               	movwf	0
  5884                           
  5885                           ;./CustomLib/TrafficLight.h: 67:                 break;
  5886  05C2  2E5A               	goto	l4352
  5887  05C3                     l4344:	
  5888                           
  5889                           ;./CustomLib/TrafficLight.h: 69:                 (*(_semafori)[l]).times[i] = verde;
  5890  05C3  0832               	movf	SetDefaultTimers@l,w
  5891  05C4  00AB               	movwf	??_SetDefaultTimers
  5892  05C5  072B               	addwf	??_SetDefaultTimers,w
  5893  05C6  072A               	addwf	SetDefaultTimers@_semafori,w
  5894  05C7  00AC               	movwf	??_SetDefaultTimers+1
  5895  05C8  082C               	movf	??_SetDefaultTimers+1,w
  5896  05C9  0084               	movwf	4
  5897  05CA  1383               	bcf	3,7	;select IRP bank0
  5898  05CB  0800               	movf	0,w
  5899  05CC  00AD               	movwf	??_SetDefaultTimers+2
  5900  05CD  0A84               	incf	4,f
  5901  05CE  0800               	movf	0,w
  5902  05CF  00AE               	movwf	??_SetDefaultTimers+3
  5903  05D0  0833               	movf	SetDefaultTimers@i,w
  5904  05D1  00AF               	movwf	??_SetDefaultTimers+4
  5905  05D2  072F               	addwf	??_SetDefaultTimers+4,w
  5906  05D3  072D               	addwf	??_SetDefaultTimers+2,w
  5907  05D4  00B0               	movwf	??_SetDefaultTimers+5
  5908  05D5  082E               	movf	??_SetDefaultTimers+3,w
  5909  05D6  1803               	skipnc
  5910  05D7  3E01               	addlw	1
  5911  05D8  00B1               	movwf	??_SetDefaultTimers+6
  5912  05D9  0830               	movf	??_SetDefaultTimers+5,w
  5913  05DA  0084               	movwf	4
  5914  05DB  1783               	bsf	3,7
  5915  05DC  1C31               	btfss	??_SetDefaultTimers+6,0
  5916  05DD  1383               	bcf	3,7
  5917  05DE  0826               	movf	SetDefaultTimers@verde,w
  5918  05DF  0080               	movwf	0
  5919  05E0  0A84               	incf	4,f
  5920  05E1  0827               	movf	SetDefaultTimers@verde+1,w
  5921  05E2  0080               	movwf	0
  5922                           
  5923                           ;./CustomLib/TrafficLight.h: 70:                 (*(_semafori)[l]).new_times[i] = verde;
  5924  05E3  0832               	movf	SetDefaultTimers@l,w
  5925  05E4  00AB               	movwf	??_SetDefaultTimers
  5926  05E5  072B               	addwf	??_SetDefaultTimers,w
  5927  05E6  072A               	addwf	SetDefaultTimers@_semafori,w
  5928  05E7  00AC               	movwf	??_SetDefaultTimers+1
  5929  05E8  082C               	movf	??_SetDefaultTimers+1,w
  5930  05E9  0084               	movwf	4
  5931  05EA  1383               	bcf	3,7	;select IRP bank0
  5932  05EB  0800               	movf	0,w
  5933  05EC  00AD               	movwf	??_SetDefaultTimers+2
  5934  05ED  0A84               	incf	4,f
  5935  05EE  0800               	movf	0,w
  5936  05EF  00AE               	movwf	??_SetDefaultTimers+3
  5937  05F0  0833               	movf	SetDefaultTimers@i,w
  5938  05F1  00AF               	movwf	??_SetDefaultTimers+4
  5939  05F2  072F               	addwf	??_SetDefaultTimers+4,w
  5940  05F3  3E06               	addlw	6
  5941  05F4  072D               	addwf	??_SetDefaultTimers+2,w
  5942  05F5  00B0               	movwf	??_SetDefaultTimers+5
  5943  05F6  082E               	movf	??_SetDefaultTimers+3,w
  5944  05F7  1803               	skipnc
  5945  05F8  3E01               	addlw	1
  5946  05F9  00B1               	movwf	??_SetDefaultTimers+6
  5947  05FA  0830               	movf	??_SetDefaultTimers+5,w
  5948  05FB  0084               	movwf	4
  5949  05FC  1783               	bsf	3,7
  5950  05FD  1C31               	btfss	??_SetDefaultTimers+6,0
  5951  05FE  1383               	bcf	3,7
  5952  05FF  0826               	movf	SetDefaultTimers@verde,w
  5953  0600  0080               	movwf	0
  5954  0601  0A84               	incf	4,f
  5955  0602  0827               	movf	SetDefaultTimers@verde+1,w
  5956  0603  0080               	movwf	0
  5957                           
  5958                           ;./CustomLib/TrafficLight.h: 71:                 break;
  5959  0604  2E5A               	goto	l4352
  5960  0605                     l4346:	
  5961                           
  5962                           ;./CustomLib/TrafficLight.h: 73:                 (*(_semafori)[l]).times[i] = giallo;
  5963  0605  0832               	movf	SetDefaultTimers@l,w
  5964  0606  00AB               	movwf	??_SetDefaultTimers
  5965  0607  072B               	addwf	??_SetDefaultTimers,w
  5966  0608  072A               	addwf	SetDefaultTimers@_semafori,w
  5967  0609  00AC               	movwf	??_SetDefaultTimers+1
  5968  060A  082C               	movf	??_SetDefaultTimers+1,w
  5969  060B  0084               	movwf	4
  5970  060C  1383               	bcf	3,7	;select IRP bank0
  5971  060D  0800               	movf	0,w
  5972  060E  00AD               	movwf	??_SetDefaultTimers+2
  5973  060F  0A84               	incf	4,f
  5974  0610  0800               	movf	0,w
  5975  0611  00AE               	movwf	??_SetDefaultTimers+3
  5976  0612  0833               	movf	SetDefaultTimers@i,w
  5977  0613  00AF               	movwf	??_SetDefaultTimers+4
  5978  0614  072F               	addwf	??_SetDefaultTimers+4,w
  5979  0615  072D               	addwf	??_SetDefaultTimers+2,w
  5980  0616  00B0               	movwf	??_SetDefaultTimers+5
  5981  0617  082E               	movf	??_SetDefaultTimers+3,w
  5982  0618  1803               	skipnc
  5983  0619  3E01               	addlw	1
  5984  061A  00B1               	movwf	??_SetDefaultTimers+6
  5985  061B  0830               	movf	??_SetDefaultTimers+5,w
  5986  061C  0084               	movwf	4
  5987  061D  1783               	bsf	3,7
  5988  061E  1C31               	btfss	??_SetDefaultTimers+6,0
  5989  061F  1383               	bcf	3,7
  5990  0620  0828               	movf	SetDefaultTimers@giallo,w
  5991  0621  0080               	movwf	0
  5992  0622  0A84               	incf	4,f
  5993  0623  0829               	movf	SetDefaultTimers@giallo+1,w
  5994  0624  0080               	movwf	0
  5995                           
  5996                           ;./CustomLib/TrafficLight.h: 74:                 (*(_semafori)[l]).new_times[i] = giallo
      +                          ;
  5997  0625  0832               	movf	SetDefaultTimers@l,w
  5998  0626  00AB               	movwf	??_SetDefaultTimers
  5999  0627  072B               	addwf	??_SetDefaultTimers,w
  6000  0628  072A               	addwf	SetDefaultTimers@_semafori,w
  6001  0629  00AC               	movwf	??_SetDefaultTimers+1
  6002  062A  082C               	movf	??_SetDefaultTimers+1,w
  6003  062B  0084               	movwf	4
  6004  062C  1383               	bcf	3,7	;select IRP bank0
  6005  062D  0800               	movf	0,w
  6006  062E  00AD               	movwf	??_SetDefaultTimers+2
  6007  062F  0A84               	incf	4,f
  6008  0630  0800               	movf	0,w
  6009  0631  00AE               	movwf	??_SetDefaultTimers+3
  6010  0632  0833               	movf	SetDefaultTimers@i,w
  6011  0633  00AF               	movwf	??_SetDefaultTimers+4
  6012  0634  072F               	addwf	??_SetDefaultTimers+4,w
  6013  0635  3E06               	addlw	6
  6014  0636  072D               	addwf	??_SetDefaultTimers+2,w
  6015  0637  00B0               	movwf	??_SetDefaultTimers+5
  6016  0638  082E               	movf	??_SetDefaultTimers+3,w
  6017  0639  1803               	skipnc
  6018  063A  3E01               	addlw	1
  6019  063B  00B1               	movwf	??_SetDefaultTimers+6
  6020  063C  0830               	movf	??_SetDefaultTimers+5,w
  6021  063D  0084               	movwf	4
  6022  063E  1783               	bsf	3,7
  6023  063F  1C31               	btfss	??_SetDefaultTimers+6,0
  6024  0640  1383               	bcf	3,7
  6025  0641  0828               	movf	SetDefaultTimers@giallo,w
  6026  0642  0080               	movwf	0
  6027  0643  0A84               	incf	4,f
  6028  0644  0829               	movf	SetDefaultTimers@giallo+1,w
  6029  0645  0080               	movwf	0
  6030                           
  6031                           ;./CustomLib/TrafficLight.h: 75:                 break;
  6032  0646  2E5A               	goto	l4352
  6033  0647                     l4350:	
  6034  0647  0833               	movf	SetDefaultTimers@i,w
  6035  0648  00AB               	movwf	??_SetDefaultTimers
  6036  0649  01AC               	clrf	??_SetDefaultTimers+1
  6037                           
  6038                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6039                           ; Switch size 1, requested type "simple"
  6040                           ; Number of cases is 1, Range of values is 0 to 0
  6041                           ; switch strategies available:
  6042                           ; Name         Instructions Cycles
  6043                           ; simple_byte            4     3 (average)
  6044                           ; direct_byte           11     8 (fixed)
  6045                           ; jumptable            260     6 (fixed)
  6046                           ;	Chosen strategy is simple_byte
  6047  064A  082C               	movf	??_SetDefaultTimers+1,w
  6048  064B  3A00               	xorlw	0	; case 0
  6049  064C  1903               	skipnz
  6050  064D  2E4F               	goto	l4922
  6051  064E  2E5A               	goto	l4352
  6052  064F                     l4922:	
  6053                           
  6054                           ; Switch size 1, requested type "simple"
  6055                           ; Number of cases is 3, Range of values is 0 to 2
  6056                           ; switch strategies available:
  6057                           ; Name         Instructions Cycles
  6058                           ; simple_byte           10     6 (average)
  6059                           ; direct_byte           17     8 (fixed)
  6060                           ; jumptable            260     6 (fixed)
  6061                           ;	Chosen strategy is simple_byte
  6062  064F  082B               	movf	??_SetDefaultTimers,w
  6063  0650  3A00               	xorlw	0	; case 0
  6064  0651  1903               	skipnz
  6065  0652  2D81               	goto	l4342
  6066  0653  3A01               	xorlw	1	; case 1
  6067  0654  1903               	skipnz
  6068  0655  2DC3               	goto	l4344
  6069  0656  3A03               	xorlw	3	; case 2
  6070  0657  1903               	skipnz
  6071  0658  2E05               	goto	l4346
  6072  0659  2E5A               	goto	l4352
  6073  065A                     l4352:	
  6074                           
  6075                           ;./CustomLib/TrafficLight.h: 77:         }
  6076  065A  3001               	movlw	1
  6077  065B  00AB               	movwf	??_SetDefaultTimers
  6078  065C  082B               	movf	??_SetDefaultTimers,w
  6079  065D  07B3               	addwf	SetDefaultTimers@i,f
  6080  065E                     l4354:	
  6081  065E  3003               	movlw	3
  6082  065F  0233               	subwf	SetDefaultTimers@i,w
  6083  0660  1C03               	skipc
  6084  0661  2E63               	goto	u4301
  6085  0662  2E64               	goto	u4300
  6086  0663                     u4301:	
  6087  0663  2E47               	goto	l4350
  6088  0664                     u4300:	
  6089  0664                     l4356:	
  6090                           
  6091                           ;./CustomLib/TrafficLight.h: 78:     }
  6092  0664  3001               	movlw	1
  6093  0665  00AB               	movwf	??_SetDefaultTimers
  6094  0666  082B               	movf	??_SetDefaultTimers,w
  6095  0667  07B2               	addwf	SetDefaultTimers@l,f
  6096  0668                     l4358:	
  6097  0668  3002               	movlw	2
  6098  0669  0232               	subwf	SetDefaultTimers@l,w
  6099  066A  1C03               	skipc
  6100  066B  2E6D               	goto	u4311
  6101  066C  2E6E               	goto	u4310
  6102  066D                     u4311:	
  6103  066D  2D7F               	goto	l4336
  6104  066E                     u4310:	
  6105  066E                     l4360:	
  6106                           
  6107                           ;./CustomLib/TrafficLight.h: 80:     (*(_semafori)[0]).lux_select = 0;
  6108  066E  082A               	movf	SetDefaultTimers@_semafori,w
  6109  066F  0084               	movwf	4
  6110  0670  1383               	bcf	3,7	;select IRP bank0
  6111  0671  0800               	movf	0,w
  6112  0672  00AB               	movwf	??_SetDefaultTimers
  6113  0673  0A84               	incf	4,f
  6114  0674  0800               	movf	0,w
  6115  0675  00AC               	movwf	??_SetDefaultTimers+1
  6116  0676  082B               	movf	??_SetDefaultTimers,w
  6117  0677  3E0C               	addlw	12
  6118  0678  00AD               	movwf	??_SetDefaultTimers+2
  6119  0679  082C               	movf	??_SetDefaultTimers+1,w
  6120  067A  1803               	skipnc
  6121  067B  3E01               	addlw	1
  6122  067C  3E00               	addlw	0
  6123  067D  00AE               	movwf	??_SetDefaultTimers+3
  6124  067E  082D               	movf	??_SetDefaultTimers+2,w
  6125  067F  0084               	movwf	4
  6126  0680  1783               	bsf	3,7
  6127  0681  1C2E               	btfss	??_SetDefaultTimers+3,0
  6128  0682  1383               	bcf	3,7
  6129  0683  0180               	clrf	0
  6130                           
  6131                           ;./CustomLib/TrafficLight.h: 81:     (*(_semafori)[0]).new_lux_select = 0;
  6132  0684  082A               	movf	SetDefaultTimers@_semafori,w
  6133  0685  0084               	movwf	4
  6134  0686  1383               	bcf	3,7	;select IRP bank0
  6135  0687  0800               	movf	0,w
  6136  0688  00AB               	movwf	??_SetDefaultTimers
  6137  0689  0A84               	incf	4,f
  6138  068A  0800               	movf	0,w
  6139  068B  00AC               	movwf	??_SetDefaultTimers+1
  6140  068C  082B               	movf	??_SetDefaultTimers,w
  6141  068D  3E0D               	addlw	13
  6142  068E  00AD               	movwf	??_SetDefaultTimers+2
  6143  068F  082C               	movf	??_SetDefaultTimers+1,w
  6144  0690  1803               	skipnc
  6145  0691  3E01               	addlw	1
  6146  0692  3E00               	addlw	0
  6147  0693  00AE               	movwf	??_SetDefaultTimers+3
  6148  0694  082D               	movf	??_SetDefaultTimers+2,w
  6149  0695  0084               	movwf	4
  6150  0696  1783               	bsf	3,7
  6151  0697  1C2E               	btfss	??_SetDefaultTimers+3,0
  6152  0698  1383               	bcf	3,7
  6153  0699  0180               	clrf	0
  6154                           
  6155                           ;./CustomLib/TrafficLight.h: 82:     (*(_semafori)[1]).lux_select = 1;
  6156  069A  082A               	movf	SetDefaultTimers@_semafori,w
  6157  069B  3E02               	addlw	2
  6158  069C  0084               	movwf	4
  6159  069D  1383               	bcf	3,7	;select IRP bank0
  6160  069E  0800               	movf	0,w
  6161  069F  00AB               	movwf	??_SetDefaultTimers
  6162  06A0  0A84               	incf	4,f
  6163  06A1  0800               	movf	0,w
  6164  06A2  00AC               	movwf	??_SetDefaultTimers+1
  6165  06A3  082B               	movf	??_SetDefaultTimers,w
  6166  06A4  3E0C               	addlw	12
  6167  06A5  00AD               	movwf	??_SetDefaultTimers+2
  6168  06A6  082C               	movf	??_SetDefaultTimers+1,w
  6169  06A7  1803               	skipnc
  6170  06A8  3E01               	addlw	1
  6171  06A9  3E00               	addlw	0
  6172  06AA  00AE               	movwf	??_SetDefaultTimers+3
  6173  06AB  082D               	movf	??_SetDefaultTimers+2,w
  6174  06AC  0084               	movwf	4
  6175  06AD  1783               	bsf	3,7
  6176  06AE  1C2E               	btfss	??_SetDefaultTimers+3,0
  6177  06AF  1383               	bcf	3,7
  6178  06B0  0180               	clrf	0
  6179  06B1  0A80               	incf	0,f
  6180                           
  6181                           ;./CustomLib/TrafficLight.h: 83:     (*(_semafori)[1]).new_lux_select = 1;
  6182  06B2  082A               	movf	SetDefaultTimers@_semafori,w
  6183  06B3  3E02               	addlw	2
  6184  06B4  0084               	movwf	4
  6185  06B5  1383               	bcf	3,7	;select IRP bank0
  6186  06B6  0800               	movf	0,w
  6187  06B7  00AB               	movwf	??_SetDefaultTimers
  6188  06B8  0A84               	incf	4,f
  6189  06B9  0800               	movf	0,w
  6190  06BA  00AC               	movwf	??_SetDefaultTimers+1
  6191  06BB  082B               	movf	??_SetDefaultTimers,w
  6192  06BC  3E0D               	addlw	13
  6193  06BD  00AD               	movwf	??_SetDefaultTimers+2
  6194  06BE  082C               	movf	??_SetDefaultTimers+1,w
  6195  06BF  1803               	skipnc
  6196  06C0  3E01               	addlw	1
  6197  06C1  3E00               	addlw	0
  6198  06C2  00AE               	movwf	??_SetDefaultTimers+3
  6199  06C3  082D               	movf	??_SetDefaultTimers+2,w
  6200  06C4  0084               	movwf	4
  6201  06C5  1783               	bsf	3,7
  6202  06C6  1C2E               	btfss	??_SetDefaultTimers+3,0
  6203  06C7  1383               	bcf	3,7
  6204  06C8  0180               	clrf	0
  6205  06C9  0A80               	incf	0,f
  6206  06CA                     l169:	
  6207  06CA  0008               	return
  6208  06CB                     __end_of_SetDefaultTimers:	
  6209                           
  6210                           	psect	text21
  6211  0D36                     __ptext21:	
  6212 ;; *************** function _GetDigits *****************
  6213 ;; Defined at:
  6214 ;;		line 28 in file "./CustomLib/Conversions.h"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  centinaia       1    wreg     PTR unsigned char 
  6217 ;;		 -> centinaia(1), 
  6218 ;;  decine          1   20[BANK0 ] PTR unsigned char 
  6219 ;;		 -> decine(1), 
  6220 ;;  unita           1   21[BANK0 ] PTR unsigned char 
  6221 ;;		 -> unita(1), 
  6222 ;;  Time            2   22[BANK0 ] int 
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;  centinaia       1   27[BANK0 ] PTR unsigned char 
  6225 ;;		 -> centinaia(1), 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      void 
  6228 ;; Registers used:
  6229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6235 ;;      Params:         0       4       0       0       0
  6236 ;;      Locals:         0       3       0       0       0
  6237 ;;      Temps:          0       1       0       0       0
  6238 ;;      Totals:         0       8       0       0       0
  6239 ;;Total ram usage:        8 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    4
  6242 ;; This function calls:
  6243 ;;		___awdiv
  6244 ;;		___awmod
  6245 ;; This function is called by:
  6246 ;;		_main
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           
  6251                           ;psect for function _GetDigits
  6252  0D36                     _GetDigits:	
  6253                           
  6254                           ;incstack = 0
  6255                           ; Regs used in _GetDigits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6256                           ;GetDigits@centinaia stored from wreg
  6257  0D36  1283               	bcf	3,5	;RP0=0, select bank0
  6258  0D37  1303               	bcf	3,6	;RP1=0, select bank0
  6259  0D38  00BB               	movwf	GetDigits@centinaia
  6260  0D39                     l4238:	
  6261                           
  6262                           ;./CustomLib/Conversions.h: 28: void GetDigits(unsigned char *centinaia, unsigned char *
      +                          decine, unsigned char *unita, int Time);./CustomLib/Conversions.h: 29: {;./CustomLib/Con
      +                          versions.h: 30:     while (Time / 1000 > 0)
  6263  0D39  2D4F               	goto	l4242
  6264  0D3A                     l4240:	
  6265                           
  6266                           ;./CustomLib/Conversions.h: 31:     {;./CustomLib/Conversions.h: 32:         Time = Time
      +                           / 10;
  6267  0D3A  300A               	movlw	10
  6268  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  6269  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  6270  0D3D  00AB               	movwf	___awdiv@divisor
  6271  0D3E  3000               	movlw	0
  6272  0D3F  00AC               	movwf	___awdiv@divisor+1
  6273  0D40  0837               	movf	GetDigits@Time+1,w
  6274  0D41  00AE               	movwf	___awdiv@dividend+1
  6275  0D42  0836               	movf	GetDigits@Time,w
  6276  0D43  00AD               	movwf	___awdiv@dividend
  6277  0D44  120A  158A  23E3  120A  158A  	fcall	___awdiv
  6278  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  6279  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
  6280  0D4B  082C               	movf	?___awdiv+1,w
  6281  0D4C  00B7               	movwf	GetDigits@Time+1
  6282  0D4D  082B               	movf	?___awdiv,w
  6283  0D4E  00B6               	movwf	GetDigits@Time
  6284  0D4F                     l4242:	
  6285                           
  6286                           ;./CustomLib/Conversions.h: 30:     while (Time / 1000 > 0)
  6287  0D4F  30E8               	movlw	232
  6288  0D50  00AB               	movwf	___awdiv@divisor
  6289  0D51  3003               	movlw	3
  6290  0D52  00AC               	movwf	___awdiv@divisor+1
  6291  0D53  0837               	movf	GetDigits@Time+1,w
  6292  0D54  00AE               	movwf	___awdiv@dividend+1
  6293  0D55  0836               	movf	GetDigits@Time,w
  6294  0D56  00AD               	movwf	___awdiv@dividend
  6295  0D57  120A  158A  23E3  120A  158A  	fcall	___awdiv
  6296  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  6297  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  6298  0D5E  082C               	movf	?___awdiv+1,w
  6299  0D5F  3A80               	xorlw	128
  6300  0D60  00FF               	movwf	btemp+1
  6301  0D61  3080               	movlw	128
  6302  0D62  027F               	subwf	btemp+1,w
  6303  0D63  1D03               	skipz
  6304  0D64  2D67               	goto	u4165
  6305  0D65  3001               	movlw	1
  6306  0D66  022B               	subwf	?___awdiv,w
  6307  0D67                     u4165:	
  6308  0D67  1803               	skipnc
  6309  0D68  2D6A               	goto	u4161
  6310  0D69  2D6B               	goto	u4160
  6311  0D6A                     u4161:	
  6312  0D6A  2D3A               	goto	l4240
  6313  0D6B                     u4160:	
  6314  0D6B                     l4244:	
  6315                           
  6316                           ;./CustomLib/Conversions.h: 35:     *centinaia = Time / 100;
  6317  0D6B  3064               	movlw	100
  6318  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  6319  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  6320  0D6E  00AB               	movwf	___awdiv@divisor
  6321  0D6F  3000               	movlw	0
  6322  0D70  00AC               	movwf	___awdiv@divisor+1
  6323  0D71  0837               	movf	GetDigits@Time+1,w
  6324  0D72  00AE               	movwf	___awdiv@dividend+1
  6325  0D73  0836               	movf	GetDigits@Time,w
  6326  0D74  00AD               	movwf	___awdiv@dividend
  6327  0D75  120A  158A  23E3  120A  158A  	fcall	___awdiv
  6328  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  6329  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  6330  0D7C  082B               	movf	?___awdiv,w
  6331  0D7D  00B8               	movwf	??_GetDigits
  6332  0D7E  083B               	movf	GetDigits@centinaia,w
  6333  0D7F  0084               	movwf	4
  6334  0D80  0838               	movf	??_GetDigits,w
  6335  0D81  1383               	bcf	3,7	;select IRP bank0
  6336  0D82  0080               	movwf	0
  6337                           
  6338                           ;./CustomLib/Conversions.h: 36:     *decine = (Time % 100) / 10;
  6339  0D83  300A               	movlw	10
  6340  0D84  00AB               	movwf	___awdiv@divisor
  6341  0D85  3000               	movlw	0
  6342  0D86  00AC               	movwf	___awdiv@divisor+1
  6343  0D87  0837               	movf	GetDigits@Time+1,w
  6344  0D88  00A7               	movwf	___awmod@dividend+1
  6345  0D89  0836               	movf	GetDigits@Time,w
  6346  0D8A  00A6               	movwf	___awmod@dividend
  6347  0D8B  3064               	movlw	100
  6348  0D8C  00A4               	movwf	___awmod@divisor
  6349  0D8D  3000               	movlw	0
  6350  0D8E  00A5               	movwf	___awmod@divisor+1
  6351  0D8F  120A  158A  2323  120A  158A  	fcall	___awmod
  6352  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  6353  0D95  1303               	bcf	3,6	;RP1=0, select bank0
  6354  0D96  0825               	movf	?___awmod+1,w
  6355  0D97  00AE               	movwf	___awdiv@dividend+1
  6356  0D98  0824               	movf	?___awmod,w
  6357  0D99  00AD               	movwf	___awdiv@dividend
  6358  0D9A  120A  158A  23E3  120A  158A  	fcall	___awdiv
  6359  0D9F  1283               	bcf	3,5	;RP0=0, select bank0
  6360  0DA0  1303               	bcf	3,6	;RP1=0, select bank0
  6361  0DA1  082B               	movf	?___awdiv,w
  6362  0DA2  00B8               	movwf	??_GetDigits
  6363  0DA3  0834               	movf	GetDigits@decine,w
  6364  0DA4  0084               	movwf	4
  6365  0DA5  0838               	movf	??_GetDigits,w
  6366  0DA6  1383               	bcf	3,7	;select IRP bank0
  6367  0DA7  0080               	movwf	0
  6368  0DA8                     l4246:	
  6369                           
  6370                           ;./CustomLib/Conversions.h: 37:     *unita = (Time % 100) % 10;
  6371  0DA8  0837               	movf	GetDigits@Time+1,w
  6372  0DA9  00A7               	movwf	___awmod@dividend+1
  6373  0DAA  0836               	movf	GetDigits@Time,w
  6374  0DAB  00A6               	movwf	___awmod@dividend
  6375  0DAC  3064               	movlw	100
  6376  0DAD  00A4               	movwf	___awmod@divisor
  6377  0DAE  3000               	movlw	0
  6378  0DAF  00A5               	movwf	___awmod@divisor+1
  6379  0DB0  120A  158A  2323  120A  158A  	fcall	___awmod
  6380  0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  6381  0DB6  1303               	bcf	3,6	;RP1=0, select bank0
  6382  0DB7  0825               	movf	?___awmod+1,w
  6383  0DB8  00BA               	movwf	_GetDigits$1214+1
  6384  0DB9  0824               	movf	?___awmod,w
  6385  0DBA  00B9               	movwf	_GetDigits$1214
  6386  0DBB                     l4248:	
  6387                           
  6388                           ;./CustomLib/Conversions.h: 37:     *unita = (Time % 100) % 10;
  6389  0DBB  300A               	movlw	10
  6390  0DBC  00A4               	movwf	___awmod@divisor
  6391  0DBD  3000               	movlw	0
  6392  0DBE  00A5               	movwf	___awmod@divisor+1
  6393  0DBF  083A               	movf	_GetDigits$1214+1,w
  6394  0DC0  00A7               	movwf	___awmod@dividend+1
  6395  0DC1  0839               	movf	_GetDigits$1214,w
  6396  0DC2  00A6               	movwf	___awmod@dividend
  6397  0DC3  120A  158A  2323  120A  158A  	fcall	___awmod
  6398  0DC8  1283               	bcf	3,5	;RP0=0, select bank0
  6399  0DC9  1303               	bcf	3,6	;RP1=0, select bank0
  6400  0DCA  0824               	movf	?___awmod,w
  6401  0DCB  00B8               	movwf	??_GetDigits
  6402  0DCC  0835               	movf	GetDigits@unita,w
  6403  0DCD  0084               	movwf	4
  6404  0DCE  0838               	movf	??_GetDigits,w
  6405  0DCF  1383               	bcf	3,7	;select IRP bank0
  6406  0DD0  0080               	movwf	0
  6407  0DD1                     l100:	
  6408  0DD1  0008               	return
  6409  0DD2                     __end_of_GetDigits:	
  6410                           
  6411                           	psect	text22
  6412  0B23                     __ptext22:	
  6413 ;; *************** function ___awmod *****************
  6414 ;; Defined at:
  6415 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  divisor         2    4[BANK0 ] int 
  6418 ;;  dividend        2    6[BANK0 ] int 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;  sign            1   10[BANK0 ] unsigned char 
  6421 ;;  counter         1    9[BANK0 ] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  2    4[BANK0 ] int 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6431 ;;      Params:         0       4       0       0       0
  6432 ;;      Locals:         0       2       0       0       0
  6433 ;;      Temps:          0       1       0       0       0
  6434 ;;      Totals:         0       7       0       0       0
  6435 ;;Total ram usage:        7 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    3
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_GetDigits
  6442 ;;		_ShowDigitsOnDisplay
  6443 ;;		_intToString
  6444 ;;		_ChangeTrafficLight
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           
  6449                           ;psect for function ___awmod
  6450  0B23                     ___awmod:	
  6451  0B23                     l4196:	
  6452                           ;incstack = 0
  6453                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6454                           
  6455  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  6456  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  6457  0B25  01AA               	clrf	___awmod@sign
  6458  0B26                     l4198:	
  6459  0B26  1FA7               	btfss	___awmod@dividend+1,7
  6460  0B27  2B29               	goto	u4071
  6461  0B28  2B2A               	goto	u4070
  6462  0B29                     u4071:	
  6463  0B29  2B31               	goto	l4204
  6464  0B2A                     u4070:	
  6465  0B2A                     l4200:	
  6466  0B2A  09A6               	comf	___awmod@dividend,f
  6467  0B2B  09A7               	comf	___awmod@dividend+1,f
  6468  0B2C  0AA6               	incf	___awmod@dividend,f
  6469  0B2D  1903               	skipnz
  6470  0B2E  0AA7               	incf	___awmod@dividend+1,f
  6471  0B2F                     l4202:	
  6472  0B2F  01AA               	clrf	___awmod@sign
  6473  0B30  0AAA               	incf	___awmod@sign,f
  6474  0B31                     l4204:	
  6475  0B31  1FA5               	btfss	___awmod@divisor+1,7
  6476  0B32  2B34               	goto	u4081
  6477  0B33  2B35               	goto	u4080
  6478  0B34                     u4081:	
  6479  0B34  2B3A               	goto	l4208
  6480  0B35                     u4080:	
  6481  0B35                     l4206:	
  6482  0B35  09A4               	comf	___awmod@divisor,f
  6483  0B36  09A5               	comf	___awmod@divisor+1,f
  6484  0B37  0AA4               	incf	___awmod@divisor,f
  6485  0B38  1903               	skipnz
  6486  0B39  0AA5               	incf	___awmod@divisor+1,f
  6487  0B3A                     l4208:	
  6488  0B3A  0824               	movf	___awmod@divisor,w
  6489  0B3B  0425               	iorwf	___awmod@divisor+1,w
  6490  0B3C  1903               	btfsc	3,2
  6491  0B3D  2B3F               	goto	u4091
  6492  0B3E  2B40               	goto	u4090
  6493  0B3F                     u4091:	
  6494  0B3F  2B6F               	goto	l4226
  6495  0B40                     u4090:	
  6496  0B40                     l4210:	
  6497  0B40  01A9               	clrf	___awmod@counter
  6498  0B41  0AA9               	incf	___awmod@counter,f
  6499  0B42  2B4E               	goto	l4216
  6500  0B43                     l4212:	
  6501  0B43  3001               	movlw	1
  6502  0B44                     u4105:	
  6503  0B44  1003               	clrc
  6504  0B45  0DA4               	rlf	___awmod@divisor,f
  6505  0B46  0DA5               	rlf	___awmod@divisor+1,f
  6506  0B47  3EFF               	addlw	-1
  6507  0B48  1D03               	skipz
  6508  0B49  2B44               	goto	u4105
  6509  0B4A                     l4214:	
  6510  0B4A  3001               	movlw	1
  6511  0B4B  00A8               	movwf	??___awmod
  6512  0B4C  0828               	movf	??___awmod,w
  6513  0B4D  07A9               	addwf	___awmod@counter,f
  6514  0B4E                     l4216:	
  6515  0B4E  1FA5               	btfss	___awmod@divisor+1,7
  6516  0B4F  2B51               	goto	u4111
  6517  0B50  2B52               	goto	u4110
  6518  0B51                     u4111:	
  6519  0B51  2B43               	goto	l4212
  6520  0B52                     u4110:	
  6521  0B52                     l4218:	
  6522  0B52  0825               	movf	___awmod@divisor+1,w
  6523  0B53  0227               	subwf	___awmod@dividend+1,w
  6524  0B54  1D03               	skipz
  6525  0B55  2B58               	goto	u4125
  6526  0B56  0824               	movf	___awmod@divisor,w
  6527  0B57  0226               	subwf	___awmod@dividend,w
  6528  0B58                     u4125:	
  6529  0B58  1C03               	skipc
  6530  0B59  2B5B               	goto	u4121
  6531  0B5A  2B5C               	goto	u4120
  6532  0B5B                     u4121:	
  6533  0B5B  2B62               	goto	l4222
  6534  0B5C                     u4120:	
  6535  0B5C                     l4220:	
  6536  0B5C  0824               	movf	___awmod@divisor,w
  6537  0B5D  02A6               	subwf	___awmod@dividend,f
  6538  0B5E  0825               	movf	___awmod@divisor+1,w
  6539  0B5F  1C03               	skipc
  6540  0B60  03A7               	decf	___awmod@dividend+1,f
  6541  0B61  02A7               	subwf	___awmod@dividend+1,f
  6542  0B62                     l4222:	
  6543  0B62  3001               	movlw	1
  6544  0B63                     u4135:	
  6545  0B63  1003               	clrc
  6546  0B64  0CA5               	rrf	___awmod@divisor+1,f
  6547  0B65  0CA4               	rrf	___awmod@divisor,f
  6548  0B66  3EFF               	addlw	-1
  6549  0B67  1D03               	skipz
  6550  0B68  2B63               	goto	u4135
  6551  0B69                     l4224:	
  6552  0B69  3001               	movlw	1
  6553  0B6A  02A9               	subwf	___awmod@counter,f
  6554  0B6B  1D03               	btfss	3,2
  6555  0B6C  2B6E               	goto	u4141
  6556  0B6D  2B6F               	goto	u4140
  6557  0B6E                     u4141:	
  6558  0B6E  2B52               	goto	l4218
  6559  0B6F                     u4140:	
  6560  0B6F                     l4226:	
  6561  0B6F  082A               	movf	___awmod@sign,w
  6562  0B70  1903               	btfsc	3,2
  6563  0B71  2B73               	goto	u4151
  6564  0B72  2B74               	goto	u4150
  6565  0B73                     u4151:	
  6566  0B73  2B79               	goto	l4230
  6567  0B74                     u4150:	
  6568  0B74                     l4228:	
  6569  0B74  09A6               	comf	___awmod@dividend,f
  6570  0B75  09A7               	comf	___awmod@dividend+1,f
  6571  0B76  0AA6               	incf	___awmod@dividend,f
  6572  0B77  1903               	skipnz
  6573  0B78  0AA7               	incf	___awmod@dividend+1,f
  6574  0B79                     l4230:	
  6575  0B79  0827               	movf	___awmod@dividend+1,w
  6576  0B7A  00A5               	movwf	?___awmod+1
  6577  0B7B  0826               	movf	___awmod@dividend,w
  6578  0B7C  00A4               	movwf	?___awmod
  6579  0B7D                     l616:	
  6580  0B7D  0008               	return
  6581  0B7E                     __end_of___awmod:	
  6582                           
  6583                           	psect	text23
  6584  0BE3                     __ptext23:	
  6585 ;; *************** function ___awdiv *****************
  6586 ;; Defined at:
  6587 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;  divisor         2   11[BANK0 ] int 
  6590 ;;  dividend        2   13[BANK0 ] int 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  quotient        2   18[BANK0 ] int 
  6593 ;;  sign            1   17[BANK0 ] unsigned char 
  6594 ;;  counter         1   16[BANK0 ] unsigned char 
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  2   11[BANK0 ] int 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2, status,0
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6604 ;;      Params:         0       4       0       0       0
  6605 ;;      Locals:         0       4       0       0       0
  6606 ;;      Temps:          0       1       0       0       0
  6607 ;;      Totals:         0       9       0       0       0
  6608 ;;Total ram usage:        9 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    3
  6611 ;; This function calls:
  6612 ;;		Nothing
  6613 ;; This function is called by:
  6614 ;;		_map
  6615 ;;		_GetDigits
  6616 ;;		_intToString
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function ___awdiv
  6622  0BE3                     ___awdiv:	
  6623  0BE3                     l4152:	
  6624                           ;incstack = 0
  6625                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6626                           
  6627  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  6628  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  6629  0BE5  01B1               	clrf	___awdiv@sign
  6630  0BE6                     l4154:	
  6631  0BE6  1FAC               	btfss	___awdiv@divisor+1,7
  6632  0BE7  2BE9               	goto	u3971
  6633  0BE8  2BEA               	goto	u3970
  6634  0BE9                     u3971:	
  6635  0BE9  2BF1               	goto	l4160
  6636  0BEA                     u3970:	
  6637  0BEA                     l4156:	
  6638  0BEA  09AB               	comf	___awdiv@divisor,f
  6639  0BEB  09AC               	comf	___awdiv@divisor+1,f
  6640  0BEC  0AAB               	incf	___awdiv@divisor,f
  6641  0BED  1903               	skipnz
  6642  0BEE  0AAC               	incf	___awdiv@divisor+1,f
  6643  0BEF                     l4158:	
  6644  0BEF  01B1               	clrf	___awdiv@sign
  6645  0BF0  0AB1               	incf	___awdiv@sign,f
  6646  0BF1                     l4160:	
  6647  0BF1  1FAE               	btfss	___awdiv@dividend+1,7
  6648  0BF2  2BF4               	goto	u3981
  6649  0BF3  2BF5               	goto	u3980
  6650  0BF4                     u3981:	
  6651  0BF4  2BFE               	goto	l4166
  6652  0BF5                     u3980:	
  6653  0BF5                     l4162:	
  6654  0BF5  09AD               	comf	___awdiv@dividend,f
  6655  0BF6  09AE               	comf	___awdiv@dividend+1,f
  6656  0BF7  0AAD               	incf	___awdiv@dividend,f
  6657  0BF8  1903               	skipnz
  6658  0BF9  0AAE               	incf	___awdiv@dividend+1,f
  6659  0BFA                     l4164:	
  6660  0BFA  3001               	movlw	1
  6661  0BFB  00AF               	movwf	??___awdiv
  6662  0BFC  082F               	movf	??___awdiv,w
  6663  0BFD  06B1               	xorwf	___awdiv@sign,f
  6664  0BFE                     l4166:	
  6665  0BFE  01B2               	clrf	___awdiv@quotient
  6666  0BFF  01B3               	clrf	___awdiv@quotient+1
  6667  0C00                     l4168:	
  6668  0C00  082B               	movf	___awdiv@divisor,w
  6669  0C01  042C               	iorwf	___awdiv@divisor+1,w
  6670  0C02  1903               	btfsc	3,2
  6671  0C03  2C05               	goto	u3991
  6672  0C04  2C06               	goto	u3990
  6673  0C05                     u3991:	
  6674  0C05  2C3D               	goto	l4188
  6675  0C06                     u3990:	
  6676  0C06                     l4170:	
  6677  0C06  01B0               	clrf	___awdiv@counter
  6678  0C07  0AB0               	incf	___awdiv@counter,f
  6679  0C08  2C14               	goto	l4176
  6680  0C09                     l4172:	
  6681  0C09  3001               	movlw	1
  6682  0C0A                     u4005:	
  6683  0C0A  1003               	clrc
  6684  0C0B  0DAB               	rlf	___awdiv@divisor,f
  6685  0C0C  0DAC               	rlf	___awdiv@divisor+1,f
  6686  0C0D  3EFF               	addlw	-1
  6687  0C0E  1D03               	skipz
  6688  0C0F  2C0A               	goto	u4005
  6689  0C10                     l4174:	
  6690  0C10  3001               	movlw	1
  6691  0C11  00AF               	movwf	??___awdiv
  6692  0C12  082F               	movf	??___awdiv,w
  6693  0C13  07B0               	addwf	___awdiv@counter,f
  6694  0C14                     l4176:	
  6695  0C14  1FAC               	btfss	___awdiv@divisor+1,7
  6696  0C15  2C17               	goto	u4011
  6697  0C16  2C18               	goto	u4010
  6698  0C17                     u4011:	
  6699  0C17  2C09               	goto	l4172
  6700  0C18                     u4010:	
  6701  0C18                     l4178:	
  6702  0C18  3001               	movlw	1
  6703  0C19                     u4025:	
  6704  0C19  1003               	clrc
  6705  0C1A  0DB2               	rlf	___awdiv@quotient,f
  6706  0C1B  0DB3               	rlf	___awdiv@quotient+1,f
  6707  0C1C  3EFF               	addlw	-1
  6708  0C1D  1D03               	skipz
  6709  0C1E  2C19               	goto	u4025
  6710  0C1F  082C               	movf	___awdiv@divisor+1,w
  6711  0C20  022E               	subwf	___awdiv@dividend+1,w
  6712  0C21  1D03               	skipz
  6713  0C22  2C25               	goto	u4035
  6714  0C23  082B               	movf	___awdiv@divisor,w
  6715  0C24  022D               	subwf	___awdiv@dividend,w
  6716  0C25                     u4035:	
  6717  0C25  1C03               	skipc
  6718  0C26  2C28               	goto	u4031
  6719  0C27  2C29               	goto	u4030
  6720  0C28                     u4031:	
  6721  0C28  2C30               	goto	l4184
  6722  0C29                     u4030:	
  6723  0C29                     l4180:	
  6724  0C29  082B               	movf	___awdiv@divisor,w
  6725  0C2A  02AD               	subwf	___awdiv@dividend,f
  6726  0C2B  082C               	movf	___awdiv@divisor+1,w
  6727  0C2C  1C03               	skipc
  6728  0C2D  03AE               	decf	___awdiv@dividend+1,f
  6729  0C2E  02AE               	subwf	___awdiv@dividend+1,f
  6730  0C2F                     l4182:	
  6731  0C2F  1432               	bsf	___awdiv@quotient,0
  6732  0C30                     l4184:	
  6733  0C30  3001               	movlw	1
  6734  0C31                     u4045:	
  6735  0C31  1003               	clrc
  6736  0C32  0CAC               	rrf	___awdiv@divisor+1,f
  6737  0C33  0CAB               	rrf	___awdiv@divisor,f
  6738  0C34  3EFF               	addlw	-1
  6739  0C35  1D03               	skipz
  6740  0C36  2C31               	goto	u4045
  6741  0C37                     l4186:	
  6742  0C37  3001               	movlw	1
  6743  0C38  02B0               	subwf	___awdiv@counter,f
  6744  0C39  1D03               	btfss	3,2
  6745  0C3A  2C3C               	goto	u4051
  6746  0C3B  2C3D               	goto	u4050
  6747  0C3C                     u4051:	
  6748  0C3C  2C18               	goto	l4178
  6749  0C3D                     u4050:	
  6750  0C3D                     l4188:	
  6751  0C3D  0831               	movf	___awdiv@sign,w
  6752  0C3E  1903               	btfsc	3,2
  6753  0C3F  2C41               	goto	u4061
  6754  0C40  2C42               	goto	u4060
  6755  0C41                     u4061:	
  6756  0C41  2C47               	goto	l4192
  6757  0C42                     u4060:	
  6758  0C42                     l4190:	
  6759  0C42  09B2               	comf	___awdiv@quotient,f
  6760  0C43  09B3               	comf	___awdiv@quotient+1,f
  6761  0C44  0AB2               	incf	___awdiv@quotient,f
  6762  0C45  1903               	skipnz
  6763  0C46  0AB3               	incf	___awdiv@quotient+1,f
  6764  0C47                     l4192:	
  6765  0C47  0833               	movf	___awdiv@quotient+1,w
  6766  0C48  00AC               	movwf	?___awdiv+1
  6767  0C49  0832               	movf	___awdiv@quotient,w
  6768  0C4A  00AB               	movwf	?___awdiv
  6769  0C4B                     l603:	
  6770  0C4B  0008               	return
  6771  0C4C                     __end_of___awdiv:	
  6772                           
  6773                           	psect	text24
  6774  0839                     __ptext24:	
  6775 ;; *************** function _ADC_Read *****************
  6776 ;; Defined at:
  6777 ;;		line 350 in file "main.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;  canale          1    wreg     unsigned char 
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;  canale          1    7[BANK0 ] unsigned char 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  2    4[BANK0 ] int 
  6784 ;; Registers used:
  6785 ;;		wreg, status,2, status,0
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6791 ;;      Params:         0       2       0       0       0
  6792 ;;      Locals:         0       1       0       0       0
  6793 ;;      Temps:          0       1       0       0       0
  6794 ;;      Totals:         0       4       0       0       0
  6795 ;;Total ram usage:        4 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    3
  6798 ;; This function calls:
  6799 ;;		Nothing
  6800 ;; This function is called by:
  6801 ;;		_main
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           
  6806                           ;psect for function _ADC_Read
  6807  0839                     _ADC_Read:	
  6808                           
  6809                           ;incstack = 0
  6810                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  6811                           ;ADC_Read@canale stored from wreg
  6812  0839  1283               	bcf	3,5	;RP0=0, select bank0
  6813  083A  1303               	bcf	3,6	;RP1=0, select bank0
  6814  083B  00A7               	movwf	ADC_Read@canale
  6815  083C                     l4426:	
  6816                           
  6817                           ;main.c: 350: int ADC_Read(char canale);main.c: 351: {;main.c: 352:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  6818  083C  0827               	movf	ADC_Read@canale,w
  6819  083D  00A6               	movwf	??_ADC_Read
  6820  083E  3002               	movlw	2
  6821  083F                     u4375:	
  6822  083F  1003               	clrc
  6823  0840  0DA6               	rlf	??_ADC_Read,f
  6824  0841  3EFF               	addlw	-1
  6825  0842  1D03               	skipz
  6826  0843  283F               	goto	u4375
  6827  0844  1003               	clrc
  6828  0845  0D26               	rlf	??_ADC_Read,w
  6829  0846  3801               	iorlw	1
  6830  0847  009F               	movwf	31	;volatile
  6831  0848                     l4428:	
  6832                           
  6833                           ;main.c: 353:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  6834  0848  3004               	movlw	4
  6835  0849  1283               	bcf	3,5	;RP0=0, select bank0
  6836  084A  1303               	bcf	3,6	;RP1=0, select bank0
  6837  084B  00A6               	movwf	??_ADC_Read
  6838  084C                     u4717:	
  6839  084C  0BA6               	decfsz	??_ADC_Read,f
  6840  084D  284C               	goto	u4717
  6841  084E  0000               	nop
  6842  084F                     l4430:	
  6843                           
  6844                           ;main.c: 354:     GO_nDONE = 1;
  6845  084F  1283               	bcf	3,5	;RP0=0, select bank0
  6846  0850  1303               	bcf	3,6	;RP1=0, select bank0
  6847  0851  151F               	bsf	31,2	;volatile
  6848  0852                     l285:	
  6849                           ;main.c: 356:         ;
  6850                           
  6851                           
  6852                           ;main.c: 355:     while (GO_nDONE)
  6853  0852  191F               	btfsc	31,2	;volatile
  6854  0853  2855               	goto	u4381
  6855  0854  2856               	goto	u4380
  6856  0855                     u4381:	
  6857  0855  2852               	goto	l285
  6858  0856                     u4380:	
  6859  0856                     l4432:	
  6860                           
  6861                           ;main.c: 357:     return ADRESL + (ADRESH << 8);
  6862  0856  081E               	movf	30,w	;volatile
  6863  0857  00A5               	movwf	?_ADC_Read+1
  6864  0858  1683               	bsf	3,5	;RP0=1, select bank1
  6865  0859  1303               	bcf	3,6	;RP1=0, select bank1
  6866  085A  081E               	movf	30,w	;volatile
  6867  085B  1283               	bcf	3,5	;RP0=0, select bank0
  6868  085C  1303               	bcf	3,6	;RP1=0, select bank0
  6869  085D  00A4               	movwf	?_ADC_Read
  6870  085E                     l288:	
  6871  085E  0008               	return
  6872  085F                     __end_of_ADC_Read:	
  6873                           
  6874                           	psect	text25
  6875  0ACB                     __ptext25:	
  6876 ;; *************** function _ISR *****************
  6877 ;; Defined at:
  6878 ;;		line 508 in file "main.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;		None
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;		None
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  1    wreg      void 
  6885 ;; Registers used:
  6886 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6892 ;;      Params:         0       0       0       0       0
  6893 ;;      Locals:         0       0       0       0       0
  6894 ;;      Temps:          0       4       0       0       0
  6895 ;;      Totals:         0       4       0       0       0
  6896 ;;Total ram usage:        4 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    2
  6899 ;; This function calls:
  6900 ;;		_UART_Read
  6901 ;;		_conteggioVeicoli
  6902 ;; This function is called by:
  6903 ;;		Interrupt level 1
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           
  6908                           ;psect for function _ISR
  6909  0ACB                     _ISR:	
  6910  0ACB                     i1l2792:	
  6911                           
  6912                           ;main.c: 511:     if (RCIF && readGateway.Bit == 0)
  6913  0ACB  1E8C               	btfss	12,5	;volatile
  6914  0ACC  2ACE               	goto	u243_21
  6915  0ACD  2ACF               	goto	u243_20
  6916  0ACE                     u243_21:	
  6917  0ACE  2AD8               	goto	i1l2800
  6918  0ACF                     u243_20:	
  6919  0ACF                     i1l2794:	
  6920  0ACF  1855               	btfsc	_readGateway,0
  6921  0AD0  2AD2               	goto	u244_21
  6922  0AD1  2AD3               	goto	u244_20
  6923  0AD2                     u244_21:	
  6924  0AD2  2AD8               	goto	i1l2800
  6925  0AD3                     u244_20:	
  6926  0AD3                     i1l2796:	
  6927                           
  6928                           ;main.c: 512:     {;main.c: 513:         readGateway.Bit = 1;
  6929  0AD3  1455               	bsf	_readGateway,0
  6930                           
  6931                           ;main.c: 514:         readGatewayDone.Bit = 0;
  6932  0AD4  1056               	bcf	_readGatewayDone,0
  6933                           
  6934                           ;main.c: 515:         readGatewayDone.Timeout = 0;
  6935  0AD5  10D6               	bcf	_readGatewayDone,1
  6936  0AD6                     i1l2798:	
  6937                           
  6938                           ;main.c: 516:         dataFromGatewayIndex = 0;
  6939  0AD6  01D0               	clrf	_dataFromGatewayIndex
  6940                           
  6941                           ;main.c: 517:         timerReadFromGateway = 0;
  6942  0AD7  01CF               	clrf	_timerReadFromGateway
  6943  0AD8                     i1l2800:	
  6944                           
  6945                           ;main.c: 519:     if (RCIF && readGateway.Bit == 1)
  6946  0AD8  1E8C               	btfss	12,5	;volatile
  6947  0AD9  2ADB               	goto	u245_21
  6948  0ADA  2ADC               	goto	u245_20
  6949  0ADB                     u245_21:	
  6950  0ADB  2AF3               	goto	i1l2810
  6951  0ADC                     u245_20:	
  6952  0ADC                     i1l2802:	
  6953  0ADC  1C55               	btfss	_readGateway,0
  6954  0ADD  2ADF               	goto	u246_21
  6955  0ADE  2AE0               	goto	u246_20
  6956  0ADF                     u246_21:	
  6957  0ADF  2AF3               	goto	i1l2810
  6958  0AE0                     u246_20:	
  6959  0AE0                     i1l2804:	
  6960                           
  6961                           ;main.c: 520:     {;main.c: 521:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  6962  0AE0  160A  118A  27D9  120A  158A  	fcall	_UART_Read
  6963  0AE5  1283               	bcf	3,5	;RP0=0, select bank0
  6964  0AE6  1303               	bcf	3,6	;RP1=0, select bank0
  6965  0AE7  00A0               	movwf	??_ISR
  6966  0AE8  0850               	movf	_dataFromGatewayIndex,w
  6967  0AE9  3EAC               	addlw	(low (_dataFromGateway| 0))& (0+255)
  6968  0AEA  0084               	movwf	4
  6969  0AEB  0820               	movf	??_ISR,w
  6970  0AEC  1383               	bcf	3,7	;select IRP bank1
  6971  0AED  0080               	movwf	0
  6972  0AEE                     i1l2806:	
  6973                           
  6974                           ;main.c: 522:         dataFromGatewayIndex++;
  6975  0AEE  3001               	movlw	1
  6976  0AEF  00A0               	movwf	??_ISR
  6977  0AF0  0820               	movf	??_ISR,w
  6978  0AF1  07D0               	addwf	_dataFromGatewayIndex,f
  6979  0AF2                     i1l2808:	
  6980                           
  6981                           ;main.c: 523:         timerReadFromGateway = 0;
  6982  0AF2  01CF               	clrf	_timerReadFromGateway
  6983  0AF3                     i1l2810:	
  6984                           
  6985                           ;main.c: 528:     if (TMR0IF)
  6986  0AF3  1D0B               	btfss	11,2	;volatile
  6987  0AF4  2AF6               	goto	u247_21
  6988  0AF5  2AF7               	goto	u247_20
  6989  0AF6                     u247_21:	
  6990  0AF6  2B01               	goto	i1l2818
  6991  0AF7                     u247_20:	
  6992  0AF7                     i1l2812:	
  6993                           
  6994                           ;main.c: 529:     {;main.c: 530:         TMR0IF = 0;
  6995  0AF7  110B               	bcf	11,2	;volatile
  6996  0AF8                     i1l2814:	
  6997                           
  6998                           ;main.c: 531:         conteggioVeicoli();
  6999  0AF8  120A  158A  237E  120A  158A  	fcall	_conteggioVeicoli
  7000  0AFD                     i1l2816:	
  7001                           
  7002                           ;main.c: 532:         TMR0 = 6;
  7003  0AFD  3006               	movlw	6
  7004  0AFE  1283               	bcf	3,5	;RP0=0, select bank0
  7005  0AFF  1303               	bcf	3,6	;RP1=0, select bank0
  7006  0B00  0081               	movwf	1	;volatile
  7007  0B01                     i1l2818:	
  7008                           
  7009                           ;main.c: 535:     if (TMR1IF)
  7010  0B01  1C0C               	btfss	12,0	;volatile
  7011  0B02  2B04               	goto	u248_21
  7012  0B03  2B05               	goto	u248_20
  7013  0B04                     u248_21:	
  7014  0B04  2B1A               	goto	i1l364
  7015  0B05                     u248_20:	
  7016  0B05                     i1l2820:	
  7017                           
  7018                           ;main.c: 536:     {;main.c: 537:         TMR1IF = 0;
  7019  0B05  100C               	bcf	12,0	;volatile
  7020  0B06                     i1l2822:	
  7021                           
  7022                           ;main.c: 538:         count_lux++;
  7023  0B06  3001               	movlw	1
  7024  0B07  00A0               	movwf	??_ISR
  7025  0B08  0820               	movf	??_ISR,w
  7026  0B09  07D1               	addwf	_count_lux,f
  7027  0B0A                     i1l2824:	
  7028                           
  7029                           ;main.c: 540:         if (count_lux >= 20)
  7030  0B0A  3014               	movlw	20
  7031  0B0B  0251               	subwf	_count_lux,w
  7032  0B0C  1C03               	skipc
  7033  0B0D  2B0F               	goto	u249_21
  7034  0B0E  2B10               	goto	u249_20
  7035  0B0F                     u249_21:	
  7036  0B0F  2B16               	goto	i1l2832
  7037  0B10                     u249_20:	
  7038  0B10                     i1l2826:	
  7039                           
  7040                           ;main.c: 541:         {;main.c: 542:             secondPassed.Bit = 1;
  7041  0B10  1454               	bsf	_secondPassed,0
  7042  0B11                     i1l2828:	
  7043                           
  7044                           ;main.c: 543:             count_lux = 0;
  7045  0B11  01D1               	clrf	_count_lux
  7046  0B12                     i1l2830:	
  7047                           
  7048                           ;main.c: 544:             timerReadFromGateway++;
  7049  0B12  3001               	movlw	1
  7050  0B13  00A0               	movwf	??_ISR
  7051  0B14  0820               	movf	??_ISR,w
  7052  0B15  07CF               	addwf	_timerReadFromGateway,f
  7053  0B16                     i1l2832:	
  7054                           
  7055                           ;main.c: 547:         TMR1H = 60;
  7056  0B16  303C               	movlw	60
  7057  0B17  008F               	movwf	15	;volatile
  7058  0B18                     i1l2834:	
  7059                           
  7060                           ;main.c: 548:         TMR1L = 176;
  7061  0B18  30B0               	movlw	176
  7062  0B19  008E               	movwf	14	;volatile
  7063  0B1A                     i1l364:	
  7064  0B1A  0823               	movf	??_ISR+3,w
  7065  0B1B  008A               	movwf	10
  7066  0B1C  0822               	movf	??_ISR+2,w
  7067  0B1D  0084               	movwf	4
  7068  0B1E  0E21               	swapf	(??_ISR+1)^0,w
  7069  0B1F  0083               	movwf	3
  7070  0B20  0EFE               	swapf	btemp,f
  7071  0B21  0E7E               	swapf	btemp,w
  7072  0B22  0009               	retfie
  7073  0B23                     __end_of_ISR:	
  7074                           
  7075                           	psect	intentry
  7076  0004                     __pintentry:	
  7077                           ;incstack = 0
  7078                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7079                           
  7080  0004                     interrupt_function:	
  7081  007E                     saved_w	set	btemp
  7082  0004  00FE               	movwf	btemp
  7083  0005  0E03               	swapf	3,w
  7084  0006  1283               	bcf	3,5	;RP0=0, select bank0
  7085  0007  1303               	bcf	3,6	;RP1=0, select bank0
  7086  0008  00A1               	movwf	??_ISR+1
  7087  0009  0804               	movf	4,w
  7088  000A  00A2               	movwf	??_ISR+2
  7089  000B  080A               	movf	10,w
  7090  000C  00A3               	movwf	??_ISR+3
  7091  000D  120A  158A  2ACB   	ljmp	_ISR
  7092                           
  7093                           	psect	text26
  7094  0B7E                     __ptext26:	
  7095 ;; *************** function _conteggioVeicoli *****************
  7096 ;; Defined at:
  7097 ;;		line 416 in file "main.c"
  7098 ;; Parameters:    Size  Location     Type
  7099 ;;		None
  7100 ;; Auto vars:     Size  Location     Type
  7101 ;;  i               1   13[COMMON] unsigned char 
  7102 ;; Return value:  Size  Location     Type
  7103 ;;                  1    wreg      void 
  7104 ;; Registers used:
  7105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7106 ;; Tracked objects:
  7107 ;;		On entry : 0/0
  7108 ;;		On exit  : 0/0
  7109 ;;		Unchanged: 0/0
  7110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7111 ;;      Params:         0       0       0       0       0
  7112 ;;      Locals:         1       0       0       0       0
  7113 ;;      Temps:          4       0       0       0       0
  7114 ;;      Totals:         5       0       0       0       0
  7115 ;;Total ram usage:        5 bytes
  7116 ;; Hardware stack levels used:    1
  7117 ;; Hardware stack levels required when called:    1
  7118 ;; This function calls:
  7119 ;;		_Conteggio
  7120 ;; This function is called by:
  7121 ;;		_ISR
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           
  7126                           ;psect for function _conteggioVeicoli
  7127  0B7E                     _conteggioVeicoli:	
  7128  0B7E                     i1l2544:	
  7129                           ;incstack = 0
  7130                           ; Regs used in _conteggioVeicoli: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7131                           
  7132                           
  7133                           ;main.c: 418:     RoadsSensors[0] = PORTBbits.RB3;
  7134  0B7E  3000               	movlw	0
  7135  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
  7136  0B80  1303               	bcf	3,6	;RP1=0, select bank0
  7137  0B81  1986               	btfsc	6,3	;volatile
  7138  0B82  3001               	movlw	1
  7139  0B83  1683               	bsf	3,5	;RP0=1, select bank1
  7140  0B84  1303               	bcf	3,6	;RP1=0, select bank1
  7141  0B85  00A8               	movwf	_RoadsSensors^(0+128)
  7142                           
  7143                           ;main.c: 419:     RoadsSensors[1] = PORTBbits.RB4;
  7144  0B86  3000               	movlw	0
  7145  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  7146  0B88  1303               	bcf	3,6	;RP1=0, select bank0
  7147  0B89  1A06               	btfsc	6,4	;volatile
  7148  0B8A  3001               	movlw	1
  7149  0B8B  1683               	bsf	3,5	;RP0=1, select bank1
  7150  0B8C  1303               	bcf	3,6	;RP1=0, select bank1
  7151  0B8D  00A9               	movwf	(_RoadsSensors^(0+128)+1)
  7152                           
  7153                           ;main.c: 420:     RoadsSensors[2] = PORTBbits.RB5;
  7154  0B8E  3000               	movlw	0
  7155  0B8F  1283               	bcf	3,5	;RP0=0, select bank0
  7156  0B90  1303               	bcf	3,6	;RP1=0, select bank0
  7157  0B91  1A86               	btfsc	6,5	;volatile
  7158  0B92  3001               	movlw	1
  7159  0B93  1683               	bsf	3,5	;RP0=1, select bank1
  7160  0B94  1303               	bcf	3,6	;RP1=0, select bank1
  7161  0B95  00AA               	movwf	(_RoadsSensors^(0+128)+2)
  7162                           
  7163                           ;main.c: 421:     RoadsSensors[3] = PORTAbits.RA5;
  7164  0B96  3000               	movlw	0
  7165  0B97  1283               	bcf	3,5	;RP0=0, select bank0
  7166  0B98  1303               	bcf	3,6	;RP1=0, select bank0
  7167  0B99  1A85               	btfsc	5,5	;volatile
  7168  0B9A  3001               	movlw	1
  7169  0B9B  1683               	bsf	3,5	;RP0=1, select bank1
  7170  0B9C  1303               	bcf	3,6	;RP1=0, select bank1
  7171  0B9D  00AB               	movwf	(_RoadsSensors^(0+128)+3)
  7172  0B9E                     i1l2546:	
  7173                           
  7174                           ;main.c: 423:     for (unsigned char i = 0; i < 4; i++)
  7175  0B9E  01FD               	clrf	conteggioVeicoli@i
  7176  0B9F                     i1l2550:	
  7177                           
  7178                           ;main.c: 424:     {;main.c: 425:         if (!RoadsSensors[i])
  7179  0B9F  087D               	movf	conteggioVeicoli@i,w
  7180  0BA0  3EA8               	addlw	(low (_RoadsSensors| 0))& (0+255)
  7181  0BA1  0084               	movwf	4
  7182  0BA2  1383               	bcf	3,7	;select IRP bank1
  7183  0BA3  0800               	movf	0,w
  7184  0BA4  1D03               	btfss	3,2
  7185  0BA5  2BA7               	goto	u212_21
  7186  0BA6  2BA8               	goto	u212_20
  7187  0BA7                     u212_21:	
  7188  0BA7  2BB1               	goto	i1l2554
  7189  0BA8                     u212_20:	
  7190  0BA8                     i1l2552:	
  7191                           
  7192                           ;main.c: 426:         {;main.c: 427:             count++;
  7193  0BA8  3001               	movlw	1
  7194  0BA9  1283               	bcf	3,5	;RP0=0, select bank0
  7195  0BAA  1303               	bcf	3,6	;RP1=0, select bank0
  7196  0BAB  07CA               	addwf	_count,f
  7197  0BAC  1803               	skipnc
  7198  0BAD  0ACB               	incf	_count+1,f
  7199  0BAE  3000               	movlw	0
  7200  0BAF  07CB               	addwf	_count+1,f
  7201                           
  7202                           ;main.c: 428:         }
  7203  0BB0  2BD8               	goto	i1l2560
  7204  0BB1                     i1l2554:	
  7205  0BB1  087D               	movf	conteggioVeicoli@i,w
  7206  0BB2  3EA8               	addlw	(low (_RoadsSensors| 0))& (0+255)
  7207  0BB3  0084               	movwf	4
  7208  0BB4  0800               	movf	0,w
  7209  0BB5  1903               	btfsc	3,2
  7210  0BB6  2BB8               	goto	u213_21
  7211  0BB7  2BB9               	goto	u213_20
  7212  0BB8                     u213_21:	
  7213  0BB8  2BD8               	goto	i1l2560
  7214  0BB9                     u213_20:	
  7215  0BB9                     i1l2556:	
  7216                           
  7217                           ;main.c: 430:         {;main.c: 431:             Conteggio(count, motorcycle, car, truck
      +                          , i);
  7218  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
  7219  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
  7220  0BBB  084B               	movf	_count+1,w
  7221  0BBC  00F1               	movwf	Conteggio@_count+1
  7222  0BBD  084A               	movf	_count,w
  7223  0BBE  00F0               	movwf	Conteggio@_count
  7224  0BBF  3057               	movlw	(low (_motorcycle| 0))& (0+255)
  7225  0BC0  00F9               	movwf	??_conteggioVeicoli
  7226  0BC1  0879               	movf	??_conteggioVeicoli,w
  7227  0BC2  00F2               	movwf	Conteggio@_motorcycle
  7228  0BC3  30E9               	movlw	(low (_car| 0))& (0+255)
  7229  0BC4  00FA               	movwf	??_conteggioVeicoli+1
  7230  0BC5  087A               	movf	??_conteggioVeicoli+1,w
  7231  0BC6  00F3               	movwf	Conteggio@_car
  7232  0BC7  30E5               	movlw	(low (_truck| 0))& (0+255)
  7233  0BC8  00FB               	movwf	??_conteggioVeicoli+2
  7234  0BC9  087B               	movf	??_conteggioVeicoli+2,w
  7235  0BCA  00F4               	movwf	Conteggio@_truck
  7236  0BCB  087D               	movf	conteggioVeicoli@i,w
  7237  0BCC  00FC               	movwf	??_conteggioVeicoli+3
  7238  0BCD  087C               	movf	??_conteggioVeicoli+3,w
  7239  0BCE  00F5               	movwf	Conteggio@index
  7240  0BCF  120A  158A  222C  120A  158A  	fcall	_Conteggio
  7241  0BD4                     i1l2558:	
  7242                           
  7243                           ;main.c: 432:             count = 0;
  7244  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  7245  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  7246  0BD6  01CA               	clrf	_count
  7247  0BD7  01CB               	clrf	_count+1
  7248  0BD8                     i1l2560:	
  7249                           
  7250                           ;main.c: 434:     }
  7251  0BD8  3001               	movlw	1
  7252  0BD9  00F9               	movwf	??_conteggioVeicoli
  7253  0BDA  0879               	movf	??_conteggioVeicoli,w
  7254  0BDB  07FD               	addwf	conteggioVeicoli@i,f
  7255  0BDC                     i1l2562:	
  7256  0BDC  3004               	movlw	4
  7257  0BDD  027D               	subwf	conteggioVeicoli@i,w
  7258  0BDE  1C03               	skipc
  7259  0BDF  2BE1               	goto	u214_21
  7260  0BE0  2BE2               	goto	u214_20
  7261  0BE1                     u214_21:	
  7262  0BE1  2B9F               	goto	i1l2550
  7263  0BE2                     u214_20:	
  7264  0BE2                     i1l325:	
  7265  0BE2  0008               	return
  7266  0BE3                     __end_of_conteggioVeicoli:	
  7267                           
  7268                           	psect	text27
  7269  0A2C                     __ptext27:	
  7270 ;; *************** function _Conteggio *****************
  7271 ;; Defined at:
  7272 ;;		line 99 in file "./CustomLib/TrafficLight.h"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;  _count          2    0[COMMON] unsigned int 
  7275 ;;  _motorcycle     1    2[COMMON] PTR unsigned char 
  7276 ;;		 -> motorcycle(4), 
  7277 ;;  _car            1    3[COMMON] PTR unsigned char 
  7278 ;;		 -> car(4), 
  7279 ;;  _truck          1    4[COMMON] PTR unsigned char 
  7280 ;;		 -> truck(4), 
  7281 ;;  index           1    5[COMMON] unsigned char 
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;		None
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      void 
  7286 ;; Registers used:
  7287 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7293 ;;      Params:         6       0       0       0       0
  7294 ;;      Locals:         0       0       0       0       0
  7295 ;;      Temps:          3       0       0       0       0
  7296 ;;      Totals:         9       0       0       0       0
  7297 ;;Total ram usage:        9 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; This function calls:
  7300 ;;		Nothing
  7301 ;; This function is called by:
  7302 ;;		_conteggioVeicoli
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           
  7307                           ;psect for function _Conteggio
  7308  0A2C                     _Conteggio:	
  7309  0A2C                     i1l2096:	
  7310                           ;incstack = 0
  7311                           ; Regs used in _Conteggio: [wreg-fsr0h+status,2+status,0]
  7312                           
  7313                           
  7314                           ;./CustomLib/TrafficLight.h: 99: void Conteggio(unsigned int _count, unsigned char _moto
      +                          rcycle[4], unsigned char _car[4], unsigned char _truck[4], unsigned char index);./Custom
      +                          Lib/TrafficLight.h: 100: {;./CustomLib/TrafficLight.h: 101:     if (_count >= 500)
  7315  0A2C  3001               	movlw	1
  7316  0A2D  0271               	subwf	Conteggio@_count+1,w
  7317  0A2E  30F4               	movlw	244
  7318  0A2F  1903               	skipnz
  7319  0A30  0270               	subwf	Conteggio@_count,w
  7320  0A31  1C03               	skipc
  7321  0A32  2A34               	goto	u141_21
  7322  0A33  2A35               	goto	u141_20
  7323  0A34                     u141_21:	
  7324  0A34  2A45               	goto	i1l2100
  7325  0A35                     u141_20:	
  7326  0A35                     i1l2098:	
  7327                           
  7328                           ;./CustomLib/TrafficLight.h: 102:     {;./CustomLib/TrafficLight.h: 103:         _motorc
      +                          ycle[index] = _motorcycle[index] + 1;
  7329  0A35  0875               	movf	Conteggio@index,w
  7330  0A36  0772               	addwf	Conteggio@_motorcycle,w
  7331  0A37  00F6               	movwf	??_Conteggio
  7332  0A38  0876               	movf	??_Conteggio,w
  7333  0A39  0084               	movwf	4
  7334  0A3A  1383               	bcf	3,7	;select IRP bank0
  7335  0A3B  0800               	movf	0,w
  7336  0A3C  3E01               	addlw	1
  7337  0A3D  00F7               	movwf	??_Conteggio+1
  7338  0A3E  0875               	movf	Conteggio@index,w
  7339  0A3F  0772               	addwf	Conteggio@_motorcycle,w
  7340  0A40  00F8               	movwf	??_Conteggio+2
  7341  0A41  0878               	movf	??_Conteggio+2,w
  7342  0A42  0084               	movwf	4
  7343  0A43  0877               	movf	??_Conteggio+1,w
  7344  0A44  0080               	movwf	0
  7345  0A45                     i1l2100:	
  7346                           
  7347                           ;./CustomLib/TrafficLight.h: 105:     if (_count >= 1500)
  7348  0A45  3005               	movlw	5
  7349  0A46  0271               	subwf	Conteggio@_count+1,w
  7350  0A47  30DC               	movlw	220
  7351  0A48  1903               	skipnz
  7352  0A49  0270               	subwf	Conteggio@_count,w
  7353  0A4A  1C03               	skipc
  7354  0A4B  2A4D               	goto	u142_21
  7355  0A4C  2A4E               	goto	u142_20
  7356  0A4D                     u142_21:	
  7357  0A4D  2A5E               	goto	i1l2104
  7358  0A4E                     u142_20:	
  7359  0A4E                     i1l2102:	
  7360                           
  7361                           ;./CustomLib/TrafficLight.h: 106:     {;./CustomLib/TrafficLight.h: 107:         _car[in
      +                          dex] = _car[index] + 1;
  7362  0A4E  0875               	movf	Conteggio@index,w
  7363  0A4F  0773               	addwf	Conteggio@_car,w
  7364  0A50  00F6               	movwf	??_Conteggio
  7365  0A51  0876               	movf	??_Conteggio,w
  7366  0A52  0084               	movwf	4
  7367  0A53  1383               	bcf	3,7	;select IRP bank0
  7368  0A54  0800               	movf	0,w
  7369  0A55  3E01               	addlw	1
  7370  0A56  00F7               	movwf	??_Conteggio+1
  7371  0A57  0875               	movf	Conteggio@index,w
  7372  0A58  0773               	addwf	Conteggio@_car,w
  7373  0A59  00F8               	movwf	??_Conteggio+2
  7374  0A5A  0878               	movf	??_Conteggio+2,w
  7375  0A5B  0084               	movwf	4
  7376  0A5C  0877               	movf	??_Conteggio+1,w
  7377  0A5D  0080               	movwf	0
  7378  0A5E                     i1l2104:	
  7379                           
  7380                           ;./CustomLib/TrafficLight.h: 109:     if (_count >= 3000)
  7381  0A5E  300B               	movlw	11
  7382  0A5F  0271               	subwf	Conteggio@_count+1,w
  7383  0A60  30B8               	movlw	184
  7384  0A61  1903               	skipnz
  7385  0A62  0270               	subwf	Conteggio@_count,w
  7386  0A63  1C03               	skipc
  7387  0A64  2A66               	goto	u143_21
  7388  0A65  2A67               	goto	u143_20
  7389  0A66                     u143_21:	
  7390  0A66  2A77               	goto	i1l180
  7391  0A67                     u143_20:	
  7392  0A67                     i1l2106:	
  7393                           
  7394                           ;./CustomLib/TrafficLight.h: 110:     {;./CustomLib/TrafficLight.h: 111:         _truck[
      +                          index] = _truck[index] + 1;
  7395  0A67  0875               	movf	Conteggio@index,w
  7396  0A68  0774               	addwf	Conteggio@_truck,w
  7397  0A69  00F6               	movwf	??_Conteggio
  7398  0A6A  0876               	movf	??_Conteggio,w
  7399  0A6B  0084               	movwf	4
  7400  0A6C  1383               	bcf	3,7	;select IRP bank0
  7401  0A6D  0800               	movf	0,w
  7402  0A6E  3E01               	addlw	1
  7403  0A6F  00F7               	movwf	??_Conteggio+1
  7404  0A70  0875               	movf	Conteggio@index,w
  7405  0A71  0774               	addwf	Conteggio@_truck,w
  7406  0A72  00F8               	movwf	??_Conteggio+2
  7407  0A73  0878               	movf	??_Conteggio+2,w
  7408  0A74  0084               	movwf	4
  7409  0A75  0877               	movf	??_Conteggio+1,w
  7410  0A76  0080               	movwf	0
  7411  0A77                     i1l180:	
  7412  0A77  0008               	return
  7413  0A78                     __end_of_Conteggio:	
  7414                           
  7415                           	psect	text28
  7416  17D9                     __ptext28:	
  7417 ;; *************** function _UART_Read *****************
  7418 ;; Defined at:
  7419 ;;		line 389 in file "main.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;		None
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;		None
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  1    wreg      unsigned char 
  7426 ;; Registers used:
  7427 ;;		wreg
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7433 ;;      Params:         0       0       0       0       0
  7434 ;;      Locals:         0       0       0       0       0
  7435 ;;      Temps:          0       0       0       0       0
  7436 ;;      Totals:         0       0       0       0       0
  7437 ;;Total ram usage:        0 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; This function calls:
  7440 ;;		Nothing
  7441 ;; This function is called by:
  7442 ;;		_ISR
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           
  7447                           ;psect for function _UART_Read
  7448  17D9                     _UART_Read:	
  7449  17D9                     i1l2538:	
  7450                           ;incstack = 0
  7451                           ; Regs used in _UART_Read: [wreg]
  7452                           
  7453  17D9                     i1l306:	
  7454                           ;main.c: 392:         ;
  7455                           
  7456                           
  7457                           ;main.c: 391:     while (!RCIF)
  7458  17D9  1283               	bcf	3,5	;RP0=0, select bank0
  7459  17DA  1303               	bcf	3,6	;RP1=0, select bank0
  7460  17DB  1E8C               	btfss	12,5	;volatile
  7461  17DC  2FDE               	goto	u211_21
  7462  17DD  2FDF               	goto	u211_20
  7463  17DE                     u211_21:	
  7464  17DE  2FD9               	goto	i1l306
  7465  17DF                     u211_20:	
  7466  17DF                     i1l308:	
  7467                           
  7468                           ;main.c: 393:     RCIF = 0;
  7469  17DF  128C               	bcf	12,5	;volatile
  7470  17E0                     i1l2540:	
  7471                           
  7472                           ;main.c: 394:     return RCREG;
  7473  17E0  081A               	movf	26,w	;volatile
  7474  17E1                     i1l309:	
  7475  17E1  0008               	return
  7476  17E2                     __end_of_UART_Read:	
  7477  007E                     btemp	set	126	;btemp
  7478  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    12
    Data        12
    BSS         111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     42      74
    BANK1            80      0      77
    BANK3            96     13      27
    BANK2            96      0       0

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[4] size(2) Largest target is 14
		 -> s3(BANK3[14]), s2(BANK1[14]), s1(BANK1[14]), s0(BANK1[14]), 

    Conteggio@_truck	PTR unsigned char  size(1) Largest target is 4
		 -> truck(BANK1[4]), 

    Conteggio@_car	PTR unsigned char  size(1) Largest target is 4
		 -> car(BANK1[4]), 

    Conteggio@_motorcycle	PTR unsigned char  size(1) Largest target is 4
		 -> motorcycle(BANK0[4]), 

    SetReceivedTimes@_semafori	PTR PTR struct . size(1) Largest target is 8
		 -> Semafori(BANK0[8]), 

    SetReceivedTimes@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 

    SetDefaultTimers@_semafori	PTR PTR struct . size(1) Largest target is 8
		 -> Semafori(BANK0[8]), 

    GetTime@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 

    UpdateTimes@_semafori	PTR PTR struct . size(1) Largest target is 8
		 -> Semafori(BANK0[8]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 

    GetDigits@unita	PTR unsigned char  size(1) Largest target is 1
		 -> unita(BANK0[1]), 

    GetDigits@decine	PTR unsigned char  size(1) Largest target is 1
		 -> decine(BANK0[1]), 

    GetDigits@centinaia	PTR unsigned char  size(1) Largest target is 1
		 -> centinaia(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli
    _conteggioVeicoli->_Conteggio

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _rand->___lmul
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _ShowDigitsOnDisplay->___awmod
    _SetReceivedTimes->_GetTime
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   28629
                                             32 BANK0     10    10      0
                                              0 BANK3     13    13      0
                           _ADC_Read
                          _GetDigits
                   _SetDefaultTimers
                   _SetReceivedTimes
                _ShowDigitsOnDisplay
                          _UART_Init
                        _UpdateTimes
                          _bitParita
                           _init_ADC
                       _luciSemaforo
                                _map
                               _rand
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    5066
                                             24 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      42
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1568
                                              4 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _rand                                                 7     5      2     404
                                             17 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     404
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    5720
                                             20 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1934
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _luciSemaforo                                         4     3      1     232
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1519
                                              8 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     358
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UpdateTimes                                         21    21      0    1071
                                              4 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     990
                                             19 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     842
                                              4 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _ShowDigitsOnDisplay                                  2     2      0    3000
                                             11 BANK0      2     2      0
                         _SetDisplay
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _SetDisplay                                           4     1      3    1122
                                              4 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetReceivedTimes                                    14    13      1    1986
                                             12 BANK0     14    13      1
                            _GetTime
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     793
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              8     6      2     514
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    16     9      7    1834
                                              4 BANK0     16     9      7
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            8     4      4    4527
                                             20 BANK0      8     4      4
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1878
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1902
                                             11 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      42
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0     822
                                              0 BANK0      4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     5     5      0     822
                                              9 COMMON     5     5      0
                          _Conteggio
 ---------------------------------------------------------------------------------
 (5) _Conteggio                                            9     3      6     710
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _SetDefaultTimers
   _SetReceivedTimes
     _GetTime
     ___bmul
   _ShowDigitsOnDisplay
     _SetDisplay
     ___awmod
   _UART_Init
     ___aldiv
   _UpdateTimes
   _bitParita
     _bitChange
   _init_ADC
   _luciSemaforo
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _rand
     ___lmul
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli
     _Conteggio

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      D      1B       9       28.1%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4D       7       96.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      4A       5       92.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C0      12        0.0%
ABS                  0      0      C0       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Jul 12 18:04:04 2020

                 luciSemaforo@lux 0024                                 pc 0002                    ___bmul@product 0026  
                     __CFG_CP$OFF 0000                                l83 091C                      ___awdiv@sign 0031  
                              _s0 00D7                                _s1 00C9                                _s2 00BB  
                              _s3 0190                                fsr 0004               ___wmul@multiplicand 0026  
                  _GetDigits$1214 0039                 luciSemaforo@index 0027                       __CFG_LVP$ON 0000  
                             l100 0DD1                               l111 0F6E                               l104 08B6  
                             l112 0F7A                               l131 0F0E                               l116 0FBE  
                             l117 0FCA                               l125 0EBD                               l134 0F36  
                             l119 0FFF                               l240 008E                               l314 08E7  
                             l147 07E4                               l331 0A7C                               l340 0A9F  
                             l157 099C                               l317 0838                               l341 0AA3  
                             l333 0A80                               l174 0CB9                               l334 0A84  
                             l342 0ACA                               l238 03C2                               l169 06CA  
                             l257 028D                               l354 0D35                               l282 17FF  
                             l338 0A9B                               l450 086D                               l603 0C4B  
                             l515 0DE6                               l291 0956                               l275 056F  
                             l452 0885                               l285 0852                               l525 0E6E  
                             l294 17E5                               l288 085E                               l616 0B7D  
                             l464 0A2B                               l296 17E9                               l297 17EC  
                             l476 07FB                               l900 09E3                      __CFG_CPD$OFF 0000  
                             _ISR 0ACB                               _car 00E9                               _map 08E8  
                             fsr0 0004                               indf 0000                      ___awmod@sign 002A  
                    __CFG_FOSC$HS 0000                              ?_ISR 0070             ??_ShowDigitsOnDisplay 002B  
                            l4000 0E96                              l4002 0EAA                              l4100 07E9  
                            l4012 0ECC                              l4004 0EB0                              l4102 07ED  
                            l4030 0EFB                              l4022 0EE3                              l4014 0ED2  
                            l4006 0EC3                              l4200 0B2A                              l4104 07F1  
                            l4120 0DF5                              l4112 0DD2                              l4040 0F22  
                            l4032 0F01                              l4016 0EDF                              l4008 0ECB  
                            l4210 0B40                              l4202 0B2F                              l4050 0969  
                            l4106 07F3                              l4130 0E19                              l4122 0DF9  
                            l4114 0DD5                              l4042 0F28                              l4034 0F14  
                            l4220 0B5C                              l4212 0B43                              l4204 0B31  
                            l4052 0971                              l4108 07FA                              l4140 0E47  
                            l4132 0E1D                              l4124 0E01                              l4116 0DD9  
                            l4300 0FE4                              l4044 0F35                              l4036 0F21  
                            l4028 0EE7                              l4230 0B79                              l4222 0B62  
                            l4214 0B4A                              l4206 0B35                              l4054 0982  
                            l4142 0E50                              l4134 0E26                              l4126 0E09  
                            l4118 0DEA                              l4302 06CE                              l4070 085F  
                            l4062 17E5                              l4160 0BF1                              l4152 0BE3  
                            l4224 0B69                              l4216 0B4E                              l4208 0B3A  
                            l4240 0D3A                              l4056 0990                              l4048 095A  
                            l4136 0E38                              l4128 0E0C                              l4144 0E56  
                            l4400 0955                              l4320 0760                              l4080 0881  
                            l4072 0863                              l4064 17EA                              l4170 0C06  
                            l4162 0BF5                              l4154 0BE6                              l4218 0B52  
                            l4226 0B6F                              l4242 0D4F                              l4330 057C  
                            l4058 0998                              l4066 0827                              l4146 0E5B  
                            l4138 0E46                              l4322 0766                              l4314 06D0  
                            l4250 0F3A                              l4074 0867                              l4234 08E8  
                            l4090 0A09                              l4402 099D                              l4410 08BA  
                            l4180 0C29                              l4172 0C09                              l4164 0BFA  
                            l4156 0BEA                              l4228 0B74                              l4244 0D6B  
                            l4068 0836                              l4148 0E66                              l4324 07A2  
                            l4316 071B                              l4308 06CF                              l4076 0874  
                            l4092 0A12                              l4084 09E4                              l4404 09BE  
                            l4420 08D7                              l4412 08CD                              l4430 084F  
                            l4190 0C42                              l4182 0C2F                              l4174 0C10  
                            l4166 0BFE                              l4158 0BEF                              l4246 0DA8  
                            l4238 0D39                              l4342 0581                              l4350 0647  
                            l4326 07DA                              l4318 075C                              l4270 0F76  
                            l4262 0F45                              l4078 087B                              l4094 0A23  
                            l4086 09EE                              l4406 09CC                              l4422 08DD  
                            l4510 003F                              l4432 0856                              l4192 0C47  
                            l4184 0C30                              l4176 0C14                              l4168 0C00  
                            l4248 0DBB                              l4360 066E                              l4344 05C3  
                            l4352 065A                              l4336 057F                              l4328 07DE  
                            l4280 0F91                              l4272 0F80                              l4264 0F5B  
                            l4256 0F41                              l4440 0A88                              l4088 09F2  
                            l4424 08E1                              l4520 004C                              l4512 0045  
                            l4426 083C                              l4186 0C37                              l4178 0C18  
                            l4354 065E                              l4346 0605                              l4098 07E8  
                            l4290 0FB1                              l4274 0F8D                              l4266 0F61  
                            l4418 08CE                              l4610 0291                              l4530 005B  
                            l4522 0050                              l4514 0046                              l4428 0848  
                            l4188 0C3D                              l4196 0B23                              l4356 0664  
                            l4380 0CB4                              l4372 0C57                              l4292 0FC4  
                            l4268 0F74                              l4444 0AA7                              l4436 0A7B  
                            l4620 0383                              l4612 034F                              l4604 0279  
                            l4540 0086                              l4532 0066                              l4524 0052  
                            l4516 0048                              l4198 0B26                              l4358 0668  
                            l4374 0C66                              l4366 0C4F                              l4470 0CBB  
                            l4294 0FC6                              l4286 0F95                              l4390 17F8  
                            l4630 0398                              l4614 035E                              l4606 027E  
                            l4550 0092                              l4542 0087                              l4534 0081  
                            l4526 0054                              l4518 004A                              ?_map 0034  
                            l4376 0C74                              l4368 0C50                              l4480 0CF3  
                            l4472 0CC0                              l4392 091D                              l4296 0FD0  
                            l4288 0FAB                              l4384 17ED                              l4448 0ABA  
                            l4632 03A0                              l4624 038A                              l4616 036F  
                            l4608 0286                              l4560 00C5                              l4640 03AD  
                            l4544 0088                              l4536 0084                              l4528 0056  
                            l4378 0C87                              l4474 0CD4                              l4394 0925  
                            l4298 0FDD                              l4386 17F1                              l4650 03CE  
                            l4642 03C6                              l4634 03A3                              l4626 038F  
                            l4618 0380                              l4570 00FE                              l4562 00D3  
                            l4546 0089                              l4538 0085                              l4476 0CD9  
                            l4484 0D08                              l4468 0CBA                              l4396 0953  
                            l4388 17F4                              l4660 03F0                              l4652 03D0  
                            l4644 03C7                              l4636 03A9                              l4572 0149  
                            l4580 022A                              l4564 00DA                              l4556 0093  
                            l4478 0CDE                              l4486 0D1D                              l4398 0954  
                            l4670 0496                              l4662 040D                              l4646 03C8  
                            l4654 03E4                              l4910 0236                              l4574 0194  
                            l4582 0244                              l4566 00E8                              l4558 00C0  
                            l4920 0D12                              l4680 04D4                              l4672 0497  
                            l4664 047B                              l4656 03EA                              l4648 03CA  
                            l4912 03BA                              l4592 0254                              l4584 024C  
                            l4576 01DF                              l4568 00EF                              l4922 064F  
                            l3970 0898                              l4914 0A90                              l4674 049C  
                            l4666 0481                              l4682 04F8                              l4658 03EE  
                            l4690 0563                              l4594 0263                              l4586 0252  
                            l4916 0AAF                              l3980 0E72                              l4692 0569  
                            l4668 048E                              l4676 04A2                              l4684 0500  
                            l4596 0269                              l4918 0AC2                              l3982 0E81  
                            l4694 056D                              l4686 0506                              l4678 04C6  
                            l4598 0276                              l3976 08A7                              l3968 0889  
                            l3984 0E8E                              l4696 0573                              l4688 055E  
                            l3994 0E92                              l3986 0E8F                              l4698 0577  
                            l3988 0E90                              u4010 0C18                              u4011 0C17  
                            u4005 0C0A                              u4030 0C29                              u4110 0B52  
                            u4031 0C28                              u4111 0B51                              u4120 0B5C  
                            u4200 0F8D                              u4025 0C19                              u4121 0B5B  
                            u4105 0B44                              u4201 0F8C                              u4050 0C3D  
                            u4051 0C3C                              u4035 0C25                              u4060 0C42  
                            u4140 0B6F                              u4300 0664                              u4220 0FBE  
                            u4061 0C41                              u4045 0C31                              u4141 0B6E  
                            u4125 0B58                              u4301 0663                              u4221 0FBD  
                            u4205 0F89                              u4150 0B74                              u4070 0B2A  
                            u4310 066E                              u4230 0FC4                              u4214 0FA3  
                            u4151 0B73                              u4135 0B63                              u4071 0B29  
                            u4311 066D                              u4231 0FC3                              u4215 0FA1  
                            u4080 0B35                              u4160 0D6B                              u4320 0C56  
                            u4400 0CD9                              u4240 0FDD                              u4081 0B34  
                            u4161 0D6A                              u4321 0C55                              u4401 0CD8  
                            u4241 0FDC                              u4225 0FBA                              u4090 0B40  
                            u4410 0CDE                              u3610 0898                              u4250 0FE4  
                            u4091 0B3F                              u4411 0CDD                              u3611 0897  
                            u4251 0FE3                              u4340 0934                              u4260 071B  
                            u3604 088F                              u4180 0F6E                              u3700 0F0E  
                            u4500 0276                              u4165 0D67                              u4261 071A  
                            u3605 088D                              u4245 0FD9                              u4181 0F6D  
                            u3701 0F0D                              u4501 0275                              u4270 0766  
                            u4190 0F74                              u4174 0F53                              u4350 09DB  
                            u3710 0F14                              u4510 028C                              u4335 0C7C  
                            u4271 0765                              u4191 0F73                              u4175 0F51  
                            u3711 0F13                              u4511 028B                              u4280 07A2  
                            u3624 089E                              u3800 09F2                              u4360 08E7  
                            u4600 047B                              u4520 0389                              u4345 092F  
                            u4281 07A1                              u4265 0717                              u3625 089C  
                            u4185 0F6A                              u3801 09F1                              u3705 0F0A  
                            u4361 08E6                              u4601 047A                              u4521 0388  
                            u4505 0272                              u4290 07E4                              u3634 08AD  
                            u3730 0F35                              u4610 0496                              u4530 03A0  
                            u4450 008D                              u4291 07E3                              u3635 08AB  
                            u3811 09FB                              u4355 09D6                              u3731 0F34  
                            u4611 0495                              u4531 039F                              u4451 008C  
                            u4380 0856                              u3812 0A02                              u3724 0F1A  
                            u3660 0EBD                              u4620 049C                              u4540 03A9  
                            u4460 00C5                              u4381 0855                              u3813 0A09  
                            u3725 0F18                              u3661 0EBC                              u3645 0E84  
                            u4621 049B                              u4541 03A8                              u4461 00C4  
                            u4390 0CC0                              u3910 0E1D                              u3670 0EC3  
                            u3654 0EA2                              u3750 17E9                              u4630 04C6  
                            u4550 03C6                              u4470 00DA                              u4375 083F  
                            u4391 0CBF                              u3911 0E1C                              u3735 0F31  
                            u3671 0EC2                              u3655 0EA0                              u3751 17E8  
                            u4631 04C5                              u4551 03C5                              u4471 00D9  
                            u3760 0867                              u3840 0A23                              u3680 0EDF  
                            u4640 0506                              u4560 03CE                              u4480 00EF  
                            u3745 0977                              u3905 0E0E                              u3761 0866  
                            u3841 0A22                              u3825 0A0B                              u3681 0EDE  
                            u3665 0EB9                              u4641 0505                              u4561 03CD  
                            u4481 00EE                              u3850 07ED                              u3930 0E38  
                            u4650 0569                              u4570 03EA                              u4490 0252  
                            u3851 07EC                              u3931 0E37                              u4707 17FC  
                            u3835 0A13                              u4651 0568                              u4571 03E9  
                            u4491 0251                              u3860 07FA                              u4660 056D  
                            u4580 03EE                              _RCIF 0065                              u4717 084C  
                            u3861 07F9                              u3925 0E1F                              u3685 0EDB  
                            u4661 056C                              u4581 03ED                              u3950 0E56  
                            u3870 0DD9                              u3790 0881                              u3694 0EF3  
                            u4670 0573                              u4590 040D                              u3951 0E55  
                            u3935 0E34                              u3871 0DD8                              u3791 0880  
                            u3775 086E                              u3695 0EF1                              u4671 0572  
                            u4591 040C                              u3960 0E5B                              u3880 0DEA  
                            u4680 0577                              u3961 0E5A                              u3945 0E48  
                            u3881 0DE9                              u3785 0875                              u4681 0576  
                            u3970 0BEA                              u3890 0E09                              u3971 0BE9  
                            u3891 0E08                              u3980 0BF5                              u3981 0BF4  
                            u3990 0C06                              u3991 0C05                              _TMR0 0001  
                            _TXIF 0064                      __CFG_WRT$OFF 0000                              _disp 0052  
                            _main 003F                              _rand 099D                              _temp 004E  
                            _time 00A0                              map@x 0034                              btemp 007E  
                __end_of_ADC_Read 085F                     __CFG_BOREN$ON 0000                              start 0010  
                 __end_of_GetTime 099D                 ___bmul@multiplier 0027                             ??_ISR 0020  
       __size_of_conteggioVeicoli 0065                             ??_map 003E                   __end_of___aldiv 0E6F  
                           ?_main 0070                             ?_rand 0031                   __end_of___awdiv 0C4C  
                   __CFG_WDTE$OFF 0000                   __end_of___awmod 0B7E                   ___awdiv@divisor 002B  
                           _T1CON 0010              bitParita@errorColumn 002E                             i1l306 17D9  
                           i1l308 17DF                             i1l180 0A77                             i1l309 17E1  
                           i1l325 0BE2                             i1l364 0B1A                   ___awdiv@counter 0030  
                           _RCREG 001A              UpdateTimes@_semafori 0037                             _TMR1H 000F  
                           _TMR1L 000E                             _SPBRG 0099                             _PORTD 0008  
                           _TRISA 0085                             _TRISB 0086                             _TRISC 0087  
                           _TRISD 0088                             _TRISE 0089                             _TXREG 0019  
             ___lmul@multiplicand 0028                     __CFG_PWRTE$ON 0000                __size_of_UART_Init 003A  
              __size_of_UART_Read 0009                   __end_of_display 1011                             _count 004A  
                           _randx 005E                             _unita 005D                             main@i 0049  
                           _truck 00E5                             pclath 000A                             status 0003  
                           wtemp0 007E                   __initialization 0013                      __end_of_main 057C  
                    __end_of_rand 09E4         __size_of_SetReceivedTimes 006E                __size_of_GetDigits 009C  
                          ??_main 019E                            ??_rand 0033                 SetDefaultTimers@i 0033  
               SetDefaultTimers@l 0032                __size_of_BuildByte 00C8                        _SetDisplay 0824  
                   bitChange@dato 0027                            _ADCON0 001F                            _ADCON1 009F  
              __size_of_Conteggio 004C                            _ADRESH 001E                            _ADRESL 009E  
                ___awdiv@dividend 002D                            i1l2100 0A45                            i1l2102 0A4E  
                          i1l2104 0A5E                            i1l2106 0A67                            i1l2096 0A2C  
                          i1l2098 0A35                            i1l2540 17E0                            i1l2550 0B9F  
                          i1l2560 0BD8                            i1l2552 0BA8                            i1l2544 0B7E  
                          i1l2800 0AD8                            i1l2538 17D9                            i1l2562 0BDC  
                          i1l2554 0BB1                            i1l2546 0B9E                            i1l2802 0ADC  
                          i1l2810 0AF3                            i1l2556 0BB9                            i1l2820 0B05  
                          i1l2812 0AF7                            i1l2804 0AE0                            i1l2558 0BD4  
                          i1l2830 0B12                            i1l2822 0B06                            i1l2814 0AF8  
                          i1l2806 0AEE                            u211_20 17DF                            i1l2832 0B16  
                          i1l2824 0B0A                            i1l2816 0AFD                            i1l2808 0AF2  
                          u211_21 17DE                            i1l2834 0B18                            i1l2826 0B10  
                          i1l2818 0B01                            i1l2828 0B11                            u212_20 0BA8  
                          i1l2792 0ACB                            u212_21 0BA7                            i1l2794 0ACF  
                          i1l2796 0AD3                            i1l2798 0AD6                            u141_20 0A35  
                          u213_20 0BB9                            u141_21 0A34                            u213_21 0BB8  
                          u142_20 0A4E                            u214_20 0BE2                            u142_21 0A4D  
                          u214_21 0BE1                            u143_20 0A67                            u143_21 0A66  
                          _INTCON 000B                            u243_20 0ACF                            u243_21 0ACE  
                          u244_20 0AD3                            u244_21 0AD2                            u245_20 0ADC  
                          u245_21 0ADB                            u246_20 0AE0                            u246_21 0ADF  
                          u247_20 0AF7                            u247_21 0AF6                            u248_20 0B05  
                          u248_21 0B04                            u249_20 0B10                            u249_21 0B0F  
                          _TMR0IF 005A                            _TMR1IF 0060                         ??_GetTime 0026  
                    ?_UART_TxChar 0070                     main@randomCar 0041                 __end_of_UART_Init 0957  
               __end_of_UART_Read 17E2                            ___bmul 07E5                            ___lmul 09E4  
                       ??___aldiv 002C                   GetTime@shortInt 0029                            ___wmul 085F  
                       ??___awdiv 002F                            _decine 005C                         ??___awmod 0028  
                __end_of_init_ADC 1800                            _cycled 0053                  ___awdiv@quotient 0032  
                 ___awmod@divisor 0024                   ___awmod@counter 0029                  __end_of_sendByte 08E8  
                 GetDigits@decine 0034                         ?_ADC_Read 0024                            saved_w 007E  
         __end_of__initialization 003B                 __end_of_GetDigits 0DD2                     ??_UpdateTimes 0024  
            bitParita@sommaColumn 002D         __size_of_SetDefaultTimers 014F               ___bmul@multiplicand 0024  
                  __pcstackCOMMON 0070                 __end_of_BuildByte 0F37                      __pidataBANK0 0805  
              __size_of_bitChange 0031                  _conteggioVeicoli 0B7E                 __end_of_Conteggio 0A78  
                   ?_luciSemaforo 0024                __size_of_bitParita 00C9                        ??_ADC_Read 0026  
          SetDefaultTimers@giallo 0028         SetReceivedTimes@_semafori 002C                       ?_SetDisplay 0024  
                   GetDigits@Time 0036              _dataFromGatewayIndex 0050              _timerReadFromGateway 004F  
                      __pbssBANK0 004A                        __pbssBANK1 00A0                        __pbssBANK3 0190  
                      __pmaintext 003F                           ?___bmul 0024                           ?___lmul 0024  
                         ?___wmul 0024                    ??_luciSemaforo 0025               __end_of_UpdateTimes 07E5  
                   sendByte@byte0 003D                     sendByte@byte1 0038                        __pintentry 0004  
                  ___lmul@product 002D                  _SetReceivedTimes 0C4C       __end_of_ShowDigitsOnDisplay 0D36  
               __end_of_bitChange 08B7                        __stringtab 1000                 __end_of_bitParita 1000  
                       ?_init_ADC 0070                           _GetTime 0957                   BuildByte@valore 0025  
                 BuildByte@txByte 0029           GetTime@_dataFromGateway 0024                         ?_sendByte 0038  
                      bitChange@n 0024                    main@randomMoto 0040                        _n_semafori 1011  
            __size_of_UART_TxChar 000B                           ___aldiv 0DD2                   __size_of___bmul 0017  
                         ___awdiv 0BE3                   __size_of___lmul 0048                           ___awmod 0B23  
             __size_of_SetDisplay 0015                   __size_of___wmul 0027                 conteggioVeicoli@i 007D  
                         __ptext1 08B7                           __ptext2 17E2                           __ptext3 0E6F  
                         __ptext4 099D                           __ptext5 09E4                           __ptext6 08E8  
                         __ptext7 085F                           __ptext8 0A78                           __ptext9 17ED  
                         _display 1006                      __size_of_ISR 0058                        bitParita@i 0036  
                      bitParita@y 0031                      __size_of_map 0035                  ___awmod@dividend 0026  
                ___aldiv@dividend 0028              BuildByte@sommaColumn 002F                           _umidita 004D  
                         clrloop0 17D2              end_of_initialization 003B                        ??_init_ADC 0024  
                  main@lux_select 0047                       _UpdateTimes 06CB                        ??_sendByte 003A  
                _SetDefaultTimers 057C                         _RCSTAbits 0018                  ___aldiv@quotient 002F  
                      _motorcycle 0057                         _UART_Init 091D                         _UART_Read 17D9  
           SetReceivedTimes@index 0038                         _PORTAbits 0005                         _PORTBbits 0006  
                       _PORTCbits 0007                      SetDisplay@d1 0027                      SetDisplay@d2 0024  
                    SetDisplay@d3 0025                         _TRISCbits 0087                 __size_of_ADC_Read 0026  
        __end_of_conteggioVeicoli 0BE3              __end_of_luciSemaforo 0ACB                        map@out_max 003C  
               bitParita@errorRow 0030                        map@out_min 003A  SetReceivedTimes@_dataFromGateway 0037  
                       _TXSTAbits 0098                         _GetDigits 0D36                 bitParita@sommaRow 002C  
                  __end_of___bmul 07FC                    __end_of___lmul 0A2C                    __end_of___wmul 0886  
                      ?_UART_Init 0033                        ?_UART_Read 0070                         _BuildByte 0E6F  
                       _Conteggio 0A2C                 BuildByte@sommaRow 002E               start_initialization 0013  
                     __end_of_ISR 0B23                      ??_SetDisplay 0027                       __end_of_map 091D  
        __end_of_SetReceivedTimes 0CBA                        ?_GetDigits 0034                          ??___bmul 0025  
                        ??___lmul 002C                    ADC_Read@canale 0027                          ??___wmul 0028  
                      init_fetch0 0811                       __pdataBANK0 005E                __end_of_SetDisplay 0839  
                      ?_BuildByte 0024                    GetDigits@unita 0035                        ?_Conteggio 0070  
                       ___latbits 0002                     __pcstackBANK0 0020                     __pcstackBANK3 019E  
                        ?_GetTime 0024                         _bitChange 0886             SetDefaultTimers@verde 0026  
           SetDefaultTimers@rosso 0024                 __size_of_init_ADC 0013                         _bitParita 0F37  
                       _centinaia 005B                 __size_of_sendByte 0031                          ?___aldiv 0024  
                        ?___awdiv 002B                          ?___awmod 0024                       ??_UART_Init 0035  
                     ??_UART_Read 0070                    BuildByte@i_359 0036                         __pstrings 1000  
                  BuildByte@y_360 0032                    sendByte@valore 0039                    sendByte@txByte 003E  
                  BuildByte@byte0 0028                    BuildByte@byte1 0024          __end_of_SetDefaultTimers 06CB  
                        _ADC_Read 0839             __size_of_luciSemaforo 0053                         _count_lux 0051  
                   UART_TxChar@ch 0024      __size_of_ShowDigitsOnDisplay 007C                   ___aldiv@divisor 0024  
               SetReceivedTimes@i 0039                 interrupt_function 0004                   ___aldiv@counter 002D  
                      ?_bitChange 0024                    ___wmul@product 0028        SetReceivedTimes@semaforoId 0035  
                    ?_UpdateTimes 0070                         clear_ram0 17D1                          _PIE1bits 008C  
                   ??_UART_TxChar 0024                        ?_bitParita 0070                       ??_GetDigits 0038  
                        _GO_nDONE 00FA                      _luciSemaforo 0A78                         _pressione 004C  
               UART_Init@baudrate 0033                       ??_BuildByte 0026                         map@in_max 0038  
                       map@in_min 0036                       __stringbase 1005                         main@i_490 0043  
                       main@i_492 0044                       ??_Conteggio 0076                         main@i_495 0048  
                       main@i_489 0045                 ___wmul@multiplier 0024                      GetTime@index 0028  
               ___lmul@multiplier 0024                      _RoadsSensors 00A8                 ?_conteggioVeicoli 0070  
                    _secondPassed 0054                ??_conteggioVeicoli 0079                  __size_of_GetTime 0046  
                        _Semafori 0062                GetDigits@centinaia 003B                   main@randomTruck 0042  
                  bitParita@i_347 0038                       _readGateway 0055                    bitParita@y_348 0033  
                __size_of___aldiv 009D               __end_of_UART_TxChar 17ED                  __size_of___awdiv 0069  
                __size_of___awmod 005B                    bitParita@error 002F                __end_of__stringtab 1006  
                       sendByte@i 003F                          __ptext10 0F37                          __ptext11 0886  
                        __ptext20 057C                          __ptext12 06CB                          __ptext21 0D36  
                        __ptext13 091D                          __ptext22 0B23                          __ptext14 0DD2  
                        __ptext23 0BE3                          __ptext15 0CBA                          __ptext24 0839  
                        __ptext16 0824                          __ptext25 0ACB                          __ptext17 0C4C  
                        __ptext26 0B7E                          __ptext18 07E5                          __ptext27 0A2C  
                        __ptext19 0957                          __ptext28 17D9                __end_of_n_semafori 1012  
                        _init_ADC 17ED                       bitParita@rx 0035                       ??_bitChange 0025  
               ?_SetReceivedTimes 002C                     __size_of_main 053D                   _dataFromGateway 00AC  
                   __size_of_rand 0047                       ??_bitParita 0028                          _sendByte 08B7  
              ??_SetReceivedTimes 002D                        _INTCONbits 000B                          init_ram0 0815  
            Conteggio@_motorcycle 0072                          intlevel1 0000                   _readGatewayDone 0056  
                       stringcode 1000                       _UART_TxChar 17E2           SetReceivedTimes@colorId 0036  
            __size_of_UpdateTimes 011A                        GetTime@tmp 002A               _ShowDigitsOnDisplay 0CBA  
                      _OPTION_REG 0081                   SetDisplay@value 0026                          stringdir 1000  
                        stringtab 1000                      UpdateTimes@i 0036                      UpdateTimes@l 0038  
               ?_SetDefaultTimers 0024                      ___aldiv@sign 002E                ??_SetDefaultTimers 002B  
            ?_ShowDigitsOnDisplay 0070                        BuildByte@i 0034                        BuildByte@y 0030  
       SetDefaultTimers@_semafori 002A                   Conteggio@_count 0070                     Conteggio@_car 0073  
                 Conteggio@_truck 0074                    Conteggio@index 0075  
