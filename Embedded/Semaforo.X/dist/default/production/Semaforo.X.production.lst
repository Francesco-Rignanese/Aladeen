

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Jul 16 17:45:35 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 2.10
    48                           ; Generated 31/07/2019 GMT
    49                           ; 
    50                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F877A Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0014                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  001D                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  0088                     	;# 
   121  0089                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  008E                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  010F                     	;# 
   139  018C                     	;# 
   140  018D                     	;# 
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  0008                     	;# 
   150  0009                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000D                     	;# 
   155  000E                     	;# 
   156  000E                     	;# 
   157  000F                     	;# 
   158  0010                     	;# 
   159  0011                     	;# 
   160  0012                     	;# 
   161  0013                     	;# 
   162  0014                     	;# 
   163  0015                     	;# 
   164  0015                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001B                     	;# 
   171  001B                     	;# 
   172  001C                     	;# 
   173  001D                     	;# 
   174  001E                     	;# 
   175  001F                     	;# 
   176  0081                     	;# 
   177  0085                     	;# 
   178  0086                     	;# 
   179  0087                     	;# 
   180  0088                     	;# 
   181  0089                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  010F                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201                           
   202                           	psect	idataBANK1
   203  09E0                     __pidataBANK1:	
   204                           
   205                           ;initializer for _randx
   206  09E0  3401               	retlw	1
   207  09E1  3400               	retlw	0
   208  09E2  3400               	retlw	0
   209  09E3  3400               	retlw	0
   210                           
   211                           ;initializer for _DigitsArr
   212  09E4  34D8               	retlw	low (_digits0| 0)
   213  09E5  34D5               	retlw	low (_digits1| 0)
   214  09E6  34D2               	retlw	low (_digits2| 0)
   215  09E7  34CF               	retlw	low (_digits3| 0)
   216  09E8  34CC               	retlw	low (_digits4| 0)
   217  09E9  34C9               	retlw	low (_digits5| 0)
   218  09EA  34C6               	retlw	low (_digits6| 0)
   219  09EB  34C3               	retlw	low (_digits7| 0)
   220                           
   221                           ;initializer for _Semafori
   222  09EC  34D7               	retlw	low (_s0| (0+256))
   223  09ED  34C9               	retlw	low (_s1| (0+256))
   224  09EE  34BB               	retlw	low (_s2| (0+256))
   225  09EF  34AD               	retlw	low (_s3| (0+256))
   226  09F0  349F               	retlw	low (_s4| (0+256))
   227  09F1  342C               	retlw	low (_s5| (0+256))
   228  09F2  341E               	retlw	low (_s6| (0+256))
   229  09F3  3410               	retlw	low (_s7| (0+256))
   230                           
   231                           	psect	strings
   232  0800                     __pstrings:	
   233  0800                     stringtab:	
   234  0800                     __stringtab:	
   235  0800                     stringcode:	
   236                           ;	String table - string pointers are 1 byte each
   237                           
   238  0800                     stringdir:	
   239  0800  3008               	movlw	high stringdir
   240  0801  008A               	movwf	10
   241  0802  0804               	movf	4,w
   242  0803  0A84               	incf	4,f
   243  0804  0782               	addwf	2,f
   244  0805                     __stringbase:	
   245  0805  3400               	retlw	0
   246  0806                     __end_of__stringtab:	
   247  0806                     _display:	
   248  0806  343F               	retlw	63
   249  0807  3406               	retlw	6
   250  0808  345B               	retlw	91
   251  0809  344F               	retlw	79
   252  080A  3466               	retlw	102
   253  080B  346D               	retlw	109
   254  080C  347D               	retlw	125
   255  080D  3407               	retlw	7
   256  080E  347F               	retlw	127
   257  080F  346F               	retlw	111
   258  0810  3400               	retlw	0
   259  0811                     __end_of_display:	
   260  0811                     _n_semafori:	
   261  0811  3408               	retlw	8
   262  0812                     __end_of_n_semafori:	
   263  0008                     _PORTD	set	8
   264  0005                     _PORTAbits	set	5
   265  001A                     _RCREG	set	26
   266  0019                     _TXREG	set	25
   267  000B                     _INTCONbits	set	11
   268  0018                     _RCSTAbits	set	24
   269  001E                     _ADRESH	set	30
   270  001F                     _ADCON0	set	31
   271  0006                     _PORTBbits	set	6
   272  0007                     _PORTCbits	set	7
   273  000E                     _TMR1L	set	14
   274  000F                     _TMR1H	set	15
   275  0010                     _T1CON	set	16
   276  0001                     _TMR0	set	1
   277  000B                     _INTCON	set	11
   278  0060                     _TMR1IF	set	96
   279  005A                     _TMR0IF	set	90
   280  0065                     _RCIF	set	101
   281  0064                     _TXIF	set	100
   282  00FA                     _GO_nDONE	set	250
   283  008C                     _PIE1bits	set	140
   284  0099                     _SPBRG	set	153
   285  0098                     _TXSTAbits	set	152
   286  0087                     _TRISCbits	set	135
   287  009E                     _ADRESL	set	158
   288  009F                     _ADCON1	set	159
   289  0085                     _TRISA	set	133
   290  0081                     _OPTION_REG	set	129
   291  0089                     _TRISE	set	137
   292  0088                     _TRISD	set	136
   293  0087                     _TRISC	set	135
   294  0086                     _TRISB	set	134
   295                           
   296                           ; #config settings
   297  0000                     
   298                           	psect	cinit
   299  0013                     start_initialization:	
   300  0013                     __initialization:	
   301                           
   302                           ; Initialize objects allocated to BANK1
   303  0013  1383               	bcf	3,7	;select IRP bank0
   304  0014  30EF               	movlw	low (__pdataBANK1+20)
   305  0015  00FD               	movwf	btemp+-1
   306  0016  3009               	movlw	high __pidataBANK1
   307  0017  00FE               	movwf	btemp
   308  0018  30E0               	movlw	low __pidataBANK1
   309  0019  00FF               	movwf	btemp+1
   310  001A  30DB               	movlw	low __pdataBANK1
   311  001B  0084               	movwf	4
   312  001C  120A  158A  21D1  120A  118A  	fcall	init_ram0
   313                           
   314                           ; Clear objects allocated to BANK3
   315  0021  1783               	bsf	3,7	;select IRP bank2
   316  0022  3090               	movlw	low __pbssBANK3
   317  0023  0084               	movwf	4
   318  0024  30E5               	movlw	low (__pbssBANK3+85)
   319  0025  120A  158A  21A9  120A  118A  	fcall	clear_ram0
   320                           
   321                           ; Clear objects allocated to BANK2
   322  002A  3010               	movlw	low __pbssBANK2
   323  002B  0084               	movwf	4
   324  002C  303A               	movlw	low (__pbssBANK2+42)
   325  002D  120A  158A  21A9  120A  118A  	fcall	clear_ram0
   326                           
   327                           ; Clear objects allocated to BANK1
   328  0032  1383               	bcf	3,7	;select IRP bank0
   329  0033  30A0               	movlw	low __pbssBANK1
   330  0034  0084               	movwf	4
   331  0035  30DB               	movlw	low (__pbssBANK1+59)
   332  0036  120A  158A  21A9  120A  118A  	fcall	clear_ram0
   333                           
   334                           ; Clear objects allocated to BANK0
   335  003B  305B               	movlw	low __pbssBANK0
   336  003C  0084               	movwf	4
   337  003D  3065               	movlw	low (__pbssBANK0+10)
   338  003E  120A  158A  21A9  120A  118A  	fcall	clear_ram0
   339  0043                     end_of_initialization:	
   340                           ;End of C runtime variable initialization code
   341                           
   342  0043                     __end_of__initialization:	
   343  0043  0183               	clrf	3
   344  0044  120A  118A  2847   	ljmp	_main	;jump to C main() function
   345                           
   346                           	psect	bssBANK0
   347  005B                     __pbssBANK0:	
   348  005B                     _umidita:	
   349  005B                     	ds	1
   350  005C                     _temp:	
   351  005C                     	ds	1
   352  005D                     _timerReadFromGateway:	
   353  005D                     	ds	1
   354  005E                     _dataFromGatewayIndex:	
   355  005E                     	ds	1
   356  005F                     _count_lux:	
   357  005F                     	ds	1
   358  0060                     _disp:	
   359  0060                     	ds	1
   360  0061                     _cycled:	
   361  0061                     	ds	1
   362  0062                     _secondPassed:	
   363  0062                     	ds	1
   364  0063                     _readGateway:	
   365  0063                     	ds	1
   366  0064                     _readGatewayDone:	
   367  0064                     	ds	1
   368                           
   369                           	psect	bssBANK1
   370  00A0                     __pbssBANK1:	
   371  00A0                     _time:	
   372  00A0                     	ds	16
   373  00B0                     _RoadsSensors:	
   374  00B0                     	ds	4
   375  00B4                     _count:	
   376  00B4                     	ds	2
   377  00B6                     _pressione:	
   378  00B6                     	ds	1
   379  00B7                     _truck:	
   380  00B7                     	ds	4
   381  00BB                     _car:	
   382  00BB                     	ds	4
   383  00BF                     _motorcycle:	
   384  00BF                     	ds	4
   385  00C3                     _digits7:	
   386  00C3                     	ds	3
   387  00C6                     _digits6:	
   388  00C6                     	ds	3
   389  00C9                     _digits5:	
   390  00C9                     	ds	3
   391  00CC                     _digits4:	
   392  00CC                     	ds	3
   393  00CF                     _digits3:	
   394  00CF                     	ds	3
   395  00D2                     _digits2:	
   396  00D2                     	ds	3
   397  00D5                     _digits1:	
   398  00D5                     	ds	3
   399  00D8                     _digits0:	
   400  00D8                     	ds	3
   401                           
   402                           	psect	dataBANK1
   403  00DB                     __pdataBANK1:	
   404  00DB                     _randx:	
   405  00DB                     	ds	4
   406  00DF                     _DigitsArr:	
   407  00DF                     	ds	8
   408  00E7                     _Semafori:	
   409  00E7                     	ds	8
   410                           
   411                           	psect	bssBANK3
   412  0190                     __pbssBANK3:	
   413  0190                     _dataFromGateway:	
   414  0190                     	ds	15
   415  019F                     _s4:	
   416  019F                     	ds	14
   417  01AD                     _s3:	
   418  01AD                     	ds	14
   419  01BB                     _s2:	
   420  01BB                     	ds	14
   421  01C9                     _s1:	
   422  01C9                     	ds	14
   423  01D7                     _s0:	
   424  01D7                     	ds	14
   425                           
   426                           	psect	bssBANK2
   427  0110                     __pbssBANK2:	
   428  0110                     _s7:	
   429  0110                     	ds	14
   430  011E                     _s6:	
   431  011E                     	ds	14
   432  012C                     _s5:	
   433  012C                     	ds	14
   434                           
   435                           	psect	inittext
   436  09CD                     init_fetch0:	
   437                           ;	Called with low address in FSR and high address in W
   438                           
   439  09CD  087E               	movf	btemp,w
   440  09CE  008A               	movwf	10
   441  09CF  087F               	movf	btemp+1,w
   442  09D0  0082               	movwf	2
   443  09D1                     init_ram0:	
   444                           ;Called with:
   445                           ;	high address of idata address in btemp 
   446                           ;	low address of idata address in btemp+1 
   447                           ;	low address of data in FSR
   448                           ;	high address + 1 of data in btemp-1
   449                           
   450  09D1  120A  158A  21CD  120A  158A  	fcall	init_fetch0
   451  09D6  0080               	movwf	0
   452  09D7  0A84               	incf	4,f
   453  09D8  0804               	movf	4,w
   454  09D9  067D               	xorwf	btemp+-1,w
   455  09DA  1903               	btfsc	3,2
   456  09DB  3400               	retlw	0
   457  09DC  0AFF               	incf	btemp+1,f
   458  09DD  1903               	btfsc	3,2
   459  09DE  0AFE               	incf	btemp,f
   460  09DF  29D1               	goto	init_ram0
   461                           
   462                           	psect	clrtext
   463  09A9                     clear_ram0:	
   464                           ;	Called with FSR containing the base address, and
   465                           ;	W with the last address+1
   466                           
   467  09A9  0064               	clrwdt	;clear the watchdog before getting into this loop
   468  09AA                     clrloop0:	
   469  09AA  0180               	clrf	0	;clear RAM location pointed to by FSR
   470  09AB  0A84               	incf	4,f	;increment pointer
   471  09AC  0604               	xorwf	4,w	;XOR with final address
   472  09AD  1903               	btfsc	3,2	;have we reached the end yet?
   473  09AE  3400               	retlw	0	;all done for this memory range, return
   474  09AF  0604               	xorwf	4,w	;XOR again to restore value
   475  09B0  29AA               	goto	clrloop0	;do the next byte
   476                           
   477                           	psect	cstackBANK3
   478  01E5                     __pcstackBANK3:	
   479  01E5                     main@randomMoto:	
   480                           
   481                           ; 1 bytes @ 0x0
   482  01E5                     	ds	1
   483  01E6                     main@randomCar:	
   484                           
   485                           ; 1 bytes @ 0x1
   486  01E6                     	ds	1
   487  01E7                     main@randomTruck:	
   488                           
   489                           ; 1 bytes @ 0x2
   490  01E7                     	ds	1
   491  01E8                     main@i_528:	
   492                           
   493                           ; 1 bytes @ 0x3
   494  01E8                     	ds	1
   495  01E9                     main@i_530:	
   496                           
   497                           ; 1 bytes @ 0x4
   498  01E9                     	ds	1
   499  01EA                     main@l:	
   500                           
   501                           ; 1 bytes @ 0x5
   502  01EA                     	ds	1
   503  01EB                     main@i_527:	
   504                           
   505                           ; 2 bytes @ 0x6
   506  01EB                     	ds	2
   507  01ED                     main@lux_select:	
   508                           
   509                           ; 1 bytes @ 0x8
   510  01ED                     	ds	1
   511  01EE                     main@i_532:	
   512                           
   513                           ; 1 bytes @ 0x9
   514  01EE                     	ds	1
   515  01EF                     main@i:	
   516                           
   517                           ; 1 bytes @ 0xA
   518  01EF                     	ds	1
   519                           
   520                           	psect	cstackCOMMON
   521  0070                     __pcstackCOMMON:	
   522  0070                     ?_init_ADC:	
   523  0070                     ?_ShowDigitsOnDisplay:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0070                     ?_UpdateTimes:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0070                     ?_Conteggio:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ?_main:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ?_UART_TxChar:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ?_UART_Read:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ??_UART_Read:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ?_conteggioVeicoli:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0070                     ?_ISR:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     Conteggio@_count:	
   551                           ; 1 bytes @ 0x0
   552                           
   553                           
   554                           ; 2 bytes @ 0x0
   555  0070                     	ds	2
   556  0072                     Conteggio@_motorcycle:	
   557                           
   558                           ; 1 bytes @ 0x2
   559  0072                     	ds	1
   560  0073                     Conteggio@_car:	
   561                           
   562                           ; 1 bytes @ 0x3
   563  0073                     	ds	1
   564  0074                     Conteggio@_truck:	
   565                           
   566                           ; 1 bytes @ 0x4
   567  0074                     	ds	1
   568  0075                     Conteggio@index:	
   569                           
   570                           ; 1 bytes @ 0x5
   571  0075                     	ds	1
   572  0076                     ??_Conteggio:	
   573                           
   574                           ; 1 bytes @ 0x6
   575  0076                     	ds	3
   576  0079                     ??_conteggioVeicoli:	
   577                           
   578                           ; 1 bytes @ 0x9
   579  0079                     	ds	4
   580  007D                     conteggioVeicoli@i:	
   581                           
   582                           ; 1 bytes @ 0xD
   583  007D                     	ds	1
   584                           
   585                           	psect	cstackBANK0
   586  0020                     __pcstackBANK0:	
   587  0020                     ??_ISR:	
   588                           
   589                           ; 1 bytes @ 0x0
   590  0020                     	ds	4
   591  0024                     ??_init_ADC:	
   592  0024                     ?_luciSemaforo:	
   593                           ; 1 bytes @ 0x4
   594                           
   595  0024                     ?_BuildByte:	
   596                           ; 1 bytes @ 0x4
   597                           
   598  0024                     ??_UpdateTimes:	
   599                           ; 1 bytes @ 0x4
   600                           
   601  0024                     ?_SetDefaultTimers:	
   602                           ; 1 bytes @ 0x4
   603                           
   604  0024                     ??_UART_TxChar:	
   605                           ; 1 bytes @ 0x4
   606                           
   607  0024                     ?_SetDisplay:	
   608                           ; 1 bytes @ 0x4
   609                           
   610  0024                     ?___bmul:	
   611                           ; 1 bytes @ 0x4
   612                           
   613  0024                     ?_ADC_Read:	
   614                           ; 1 bytes @ 0x4
   615                           
   616  0024                     ?_GetTime:	
   617                           ; 2 bytes @ 0x4
   618                           
   619  0024                     ?___wmul:	
   620                           ; 2 bytes @ 0x4
   621                           
   622  0024                     ?___lmul:	
   623                           ; 2 bytes @ 0x4
   624                           
   625  0024                     ?___aldiv:	
   626                           ; 4 bytes @ 0x4
   627                           
   628  0024                     BuildByte@byte1:	
   629                           ; 4 bytes @ 0x4
   630                           
   631  0024                     GetTime@_dataFromGateway:	
   632                           ; 1 bytes @ 0x4
   633                           
   634  0024                     UART_TxChar@ch:	
   635                           ; 1 bytes @ 0x4
   636                           
   637  0024                     luciSemaforo@lux:	
   638                           ; 1 bytes @ 0x4
   639                           
   640  0024                     SetDisplay@d1:	
   641                           ; 1 bytes @ 0x4
   642                           
   643  0024                     ___bmul@multiplicand:	
   644                           ; 1 bytes @ 0x4
   645                           
   646  0024                     SetDefaultTimers@rosso:	
   647                           ; 1 bytes @ 0x4
   648                           
   649  0024                     ___wmul@multiplier:	
   650                           ; 2 bytes @ 0x4
   651                           
   652  0024                     ___lmul@multiplier:	
   653                           ; 2 bytes @ 0x4
   654                           
   655  0024                     ___aldiv@divisor:	
   656                           ; 4 bytes @ 0x4
   657                           
   658                           
   659                           ; 4 bytes @ 0x4
   660  0024                     	ds	1
   661  0025                     ??_luciSemaforo:	
   662  0025                     ??___bmul:	
   663                           ; 1 bytes @ 0x5
   664                           
   665  0025                     BuildByte@valore:	
   666                           ; 1 bytes @ 0x5
   667                           
   668  0025                     SetDisplay@d2:	
   669                           ; 1 bytes @ 0x5
   670                           
   671                           
   672                           ; 1 bytes @ 0x5
   673  0025                     	ds	1
   674  0026                     ??_ADC_Read:	
   675  0026                     ??_BuildByte:	
   676                           ; 1 bytes @ 0x6
   677                           
   678  0026                     ??_GetTime:	
   679                           ; 1 bytes @ 0x6
   680                           
   681  0026                     SetDisplay@d3:	
   682                           ; 1 bytes @ 0x6
   683                           
   684  0026                     ___bmul@product:	
   685                           ; 1 bytes @ 0x6
   686                           
   687  0026                     SetDefaultTimers@verde:	
   688                           ; 1 bytes @ 0x6
   689                           
   690  0026                     ___wmul@multiplicand:	
   691                           ; 2 bytes @ 0x6
   692                           
   693                           
   694                           ; 2 bytes @ 0x6
   695  0026                     	ds	1
   696  0027                     ADC_Read@canale:	
   697  0027                     luciSemaforo@index:	
   698                           ; 1 bytes @ 0x7
   699                           
   700  0027                     SetDisplay@value:	
   701                           ; 1 bytes @ 0x7
   702                           
   703  0027                     ___bmul@multiplier:	
   704                           ; 1 bytes @ 0x7
   705                           
   706                           
   707                           ; 1 bytes @ 0x7
   708  0027                     	ds	1
   709  0028                     ??_SetDisplay:	
   710  0028                     ??___wmul:	
   711                           ; 1 bytes @ 0x8
   712                           
   713  0028                     BuildByte@byte0:	
   714                           ; 1 bytes @ 0x8
   715                           
   716  0028                     GetTime@index:	
   717                           ; 1 bytes @ 0x8
   718                           
   719  0028                     SetDefaultTimers@giallo:	
   720                           ; 1 bytes @ 0x8
   721                           
   722  0028                     ___wmul@product:	
   723                           ; 2 bytes @ 0x8
   724                           
   725  0028                     ___lmul@multiplicand:	
   726                           ; 2 bytes @ 0x8
   727                           
   728  0028                     ___aldiv@dividend:	
   729                           ; 4 bytes @ 0x8
   730                           
   731                           
   732                           ; 4 bytes @ 0x8
   733  0028                     	ds	1
   734  0029                     GetTime@shortInt:	
   735  0029                     BuildByte@txByte:	
   736                           ; 1 bytes @ 0x9
   737                           
   738                           
   739                           ; 5 bytes @ 0x9
   740  0029                     	ds	1
   741  002A                     SetDefaultTimers@_semafori:	
   742  002A                     SetDisplay@display_index:	
   743                           ; 1 bytes @ 0xA
   744                           
   745  002A                     GetTime@tmp:	
   746                           ; 1 bytes @ 0xA
   747                           
   748                           
   749                           ; 2 bytes @ 0xA
   750  002A                     	ds	1
   751  002B                     ??_SetDefaultTimers:	
   752                           
   753                           ; 1 bytes @ 0xB
   754  002B                     	ds	1
   755  002C                     ?_SetReceivedTimes:	
   756  002C                     ??___lmul:	
   757                           ; 1 bytes @ 0xC
   758                           
   759  002C                     ??___aldiv:	
   760                           ; 1 bytes @ 0xC
   761                           
   762  002C                     SetReceivedTimes@_semafori:	
   763                           ; 1 bytes @ 0xC
   764                           
   765                           
   766                           ; 1 bytes @ 0xC
   767  002C                     	ds	1
   768  002D                     ??_SetReceivedTimes:	
   769  002D                     ___aldiv@counter:	
   770                           ; 1 bytes @ 0xD
   771                           
   772  002D                     ___lmul@product:	
   773                           ; 1 bytes @ 0xD
   774                           
   775                           
   776                           ; 4 bytes @ 0xD
   777  002D                     	ds	1
   778  002E                     BuildByte@sommaRow:	
   779  002E                     UpdateTimes@_semafori:	
   780                           ; 1 bytes @ 0xE
   781                           
   782  002E                     SetDefaultTimers@i:	
   783                           ; 1 bytes @ 0xE
   784                           
   785  002E                     ___aldiv@sign:	
   786                           ; 1 bytes @ 0xE
   787                           
   788                           
   789                           ; 1 bytes @ 0xE
   790  002E                     	ds	1
   791  002F                     BuildByte@sommaColumn:	
   792  002F                     UpdateTimes@i:	
   793                           ; 1 bytes @ 0xF
   794                           
   795  002F                     SetDefaultTimers@l:	
   796                           ; 1 bytes @ 0xF
   797                           
   798  002F                     ___aldiv@quotient:	
   799                           ; 1 bytes @ 0xF
   800                           
   801                           
   802                           ; 4 bytes @ 0xF
   803  002F                     	ds	1
   804  0030                     UpdateTimes@l:	
   805  0030                     BuildByte@y:	
   806                           ; 1 bytes @ 0x10
   807                           
   808                           
   809                           ; 2 bytes @ 0x10
   810  0030                     	ds	1
   811  0031                     ?_rand:	
   812  0031                     SetReceivedTimes@semaforoId:	
   813                           ; 2 bytes @ 0x11
   814                           
   815                           
   816                           ; 1 bytes @ 0x11
   817  0031                     	ds	1
   818  0032                     SetReceivedTimes@colorId:	
   819  0032                     BuildByte@y_342:	
   820                           ; 1 bytes @ 0x12
   821                           
   822                           
   823                           ; 2 bytes @ 0x12
   824  0032                     	ds	1
   825  0033                     ?_UART_Init:	
   826  0033                     ??_rand:	
   827                           ; 1 bytes @ 0x13
   828                           
   829  0033                     SetReceivedTimes@_dataFromGateway:	
   830                           ; 1 bytes @ 0x13
   831                           
   832  0033                     UART_Init@baudrate:	
   833                           ; 1 bytes @ 0x13
   834                           
   835                           
   836                           ; 2 bytes @ 0x13
   837  0033                     	ds	1
   838  0034                     SetReceivedTimes@index:	
   839  0034                     BuildByte@i:	
   840                           ; 1 bytes @ 0x14
   841                           
   842                           
   843                           ; 2 bytes @ 0x14
   844  0034                     	ds	1
   845  0035                     ??_UART_Init:	
   846  0035                     SetReceivedTimes@i:	
   847                           ; 1 bytes @ 0x15
   848                           
   849                           
   850                           ; 1 bytes @ 0x15
   851  0035                     	ds	1
   852  0036                     BuildByte@i_341:	
   853                           
   854                           ; 2 bytes @ 0x16
   855  0036                     	ds	2
   856  0038                     ?_sendByte:	
   857  0038                     ?___awmod:	
   858                           ; 1 bytes @ 0x18
   859                           
   860  0038                     sendByte@byte1:	
   861                           ; 2 bytes @ 0x18
   862                           
   863  0038                     ___awmod@divisor:	
   864                           ; 1 bytes @ 0x18
   865                           
   866                           
   867                           ; 2 bytes @ 0x18
   868  0038                     	ds	1
   869  0039                     sendByte@valore:	
   870                           
   871                           ; 1 bytes @ 0x19
   872  0039                     	ds	1
   873  003A                     ??_sendByte:	
   874  003A                     ___awmod@dividend:	
   875                           ; 1 bytes @ 0x1A
   876                           
   877                           
   878                           ; 2 bytes @ 0x1A
   879  003A                     	ds	2
   880  003C                     ??___awmod:	
   881                           
   882                           ; 1 bytes @ 0x1C
   883  003C                     	ds	1
   884  003D                     sendByte@byte0:	
   885  003D                     ___awmod@counter:	
   886                           ; 1 bytes @ 0x1D
   887                           
   888                           
   889                           ; 1 bytes @ 0x1D
   890  003D                     	ds	1
   891  003E                     sendByte@txByte:	
   892  003E                     ___awmod@sign:	
   893                           ; 1 bytes @ 0x1E
   894                           
   895                           
   896                           ; 1 bytes @ 0x1E
   897  003E                     	ds	1
   898  003F                     ??_ShowDigitsOnDisplay:	
   899  003F                     ?___awdiv:	
   900                           ; 1 bytes @ 0x1F
   901                           
   902  003F                     sendByte@i:	
   903                           ; 2 bytes @ 0x1F
   904                           
   905  003F                     ___awdiv@divisor:	
   906                           ; 1 bytes @ 0x1F
   907                           
   908                           
   909                           ; 2 bytes @ 0x1F
   910  003F                     	ds	2
   911  0041                     ShowDigitsOnDisplay@display_index:	
   912  0041                     ___awdiv@dividend:	
   913                           ; 1 bytes @ 0x21
   914                           
   915                           
   916                           ; 2 bytes @ 0x21
   917  0041                     	ds	2
   918  0043                     ??___awdiv:	
   919                           
   920                           ; 1 bytes @ 0x23
   921  0043                     	ds	1
   922  0044                     ___awdiv@counter:	
   923                           
   924                           ; 1 bytes @ 0x24
   925  0044                     	ds	1
   926  0045                     ___awdiv@sign:	
   927                           
   928                           ; 1 bytes @ 0x25
   929  0045                     	ds	1
   930  0046                     ___awdiv@quotient:	
   931                           
   932                           ; 2 bytes @ 0x26
   933  0046                     	ds	2
   934  0048                     ?_GetDigits:	
   935  0048                     ?_map:	
   936                           ; 1 bytes @ 0x28
   937                           
   938  0048                     GetDigits@index:	
   939                           ; 2 bytes @ 0x28
   940                           
   941  0048                     map@x:	
   942                           ; 1 bytes @ 0x28
   943                           
   944                           
   945                           ; 2 bytes @ 0x28
   946  0048                     	ds	1
   947  0049                     GetDigits@Time:	
   948                           
   949                           ; 2 bytes @ 0x29
   950  0049                     	ds	1
   951  004A                     map@in_min:	
   952                           
   953                           ; 2 bytes @ 0x2A
   954  004A                     	ds	1
   955  004B                     ??_GetDigits:	
   956                           
   957                           ; 1 bytes @ 0x2B
   958  004B                     	ds	1
   959  004C                     map@in_max:	
   960                           
   961                           ; 2 bytes @ 0x2C
   962  004C                     	ds	2
   963  004E                     map@out_min:	
   964  004E                     _GetDigits$1248:	
   965                           ; 2 bytes @ 0x2E
   966                           
   967                           
   968                           ; 2 bytes @ 0x2E
   969  004E                     	ds	2
   970  0050                     GetDigits@_digits:	
   971  0050                     map@out_max:	
   972                           ; 1 bytes @ 0x30
   973                           
   974                           
   975                           ; 2 bytes @ 0x30
   976  0050                     	ds	2
   977  0052                     ??_map:	
   978  0052                     ??_main:	
   979                           ; 1 bytes @ 0x32
   980                           
   981                           
   982                           ; 1 bytes @ 0x32
   983  0052                     	ds	9
   984                           
   985                           	psect	maintext
   986  0047                     __pmaintext:	
   987 ;;
   988 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
   989 ;;
   990 ;; *************** function _main *****************
   991 ;; Defined at:
   992 ;;		line 136 in file "main.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;		None
   995 ;; Auto vars:     Size  Location     Type
   996 ;;  l               1    5[BANK3 ] unsigned char 
   997 ;;  lux_select      1    8[BANK3 ] unsigned char 
   998 ;;  randomTruck     1    2[BANK3 ] unsigned char 
   999 ;;  randomCar       1    1[BANK3 ] unsigned char 
  1000 ;;  randomMoto      1    0[BANK3 ] unsigned char 
  1001 ;;  i               1    4[BANK3 ] unsigned char 
  1002 ;;  i               1    3[BANK3 ] unsigned char 
  1003 ;;  i               2    6[BANK3 ] int 
  1004 ;;  i               1   10[BANK3 ] unsigned char 
  1005 ;;  i               1    9[BANK3 ] unsigned char 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : B00/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1015 ;;      Params:         0       0       0       0       0
  1016 ;;      Locals:         0       0       0      11       0
  1017 ;;      Temps:          0       9       0       0       0
  1018 ;;      Totals:         0       9       0      11       0
  1019 ;;Total ram usage:       20 bytes
  1020 ;; Hardware stack levels required when called:    5
  1021 ;; This function calls:
  1022 ;;		_ADC_Read
  1023 ;;		_GetDigits
  1024 ;;		_SetDefaultTimers
  1025 ;;		_SetReceivedTimes
  1026 ;;		_ShowDigitsOnDisplay
  1027 ;;		_UART_Init
  1028 ;;		_UpdateTimes
  1029 ;;		___awmod
  1030 ;;		_init_ADC
  1031 ;;		_luciSemaforo
  1032 ;;		_map
  1033 ;;		_rand
  1034 ;;		_sendByte
  1035 ;; This function is called by:
  1036 ;;		Startup code after reset
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040                           
  1041                           ;psect for function _main
  1042  0047                     _main:	
  1043  0047                     l3535:	
  1044                           ;incstack = 0
  1045                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1046                           
  1047                           
  1048                           ;main.c: 138:     TRISB = 0x38;
  1049  0047  3038               	movlw	56
  1050  0048  1683               	bsf	3,5	;RP0=1, select bank1
  1051  0049  1303               	bcf	3,6	;RP1=0, select bank1
  1052  004A  0086               	movwf	6	;volatile
  1053                           
  1054                           ;main.c: 139:     TRISC = 0x80;
  1055  004B  3080               	movlw	128
  1056  004C  0087               	movwf	7	;volatile
  1057  004D                     l3537:	
  1058                           
  1059                           ;main.c: 140:     TRISD = 0x00;
  1060  004D  0188               	clrf	8	;volatile
  1061  004E                     l3539:	
  1062                           
  1063                           ;main.c: 141:     TRISE = 0x01;
  1064  004E  3001               	movlw	1
  1065  004F  0089               	movwf	9	;volatile
  1066  0050                     l3541:	
  1067                           
  1068                           ;main.c: 142:     INTCON = 0xE0;
  1069  0050  30E0               	movlw	224
  1070  0051  008B               	movwf	11	;volatile
  1071  0052                     l3543:	
  1072                           
  1073                           ;main.c: 143:     OPTION_REG = 0x04;
  1074  0052  3004               	movlw	4
  1075  0053  0081               	movwf	1	;volatile
  1076  0054                     l3545:	
  1077                           
  1078                           ;main.c: 144:     TMR0 = 6;
  1079  0054  3006               	movlw	6
  1080  0055  1283               	bcf	3,5	;RP0=0, select bank0
  1081  0056  1303               	bcf	3,6	;RP1=0, select bank0
  1082  0057  0081               	movwf	1	;volatile
  1083  0058                     l3547:	
  1084                           
  1085                           ;main.c: 145:     T1CON = 0x31;
  1086  0058  3031               	movlw	49
  1087  0059  0090               	movwf	16	;volatile
  1088  005A                     l3549:	
  1089                           
  1090                           ;main.c: 147:     TMR1H = 60;
  1091  005A  303C               	movlw	60
  1092  005B  008F               	movwf	15	;volatile
  1093  005C                     l3551:	
  1094                           
  1095                           ;main.c: 148:     TMR1L = 176;
  1096  005C  30B0               	movlw	176
  1097  005D  008E               	movwf	14	;volatile
  1098  005E                     l3553:	
  1099                           
  1100                           ;main.c: 151:     init_ADC();
  1101  005E  120A  158A  21BA  120A  118A  	fcall	_init_ADC
  1102  0063                     l3555:	
  1103                           
  1104                           ;main.c: 152:     UART_Init(9600);
  1105  0063  3080               	movlw	128
  1106  0064  1283               	bcf	3,5	;RP0=0, select bank0
  1107  0065  1303               	bcf	3,6	;RP1=0, select bank0
  1108  0066  00B3               	movwf	UART_Init@baudrate
  1109  0067  3025               	movlw	37
  1110  0068  00B4               	movwf	UART_Init@baudrate+1
  1111  0069  120A  158A  22A7  120A  118A  	fcall	_UART_Init
  1112  006E                     l3557:	
  1113                           
  1114                           ;main.c: 153:     SetDefaultTimers(6, 4, 2, Semafori);
  1115  006E  3006               	movlw	6
  1116  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1117  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1118  0071  00A4               	movwf	SetDefaultTimers@rosso
  1119  0072  3000               	movlw	0
  1120  0073  00A5               	movwf	SetDefaultTimers@rosso+1
  1121  0074  3004               	movlw	4
  1122  0075  00A6               	movwf	SetDefaultTimers@verde
  1123  0076  3000               	movlw	0
  1124  0077  00A7               	movwf	SetDefaultTimers@verde+1
  1125  0078  3002               	movlw	2
  1126  0079  00A8               	movwf	SetDefaultTimers@giallo
  1127  007A  3000               	movlw	0
  1128  007B  00A9               	movwf	SetDefaultTimers@giallo+1
  1129  007C  30E7               	movlw	(low (_Semafori| 0))& (0+255)
  1130  007D  00D2               	movwf	??_main
  1131  007E  0852               	movf	??_main,w
  1132  007F  00AA               	movwf	SetDefaultTimers@_semafori
  1133  0080  120A  118A  2507  120A  118A  	fcall	_SetDefaultTimers
  1134  0085                     l3559:	
  1135                           
  1136                           ;main.c: 155:     PORTCbits.RC0 = 0;
  1137  0085  1283               	bcf	3,5	;RP0=0, select bank0
  1138  0086  1303               	bcf	3,6	;RP1=0, select bank0
  1139  0087  1007               	bcf	7,0	;volatile
  1140  0088                     l3561:	
  1141                           
  1142                           ;main.c: 156:     PORTBbits.RB7 = 0;
  1143  0088  1386               	bcf	6,7	;volatile
  1144  0089                     l3563:	
  1145                           
  1146                           ;main.c: 157:     PORTCbits.RC2 = 0;
  1147  0089  1107               	bcf	7,2	;volatile
  1148  008A                     l3565:	
  1149                           
  1150                           ;main.c: 158:     PORTBbits.RB6 = 0;
  1151  008A  1306               	bcf	6,6	;volatile
  1152  008B                     l3567:	
  1153                           
  1154                           ;main.c: 159:     PORTCbits.RC1 = 0;
  1155  008B  1087               	bcf	7,1	;volatile
  1156  008C                     l3569:	
  1157                           
  1158                           ;main.c: 160:     PORTBbits.RB1 = 0;
  1159  008C  1086               	bcf	6,1	;volatile
  1160  008D                     l3571:	
  1161                           
  1162                           ;main.c: 163:     {;main.c: 165:         if (readGateway.Bit)
  1163  008D  1C63               	btfss	_readGateway,0
  1164  008E  2890               	goto	u2931
  1165  008F  2891               	goto	u2930
  1166  0090                     u2931:	
  1167  0090  2B9B               	goto	l240
  1168  0091                     u2930:	
  1169  0091  2B86               	goto	l3659
  1170  0092                     l242:	
  1171                           ;main.c: 168:             {;main.c: 169:             case 0x08:
  1172                           
  1173                           
  1174                           ;main.c: 170:                 readGatewayDone.Bit = 1;
  1175  0092  1464               	bsf	_readGatewayDone,0
  1176                           
  1177                           ;main.c: 171:                 readGateway.Bit = 0;
  1178  0093  1063               	bcf	_readGateway,0
  1179  0094                     l3575:	
  1180                           
  1181                           ;main.c: 173:                 for (unsigned char i = 0; i < 4; i++)
  1182  0094  1683               	bsf	3,5	;RP0=1, select bank3
  1183  0095  1703               	bsf	3,6	;RP1=1, select bank3
  1184  0096  01EF               	clrf	main@i^(0+384)
  1185  0097                     l3581:	
  1186                           
  1187                           ;main.c: 174:                 {;main.c: 176:                     unsigned char randomMot
      +                          o = (char)rand() % 20 + 1;
  1188  0097  3014               	movlw	20
  1189  0098  1283               	bcf	3,5	;RP0=0, select bank0
  1190  0099  1303               	bcf	3,6	;RP1=0, select bank0
  1191  009A  00B8               	movwf	___awmod@divisor
  1192  009B  3000               	movlw	0
  1193  009C  00B9               	movwf	___awmod@divisor+1
  1194  009D  120A  158A  2645  120A  118A  	fcall	_rand
  1195  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1196  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  1197  00A4  0831               	movf	?_rand,w
  1198  00A5  00D2               	movwf	??_main
  1199  00A6  01D3               	clrf	??_main+1
  1200  00A7  0852               	movf	??_main,w
  1201  00A8  00BA               	movwf	___awmod@dividend
  1202  00A9  0853               	movf	??_main+1,w
  1203  00AA  00BB               	movwf	___awmod@dividend+1
  1204  00AB  120A  158A  24BB  120A  118A  	fcall	___awmod
  1205  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  1206  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  1207  00B2  0838               	movf	?___awmod,w
  1208  00B3  3E01               	addlw	1
  1209  00B4  00D4               	movwf	??_main+2
  1210  00B5  0854               	movf	??_main+2,w
  1211  00B6  1683               	bsf	3,5	;RP0=1, select bank3
  1212  00B7  1703               	bsf	3,6	;RP1=1, select bank3
  1213  00B8  00E5               	movwf	main@randomMoto^(0+384)
  1214                           
  1215                           ;main.c: 177:                     unsigned char randomCar = (char)rand() % 20 + 1;
  1216  00B9  3014               	movlw	20
  1217  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1218  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1219  00BC  00B8               	movwf	___awmod@divisor
  1220  00BD  3000               	movlw	0
  1221  00BE  00B9               	movwf	___awmod@divisor+1
  1222  00BF  120A  158A  2645  120A  118A  	fcall	_rand
  1223  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1224  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1225  00C6  0831               	movf	?_rand,w
  1226  00C7  00D2               	movwf	??_main
  1227  00C8  01D3               	clrf	??_main+1
  1228  00C9  0852               	movf	??_main,w
  1229  00CA  00BA               	movwf	___awmod@dividend
  1230  00CB  0853               	movf	??_main+1,w
  1231  00CC  00BB               	movwf	___awmod@dividend+1
  1232  00CD  120A  158A  24BB  120A  118A  	fcall	___awmod
  1233  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1234  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1235  00D4  0838               	movf	?___awmod,w
  1236  00D5  3E01               	addlw	1
  1237  00D6  00D4               	movwf	??_main+2
  1238  00D7  0854               	movf	??_main+2,w
  1239  00D8  1683               	bsf	3,5	;RP0=1, select bank3
  1240  00D9  1703               	bsf	3,6	;RP1=1, select bank3
  1241  00DA  00E6               	movwf	main@randomCar^(0+384)
  1242                           
  1243                           ;main.c: 178:                     unsigned char randomTruck = (char)rand() % 20 + 1;
  1244  00DB  3014               	movlw	20
  1245  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1246  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1247  00DE  00B8               	movwf	___awmod@divisor
  1248  00DF  3000               	movlw	0
  1249  00E0  00B9               	movwf	___awmod@divisor+1
  1250  00E1  120A  158A  2645  120A  118A  	fcall	_rand
  1251  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  1252  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  1253  00E8  0831               	movf	?_rand,w
  1254  00E9  00D2               	movwf	??_main
  1255  00EA  01D3               	clrf	??_main+1
  1256  00EB  0852               	movf	??_main,w
  1257  00EC  00BA               	movwf	___awmod@dividend
  1258  00ED  0853               	movf	??_main+1,w
  1259  00EE  00BB               	movwf	___awmod@dividend+1
  1260  00EF  120A  158A  24BB  120A  118A  	fcall	___awmod
  1261  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1262  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1263  00F6  0838               	movf	?___awmod,w
  1264  00F7  3E01               	addlw	1
  1265  00F8  00D4               	movwf	??_main+2
  1266  00F9  0854               	movf	??_main+2,w
  1267  00FA  1683               	bsf	3,5	;RP0=1, select bank3
  1268  00FB  1703               	bsf	3,6	;RP1=1, select bank3
  1269  00FC  00E7               	movwf	main@randomTruck^(0+384)
  1270  00FD                     l3583:	
  1271                           
  1272                           ;main.c: 180:                     motorcycle[i] = randomMoto;
  1273  00FD  0865               	movf	main@randomMoto^(0+384),w
  1274  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1275  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0100  00D2               	movwf	??_main
  1277  0101  1683               	bsf	3,5	;RP0=1, select bank3
  1278  0102  1703               	bsf	3,6	;RP1=1, select bank3
  1279  0103  086F               	movf	main@i^(0+384),w
  1280  0104  3EBF               	addlw	(low (_motorcycle| 0))& (0+255)
  1281  0105  0084               	movwf	4
  1282  0106  1283               	bcf	3,5	;RP0=0, select bank0
  1283  0107  1303               	bcf	3,6	;RP1=0, select bank0
  1284  0108  0852               	movf	??_main,w
  1285  0109  1383               	bcf	3,7	;select IRP bank1
  1286  010A  0080               	movwf	0
  1287  010B                     l3585:	
  1288                           
  1289                           ;main.c: 181:                     car[i] = randomCar;
  1290  010B  1683               	bsf	3,5	;RP0=1, select bank3
  1291  010C  1703               	bsf	3,6	;RP1=1, select bank3
  1292  010D  0866               	movf	main@randomCar^(0+384),w
  1293  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1294  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1295  0110  00D2               	movwf	??_main
  1296  0111  1683               	bsf	3,5	;RP0=1, select bank3
  1297  0112  1703               	bsf	3,6	;RP1=1, select bank3
  1298  0113  086F               	movf	main@i^(0+384),w
  1299  0114  3EBB               	addlw	(low (_car| 0))& (0+255)
  1300  0115  0084               	movwf	4
  1301  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1302  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1303  0118  0852               	movf	??_main,w
  1304  0119  0080               	movwf	0
  1305  011A                     l3587:	
  1306                           
  1307                           ;main.c: 182:                     truck[i] = randomTruck;
  1308  011A  1683               	bsf	3,5	;RP0=1, select bank3
  1309  011B  1703               	bsf	3,6	;RP1=1, select bank3
  1310  011C  0867               	movf	main@randomTruck^(0+384),w
  1311  011D  1283               	bcf	3,5	;RP0=0, select bank0
  1312  011E  1303               	bcf	3,6	;RP1=0, select bank0
  1313  011F  00D2               	movwf	??_main
  1314  0120  1683               	bsf	3,5	;RP0=1, select bank3
  1315  0121  1703               	bsf	3,6	;RP1=1, select bank3
  1316  0122  086F               	movf	main@i^(0+384),w
  1317  0123  3EB7               	addlw	(low (_truck| 0))& (0+255)
  1318  0124  0084               	movwf	4
  1319  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1320  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1321  0127  0852               	movf	??_main,w
  1322  0128  0080               	movwf	0
  1323                           
  1324                           ;main.c: 185:                     switch (i)
  1325  0129  2A3A               	goto	l3599
  1326  012A                     l3589:	
  1327                           
  1328                           ;main.c: 188:                         sendByte(0x03, 0x01, motorcycle[i]);
  1329  012A  01B8               	clrf	sendByte@byte1
  1330  012B  0AB8               	incf	sendByte@byte1,f
  1331  012C  1683               	bsf	3,5	;RP0=1, select bank3
  1332  012D  1703               	bsf	3,6	;RP1=1, select bank3
  1333  012E  086F               	movf	main@i^(0+384),w
  1334  012F  3EBF               	addlw	(low (_motorcycle| 0))& (0+255)
  1335  0130  0084               	movwf	4
  1336  0131  0800               	movf	0,w
  1337  0132  1283               	bcf	3,5	;RP0=0, select bank0
  1338  0133  1303               	bcf	3,6	;RP1=0, select bank0
  1339  0134  00D2               	movwf	??_main
  1340  0135  0852               	movf	??_main,w
  1341  0136  00B9               	movwf	sendByte@valore
  1342  0137  3003               	movlw	3
  1343  0138  120A  158A  2241  120A  118A  	fcall	_sendByte
  1344                           
  1345                           ;main.c: 189:                         sendByte(0x03, 0x02, car[i]);
  1346  013D  3002               	movlw	2
  1347  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1348  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1349  0140  00D2               	movwf	??_main
  1350  0141  0852               	movf	??_main,w
  1351  0142  00B8               	movwf	sendByte@byte1
  1352  0143  1683               	bsf	3,5	;RP0=1, select bank3
  1353  0144  1703               	bsf	3,6	;RP1=1, select bank3
  1354  0145  086F               	movf	main@i^(0+384),w
  1355  0146  3EBB               	addlw	(low (_car| 0))& (0+255)
  1356  0147  0084               	movwf	4
  1357  0148  1383               	bcf	3,7	;select IRP bank1
  1358  0149  0800               	movf	0,w
  1359  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1360  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1361  014C  00D3               	movwf	??_main+1
  1362  014D  0853               	movf	??_main+1,w
  1363  014E  00B9               	movwf	sendByte@valore
  1364  014F  3003               	movlw	3
  1365  0150  120A  158A  2241  120A  118A  	fcall	_sendByte
  1366                           
  1367                           ;main.c: 190:                         sendByte(0x03, 0x03, truck[i]);
  1368  0155  3003               	movlw	3
  1369  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1370  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1371  0158  00D2               	movwf	??_main
  1372  0159  0852               	movf	??_main,w
  1373  015A  00B8               	movwf	sendByte@byte1
  1374  015B  1683               	bsf	3,5	;RP0=1, select bank3
  1375  015C  1703               	bsf	3,6	;RP1=1, select bank3
  1376  015D  086F               	movf	main@i^(0+384),w
  1377  015E  3EB7               	addlw	(low (_truck| 0))& (0+255)
  1378  015F  0084               	movwf	4
  1379  0160  1383               	bcf	3,7	;select IRP bank1
  1380  0161  0800               	movf	0,w
  1381  0162  1283               	bcf	3,5	;RP0=0, select bank0
  1382  0163  1303               	bcf	3,6	;RP1=0, select bank0
  1383  0164  00D3               	movwf	??_main+1
  1384  0165  0853               	movf	??_main+1,w
  1385  0166  00B9               	movwf	sendByte@valore
  1386  0167  3003               	movlw	3
  1387  0168  120A  158A  2241  120A  118A  	fcall	_sendByte
  1388                           
  1389                           ;main.c: 191:                         break;
  1390  016D  2A54               	goto	l3601
  1391  016E                     l3591:	
  1392                           
  1393                           ;main.c: 193:                         sendByte(0x05, 0x01, motorcycle[i]);
  1394  016E  01B8               	clrf	sendByte@byte1
  1395  016F  0AB8               	incf	sendByte@byte1,f
  1396  0170  1683               	bsf	3,5	;RP0=1, select bank3
  1397  0171  1703               	bsf	3,6	;RP1=1, select bank3
  1398  0172  086F               	movf	main@i^(0+384),w
  1399  0173  3EBF               	addlw	(low (_motorcycle| 0))& (0+255)
  1400  0174  0084               	movwf	4
  1401  0175  0800               	movf	0,w
  1402  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1403  0177  1303               	bcf	3,6	;RP1=0, select bank0
  1404  0178  00D2               	movwf	??_main
  1405  0179  0852               	movf	??_main,w
  1406  017A  00B9               	movwf	sendByte@valore
  1407  017B  3005               	movlw	5
  1408  017C  120A  158A  2241  120A  118A  	fcall	_sendByte
  1409                           
  1410                           ;main.c: 194:                         sendByte(0x05, 0x02, car[i]);
  1411  0181  3002               	movlw	2
  1412  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1413  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1414  0184  00D2               	movwf	??_main
  1415  0185  0852               	movf	??_main,w
  1416  0186  00B8               	movwf	sendByte@byte1
  1417  0187  1683               	bsf	3,5	;RP0=1, select bank3
  1418  0188  1703               	bsf	3,6	;RP1=1, select bank3
  1419  0189  086F               	movf	main@i^(0+384),w
  1420  018A  3EBB               	addlw	(low (_car| 0))& (0+255)
  1421  018B  0084               	movwf	4
  1422  018C  1383               	bcf	3,7	;select IRP bank1
  1423  018D  0800               	movf	0,w
  1424  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1425  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1426  0190  00D3               	movwf	??_main+1
  1427  0191  0853               	movf	??_main+1,w
  1428  0192  00B9               	movwf	sendByte@valore
  1429  0193  3005               	movlw	5
  1430  0194  120A  158A  2241  120A  118A  	fcall	_sendByte
  1431                           
  1432                           ;main.c: 195:                         sendByte(0x05, 0x03, truck[i]);
  1433  0199  3003               	movlw	3
  1434  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1435  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1436  019C  00D2               	movwf	??_main
  1437  019D  0852               	movf	??_main,w
  1438  019E  00B8               	movwf	sendByte@byte1
  1439  019F  1683               	bsf	3,5	;RP0=1, select bank3
  1440  01A0  1703               	bsf	3,6	;RP1=1, select bank3
  1441  01A1  086F               	movf	main@i^(0+384),w
  1442  01A2  3EB7               	addlw	(low (_truck| 0))& (0+255)
  1443  01A3  0084               	movwf	4
  1444  01A4  1383               	bcf	3,7	;select IRP bank1
  1445  01A5  0800               	movf	0,w
  1446  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1447  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1448  01A8  00D3               	movwf	??_main+1
  1449  01A9  0853               	movf	??_main+1,w
  1450  01AA  00B9               	movwf	sendByte@valore
  1451  01AB  3005               	movlw	5
  1452  01AC  120A  158A  2241  120A  118A  	fcall	_sendByte
  1453                           
  1454                           ;main.c: 196:                         break;
  1455  01B1  2A54               	goto	l3601
  1456  01B2                     l3593:	
  1457                           
  1458                           ;main.c: 198:                         sendByte(0x07, 0x01, motorcycle[i]);
  1459  01B2  01B8               	clrf	sendByte@byte1
  1460  01B3  0AB8               	incf	sendByte@byte1,f
  1461  01B4  1683               	bsf	3,5	;RP0=1, select bank3
  1462  01B5  1703               	bsf	3,6	;RP1=1, select bank3
  1463  01B6  086F               	movf	main@i^(0+384),w
  1464  01B7  3EBF               	addlw	(low (_motorcycle| 0))& (0+255)
  1465  01B8  0084               	movwf	4
  1466  01B9  0800               	movf	0,w
  1467  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1468  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1469  01BC  00D2               	movwf	??_main
  1470  01BD  0852               	movf	??_main,w
  1471  01BE  00B9               	movwf	sendByte@valore
  1472  01BF  3007               	movlw	7
  1473  01C0  120A  158A  2241  120A  118A  	fcall	_sendByte
  1474                           
  1475                           ;main.c: 199:                         sendByte(0x07, 0x02, car[i]);
  1476  01C5  3002               	movlw	2
  1477  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  1478  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  1479  01C8  00D2               	movwf	??_main
  1480  01C9  0852               	movf	??_main,w
  1481  01CA  00B8               	movwf	sendByte@byte1
  1482  01CB  1683               	bsf	3,5	;RP0=1, select bank3
  1483  01CC  1703               	bsf	3,6	;RP1=1, select bank3
  1484  01CD  086F               	movf	main@i^(0+384),w
  1485  01CE  3EBB               	addlw	(low (_car| 0))& (0+255)
  1486  01CF  0084               	movwf	4
  1487  01D0  1383               	bcf	3,7	;select IRP bank1
  1488  01D1  0800               	movf	0,w
  1489  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1490  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1491  01D4  00D3               	movwf	??_main+1
  1492  01D5  0853               	movf	??_main+1,w
  1493  01D6  00B9               	movwf	sendByte@valore
  1494  01D7  3007               	movlw	7
  1495  01D8  120A  158A  2241  120A  118A  	fcall	_sendByte
  1496                           
  1497                           ;main.c: 200:                         sendByte(0x07, 0x03, truck[i]);
  1498  01DD  3003               	movlw	3
  1499  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1500  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1501  01E0  00D2               	movwf	??_main
  1502  01E1  0852               	movf	??_main,w
  1503  01E2  00B8               	movwf	sendByte@byte1
  1504  01E3  1683               	bsf	3,5	;RP0=1, select bank3
  1505  01E4  1703               	bsf	3,6	;RP1=1, select bank3
  1506  01E5  086F               	movf	main@i^(0+384),w
  1507  01E6  3EB7               	addlw	(low (_truck| 0))& (0+255)
  1508  01E7  0084               	movwf	4
  1509  01E8  1383               	bcf	3,7	;select IRP bank1
  1510  01E9  0800               	movf	0,w
  1511  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1512  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1513  01EC  00D3               	movwf	??_main+1
  1514  01ED  0853               	movf	??_main+1,w
  1515  01EE  00B9               	movwf	sendByte@valore
  1516  01EF  3007               	movlw	7
  1517  01F0  120A  158A  2241  120A  118A  	fcall	_sendByte
  1518                           
  1519                           ;main.c: 201:                         break;
  1520  01F5  2A54               	goto	l3601
  1521  01F6                     l3595:	
  1522                           
  1523                           ;main.c: 203:                         sendByte(0x09, 0x01, motorcycle[i]);
  1524  01F6  01B8               	clrf	sendByte@byte1
  1525  01F7  0AB8               	incf	sendByte@byte1,f
  1526  01F8  1683               	bsf	3,5	;RP0=1, select bank3
  1527  01F9  1703               	bsf	3,6	;RP1=1, select bank3
  1528  01FA  086F               	movf	main@i^(0+384),w
  1529  01FB  3EBF               	addlw	(low (_motorcycle| 0))& (0+255)
  1530  01FC  0084               	movwf	4
  1531  01FD  0800               	movf	0,w
  1532  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  1533  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  1534  0200  00D2               	movwf	??_main
  1535  0201  0852               	movf	??_main,w
  1536  0202  00B9               	movwf	sendByte@valore
  1537  0203  3009               	movlw	9
  1538  0204  120A  158A  2241  120A  118A  	fcall	_sendByte
  1539                           
  1540                           ;main.c: 204:                         sendByte(0x09, 0x02, car[i]);
  1541  0209  3002               	movlw	2
  1542  020A  1283               	bcf	3,5	;RP0=0, select bank0
  1543  020B  1303               	bcf	3,6	;RP1=0, select bank0
  1544  020C  00D2               	movwf	??_main
  1545  020D  0852               	movf	??_main,w
  1546  020E  00B8               	movwf	sendByte@byte1
  1547  020F  1683               	bsf	3,5	;RP0=1, select bank3
  1548  0210  1703               	bsf	3,6	;RP1=1, select bank3
  1549  0211  086F               	movf	main@i^(0+384),w
  1550  0212  3EBB               	addlw	(low (_car| 0))& (0+255)
  1551  0213  0084               	movwf	4
  1552  0214  1383               	bcf	3,7	;select IRP bank1
  1553  0215  0800               	movf	0,w
  1554  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1555  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1556  0218  00D3               	movwf	??_main+1
  1557  0219  0853               	movf	??_main+1,w
  1558  021A  00B9               	movwf	sendByte@valore
  1559  021B  3009               	movlw	9
  1560  021C  120A  158A  2241  120A  118A  	fcall	_sendByte
  1561                           
  1562                           ;main.c: 205:                         sendByte(0x09, 0x03, truck[i]);
  1563  0221  3003               	movlw	3
  1564  0222  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0223  1303               	bcf	3,6	;RP1=0, select bank0
  1566  0224  00D2               	movwf	??_main
  1567  0225  0852               	movf	??_main,w
  1568  0226  00B8               	movwf	sendByte@byte1
  1569  0227  1683               	bsf	3,5	;RP0=1, select bank3
  1570  0228  1703               	bsf	3,6	;RP1=1, select bank3
  1571  0229  086F               	movf	main@i^(0+384),w
  1572  022A  3EB7               	addlw	(low (_truck| 0))& (0+255)
  1573  022B  0084               	movwf	4
  1574  022C  1383               	bcf	3,7	;select IRP bank1
  1575  022D  0800               	movf	0,w
  1576  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1577  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1578  0230  00D3               	movwf	??_main+1
  1579  0231  0853               	movf	??_main+1,w
  1580  0232  00B9               	movwf	sendByte@valore
  1581  0233  3009               	movlw	9
  1582  0234  120A  158A  2241  120A  118A  	fcall	_sendByte
  1583                           
  1584                           ;main.c: 206:                         break;
  1585  0239  2A54               	goto	l3601
  1586  023A                     l3599:	
  1587  023A  1683               	bsf	3,5	;RP0=1, select bank3
  1588  023B  1703               	bsf	3,6	;RP1=1, select bank3
  1589  023C  086F               	movf	main@i^(0+384),w
  1590  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1591  023E  1303               	bcf	3,6	;RP1=0, select bank0
  1592  023F  00D2               	movwf	??_main
  1593  0240  01D3               	clrf	??_main+1
  1594                           
  1595                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1596                           ; Switch size 1, requested type "simple"
  1597                           ; Number of cases is 1, Range of values is 0 to 0
  1598                           ; switch strategies available:
  1599                           ; Name         Instructions Cycles
  1600                           ; simple_byte            4     3 (average)
  1601                           ; direct_byte           11     8 (fixed)
  1602                           ; jumptable            260     6 (fixed)
  1603                           ;	Chosen strategy is simple_byte
  1604  0241  0853               	movf	??_main+1,w
  1605  0242  3A00               	xorlw	0	; case 0
  1606  0243  1903               	skipnz
  1607  0244  2A46               	goto	l3975
  1608  0245  2A54               	goto	l3601
  1609  0246                     l3975:	
  1610                           
  1611                           ; Switch size 1, requested type "simple"
  1612                           ; Number of cases is 4, Range of values is 0 to 3
  1613                           ; switch strategies available:
  1614                           ; Name         Instructions Cycles
  1615                           ; simple_byte           13     7 (average)
  1616                           ; direct_byte           20     8 (fixed)
  1617                           ; jumptable            260     6 (fixed)
  1618                           ;	Chosen strategy is simple_byte
  1619  0246  0852               	movf	??_main,w
  1620  0247  3A00               	xorlw	0	; case 0
  1621  0248  1903               	skipnz
  1622  0249  292A               	goto	l3589
  1623  024A  3A01               	xorlw	1	; case 1
  1624  024B  1903               	skipnz
  1625  024C  296E               	goto	l3591
  1626  024D  3A03               	xorlw	3	; case 2
  1627  024E  1903               	skipnz
  1628  024F  29B2               	goto	l3593
  1629  0250  3A01               	xorlw	1	; case 3
  1630  0251  1903               	skipnz
  1631  0252  29F6               	goto	l3595
  1632  0253  2A54               	goto	l3601
  1633  0254                     l3601:	
  1634                           
  1635                           ;main.c: 208:                 }
  1636  0254  3001               	movlw	1
  1637  0255  1283               	bcf	3,5	;RP0=0, select bank0
  1638  0256  1303               	bcf	3,6	;RP1=0, select bank0
  1639  0257  00D2               	movwf	??_main
  1640  0258  0852               	movf	??_main,w
  1641  0259  1683               	bsf	3,5	;RP0=1, select bank3
  1642  025A  1703               	bsf	3,6	;RP1=1, select bank3
  1643  025B  07EF               	addwf	main@i^(0+384),f
  1644  025C                     l3603:	
  1645  025C  3004               	movlw	4
  1646  025D  026F               	subwf	main@i^(0+384),w
  1647  025E  1C03               	skipc
  1648  025F  2A61               	goto	u2941
  1649  0260  2A62               	goto	u2940
  1650  0261                     u2941:	
  1651  0261  2897               	goto	l3581
  1652  0262                     u2940:	
  1653  0262                     l3605:	
  1654                           
  1655                           ;main.c: 210:                 for (int i = 0; i < 4; i++)
  1656  0262  01EB               	clrf	main@i_527^(0+384)
  1657  0263  01EC               	clrf	(main@i_527+1)^(0+384)
  1658  0264                     l3611:	
  1659                           
  1660                           ;main.c: 211:                 {;main.c: 212:                     motorcycle[i] = 0;
  1661  0264  1683               	bsf	3,5	;RP0=1, select bank3
  1662  0265  1703               	bsf	3,6	;RP1=1, select bank3
  1663  0266  086B               	movf	main@i_527^(0+384),w
  1664  0267  3EBF               	addlw	(low (_motorcycle| 0))& (0+255)
  1665  0268  0084               	movwf	4
  1666  0269  1383               	bcf	3,7	;select IRP bank1
  1667  026A  0180               	clrf	0
  1668                           
  1669                           ;main.c: 213:                     car[i] = 0;
  1670  026B  086B               	movf	main@i_527^(0+384),w
  1671  026C  3EBB               	addlw	(low (_car| 0))& (0+255)
  1672  026D  0084               	movwf	4
  1673  026E  0180               	clrf	0
  1674                           
  1675                           ;main.c: 214:                     truck[i] = 0;
  1676  026F  086B               	movf	main@i_527^(0+384),w
  1677  0270  3EB7               	addlw	(low (_truck| 0))& (0+255)
  1678  0271  0084               	movwf	4
  1679  0272  0180               	clrf	0
  1680  0273                     l3613:	
  1681                           
  1682                           ;main.c: 215:                 }
  1683  0273  3001               	movlw	1
  1684  0274  07EB               	addwf	main@i_527^(0+384),f
  1685  0275  1803               	skipnc
  1686  0276  0AEC               	incf	(main@i_527+1)^(0+384),f
  1687  0277  3000               	movlw	0
  1688  0278  07EC               	addwf	(main@i_527+1)^(0+384),f
  1689  0279                     l3615:	
  1690  0279  086C               	movf	(main@i_527+1)^(0+384),w
  1691  027A  3A80               	xorlw	128
  1692  027B  00FF               	movwf	btemp+1
  1693  027C  3080               	movlw	128
  1694  027D  027F               	subwf	btemp+1,w
  1695  027E  1D03               	skipz
  1696  027F  2A82               	goto	u2955
  1697  0280  3004               	movlw	4
  1698  0281  026B               	subwf	main@i_527^(0+384),w
  1699  0282                     u2955:	
  1700  0282  1C03               	skipc
  1701  0283  2A85               	goto	u2951
  1702  0284  2A86               	goto	u2950
  1703  0285                     u2951:	
  1704  0285  2A64               	goto	l3611
  1705  0286                     u2950:	
  1706  0286                     l3617:	
  1707                           
  1708                           ;main.c: 217:                 for (unsigned char i = 0; i < 5; i++)
  1709  0286  1683               	bsf	3,5	;RP0=1, select bank3
  1710  0287  1703               	bsf	3,6	;RP1=1, select bank3
  1711  0288  01E8               	clrf	main@i_528^(0+384)
  1712  0289                     l3619:	
  1713  0289  3005               	movlw	5
  1714  028A  0268               	subwf	main@i_528^(0+384),w
  1715  028B  1C03               	skipc
  1716  028C  2A8E               	goto	u2961
  1717  028D  2A8F               	goto	u2960
  1718  028E                     u2961:	
  1719  028E  2A90               	goto	l3623
  1720  028F                     u2960:	
  1721  028F  2B9B               	goto	l240
  1722  0290                     l3623:	
  1723                           
  1724                           ;main.c: 218:                 {;main.c: 219:                     dataFromGateway[i] = 0;
  1725  0290  0868               	movf	main@i_528^(0+384),w
  1726  0291  3E90               	addlw	(low (_dataFromGateway| (0+256)))& (0+255)
  1727  0292  0084               	movwf	4
  1728  0293  1783               	bsf	3,7	;select IRP bank3
  1729  0294  0180               	clrf	0
  1730  0295                     l3625:	
  1731                           
  1732                           ;main.c: 220:                 }
  1733  0295  3001               	movlw	1
  1734  0296  1283               	bcf	3,5	;RP0=0, select bank0
  1735  0297  1303               	bcf	3,6	;RP1=0, select bank0
  1736  0298  00D2               	movwf	??_main
  1737  0299  0852               	movf	??_main,w
  1738  029A  1683               	bsf	3,5	;RP0=1, select bank3
  1739  029B  1703               	bsf	3,6	;RP1=1, select bank3
  1740  029C  07E8               	addwf	main@i_528^(0+384),f
  1741  029D  2A89               	goto	l3619
  1742  029E                     l256:	
  1743                           ;main.c: 222:             case 0x0A:
  1744                           
  1745                           
  1746                           ;main.c: 223:                 readGatewayDone.Bit = 1;
  1747  029E  1464               	bsf	_readGatewayDone,0
  1748                           
  1749                           ;main.c: 224:                 readGateway.Bit = 0;
  1750  029F  1063               	bcf	_readGateway,0
  1751  02A0                     l3629:	
  1752                           
  1753                           ;main.c: 226:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1754  02A0  3000               	movlw	0
  1755  02A1  120A  158A  21F4  120A  118A  	fcall	_ADC_Read
  1756  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  1757  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  1758  02A8  0824               	movf	?_ADC_Read,w
  1759  02A9  00D2               	movwf	??_main
  1760  02AA  0825               	movf	?_ADC_Read+1,w
  1761  02AB  00D3               	movwf	??_main+1
  1762  02AC  0D53               	rlf	??_main+1,w
  1763  02AD  0CD3               	rrf	??_main+1,f
  1764  02AE  0CD2               	rrf	??_main,f
  1765  02AF  0D53               	rlf	??_main+1,w
  1766  02B0  0CD3               	rrf	??_main+1,f
  1767  02B1  0CD2               	rrf	??_main,f
  1768  02B2  0852               	movf	??_main,w
  1769  02B3  00C8               	movwf	map@x
  1770  02B4  0853               	movf	??_main+1,w
  1771  02B5  00C9               	movwf	map@x+1
  1772  02B6  3000               	movlw	0
  1773  02B7  00CA               	movwf	map@in_min
  1774  02B8  00CB               	movwf	map@in_min+1
  1775  02B9  30FF               	movlw	255
  1776  02BA  00CC               	movwf	map@in_max
  1777  02BB  3000               	movlw	0
  1778  02BC  00CD               	movwf	map@in_max+1
  1779  02BD  30EC               	movlw	236
  1780  02BE  00CE               	movwf	map@out_min
  1781  02BF  30FF               	movlw	255
  1782  02C0  00CF               	movwf	map@out_min+1
  1783  02C1  303C               	movlw	60
  1784  02C2  00D0               	movwf	map@out_max
  1785  02C3  3000               	movlw	0
  1786  02C4  00D1               	movwf	map@out_max+1
  1787  02C5  120A  158A  2272  120A  118A  	fcall	_map
  1788  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  1789  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  1790  02CC  0848               	movf	?_map,w
  1791  02CD  00D4               	movwf	??_main+2
  1792  02CE  0854               	movf	??_main+2,w
  1793  02CF  00DC               	movwf	_temp
  1794                           
  1795                           ;main.c: 227:                 umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  1796  02D0  3001               	movlw	1
  1797  02D1  120A  158A  21F4  120A  118A  	fcall	_ADC_Read
  1798  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  1799  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  1800  02D8  0824               	movf	?_ADC_Read,w
  1801  02D9  00D2               	movwf	??_main
  1802  02DA  0825               	movf	?_ADC_Read+1,w
  1803  02DB  00D3               	movwf	??_main+1
  1804  02DC  0D53               	rlf	??_main+1,w
  1805  02DD  0CD3               	rrf	??_main+1,f
  1806  02DE  0CD2               	rrf	??_main,f
  1807  02DF  0D53               	rlf	??_main+1,w
  1808  02E0  0CD3               	rrf	??_main+1,f
  1809  02E1  0CD2               	rrf	??_main,f
  1810  02E2  0852               	movf	??_main,w
  1811  02E3  00C8               	movwf	map@x
  1812  02E4  0853               	movf	??_main+1,w
  1813  02E5  00C9               	movwf	map@x+1
  1814  02E6  3000               	movlw	0
  1815  02E7  00CA               	movwf	map@in_min
  1816  02E8  00CB               	movwf	map@in_min+1
  1817  02E9  30FF               	movlw	255
  1818  02EA  00CC               	movwf	map@in_max
  1819  02EB  3000               	movlw	0
  1820  02EC  00CD               	movwf	map@in_max+1
  1821  02ED  3000               	movlw	0
  1822  02EE  00CE               	movwf	map@out_min
  1823  02EF  00CF               	movwf	map@out_min+1
  1824  02F0  3064               	movlw	100
  1825  02F1  00D0               	movwf	map@out_max
  1826  02F2  3000               	movlw	0
  1827  02F3  00D1               	movwf	map@out_max+1
  1828  02F4  120A  158A  2272  120A  118A  	fcall	_map
  1829  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  1830  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  1831  02FB  0848               	movf	?_map,w
  1832  02FC  00D4               	movwf	??_main+2
  1833  02FD  0854               	movf	??_main+2,w
  1834  02FE  00DB               	movwf	_umidita
  1835                           
  1836                           ;main.c: 228:                 pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  1837  02FF  3005               	movlw	5
  1838  0300  120A  158A  21F4  120A  118A  	fcall	_ADC_Read
  1839  0305  1283               	bcf	3,5	;RP0=0, select bank0
  1840  0306  1303               	bcf	3,6	;RP1=0, select bank0
  1841  0307  0824               	movf	?_ADC_Read,w
  1842  0308  00D2               	movwf	??_main
  1843  0309  0825               	movf	?_ADC_Read+1,w
  1844  030A  00D3               	movwf	??_main+1
  1845  030B  0D53               	rlf	??_main+1,w
  1846  030C  0CD3               	rrf	??_main+1,f
  1847  030D  0CD2               	rrf	??_main,f
  1848  030E  0D53               	rlf	??_main+1,w
  1849  030F  0CD3               	rrf	??_main+1,f
  1850  0310  0CD2               	rrf	??_main,f
  1851  0311  0852               	movf	??_main,w
  1852  0312  00C8               	movwf	map@x
  1853  0313  0853               	movf	??_main+1,w
  1854  0314  00C9               	movwf	map@x+1
  1855  0315  3000               	movlw	0
  1856  0316  00CA               	movwf	map@in_min
  1857  0317  00CB               	movwf	map@in_min+1
  1858  0318  30FF               	movlw	255
  1859  0319  00CC               	movwf	map@in_max
  1860  031A  3000               	movlw	0
  1861  031B  00CD               	movwf	map@in_max+1
  1862  031C  3000               	movlw	0
  1863  031D  00CE               	movwf	map@out_min
  1864  031E  00CF               	movwf	map@out_min+1
  1865  031F  3064               	movlw	100
  1866  0320  00D0               	movwf	map@out_max
  1867  0321  3000               	movlw	0
  1868  0322  00D1               	movwf	map@out_max+1
  1869  0323  120A  158A  2272  120A  118A  	fcall	_map
  1870  0328  1283               	bcf	3,5	;RP0=0, select bank0
  1871  0329  1303               	bcf	3,6	;RP1=0, select bank0
  1872  032A  0848               	movf	?_map,w
  1873  032B  00D4               	movwf	??_main+2
  1874  032C  0854               	movf	??_main+2,w
  1875  032D  1683               	bsf	3,5	;RP0=1, select bank1
  1876  032E  1303               	bcf	3,6	;RP1=0, select bank1
  1877  032F  00B6               	movwf	_pressione^(0+128)
  1878  0330                     l3631:	
  1879                           
  1880                           ;main.c: 229:                 sendByte(0x02, 0x00, temp);
  1881  0330  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0331  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0332  01B8               	clrf	sendByte@byte1
  1884  0333  085C               	movf	_temp,w
  1885  0334  00D2               	movwf	??_main
  1886  0335  0852               	movf	??_main,w
  1887  0336  00B9               	movwf	sendByte@valore
  1888  0337  3002               	movlw	2
  1889  0338  120A  158A  2241  120A  118A  	fcall	_sendByte
  1890  033D                     l3633:	
  1891                           
  1892                           ;main.c: 230:                 sendByte(0x04, 0x00, umidita);
  1893  033D  1283               	bcf	3,5	;RP0=0, select bank0
  1894  033E  1303               	bcf	3,6	;RP1=0, select bank0
  1895  033F  01B8               	clrf	sendByte@byte1
  1896  0340  085B               	movf	_umidita,w
  1897  0341  00D2               	movwf	??_main
  1898  0342  0852               	movf	??_main,w
  1899  0343  00B9               	movwf	sendByte@valore
  1900  0344  3004               	movlw	4
  1901  0345  120A  158A  2241  120A  118A  	fcall	_sendByte
  1902  034A                     l3635:	
  1903                           
  1904                           ;main.c: 231:                 sendByte(0x06, 0x00, pressione);
  1905  034A  1283               	bcf	3,5	;RP0=0, select bank0
  1906  034B  1303               	bcf	3,6	;RP1=0, select bank0
  1907  034C  01B8               	clrf	sendByte@byte1
  1908  034D  1683               	bsf	3,5	;RP0=1, select bank1
  1909  034E  1303               	bcf	3,6	;RP1=0, select bank1
  1910  034F  0836               	movf	_pressione^(0+128),w
  1911  0350  1283               	bcf	3,5	;RP0=0, select bank0
  1912  0351  1303               	bcf	3,6	;RP1=0, select bank0
  1913  0352  00D2               	movwf	??_main
  1914  0353  0852               	movf	??_main,w
  1915  0354  00B9               	movwf	sendByte@valore
  1916  0355  3006               	movlw	6
  1917  0356  120A  158A  2241  120A  118A  	fcall	_sendByte
  1918  035B                     l3637:	
  1919                           
  1920                           ;main.c: 233:                 for (unsigned char i = 0; i < 5; i++)
  1921  035B  1683               	bsf	3,5	;RP0=1, select bank3
  1922  035C  1703               	bsf	3,6	;RP1=1, select bank3
  1923  035D  01E9               	clrf	main@i_530^(0+384)
  1924  035E                     l3639:	
  1925  035E  3005               	movlw	5
  1926  035F  0269               	subwf	main@i_530^(0+384),w
  1927  0360  1C03               	skipc
  1928  0361  2B63               	goto	u2971
  1929  0362  2B64               	goto	u2970
  1930  0363                     u2971:	
  1931  0363  2B65               	goto	l3643
  1932  0364                     u2970:	
  1933  0364  2B9B               	goto	l240
  1934  0365                     l3643:	
  1935                           
  1936                           ;main.c: 234:                 {;main.c: 235:                     dataFromGateway[i] = 0;
  1937  0365  0869               	movf	main@i_530^(0+384),w
  1938  0366  3E90               	addlw	(low (_dataFromGateway| (0+256)))& (0+255)
  1939  0367  0084               	movwf	4
  1940  0368  1783               	bsf	3,7	;select IRP bank3
  1941  0369  0180               	clrf	0
  1942  036A                     l3645:	
  1943                           
  1944                           ;main.c: 236:                 }
  1945  036A  3001               	movlw	1
  1946  036B  1283               	bcf	3,5	;RP0=0, select bank0
  1947  036C  1303               	bcf	3,6	;RP1=0, select bank0
  1948  036D  00D2               	movwf	??_main
  1949  036E  0852               	movf	??_main,w
  1950  036F  1683               	bsf	3,5	;RP0=1, select bank3
  1951  0370  1703               	bsf	3,6	;RP1=1, select bank3
  1952  0371  07E9               	addwf	main@i_530^(0+384),f
  1953  0372  2B5E               	goto	l3639
  1954  0373                     l3649:	
  1955                           
  1956                           ;main.c: 240:                 if (timerReadFromGateway >= 4)
  1957  0373  3004               	movlw	4
  1958  0374  025D               	subwf	_timerReadFromGateway,w
  1959  0375  1C03               	skipc
  1960  0376  2B78               	goto	u2981
  1961  0377  2B79               	goto	u2980
  1962  0378                     u2981:	
  1963  0378  2B7C               	goto	l3653
  1964  0379                     u2980:	
  1965  0379                     l3651:	
  1966                           
  1967                           ;main.c: 241:                 {;main.c: 242:                     readGatewayDone.Bit = 1
      +                          ;
  1968  0379  1464               	bsf	_readGatewayDone,0
  1969                           
  1970                           ;main.c: 243:                     readGatewayDone.Timeout = 1;
  1971  037A  14E4               	bsf	_readGatewayDone,1
  1972                           
  1973                           ;main.c: 244:                     readGateway.Bit = 0;
  1974  037B  1063               	bcf	_readGateway,0
  1975  037C                     l3653:	
  1976                           
  1977                           ;main.c: 247:                 if (dataFromGatewayIndex >= 15)
  1978  037C  300F               	movlw	15
  1979  037D  025E               	subwf	_dataFromGatewayIndex,w
  1980  037E  1C03               	skipc
  1981  037F  2B81               	goto	u2991
  1982  0380  2B82               	goto	u2990
  1983  0381                     u2991:	
  1984  0381  2B9B               	goto	l240
  1985  0382                     u2990:	
  1986  0382                     l3655:	
  1987                           
  1988                           ;main.c: 248:                 {;main.c: 249:                     readGatewayDone.Bit = 1
      +                          ;
  1989  0382  1464               	bsf	_readGatewayDone,0
  1990                           
  1991                           ;main.c: 250:                     readGatewayDone.Timeout = 0;
  1992  0383  10E4               	bcf	_readGatewayDone,1
  1993                           
  1994                           ;main.c: 251:                     readGateway.Bit = 0;
  1995  0384  1063               	bcf	_readGateway,0
  1996  0385  2B9B               	goto	l240
  1997  0386                     l3659:	
  1998  0386  1683               	bsf	3,5	;RP0=1, select bank3
  1999  0387  1703               	bsf	3,6	;RP1=1, select bank3
  2000  0388  0810               	movf	_dataFromGateway^(0+384),w
  2001  0389  397F               	andlw	127
  2002  038A  1283               	bcf	3,5	;RP0=0, select bank0
  2003  038B  1303               	bcf	3,6	;RP1=0, select bank0
  2004  038C  00D2               	movwf	??_main
  2005  038D  01D3               	clrf	??_main+1
  2006                           
  2007                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2008                           ; Switch size 1, requested type "simple"
  2009                           ; Number of cases is 1, Range of values is 0 to 0
  2010                           ; switch strategies available:
  2011                           ; Name         Instructions Cycles
  2012                           ; simple_byte            4     3 (average)
  2013                           ; direct_byte           11     8 (fixed)
  2014                           ; jumptable            260     6 (fixed)
  2015                           ;	Chosen strategy is simple_byte
  2016  038E  0853               	movf	??_main+1,w
  2017  038F  3A00               	xorlw	0	; case 0
  2018  0390  1903               	skipnz
  2019  0391  2B93               	goto	l3977
  2020  0392  2B73               	goto	l3649
  2021  0393                     l3977:	
  2022                           
  2023                           ; Switch size 1, requested type "simple"
  2024                           ; Number of cases is 2, Range of values is 8 to 10
  2025                           ; switch strategies available:
  2026                           ; Name         Instructions Cycles
  2027                           ; simple_byte            7     4 (average)
  2028                           ; direct_byte           20    11 (fixed)
  2029                           ; jumptable            263     9 (fixed)
  2030                           ;	Chosen strategy is simple_byte
  2031  0393  0852               	movf	??_main,w
  2032  0394  3A08               	xorlw	8	; case 8
  2033  0395  1903               	skipnz
  2034  0396  2892               	goto	l242
  2035  0397  3A02               	xorlw	2	; case 10
  2036  0398  1903               	skipnz
  2037  0399  2A9E               	goto	l256
  2038  039A  2B73               	goto	l3649
  2039  039B                     l240:	
  2040                           ;main.c: 255:         }
  2041                           
  2042                           
  2043                           ;main.c: 258:         if (readGatewayDone.Bit)
  2044  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2045  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2046  039D  1C64               	btfss	_readGatewayDone,0
  2047  039E  2BA0               	goto	u3001
  2048  039F  2BA1               	goto	u3000
  2049  03A0                     u3001:	
  2050  03A0  2BB5               	goto	l3673
  2051  03A1                     u3000:	
  2052  03A1                     l3661:	
  2053                           
  2054                           ;main.c: 259:         {;main.c: 261:             readGateway.Bit = 0;
  2055  03A1  1063               	bcf	_readGateway,0
  2056  03A2                     l3663:	
  2057                           
  2058                           ;main.c: 262:             dataFromGatewayIndex = 0;
  2059  03A2  01DE               	clrf	_dataFromGatewayIndex
  2060  03A3                     l3665:	
  2061                           
  2062                           ;main.c: 263:             readGatewayDone.Bit = 0;
  2063  03A3  1064               	bcf	_readGatewayDone,0
  2064                           
  2065                           ;main.c: 264:             timerReadFromGateway = 0;
  2066  03A4  01DD               	clrf	_timerReadFromGateway
  2067  03A5                     l3667:	
  2068                           
  2069                           ;main.c: 267:             if (readGatewayDone.Timeout)
  2070  03A5  1CE4               	btfss	_readGatewayDone,1
  2071  03A6  2BA8               	goto	u3011
  2072  03A7  2BA9               	goto	u3010
  2073  03A8                     u3011:	
  2074  03A8  2BAB               	goto	l3671
  2075  03A9                     u3010:	
  2076  03A9                     l3669:	
  2077                           
  2078                           ;main.c: 268:             {;main.c: 269:                 readGatewayDone.Timeout = 0;
  2079  03A9  10E4               	bcf	_readGatewayDone,1
  2080                           
  2081                           ;main.c: 270:             }
  2082  03AA  2BB5               	goto	l3673
  2083  03AB                     l3671:	
  2084                           
  2085                           ;main.c: 273:             {;main.c: 275:                 SetReceivedTimes(dataFromGatewa
      +                          y, Semafori);
  2086  03AB  30E7               	movlw	(low (_Semafori| 0))& (0+255)
  2087  03AC  00D2               	movwf	??_main
  2088  03AD  0852               	movf	??_main,w
  2089  03AE  00AC               	movwf	SetReceivedTimes@_semafori
  2090  03AF  3090               	movlw	(low (_dataFromGateway| (0+256)))& (0+255)
  2091  03B0  120A  158A  2516  120A  118A  	fcall	_SetReceivedTimes
  2092  03B5                     l3673:	
  2093                           
  2094                           ;main.c: 281:         if (secondPassed.Bit && cycled.Bit)
  2095  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  2096  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  2097  03B7  1C62               	btfss	_secondPassed,0
  2098  03B8  2BBA               	goto	u3021
  2099  03B9  2BBB               	goto	u3020
  2100  03BA                     u3021:	
  2101  03BA  2CE9               	goto	l3723
  2102  03BB                     u3020:	
  2103  03BB                     l3675:	
  2104  03BB  1C61               	btfss	_cycled,0
  2105  03BC  2BBE               	goto	u3031
  2106  03BD  2BBF               	goto	u3030
  2107  03BE                     u3031:	
  2108  03BE  2CE9               	goto	l3723
  2109  03BF                     u3030:	
  2110  03BF                     l3677:	
  2111                           
  2112                           ;main.c: 282:         {;main.c: 283:             for (unsigned char i = 0; i < 2; i++)
  2113  03BF  1683               	bsf	3,5	;RP0=1, select bank3
  2114  03C0  1703               	bsf	3,6	;RP1=1, select bank3
  2115  03C1  01EE               	clrf	main@i_532^(0+384)
  2116  03C2                     l3679:	
  2117  03C2  3002               	movlw	2
  2118  03C3  026E               	subwf	main@i_532^(0+384),w
  2119  03C4  1C03               	skipc
  2120  03C5  2BC7               	goto	u3041
  2121  03C6  2BC8               	goto	u3040
  2122  03C7                     u3041:	
  2123  03C7  2BC9               	goto	l3683
  2124  03C8                     u3040:	
  2125  03C8  2CE9               	goto	l3723
  2126  03C9                     l3683:	
  2127                           
  2128                           ;main.c: 284:             {;main.c: 285:                 if ((*Semafori[i]).times[0] != 
      +                          0)
  2129  03C9  086E               	movf	main@i_532^(0+384),w
  2130  03CA  3EE7               	addlw	(low (_Semafori| 0))& (0+255)
  2131  03CB  0084               	movwf	4
  2132  03CC  1383               	bcf	3,7	;select IRP bank1
  2133  03CD  0800               	movf	0,w
  2134  03CE  0084               	movwf	4
  2135  03CF  1783               	bsf	3,7	;select IRP bank2
  2136  03D0  0800               	movf	0,w
  2137  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  2138  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  2139  03D3  00D2               	movwf	??_main
  2140  03D4  0A84               	incf	4,f
  2141  03D5  0800               	movf	0,w
  2142  03D6  00D3               	movwf	??_main+1
  2143  03D7  0852               	movf	??_main,w
  2144  03D8  0453               	iorwf	??_main+1,w
  2145  03D9  1903               	btfsc	3,2
  2146  03DA  2BDC               	goto	u3051
  2147  03DB  2BDD               	goto	u3050
  2148  03DC                     u3051:	
  2149  03DC  2CE0               	goto	l3719
  2150  03DD                     u3050:	
  2151  03DD                     l3685:	
  2152                           
  2153                           ;main.c: 286:                 {;main.c: 287:                     time[i]++;
  2154  03DD  1683               	bsf	3,5	;RP0=1, select bank3
  2155  03DE  1703               	bsf	3,6	;RP1=1, select bank3
  2156  03DF  086E               	movf	main@i_532^(0+384),w
  2157  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2158  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  2159  03E2  00D2               	movwf	??_main
  2160  03E3  0752               	addwf	??_main,w
  2161  03E4  3EA0               	addlw	(low (_time| 0))& (0+255)
  2162  03E5  0084               	movwf	4
  2163  03E6  3001               	movlw	1
  2164  03E7  1383               	bcf	3,7	;select IRP bank1
  2165  03E8  0780               	addwf	0,f
  2166  03E9  0A84               	incf	4,f
  2167  03EA  1803               	skipnc
  2168  03EB  0A80               	incf	0,f
  2169                           
  2170                           ;main.c: 288:                     unsigned char lux_select = (*Semafori[i]).lux_select;
  2171  03EC  1683               	bsf	3,5	;RP0=1, select bank3
  2172  03ED  1703               	bsf	3,6	;RP1=1, select bank3
  2173  03EE  086E               	movf	main@i_532^(0+384),w
  2174  03EF  3EE7               	addlw	(low (_Semafori| 0))& (0+255)
  2175  03F0  0084               	movwf	4
  2176  03F1  0800               	movf	0,w
  2177  03F2  3E0C               	addlw	12
  2178  03F3  0084               	movwf	4
  2179  03F4  1783               	bsf	3,7	;select IRP bank2
  2180  03F5  0800               	movf	0,w
  2181  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  2182  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  2183  03F8  00D2               	movwf	??_main
  2184  03F9  0852               	movf	??_main,w
  2185  03FA  1683               	bsf	3,5	;RP0=1, select bank3
  2186  03FB  1703               	bsf	3,6	;RP1=1, select bank3
  2187  03FC  00ED               	movwf	main@lux_select^(0+384)
  2188                           
  2189                           ;main.c: 290:                     if ((*Semafori[i]).times[lux_select] - time[i] < 0)
  2190  03FD  086E               	movf	main@i_532^(0+384),w
  2191  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2192  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  2193  0400  00D2               	movwf	??_main
  2194  0401  0752               	addwf	??_main,w
  2195  0402  3EA0               	addlw	(low (_time| 0))& (0+255)
  2196  0403  0084               	movwf	4
  2197  0404  1383               	bcf	3,7	;select IRP bank1
  2198  0405  0800               	movf	0,w
  2199  0406  00D3               	movwf	??_main+1
  2200  0407  0A84               	incf	4,f
  2201  0408  0800               	movf	0,w
  2202  0409  00D4               	movwf	??_main+2
  2203  040A  1683               	bsf	3,5	;RP0=1, select bank3
  2204  040B  1703               	bsf	3,6	;RP1=1, select bank3
  2205  040C  086E               	movf	main@i_532^(0+384),w
  2206  040D  3EE7               	addlw	(low (_Semafori| 0))& (0+255)
  2207  040E  0084               	movwf	4
  2208  040F  086D               	movf	main@lux_select^(0+384),w
  2209  0410  1283               	bcf	3,5	;RP0=0, select bank0
  2210  0411  1303               	bcf	3,6	;RP1=0, select bank0
  2211  0412  00D5               	movwf	??_main+3
  2212  0413  0755               	addwf	??_main+3,w
  2213  0414  0700               	addwf	0,w
  2214  0415  00D6               	movwf	??_main+4
  2215  0416  0856               	movf	??_main+4,w
  2216  0417  0084               	movwf	4
  2217  0418  1783               	bsf	3,7	;select IRP bank2
  2218  0419  0800               	movf	0,w
  2219  041A  00D7               	movwf	??_main+5
  2220  041B  0A84               	incf	4,f
  2221  041C  0800               	movf	0,w
  2222  041D  00D8               	movwf	??_main+6
  2223  041E  0853               	movf	??_main+1,w
  2224  041F  0257               	subwf	??_main+5,w
  2225  0420  00D9               	movwf	??_main+7
  2226  0421  0854               	movf	??_main+2,w
  2227  0422  1C03               	skipc
  2228  0423  0A54               	incf	??_main+2,w
  2229  0424  0258               	subwf	??_main+6,w
  2230  0425  00DA               	movwf	??_main+8
  2231  0426  1FDA               	btfss	??_main+8,7
  2232  0427  2C29               	goto	u3061
  2233  0428  2C2A               	goto	u3060
  2234  0429                     u3061:	
  2235  0429  2C83               	goto	l3713
  2236  042A                     u3060:	
  2237  042A                     l3687:	
  2238                           
  2239                           ;main.c: 291:                     {;main.c: 292:                         lux_select++;
  2240  042A  3001               	movlw	1
  2241  042B  00D2               	movwf	??_main
  2242  042C  0852               	movf	??_main,w
  2243  042D  1683               	bsf	3,5	;RP0=1, select bank3
  2244  042E  1703               	bsf	3,6	;RP1=1, select bank3
  2245  042F  07ED               	addwf	main@lux_select^(0+384),f
  2246  0430                     l3689:	
  2247                           
  2248                           ;main.c: 293:                         time[i] = 1;
  2249  0430  086E               	movf	main@i_532^(0+384),w
  2250  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2251  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2252  0433  00D2               	movwf	??_main
  2253  0434  0752               	addwf	??_main,w
  2254  0435  3EA0               	addlw	(low (_time| 0))& (0+255)
  2255  0436  0084               	movwf	4
  2256  0437  3001               	movlw	1
  2257  0438  1383               	bcf	3,7	;select IRP bank1
  2258  0439  0080               	movwf	0
  2259  043A  0A84               	incf	4,f
  2260  043B  3000               	movlw	0
  2261  043C  0080               	movwf	0
  2262  043D                     l3691:	
  2263                           
  2264                           ;main.c: 295:                         if (lux_select >= 3)
  2265  043D  3003               	movlw	3
  2266  043E  1683               	bsf	3,5	;RP0=1, select bank3
  2267  043F  1703               	bsf	3,6	;RP1=1, select bank3
  2268  0440  026D               	subwf	main@lux_select^(0+384),w
  2269  0441  1C03               	skipc
  2270  0442  2C44               	goto	u3071
  2271  0443  2C45               	goto	u3070
  2272  0444                     u3071:	
  2273  0444  2C83               	goto	l3713
  2274  0445                     u3070:	
  2275  0445                     l3693:	
  2276                           
  2277                           ;main.c: 296:                         {;main.c: 297:                             lux_sel
      +                          ect = 0;
  2278  0445  01ED               	clrf	main@lux_select^(0+384)
  2279  0446                     l3695:	
  2280                           
  2281                           ;main.c: 299:                             if (i == 0)
  2282  0446  086E               	movf	main@i_532^(0+384),w
  2283  0447  1D03               	btfss	3,2
  2284  0448  2C4A               	goto	u3081
  2285  0449  2C4B               	goto	u3080
  2286  044A                     u3081:	
  2287  044A  2C83               	goto	l3713
  2288  044B                     u3080:	
  2289  044B                     l3697:	
  2290                           
  2291                           ;main.c: 300:                             {;main.c: 301:                                
      +                           UpdateTimes(Semafori);
  2292  044B  30E7               	movlw	(low (_Semafori| 0))& (0+255)
  2293  044C  120A  118A  2769  120A  118A  	fcall	_UpdateTimes
  2294  0451                     l3699:	
  2295                           
  2296                           ;main.c: 303:                                 for(unsigned char l=0; l<n_semafori; l++)
  2297  0451  1683               	bsf	3,5	;RP0=1, select bank3
  2298  0452  1703               	bsf	3,6	;RP1=1, select bank3
  2299  0453  01EA               	clrf	main@l^(0+384)
  2300  0454                     l3701:	
  2301  0454  3008               	movlw	8
  2302  0455  026A               	subwf	main@l^(0+384),w
  2303  0456  1C03               	skipc
  2304  0457  2C59               	goto	u3091
  2305  0458  2C5A               	goto	u3090
  2306  0459                     u3091:	
  2307  0459  2C5B               	goto	l3705
  2308  045A                     u3090:	
  2309  045A  2C7B               	goto	l3711
  2310  045B                     l3705:	
  2311                           
  2312                           ;main.c: 304:                                 {;main.c: 305:                            
      +                                   time[l] = 1;
  2313  045B  086A               	movf	main@l^(0+384),w
  2314  045C  1283               	bcf	3,5	;RP0=0, select bank0
  2315  045D  1303               	bcf	3,6	;RP1=0, select bank0
  2316  045E  00D2               	movwf	??_main
  2317  045F  0752               	addwf	??_main,w
  2318  0460  3EA0               	addlw	(low (_time| 0))& (0+255)
  2319  0461  0084               	movwf	4
  2320  0462  3001               	movlw	1
  2321  0463  1383               	bcf	3,7	;select IRP bank1
  2322  0464  0080               	movwf	0
  2323  0465  0A84               	incf	4,f
  2324  0466  3000               	movlw	0
  2325  0467  0080               	movwf	0
  2326                           
  2327                           ;main.c: 306:                                     (*Semafori[l]).lux_select = 0;
  2328  0468  1683               	bsf	3,5	;RP0=1, select bank3
  2329  0469  1703               	bsf	3,6	;RP1=1, select bank3
  2330  046A  086A               	movf	main@l^(0+384),w
  2331  046B  3EE7               	addlw	(low (_Semafori| 0))& (0+255)
  2332  046C  0084               	movwf	4
  2333  046D  0800               	movf	0,w
  2334  046E  3E0C               	addlw	12
  2335  046F  0084               	movwf	4
  2336  0470  1783               	bsf	3,7	;select IRP bank2
  2337  0471  0180               	clrf	0
  2338  0472                     l3707:	
  2339                           
  2340                           ;main.c: 307:                                 }
  2341  0472  3001               	movlw	1
  2342  0473  1283               	bcf	3,5	;RP0=0, select bank0
  2343  0474  1303               	bcf	3,6	;RP1=0, select bank0
  2344  0475  00D2               	movwf	??_main
  2345  0476  0852               	movf	??_main,w
  2346  0477  1683               	bsf	3,5	;RP0=1, select bank3
  2347  0478  1703               	bsf	3,6	;RP1=1, select bank3
  2348  0479  07EA               	addwf	main@l^(0+384),f
  2349  047A  2C54               	goto	l3701
  2350  047B                     l3711:	
  2351                           
  2352                           ;main.c: 309:                                 (*Semafori[1]).lux_select = 1;
  2353  047B  1683               	bsf	3,5	;RP0=1, select bank1
  2354  047C  1303               	bcf	3,6	;RP1=0, select bank1
  2355  047D  0868               	movf	(low ((_Semafori| 0+1)))^(0+128),w
  2356  047E  3E0C               	addlw	12
  2357  047F  0084               	movwf	4
  2358  0480  1783               	bsf	3,7	;select IRP bank2
  2359  0481  0180               	clrf	0
  2360  0482  0A80               	incf	0,f
  2361  0483                     l3713:	
  2362                           
  2363                           ;main.c: 314:                     luciSemaforo(i, lux_select);
  2364  0483  1683               	bsf	3,5	;RP0=1, select bank3
  2365  0484  1703               	bsf	3,6	;RP1=1, select bank3
  2366  0485  086D               	movf	main@lux_select^(0+384),w
  2367  0486  1283               	bcf	3,5	;RP0=0, select bank0
  2368  0487  1303               	bcf	3,6	;RP1=0, select bank0
  2369  0488  00D2               	movwf	??_main
  2370  0489  0852               	movf	??_main,w
  2371  048A  00A4               	movwf	luciSemaforo@lux
  2372  048B  1683               	bsf	3,5	;RP0=1, select bank3
  2373  048C  1703               	bsf	3,6	;RP1=1, select bank3
  2374  048D  086E               	movf	main@i_532^(0+384),w
  2375  048E  120A  158A  23BB  120A  118A  	fcall	_luciSemaforo
  2376  0493                     l3715:	
  2377                           
  2378                           ;main.c: 315:                     (*Semafori[i]).lux_select = lux_select;
  2379  0493  1683               	bsf	3,5	;RP0=1, select bank3
  2380  0494  1703               	bsf	3,6	;RP1=1, select bank3
  2381  0495  086D               	movf	main@lux_select^(0+384),w
  2382  0496  1283               	bcf	3,5	;RP0=0, select bank0
  2383  0497  1303               	bcf	3,6	;RP1=0, select bank0
  2384  0498  00D2               	movwf	??_main
  2385  0499  1683               	bsf	3,5	;RP0=1, select bank3
  2386  049A  1703               	bsf	3,6	;RP1=1, select bank3
  2387  049B  086E               	movf	main@i_532^(0+384),w
  2388  049C  3EE7               	addlw	(low (_Semafori| 0))& (0+255)
  2389  049D  0084               	movwf	4
  2390  049E  1383               	bcf	3,7	;select IRP bank1
  2391  049F  0800               	movf	0,w
  2392  04A0  3E0C               	addlw	12
  2393  04A1  0084               	movwf	4
  2394  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  2395  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  2396  04A4  0852               	movf	??_main,w
  2397  04A5  1783               	bsf	3,7	;select IRP bank2
  2398  04A6  0080               	movwf	0
  2399  04A7                     l3717:	
  2400                           
  2401                           ;main.c: 316:                     GetDigits(DigitsArr, i, (*Semafori[i]).times[lux_selec
      +                          t] - time[i]);
  2402  04A7  1683               	bsf	3,5	;RP0=1, select bank3
  2403  04A8  1703               	bsf	3,6	;RP1=1, select bank3
  2404  04A9  086E               	movf	main@i_532^(0+384),w
  2405  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  2406  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  2407  04AC  00D2               	movwf	??_main
  2408  04AD  0852               	movf	??_main,w
  2409  04AE  00C8               	movwf	GetDigits@index
  2410  04AF  1683               	bsf	3,5	;RP0=1, select bank3
  2411  04B0  1703               	bsf	3,6	;RP1=1, select bank3
  2412  04B1  086E               	movf	main@i_532^(0+384),w
  2413  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  2414  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  2415  04B4  00D3               	movwf	??_main+1
  2416  04B5  0753               	addwf	??_main+1,w
  2417  04B6  3EA0               	addlw	(low (_time| 0))& (0+255)
  2418  04B7  0084               	movwf	4
  2419  04B8  1383               	bcf	3,7	;select IRP bank1
  2420  04B9  0800               	movf	0,w
  2421  04BA  00D4               	movwf	??_main+2
  2422  04BB  0A84               	incf	4,f
  2423  04BC  0800               	movf	0,w
  2424  04BD  00D5               	movwf	??_main+3
  2425  04BE  1683               	bsf	3,5	;RP0=1, select bank3
  2426  04BF  1703               	bsf	3,6	;RP1=1, select bank3
  2427  04C0  086E               	movf	main@i_532^(0+384),w
  2428  04C1  3EE7               	addlw	(low (_Semafori| 0))& (0+255)
  2429  04C2  0084               	movwf	4
  2430  04C3  086D               	movf	main@lux_select^(0+384),w
  2431  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  2432  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  2433  04C6  00D6               	movwf	??_main+4
  2434  04C7  0756               	addwf	??_main+4,w
  2435  04C8  0700               	addwf	0,w
  2436  04C9  00D7               	movwf	??_main+5
  2437  04CA  0857               	movf	??_main+5,w
  2438  04CB  0084               	movwf	4
  2439  04CC  1783               	bsf	3,7	;select IRP bank2
  2440  04CD  0800               	movf	0,w
  2441  04CE  00D8               	movwf	??_main+6
  2442  04CF  0A84               	incf	4,f
  2443  04D0  0800               	movf	0,w
  2444  04D1  00D9               	movwf	??_main+7
  2445  04D2  0854               	movf	??_main+2,w
  2446  04D3  0258               	subwf	??_main+6,w
  2447  04D4  00C9               	movwf	GetDigits@Time
  2448  04D5  0855               	movf	??_main+3,w
  2449  04D6  1C03               	skipc
  2450  04D7  0A55               	incf	??_main+3,w
  2451  04D8  0259               	subwf	??_main+7,w
  2452  04D9  00CA               	movwf	GetDigits@Time+1
  2453  04DA  30DF               	movlw	(low (_DigitsArr| 0))& (0+255)
  2454  04DB  120A  118A  25D4  120A  118A  	fcall	_GetDigits
  2455  04E0                     l3719:	
  2456                           
  2457                           ;main.c: 318:             }
  2458  04E0  3001               	movlw	1
  2459  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  2460  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  2461  04E3  00D2               	movwf	??_main
  2462  04E4  0852               	movf	??_main,w
  2463  04E5  1683               	bsf	3,5	;RP0=1, select bank3
  2464  04E6  1703               	bsf	3,6	;RP1=1, select bank3
  2465  04E7  07EE               	addwf	main@i_532^(0+384),f
  2466  04E8  2BC2               	goto	l3679
  2467  04E9                     l3723:	
  2468                           
  2469                           ;main.c: 320:         ShowDigitsOnDisplay();
  2470  04E9  120A  158A  2753  120A  118A  	fcall	_ShowDigitsOnDisplay
  2471  04EE                     l3725:	
  2472                           
  2473                           ;main.c: 326:         if (secondPassed.Bit && cycled.Bit)
  2474  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  2475  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  2476  04F0  1C62               	btfss	_secondPassed,0
  2477  04F1  2CF3               	goto	u3101
  2478  04F2  2CF4               	goto	u3100
  2479  04F3                     u3101:	
  2480  04F3  2CFA               	goto	l274
  2481  04F4                     u3100:	
  2482  04F4                     l3727:	
  2483  04F4  1C61               	btfss	_cycled,0
  2484  04F5  2CF7               	goto	u3111
  2485  04F6  2CF8               	goto	u3110
  2486  04F7                     u3111:	
  2487  04F7  2CFA               	goto	l274
  2488  04F8                     u3110:	
  2489  04F8                     l3729:	
  2490                           
  2491                           ;main.c: 327:         {;main.c: 328:             secondPassed.Bit = 0;
  2492  04F8  1062               	bcf	_secondPassed,0
  2493                           
  2494                           ;main.c: 329:             cycled.Bit = 0;
  2495  04F9  1061               	bcf	_cycled,0
  2496  04FA                     l274:	
  2497                           ;main.c: 330:         }
  2498                           
  2499                           
  2500                           ;main.c: 331:         if (secondPassed.Bit && !cycled.Bit)
  2501  04FA  1C62               	btfss	_secondPassed,0
  2502  04FB  2CFD               	goto	u3121
  2503  04FC  2CFE               	goto	u3120
  2504  04FD                     u3121:	
  2505  04FD  288D               	goto	l3571
  2506  04FE                     u3120:	
  2507  04FE                     l3731:	
  2508  04FE  1861               	btfsc	_cycled,0
  2509  04FF  2D01               	goto	u3131
  2510  0500  2D02               	goto	u3130
  2511  0501                     u3131:	
  2512  0501  288D               	goto	l3571
  2513  0502                     u3130:	
  2514  0502                     l3733:	
  2515                           
  2516                           ;main.c: 332:         {;main.c: 333:             cycled.Bit = 1;
  2517  0502  1461               	bsf	_cycled,0
  2518  0503  288D               	goto	l3571
  2519  0504  120A  118A  2810   	ljmp	start
  2520  0507                     __end_of_main:	
  2521                           
  2522                           	psect	text1
  2523  0A41                     __ptext1:	
  2524 ;; *************** function _sendByte *****************
  2525 ;; Defined at:
  2526 ;;		line 395 in file "main.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;  byte0           1    wreg     unsigned char 
  2529 ;;  byte1           1   24[BANK0 ] unsigned char 
  2530 ;;  valore          1   25[BANK0 ] unsigned char 
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  byte0           1   29[BANK0 ] unsigned char 
  2533 ;;  i               1   31[BANK0 ] unsigned char 
  2534 ;;  txByte          1   30[BANK0 ] PTR unsigned char 
  2535 ;;		 -> BuildByte@txByte(5), 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2545 ;;      Params:         0       2       0       0       0
  2546 ;;      Locals:         0       3       0       0       0
  2547 ;;      Temps:          0       3       0       0       0
  2548 ;;      Totals:         0       8       0       0       0
  2549 ;;Total ram usage:        8 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    4
  2552 ;; This function calls:
  2553 ;;		_BuildByte
  2554 ;;		_UART_TxChar
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _sendByte
  2562  0A41                     _sendByte:	
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2566                           ;sendByte@byte0 stored from wreg
  2567  0A41  1283               	bcf	3,5	;RP0=0, select bank0
  2568  0A42  1303               	bcf	3,6	;RP1=0, select bank0
  2569  0A43  00BD               	movwf	sendByte@byte0
  2570  0A44                     l3445:	
  2571                           
  2572                           ;main.c: 395: void sendByte(char byte0, char byte1, char valore);main.c: 396: {;main.c: 
      +                          397:     char *txByte;;main.c: 398:     txByte = BuildByte(byte0, byte1, valore);
  2573  0A44  0838               	movf	sendByte@byte1,w
  2574  0A45  00BA               	movwf	??_sendByte
  2575  0A46  083A               	movf	??_sendByte,w
  2576  0A47  00A4               	movwf	BuildByte@byte1
  2577  0A48  0839               	movf	sendByte@valore,w
  2578  0A49  00BB               	movwf	??_sendByte+1
  2579  0A4A  083B               	movf	??_sendByte+1,w
  2580  0A4B  00A5               	movwf	BuildByte@valore
  2581  0A4C  083D               	movf	sendByte@byte0,w
  2582  0A4D  120A  118A  26A1  120A  158A  	fcall	_BuildByte
  2583  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  2584  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  2585  0A54  00BC               	movwf	??_sendByte+2
  2586  0A55  083C               	movf	??_sendByte+2,w
  2587  0A56  00BE               	movwf	sendByte@txByte
  2588  0A57                     l3447:	
  2589                           
  2590                           ;main.c: 400:     for (unsigned char i = 0; i < 5; i++)
  2591  0A57  01BF               	clrf	sendByte@i
  2592  0A58                     l3453:	
  2593                           
  2594                           ;main.c: 401:     {;main.c: 402:         UART_TxChar(*(txByte++));
  2595  0A58  083E               	movf	sendByte@txByte,w
  2596  0A59  0084               	movwf	4
  2597  0A5A  1383               	bcf	3,7	;select IRP bank0
  2598  0A5B  0800               	movf	0,w
  2599  0A5C  120A  118A  27F2  120A  158A  	fcall	_UART_TxChar
  2600  0A61                     l3455:	
  2601  0A61  3001               	movlw	1
  2602  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0A64  00BA               	movwf	??_sendByte
  2605  0A65  083A               	movf	??_sendByte,w
  2606  0A66  07BE               	addwf	sendByte@txByte,f
  2607  0A67                     l3457:	
  2608                           
  2609                           ;main.c: 403:     }
  2610  0A67  3001               	movlw	1
  2611  0A68  00BA               	movwf	??_sendByte
  2612  0A69  083A               	movf	??_sendByte,w
  2613  0A6A  07BF               	addwf	sendByte@i,f
  2614  0A6B                     l3459:	
  2615  0A6B  3005               	movlw	5
  2616  0A6C  023F               	subwf	sendByte@i,w
  2617  0A6D  1C03               	skipc
  2618  0A6E  2A70               	goto	u2861
  2619  0A6F  2A71               	goto	u2860
  2620  0A70                     u2861:	
  2621  0A70  2A58               	goto	l3453
  2622  0A71                     u2860:	
  2623  0A71                     l313:	
  2624  0A71  0008               	return
  2625  0A72                     __end_of_sendByte:	
  2626                           
  2627                           	psect	text2
  2628  07F2                     __ptext2:	
  2629 ;; *************** function _UART_TxChar *****************
  2630 ;; Defined at:
  2631 ;;		line 370 in file "main.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  ch              1    wreg     unsigned char 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  ch              1    4[BANK0 ] unsigned char 
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		wreg
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2645 ;;      Params:         0       0       0       0       0
  2646 ;;      Locals:         0       1       0       0       0
  2647 ;;      Temps:          0       0       0       0       0
  2648 ;;      Totals:         0       1       0       0       0
  2649 ;;Total ram usage:        1 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    3
  2652 ;; This function calls:
  2653 ;;		Nothing
  2654 ;; This function is called by:
  2655 ;;		_sendByte
  2656 ;;		_UART_Write_Text
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           
  2661                           ;psect for function _UART_TxChar
  2662  07F2                     _UART_TxChar:	
  2663                           
  2664                           ;incstack = 0
  2665                           ; Regs used in _UART_TxChar: [wreg]
  2666                           ;UART_TxChar@ch stored from wreg
  2667  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  2668  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  2669  07F4  00A4               	movwf	UART_TxChar@ch
  2670  07F5                     l3135:	
  2671  07F5                     l293:	
  2672                           ;main.c: 373:         ;
  2673                           
  2674                           
  2675                           ;main.c: 372:     while (!TXIF)
  2676  07F5  1E0C               	btfss	12,4	;volatile
  2677  07F6  2FF8               	goto	u2351
  2678  07F7  2FF9               	goto	u2350
  2679  07F8                     u2351:	
  2680  07F8  2FF5               	goto	l293
  2681  07F9                     u2350:	
  2682  07F9                     l295:	
  2683                           
  2684                           ;main.c: 374:     TXIF = 0;
  2685  07F9  120C               	bcf	12,4	;volatile
  2686  07FA                     l3137:	
  2687                           
  2688                           ;main.c: 375:     TXREG = ch;
  2689  07FA  0824               	movf	UART_TxChar@ch,w
  2690  07FB  0099               	movwf	25	;volatile
  2691  07FC                     l296:	
  2692  07FC  0008               	return
  2693  07FD                     __end_of_UART_TxChar:	
  2694                           
  2695                           	psect	text3
  2696  06A1                     __ptext3:	
  2697 ;; *************** function _BuildByte *****************
  2698 ;; Defined at:
  2699 ;;		line 2 in file "./CustomLib/Serial.h"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;  byte0           1    wreg     unsigned char 
  2702 ;;  byte1           1    4[BANK0 ] unsigned char 
  2703 ;;  valore          1    5[BANK0 ] unsigned char 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  byte0           1    8[BANK0 ] unsigned char 
  2706 ;;  y               2   18[BANK0 ] int 
  2707 ;;  y               2   16[BANK0 ] int 
  2708 ;;  i               2   22[BANK0 ] int 
  2709 ;;  i               2   20[BANK0 ] int 
  2710 ;;  txByte          5    9[BANK0 ] unsigned char [5]
  2711 ;;  sommaColumn     1   15[BANK0 ] unsigned char 
  2712 ;;  sommaRow        1   14[BANK0 ] unsigned char 
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  1    wreg      PTR unsigned char 
  2715 ;; Registers used:
  2716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2722 ;;      Params:         0       2       0       0       0
  2723 ;;      Locals:         0      16       0       0       0
  2724 ;;      Temps:          0       2       0       0       0
  2725 ;;      Totals:         0      20       0       0       0
  2726 ;;Total ram usage:       20 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; Hardware stack levels required when called:    3
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_sendByte
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           
  2737                           ;psect for function _BuildByte
  2738  06A1                     _BuildByte:	
  2739                           
  2740                           ;incstack = 0
  2741                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2742                           ;BuildByte@byte0 stored from wreg
  2743  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  2744  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  2745  06A3  00A8               	movwf	BuildByte@byte0
  2746  06A4                     l3053:	
  2747                           
  2748                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2749  06A4  0828               	movf	BuildByte@byte0,w
  2750  06A5  397F               	andlw	127
  2751  06A6  00A6               	movwf	??_BuildByte
  2752  06A7  0826               	movf	??_BuildByte,w
  2753  06A8  00A9               	movwf	BuildByte@txByte
  2754                           
  2755                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2756  06A9  0824               	movf	BuildByte@byte1,w
  2757  06AA  397F               	andlw	127
  2758  06AB  00A6               	movwf	??_BuildByte
  2759  06AC  0826               	movf	??_BuildByte,w
  2760  06AD  00AA               	movwf	BuildByte@txByte+1
  2761                           
  2762                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2763  06AE  0825               	movf	BuildByte@valore,w
  2764  06AF  397F               	andlw	127
  2765  06B0  00A6               	movwf	??_BuildByte
  2766  06B1  0826               	movf	??_BuildByte,w
  2767  06B2  00AB               	movwf	BuildByte@txByte+2
  2768  06B3                     l3055:	
  2769                           
  2770                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2771  06B3  0825               	movf	BuildByte@valore,w
  2772  06B4  00A6               	movwf	??_BuildByte
  2773  06B5  3007               	movlw	7
  2774  06B6                     u2245:	
  2775  06B6  1003               	clrc
  2776  06B7  0CA6               	rrf	??_BuildByte,f
  2777  06B8  3EFF               	addlw	-1
  2778  06B9  1D03               	skipz
  2779  06BA  2EB6               	goto	u2245
  2780  06BB  0826               	movf	??_BuildByte,w
  2781  06BC  397F               	andlw	127
  2782  06BD  00A7               	movwf	??_BuildByte+1
  2783  06BE  0827               	movf	??_BuildByte+1,w
  2784  06BF  00AC               	movwf	BuildByte@txByte+3
  2785  06C0                     l3057:	
  2786                           
  2787                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2788  06C0  01AE               	clrf	BuildByte@sommaRow
  2789  06C1                     l3059:	
  2790                           
  2791                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2792  06C1  01AF               	clrf	BuildByte@sommaColumn
  2793  06C2                     l3061:	
  2794                           
  2795                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2796  06C2  01B4               	clrf	BuildByte@i
  2797  06C3  01B5               	clrf	BuildByte@i+1
  2798  06C4                     l3067:	
  2799                           
  2800                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2801  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  2802  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  2803  06C6  01B0               	clrf	BuildByte@y
  2804  06C7  01B1               	clrf	BuildByte@y+1
  2805  06C8                     l3073:	
  2806                           
  2807                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2808  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  2809  06C9  1303               	bcf	3,6	;RP1=0, select bank0
  2810  06CA  0834               	movf	BuildByte@i,w
  2811  06CB  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2812  06CC  0084               	movwf	4
  2813  06CD  1383               	bcf	3,7	;select IRP bank0
  2814  06CE  0800               	movf	0,w
  2815  06CF  00A6               	movwf	??_BuildByte
  2816  06D0  0A30               	incf	BuildByte@y,w
  2817  06D1  2ED4               	goto	u2254
  2818  06D2                     u2255:	
  2819  06D2  1003               	clrc
  2820  06D3  0CA6               	rrf	??_BuildByte,f
  2821  06D4                     u2254:	
  2822  06D4  3EFF               	addlw	-1
  2823  06D5  1D03               	skipz
  2824  06D6  2ED2               	goto	u2255
  2825  06D7  0826               	movf	??_BuildByte,w
  2826  06D8  3901               	andlw	1
  2827  06D9  00A7               	movwf	??_BuildByte+1
  2828  06DA  0827               	movf	??_BuildByte+1,w
  2829  06DB  07AE               	addwf	BuildByte@sommaRow,f
  2830  06DC                     l3075:	
  2831                           
  2832                           ;./CustomLib/Serial.h: 18:         }
  2833  06DC  3001               	movlw	1
  2834  06DD  07B0               	addwf	BuildByte@y,f
  2835  06DE  1803               	skipnc
  2836  06DF  0AB1               	incf	BuildByte@y+1,f
  2837  06E0  3000               	movlw	0
  2838  06E1  07B1               	addwf	BuildByte@y+1,f
  2839  06E2                     l3077:	
  2840  06E2  0831               	movf	BuildByte@y+1,w
  2841  06E3  3A80               	xorlw	128
  2842  06E4  00FF               	movwf	btemp+1
  2843  06E5  3080               	movlw	128
  2844  06E6  027F               	subwf	btemp+1,w
  2845  06E7  1D03               	skipz
  2846  06E8  2EEB               	goto	u2265
  2847  06E9  3008               	movlw	8
  2848  06EA  0230               	subwf	BuildByte@y,w
  2849  06EB                     u2265:	
  2850  06EB  1C03               	skipc
  2851  06EC  2EEE               	goto	u2261
  2852  06ED  2EEF               	goto	u2260
  2853  06EE                     u2261:	
  2854  06EE  2EC8               	goto	l3073
  2855  06EF                     u2260:	
  2856  06EF                     l105:	
  2857                           
  2858                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  2859  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  2860  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  2861  06F1  1C2E               	btfss	BuildByte@sommaRow,0
  2862  06F2  2EF4               	goto	u2271
  2863  06F3  2EF5               	goto	u2270
  2864  06F4                     u2271:	
  2865  06F4  2EFD               	goto	l3081
  2866  06F5                     u2270:	
  2867  06F5                     l3079:	
  2868                           
  2869                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  2870  06F5  3080               	movlw	128
  2871  06F6  00A6               	movwf	??_BuildByte
  2872  06F7  0834               	movf	BuildByte@i,w
  2873  06F8  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2874  06F9  0084               	movwf	4
  2875  06FA  0826               	movf	??_BuildByte,w
  2876  06FB  1383               	bcf	3,7	;select IRP bank0
  2877  06FC  0780               	addwf	0,f
  2878  06FD                     l3081:	
  2879                           
  2880                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  2881  06FD  01AE               	clrf	BuildByte@sommaRow
  2882  06FE                     l3085:	
  2883                           ;./CustomLib/Serial.h: 23:         }
  2884                           
  2885                           
  2886                           ;./CustomLib/Serial.h: 28:     }
  2887  06FE  3001               	movlw	1
  2888  06FF  07B4               	addwf	BuildByte@i,f
  2889  0700  1803               	skipnc
  2890  0701  0AB5               	incf	BuildByte@i+1,f
  2891  0702  3000               	movlw	0
  2892  0703  07B5               	addwf	BuildByte@i+1,f
  2893  0704                     l3087:	
  2894  0704  0835               	movf	BuildByte@i+1,w
  2895  0705  3A80               	xorlw	128
  2896  0706  00FF               	movwf	btemp+1
  2897  0707  3080               	movlw	128
  2898  0708  027F               	subwf	btemp+1,w
  2899  0709  1D03               	skipz
  2900  070A  2F0D               	goto	u2285
  2901  070B  3004               	movlw	4
  2902  070C  0234               	subwf	BuildByte@i,w
  2903  070D                     u2285:	
  2904  070D  1C03               	skipc
  2905  070E  2F10               	goto	u2281
  2906  070F  2F11               	goto	u2280
  2907  0710                     u2281:	
  2908  0710  2EC4               	goto	l3067
  2909  0711                     u2280:	
  2910  0711                     l3089:	
  2911                           
  2912                           ;./CustomLib/Serial.h: 31:     for (int i = 0; i < 8; i++)
  2913  0711  1283               	bcf	3,5	;RP0=0, select bank0
  2914  0712  1303               	bcf	3,6	;RP1=0, select bank0
  2915  0713  01B6               	clrf	BuildByte@i_341
  2916  0714  01B7               	clrf	BuildByte@i_341+1
  2917  0715                     l3095:	
  2918                           
  2919                           ;./CustomLib/Serial.h: 32:     {;./CustomLib/Serial.h: 33:         for (int y = 0; y < 4
      +                          ; y++)
  2920  0715  1283               	bcf	3,5	;RP0=0, select bank0
  2921  0716  1303               	bcf	3,6	;RP1=0, select bank0
  2922  0717  01B2               	clrf	BuildByte@y_342
  2923  0718  01B3               	clrf	BuildByte@y_342+1
  2924  0719                     l3101:	
  2925                           
  2926                           ;./CustomLib/Serial.h: 35:         {;./CustomLib/Serial.h: 36:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  2927  0719  1283               	bcf	3,5	;RP0=0, select bank0
  2928  071A  1303               	bcf	3,6	;RP1=0, select bank0
  2929  071B  0832               	movf	BuildByte@y_342,w
  2930  071C  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2931  071D  0084               	movwf	4
  2932  071E  1383               	bcf	3,7	;select IRP bank0
  2933  071F  0800               	movf	0,w
  2934  0720  00A6               	movwf	??_BuildByte
  2935  0721  0A36               	incf	BuildByte@i_341,w
  2936  0722  2F25               	goto	u2294
  2937  0723                     u2295:	
  2938  0723  1003               	clrc
  2939  0724  0CA6               	rrf	??_BuildByte,f
  2940  0725                     u2294:	
  2941  0725  3EFF               	addlw	-1
  2942  0726  1D03               	skipz
  2943  0727  2F23               	goto	u2295
  2944  0728  0826               	movf	??_BuildByte,w
  2945  0729  3901               	andlw	1
  2946  072A  00A7               	movwf	??_BuildByte+1
  2947  072B  0827               	movf	??_BuildByte+1,w
  2948  072C  07AF               	addwf	BuildByte@sommaColumn,f
  2949  072D                     l3103:	
  2950                           
  2951                           ;./CustomLib/Serial.h: 37:         }
  2952  072D  3001               	movlw	1
  2953  072E  07B2               	addwf	BuildByte@y_342,f
  2954  072F  1803               	skipnc
  2955  0730  0AB3               	incf	BuildByte@y_342+1,f
  2956  0731  3000               	movlw	0
  2957  0732  07B3               	addwf	BuildByte@y_342+1,f
  2958  0733                     l3105:	
  2959  0733  0833               	movf	BuildByte@y_342+1,w
  2960  0734  3A80               	xorlw	128
  2961  0735  00FF               	movwf	btemp+1
  2962  0736  3080               	movlw	128
  2963  0737  027F               	subwf	btemp+1,w
  2964  0738  1D03               	skipz
  2965  0739  2F3C               	goto	u2305
  2966  073A  3004               	movlw	4
  2967  073B  0232               	subwf	BuildByte@y_342,w
  2968  073C                     u2305:	
  2969  073C  1C03               	skipc
  2970  073D  2F3F               	goto	u2301
  2971  073E  2F40               	goto	u2300
  2972  073F                     u2301:	
  2973  073F  2F19               	goto	l3101
  2974  0740                     u2300:	
  2975  0740                     l111:	
  2976                           
  2977                           ;./CustomLib/Serial.h: 38:         if (sommaColumn % 2 == 1)
  2978  0740  1283               	bcf	3,5	;RP0=0, select bank0
  2979  0741  1303               	bcf	3,6	;RP1=0, select bank0
  2980  0742  1C2F               	btfss	BuildByte@sommaColumn,0
  2981  0743  2F45               	goto	u2311
  2982  0744  2F46               	goto	u2310
  2983  0745                     u2311:	
  2984  0745  2F53               	goto	l3109
  2985  0746                     u2310:	
  2986  0746                     l3107:	
  2987                           
  2988                           ;./CustomLib/Serial.h: 39:         {;./CustomLib/Serial.h: 40:             txByte[4] += 
      +                          0x01 << i;
  2989  0746  3001               	movlw	1
  2990  0747  00A6               	movwf	??_BuildByte
  2991  0748  0A36               	incf	BuildByte@i_341,w
  2992  0749  2F4C               	goto	u2324
  2993  074A                     u2325:	
  2994  074A  1003               	clrc
  2995  074B  0DA6               	rlf	??_BuildByte,f
  2996  074C                     u2324:	
  2997  074C  3EFF               	addlw	-1
  2998  074D  1D03               	skipz
  2999  074E  2F4A               	goto	u2325
  3000  074F  0826               	movf	??_BuildByte,w
  3001  0750  00A7               	movwf	??_BuildByte+1
  3002  0751  0827               	movf	??_BuildByte+1,w
  3003  0752  07AD               	addwf	BuildByte@txByte+4,f
  3004  0753                     l3109:	
  3005                           
  3006                           ;./CustomLib/Serial.h: 41:             sommaColumn = 0;
  3007  0753  01AF               	clrf	BuildByte@sommaColumn
  3008  0754                     l3113:	
  3009                           ;./CustomLib/Serial.h: 42:         }
  3010                           
  3011                           
  3012                           ;./CustomLib/Serial.h: 47:     }
  3013  0754  3001               	movlw	1
  3014  0755  07B6               	addwf	BuildByte@i_341,f
  3015  0756  1803               	skipnc
  3016  0757  0AB7               	incf	BuildByte@i_341+1,f
  3017  0758  3000               	movlw	0
  3018  0759  07B7               	addwf	BuildByte@i_341+1,f
  3019  075A                     l3115:	
  3020  075A  0837               	movf	BuildByte@i_341+1,w
  3021  075B  3A80               	xorlw	128
  3022  075C  00FF               	movwf	btemp+1
  3023  075D  3080               	movlw	128
  3024  075E  027F               	subwf	btemp+1,w
  3025  075F  1D03               	skipz
  3026  0760  2F63               	goto	u2335
  3027  0761  3008               	movlw	8
  3028  0762  0236               	subwf	BuildByte@i_341,w
  3029  0763                     u2335:	
  3030  0763  1C03               	skipc
  3031  0764  2F66               	goto	u2331
  3032  0765  2F67               	goto	u2330
  3033  0766                     u2331:	
  3034  0766  2F15               	goto	l3095
  3035  0767                     u2330:	
  3036  0767                     l3117:	
  3037                           
  3038                           ;./CustomLib/Serial.h: 49:     return txByte;
  3039  0767  3029               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3040  0768                     l114:	
  3041  0768  0008               	return
  3042  0769                     __end_of_BuildByte:	
  3043                           
  3044                           	psect	text4
  3045  0E45                     __ptext4:	
  3046 ;; *************** function _rand *****************
  3047 ;; Defined at:
  3048 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;		None
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;		None
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  2   17[BANK0 ] int 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0, pclath, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3062 ;;      Params:         0       2       0       0       0
  3063 ;;      Locals:         0       0       0       0       0
  3064 ;;      Temps:          0       5       0       0       0
  3065 ;;      Totals:         0       7       0       0       0
  3066 ;;Total ram usage:        7 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    4
  3069 ;; This function calls:
  3070 ;;		___lmul
  3071 ;; This function is called by:
  3072 ;;		_main
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           
  3077                           ;psect for function _rand
  3078  0E45                     _rand:	
  3079  0E45                     l3437:	
  3080                           ;incstack = 0
  3081                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  3082                           
  3083  0E45  1683               	bsf	3,5	;RP0=1, select bank1
  3084  0E46  1303               	bcf	3,6	;RP1=0, select bank1
  3085  0E47  085E               	movf	(_randx+3)^(0+128),w
  3086  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  3087  0E49  1303               	bcf	3,6	;RP1=0, select bank0
  3088  0E4A  00A7               	movwf	___lmul@multiplier+3
  3089  0E4B  1683               	bsf	3,5	;RP0=1, select bank1
  3090  0E4C  1303               	bcf	3,6	;RP1=0, select bank1
  3091  0E4D  085D               	movf	(_randx+2)^(0+128),w
  3092  0E4E  1283               	bcf	3,5	;RP0=0, select bank0
  3093  0E4F  1303               	bcf	3,6	;RP1=0, select bank0
  3094  0E50  00A6               	movwf	___lmul@multiplier+2
  3095  0E51  1683               	bsf	3,5	;RP0=1, select bank1
  3096  0E52  1303               	bcf	3,6	;RP1=0, select bank1
  3097  0E53  085C               	movf	(_randx+1)^(0+128),w
  3098  0E54  1283               	bcf	3,5	;RP0=0, select bank0
  3099  0E55  1303               	bcf	3,6	;RP1=0, select bank0
  3100  0E56  00A5               	movwf	___lmul@multiplier+1
  3101  0E57  1683               	bsf	3,5	;RP0=1, select bank1
  3102  0E58  1303               	bcf	3,6	;RP1=0, select bank1
  3103  0E59  085B               	movf	_randx^(0+128),w
  3104  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  3105  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  3106  0E5C  00A4               	movwf	___lmul@multiplier
  3107  0E5D  3041               	movlw	65
  3108  0E5E  00AB               	movwf	___lmul@multiplicand+3
  3109  0E5F  30C6               	movlw	198
  3110  0E60  00AA               	movwf	___lmul@multiplicand+2
  3111  0E61  304E               	movlw	78
  3112  0E62  00A9               	movwf	___lmul@multiplicand+1
  3113  0E63  306D               	movlw	109
  3114  0E64  00A8               	movwf	___lmul@multiplicand
  3115  0E65  120A  158A  2327  120A  158A  	fcall	___lmul
  3116  0E6A  1283               	bcf	3,5	;RP0=0, select bank0
  3117  0E6B  1303               	bcf	3,6	;RP1=0, select bank0
  3118  0E6C  0827               	movf	?___lmul+3,w
  3119  0E6D  1683               	bsf	3,5	;RP0=1, select bank1
  3120  0E6E  1303               	bcf	3,6	;RP1=0, select bank1
  3121  0E6F  00DE               	movwf	(_randx+3)^(0+128)
  3122  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  3123  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  3124  0E72  0826               	movf	?___lmul+2,w
  3125  0E73  1683               	bsf	3,5	;RP0=1, select bank1
  3126  0E74  1303               	bcf	3,6	;RP1=0, select bank1
  3127  0E75  00DD               	movwf	(_randx+2)^(0+128)
  3128  0E76  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0E77  1303               	bcf	3,6	;RP1=0, select bank0
  3130  0E78  0825               	movf	?___lmul+1,w
  3131  0E79  1683               	bsf	3,5	;RP0=1, select bank1
  3132  0E7A  1303               	bcf	3,6	;RP1=0, select bank1
  3133  0E7B  00DC               	movwf	(_randx+1)^(0+128)
  3134  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3135  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3136  0E7E  0824               	movf	?___lmul,w
  3137  0E7F  1683               	bsf	3,5	;RP0=1, select bank1
  3138  0E80  1303               	bcf	3,6	;RP1=0, select bank1
  3139  0E81  00DB               	movwf	_randx^(0+128)
  3140  0E82                     l3439:	
  3141  0E82  3039               	movlw	57
  3142  0E83  07DB               	addwf	_randx^(0+128),f
  3143  0E84  3030               	movlw	48
  3144  0E85  1803               	skipnc
  3145  0E86  3031               	movlw	49
  3146  0E87  07DC               	addwf	(_randx+1)^(0+128),f
  3147  0E88  3000               	movlw	0
  3148  0E89  1803               	skipnc
  3149  0E8A  3001               	movlw	1
  3150  0E8B  07DD               	addwf	(_randx+2)^(0+128),f
  3151  0E8C  3000               	movlw	0
  3152  0E8D  1803               	skipnc
  3153  0E8E  3001               	movlw	1
  3154  0E8F  07DE               	addwf	(_randx+3)^(0+128),f
  3155  0E90                     l3441:	
  3156  0E90  085B               	movf	_randx^(0+128),w
  3157  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  3158  0E92  1303               	bcf	3,6	;RP1=0, select bank0
  3159  0E93  00B3               	movwf	??_rand
  3160  0E94  1683               	bsf	3,5	;RP0=1, select bank1
  3161  0E95  1303               	bcf	3,6	;RP1=0, select bank1
  3162  0E96  085C               	movf	(_randx+1)^(0+128),w
  3163  0E97  1283               	bcf	3,5	;RP0=0, select bank0
  3164  0E98  1303               	bcf	3,6	;RP1=0, select bank0
  3165  0E99  00B4               	movwf	??_rand+1
  3166  0E9A  1683               	bsf	3,5	;RP0=1, select bank1
  3167  0E9B  1303               	bcf	3,6	;RP1=0, select bank1
  3168  0E9C  085D               	movf	(_randx+2)^(0+128),w
  3169  0E9D  1283               	bcf	3,5	;RP0=0, select bank0
  3170  0E9E  1303               	bcf	3,6	;RP1=0, select bank0
  3171  0E9F  00B5               	movwf	??_rand+2
  3172  0EA0  1683               	bsf	3,5	;RP0=1, select bank1
  3173  0EA1  1303               	bcf	3,6	;RP1=0, select bank1
  3174  0EA2  085E               	movf	(_randx+3)^(0+128),w
  3175  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  3176  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  3177  0EA5  00B6               	movwf	??_rand+3
  3178  0EA6  3010               	movlw	16
  3179  0EA7  00B7               	movwf	??_rand+4
  3180  0EA8                     u2855:	
  3181  0EA8  0D36               	rlf	??_rand+3,w
  3182  0EA9  0CB6               	rrf	??_rand+3,f
  3183  0EAA  0CB5               	rrf	??_rand+2,f
  3184  0EAB  0CB4               	rrf	??_rand+1,f
  3185  0EAC  0CB3               	rrf	??_rand,f
  3186  0EAD                     u2850:	
  3187  0EAD  0BB7               	decfsz	??_rand+4,f
  3188  0EAE  2EA8               	goto	u2855
  3189  0EAF  30FF               	movlw	255
  3190  0EB0  0533               	andwf	??_rand,w
  3191  0EB1  00B1               	movwf	?_rand
  3192  0EB2  307F               	movlw	127
  3193  0EB3  0534               	andwf	??_rand+1,w
  3194  0EB4  00B2               	movwf	?_rand+1
  3195  0EB5                     l905:	
  3196  0EB5  0008               	return
  3197  0EB6                     __end_of_rand:	
  3198                           
  3199                           	psect	text5
  3200  0B27                     __ptext5:	
  3201 ;; *************** function ___lmul *****************
  3202 ;; Defined at:
  3203 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  multiplier      4    4[BANK0 ] unsigned long 
  3206 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;  product         4   13[BANK0 ] unsigned long 
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  4    4[BANK0 ] unsigned long 
  3211 ;; Registers used:
  3212 ;;		wreg, status,2, status,0
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3218 ;;      Params:         0       8       0       0       0
  3219 ;;      Locals:         0       4       0       0       0
  3220 ;;      Temps:          0       1       0       0       0
  3221 ;;      Totals:         0      13       0       0       0
  3222 ;;Total ram usage:       13 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    3
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_rand
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function ___lmul
  3234  0B27                     ___lmul:	
  3235  0B27                     l3171:	
  3236                           ;incstack = 0
  3237                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3238                           
  3239  0B27  3000               	movlw	0
  3240  0B28  1283               	bcf	3,5	;RP0=0, select bank0
  3241  0B29  1303               	bcf	3,6	;RP1=0, select bank0
  3242  0B2A  00B0               	movwf	___lmul@product+3
  3243  0B2B  3000               	movlw	0
  3244  0B2C  00AF               	movwf	___lmul@product+2
  3245  0B2D  3000               	movlw	0
  3246  0B2E  00AE               	movwf	___lmul@product+1
  3247  0B2F  3000               	movlw	0
  3248  0B30  00AD               	movwf	___lmul@product
  3249  0B31                     l3173:	
  3250  0B31  1C24               	btfss	___lmul@multiplier,0
  3251  0B32  2B34               	goto	u2401
  3252  0B33  2B35               	goto	u2400
  3253  0B34                     u2401:	
  3254  0B34  2B4C               	goto	l3177
  3255  0B35                     u2400:	
  3256  0B35                     l3175:	
  3257  0B35  0828               	movf	___lmul@multiplicand,w
  3258  0B36  07AD               	addwf	___lmul@product,f
  3259  0B37  0829               	movf	___lmul@multiplicand+1,w
  3260  0B38  1103               	clrz
  3261  0B39  1803               	skipnc
  3262  0B3A  3E01               	addlw	1
  3263  0B3B  1903               	skipnz
  3264  0B3C  2B3E               	goto	u2411
  3265  0B3D  07AE               	addwf	___lmul@product+1,f
  3266  0B3E                     u2411:	
  3267  0B3E  082A               	movf	___lmul@multiplicand+2,w
  3268  0B3F  1103               	clrz
  3269  0B40  1803               	skipnc
  3270  0B41  3E01               	addlw	1
  3271  0B42  1903               	skipnz
  3272  0B43  2B45               	goto	u2412
  3273  0B44  07AF               	addwf	___lmul@product+2,f
  3274  0B45                     u2412:	
  3275  0B45  082B               	movf	___lmul@multiplicand+3,w
  3276  0B46  1103               	clrz
  3277  0B47  1803               	skipnc
  3278  0B48  3E01               	addlw	1
  3279  0B49  1903               	skipnz
  3280  0B4A  2B4C               	goto	u2413
  3281  0B4B  07B0               	addwf	___lmul@product+3,f
  3282  0B4C                     u2413:	
  3283  0B4C                     l3177:	
  3284  0B4C  3001               	movlw	1
  3285  0B4D  00AC               	movwf	??___lmul
  3286  0B4E                     u2425:	
  3287  0B4E  1003               	clrc
  3288  0B4F  0DA8               	rlf	___lmul@multiplicand,f
  3289  0B50  0DA9               	rlf	___lmul@multiplicand+1,f
  3290  0B51  0DAA               	rlf	___lmul@multiplicand+2,f
  3291  0B52  0DAB               	rlf	___lmul@multiplicand+3,f
  3292  0B53  0BAC               	decfsz	??___lmul,f
  3293  0B54  2B4E               	goto	u2425
  3294  0B55                     l3179:	
  3295  0B55  3001               	movlw	1
  3296  0B56                     u2435:	
  3297  0B56  1003               	clrc
  3298  0B57  0CA7               	rrf	___lmul@multiplier+3,f
  3299  0B58  0CA6               	rrf	___lmul@multiplier+2,f
  3300  0B59  0CA5               	rrf	___lmul@multiplier+1,f
  3301  0B5A  0CA4               	rrf	___lmul@multiplier,f
  3302  0B5B  3EFF               	addlw	-1
  3303  0B5C  1D03               	skipz
  3304  0B5D  2B56               	goto	u2435
  3305  0B5E  0827               	movf	___lmul@multiplier+3,w
  3306  0B5F  0426               	iorwf	___lmul@multiplier+2,w
  3307  0B60  0425               	iorwf	___lmul@multiplier+1,w
  3308  0B61  0424               	iorwf	___lmul@multiplier,w
  3309  0B62  1D03               	skipz
  3310  0B63  2B65               	goto	u2441
  3311  0B64  2B66               	goto	u2440
  3312  0B65                     u2441:	
  3313  0B65  2B31               	goto	l3173
  3314  0B66                     u2440:	
  3315  0B66                     l3181:	
  3316  0B66  0830               	movf	___lmul@product+3,w
  3317  0B67  00A7               	movwf	?___lmul+3
  3318  0B68  082F               	movf	___lmul@product+2,w
  3319  0B69  00A6               	movwf	?___lmul+2
  3320  0B6A  082E               	movf	___lmul@product+1,w
  3321  0B6B  00A5               	movwf	?___lmul+1
  3322  0B6C  082D               	movf	___lmul@product,w
  3323  0B6D  00A4               	movwf	?___lmul
  3324  0B6E                     l469:	
  3325  0B6E  0008               	return
  3326  0B6F                     __end_of___lmul:	
  3327                           
  3328                           	psect	text6
  3329  0A72                     __ptext6:	
  3330 ;; *************** function _map *****************
  3331 ;; Defined at:
  3332 ;;		line 115 in file "./CustomLib/TrafficLight.h"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  x               2   40[BANK0 ] int 
  3335 ;;  in_min          2   42[BANK0 ] int 
  3336 ;;  in_max          2   44[BANK0 ] int 
  3337 ;;  out_min         2   46[BANK0 ] int 
  3338 ;;  out_max         2   48[BANK0 ] int 
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;		None
  3341 ;; Return value:  Size  Location     Type
  3342 ;;                  2   40[BANK0 ] int 
  3343 ;; Registers used:
  3344 ;;		wreg, status,2, status,0, pclath, cstack
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3350 ;;      Params:         0      10       0       0       0
  3351 ;;      Locals:         0       0       0       0       0
  3352 ;;      Temps:          0       0       0       0       0
  3353 ;;      Totals:         0      10       0       0       0
  3354 ;;Total ram usage:       10 bytes
  3355 ;; Hardware stack levels used:    1
  3356 ;; Hardware stack levels required when called:    4
  3357 ;; This function calls:
  3358 ;;		___awdiv
  3359 ;;		___wmul
  3360 ;; This function is called by:
  3361 ;;		_main
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           
  3366                           ;psect for function _map
  3367  0A72                     _map:	
  3368  0A72                     l3415:	
  3369                           ;incstack = 0
  3370                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3371                           
  3372                           
  3373                           ;./CustomLib/TrafficLight.h: 115: int map(int x, int in_min, int in_max, int out_min, in
      +                          t out_max);./CustomLib/TrafficLight.h: 116: {;./CustomLib/TrafficLight.h: 117:     retur
      +                          n (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3374  0A72  1283               	bcf	3,5	;RP0=0, select bank0
  3375  0A73  1303               	bcf	3,6	;RP1=0, select bank0
  3376  0A74  084A               	movf	map@in_min,w
  3377  0A75  024C               	subwf	map@in_max,w
  3378  0A76  00BF               	movwf	___awdiv@divisor
  3379  0A77  084B               	movf	map@in_min+1,w
  3380  0A78  1C03               	skipc
  3381  0A79  0A4B               	incf	map@in_min+1,w
  3382  0A7A  024D               	subwf	map@in_max+1,w
  3383  0A7B  00C0               	movwf	___awdiv@divisor+1
  3384  0A7C  084A               	movf	map@in_min,w
  3385  0A7D  0248               	subwf	map@x,w
  3386  0A7E  00A4               	movwf	___wmul@multiplier
  3387  0A7F  084B               	movf	map@in_min+1,w
  3388  0A80  1C03               	skipc
  3389  0A81  0A4B               	incf	map@in_min+1,w
  3390  0A82  0249               	subwf	map@x+1,w
  3391  0A83  00A5               	movwf	___wmul@multiplier+1
  3392  0A84  084E               	movf	map@out_min,w
  3393  0A85  0250               	subwf	map@out_max,w
  3394  0A86  00A6               	movwf	___wmul@multiplicand
  3395  0A87  084F               	movf	map@out_min+1,w
  3396  0A88  1C03               	skipc
  3397  0A89  0A4F               	incf	map@out_min+1,w
  3398  0A8A  0251               	subwf	map@out_max+1,w
  3399  0A8B  00A7               	movwf	___wmul@multiplicand+1
  3400  0A8C  120A  158A  221A  120A  158A  	fcall	___wmul
  3401  0A91  1283               	bcf	3,5	;RP0=0, select bank0
  3402  0A92  1303               	bcf	3,6	;RP1=0, select bank0
  3403  0A93  0825               	movf	?___wmul+1,w
  3404  0A94  00C2               	movwf	___awdiv@dividend+1
  3405  0A95  0824               	movf	?___wmul,w
  3406  0A96  00C1               	movwf	___awdiv@dividend
  3407  0A97  120A  158A  25DC  120A  158A  	fcall	___awdiv
  3408  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0A9D  1303               	bcf	3,6	;RP1=0, select bank0
  3410  0A9E  084E               	movf	map@out_min,w
  3411  0A9F  073F               	addwf	?___awdiv,w
  3412  0AA0  00C8               	movwf	?_map
  3413  0AA1  084F               	movf	map@out_min+1,w
  3414  0AA2  1803               	skipnc
  3415  0AA3  0A4F               	incf	map@out_min+1,w
  3416  0AA4  0740               	addwf	?___awdiv+1,w
  3417  0AA5  00C9               	movwf	?_map+1
  3418  0AA6                     l162:	
  3419  0AA6  0008               	return
  3420  0AA7                     __end_of_map:	
  3421                           
  3422                           	psect	text7
  3423  0A1A                     __ptext7:	
  3424 ;; *************** function ___wmul *****************
  3425 ;; Defined at:
  3426 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  multiplier      2    4[BANK0 ] unsigned int 
  3429 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  product         2    8[BANK0 ] unsigned int 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  2    4[BANK0 ] unsigned int 
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3441 ;;      Params:         0       4       0       0       0
  3442 ;;      Locals:         0       2       0       0       0
  3443 ;;      Temps:          0       0       0       0       0
  3444 ;;      Totals:         0       6       0       0       0
  3445 ;;Total ram usage:        6 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    3
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_map
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           
  3456                           ;psect for function ___wmul
  3457  0A1A                     ___wmul:	
  3458  0A1A                     l3157:	
  3459                           ;incstack = 0
  3460                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3461                           
  3462  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  3463  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  3464  0A1C  01A8               	clrf	___wmul@product
  3465  0A1D  01A9               	clrf	___wmul@product+1
  3466  0A1E                     l3159:	
  3467  0A1E  1C24               	btfss	___wmul@multiplier,0
  3468  0A1F  2A21               	goto	u2361
  3469  0A20  2A22               	goto	u2360
  3470  0A21                     u2361:	
  3471  0A21  2A28               	goto	l455
  3472  0A22                     u2360:	
  3473  0A22                     l3161:	
  3474  0A22  0826               	movf	___wmul@multiplicand,w
  3475  0A23  07A8               	addwf	___wmul@product,f
  3476  0A24  1803               	skipnc
  3477  0A25  0AA9               	incf	___wmul@product+1,f
  3478  0A26  0827               	movf	___wmul@multiplicand+1,w
  3479  0A27  07A9               	addwf	___wmul@product+1,f
  3480  0A28                     l455:	
  3481  0A28  3001               	movlw	1
  3482  0A29                     u2375:	
  3483  0A29  1003               	clrc
  3484  0A2A  0DA6               	rlf	___wmul@multiplicand,f
  3485  0A2B  0DA7               	rlf	___wmul@multiplicand+1,f
  3486  0A2C  3EFF               	addlw	-1
  3487  0A2D  1D03               	skipz
  3488  0A2E  2A29               	goto	u2375
  3489  0A2F                     l3163:	
  3490  0A2F  3001               	movlw	1
  3491  0A30                     u2385:	
  3492  0A30  1003               	clrc
  3493  0A31  0CA5               	rrf	___wmul@multiplier+1,f
  3494  0A32  0CA4               	rrf	___wmul@multiplier,f
  3495  0A33  3EFF               	addlw	-1
  3496  0A34  1D03               	skipz
  3497  0A35  2A30               	goto	u2385
  3498  0A36                     l3165:	
  3499  0A36  0824               	movf	___wmul@multiplier,w
  3500  0A37  0425               	iorwf	___wmul@multiplier+1,w
  3501  0A38  1D03               	btfss	3,2
  3502  0A39  2A3B               	goto	u2391
  3503  0A3A  2A3C               	goto	u2390
  3504  0A3B                     u2391:	
  3505  0A3B  2A1E               	goto	l3159
  3506  0A3C                     u2390:	
  3507  0A3C                     l3167:	
  3508  0A3C  0829               	movf	___wmul@product+1,w
  3509  0A3D  00A5               	movwf	?___wmul+1
  3510  0A3E  0828               	movf	___wmul@product,w
  3511  0A3F  00A4               	movwf	?___wmul
  3512  0A40                     l457:	
  3513  0A40  0008               	return
  3514  0A41                     __end_of___wmul:	
  3515                           
  3516                           	psect	text8
  3517  0BBB                     __ptext8:	
  3518 ;; *************** function _luciSemaforo *****************
  3519 ;; Defined at:
  3520 ;;		line 427 in file "main.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;  index           1    wreg     unsigned char 
  3523 ;;  lux             1    4[BANK0 ] unsigned char 
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;  index           1    7[BANK0 ] unsigned char 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1    wreg      void 
  3528 ;; Registers used:
  3529 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3535 ;;      Params:         0       1       0       0       0
  3536 ;;      Locals:         0       1       0       0       0
  3537 ;;      Temps:          0       2       0       0       0
  3538 ;;      Totals:         0       4       0       0       0
  3539 ;;Total ram usage:        4 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    3
  3542 ;; This function calls:
  3543 ;;		Nothing
  3544 ;; This function is called by:
  3545 ;;		_main
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           
  3550                           ;psect for function _luciSemaforo
  3551  0BBB                     _luciSemaforo:	
  3552                           
  3553                           ;incstack = 0
  3554                           ; Regs used in _luciSemaforo: [wreg-fsr0h+status,2+status,0]
  3555                           ;luciSemaforo@index stored from wreg
  3556  0BBB  1283               	bcf	3,5	;RP0=0, select bank0
  3557  0BBC  1303               	bcf	3,6	;RP1=0, select bank0
  3558  0BBD  00A7               	movwf	luciSemaforo@index
  3559  0BBE                     l3471:	
  3560                           
  3561                           ;main.c: 427: void luciSemaforo(unsigned char index, unsigned char lux);main.c: 428: {;m
      +                          ain.c: 429:     switch (index)
  3562  0BBE  2BFD               	goto	l3483
  3563  0BBF                     l327:	
  3564                           ;main.c: 433:         {;main.c: 434:         case 0:
  3565                           
  3566                           
  3567                           ;main.c: 435:             PORTCbits.RC1 = 0;
  3568  0BBF  1087               	bcf	7,1	;volatile
  3569                           
  3570                           ;main.c: 436:             PORTCbits.RC2 = 0;
  3571  0BC0  1107               	bcf	7,2	;volatile
  3572                           
  3573                           ;main.c: 437:             PORTCbits.RC0 = 1;
  3574  0BC1  1407               	bsf	7,0	;volatile
  3575                           
  3576                           ;main.c: 438:             break;
  3577  0BC2  2C0D               	goto	l338
  3578  0BC3                     l329:	
  3579                           ;main.c: 439:         case 1:
  3580                           
  3581                           
  3582                           ;main.c: 440:             PORTCbits.RC0 = 0;
  3583  0BC3  1007               	bcf	7,0	;volatile
  3584                           
  3585                           ;main.c: 441:             PORTCbits.RC2 = 0;
  3586  0BC4  1107               	bcf	7,2	;volatile
  3587                           
  3588                           ;main.c: 442:             PORTCbits.RC1 = 1;
  3589  0BC5  1487               	bsf	7,1	;volatile
  3590                           
  3591                           ;main.c: 443:             break;
  3592  0BC6  2C0D               	goto	l338
  3593  0BC7                     l330:	
  3594                           ;main.c: 444:         case 2:
  3595                           
  3596                           
  3597                           ;main.c: 445:             PORTCbits.RC0 = 0;
  3598  0BC7  1007               	bcf	7,0	;volatile
  3599                           
  3600                           ;main.c: 446:             PORTCbits.RC1 = 0;
  3601  0BC8  1087               	bcf	7,1	;volatile
  3602                           
  3603                           ;main.c: 447:             PORTCbits.RC2 = 1;
  3604  0BC9  1507               	bsf	7,2	;volatile
  3605                           
  3606                           ;main.c: 448:             break;
  3607  0BCA  2C0D               	goto	l338
  3608  0BCB                     l3475:	
  3609  0BCB  0824               	movf	luciSemaforo@lux,w
  3610  0BCC  00A5               	movwf	??_luciSemaforo
  3611  0BCD  01A6               	clrf	??_luciSemaforo+1
  3612                           
  3613                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3614                           ; Switch size 1, requested type "simple"
  3615                           ; Number of cases is 1, Range of values is 0 to 0
  3616                           ; switch strategies available:
  3617                           ; Name         Instructions Cycles
  3618                           ; simple_byte            4     3 (average)
  3619                           ; direct_byte           11     8 (fixed)
  3620                           ; jumptable            260     6 (fixed)
  3621                           ;	Chosen strategy is simple_byte
  3622  0BCE  0826               	movf	??_luciSemaforo+1,w
  3623  0BCF  3A00               	xorlw	0	; case 0
  3624  0BD0  1903               	skipnz
  3625  0BD1  2BD3               	goto	l3979
  3626  0BD2  2C0D               	goto	l338
  3627  0BD3                     l3979:	
  3628                           
  3629                           ; Switch size 1, requested type "simple"
  3630                           ; Number of cases is 3, Range of values is 0 to 2
  3631                           ; switch strategies available:
  3632                           ; Name         Instructions Cycles
  3633                           ; simple_byte           10     6 (average)
  3634                           ; direct_byte           17     8 (fixed)
  3635                           ; jumptable            260     6 (fixed)
  3636                           ;	Chosen strategy is simple_byte
  3637  0BD3  0825               	movf	??_luciSemaforo,w
  3638  0BD4  3A00               	xorlw	0	; case 0
  3639  0BD5  1903               	skipnz
  3640  0BD6  2BBF               	goto	l327
  3641  0BD7  3A01               	xorlw	1	; case 1
  3642  0BD8  1903               	skipnz
  3643  0BD9  2BC3               	goto	l329
  3644  0BDA  3A03               	xorlw	3	; case 2
  3645  0BDB  1903               	skipnz
  3646  0BDC  2BC7               	goto	l330
  3647  0BDD  2C0D               	goto	l338
  3648  0BDE                     l334:	
  3649                           ;main.c: 454:         {;main.c: 455:         case 0:
  3650                           
  3651                           
  3652                           ;main.c: 456:             PORTBbits.RB1 = 0;
  3653  0BDE  1086               	bcf	6,1	;volatile
  3654                           
  3655                           ;main.c: 457:             PORTBbits.RB6 = 0;
  3656  0BDF  1306               	bcf	6,6	;volatile
  3657                           
  3658                           ;main.c: 458:             PORTBbits.RB7 = 1;
  3659  0BE0  1786               	bsf	6,7	;volatile
  3660                           
  3661                           ;main.c: 459:             break;
  3662  0BE1  2C0D               	goto	l338
  3663  0BE2                     l336:	
  3664                           ;main.c: 460:         case 1:
  3665                           
  3666                           
  3667                           ;main.c: 461:             PORTBbits.RB7 = 0;
  3668  0BE2  1386               	bcf	6,7	;volatile
  3669                           
  3670                           ;main.c: 462:             PORTBbits.RB6 = 0;
  3671  0BE3  1306               	bcf	6,6	;volatile
  3672                           
  3673                           ;main.c: 463:             PORTBbits.RB1 = 1;
  3674  0BE4  1486               	bsf	6,1	;volatile
  3675                           
  3676                           ;main.c: 464:             break;
  3677  0BE5  2C0D               	goto	l338
  3678  0BE6                     l337:	
  3679                           ;main.c: 465:         case 2:
  3680                           
  3681                           
  3682                           ;main.c: 466:             PORTBbits.RB7 = 0;
  3683  0BE6  1386               	bcf	6,7	;volatile
  3684                           
  3685                           ;main.c: 467:             PORTBbits.RB1 = 0;
  3686  0BE7  1086               	bcf	6,1	;volatile
  3687                           
  3688                           ;main.c: 468:             PORTBbits.RB6 = 1;
  3689  0BE8  1706               	bsf	6,6	;volatile
  3690                           
  3691                           ;main.c: 469:             break;
  3692  0BE9  2C0D               	goto	l338
  3693  0BEA                     l3479:	
  3694  0BEA  0824               	movf	luciSemaforo@lux,w
  3695  0BEB  00A5               	movwf	??_luciSemaforo
  3696  0BEC  01A6               	clrf	??_luciSemaforo+1
  3697                           
  3698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3699                           ; Switch size 1, requested type "simple"
  3700                           ; Number of cases is 1, Range of values is 0 to 0
  3701                           ; switch strategies available:
  3702                           ; Name         Instructions Cycles
  3703                           ; simple_byte            4     3 (average)
  3704                           ; direct_byte           11     8 (fixed)
  3705                           ; jumptable            260     6 (fixed)
  3706                           ;	Chosen strategy is simple_byte
  3707  0BED  0826               	movf	??_luciSemaforo+1,w
  3708  0BEE  3A00               	xorlw	0	; case 0
  3709  0BEF  1903               	skipnz
  3710  0BF0  2BF2               	goto	l3981
  3711  0BF1  2C0D               	goto	l338
  3712  0BF2                     l3981:	
  3713                           
  3714                           ; Switch size 1, requested type "simple"
  3715                           ; Number of cases is 3, Range of values is 0 to 2
  3716                           ; switch strategies available:
  3717                           ; Name         Instructions Cycles
  3718                           ; simple_byte           10     6 (average)
  3719                           ; direct_byte           17     8 (fixed)
  3720                           ; jumptable            260     6 (fixed)
  3721                           ;	Chosen strategy is simple_byte
  3722  0BF2  0825               	movf	??_luciSemaforo,w
  3723  0BF3  3A00               	xorlw	0	; case 0
  3724  0BF4  1903               	skipnz
  3725  0BF5  2BDE               	goto	l334
  3726  0BF6  3A01               	xorlw	1	; case 1
  3727  0BF7  1903               	skipnz
  3728  0BF8  2BE2               	goto	l336
  3729  0BF9  3A03               	xorlw	3	; case 2
  3730  0BFA  1903               	skipnz
  3731  0BFB  2BE6               	goto	l337
  3732  0BFC  2C0D               	goto	l338
  3733  0BFD                     l3483:	
  3734  0BFD  0827               	movf	luciSemaforo@index,w
  3735  0BFE  00A5               	movwf	??_luciSemaforo
  3736  0BFF  01A6               	clrf	??_luciSemaforo+1
  3737                           
  3738                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3739                           ; Switch size 1, requested type "simple"
  3740                           ; Number of cases is 1, Range of values is 0 to 0
  3741                           ; switch strategies available:
  3742                           ; Name         Instructions Cycles
  3743                           ; simple_byte            4     3 (average)
  3744                           ; direct_byte           11     8 (fixed)
  3745                           ; jumptable            260     6 (fixed)
  3746                           ;	Chosen strategy is simple_byte
  3747  0C00  0826               	movf	??_luciSemaforo+1,w
  3748  0C01  3A00               	xorlw	0	; case 0
  3749  0C02  1903               	skipnz
  3750  0C03  2C05               	goto	l3983
  3751  0C04  2C0D               	goto	l338
  3752  0C05                     l3983:	
  3753                           
  3754                           ; Switch size 1, requested type "simple"
  3755                           ; Number of cases is 2, Range of values is 0 to 1
  3756                           ; switch strategies available:
  3757                           ; Name         Instructions Cycles
  3758                           ; simple_byte            7     4 (average)
  3759                           ; direct_byte           14     8 (fixed)
  3760                           ; jumptable            260     6 (fixed)
  3761                           ;	Chosen strategy is simple_byte
  3762  0C05  0825               	movf	??_luciSemaforo,w
  3763  0C06  3A00               	xorlw	0	; case 0
  3764  0C07  1903               	skipnz
  3765  0C08  2BCB               	goto	l3475
  3766  0C09  3A01               	xorlw	1	; case 1
  3767  0C0A  1903               	skipnz
  3768  0C0B  2BEA               	goto	l3479
  3769  0C0C  2C0D               	goto	l338
  3770  0C0D                     l338:	
  3771  0C0D  0008               	return
  3772  0C0E                     __end_of_luciSemaforo:	
  3773                           
  3774                           	psect	text9
  3775  09BA                     __ptext9:	
  3776 ;; *************** function _init_ADC *****************
  3777 ;; Defined at:
  3778 ;;		line 339 in file "main.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;		None
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;		None
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  1    wreg      void 
  3785 ;; Registers used:
  3786 ;;		wreg, status,2
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3792 ;;      Params:         0       0       0       0       0
  3793 ;;      Locals:         0       0       0       0       0
  3794 ;;      Temps:          0       1       0       0       0
  3795 ;;      Totals:         0       1       0       0       0
  3796 ;;Total ram usage:        1 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    3
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           
  3807                           ;psect for function _init_ADC
  3808  09BA                     _init_ADC:	
  3809  09BA                     l3419:	
  3810                           ;incstack = 0
  3811                           ; Regs used in _init_ADC: [wreg+status,2]
  3812                           
  3813                           
  3814                           ;main.c: 341:     TRISA = 0xE3;
  3815  09BA  30E3               	movlw	227
  3816  09BB  1683               	bsf	3,5	;RP0=1, select bank1
  3817  09BC  1303               	bcf	3,6	;RP1=0, select bank1
  3818  09BD  0085               	movwf	5	;volatile
  3819  09BE                     l3421:	
  3820                           
  3821                           ;main.c: 342:     ADCON0 = 0x00;
  3822  09BE  1283               	bcf	3,5	;RP0=0, select bank0
  3823  09BF  1303               	bcf	3,6	;RP1=0, select bank0
  3824  09C0  019F               	clrf	31	;volatile
  3825  09C1                     l3423:	
  3826                           
  3827                           ;main.c: 343:     ADCON1 = 0x80;
  3828  09C1  3080               	movlw	128
  3829  09C2  1683               	bsf	3,5	;RP0=1, select bank1
  3830  09C3  1303               	bcf	3,6	;RP1=0, select bank1
  3831  09C4  009F               	movwf	31	;volatile
  3832  09C5                     l3425:	
  3833                           
  3834                           ;main.c: 344:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3835  09C5  3019               	movlw	25
  3836  09C6  1283               	bcf	3,5	;RP0=0, select bank0
  3837  09C7  1303               	bcf	3,6	;RP1=0, select bank0
  3838  09C8  00A4               	movwf	??_init_ADC
  3839  09C9                     u3157:	
  3840  09C9  0BA4               	decfsz	??_init_ADC,f
  3841  09CA  29C9               	goto	u3157
  3842  09CB  29CC               	nop2
  3843  09CC                     l281:	
  3844  09CC  0008               	return
  3845  09CD                     __end_of_init_ADC:	
  3846                           
  3847                           	psect	text10
  3848  0769                     __ptext10:	
  3849 ;; *************** function _UpdateTimes *****************
  3850 ;; Defined at:
  3851 ;;		line 4 in file "./CustomLib/TrafficLight.h"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  _semafori       1    wreg     PTR PTR struct .
  3854 ;;		 -> Semafori(8), 
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;  _semafori       1   14[BANK0 ] PTR PTR struct .
  3857 ;;		 -> Semafori(8), 
  3858 ;;  i               1   15[BANK0 ] unsigned char 
  3859 ;;  l               1   16[BANK0 ] unsigned char 
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  1    wreg      void 
  3862 ;; Registers used:
  3863 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3869 ;;      Params:         0       0       0       0       0
  3870 ;;      Locals:         0       3       0       0       0
  3871 ;;      Temps:          0      10       0       0       0
  3872 ;;      Totals:         0      13       0       0       0
  3873 ;;Total ram usage:       13 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:    3
  3876 ;; This function calls:
  3877 ;;		Nothing
  3878 ;; This function is called by:
  3879 ;;		_main
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           
  3884                           ;psect for function _UpdateTimes
  3885  0769                     _UpdateTimes:	
  3886                           
  3887                           ;incstack = 0
  3888                           ; Regs used in _UpdateTimes: [wreg-fsr0h+status,2+status,0]
  3889                           ;UpdateTimes@_semafori stored from wreg
  3890  0769  1283               	bcf	3,5	;RP0=0, select bank0
  3891  076A  1303               	bcf	3,6	;RP1=0, select bank0
  3892  076B  00AE               	movwf	UpdateTimes@_semafori
  3893  076C                     l3321:	
  3894                           
  3895                           ;./CustomLib/TrafficLight.h: 4: void UpdateTimes(_Semafori _semafori);./CustomLib/Traffi
      +                          cLight.h: 5: {;./CustomLib/TrafficLight.h: 7:     for (unsigned char l = 0; l < n_semafo
      +                          ri; l++)
  3896  076C  01B0               	clrf	UpdateTimes@l
  3897  076D                     l3327:	
  3898                           
  3899                           ;./CustomLib/TrafficLight.h: 8:     {;./CustomLib/TrafficLight.h: 9:         for (unsign
      +                          ed char i = 0; i < 3; i++)
  3900  076D  01AF               	clrf	UpdateTimes@i
  3901  076E                     l3333:	
  3902                           
  3903                           ;./CustomLib/TrafficLight.h: 10:         {;./CustomLib/TrafficLight.h: 11:             i
      +                          f ((*(_semafori)[l]).times[i] != (*(_semafori)[l]).new_times[i])
  3904  076E  0830               	movf	UpdateTimes@l,w
  3905  076F  072E               	addwf	UpdateTimes@_semafori,w
  3906  0770  00A4               	movwf	??_UpdateTimes
  3907  0771  0824               	movf	??_UpdateTimes,w
  3908  0772  0084               	movwf	4
  3909  0773  082F               	movf	UpdateTimes@i,w
  3910  0774  00A5               	movwf	??_UpdateTimes+1
  3911  0775  0725               	addwf	??_UpdateTimes+1,w
  3912  0776  1383               	bcf	3,7	;select IRP bank0
  3913  0777  0700               	addwf	0,w
  3914  0778  00A6               	movwf	??_UpdateTimes+2
  3915  0779  0826               	movf	??_UpdateTimes+2,w
  3916  077A  3E06               	addlw	6
  3917  077B  0084               	movwf	4
  3918  077C  1783               	bsf	3,7	;select IRP bank2
  3919  077D  0800               	movf	0,w
  3920  077E  00A7               	movwf	??_UpdateTimes+3
  3921  077F  0A84               	incf	4,f
  3922  0780  0800               	movf	0,w
  3923  0781  00A8               	movwf	??_UpdateTimes+4
  3924  0782  0830               	movf	UpdateTimes@l,w
  3925  0783  072E               	addwf	UpdateTimes@_semafori,w
  3926  0784  00A9               	movwf	??_UpdateTimes+5
  3927  0785  0829               	movf	??_UpdateTimes+5,w
  3928  0786  0084               	movwf	4
  3929  0787  082F               	movf	UpdateTimes@i,w
  3930  0788  00AA               	movwf	??_UpdateTimes+6
  3931  0789  072A               	addwf	??_UpdateTimes+6,w
  3932  078A  1383               	bcf	3,7	;select IRP bank0
  3933  078B  0700               	addwf	0,w
  3934  078C  00AB               	movwf	??_UpdateTimes+7
  3935  078D  082B               	movf	??_UpdateTimes+7,w
  3936  078E  0084               	movwf	4
  3937  078F  1783               	bsf	3,7	;select IRP bank2
  3938  0790  0800               	movf	0,w
  3939  0791  00AC               	movwf	??_UpdateTimes+8
  3940  0792  0A84               	incf	4,f
  3941  0793  0800               	movf	0,w
  3942  0794  00AD               	movwf	??_UpdateTimes+9
  3943  0795  0828               	movf	??_UpdateTimes+4,w
  3944  0796  062D               	xorwf	??_UpdateTimes+9,w
  3945  0797  1D03               	skipz
  3946  0798  2F9B               	goto	u2765
  3947  0799  0827               	movf	??_UpdateTimes+3,w
  3948  079A  062C               	xorwf	??_UpdateTimes+8,w
  3949  079B                     u2765:	
  3950  079B  1903               	skipnz
  3951  079C  2F9E               	goto	u2761
  3952  079D  2F9F               	goto	u2760
  3953  079E                     u2761:	
  3954  079E  2FC6               	goto	l3337
  3955  079F                     u2760:	
  3956  079F                     l3335:	
  3957                           
  3958                           ;./CustomLib/TrafficLight.h: 12:             {;./CustomLib/TrafficLight.h: 13:          
      +                                 (*(_semafori)[l]).times[i] = (*(_semafori)[l]).new_times[i];
  3959  079F  0830               	movf	UpdateTimes@l,w
  3960  07A0  072E               	addwf	UpdateTimes@_semafori,w
  3961  07A1  00A4               	movwf	??_UpdateTimes
  3962  07A2  0824               	movf	??_UpdateTimes,w
  3963  07A3  0084               	movwf	4
  3964  07A4  082F               	movf	UpdateTimes@i,w
  3965  07A5  00A5               	movwf	??_UpdateTimes+1
  3966  07A6  0725               	addwf	??_UpdateTimes+1,w
  3967  07A7  1383               	bcf	3,7	;select IRP bank0
  3968  07A8  0700               	addwf	0,w
  3969  07A9  00A6               	movwf	??_UpdateTimes+2
  3970  07AA  0826               	movf	??_UpdateTimes+2,w
  3971  07AB  3E06               	addlw	6
  3972  07AC  0084               	movwf	4
  3973  07AD  1783               	bsf	3,7	;select IRP bank2
  3974  07AE  0800               	movf	0,w
  3975  07AF  00A7               	movwf	??_UpdateTimes+3
  3976  07B0  0A84               	incf	4,f
  3977  07B1  0800               	movf	0,w
  3978  07B2  00A8               	movwf	??_UpdateTimes+4
  3979  07B3  0830               	movf	UpdateTimes@l,w
  3980  07B4  072E               	addwf	UpdateTimes@_semafori,w
  3981  07B5  00A9               	movwf	??_UpdateTimes+5
  3982  07B6  0829               	movf	??_UpdateTimes+5,w
  3983  07B7  0084               	movwf	4
  3984  07B8  082F               	movf	UpdateTimes@i,w
  3985  07B9  00AA               	movwf	??_UpdateTimes+6
  3986  07BA  072A               	addwf	??_UpdateTimes+6,w
  3987  07BB  1383               	bcf	3,7	;select IRP bank0
  3988  07BC  0700               	addwf	0,w
  3989  07BD  00AB               	movwf	??_UpdateTimes+7
  3990  07BE  082B               	movf	??_UpdateTimes+7,w
  3991  07BF  0084               	movwf	4
  3992  07C0  0827               	movf	??_UpdateTimes+3,w
  3993  07C1  1783               	bsf	3,7	;select IRP bank2
  3994  07C2  0080               	movwf	0
  3995  07C3  0A84               	incf	4,f
  3996  07C4  0828               	movf	??_UpdateTimes+4,w
  3997  07C5  0080               	movwf	0
  3998  07C6                     l3337:	
  3999                           
  4000                           ;./CustomLib/TrafficLight.h: 15:         }
  4001  07C6  3001               	movlw	1
  4002  07C7  00A4               	movwf	??_UpdateTimes
  4003  07C8  0824               	movf	??_UpdateTimes,w
  4004  07C9  07AF               	addwf	UpdateTimes@i,f
  4005  07CA                     l3339:	
  4006  07CA  3003               	movlw	3
  4007  07CB  022F               	subwf	UpdateTimes@i,w
  4008  07CC  1C03               	skipc
  4009  07CD  2FCF               	goto	u2771
  4010  07CE  2FD0               	goto	u2770
  4011  07CF                     u2771:	
  4012  07CF  2F6E               	goto	l3333
  4013  07D0                     u2770:	
  4014  07D0                     l3343:	
  4015                           
  4016                           ;./CustomLib/TrafficLight.h: 21:     }
  4017  07D0  3001               	movlw	1
  4018  07D1  00A4               	movwf	??_UpdateTimes
  4019  07D2  0824               	movf	??_UpdateTimes,w
  4020  07D3  07B0               	addwf	UpdateTimes@l,f
  4021  07D4                     l3345:	
  4022  07D4  3008               	movlw	8
  4023  07D5  0230               	subwf	UpdateTimes@l,w
  4024  07D6  1C03               	skipc
  4025  07D7  2FD9               	goto	u2781
  4026  07D8  2FDA               	goto	u2780
  4027  07D9                     u2781:	
  4028  07D9  2F6D               	goto	l3327
  4029  07DA                     u2780:	
  4030  07DA                     l127:	
  4031  07DA  0008               	return
  4032  07DB                     __end_of_UpdateTimes:	
  4033                           
  4034                           	psect	text11
  4035  0AA7                     __ptext11:	
  4036 ;; *************** function _UART_Init *****************
  4037 ;; Defined at:
  4038 ;;		line 358 in file "main.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  baudrate        2   19[BANK0 ] int 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;		None
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      void 
  4045 ;; Registers used:
  4046 ;;		wreg, status,2, status,0, pclath, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4052 ;;      Params:         0       2       0       0       0
  4053 ;;      Locals:         0       0       0       0       0
  4054 ;;      Temps:          0       4       0       0       0
  4055 ;;      Totals:         0       6       0       0       0
  4056 ;;Total ram usage:        6 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:    4
  4059 ;; This function calls:
  4060 ;;		___aldiv
  4061 ;; This function is called by:
  4062 ;;		_main
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function _UART_Init
  4068  0AA7                     _UART_Init:	
  4069  0AA7                     l3427:	
  4070                           ;incstack = 0
  4071                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4072                           
  4073                           
  4074                           ;main.c: 358: void UART_Init(int baudrate);main.c: 359: {;main.c: 360:     TRISCbits.TRI
      +                          SC6 = 0;
  4075  0AA7  1683               	bsf	3,5	;RP0=1, select bank1
  4076  0AA8  1303               	bcf	3,6	;RP1=0, select bank1
  4077  0AA9  1307               	bcf	7,6	;volatile
  4078                           
  4079                           ;main.c: 361:     TXSTAbits.TXEN = 1;
  4080  0AAA  1698               	bsf	24,5	;volatile
  4081                           
  4082                           ;main.c: 362:     RCSTAbits.SPEN = 1;
  4083  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  4084  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  4085  0AAD  1798               	bsf	24,7	;volatile
  4086                           
  4087                           ;main.c: 363:     RCSTAbits.CREN = 1;
  4088  0AAE  1618               	bsf	24,4	;volatile
  4089  0AAF                     l3429:	
  4090                           
  4091                           ;main.c: 364:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4092  0AAF  0833               	movf	UART_Init@baudrate,w
  4093  0AB0  00B5               	movwf	??_UART_Init
  4094  0AB1  0834               	movf	UART_Init@baudrate+1,w
  4095  0AB2  00B6               	movwf	??_UART_Init+1
  4096  0AB3  3000               	movlw	0
  4097  0AB4  1BB6               	btfsc	??_UART_Init+1,7
  4098  0AB5  30FF               	movlw	255
  4099  0AB6  00B7               	movwf	??_UART_Init+2
  4100  0AB7  00B8               	movwf	??_UART_Init+3
  4101  0AB8  3006               	movlw	6
  4102  0AB9                     u2845:	
  4103  0AB9  1003               	clrc
  4104  0ABA  0DB5               	rlf	??_UART_Init,f
  4105  0ABB  0DB6               	rlf	??_UART_Init+1,f
  4106  0ABC  0DB7               	rlf	??_UART_Init+2,f
  4107  0ABD  0DB8               	rlf	??_UART_Init+3,f
  4108  0ABE                     u2840:	
  4109  0ABE  3EFF               	addlw	-1
  4110  0ABF  1D03               	skipz
  4111  0AC0  2AB9               	goto	u2845
  4112  0AC1  0838               	movf	??_UART_Init+3,w
  4113  0AC2  00A7               	movwf	___aldiv@divisor+3
  4114  0AC3  0837               	movf	??_UART_Init+2,w
  4115  0AC4  00A6               	movwf	___aldiv@divisor+2
  4116  0AC5  0836               	movf	??_UART_Init+1,w
  4117  0AC6  00A5               	movwf	___aldiv@divisor+1
  4118  0AC7  0835               	movf	??_UART_Init,w
  4119  0AC8  00A4               	movwf	___aldiv@divisor
  4120  0AC9  3001               	movlw	1
  4121  0ACA  00AB               	movwf	___aldiv@dividend+3
  4122  0ACB  30E8               	movlw	232
  4123  0ACC  00AA               	movwf	___aldiv@dividend+2
  4124  0ACD  3048               	movlw	72
  4125  0ACE  00A9               	movwf	___aldiv@dividend+1
  4126  0ACF  3000               	movlw	0
  4127  0AD0  00A8               	movwf	___aldiv@dividend
  4128  0AD1  120A  158A  26B6  120A  158A  	fcall	___aldiv
  4129  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
  4130  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
  4131  0AD8  0824               	movf	?___aldiv,w
  4132  0AD9  3EFF               	addlw	255
  4133  0ADA  1683               	bsf	3,5	;RP0=1, select bank1
  4134  0ADB  1303               	bcf	3,6	;RP1=0, select bank1
  4135  0ADC  0099               	movwf	25	;volatile
  4136  0ADD                     l3431:	
  4137                           
  4138                           ;main.c: 365:     INTCONbits.GIE = 1;
  4139  0ADD  178B               	bsf	11,7	;volatile
  4140  0ADE                     l3433:	
  4141                           
  4142                           ;main.c: 366:     INTCONbits.PEIE = 1;
  4143  0ADE  170B               	bsf	11,6	;volatile
  4144  0ADF                     l3435:	
  4145                           
  4146                           ;main.c: 367:     PIE1bits.RCIE = 1;
  4147  0ADF  168C               	bsf	12,5	;volatile
  4148  0AE0                     l290:	
  4149  0AE0  0008               	return
  4150  0AE1                     __end_of_UART_Init:	
  4151                           
  4152                           	psect	text12
  4153  0EB6                     __ptext12:	
  4154 ;; *************** function ___aldiv *****************
  4155 ;; Defined at:
  4156 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;  divisor         4    4[BANK0 ] long 
  4159 ;;  dividend        4    8[BANK0 ] long 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  quotient        4   15[BANK0 ] long 
  4162 ;;  sign            1   14[BANK0 ] unsigned char 
  4163 ;;  counter         1   13[BANK0 ] unsigned char 
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  4    4[BANK0 ] long 
  4166 ;; Registers used:
  4167 ;;		wreg, status,2, status,0
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4173 ;;      Params:         0       8       0       0       0
  4174 ;;      Locals:         0       6       0       0       0
  4175 ;;      Temps:          0       1       0       0       0
  4176 ;;      Totals:         0      15       0       0       0
  4177 ;;Total ram usage:       15 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    3
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_UART_Init
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           
  4188                           ;psect for function ___aldiv
  4189  0EB6                     ___aldiv:	
  4190  0EB6                     l3199:	
  4191                           ;incstack = 0
  4192                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4193                           
  4194  0EB6  1283               	bcf	3,5	;RP0=0, select bank0
  4195  0EB7  1303               	bcf	3,6	;RP1=0, select bank0
  4196  0EB8  01AE               	clrf	___aldiv@sign
  4197  0EB9                     l3201:	
  4198  0EB9  1FA7               	btfss	___aldiv@divisor+3,7
  4199  0EBA  2EBC               	goto	u2471
  4200  0EBB  2EBD               	goto	u2470
  4201  0EBC                     u2471:	
  4202  0EBC  2ECA               	goto	l520
  4203  0EBD                     u2470:	
  4204  0EBD                     l3203:	
  4205  0EBD  09A4               	comf	___aldiv@divisor,f
  4206  0EBE  09A5               	comf	___aldiv@divisor+1,f
  4207  0EBF  09A6               	comf	___aldiv@divisor+2,f
  4208  0EC0  09A7               	comf	___aldiv@divisor+3,f
  4209  0EC1  0AA4               	incf	___aldiv@divisor,f
  4210  0EC2  1903               	skipnz
  4211  0EC3  0AA5               	incf	___aldiv@divisor+1,f
  4212  0EC4  1903               	skipnz
  4213  0EC5  0AA6               	incf	___aldiv@divisor+2,f
  4214  0EC6  1903               	skipnz
  4215  0EC7  0AA7               	incf	___aldiv@divisor+3,f
  4216  0EC8  01AE               	clrf	___aldiv@sign
  4217  0EC9  0AAE               	incf	___aldiv@sign,f
  4218  0ECA                     l520:	
  4219  0ECA  1FAB               	btfss	___aldiv@dividend+3,7
  4220  0ECB  2ECD               	goto	u2481
  4221  0ECC  2ECE               	goto	u2480
  4222  0ECD                     u2481:	
  4223  0ECD  2EDD               	goto	l3209
  4224  0ECE                     u2480:	
  4225  0ECE                     l3205:	
  4226  0ECE  09A8               	comf	___aldiv@dividend,f
  4227  0ECF  09A9               	comf	___aldiv@dividend+1,f
  4228  0ED0  09AA               	comf	___aldiv@dividend+2,f
  4229  0ED1  09AB               	comf	___aldiv@dividend+3,f
  4230  0ED2  0AA8               	incf	___aldiv@dividend,f
  4231  0ED3  1903               	skipnz
  4232  0ED4  0AA9               	incf	___aldiv@dividend+1,f
  4233  0ED5  1903               	skipnz
  4234  0ED6  0AAA               	incf	___aldiv@dividend+2,f
  4235  0ED7  1903               	skipnz
  4236  0ED8  0AAB               	incf	___aldiv@dividend+3,f
  4237  0ED9                     l3207:	
  4238  0ED9  3001               	movlw	1
  4239  0EDA  00AC               	movwf	??___aldiv
  4240  0EDB  082C               	movf	??___aldiv,w
  4241  0EDC  06AE               	xorwf	___aldiv@sign,f
  4242  0EDD                     l3209:	
  4243  0EDD  3000               	movlw	0
  4244  0EDE  00B2               	movwf	___aldiv@quotient+3
  4245  0EDF  3000               	movlw	0
  4246  0EE0  00B1               	movwf	___aldiv@quotient+2
  4247  0EE1  3000               	movlw	0
  4248  0EE2  00B0               	movwf	___aldiv@quotient+1
  4249  0EE3  3000               	movlw	0
  4250  0EE4  00AF               	movwf	___aldiv@quotient
  4251  0EE5                     l3211:	
  4252  0EE5  0827               	movf	___aldiv@divisor+3,w
  4253  0EE6  0426               	iorwf	___aldiv@divisor+2,w
  4254  0EE7  0425               	iorwf	___aldiv@divisor+1,w
  4255  0EE8  0424               	iorwf	___aldiv@divisor,w
  4256  0EE9  1903               	skipnz
  4257  0EEA  2EEC               	goto	u2491
  4258  0EEB  2EED               	goto	u2490
  4259  0EEC                     u2491:	
  4260  0EEC  2F3A               	goto	l3231
  4261  0EED                     u2490:	
  4262  0EED                     l3213:	
  4263  0EED  01AD               	clrf	___aldiv@counter
  4264  0EEE  0AAD               	incf	___aldiv@counter,f
  4265  0EEF  2EFD               	goto	l3217
  4266  0EF0                     l3215:	
  4267  0EF0  3001               	movlw	1
  4268  0EF1  00AC               	movwf	??___aldiv
  4269  0EF2                     u2505:	
  4270  0EF2  1003               	clrc
  4271  0EF3  0DA4               	rlf	___aldiv@divisor,f
  4272  0EF4  0DA5               	rlf	___aldiv@divisor+1,f
  4273  0EF5  0DA6               	rlf	___aldiv@divisor+2,f
  4274  0EF6  0DA7               	rlf	___aldiv@divisor+3,f
  4275  0EF7  0BAC               	decfsz	??___aldiv,f
  4276  0EF8  2EF2               	goto	u2505
  4277  0EF9  3001               	movlw	1
  4278  0EFA  00AC               	movwf	??___aldiv
  4279  0EFB  082C               	movf	??___aldiv,w
  4280  0EFC  07AD               	addwf	___aldiv@counter,f
  4281  0EFD                     l3217:	
  4282  0EFD  1FA7               	btfss	___aldiv@divisor+3,7
  4283  0EFE  2F00               	goto	u2511
  4284  0EFF  2F01               	goto	u2510
  4285  0F00                     u2511:	
  4286  0F00  2EF0               	goto	l3215
  4287  0F01                     u2510:	
  4288  0F01                     l3219:	
  4289  0F01  3001               	movlw	1
  4290  0F02  00AC               	movwf	??___aldiv
  4291  0F03                     u2525:	
  4292  0F03  1003               	clrc
  4293  0F04  0DAF               	rlf	___aldiv@quotient,f
  4294  0F05  0DB0               	rlf	___aldiv@quotient+1,f
  4295  0F06  0DB1               	rlf	___aldiv@quotient+2,f
  4296  0F07  0DB2               	rlf	___aldiv@quotient+3,f
  4297  0F08  0BAC               	decfsz	??___aldiv,f
  4298  0F09  2F03               	goto	u2525
  4299  0F0A                     l3221:	
  4300  0F0A  0827               	movf	___aldiv@divisor+3,w
  4301  0F0B  022B               	subwf	___aldiv@dividend+3,w
  4302  0F0C  1D03               	skipz
  4303  0F0D  2F18               	goto	u2535
  4304  0F0E  0826               	movf	___aldiv@divisor+2,w
  4305  0F0F  022A               	subwf	___aldiv@dividend+2,w
  4306  0F10  1D03               	skipz
  4307  0F11  2F18               	goto	u2535
  4308  0F12  0825               	movf	___aldiv@divisor+1,w
  4309  0F13  0229               	subwf	___aldiv@dividend+1,w
  4310  0F14  1D03               	skipz
  4311  0F15  2F18               	goto	u2535
  4312  0F16  0824               	movf	___aldiv@divisor,w
  4313  0F17  0228               	subwf	___aldiv@dividend,w
  4314  0F18                     u2535:	
  4315  0F18  1C03               	skipc
  4316  0F19  2F1B               	goto	u2531
  4317  0F1A  2F1C               	goto	u2530
  4318  0F1B                     u2531:	
  4319  0F1B  2F2B               	goto	l3227
  4320  0F1C                     u2530:	
  4321  0F1C                     l3223:	
  4322  0F1C  0824               	movf	___aldiv@divisor,w
  4323  0F1D  02A8               	subwf	___aldiv@dividend,f
  4324  0F1E  0825               	movf	___aldiv@divisor+1,w
  4325  0F1F  1C03               	skipc
  4326  0F20  0F25               	incfsz	___aldiv@divisor+1,w
  4327  0F21  02A9               	subwf	___aldiv@dividend+1,f
  4328  0F22  0826               	movf	___aldiv@divisor+2,w
  4329  0F23  1C03               	skipc
  4330  0F24  0F26               	incfsz	___aldiv@divisor+2,w
  4331  0F25  02AA               	subwf	___aldiv@dividend+2,f
  4332  0F26  0827               	movf	___aldiv@divisor+3,w
  4333  0F27  1C03               	skipc
  4334  0F28  0F27               	incfsz	___aldiv@divisor+3,w
  4335  0F29  02AB               	subwf	___aldiv@dividend+3,f
  4336  0F2A                     l3225:	
  4337  0F2A  142F               	bsf	___aldiv@quotient,0
  4338  0F2B                     l3227:	
  4339  0F2B  3001               	movlw	1
  4340  0F2C                     u2545:	
  4341  0F2C  1003               	clrc
  4342  0F2D  0CA7               	rrf	___aldiv@divisor+3,f
  4343  0F2E  0CA6               	rrf	___aldiv@divisor+2,f
  4344  0F2F  0CA5               	rrf	___aldiv@divisor+1,f
  4345  0F30  0CA4               	rrf	___aldiv@divisor,f
  4346  0F31  3EFF               	addlw	-1
  4347  0F32  1D03               	skipz
  4348  0F33  2F2C               	goto	u2545
  4349  0F34                     l3229:	
  4350  0F34  3001               	movlw	1
  4351  0F35  02AD               	subwf	___aldiv@counter,f
  4352  0F36  1D03               	btfss	3,2
  4353  0F37  2F39               	goto	u2551
  4354  0F38  2F3A               	goto	u2550
  4355  0F39                     u2551:	
  4356  0F39  2F01               	goto	l3219
  4357  0F3A                     u2550:	
  4358  0F3A                     l3231:	
  4359  0F3A  082E               	movf	___aldiv@sign,w
  4360  0F3B  1903               	btfsc	3,2
  4361  0F3C  2F3E               	goto	u2561
  4362  0F3D  2F3F               	goto	u2560
  4363  0F3E                     u2561:	
  4364  0F3E  2F4A               	goto	l3235
  4365  0F3F                     u2560:	
  4366  0F3F                     l3233:	
  4367  0F3F  09AF               	comf	___aldiv@quotient,f
  4368  0F40  09B0               	comf	___aldiv@quotient+1,f
  4369  0F41  09B1               	comf	___aldiv@quotient+2,f
  4370  0F42  09B2               	comf	___aldiv@quotient+3,f
  4371  0F43  0AAF               	incf	___aldiv@quotient,f
  4372  0F44  1903               	skipnz
  4373  0F45  0AB0               	incf	___aldiv@quotient+1,f
  4374  0F46  1903               	skipnz
  4375  0F47  0AB1               	incf	___aldiv@quotient+2,f
  4376  0F48  1903               	skipnz
  4377  0F49  0AB2               	incf	___aldiv@quotient+3,f
  4378  0F4A                     l3235:	
  4379  0F4A  0832               	movf	___aldiv@quotient+3,w
  4380  0F4B  00A7               	movwf	?___aldiv+3
  4381  0F4C  0831               	movf	___aldiv@quotient+2,w
  4382  0F4D  00A6               	movwf	?___aldiv+2
  4383  0F4E  0830               	movf	___aldiv@quotient+1,w
  4384  0F4F  00A5               	movwf	?___aldiv+1
  4385  0F50  082F               	movf	___aldiv@quotient,w
  4386  0F51  00A4               	movwf	?___aldiv
  4387  0F52                     l530:	
  4388  0F52  0008               	return
  4389  0F53                     __end_of___aldiv:	
  4390                           
  4391                           	psect	text13
  4392  0F53                     __ptext13:	
  4393 ;; *************** function _ShowDigitsOnDisplay *****************
  4394 ;; Defined at:
  4395 ;;		line 500 in file "main.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;		None
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  display_inde    1   33[BANK0 ] unsigned char 
  4400 ;; Return value:  Size  Location     Type
  4401 ;;                  1    wreg      void 
  4402 ;; Registers used:
  4403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4409 ;;      Params:         0       0       0       0       0
  4410 ;;      Locals:         0       1       0       0       0
  4411 ;;      Temps:          0       2       0       0       0
  4412 ;;      Totals:         0       3       0       0       0
  4413 ;;Total ram usage:        3 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    4
  4416 ;; This function calls:
  4417 ;;		_SetDisplay
  4418 ;;		___awmod
  4419 ;; This function is called by:
  4420 ;;		_main
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function _ShowDigitsOnDisplay
  4426  0F53                     _ShowDigitsOnDisplay:	
  4427  0F53                     l3503:	
  4428                           ;incstack = 0
  4429                           ; Regs used in _ShowDigitsOnDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4430                           
  4431                           
  4432                           ;main.c: 502:     for (unsigned char display_index = 0; display_index < n_semafori; disp
      +                          lay_index++)
  4433  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  4434  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  4435  0F55  01C1               	clrf	ShowDigitsOnDisplay@display_index
  4436  0F56  2FCA               	goto	l3523
  4437  0F57                     l3509:	
  4438                           
  4439                           ;main.c: 507:             if ((*DigitsArr[display_index]).centinaia > 0)
  4440  0F57  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4441  0F58  3EDF               	addlw	(low (_DigitsArr| 0))& (0+255)
  4442  0F59  0084               	movwf	4
  4443  0F5A  1383               	bcf	3,7	;select IRP bank1
  4444  0F5B  0800               	movf	0,w
  4445  0F5C  0084               	movwf	4
  4446  0F5D  0800               	movf	0,w
  4447  0F5E  1903               	btfsc	3,2
  4448  0F5F  2F61               	goto	u2891
  4449  0F60  2F62               	goto	u2890
  4450  0F61                     u2891:	
  4451  0F61  2FDD               	goto	l3525
  4452  0F62                     u2890:	
  4453  0F62                     l3511:	
  4454                           
  4455                           ;main.c: 508:             {;main.c: 509:                 SetDisplay(display_index, 1, 0,
      +                           0, display[(*DigitsArr[display_index]).centinaia]);
  4456  0F62  01A4               	clrf	SetDisplay@d1
  4457  0F63  0AA4               	incf	SetDisplay@d1,f
  4458  0F64  01A5               	clrf	SetDisplay@d2
  4459  0F65  01A6               	clrf	SetDisplay@d3
  4460  0F66  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4461  0F67  3EDF               	addlw	(low (_DigitsArr| 0))& (0+255)
  4462  0F68  0084               	movwf	4
  4463  0F69  0800               	movf	0,w
  4464  0F6A  0084               	movwf	4
  4465  0F6B  0800               	movf	0,w
  4466  0F6C  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4467  0F6D  0084               	movwf	4
  4468  0F6E  120A  158A  2000  120A  158A  	fcall	stringdir
  4469  0F73  00BF               	movwf	??_ShowDigitsOnDisplay
  4470  0F74  083F               	movf	??_ShowDigitsOnDisplay,w
  4471  0F75  00A7               	movwf	SetDisplay@value
  4472  0F76  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4473  0F77  120A  158A  240E  120A  158A  	fcall	_SetDisplay
  4474  0F7C  2FDD               	goto	l3525
  4475  0F7D                     l3513:	
  4476                           
  4477                           ;main.c: 513:             if ((*DigitsArr[display_index]).decine > 0 || (*DigitsArr[disp
      +                          lay_index]).centinaia > 0)
  4478  0F7D  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4479  0F7E  3EDF               	addlw	(low (_DigitsArr| 0))& (0+255)
  4480  0F7F  0084               	movwf	4
  4481  0F80  1383               	bcf	3,7	;select IRP bank1
  4482  0F81  0A00               	incf	0,w
  4483  0F82  0084               	movwf	4
  4484  0F83  0800               	movf	0,w
  4485  0F84  1D03               	btfss	3,2
  4486  0F85  2F87               	goto	u2901
  4487  0F86  2F88               	goto	u2900
  4488  0F87                     u2901:	
  4489  0F87  2F92               	goto	l3517
  4490  0F88                     u2900:	
  4491  0F88                     l3515:	
  4492  0F88  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4493  0F89  3EDF               	addlw	(low (_DigitsArr| 0))& (0+255)
  4494  0F8A  0084               	movwf	4
  4495  0F8B  0800               	movf	0,w
  4496  0F8C  0084               	movwf	4
  4497  0F8D  0800               	movf	0,w
  4498  0F8E  1903               	btfsc	3,2
  4499  0F8F  2F91               	goto	u2911
  4500  0F90  2F92               	goto	u2910
  4501  0F91                     u2911:	
  4502  0F91  2FDD               	goto	l3525
  4503  0F92                     u2910:	
  4504  0F92                     l3517:	
  4505                           
  4506                           ;main.c: 514:             {;main.c: 515:                 SetDisplay(display_index, 0, 1,
      +                           0, display[(*DigitsArr[display_index]).decine]);
  4507  0F92  01A4               	clrf	SetDisplay@d1
  4508  0F93  01A5               	clrf	SetDisplay@d2
  4509  0F94  0AA5               	incf	SetDisplay@d2,f
  4510  0F95  01A6               	clrf	SetDisplay@d3
  4511  0F96  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4512  0F97  3EDF               	addlw	(low (_DigitsArr| 0))& (0+255)
  4513  0F98  0084               	movwf	4
  4514  0F99  0A00               	incf	0,w
  4515  0F9A  0084               	movwf	4
  4516  0F9B  0800               	movf	0,w
  4517  0F9C  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4518  0F9D  0084               	movwf	4
  4519  0F9E  120A  158A  2000  120A  158A  	fcall	stringdir
  4520  0FA3  00BF               	movwf	??_ShowDigitsOnDisplay
  4521  0FA4  083F               	movf	??_ShowDigitsOnDisplay,w
  4522  0FA5  00A7               	movwf	SetDisplay@value
  4523  0FA6  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4524  0FA7  120A  158A  240E  120A  158A  	fcall	_SetDisplay
  4525  0FAC  2FDD               	goto	l3525
  4526  0FAD                     l3519:	
  4527                           
  4528                           ;main.c: 519:             SetDisplay(display_index, 0, 0, 1, display[(*DigitsArr[display
      +                          _index]).unita]);
  4529  0FAD  01A4               	clrf	SetDisplay@d1
  4530  0FAE  01A5               	clrf	SetDisplay@d2
  4531  0FAF  01A6               	clrf	SetDisplay@d3
  4532  0FB0  0AA6               	incf	SetDisplay@d3,f
  4533  0FB1  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4534  0FB2  3EDF               	addlw	(low (_DigitsArr| 0))& (0+255)
  4535  0FB3  0084               	movwf	4
  4536  0FB4  1383               	bcf	3,7	;select IRP bank1
  4537  0FB5  0800               	movf	0,w
  4538  0FB6  3E02               	addlw	2
  4539  0FB7  0084               	movwf	4
  4540  0FB8  0800               	movf	0,w
  4541  0FB9  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4542  0FBA  0084               	movwf	4
  4543  0FBB  120A  158A  2000  120A  158A  	fcall	stringdir
  4544  0FC0  00BF               	movwf	??_ShowDigitsOnDisplay
  4545  0FC1  083F               	movf	??_ShowDigitsOnDisplay,w
  4546  0FC2  00A7               	movwf	SetDisplay@value
  4547  0FC3  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4548  0FC4  120A  158A  240E  120A  158A  	fcall	_SetDisplay
  4549                           
  4550                           ;main.c: 520:             break;
  4551  0FC9  2FDD               	goto	l3525
  4552  0FCA                     l3523:	
  4553  0FCA  0860               	movf	_disp,w
  4554  0FCB  00BF               	movwf	??_ShowDigitsOnDisplay
  4555  0FCC  01C0               	clrf	??_ShowDigitsOnDisplay+1
  4556                           
  4557                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4558                           ; Switch size 1, requested type "simple"
  4559                           ; Number of cases is 1, Range of values is 0 to 0
  4560                           ; switch strategies available:
  4561                           ; Name         Instructions Cycles
  4562                           ; simple_byte            4     3 (average)
  4563                           ; direct_byte           11     8 (fixed)
  4564                           ; jumptable            260     6 (fixed)
  4565                           ;	Chosen strategy is simple_byte
  4566  0FCD  0840               	movf	??_ShowDigitsOnDisplay+1,w
  4567  0FCE  3A00               	xorlw	0	; case 0
  4568  0FCF  1903               	skipnz
  4569  0FD0  2FD2               	goto	l3985
  4570  0FD1  2FDD               	goto	l3525
  4571  0FD2                     l3985:	
  4572                           
  4573                           ; Switch size 1, requested type "simple"
  4574                           ; Number of cases is 3, Range of values is 0 to 2
  4575                           ; switch strategies available:
  4576                           ; Name         Instructions Cycles
  4577                           ; simple_byte           10     6 (average)
  4578                           ; direct_byte           17     8 (fixed)
  4579                           ; jumptable            260     6 (fixed)
  4580                           ;	Chosen strategy is simple_byte
  4581  0FD2  083F               	movf	??_ShowDigitsOnDisplay,w
  4582  0FD3  3A00               	xorlw	0	; case 0
  4583  0FD4  1903               	skipnz
  4584  0FD5  2F57               	goto	l3509
  4585  0FD6  3A01               	xorlw	1	; case 1
  4586  0FD7  1903               	skipnz
  4587  0FD8  2F7D               	goto	l3513
  4588  0FD9  3A03               	xorlw	3	; case 2
  4589  0FDA  1903               	skipnz
  4590  0FDB  2FAD               	goto	l3519
  4591  0FDC  2FDD               	goto	l3525
  4592  0FDD                     l3525:	
  4593                           
  4594                           ;main.c: 522:     }
  4595  0FDD  3001               	movlw	1
  4596  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  4597  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  4598  0FE0  00BF               	movwf	??_ShowDigitsOnDisplay
  4599  0FE1  083F               	movf	??_ShowDigitsOnDisplay,w
  4600  0FE2  07C1               	addwf	ShowDigitsOnDisplay@display_index,f
  4601  0FE3                     l3527:	
  4602  0FE3  3008               	movlw	8
  4603  0FE4  0241               	subwf	ShowDigitsOnDisplay@display_index,w
  4604  0FE5  1C03               	skipc
  4605  0FE6  2FE8               	goto	u2921
  4606  0FE7  2FE9               	goto	u2920
  4607  0FE8                     u2921:	
  4608  0FE8  2FCA               	goto	l3523
  4609  0FE9                     u2920:	
  4610  0FE9                     l3529:	
  4611                           
  4612                           ;main.c: 523:     disp = (disp + 1) % 3;
  4613  0FE9  3003               	movlw	3
  4614  0FEA  00B8               	movwf	___awmod@divisor
  4615  0FEB  3000               	movlw	0
  4616  0FEC  00B9               	movwf	___awmod@divisor+1
  4617  0FED  0860               	movf	_disp,w
  4618  0FEE  3E01               	addlw	1
  4619  0FEF  00BA               	movwf	___awmod@dividend
  4620  0FF0  3000               	movlw	0
  4621  0FF1  1803               	skipnc
  4622  0FF2  3001               	movlw	1
  4623  0FF3  00BB               	movwf	___awmod@dividend+1
  4624  0FF4  120A  158A  24BB  120A  158A  	fcall	___awmod
  4625  0FF9  1283               	bcf	3,5	;RP0=0, select bank0
  4626  0FFA  1303               	bcf	3,6	;RP1=0, select bank0
  4627  0FFB  0838               	movf	?___awmod,w
  4628  0FFC  00BF               	movwf	??_ShowDigitsOnDisplay
  4629  0FFD  083F               	movf	??_ShowDigitsOnDisplay,w
  4630  0FFE  00E0               	movwf	_disp
  4631  0FFF                     l359:	
  4632  0FFF  0008               	return
  4633  1000                     __end_of_ShowDigitsOnDisplay:	
  4634                           
  4635                           	psect	text14
  4636  0C0E                     __ptext14:	
  4637 ;; *************** function _SetDisplay *****************
  4638 ;; Defined at:
  4639 ;;		line 475 in file "main.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  display_inde    1    wreg     unsigned char 
  4642 ;;  d1              1    4[BANK0 ] unsigned char 
  4643 ;;  d2              1    5[BANK0 ] unsigned char 
  4644 ;;  d3              1    6[BANK0 ] unsigned char 
  4645 ;;  value           1    7[BANK0 ] unsigned char 
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  display_inde    1   10[BANK0 ] unsigned char 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4657 ;;      Params:         0       4       0       0       0
  4658 ;;      Locals:         0       1       0       0       0
  4659 ;;      Temps:          0       2       0       0       0
  4660 ;;      Totals:         0       7       0       0       0
  4661 ;;Total ram usage:        7 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    3
  4664 ;; This function calls:
  4665 ;;		Nothing
  4666 ;; This function is called by:
  4667 ;;		_ShowDigitsOnDisplay
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           
  4672                           ;psect for function _SetDisplay
  4673  0C0E                     _SetDisplay:	
  4674                           
  4675                           ;incstack = 0
  4676                           ; Regs used in _SetDisplay: [wreg-fsr0h+status,2+status,0]
  4677                           ;SetDisplay@display_index stored from wreg
  4678  0C0E  1283               	bcf	3,5	;RP0=0, select bank0
  4679  0C0F  1303               	bcf	3,6	;RP1=0, select bank0
  4680  0C10  00AA               	movwf	SetDisplay@display_index
  4681  0C11                     l3139:	
  4682                           
  4683                           ;main.c: 475: void SetDisplay(unsigned char display_index, char d1, char d2, char d3, ch
      +                          ar value);main.c: 476: {;main.c: 477:     switch (display_index)
  4684  0C11  2C52               	goto	l3149
  4685  0C12                     l3141:	
  4686                           
  4687                           ;main.c: 480:         PORTAbits.RA2 = d1;
  4688  0C12  0C24               	rrf	SetDisplay@d1,w
  4689  0C13  1C03               	skipc
  4690  0C14  1105               	bcf	5,2	;volatile
  4691  0C15  1803               	skipnc
  4692  0C16  1505               	bsf	5,2	;volatile
  4693                           
  4694                           ;main.c: 481:         PORTAbits.RA3 = d2;
  4695  0C17  0C25               	rrf	SetDisplay@d2,w
  4696  0C18  1C03               	skipc
  4697  0C19  1185               	bcf	5,3	;volatile
  4698  0C1A  1803               	skipnc
  4699  0C1B  1585               	bsf	5,3	;volatile
  4700                           
  4701                           ;main.c: 482:         PORTAbits.RA4 = d3;
  4702  0C1C  0C26               	rrf	SetDisplay@d3,w
  4703  0C1D  1C03               	skipc
  4704  0C1E  1205               	bcf	5,4	;volatile
  4705  0C1F  1803               	skipnc
  4706  0C20  1605               	bsf	5,4	;volatile
  4707                           
  4708                           ;main.c: 483:         PORTBbits.RB0 = d1;
  4709  0C21  0C24               	rrf	SetDisplay@d1,w
  4710  0C22  1C03               	skipc
  4711  0C23  1006               	bcf	6,0	;volatile
  4712  0C24  1803               	skipnc
  4713  0C25  1406               	bsf	6,0	;volatile
  4714                           
  4715                           ;main.c: 484:         PORTBbits.RB0 = d2;
  4716  0C26  0C25               	rrf	SetDisplay@d2,w
  4717  0C27  1C03               	skipc
  4718  0C28  1006               	bcf	6,0	;volatile
  4719  0C29  1803               	skipnc
  4720  0C2A  1406               	bsf	6,0	;volatile
  4721                           
  4722                           ;main.c: 485:         PORTBbits.RB0 = d3;
  4723  0C2B  0C26               	rrf	SetDisplay@d3,w
  4724  0C2C  1C03               	skipc
  4725  0C2D  1006               	bcf	6,0	;volatile
  4726  0C2E  1803               	skipnc
  4727  0C2F  1406               	bsf	6,0	;volatile
  4728  0C30                     l3143:	
  4729                           
  4730                           ;main.c: 486:         PORTD = value;
  4731  0C30  0827               	movf	SetDisplay@value,w
  4732  0C31  0088               	movwf	8	;volatile
  4733                           
  4734                           ;main.c: 487:         break;
  4735  0C32  2C62               	goto	l345
  4736  0C33                     l3145:	
  4737                           
  4738                           ;main.c: 489:         PORTAbits.RA5 = d1;
  4739  0C33  0C24               	rrf	SetDisplay@d1,w
  4740  0C34  1C03               	skipc
  4741  0C35  1285               	bcf	5,5	;volatile
  4742  0C36  1803               	skipnc
  4743  0C37  1685               	bsf	5,5	;volatile
  4744                           
  4745                           ;main.c: 490:         PORTBbits.RB0 = d2;
  4746  0C38  0C25               	rrf	SetDisplay@d2,w
  4747  0C39  1C03               	skipc
  4748  0C3A  1006               	bcf	6,0	;volatile
  4749  0C3B  1803               	skipnc
  4750  0C3C  1406               	bsf	6,0	;volatile
  4751                           
  4752                           ;main.c: 491:         PORTBbits.RB0 = d3;
  4753  0C3D  0C26               	rrf	SetDisplay@d3,w
  4754  0C3E  1C03               	skipc
  4755  0C3F  1006               	bcf	6,0	;volatile
  4756  0C40  1803               	skipnc
  4757  0C41  1406               	bsf	6,0	;volatile
  4758                           
  4759                           ;main.c: 492:         PORTBbits.RB0 = d1;
  4760  0C42  0C24               	rrf	SetDisplay@d1,w
  4761  0C43  1C03               	skipc
  4762  0C44  1006               	bcf	6,0	;volatile
  4763  0C45  1803               	skipnc
  4764  0C46  1406               	bsf	6,0	;volatile
  4765                           
  4766                           ;main.c: 493:         PORTBbits.RB0 = d2;
  4767  0C47  0C25               	rrf	SetDisplay@d2,w
  4768  0C48  1C03               	skipc
  4769  0C49  1006               	bcf	6,0	;volatile
  4770  0C4A  1803               	skipnc
  4771  0C4B  1406               	bsf	6,0	;volatile
  4772                           
  4773                           ;main.c: 494:         PORTBbits.RB0 = d3;
  4774  0C4C  0C26               	rrf	SetDisplay@d3,w
  4775  0C4D  1C03               	skipc
  4776  0C4E  1006               	bcf	6,0	;volatile
  4777  0C4F  1803               	skipnc
  4778  0C50  1406               	bsf	6,0	;volatile
  4779                           
  4780                           ;main.c: 496:         break;
  4781  0C51  2C62               	goto	l345
  4782  0C52                     l3149:	
  4783  0C52  082A               	movf	SetDisplay@display_index,w
  4784  0C53  00A8               	movwf	??_SetDisplay
  4785  0C54  01A9               	clrf	??_SetDisplay+1
  4786                           
  4787                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4788                           ; Switch size 1, requested type "simple"
  4789                           ; Number of cases is 1, Range of values is 0 to 0
  4790                           ; switch strategies available:
  4791                           ; Name         Instructions Cycles
  4792                           ; simple_byte            4     3 (average)
  4793                           ; direct_byte           11     8 (fixed)
  4794                           ; jumptable            260     6 (fixed)
  4795                           ;	Chosen strategy is simple_byte
  4796  0C55  0829               	movf	??_SetDisplay+1,w
  4797  0C56  3A00               	xorlw	0	; case 0
  4798  0C57  1903               	skipnz
  4799  0C58  2C5A               	goto	l3987
  4800  0C59  2C62               	goto	l345
  4801  0C5A                     l3987:	
  4802                           
  4803                           ; Switch size 1, requested type "simple"
  4804                           ; Number of cases is 2, Range of values is 0 to 1
  4805                           ; switch strategies available:
  4806                           ; Name         Instructions Cycles
  4807                           ; simple_byte            7     4 (average)
  4808                           ; direct_byte           14     8 (fixed)
  4809                           ; jumptable            260     6 (fixed)
  4810                           ;	Chosen strategy is simple_byte
  4811  0C5A  0828               	movf	??_SetDisplay,w
  4812  0C5B  3A00               	xorlw	0	; case 0
  4813  0C5C  1903               	skipnz
  4814  0C5D  2C12               	goto	l3141
  4815  0C5E  3A01               	xorlw	1	; case 1
  4816  0C5F  1903               	skipnz
  4817  0C60  2C33               	goto	l3145
  4818  0C61  2C62               	goto	l345
  4819  0C62                     l345:	
  4820  0C62  0008               	return
  4821  0C63                     __end_of_SetDisplay:	
  4822                           
  4823                           	psect	text15
  4824  0D16                     __ptext15:	
  4825 ;; *************** function _SetReceivedTimes *****************
  4826 ;; Defined at:
  4827 ;;		line 74 in file "./CustomLib/TrafficLight.h"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;  _dataFromGat    1    wreg     PTR unsigned char 
  4830 ;;		 -> dataFromGateway(15), 
  4831 ;;  _semafori       1   12[BANK0 ] PTR PTR struct .
  4832 ;;		 -> Semafori(8), 
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;  _dataFromGat    1   19[BANK0 ] PTR unsigned char 
  4835 ;;		 -> dataFromGateway(15), 
  4836 ;;  index           1   20[BANK0 ] unsigned char 
  4837 ;;  colorId         1   18[BANK0 ] unsigned char 
  4838 ;;  semaforoId      1   17[BANK0 ] unsigned char 
  4839 ;;  i               1   21[BANK0 ] unsigned char 
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      void 
  4842 ;; Registers used:
  4843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4849 ;;      Params:         0       1       0       0       0
  4850 ;;      Locals:         0       5       0       0       0
  4851 ;;      Temps:          0       4       0       0       0
  4852 ;;      Totals:         0      10       0       0       0
  4853 ;;Total ram usage:       10 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; Hardware stack levels required when called:    4
  4856 ;; This function calls:
  4857 ;;		_GetTime
  4858 ;;		___bmul
  4859 ;; This function is called by:
  4860 ;;		_main
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           
  4865                           ;psect for function _SetReceivedTimes
  4866  0D16                     _SetReceivedTimes:	
  4867                           
  4868                           ;incstack = 0
  4869                           ; Regs used in _SetReceivedTimes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4870                           ;SetReceivedTimes@_dataFromGateway stored from wreg
  4871  0D16  1283               	bcf	3,5	;RP0=0, select bank0
  4872  0D17  1303               	bcf	3,6	;RP1=0, select bank0
  4873  0D18  00B3               	movwf	SetReceivedTimes@_dataFromGateway
  4874  0D19                     l3385:	
  4875                           
  4876                           ;./CustomLib/TrafficLight.h: 74: void SetReceivedTimes(ProtocolBytes _dataFromGateway, _
      +                          Semafori _semafori);./CustomLib/TrafficLight.h: 75: {;./CustomLib/TrafficLight.h: 76:   
      +                            for (unsigned char i = 0; i < 3; i++)
  4877  0D19  01B5               	clrf	SetReceivedTimes@i
  4878  0D1A                     l3387:	
  4879  0D1A  3003               	movlw	3
  4880  0D1B  0235               	subwf	SetReceivedTimes@i,w
  4881  0D1C  1C03               	skipc
  4882  0D1D  2D1F               	goto	u2811
  4883  0D1E  2D20               	goto	u2810
  4884  0D1F                     u2811:	
  4885  0D1F  2D21               	goto	l3391
  4886  0D20                     u2810:	
  4887  0D20  2D76               	goto	l147
  4888  0D21                     l3391:	
  4889                           
  4890                           ;./CustomLib/TrafficLight.h: 77:     {;./CustomLib/TrafficLight.h: 78:         unsigned 
      +                          char index = i * 5;
  4891  0D21  3005               	movlw	5
  4892  0D22  00AD               	movwf	??_SetReceivedTimes
  4893  0D23  082D               	movf	??_SetReceivedTimes,w
  4894  0D24  00A4               	movwf	___bmul@multiplicand
  4895  0D25  0835               	movf	SetReceivedTimes@i,w
  4896  0D26  120A  118A  27DB  120A  158A  	fcall	___bmul
  4897  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  4898  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  4899  0D2D  00AE               	movwf	??_SetReceivedTimes+1
  4900  0D2E  082E               	movf	??_SetReceivedTimes+1,w
  4901  0D2F  00B4               	movwf	SetReceivedTimes@index
  4902  0D30                     l3393:	
  4903                           
  4904                           ;./CustomLib/TrafficLight.h: 79:         unsigned char semaforoId = (_dataFromGateway[in
      +                          dex] >> 1) & 0x0F;
  4905  0D30  0834               	movf	SetReceivedTimes@index,w
  4906  0D31  0733               	addwf	SetReceivedTimes@_dataFromGateway,w
  4907  0D32  00AD               	movwf	??_SetReceivedTimes
  4908  0D33  082D               	movf	??_SetReceivedTimes,w
  4909  0D34  0084               	movwf	4
  4910  0D35  1783               	bsf	3,7	;select IRP bank2
  4911  0D36  0800               	movf	0,w
  4912  0D37  00AE               	movwf	??_SetReceivedTimes+1
  4913  0D38  1003               	clrc
  4914  0D39  0C2E               	rrf	??_SetReceivedTimes+1,w
  4915  0D3A  390F               	andlw	15
  4916  0D3B  00AF               	movwf	??_SetReceivedTimes+2
  4917  0D3C  082F               	movf	??_SetReceivedTimes+2,w
  4918  0D3D  00B1               	movwf	SetReceivedTimes@semaforoId
  4919  0D3E                     l3395:	
  4920                           
  4921                           ;./CustomLib/TrafficLight.h: 80:         unsigned char colorId = ((_dataFromGateway[inde
      +                          x] >> 5) & 0x03) - 1;
  4922  0D3E  0834               	movf	SetReceivedTimes@index,w
  4923  0D3F  0733               	addwf	SetReceivedTimes@_dataFromGateway,w
  4924  0D40  00AD               	movwf	??_SetReceivedTimes
  4925  0D41  082D               	movf	??_SetReceivedTimes,w
  4926  0D42  0084               	movwf	4
  4927  0D43  0800               	movf	0,w
  4928  0D44  00AE               	movwf	??_SetReceivedTimes+1
  4929  0D45  3005               	movlw	5
  4930  0D46                     u2825:	
  4931  0D46  1003               	clrc
  4932  0D47  0CAE               	rrf	??_SetReceivedTimes+1,f
  4933  0D48  3EFF               	addlw	-1
  4934  0D49  1D03               	skipz
  4935  0D4A  2D46               	goto	u2825
  4936  0D4B  082E               	movf	??_SetReceivedTimes+1,w
  4937  0D4C  3903               	andlw	3
  4938  0D4D  3EFF               	addlw	255
  4939  0D4E  00AF               	movwf	??_SetReceivedTimes+2
  4940  0D4F  082F               	movf	??_SetReceivedTimes+2,w
  4941  0D50  00B2               	movwf	SetReceivedTimes@colorId
  4942  0D51                     l3397:	
  4943                           
  4944                           ;./CustomLib/TrafficLight.h: 82:         (*(_semafori)[semaforoId]).new_times[colorId] =
      +                           GetTime(index, _dataFromGateway);
  4945  0D51  0833               	movf	SetReceivedTimes@_dataFromGateway,w
  4946  0D52  00AD               	movwf	??_SetReceivedTimes
  4947  0D53  082D               	movf	??_SetReceivedTimes,w
  4948  0D54  00A4               	movwf	GetTime@_dataFromGateway
  4949  0D55  0834               	movf	SetReceivedTimes@index,w
  4950  0D56  120A  158A  22E1  120A  158A  	fcall	_GetTime
  4951  0D5B  1283               	bcf	3,5	;RP0=0, select bank0
  4952  0D5C  1303               	bcf	3,6	;RP1=0, select bank0
  4953  0D5D  0831               	movf	SetReceivedTimes@semaforoId,w
  4954  0D5E  072C               	addwf	SetReceivedTimes@_semafori,w
  4955  0D5F  00AE               	movwf	??_SetReceivedTimes+1
  4956  0D60  082E               	movf	??_SetReceivedTimes+1,w
  4957  0D61  0084               	movwf	4
  4958  0D62  0832               	movf	SetReceivedTimes@colorId,w
  4959  0D63  00AF               	movwf	??_SetReceivedTimes+2
  4960  0D64  072F               	addwf	??_SetReceivedTimes+2,w
  4961  0D65  1383               	bcf	3,7	;select IRP bank0
  4962  0D66  0700               	addwf	0,w
  4963  0D67  00B0               	movwf	??_SetReceivedTimes+3
  4964  0D68  0830               	movf	??_SetReceivedTimes+3,w
  4965  0D69  3E06               	addlw	6
  4966  0D6A  0084               	movwf	4
  4967  0D6B  0824               	movf	?_GetTime,w
  4968  0D6C  1783               	bsf	3,7	;select IRP bank2
  4969  0D6D  0080               	movwf	0
  4970  0D6E  0A84               	incf	4,f
  4971  0D6F  0825               	movf	?_GetTime+1,w
  4972  0D70  0080               	movwf	0
  4973  0D71                     l3399:	
  4974                           
  4975                           ;./CustomLib/TrafficLight.h: 83:     }
  4976  0D71  3001               	movlw	1
  4977  0D72  00AD               	movwf	??_SetReceivedTimes
  4978  0D73  082D               	movf	??_SetReceivedTimes,w
  4979  0D74  07B5               	addwf	SetReceivedTimes@i,f
  4980  0D75  2D1A               	goto	l3387
  4981  0D76                     l147:	
  4982  0D76  0008               	return
  4983  0D77                     __end_of_SetReceivedTimes:	
  4984                           
  4985                           	psect	text16
  4986  0AE1                     __ptext16:	
  4987 ;; *************** function _GetTime *****************
  4988 ;; Defined at:
  4989 ;;		line 25 in file "./CustomLib/TrafficLight.h"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  index           1    wreg     unsigned char 
  4992 ;;  _dataFromGat    1    4[BANK0 ] PTR unsigned char 
  4993 ;;		 -> dataFromGateway(15), 
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  index           1    8[BANK0 ] unsigned char 
  4996 ;;  tmp             2   10[BANK0 ] int 
  4997 ;;  shortInt        1    9[BANK0 ] struct .
  4998 ;; Return value:  Size  Location     Type
  4999 ;;                  2    4[BANK0 ] int 
  5000 ;; Registers used:
  5001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5007 ;;      Params:         0       2       0       0       0
  5008 ;;      Locals:         0       4       0       0       0
  5009 ;;      Temps:          0       2       0       0       0
  5010 ;;      Totals:         0       8       0       0       0
  5011 ;;Total ram usage:        8 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; Hardware stack levels required when called:    3
  5014 ;; This function calls:
  5015 ;;		Nothing
  5016 ;; This function is called by:
  5017 ;;		_SetReceivedTimes
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           
  5022                           ;psect for function _GetTime
  5023  0AE1                     _GetTime:	
  5024                           
  5025                           ;incstack = 0
  5026                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  5027                           ;GetTime@index stored from wreg
  5028  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  5029  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  5030  0AE3  00A8               	movwf	GetTime@index
  5031  0AE4                     l3121:	
  5032                           
  5033                           ;./CustomLib/TrafficLight.h: 25: int GetTime(unsigned char index, ProtocolBytes _dataFro
      +                          mGateway);./CustomLib/TrafficLight.h: 26: {;./CustomLib/TrafficLight.h: 27:     int tmp;
      +                          ;./CustomLib/TrafficLight.h: 31:     } shortInt;;./CustomLib/TrafficLight.h: 33:     sho
      +                          rtInt.Val = _dataFromGateway[index + 3] & 0x7F;
  5034  0AE4  0828               	movf	GetTime@index,w
  5035  0AE5  0724               	addwf	GetTime@_dataFromGateway,w
  5036  0AE6  00A6               	movwf	??_GetTime
  5037  0AE7  0826               	movf	??_GetTime,w
  5038  0AE8  3E03               	addlw	3
  5039  0AE9  0084               	movwf	4
  5040  0AEA  307F               	movlw	127
  5041  0AEB  1783               	bsf	3,7	;select IRP bank2
  5042  0AEC  0500               	andwf	0,w
  5043  0AED  00A7               	movwf	??_GetTime+1
  5044  0AEE  0829               	movf	GetTime@shortInt,w
  5045  0AEF  0627               	xorwf	??_GetTime+1,w
  5046  0AF0  3980               	andlw	-128
  5047  0AF1  0627               	xorwf	??_GetTime+1,w
  5048  0AF2  00A9               	movwf	GetTime@shortInt
  5049  0AF3                     l3123:	
  5050                           
  5051                           ;./CustomLib/TrafficLight.h: 34:     tmp = shortInt.Val;
  5052  0AF3  0829               	movf	GetTime@shortInt,w
  5053  0AF4  397F               	andlw	127
  5054  0AF5  00A6               	movwf	??_GetTime
  5055  0AF6  01A7               	clrf	??_GetTime+1
  5056  0AF7  0826               	movf	??_GetTime,w
  5057  0AF8  00AA               	movwf	GetTime@tmp
  5058  0AF9  0827               	movf	??_GetTime+1,w
  5059  0AFA  00AB               	movwf	GetTime@tmp+1
  5060  0AFB                     l3125:	
  5061                           
  5062                           ;./CustomLib/TrafficLight.h: 35:     tmp = (tmp << 7) & 0x80;
  5063  0AFB  082B               	movf	GetTime@tmp+1,w
  5064  0AFC  00A7               	movwf	??_GetTime+1
  5065  0AFD  082A               	movf	GetTime@tmp,w
  5066  0AFE  00A6               	movwf	??_GetTime
  5067  0AFF  3007               	movlw	7
  5068  0B00  00FF               	movwf	btemp+1
  5069  0B01                     u2345:	
  5070  0B01  1003               	clrc
  5071  0B02  0DA6               	rlf	??_GetTime,f
  5072  0B03  0DA7               	rlf	??_GetTime+1,f
  5073  0B04  0BFF               	decfsz	btemp+1,f
  5074  0B05  2B01               	goto	u2345
  5075  0B06  3080               	movlw	128
  5076  0B07  0526               	andwf	??_GetTime,w
  5077  0B08  00AA               	movwf	GetTime@tmp
  5078  0B09  3000               	movlw	0
  5079  0B0A  0527               	andwf	??_GetTime+1,w
  5080  0B0B  00AB               	movwf	GetTime@tmp+1
  5081  0B0C                     l3127:	
  5082                           
  5083                           ;./CustomLib/TrafficLight.h: 37:     shortInt.Val = _dataFromGateway[index + 2] & 0x7F;
  5084  0B0C  0828               	movf	GetTime@index,w
  5085  0B0D  0724               	addwf	GetTime@_dataFromGateway,w
  5086  0B0E  00A6               	movwf	??_GetTime
  5087  0B0F  0826               	movf	??_GetTime,w
  5088  0B10  3E02               	addlw	2
  5089  0B11  0084               	movwf	4
  5090  0B12  307F               	movlw	127
  5091  0B13  0500               	andwf	0,w
  5092  0B14  00A7               	movwf	??_GetTime+1
  5093  0B15  0829               	movf	GetTime@shortInt,w
  5094  0B16  0627               	xorwf	??_GetTime+1,w
  5095  0B17  3980               	andlw	-128
  5096  0B18  0627               	xorwf	??_GetTime+1,w
  5097  0B19  00A9               	movwf	GetTime@shortInt
  5098  0B1A                     l3129:	
  5099                           
  5100                           ;./CustomLib/TrafficLight.h: 38:     tmp = tmp | shortInt.Val;
  5101  0B1A  0829               	movf	GetTime@shortInt,w
  5102  0B1B  397F               	andlw	127
  5103  0B1C  00A6               	movwf	??_GetTime
  5104  0B1D  082A               	movf	GetTime@tmp,w
  5105  0B1E  0426               	iorwf	??_GetTime,w
  5106  0B1F  00AA               	movwf	GetTime@tmp
  5107  0B20  082B               	movf	GetTime@tmp+1,w
  5108  0B21  00AB               	movwf	GetTime@tmp+1
  5109  0B22                     l3131:	
  5110                           
  5111                           ;./CustomLib/TrafficLight.h: 40:     return tmp;
  5112  0B22  082B               	movf	GetTime@tmp+1,w
  5113  0B23  00A5               	movwf	?_GetTime+1
  5114  0B24  082A               	movf	GetTime@tmp,w
  5115  0B25  00A4               	movwf	?_GetTime
  5116  0B26                     l130:	
  5117  0B26  0008               	return
  5118  0B27                     __end_of_GetTime:	
  5119                           
  5120                           	psect	text17
  5121  0507                     __ptext17:	
  5122 ;; *************** function _SetDefaultTimers *****************
  5123 ;; Defined at:
  5124 ;;		line 44 in file "./CustomLib/TrafficLight.h"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  rosso           2    4[BANK0 ] int 
  5127 ;;  verde           2    6[BANK0 ] int 
  5128 ;;  giallo          2    8[BANK0 ] int 
  5129 ;;  _semafori       1   10[BANK0 ] PTR PTR struct .
  5130 ;;		 -> Semafori(8), 
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;  i               1   14[BANK0 ] unsigned char 
  5133 ;;  l               1   15[BANK0 ] unsigned char 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      void 
  5136 ;; Registers used:
  5137 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5143 ;;      Params:         0       7       0       0       0
  5144 ;;      Locals:         0       2       0       0       0
  5145 ;;      Temps:          0       3       0       0       0
  5146 ;;      Totals:         0      12       0       0       0
  5147 ;;Total ram usage:       12 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    3
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_main
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function _SetDefaultTimers
  5159  0507                     _SetDefaultTimers:	
  5160  0507                     l3347:	
  5161                           ;incstack = 0
  5162                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  5163                           
  5164                           
  5165                           ;./CustomLib/TrafficLight.h: 44: void SetDefaultTimers(int rosso, int verde, int giallo,
      +                           _Semafori _semafori);./CustomLib/TrafficLight.h: 45: {;./CustomLib/TrafficLight.h: 46: 
      +                              for (unsigned char l = 0; l < n_semafori; l++)
  5166  0507  1283               	bcf	3,5	;RP0=0, select bank0
  5167  0508  1303               	bcf	3,6	;RP1=0, select bank0
  5168  0509  01AF               	clrf	SetDefaultTimers@l
  5169  050A                     l3353:	
  5170                           
  5171                           ;./CustomLib/TrafficLight.h: 47:     {;./CustomLib/TrafficLight.h: 48:         (*(_semaf
      +                          ori)[l]).lux_select = 0;
  5172  050A  082F               	movf	SetDefaultTimers@l,w
  5173  050B  072A               	addwf	SetDefaultTimers@_semafori,w
  5174  050C  00AB               	movwf	??_SetDefaultTimers
  5175  050D  082B               	movf	??_SetDefaultTimers,w
  5176  050E  0084               	movwf	4
  5177  050F  1383               	bcf	3,7	;select IRP bank0
  5178  0510  0800               	movf	0,w
  5179  0511  3E0C               	addlw	12
  5180  0512  0084               	movwf	4
  5181  0513  1783               	bsf	3,7	;select IRP bank2
  5182  0514  0180               	clrf	0
  5183                           
  5184                           ;./CustomLib/TrafficLight.h: 49:         (*(_semafori)[l]).new_lux_select = 0;
  5185  0515  082F               	movf	SetDefaultTimers@l,w
  5186  0516  072A               	addwf	SetDefaultTimers@_semafori,w
  5187  0517  00AB               	movwf	??_SetDefaultTimers
  5188  0518  082B               	movf	??_SetDefaultTimers,w
  5189  0519  0084               	movwf	4
  5190  051A  1383               	bcf	3,7	;select IRP bank0
  5191  051B  0800               	movf	0,w
  5192  051C  3E0D               	addlw	13
  5193  051D  0084               	movwf	4
  5194  051E  1783               	bsf	3,7	;select IRP bank2
  5195  051F  0180               	clrf	0
  5196  0520                     l3355:	
  5197                           
  5198                           ;./CustomLib/TrafficLight.h: 50:         for (unsigned char i = 0; i < 3; i++)
  5199  0520  01AE               	clrf	SetDefaultTimers@i
  5200  0521  2D9A               	goto	l3369
  5201  0522                     l3361:	
  5202                           
  5203                           ;./CustomLib/TrafficLight.h: 55:                 (*(_semafori)[l]).times[i] = rosso;
  5204  0522  082F               	movf	SetDefaultTimers@l,w
  5205  0523  072A               	addwf	SetDefaultTimers@_semafori,w
  5206  0524  00AB               	movwf	??_SetDefaultTimers
  5207  0525  082B               	movf	??_SetDefaultTimers,w
  5208  0526  0084               	movwf	4
  5209  0527  082E               	movf	SetDefaultTimers@i,w
  5210  0528  00AC               	movwf	??_SetDefaultTimers+1
  5211  0529  072C               	addwf	??_SetDefaultTimers+1,w
  5212  052A  1383               	bcf	3,7	;select IRP bank0
  5213  052B  0700               	addwf	0,w
  5214  052C  00AD               	movwf	??_SetDefaultTimers+2
  5215  052D  082D               	movf	??_SetDefaultTimers+2,w
  5216  052E  0084               	movwf	4
  5217  052F  0824               	movf	SetDefaultTimers@rosso,w
  5218  0530  1783               	bsf	3,7	;select IRP bank2
  5219  0531  0080               	movwf	0
  5220  0532  0A84               	incf	4,f
  5221  0533  0825               	movf	SetDefaultTimers@rosso+1,w
  5222  0534  0080               	movwf	0
  5223                           
  5224                           ;./CustomLib/TrafficLight.h: 56:                 (*(_semafori)[l]).new_times[i] = rosso;
  5225  0535  082F               	movf	SetDefaultTimers@l,w
  5226  0536  072A               	addwf	SetDefaultTimers@_semafori,w
  5227  0537  00AB               	movwf	??_SetDefaultTimers
  5228  0538  082B               	movf	??_SetDefaultTimers,w
  5229  0539  0084               	movwf	4
  5230  053A  082E               	movf	SetDefaultTimers@i,w
  5231  053B  00AC               	movwf	??_SetDefaultTimers+1
  5232  053C  072C               	addwf	??_SetDefaultTimers+1,w
  5233  053D  1383               	bcf	3,7	;select IRP bank0
  5234  053E  0700               	addwf	0,w
  5235  053F  00AD               	movwf	??_SetDefaultTimers+2
  5236  0540  082D               	movf	??_SetDefaultTimers+2,w
  5237  0541  3E06               	addlw	6
  5238  0542  0084               	movwf	4
  5239  0543  0824               	movf	SetDefaultTimers@rosso,w
  5240  0544  1783               	bsf	3,7	;select IRP bank2
  5241  0545  0080               	movwf	0
  5242  0546  0A84               	incf	4,f
  5243  0547  0825               	movf	SetDefaultTimers@rosso+1,w
  5244  0548  0080               	movwf	0
  5245                           
  5246                           ;./CustomLib/TrafficLight.h: 57:                 break;
  5247  0549  2DAD               	goto	l3371
  5248  054A                     l3363:	
  5249                           
  5250                           ;./CustomLib/TrafficLight.h: 59:                 (*(_semafori)[l]).times[i] = verde;
  5251  054A  082F               	movf	SetDefaultTimers@l,w
  5252  054B  072A               	addwf	SetDefaultTimers@_semafori,w
  5253  054C  00AB               	movwf	??_SetDefaultTimers
  5254  054D  082B               	movf	??_SetDefaultTimers,w
  5255  054E  0084               	movwf	4
  5256  054F  082E               	movf	SetDefaultTimers@i,w
  5257  0550  00AC               	movwf	??_SetDefaultTimers+1
  5258  0551  072C               	addwf	??_SetDefaultTimers+1,w
  5259  0552  1383               	bcf	3,7	;select IRP bank0
  5260  0553  0700               	addwf	0,w
  5261  0554  00AD               	movwf	??_SetDefaultTimers+2
  5262  0555  082D               	movf	??_SetDefaultTimers+2,w
  5263  0556  0084               	movwf	4
  5264  0557  0826               	movf	SetDefaultTimers@verde,w
  5265  0558  1783               	bsf	3,7	;select IRP bank2
  5266  0559  0080               	movwf	0
  5267  055A  0A84               	incf	4,f
  5268  055B  0827               	movf	SetDefaultTimers@verde+1,w
  5269  055C  0080               	movwf	0
  5270                           
  5271                           ;./CustomLib/TrafficLight.h: 60:                 (*(_semafori)[l]).new_times[i] = verde;
  5272  055D  082F               	movf	SetDefaultTimers@l,w
  5273  055E  072A               	addwf	SetDefaultTimers@_semafori,w
  5274  055F  00AB               	movwf	??_SetDefaultTimers
  5275  0560  082B               	movf	??_SetDefaultTimers,w
  5276  0561  0084               	movwf	4
  5277  0562  082E               	movf	SetDefaultTimers@i,w
  5278  0563  00AC               	movwf	??_SetDefaultTimers+1
  5279  0564  072C               	addwf	??_SetDefaultTimers+1,w
  5280  0565  1383               	bcf	3,7	;select IRP bank0
  5281  0566  0700               	addwf	0,w
  5282  0567  00AD               	movwf	??_SetDefaultTimers+2
  5283  0568  082D               	movf	??_SetDefaultTimers+2,w
  5284  0569  3E06               	addlw	6
  5285  056A  0084               	movwf	4
  5286  056B  0826               	movf	SetDefaultTimers@verde,w
  5287  056C  1783               	bsf	3,7	;select IRP bank2
  5288  056D  0080               	movwf	0
  5289  056E  0A84               	incf	4,f
  5290  056F  0827               	movf	SetDefaultTimers@verde+1,w
  5291  0570  0080               	movwf	0
  5292                           
  5293                           ;./CustomLib/TrafficLight.h: 61:                 break;
  5294  0571  2DAD               	goto	l3371
  5295  0572                     l3365:	
  5296                           
  5297                           ;./CustomLib/TrafficLight.h: 63:                 (*(_semafori)[l]).times[i] = giallo;
  5298  0572  082F               	movf	SetDefaultTimers@l,w
  5299  0573  072A               	addwf	SetDefaultTimers@_semafori,w
  5300  0574  00AB               	movwf	??_SetDefaultTimers
  5301  0575  082B               	movf	??_SetDefaultTimers,w
  5302  0576  0084               	movwf	4
  5303  0577  082E               	movf	SetDefaultTimers@i,w
  5304  0578  00AC               	movwf	??_SetDefaultTimers+1
  5305  0579  072C               	addwf	??_SetDefaultTimers+1,w
  5306  057A  1383               	bcf	3,7	;select IRP bank0
  5307  057B  0700               	addwf	0,w
  5308  057C  00AD               	movwf	??_SetDefaultTimers+2
  5309  057D  082D               	movf	??_SetDefaultTimers+2,w
  5310  057E  0084               	movwf	4
  5311  057F  0828               	movf	SetDefaultTimers@giallo,w
  5312  0580  1783               	bsf	3,7	;select IRP bank2
  5313  0581  0080               	movwf	0
  5314  0582  0A84               	incf	4,f
  5315  0583  0829               	movf	SetDefaultTimers@giallo+1,w
  5316  0584  0080               	movwf	0
  5317                           
  5318                           ;./CustomLib/TrafficLight.h: 64:                 (*(_semafori)[l]).new_times[i] = giallo
      +                          ;
  5319  0585  082F               	movf	SetDefaultTimers@l,w
  5320  0586  072A               	addwf	SetDefaultTimers@_semafori,w
  5321  0587  00AB               	movwf	??_SetDefaultTimers
  5322  0588  082B               	movf	??_SetDefaultTimers,w
  5323  0589  0084               	movwf	4
  5324  058A  082E               	movf	SetDefaultTimers@i,w
  5325  058B  00AC               	movwf	??_SetDefaultTimers+1
  5326  058C  072C               	addwf	??_SetDefaultTimers+1,w
  5327  058D  1383               	bcf	3,7	;select IRP bank0
  5328  058E  0700               	addwf	0,w
  5329  058F  00AD               	movwf	??_SetDefaultTimers+2
  5330  0590  082D               	movf	??_SetDefaultTimers+2,w
  5331  0591  3E06               	addlw	6
  5332  0592  0084               	movwf	4
  5333  0593  0828               	movf	SetDefaultTimers@giallo,w
  5334  0594  1783               	bsf	3,7	;select IRP bank2
  5335  0595  0080               	movwf	0
  5336  0596  0A84               	incf	4,f
  5337  0597  0829               	movf	SetDefaultTimers@giallo+1,w
  5338  0598  0080               	movwf	0
  5339                           
  5340                           ;./CustomLib/TrafficLight.h: 65:                 break;
  5341  0599  2DAD               	goto	l3371
  5342  059A                     l3369:	
  5343  059A  082E               	movf	SetDefaultTimers@i,w
  5344  059B  00AB               	movwf	??_SetDefaultTimers
  5345  059C  01AC               	clrf	??_SetDefaultTimers+1
  5346                           
  5347                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5348                           ; Switch size 1, requested type "simple"
  5349                           ; Number of cases is 1, Range of values is 0 to 0
  5350                           ; switch strategies available:
  5351                           ; Name         Instructions Cycles
  5352                           ; simple_byte            4     3 (average)
  5353                           ; direct_byte           11     8 (fixed)
  5354                           ; jumptable            260     6 (fixed)
  5355                           ;	Chosen strategy is simple_byte
  5356  059D  082C               	movf	??_SetDefaultTimers+1,w
  5357  059E  3A00               	xorlw	0	; case 0
  5358  059F  1903               	skipnz
  5359  05A0  2DA2               	goto	l3989
  5360  05A1  2DAD               	goto	l3371
  5361  05A2                     l3989:	
  5362                           
  5363                           ; Switch size 1, requested type "simple"
  5364                           ; Number of cases is 3, Range of values is 0 to 2
  5365                           ; switch strategies available:
  5366                           ; Name         Instructions Cycles
  5367                           ; simple_byte           10     6 (average)
  5368                           ; direct_byte           17     8 (fixed)
  5369                           ; jumptable            260     6 (fixed)
  5370                           ;	Chosen strategy is simple_byte
  5371  05A2  082B               	movf	??_SetDefaultTimers,w
  5372  05A3  3A00               	xorlw	0	; case 0
  5373  05A4  1903               	skipnz
  5374  05A5  2D22               	goto	l3361
  5375  05A6  3A01               	xorlw	1	; case 1
  5376  05A7  1903               	skipnz
  5377  05A8  2D4A               	goto	l3363
  5378  05A9  3A03               	xorlw	3	; case 2
  5379  05AA  1903               	skipnz
  5380  05AB  2D72               	goto	l3365
  5381  05AC  2DAD               	goto	l3371
  5382  05AD                     l3371:	
  5383                           
  5384                           ;./CustomLib/TrafficLight.h: 67:         }
  5385  05AD  3001               	movlw	1
  5386  05AE  00AB               	movwf	??_SetDefaultTimers
  5387  05AF  082B               	movf	??_SetDefaultTimers,w
  5388  05B0  07AE               	addwf	SetDefaultTimers@i,f
  5389  05B1                     l3373:	
  5390  05B1  3003               	movlw	3
  5391  05B2  022E               	subwf	SetDefaultTimers@i,w
  5392  05B3  1C03               	skipc
  5393  05B4  2DB6               	goto	u2791
  5394  05B5  2DB7               	goto	u2790
  5395  05B6                     u2791:	
  5396  05B6  2D9A               	goto	l3369
  5397  05B7                     u2790:	
  5398  05B7                     l3375:	
  5399                           
  5400                           ;./CustomLib/TrafficLight.h: 68:     }
  5401  05B7  3001               	movlw	1
  5402  05B8  00AB               	movwf	??_SetDefaultTimers
  5403  05B9  082B               	movf	??_SetDefaultTimers,w
  5404  05BA  07AF               	addwf	SetDefaultTimers@l,f
  5405  05BB                     l3377:	
  5406  05BB  3008               	movlw	8
  5407  05BC  022F               	subwf	SetDefaultTimers@l,w
  5408  05BD  1C03               	skipc
  5409  05BE  2DC0               	goto	u2801
  5410  05BF  2DC1               	goto	u2800
  5411  05C0                     u2801:	
  5412  05C0  2D0A               	goto	l3353
  5413  05C1                     u2800:	
  5414  05C1                     l3379:	
  5415                           
  5416                           ;./CustomLib/TrafficLight.h: 70:     (*(_semafori)[1]).lux_select = 1;
  5417  05C1  0A2A               	incf	SetDefaultTimers@_semafori,w
  5418  05C2  0084               	movwf	4
  5419  05C3  1383               	bcf	3,7	;select IRP bank0
  5420  05C4  0800               	movf	0,w
  5421  05C5  3E0C               	addlw	12
  5422  05C6  0084               	movwf	4
  5423  05C7  1783               	bsf	3,7	;select IRP bank2
  5424  05C8  0180               	clrf	0
  5425  05C9  0A80               	incf	0,f
  5426                           
  5427                           ;./CustomLib/TrafficLight.h: 71:     (*(_semafori)[1]).new_lux_select = 1;
  5428  05CA  0A2A               	incf	SetDefaultTimers@_semafori,w
  5429  05CB  0084               	movwf	4
  5430  05CC  1383               	bcf	3,7	;select IRP bank0
  5431  05CD  0800               	movf	0,w
  5432  05CE  3E0D               	addlw	13
  5433  05CF  0084               	movwf	4
  5434  05D0  1783               	bsf	3,7	;select IRP bank2
  5435  05D1  0180               	clrf	0
  5436  05D2  0A80               	incf	0,f
  5437  05D3                     l142:	
  5438  05D3  0008               	return
  5439  05D4                     __end_of_SetDefaultTimers:	
  5440                           
  5441                           	psect	text18
  5442  05D4                     __ptext18:	
  5443 ;; *************** function _GetDigits *****************
  5444 ;; Defined at:
  5445 ;;		line 86 in file "./CustomLib/TrafficLight.h"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;  _digits         1    wreg     PTR PTR struct .
  5448 ;;		 -> DigitsArr(8), 
  5449 ;;  index           1   40[BANK0 ] unsigned char 
  5450 ;;  Time            2   41[BANK0 ] int 
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;  _digits         1   48[BANK0 ] PTR PTR struct .
  5453 ;;		 -> DigitsArr(8), 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      void 
  5456 ;; Registers used:
  5457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5463 ;;      Params:         0       3       0       0       0
  5464 ;;      Locals:         0       3       0       0       0
  5465 ;;      Temps:          0       3       0       0       0
  5466 ;;      Totals:         0       9       0       0       0
  5467 ;;Total ram usage:        9 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    4
  5470 ;; This function calls:
  5471 ;;		___awdiv
  5472 ;;		___awmod
  5473 ;;		___bmul
  5474 ;; This function is called by:
  5475 ;;		_main
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           
  5480                           ;psect for function _GetDigits
  5481  05D4                     _GetDigits:	
  5482                           
  5483                           ;incstack = 0
  5484                           ; Regs used in _GetDigits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5485                           ;GetDigits@_digits stored from wreg
  5486  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  5487  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  5488  05D6  00D0               	movwf	GetDigits@_digits
  5489  05D7                     l3403:	
  5490                           
  5491                           ;./CustomLib/TrafficLight.h: 86: void GetDigits(_Digits _digits, unsigned char index, in
      +                          t Time);./CustomLib/TrafficLight.h: 87: {;./CustomLib/TrafficLight.h: 88:     while (Tim
      +                          e / 1000 > 0)
  5492  05D7  2DED               	goto	l3407
  5493  05D8                     l3405:	
  5494                           
  5495                           ;./CustomLib/TrafficLight.h: 89:     {;./CustomLib/TrafficLight.h: 90:         Time = Ti
      +                          me / 10;
  5496  05D8  300A               	movlw	10
  5497  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  5498  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  5499  05DB  00BF               	movwf	___awdiv@divisor
  5500  05DC  3000               	movlw	0
  5501  05DD  00C0               	movwf	___awdiv@divisor+1
  5502  05DE  084A               	movf	GetDigits@Time+1,w
  5503  05DF  00C2               	movwf	___awdiv@dividend+1
  5504  05E0  0849               	movf	GetDigits@Time,w
  5505  05E1  00C1               	movwf	___awdiv@dividend
  5506  05E2  120A  158A  25DC  120A  118A  	fcall	___awdiv
  5507  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  5508  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  5509  05E9  0840               	movf	?___awdiv+1,w
  5510  05EA  00CA               	movwf	GetDigits@Time+1
  5511  05EB  083F               	movf	?___awdiv,w
  5512  05EC  00C9               	movwf	GetDigits@Time
  5513  05ED                     l3407:	
  5514                           
  5515                           ;./CustomLib/TrafficLight.h: 88:     while (Time / 1000 > 0)
  5516  05ED  30E8               	movlw	232
  5517  05EE  00BF               	movwf	___awdiv@divisor
  5518  05EF  3003               	movlw	3
  5519  05F0  00C0               	movwf	___awdiv@divisor+1
  5520  05F1  084A               	movf	GetDigits@Time+1,w
  5521  05F2  00C2               	movwf	___awdiv@dividend+1
  5522  05F3  0849               	movf	GetDigits@Time,w
  5523  05F4  00C1               	movwf	___awdiv@dividend
  5524  05F5  120A  158A  25DC  120A  118A  	fcall	___awdiv
  5525  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  5526  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  5527  05FC  0840               	movf	?___awdiv+1,w
  5528  05FD  3A80               	xorlw	128
  5529  05FE  00FF               	movwf	btemp+1
  5530  05FF  3080               	movlw	128
  5531  0600  027F               	subwf	btemp+1,w
  5532  0601  1D03               	skipz
  5533  0602  2E05               	goto	u2835
  5534  0603  3001               	movlw	1
  5535  0604  023F               	subwf	?___awdiv,w
  5536  0605                     u2835:	
  5537  0605  1803               	skipnc
  5538  0606  2E08               	goto	u2831
  5539  0607  2E09               	goto	u2830
  5540  0608                     u2831:	
  5541  0608  2DD8               	goto	l3405
  5542  0609                     u2830:	
  5543  0609                     l3409:	
  5544                           
  5545                           ;./CustomLib/TrafficLight.h: 93:     (*_digits)[index].centinaia = Time / 100;
  5546  0609  3064               	movlw	100
  5547  060A  1283               	bcf	3,5	;RP0=0, select bank0
  5548  060B  1303               	bcf	3,6	;RP1=0, select bank0
  5549  060C  00BF               	movwf	___awdiv@divisor
  5550  060D  3000               	movlw	0
  5551  060E  00C0               	movwf	___awdiv@divisor+1
  5552  060F  084A               	movf	GetDigits@Time+1,w
  5553  0610  00C2               	movwf	___awdiv@dividend+1
  5554  0611  0849               	movf	GetDigits@Time,w
  5555  0612  00C1               	movwf	___awdiv@dividend
  5556  0613  120A  158A  25DC  120A  118A  	fcall	___awdiv
  5557  0618  1283               	bcf	3,5	;RP0=0, select bank0
  5558  0619  1303               	bcf	3,6	;RP1=0, select bank0
  5559  061A  083F               	movf	?___awdiv,w
  5560  061B  00CB               	movwf	??_GetDigits
  5561  061C  0850               	movf	GetDigits@_digits,w
  5562  061D  0084               	movwf	4
  5563  061E  3003               	movlw	3
  5564  061F  00CC               	movwf	??_GetDigits+1
  5565  0620  084C               	movf	??_GetDigits+1,w
  5566  0621  00A4               	movwf	___bmul@multiplicand
  5567  0622  0848               	movf	GetDigits@index,w
  5568  0623  120A  118A  27DB  120A  118A  	fcall	___bmul
  5569  0628  1383               	bcf	3,7	;select IRP bank0
  5570  0629  0700               	addwf	0,w
  5571  062A  1283               	bcf	3,5	;RP0=0, select bank0
  5572  062B  1303               	bcf	3,6	;RP1=0, select bank0
  5573  062C  00CD               	movwf	??_GetDigits+2
  5574  062D  084D               	movf	??_GetDigits+2,w
  5575  062E  0084               	movwf	4
  5576  062F  084B               	movf	??_GetDigits,w
  5577  0630  0080               	movwf	0
  5578                           
  5579                           ;./CustomLib/TrafficLight.h: 94:     (*_digits)[index].decine = (Time % 100) / 10;
  5580  0631  300A               	movlw	10
  5581  0632  00BF               	movwf	___awdiv@divisor
  5582  0633  3000               	movlw	0
  5583  0634  00C0               	movwf	___awdiv@divisor+1
  5584  0635  084A               	movf	GetDigits@Time+1,w
  5585  0636  00BB               	movwf	___awmod@dividend+1
  5586  0637  0849               	movf	GetDigits@Time,w
  5587  0638  00BA               	movwf	___awmod@dividend
  5588  0639  3064               	movlw	100
  5589  063A  00B8               	movwf	___awmod@divisor
  5590  063B  3000               	movlw	0
  5591  063C  00B9               	movwf	___awmod@divisor+1
  5592  063D  120A  158A  24BB  120A  118A  	fcall	___awmod
  5593  0642  1283               	bcf	3,5	;RP0=0, select bank0
  5594  0643  1303               	bcf	3,6	;RP1=0, select bank0
  5595  0644  0839               	movf	?___awmod+1,w
  5596  0645  00C2               	movwf	___awdiv@dividend+1
  5597  0646  0838               	movf	?___awmod,w
  5598  0647  00C1               	movwf	___awdiv@dividend
  5599  0648  120A  158A  25DC  120A  118A  	fcall	___awdiv
  5600  064D  1283               	bcf	3,5	;RP0=0, select bank0
  5601  064E  1303               	bcf	3,6	;RP1=0, select bank0
  5602  064F  083F               	movf	?___awdiv,w
  5603  0650  00CB               	movwf	??_GetDigits
  5604  0651  0850               	movf	GetDigits@_digits,w
  5605  0652  0084               	movwf	4
  5606  0653  3003               	movlw	3
  5607  0654  00CC               	movwf	??_GetDigits+1
  5608  0655  084C               	movf	??_GetDigits+1,w
  5609  0656  00A4               	movwf	___bmul@multiplicand
  5610  0657  0848               	movf	GetDigits@index,w
  5611  0658  120A  118A  27DB  120A  118A  	fcall	___bmul
  5612  065D  1383               	bcf	3,7	;select IRP bank0
  5613  065E  0700               	addwf	0,w
  5614  065F  1283               	bcf	3,5	;RP0=0, select bank0
  5615  0660  1303               	bcf	3,6	;RP1=0, select bank0
  5616  0661  00CD               	movwf	??_GetDigits+2
  5617  0662  0A4D               	incf	??_GetDigits+2,w
  5618  0663  0084               	movwf	4
  5619  0664  084B               	movf	??_GetDigits,w
  5620  0665  0080               	movwf	0
  5621  0666                     l3411:	
  5622                           
  5623                           ;./CustomLib/TrafficLight.h: 95:     (*_digits)[index].unita = (Time % 100) % 10;
  5624  0666  084A               	movf	GetDigits@Time+1,w
  5625  0667  00BB               	movwf	___awmod@dividend+1
  5626  0668  0849               	movf	GetDigits@Time,w
  5627  0669  00BA               	movwf	___awmod@dividend
  5628  066A  3064               	movlw	100
  5629  066B  00B8               	movwf	___awmod@divisor
  5630  066C  3000               	movlw	0
  5631  066D  00B9               	movwf	___awmod@divisor+1
  5632  066E  120A  158A  24BB  120A  118A  	fcall	___awmod
  5633  0673  1283               	bcf	3,5	;RP0=0, select bank0
  5634  0674  1303               	bcf	3,6	;RP1=0, select bank0
  5635  0675  0839               	movf	?___awmod+1,w
  5636  0676  00CF               	movwf	_GetDigits$1248+1
  5637  0677  0838               	movf	?___awmod,w
  5638  0678  00CE               	movwf	_GetDigits$1248
  5639  0679                     l3413:	
  5640                           
  5641                           ;./CustomLib/TrafficLight.h: 95:     (*_digits)[index].unita = (Time % 100) % 10;
  5642  0679  300A               	movlw	10
  5643  067A  00B8               	movwf	___awmod@divisor
  5644  067B  3000               	movlw	0
  5645  067C  00B9               	movwf	___awmod@divisor+1
  5646  067D  084F               	movf	_GetDigits$1248+1,w
  5647  067E  00BB               	movwf	___awmod@dividend+1
  5648  067F  084E               	movf	_GetDigits$1248,w
  5649  0680  00BA               	movwf	___awmod@dividend
  5650  0681  120A  158A  24BB  120A  118A  	fcall	___awmod
  5651  0686  1283               	bcf	3,5	;RP0=0, select bank0
  5652  0687  1303               	bcf	3,6	;RP1=0, select bank0
  5653  0688  0838               	movf	?___awmod,w
  5654  0689  00CB               	movwf	??_GetDigits
  5655  068A  0850               	movf	GetDigits@_digits,w
  5656  068B  0084               	movwf	4
  5657  068C  3003               	movlw	3
  5658  068D  00CC               	movwf	??_GetDigits+1
  5659  068E  084C               	movf	??_GetDigits+1,w
  5660  068F  00A4               	movwf	___bmul@multiplicand
  5661  0690  0848               	movf	GetDigits@index,w
  5662  0691  120A  118A  27DB  120A  118A  	fcall	___bmul
  5663  0696  1383               	bcf	3,7	;select IRP bank0
  5664  0697  0700               	addwf	0,w
  5665  0698  1283               	bcf	3,5	;RP0=0, select bank0
  5666  0699  1303               	bcf	3,6	;RP1=0, select bank0
  5667  069A  00CD               	movwf	??_GetDigits+2
  5668  069B  084D               	movf	??_GetDigits+2,w
  5669  069C  3E02               	addlw	2
  5670  069D  0084               	movwf	4
  5671  069E  084B               	movf	??_GetDigits,w
  5672  069F  0080               	movwf	0
  5673  06A0                     l153:	
  5674  06A0  0008               	return
  5675  06A1                     __end_of_GetDigits:	
  5676                           
  5677                           	psect	text19
  5678  07DB                     __ptext19:	
  5679 ;; *************** function ___bmul *****************
  5680 ;; Defined at:
  5681 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  multiplier      1    wreg     unsigned char 
  5684 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;  multiplier      1    7[BANK0 ] unsigned char 
  5687 ;;  product         1    6[BANK0 ] unsigned char 
  5688 ;; Return value:  Size  Location     Type
  5689 ;;                  1    wreg      unsigned char 
  5690 ;; Registers used:
  5691 ;;		wreg, status,2, status,0
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5697 ;;      Params:         0       1       0       0       0
  5698 ;;      Locals:         0       2       0       0       0
  5699 ;;      Temps:          0       1       0       0       0
  5700 ;;      Totals:         0       4       0       0       0
  5701 ;;Total ram usage:        4 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    3
  5704 ;; This function calls:
  5705 ;;		Nothing
  5706 ;; This function is called by:
  5707 ;;		_SetReceivedTimes
  5708 ;;		_GetDigits
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           
  5713                           ;psect for function ___bmul
  5714  07DB                     ___bmul:	
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5718                           ;___bmul@multiplier stored from wreg
  5719  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  5720  07DC  1303               	bcf	3,6	;RP1=0, select bank0
  5721  07DD  00A7               	movwf	___bmul@multiplier
  5722  07DE                     l3185:	
  5723  07DE  01A6               	clrf	___bmul@product
  5724  07DF                     l3187:	
  5725  07DF  1C27               	btfss	___bmul@multiplier,0
  5726  07E0  2FE2               	goto	u2451
  5727  07E1  2FE3               	goto	u2450
  5728  07E2                     u2451:	
  5729  07E2  2FE7               	goto	l3191
  5730  07E3                     u2450:	
  5731  07E3                     l3189:	
  5732  07E3  0824               	movf	___bmul@multiplicand,w
  5733  07E4  00A5               	movwf	??___bmul
  5734  07E5  0825               	movf	??___bmul,w
  5735  07E6  07A6               	addwf	___bmul@product,f
  5736  07E7                     l3191:	
  5737  07E7  1003               	clrc
  5738  07E8  0DA4               	rlf	___bmul@multiplicand,f
  5739  07E9                     l3193:	
  5740  07E9  1003               	clrc
  5741  07EA  0CA7               	rrf	___bmul@multiplier,f
  5742  07EB  0827               	movf	___bmul@multiplier,w
  5743  07EC  1D03               	btfss	3,2
  5744  07ED  2FEF               	goto	u2461
  5745  07EE  2FF0               	goto	u2460
  5746  07EF                     u2461:	
  5747  07EF  2FDF               	goto	l3187
  5748  07F0                     u2460:	
  5749  07F0                     l3195:	
  5750  07F0  0826               	movf	___bmul@product,w
  5751  07F1                     l481:	
  5752  07F1  0008               	return
  5753  07F2                     __end_of___bmul:	
  5754                           
  5755                           	psect	text20
  5756  0CBB                     __ptext20:	
  5757 ;; *************** function ___awmod *****************
  5758 ;; Defined at:
  5759 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;  divisor         2   24[BANK0 ] int 
  5762 ;;  dividend        2   26[BANK0 ] int 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  sign            1   30[BANK0 ] unsigned char 
  5765 ;;  counter         1   29[BANK0 ] unsigned char 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  2   24[BANK0 ] int 
  5768 ;; Registers used:
  5769 ;;		wreg, status,2, status,0
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5775 ;;      Params:         0       4       0       0       0
  5776 ;;      Locals:         0       2       0       0       0
  5777 ;;      Temps:          0       1       0       0       0
  5778 ;;      Totals:         0       7       0       0       0
  5779 ;;Total ram usage:        7 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    3
  5782 ;; This function calls:
  5783 ;;		Nothing
  5784 ;; This function is called by:
  5785 ;;		_GetDigits
  5786 ;;		_main
  5787 ;;		_ShowDigitsOnDisplay
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           
  5792                           ;psect for function ___awmod
  5793  0CBB                     ___awmod:	
  5794  0CBB                     l3283:	
  5795                           ;incstack = 0
  5796                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5797                           
  5798  0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  5799  0CBC  1303               	bcf	3,6	;RP1=0, select bank0
  5800  0CBD  01BE               	clrf	___awmod@sign
  5801  0CBE                     l3285:	
  5802  0CBE  1FBB               	btfss	___awmod@dividend+1,7
  5803  0CBF  2CC1               	goto	u2671
  5804  0CC0  2CC2               	goto	u2670
  5805  0CC1                     u2671:	
  5806  0CC1  2CC9               	goto	l3291
  5807  0CC2                     u2670:	
  5808  0CC2                     l3287:	
  5809  0CC2  09BA               	comf	___awmod@dividend,f
  5810  0CC3  09BB               	comf	___awmod@dividend+1,f
  5811  0CC4  0ABA               	incf	___awmod@dividend,f
  5812  0CC5  1903               	skipnz
  5813  0CC6  0ABB               	incf	___awmod@dividend+1,f
  5814  0CC7                     l3289:	
  5815  0CC7  01BE               	clrf	___awmod@sign
  5816  0CC8  0ABE               	incf	___awmod@sign,f
  5817  0CC9                     l3291:	
  5818  0CC9  1FB9               	btfss	___awmod@divisor+1,7
  5819  0CCA  2CCC               	goto	u2681
  5820  0CCB  2CCD               	goto	u2680
  5821  0CCC                     u2681:	
  5822  0CCC  2CD2               	goto	l3295
  5823  0CCD                     u2680:	
  5824  0CCD                     l3293:	
  5825  0CCD  09B8               	comf	___awmod@divisor,f
  5826  0CCE  09B9               	comf	___awmod@divisor+1,f
  5827  0CCF  0AB8               	incf	___awmod@divisor,f
  5828  0CD0  1903               	skipnz
  5829  0CD1  0AB9               	incf	___awmod@divisor+1,f
  5830  0CD2                     l3295:	
  5831  0CD2  0838               	movf	___awmod@divisor,w
  5832  0CD3  0439               	iorwf	___awmod@divisor+1,w
  5833  0CD4  1903               	btfsc	3,2
  5834  0CD5  2CD7               	goto	u2691
  5835  0CD6  2CD8               	goto	u2690
  5836  0CD7                     u2691:	
  5837  0CD7  2D07               	goto	l3313
  5838  0CD8                     u2690:	
  5839  0CD8                     l3297:	
  5840  0CD8  01BD               	clrf	___awmod@counter
  5841  0CD9  0ABD               	incf	___awmod@counter,f
  5842  0CDA  2CE6               	goto	l3303
  5843  0CDB                     l3299:	
  5844  0CDB  3001               	movlw	1
  5845  0CDC                     u2705:	
  5846  0CDC  1003               	clrc
  5847  0CDD  0DB8               	rlf	___awmod@divisor,f
  5848  0CDE  0DB9               	rlf	___awmod@divisor+1,f
  5849  0CDF  3EFF               	addlw	-1
  5850  0CE0  1D03               	skipz
  5851  0CE1  2CDC               	goto	u2705
  5852  0CE2                     l3301:	
  5853  0CE2  3001               	movlw	1
  5854  0CE3  00BC               	movwf	??___awmod
  5855  0CE4  083C               	movf	??___awmod,w
  5856  0CE5  07BD               	addwf	___awmod@counter,f
  5857  0CE6                     l3303:	
  5858  0CE6  1FB9               	btfss	___awmod@divisor+1,7
  5859  0CE7  2CE9               	goto	u2711
  5860  0CE8  2CEA               	goto	u2710
  5861  0CE9                     u2711:	
  5862  0CE9  2CDB               	goto	l3299
  5863  0CEA                     u2710:	
  5864  0CEA                     l3305:	
  5865  0CEA  0839               	movf	___awmod@divisor+1,w
  5866  0CEB  023B               	subwf	___awmod@dividend+1,w
  5867  0CEC  1D03               	skipz
  5868  0CED  2CF0               	goto	u2725
  5869  0CEE  0838               	movf	___awmod@divisor,w
  5870  0CEF  023A               	subwf	___awmod@dividend,w
  5871  0CF0                     u2725:	
  5872  0CF0  1C03               	skipc
  5873  0CF1  2CF3               	goto	u2721
  5874  0CF2  2CF4               	goto	u2720
  5875  0CF3                     u2721:	
  5876  0CF3  2CFA               	goto	l3309
  5877  0CF4                     u2720:	
  5878  0CF4                     l3307:	
  5879  0CF4  0838               	movf	___awmod@divisor,w
  5880  0CF5  02BA               	subwf	___awmod@dividend,f
  5881  0CF6  0839               	movf	___awmod@divisor+1,w
  5882  0CF7  1C03               	skipc
  5883  0CF8  03BB               	decf	___awmod@dividend+1,f
  5884  0CF9  02BB               	subwf	___awmod@dividend+1,f
  5885  0CFA                     l3309:	
  5886  0CFA  3001               	movlw	1
  5887  0CFB                     u2735:	
  5888  0CFB  1003               	clrc
  5889  0CFC  0CB9               	rrf	___awmod@divisor+1,f
  5890  0CFD  0CB8               	rrf	___awmod@divisor,f
  5891  0CFE  3EFF               	addlw	-1
  5892  0CFF  1D03               	skipz
  5893  0D00  2CFB               	goto	u2735
  5894  0D01                     l3311:	
  5895  0D01  3001               	movlw	1
  5896  0D02  02BD               	subwf	___awmod@counter,f
  5897  0D03  1D03               	btfss	3,2
  5898  0D04  2D06               	goto	u2741
  5899  0D05  2D07               	goto	u2740
  5900  0D06                     u2741:	
  5901  0D06  2CEA               	goto	l3305
  5902  0D07                     u2740:	
  5903  0D07                     l3313:	
  5904  0D07  083E               	movf	___awmod@sign,w
  5905  0D08  1903               	btfsc	3,2
  5906  0D09  2D0B               	goto	u2751
  5907  0D0A  2D0C               	goto	u2750
  5908  0D0B                     u2751:	
  5909  0D0B  2D11               	goto	l3317
  5910  0D0C                     u2750:	
  5911  0D0C                     l3315:	
  5912  0D0C  09BA               	comf	___awmod@dividend,f
  5913  0D0D  09BB               	comf	___awmod@dividend+1,f
  5914  0D0E  0ABA               	incf	___awmod@dividend,f
  5915  0D0F  1903               	skipnz
  5916  0D10  0ABB               	incf	___awmod@dividend+1,f
  5917  0D11                     l3317:	
  5918  0D11  083B               	movf	___awmod@dividend+1,w
  5919  0D12  00B9               	movwf	?___awmod+1
  5920  0D13  083A               	movf	___awmod@dividend,w
  5921  0D14  00B8               	movwf	?___awmod
  5922  0D15                     l621:	
  5923  0D15  0008               	return
  5924  0D16                     __end_of___awmod:	
  5925                           
  5926                           	psect	text21
  5927  0DDC                     __ptext21:	
  5928 ;; *************** function ___awdiv *****************
  5929 ;; Defined at:
  5930 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5931 ;; Parameters:    Size  Location     Type
  5932 ;;  divisor         2   31[BANK0 ] int 
  5933 ;;  dividend        2   33[BANK0 ] int 
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;  quotient        2   38[BANK0 ] int 
  5936 ;;  sign            1   37[BANK0 ] unsigned char 
  5937 ;;  counter         1   36[BANK0 ] unsigned char 
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  2   31[BANK0 ] int 
  5940 ;; Registers used:
  5941 ;;		wreg, status,2, status,0
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5947 ;;      Params:         0       4       0       0       0
  5948 ;;      Locals:         0       4       0       0       0
  5949 ;;      Temps:          0       1       0       0       0
  5950 ;;      Totals:         0       9       0       0       0
  5951 ;;Total ram usage:        9 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; Hardware stack levels required when called:    3
  5954 ;; This function calls:
  5955 ;;		Nothing
  5956 ;; This function is called by:
  5957 ;;		_GetDigits
  5958 ;;		_map
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           
  5963                           ;psect for function ___awdiv
  5964  0DDC                     ___awdiv:	
  5965  0DDC                     l3239:	
  5966                           ;incstack = 0
  5967                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5968                           
  5969  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  5970  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  5971  0DDE  01C5               	clrf	___awdiv@sign
  5972  0DDF                     l3241:	
  5973  0DDF  1FC0               	btfss	___awdiv@divisor+1,7
  5974  0DE0  2DE2               	goto	u2571
  5975  0DE1  2DE3               	goto	u2570
  5976  0DE2                     u2571:	
  5977  0DE2  2DEA               	goto	l3247
  5978  0DE3                     u2570:	
  5979  0DE3                     l3243:	
  5980  0DE3  09BF               	comf	___awdiv@divisor,f
  5981  0DE4  09C0               	comf	___awdiv@divisor+1,f
  5982  0DE5  0ABF               	incf	___awdiv@divisor,f
  5983  0DE6  1903               	skipnz
  5984  0DE7  0AC0               	incf	___awdiv@divisor+1,f
  5985  0DE8                     l3245:	
  5986  0DE8  01C5               	clrf	___awdiv@sign
  5987  0DE9  0AC5               	incf	___awdiv@sign,f
  5988  0DEA                     l3247:	
  5989  0DEA  1FC2               	btfss	___awdiv@dividend+1,7
  5990  0DEB  2DED               	goto	u2581
  5991  0DEC  2DEE               	goto	u2580
  5992  0DED                     u2581:	
  5993  0DED  2DF7               	goto	l3253
  5994  0DEE                     u2580:	
  5995  0DEE                     l3249:	
  5996  0DEE  09C1               	comf	___awdiv@dividend,f
  5997  0DEF  09C2               	comf	___awdiv@dividend+1,f
  5998  0DF0  0AC1               	incf	___awdiv@dividend,f
  5999  0DF1  1903               	skipnz
  6000  0DF2  0AC2               	incf	___awdiv@dividend+1,f
  6001  0DF3                     l3251:	
  6002  0DF3  3001               	movlw	1
  6003  0DF4  00C3               	movwf	??___awdiv
  6004  0DF5  0843               	movf	??___awdiv,w
  6005  0DF6  06C5               	xorwf	___awdiv@sign,f
  6006  0DF7                     l3253:	
  6007  0DF7  01C6               	clrf	___awdiv@quotient
  6008  0DF8  01C7               	clrf	___awdiv@quotient+1
  6009  0DF9                     l3255:	
  6010  0DF9  083F               	movf	___awdiv@divisor,w
  6011  0DFA  0440               	iorwf	___awdiv@divisor+1,w
  6012  0DFB  1903               	btfsc	3,2
  6013  0DFC  2DFE               	goto	u2591
  6014  0DFD  2DFF               	goto	u2590
  6015  0DFE                     u2591:	
  6016  0DFE  2E36               	goto	l3275
  6017  0DFF                     u2590:	
  6018  0DFF                     l3257:	
  6019  0DFF  01C4               	clrf	___awdiv@counter
  6020  0E00  0AC4               	incf	___awdiv@counter,f
  6021  0E01  2E0D               	goto	l3263
  6022  0E02                     l3259:	
  6023  0E02  3001               	movlw	1
  6024  0E03                     u2605:	
  6025  0E03  1003               	clrc
  6026  0E04  0DBF               	rlf	___awdiv@divisor,f
  6027  0E05  0DC0               	rlf	___awdiv@divisor+1,f
  6028  0E06  3EFF               	addlw	-1
  6029  0E07  1D03               	skipz
  6030  0E08  2E03               	goto	u2605
  6031  0E09                     l3261:	
  6032  0E09  3001               	movlw	1
  6033  0E0A  00C3               	movwf	??___awdiv
  6034  0E0B  0843               	movf	??___awdiv,w
  6035  0E0C  07C4               	addwf	___awdiv@counter,f
  6036  0E0D                     l3263:	
  6037  0E0D  1FC0               	btfss	___awdiv@divisor+1,7
  6038  0E0E  2E10               	goto	u2611
  6039  0E0F  2E11               	goto	u2610
  6040  0E10                     u2611:	
  6041  0E10  2E02               	goto	l3259
  6042  0E11                     u2610:	
  6043  0E11                     l3265:	
  6044  0E11  3001               	movlw	1
  6045  0E12                     u2625:	
  6046  0E12  1003               	clrc
  6047  0E13  0DC6               	rlf	___awdiv@quotient,f
  6048  0E14  0DC7               	rlf	___awdiv@quotient+1,f
  6049  0E15  3EFF               	addlw	-1
  6050  0E16  1D03               	skipz
  6051  0E17  2E12               	goto	u2625
  6052  0E18  0840               	movf	___awdiv@divisor+1,w
  6053  0E19  0242               	subwf	___awdiv@dividend+1,w
  6054  0E1A  1D03               	skipz
  6055  0E1B  2E1E               	goto	u2635
  6056  0E1C  083F               	movf	___awdiv@divisor,w
  6057  0E1D  0241               	subwf	___awdiv@dividend,w
  6058  0E1E                     u2635:	
  6059  0E1E  1C03               	skipc
  6060  0E1F  2E21               	goto	u2631
  6061  0E20  2E22               	goto	u2630
  6062  0E21                     u2631:	
  6063  0E21  2E29               	goto	l3271
  6064  0E22                     u2630:	
  6065  0E22                     l3267:	
  6066  0E22  083F               	movf	___awdiv@divisor,w
  6067  0E23  02C1               	subwf	___awdiv@dividend,f
  6068  0E24  0840               	movf	___awdiv@divisor+1,w
  6069  0E25  1C03               	skipc
  6070  0E26  03C2               	decf	___awdiv@dividend+1,f
  6071  0E27  02C2               	subwf	___awdiv@dividend+1,f
  6072  0E28                     l3269:	
  6073  0E28  1446               	bsf	___awdiv@quotient,0
  6074  0E29                     l3271:	
  6075  0E29  3001               	movlw	1
  6076  0E2A                     u2645:	
  6077  0E2A  1003               	clrc
  6078  0E2B  0CC0               	rrf	___awdiv@divisor+1,f
  6079  0E2C  0CBF               	rrf	___awdiv@divisor,f
  6080  0E2D  3EFF               	addlw	-1
  6081  0E2E  1D03               	skipz
  6082  0E2F  2E2A               	goto	u2645
  6083  0E30                     l3273:	
  6084  0E30  3001               	movlw	1
  6085  0E31  02C4               	subwf	___awdiv@counter,f
  6086  0E32  1D03               	btfss	3,2
  6087  0E33  2E35               	goto	u2651
  6088  0E34  2E36               	goto	u2650
  6089  0E35                     u2651:	
  6090  0E35  2E11               	goto	l3265
  6091  0E36                     u2650:	
  6092  0E36                     l3275:	
  6093  0E36  0845               	movf	___awdiv@sign,w
  6094  0E37  1903               	btfsc	3,2
  6095  0E38  2E3A               	goto	u2661
  6096  0E39  2E3B               	goto	u2660
  6097  0E3A                     u2661:	
  6098  0E3A  2E40               	goto	l3279
  6099  0E3B                     u2660:	
  6100  0E3B                     l3277:	
  6101  0E3B  09C6               	comf	___awdiv@quotient,f
  6102  0E3C  09C7               	comf	___awdiv@quotient+1,f
  6103  0E3D  0AC6               	incf	___awdiv@quotient,f
  6104  0E3E  1903               	skipnz
  6105  0E3F  0AC7               	incf	___awdiv@quotient+1,f
  6106  0E40                     l3279:	
  6107  0E40  0847               	movf	___awdiv@quotient+1,w
  6108  0E41  00C0               	movwf	?___awdiv+1
  6109  0E42  0846               	movf	___awdiv@quotient,w
  6110  0E43  00BF               	movwf	?___awdiv
  6111  0E44                     l608:	
  6112  0E44  0008               	return
  6113  0E45                     __end_of___awdiv:	
  6114                           
  6115                           	psect	text22
  6116  09F4                     __ptext22:	
  6117 ;; *************** function _ADC_Read *****************
  6118 ;; Defined at:
  6119 ;;		line 348 in file "main.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  canale          1    wreg     unsigned char 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;  canale          1    7[BANK0 ] unsigned char 
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  2    4[BANK0 ] int 
  6126 ;; Registers used:
  6127 ;;		wreg, status,2, status,0
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6133 ;;      Params:         0       2       0       0       0
  6134 ;;      Locals:         0       1       0       0       0
  6135 ;;      Temps:          0       1       0       0       0
  6136 ;;      Totals:         0       4       0       0       0
  6137 ;;Total ram usage:        4 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    3
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		_main
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           
  6148                           ;psect for function _ADC_Read
  6149  09F4                     _ADC_Read:	
  6150                           
  6151                           ;incstack = 0
  6152                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  6153                           ;ADC_Read@canale stored from wreg
  6154  09F4  1283               	bcf	3,5	;RP0=0, select bank0
  6155  09F5  1303               	bcf	3,6	;RP1=0, select bank0
  6156  09F6  00A7               	movwf	ADC_Read@canale
  6157  09F7                     l3461:	
  6158                           
  6159                           ;main.c: 348: int ADC_Read(char canale);main.c: 349: {;main.c: 350:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  6160  09F7  0827               	movf	ADC_Read@canale,w
  6161  09F8  00A6               	movwf	??_ADC_Read
  6162  09F9  3002               	movlw	2
  6163  09FA                     u2875:	
  6164  09FA  1003               	clrc
  6165  09FB  0DA6               	rlf	??_ADC_Read,f
  6166  09FC  3EFF               	addlw	-1
  6167  09FD  1D03               	skipz
  6168  09FE  29FA               	goto	u2875
  6169  09FF  1003               	clrc
  6170  0A00  0D26               	rlf	??_ADC_Read,w
  6171  0A01  3801               	iorlw	1
  6172  0A02  009F               	movwf	31	;volatile
  6173  0A03                     l3463:	
  6174                           
  6175                           ;main.c: 351:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  6176  0A03  3004               	movlw	4
  6177  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  6178  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  6179  0A06  00A6               	movwf	??_ADC_Read
  6180  0A07                     u3167:	
  6181  0A07  0BA6               	decfsz	??_ADC_Read,f
  6182  0A08  2A07               	goto	u3167
  6183  0A09  0000               	nop
  6184  0A0A                     l3465:	
  6185                           
  6186                           ;main.c: 352:     GO_nDONE = 1;
  6187  0A0A  1283               	bcf	3,5	;RP0=0, select bank0
  6188  0A0B  1303               	bcf	3,6	;RP1=0, select bank0
  6189  0A0C  151F               	bsf	31,2	;volatile
  6190  0A0D                     l284:	
  6191                           ;main.c: 354:         ;
  6192                           
  6193                           
  6194                           ;main.c: 353:     while (GO_nDONE)
  6195  0A0D  191F               	btfsc	31,2	;volatile
  6196  0A0E  2A10               	goto	u2881
  6197  0A0F  2A11               	goto	u2880
  6198  0A10                     u2881:	
  6199  0A10  2A0D               	goto	l284
  6200  0A11                     u2880:	
  6201  0A11                     l3467:	
  6202                           
  6203                           ;main.c: 355:     return ADRESL + (ADRESH << 8);
  6204  0A11  081E               	movf	30,w	;volatile
  6205  0A12  00A5               	movwf	?_ADC_Read+1
  6206  0A13  1683               	bsf	3,5	;RP0=1, select bank1
  6207  0A14  1303               	bcf	3,6	;RP1=0, select bank1
  6208  0A15  081E               	movf	30,w	;volatile
  6209  0A16  1283               	bcf	3,5	;RP0=0, select bank0
  6210  0A17  1303               	bcf	3,6	;RP1=0, select bank0
  6211  0A18  00A4               	movwf	?_ADC_Read
  6212  0A19                     l287:	
  6213  0A19  0008               	return
  6214  0A1A                     __end_of_ADC_Read:	
  6215                           
  6216                           	psect	text23
  6217  0C63                     __ptext23:	
  6218 ;; *************** function _ISR *****************
  6219 ;; Defined at:
  6220 ;;		line 526 in file "main.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;		None
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;		None
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  1    wreg      void 
  6227 ;; Registers used:
  6228 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6234 ;;      Params:         0       0       0       0       0
  6235 ;;      Locals:         0       0       0       0       0
  6236 ;;      Temps:          0       4       0       0       0
  6237 ;;      Totals:         0       4       0       0       0
  6238 ;;Total ram usage:        4 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    2
  6241 ;; This function calls:
  6242 ;;		_UART_Read
  6243 ;;		_conteggioVeicoli
  6244 ;; This function is called by:
  6245 ;;		Interrupt level 1
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           
  6250                           ;psect for function _ISR
  6251  0C63                     _ISR:	
  6252  0C63                     i1l2789:	
  6253                           
  6254                           ;main.c: 529:     if (RCIF && readGateway.Bit == 0)
  6255  0C63  1E8C               	btfss	12,5	;volatile
  6256  0C64  2C66               	goto	u217_21
  6257  0C65  2C67               	goto	u217_20
  6258  0C66                     u217_21:	
  6259  0C66  2C70               	goto	i1l2797
  6260  0C67                     u217_20:	
  6261  0C67                     i1l2791:	
  6262  0C67  1863               	btfsc	_readGateway,0
  6263  0C68  2C6A               	goto	u218_21
  6264  0C69  2C6B               	goto	u218_20
  6265  0C6A                     u218_21:	
  6266  0C6A  2C70               	goto	i1l2797
  6267  0C6B                     u218_20:	
  6268  0C6B                     i1l2793:	
  6269                           
  6270                           ;main.c: 530:     {;main.c: 531:         readGateway.Bit = 1;
  6271  0C6B  1463               	bsf	_readGateway,0
  6272                           
  6273                           ;main.c: 532:         readGatewayDone.Bit = 0;
  6274  0C6C  1064               	bcf	_readGatewayDone,0
  6275                           
  6276                           ;main.c: 533:         readGatewayDone.Timeout = 0;
  6277  0C6D  10E4               	bcf	_readGatewayDone,1
  6278  0C6E                     i1l2795:	
  6279                           
  6280                           ;main.c: 534:         dataFromGatewayIndex = 0;
  6281  0C6E  01DE               	clrf	_dataFromGatewayIndex
  6282                           
  6283                           ;main.c: 535:         timerReadFromGateway = 0;
  6284  0C6F  01DD               	clrf	_timerReadFromGateway
  6285  0C70                     i1l2797:	
  6286                           
  6287                           ;main.c: 537:     if (RCIF && readGateway.Bit == 1)
  6288  0C70  1E8C               	btfss	12,5	;volatile
  6289  0C71  2C73               	goto	u219_21
  6290  0C72  2C74               	goto	u219_20
  6291  0C73                     u219_21:	
  6292  0C73  2C8B               	goto	i1l2807
  6293  0C74                     u219_20:	
  6294  0C74                     i1l2799:	
  6295  0C74  1C63               	btfss	_readGateway,0
  6296  0C75  2C77               	goto	u220_21
  6297  0C76  2C78               	goto	u220_20
  6298  0C77                     u220_21:	
  6299  0C77  2C8B               	goto	i1l2807
  6300  0C78                     u220_20:	
  6301  0C78                     i1l2801:	
  6302                           
  6303                           ;main.c: 538:     {;main.c: 539:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  6304  0C78  120A  158A  21B1  120A  158A  	fcall	_UART_Read
  6305  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  6306  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  6307  0C7F  00A0               	movwf	??_ISR
  6308  0C80  085E               	movf	_dataFromGatewayIndex,w
  6309  0C81  3E90               	addlw	(low (_dataFromGateway| (0+256)))& (0+255)
  6310  0C82  0084               	movwf	4
  6311  0C83  0820               	movf	??_ISR,w
  6312  0C84  1783               	bsf	3,7	;select IRP bank3
  6313  0C85  0080               	movwf	0
  6314  0C86                     i1l2803:	
  6315                           
  6316                           ;main.c: 540:         dataFromGatewayIndex++;
  6317  0C86  3001               	movlw	1
  6318  0C87  00A0               	movwf	??_ISR
  6319  0C88  0820               	movf	??_ISR,w
  6320  0C89  07DE               	addwf	_dataFromGatewayIndex,f
  6321  0C8A                     i1l2805:	
  6322                           
  6323                           ;main.c: 541:         timerReadFromGateway = 0;
  6324  0C8A  01DD               	clrf	_timerReadFromGateway
  6325  0C8B                     i1l2807:	
  6326                           
  6327                           ;main.c: 546:     if (TMR0IF)
  6328  0C8B  1D0B               	btfss	11,2	;volatile
  6329  0C8C  2C8E               	goto	u221_21
  6330  0C8D  2C8F               	goto	u221_20
  6331  0C8E                     u221_21:	
  6332  0C8E  2C99               	goto	i1l2815
  6333  0C8F                     u221_20:	
  6334  0C8F                     i1l2809:	
  6335                           
  6336                           ;main.c: 547:     {;main.c: 548:         TMR0IF = 0;
  6337  0C8F  110B               	bcf	11,2	;volatile
  6338  0C90                     i1l2811:	
  6339                           
  6340                           ;main.c: 549:         conteggioVeicoli();
  6341  0C90  120A  158A  2577  120A  158A  	fcall	_conteggioVeicoli
  6342  0C95                     i1l2813:	
  6343                           
  6344                           ;main.c: 550:         TMR0 = 6;
  6345  0C95  3006               	movlw	6
  6346  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  6347  0C97  1303               	bcf	3,6	;RP1=0, select bank0
  6348  0C98  0081               	movwf	1	;volatile
  6349  0C99                     i1l2815:	
  6350                           
  6351                           ;main.c: 553:     if (TMR1IF)
  6352  0C99  1C0C               	btfss	12,0	;volatile
  6353  0C9A  2C9C               	goto	u222_21
  6354  0C9B  2C9D               	goto	u222_20
  6355  0C9C                     u222_21:	
  6356  0C9C  2CB2               	goto	i1l369
  6357  0C9D                     u222_20:	
  6358  0C9D                     i1l2817:	
  6359                           
  6360                           ;main.c: 554:     {;main.c: 555:         TMR1IF = 0;
  6361  0C9D  100C               	bcf	12,0	;volatile
  6362  0C9E                     i1l2819:	
  6363                           
  6364                           ;main.c: 556:         count_lux++;
  6365  0C9E  3001               	movlw	1
  6366  0C9F  00A0               	movwf	??_ISR
  6367  0CA0  0820               	movf	??_ISR,w
  6368  0CA1  07DF               	addwf	_count_lux,f
  6369  0CA2                     i1l2821:	
  6370                           
  6371                           ;main.c: 558:         if (count_lux >= 20)
  6372  0CA2  3014               	movlw	20
  6373  0CA3  025F               	subwf	_count_lux,w
  6374  0CA4  1C03               	skipc
  6375  0CA5  2CA7               	goto	u223_21
  6376  0CA6  2CA8               	goto	u223_20
  6377  0CA7                     u223_21:	
  6378  0CA7  2CAE               	goto	i1l2829
  6379  0CA8                     u223_20:	
  6380  0CA8                     i1l2823:	
  6381                           
  6382                           ;main.c: 559:         {;main.c: 560:             secondPassed.Bit = 1;
  6383  0CA8  1462               	bsf	_secondPassed,0
  6384  0CA9                     i1l2825:	
  6385                           
  6386                           ;main.c: 561:             count_lux = 0;
  6387  0CA9  01DF               	clrf	_count_lux
  6388  0CAA                     i1l2827:	
  6389                           
  6390                           ;main.c: 562:             timerReadFromGateway++;
  6391  0CAA  3001               	movlw	1
  6392  0CAB  00A0               	movwf	??_ISR
  6393  0CAC  0820               	movf	??_ISR,w
  6394  0CAD  07DD               	addwf	_timerReadFromGateway,f
  6395  0CAE                     i1l2829:	
  6396                           
  6397                           ;main.c: 565:         TMR1H = 60;
  6398  0CAE  303C               	movlw	60
  6399  0CAF  008F               	movwf	15	;volatile
  6400  0CB0                     i1l2831:	
  6401                           
  6402                           ;main.c: 566:         TMR1L = 176;
  6403  0CB0  30B0               	movlw	176
  6404  0CB1  008E               	movwf	14	;volatile
  6405  0CB2                     i1l369:	
  6406  0CB2  0823               	movf	??_ISR+3,w
  6407  0CB3  008A               	movwf	10
  6408  0CB4  0822               	movf	??_ISR+2,w
  6409  0CB5  0084               	movwf	4
  6410  0CB6  0E21               	swapf	(??_ISR+1)^0,w
  6411  0CB7  0083               	movwf	3
  6412  0CB8  0EFE               	swapf	btemp,f
  6413  0CB9  0E7E               	swapf	btemp,w
  6414  0CBA  0009               	retfie
  6415  0CBB                     __end_of_ISR:	
  6416                           
  6417                           	psect	intentry
  6418  0004                     __pintentry:	
  6419                           ;incstack = 0
  6420                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6421                           
  6422  0004                     interrupt_function:	
  6423  007E                     saved_w	set	btemp
  6424  0004  00FE               	movwf	btemp
  6425  0005  0E03               	swapf	3,w
  6426  0006  1283               	bcf	3,5	;RP0=0, select bank0
  6427  0007  1303               	bcf	3,6	;RP1=0, select bank0
  6428  0008  00A1               	movwf	??_ISR+1
  6429  0009  0804               	movf	4,w
  6430  000A  00A2               	movwf	??_ISR+2
  6431  000B  080A               	movf	10,w
  6432  000C  00A3               	movwf	??_ISR+3
  6433  000D  120A  158A  2C63   	ljmp	_ISR
  6434                           
  6435                           	psect	text24
  6436  0D77                     __ptext24:	
  6437 ;; *************** function _conteggioVeicoli *****************
  6438 ;; Defined at:
  6439 ;;		line 406 in file "main.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;		None
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;  i               1   13[COMMON] unsigned char 
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  1    wreg      void 
  6446 ;; Registers used:
  6447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6453 ;;      Params:         0       0       0       0       0
  6454 ;;      Locals:         1       0       0       0       0
  6455 ;;      Temps:          4       0       0       0       0
  6456 ;;      Totals:         5       0       0       0       0
  6457 ;;Total ram usage:        5 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; Hardware stack levels required when called:    1
  6460 ;; This function calls:
  6461 ;;		_Conteggio
  6462 ;; This function is called by:
  6463 ;;		_ISR
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           
  6468                           ;psect for function _conteggioVeicoli
  6469  0D77                     _conteggioVeicoli:	
  6470  0D77                     i1l2549:	
  6471                           ;incstack = 0
  6472                           ; Regs used in _conteggioVeicoli: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6473                           
  6474                           
  6475                           ;main.c: 408:     RoadsSensors[0] = PORTBbits.RB3;
  6476  0D77  3000               	movlw	0
  6477  0D78  1283               	bcf	3,5	;RP0=0, select bank0
  6478  0D79  1303               	bcf	3,6	;RP1=0, select bank0
  6479  0D7A  1986               	btfsc	6,3	;volatile
  6480  0D7B  3001               	movlw	1
  6481  0D7C  1683               	bsf	3,5	;RP0=1, select bank1
  6482  0D7D  1303               	bcf	3,6	;RP1=0, select bank1
  6483  0D7E  00B0               	movwf	_RoadsSensors^(0+128)
  6484                           
  6485                           ;main.c: 409:     RoadsSensors[1] = PORTBbits.RB4;
  6486  0D7F  3000               	movlw	0
  6487  0D80  1283               	bcf	3,5	;RP0=0, select bank0
  6488  0D81  1303               	bcf	3,6	;RP1=0, select bank0
  6489  0D82  1A06               	btfsc	6,4	;volatile
  6490  0D83  3001               	movlw	1
  6491  0D84  1683               	bsf	3,5	;RP0=1, select bank1
  6492  0D85  1303               	bcf	3,6	;RP1=0, select bank1
  6493  0D86  00B1               	movwf	(_RoadsSensors^(0+128)+1)
  6494                           
  6495                           ;main.c: 410:     RoadsSensors[2] = PORTBbits.RB5;
  6496  0D87  3000               	movlw	0
  6497  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  6498  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  6499  0D8A  1A86               	btfsc	6,5	;volatile
  6500  0D8B  3001               	movlw	1
  6501  0D8C  1683               	bsf	3,5	;RP0=1, select bank1
  6502  0D8D  1303               	bcf	3,6	;RP1=0, select bank1
  6503  0D8E  00B2               	movwf	(_RoadsSensors^(0+128)+2)
  6504                           
  6505                           ;main.c: 411:     RoadsSensors[3] = PORTAbits.RA5;
  6506  0D8F  3000               	movlw	0
  6507  0D90  1283               	bcf	3,5	;RP0=0, select bank0
  6508  0D91  1303               	bcf	3,6	;RP1=0, select bank0
  6509  0D92  1A85               	btfsc	5,5	;volatile
  6510  0D93  3001               	movlw	1
  6511  0D94  1683               	bsf	3,5	;RP0=1, select bank1
  6512  0D95  1303               	bcf	3,6	;RP1=0, select bank1
  6513  0D96  00B3               	movwf	(_RoadsSensors^(0+128)+3)
  6514  0D97                     i1l2551:	
  6515                           
  6516                           ;main.c: 413:     for (unsigned char i = 0; i < 4; i++)
  6517  0D97  01FD               	clrf	conteggioVeicoli@i
  6518  0D98                     i1l2555:	
  6519                           
  6520                           ;main.c: 414:     {;main.c: 415:         if (!RoadsSensors[i])
  6521  0D98  087D               	movf	conteggioVeicoli@i,w
  6522  0D99  3EB0               	addlw	(low (_RoadsSensors| 0))& (0+255)
  6523  0D9A  0084               	movwf	4
  6524  0D9B  1383               	bcf	3,7	;select IRP bank1
  6525  0D9C  0800               	movf	0,w
  6526  0D9D  1D03               	btfss	3,2
  6527  0D9E  2DA0               	goto	u192_21
  6528  0D9F  2DA1               	goto	u192_20
  6529  0DA0                     u192_21:	
  6530  0DA0  2DAA               	goto	i1l2559
  6531  0DA1                     u192_20:	
  6532  0DA1                     i1l2557:	
  6533                           
  6534                           ;main.c: 416:         {;main.c: 417:             count++;
  6535  0DA1  3001               	movlw	1
  6536  0DA2  1683               	bsf	3,5	;RP0=1, select bank1
  6537  0DA3  1303               	bcf	3,6	;RP1=0, select bank1
  6538  0DA4  07B4               	addwf	_count^(0+128),f
  6539  0DA5  1803               	skipnc
  6540  0DA6  0AB5               	incf	(_count+1)^(0+128),f
  6541  0DA7  3000               	movlw	0
  6542  0DA8  07B5               	addwf	(_count+1)^(0+128),f
  6543                           
  6544                           ;main.c: 418:         }
  6545  0DA9  2DD1               	goto	i1l2565
  6546  0DAA                     i1l2559:	
  6547  0DAA  087D               	movf	conteggioVeicoli@i,w
  6548  0DAB  3EB0               	addlw	(low (_RoadsSensors| 0))& (0+255)
  6549  0DAC  0084               	movwf	4
  6550  0DAD  0800               	movf	0,w
  6551  0DAE  1903               	btfsc	3,2
  6552  0DAF  2DB1               	goto	u193_21
  6553  0DB0  2DB2               	goto	u193_20
  6554  0DB1                     u193_21:	
  6555  0DB1  2DD1               	goto	i1l2565
  6556  0DB2                     u193_20:	
  6557  0DB2                     i1l2561:	
  6558                           
  6559                           ;main.c: 420:         {;main.c: 421:             Conteggio(count, motorcycle, car, truck
      +                          , i);
  6560  0DB2  1683               	bsf	3,5	;RP0=1, select bank1
  6561  0DB3  1303               	bcf	3,6	;RP1=0, select bank1
  6562  0DB4  0835               	movf	(_count+1)^(0+128),w
  6563  0DB5  00F1               	movwf	Conteggio@_count+1
  6564  0DB6  0834               	movf	_count^(0+128),w
  6565  0DB7  00F0               	movwf	Conteggio@_count
  6566  0DB8  30BF               	movlw	(low (_motorcycle| 0))& (0+255)
  6567  0DB9  00F9               	movwf	??_conteggioVeicoli
  6568  0DBA  0879               	movf	??_conteggioVeicoli,w
  6569  0DBB  00F2               	movwf	Conteggio@_motorcycle
  6570  0DBC  30BB               	movlw	(low (_car| 0))& (0+255)
  6571  0DBD  00FA               	movwf	??_conteggioVeicoli+1
  6572  0DBE  087A               	movf	??_conteggioVeicoli+1,w
  6573  0DBF  00F3               	movwf	Conteggio@_car
  6574  0DC0  30B7               	movlw	(low (_truck| 0))& (0+255)
  6575  0DC1  00FB               	movwf	??_conteggioVeicoli+2
  6576  0DC2  087B               	movf	??_conteggioVeicoli+2,w
  6577  0DC3  00F4               	movwf	Conteggio@_truck
  6578  0DC4  087D               	movf	conteggioVeicoli@i,w
  6579  0DC5  00FC               	movwf	??_conteggioVeicoli+3
  6580  0DC6  087C               	movf	??_conteggioVeicoli+3,w
  6581  0DC7  00F5               	movwf	Conteggio@index
  6582  0DC8  120A  158A  236F  120A  158A  	fcall	_Conteggio
  6583  0DCD                     i1l2563:	
  6584                           
  6585                           ;main.c: 422:             count = 0;
  6586  0DCD  1683               	bsf	3,5	;RP0=1, select bank1
  6587  0DCE  1303               	bcf	3,6	;RP1=0, select bank1
  6588  0DCF  01B4               	clrf	_count^(0+128)
  6589  0DD0  01B5               	clrf	(_count+1)^(0+128)
  6590  0DD1                     i1l2565:	
  6591                           
  6592                           ;main.c: 424:     }
  6593  0DD1  3001               	movlw	1
  6594  0DD2  00F9               	movwf	??_conteggioVeicoli
  6595  0DD3  0879               	movf	??_conteggioVeicoli,w
  6596  0DD4  07FD               	addwf	conteggioVeicoli@i,f
  6597  0DD5                     i1l2567:	
  6598  0DD5  3004               	movlw	4
  6599  0DD6  027D               	subwf	conteggioVeicoli@i,w
  6600  0DD7  1C03               	skipc
  6601  0DD8  2DDA               	goto	u194_21
  6602  0DD9  2DDB               	goto	u194_20
  6603  0DDA                     u194_21:	
  6604  0DDA  2D98               	goto	i1l2555
  6605  0DDB                     u194_20:	
  6606  0DDB                     i1l321:	
  6607  0DDB  0008               	return
  6608  0DDC                     __end_of_conteggioVeicoli:	
  6609                           
  6610                           	psect	text25
  6611  0B6F                     __ptext25:	
  6612 ;; *************** function _Conteggio *****************
  6613 ;; Defined at:
  6614 ;;		line 99 in file "./CustomLib/TrafficLight.h"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  _count          2    0[COMMON] unsigned int 
  6617 ;;  _motorcycle     1    2[COMMON] PTR unsigned char 
  6618 ;;		 -> motorcycle(4), 
  6619 ;;  _car            1    3[COMMON] PTR unsigned char 
  6620 ;;		 -> car(4), 
  6621 ;;  _truck          1    4[COMMON] PTR unsigned char 
  6622 ;;		 -> truck(4), 
  6623 ;;  index           1    5[COMMON] unsigned char 
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;		None
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  1    wreg      void 
  6628 ;; Registers used:
  6629 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6635 ;;      Params:         6       0       0       0       0
  6636 ;;      Locals:         0       0       0       0       0
  6637 ;;      Temps:          3       0       0       0       0
  6638 ;;      Totals:         9       0       0       0       0
  6639 ;;Total ram usage:        9 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; This function calls:
  6642 ;;		Nothing
  6643 ;; This function is called by:
  6644 ;;		_conteggioVeicoli
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           
  6649                           ;psect for function _Conteggio
  6650  0B6F                     _Conteggio:	
  6651  0B6F                     i1l2131:	
  6652                           ;incstack = 0
  6653                           ; Regs used in _Conteggio: [wreg-fsr0h+status,2+status,0]
  6654                           
  6655                           
  6656                           ;./CustomLib/TrafficLight.h: 99: void Conteggio(unsigned int _count, unsigned char _moto
      +                          rcycle[4], unsigned char _car[4], unsigned char _truck[4], unsigned char index);./Custom
      +                          Lib/TrafficLight.h: 100: {;./CustomLib/TrafficLight.h: 101:     if (_count >= 500)
  6657  0B6F  3001               	movlw	1
  6658  0B70  0271               	subwf	Conteggio@_count+1,w
  6659  0B71  30F4               	movlw	244
  6660  0B72  1903               	skipnz
  6661  0B73  0270               	subwf	Conteggio@_count,w
  6662  0B74  1C03               	skipc
  6663  0B75  2B77               	goto	u130_21
  6664  0B76  2B78               	goto	u130_20
  6665  0B77                     u130_21:	
  6666  0B77  2B88               	goto	i1l2135
  6667  0B78                     u130_20:	
  6668  0B78                     i1l2133:	
  6669                           
  6670                           ;./CustomLib/TrafficLight.h: 102:     {;./CustomLib/TrafficLight.h: 103:         _motorc
      +                          ycle[index] = _motorcycle[index] + 1;
  6671  0B78  0875               	movf	Conteggio@index,w
  6672  0B79  0772               	addwf	Conteggio@_motorcycle,w
  6673  0B7A  00F6               	movwf	??_Conteggio
  6674  0B7B  0876               	movf	??_Conteggio,w
  6675  0B7C  0084               	movwf	4
  6676  0B7D  1383               	bcf	3,7	;select IRP bank0
  6677  0B7E  0800               	movf	0,w
  6678  0B7F  3E01               	addlw	1
  6679  0B80  00F7               	movwf	??_Conteggio+1
  6680  0B81  0875               	movf	Conteggio@index,w
  6681  0B82  0772               	addwf	Conteggio@_motorcycle,w
  6682  0B83  00F8               	movwf	??_Conteggio+2
  6683  0B84  0878               	movf	??_Conteggio+2,w
  6684  0B85  0084               	movwf	4
  6685  0B86  0877               	movf	??_Conteggio+1,w
  6686  0B87  0080               	movwf	0
  6687  0B88                     i1l2135:	
  6688                           
  6689                           ;./CustomLib/TrafficLight.h: 105:     if (_count >= 1500)
  6690  0B88  3005               	movlw	5
  6691  0B89  0271               	subwf	Conteggio@_count+1,w
  6692  0B8A  30DC               	movlw	220
  6693  0B8B  1903               	skipnz
  6694  0B8C  0270               	subwf	Conteggio@_count,w
  6695  0B8D  1C03               	skipc
  6696  0B8E  2B90               	goto	u131_21
  6697  0B8F  2B91               	goto	u131_20
  6698  0B90                     u131_21:	
  6699  0B90  2BA1               	goto	i1l2139
  6700  0B91                     u131_20:	
  6701  0B91                     i1l2137:	
  6702                           
  6703                           ;./CustomLib/TrafficLight.h: 106:     {;./CustomLib/TrafficLight.h: 107:         _car[in
      +                          dex] = _car[index] + 1;
  6704  0B91  0875               	movf	Conteggio@index,w
  6705  0B92  0773               	addwf	Conteggio@_car,w
  6706  0B93  00F6               	movwf	??_Conteggio
  6707  0B94  0876               	movf	??_Conteggio,w
  6708  0B95  0084               	movwf	4
  6709  0B96  1383               	bcf	3,7	;select IRP bank0
  6710  0B97  0800               	movf	0,w
  6711  0B98  3E01               	addlw	1
  6712  0B99  00F7               	movwf	??_Conteggio+1
  6713  0B9A  0875               	movf	Conteggio@index,w
  6714  0B9B  0773               	addwf	Conteggio@_car,w
  6715  0B9C  00F8               	movwf	??_Conteggio+2
  6716  0B9D  0878               	movf	??_Conteggio+2,w
  6717  0B9E  0084               	movwf	4
  6718  0B9F  0877               	movf	??_Conteggio+1,w
  6719  0BA0  0080               	movwf	0
  6720  0BA1                     i1l2139:	
  6721                           
  6722                           ;./CustomLib/TrafficLight.h: 109:     if (_count >= 3000)
  6723  0BA1  300B               	movlw	11
  6724  0BA2  0271               	subwf	Conteggio@_count+1,w
  6725  0BA3  30B8               	movlw	184
  6726  0BA4  1903               	skipnz
  6727  0BA5  0270               	subwf	Conteggio@_count,w
  6728  0BA6  1C03               	skipc
  6729  0BA7  2BA9               	goto	u132_21
  6730  0BA8  2BAA               	goto	u132_20
  6731  0BA9                     u132_21:	
  6732  0BA9  2BBA               	goto	i1l159
  6733  0BAA                     u132_20:	
  6734  0BAA                     i1l2141:	
  6735                           
  6736                           ;./CustomLib/TrafficLight.h: 110:     {;./CustomLib/TrafficLight.h: 111:         _truck[
      +                          index] = _truck[index] + 1;
  6737  0BAA  0875               	movf	Conteggio@index,w
  6738  0BAB  0774               	addwf	Conteggio@_truck,w
  6739  0BAC  00F6               	movwf	??_Conteggio
  6740  0BAD  0876               	movf	??_Conteggio,w
  6741  0BAE  0084               	movwf	4
  6742  0BAF  1383               	bcf	3,7	;select IRP bank0
  6743  0BB0  0800               	movf	0,w
  6744  0BB1  3E01               	addlw	1
  6745  0BB2  00F7               	movwf	??_Conteggio+1
  6746  0BB3  0875               	movf	Conteggio@index,w
  6747  0BB4  0774               	addwf	Conteggio@_truck,w
  6748  0BB5  00F8               	movwf	??_Conteggio+2
  6749  0BB6  0878               	movf	??_Conteggio+2,w
  6750  0BB7  0084               	movwf	4
  6751  0BB8  0877               	movf	??_Conteggio+1,w
  6752  0BB9  0080               	movwf	0
  6753  0BBA                     i1l159:	
  6754  0BBA  0008               	return
  6755  0BBB                     __end_of_Conteggio:	
  6756                           
  6757                           	psect	text26
  6758  09B1                     __ptext26:	
  6759 ;; *************** function _UART_Read *****************
  6760 ;; Defined at:
  6761 ;;		line 387 in file "main.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;		None
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;		None
  6766 ;; Return value:  Size  Location     Type
  6767 ;;                  1    wreg      unsigned char 
  6768 ;; Registers used:
  6769 ;;		wreg
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6775 ;;      Params:         0       0       0       0       0
  6776 ;;      Locals:         0       0       0       0       0
  6777 ;;      Temps:          0       0       0       0       0
  6778 ;;      Totals:         0       0       0       0       0
  6779 ;;Total ram usage:        0 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; This function calls:
  6782 ;;		Nothing
  6783 ;; This function is called by:
  6784 ;;		_ISR
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           
  6789                           ;psect for function _UART_Read
  6790  09B1                     _UART_Read:	
  6791  09B1                     i1l2543:	
  6792                           ;incstack = 0
  6793                           ; Regs used in _UART_Read: [wreg]
  6794                           
  6795  09B1                     i1l305:	
  6796                           ;main.c: 390:         ;
  6797                           
  6798                           
  6799                           ;main.c: 389:     while (!RCIF)
  6800  09B1  1283               	bcf	3,5	;RP0=0, select bank0
  6801  09B2  1303               	bcf	3,6	;RP1=0, select bank0
  6802  09B3  1E8C               	btfss	12,5	;volatile
  6803  09B4  29B6               	goto	u191_21
  6804  09B5  29B7               	goto	u191_20
  6805  09B6                     u191_21:	
  6806  09B6  29B1               	goto	i1l305
  6807  09B7                     u191_20:	
  6808  09B7                     i1l307:	
  6809                           
  6810                           ;main.c: 391:     RCIF = 0;
  6811  09B7  128C               	bcf	12,5	;volatile
  6812  09B8                     i1l2545:	
  6813                           
  6814                           ;main.c: 392:     return RCREG;
  6815  09B8  081A               	movf	26,w	;volatile
  6816  09B9                     i1l308:	
  6817  09B9  0008               	return
  6818  09BA                     __end_of_UART_Read:	
  6819  007E                     btemp	set	126	;btemp
  6820  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    12
    Data        20
    BSS         196
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     59      69
    BANK1            80      0      79
    BANK3            96     11      96
    BANK2            96      0      42

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    DigitsArr	PTR struct .[8] size(1) Largest target is 3
		 -> digits7(BANK1[3]), digits6(BANK1[3]), digits5(BANK1[3]), digits4(BANK1[3]), 
		 -> digits3(BANK1[3]), digits2(BANK1[3]), digits1(BANK1[3]), digits0(BANK1[3]), 

    Semafori	PTR struct .[8] size(1) Largest target is 14
		 -> s7(BANK2[14]), s6(BANK2[14]), s5(BANK2[14]), s4(BANK3[14]), 
		 -> s3(BANK3[14]), s2(BANK3[14]), s1(BANK3[14]), s0(BANK3[14]), 

    Conteggio@_truck	PTR unsigned char  size(1) Largest target is 4
		 -> truck(BANK1[4]), 

    Conteggio@_car	PTR unsigned char  size(1) Largest target is 4
		 -> car(BANK1[4]), 

    Conteggio@_motorcycle	PTR unsigned char  size(1) Largest target is 4
		 -> motorcycle(BANK1[4]), 

    GetDigits@_digits	PTR PTR struct . size(1) Largest target is 8
		 -> DigitsArr(BANK1[8]), 

    SetReceivedTimes@_semafori	PTR PTR struct . size(1) Largest target is 8
		 -> Semafori(BANK1[8]), 

    SetReceivedTimes@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK3[15]), 

    SetDefaultTimers@_semafori	PTR PTR struct . size(1) Largest target is 8
		 -> Semafori(BANK1[8]), 

    GetTime@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK3[15]), 

    UpdateTimes@_semafori	PTR PTR struct . size(1) Largest target is 8
		 -> Semafori(BANK1[8]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli
    _conteggioVeicoli->_Conteggio

Critical Paths under _main in BANK0

    _main->_map
    _sendByte->_BuildByte
    _rand->___lmul
    _map->___awdiv
    _UART_Init->___aldiv
    _ShowDigitsOnDisplay->___awmod
    _SetReceivedTimes->_GetTime
    _GetDigits->___awdiv
    ___awmod->_rand
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   26193
                                             50 BANK0      9     9      0
                                              0 BANK3     11    11      0
                           _ADC_Read
                          _GetDigits
                   _SetDefaultTimers
                   _SetReceivedTimes
                _ShowDigitsOnDisplay
                          _UART_Init
                        _UpdateTimes
                            ___awmod
                           _init_ADC
                       _luciSemaforo
                                _map
                               _rand
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    4067
                                             24 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1138
                                              4 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _rand                                                 7     5      2     316
                                             17 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     316
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    5628
                                             40 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2716
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _luciSemaforo                                         4     3      1     183
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UpdateTimes                                         13    13      0     668
                                              4 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             19 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              4 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _ShowDigitsOnDisplay                                  3     3      0    3554
                                             31 BANK0      3     3      0
                         _SetDisplay
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _SetDisplay                                           7     3      4    1514
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _SetReceivedTimes                                    10     9      1    1678
                                             12 BANK0     10     9      1
                            _GetTime
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              8     6      2     384
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    12     5      7    1457
                                              4 BANK0     12     5      7
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            9     6      3    4413
                                             40 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     781
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1693
                                             24 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1345
                                             31 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0     822
                                              0 BANK0      4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     5     5      0     822
                                              9 COMMON     5     5      0
                          _Conteggio
 ---------------------------------------------------------------------------------
 (5) _Conteggio                                            9     3      6     710
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       ___wmul (ARG)
     ___awmod
       _rand (ARG)
         ___lmul
     ___bmul
   _SetDefaultTimers
   _SetReceivedTimes
     _GetTime
     ___bmul
   _ShowDigitsOnDisplay
     _SetDisplay
     ___awmod
       _rand (ARG)
         ___lmul
   _UART_Init
     ___aldiv
   _UpdateTimes
   ___awmod
     _rand (ARG)
       ___lmul
   _init_ADC
   _luciSemaforo
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       ___wmul (ARG)
     ___wmul (ARG)
   _rand
     ___lmul
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli
     _Conteggio

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      B      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      2A      11       43.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3B      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     12C      12        0.0%
ABS                  0      0     12C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Jul 16 17:45:35 2020

                 luciSemaforo@lux 0024                                 pc 0002                    ___bmul@product 0026  
                     __CFG_CP$OFF 0000                      ___awdiv@sign 0045                                _s0 01D7  
                              _s1 01C9                                _s2 01BB                                _s3 01AD  
                              _s4 019F                                _s5 012C                                _s6 011E  
                              _s7 0110                                fsr 0004               ___wmul@multiplicand 0026  
                  _GetDigits$1248 004E                 luciSemaforo@index 0027                       __CFG_LVP$ON 0000  
                             l111 0740                               l105 06EF                               l130 0B26  
                             l114 0768                               l142 05D3                               l127 07DA  
                             l240 039B                               l153 06A0                               l313 0A71  
                             l330 0BC7                               l162 0AA6                               l242 0092  
                             l147 0D76                               l334 0BDE                               l327 0BBF  
                             l520 0ECA                               l336 0BE2                               l256 029E  
                             l345 0C62                               l281 09CC                               l337 0BE6  
                             l329 0BC3                               l530 0F52                               l290 0AE0  
                             l338 0C0D                               l274 04FA                               l284 0A0D  
                             l621 0D15                               l293 07F5                               l287 0A19  
                             l359 0FFF                               l455 0A28                               l295 07F9  
                             l608 0E44                               l296 07FC                               l481 07F1  
                             l457 0A40                               l469 0B6E                               l905 0EB5  
                    __CFG_CPD$OFF 0000                               _ISR 0C63                               _car 00BB  
                             _map 0A72                               fsr0 0004                               indf 0000  
                    ___awmod@sign 003E                      __CFG_FOSC$HS 0000                              ?_ISR 0070  
           ??_ShowDigitsOnDisplay 003F                              l3101 0719                              l3103 072D  
                            l3121 0AE4                              l3201 0EB9                              l3113 0754  
                            l3105 0733                              l3131 0B22                              l3123 0AF3  
                            l3211 0EE5                              l3203 0EBD                              l3115 075A  
                            l3107 0746                              l3301 0CE2                              l3125 0AFB  
                            l3141 0C12                              l3221 0F0A                              l3213 0EED  
                            l3205 0ECE                              l3117 0767                              l3109 0753  
                            l3061 06C2                              l3053 06A4                              l3311 0D01  
                            l3303 0CE6                              l3127 0B0C                              l3143 0C30  
                            l3223 0F1C                              l3215 0EF0                              l3231 0F3A  
                            l3207 0ED9                              l3055 06B3                              l3135 07F5  
                            l3241 0DDF                              l3305 0CEA                              l3313 0D07  
                            l3129 0B1A                              l3145 0C33                              l3233 0F3F  
                            l3225 0F2A                              l3217 0EFD                              l3209 0EDD  
                            l3321 076C                              l3161 0A22                              l3081 06FD  
                            l3073 06C8                              l3057 06C0                              l3137 07FA  
                            l3251 0DF3                              l3243 0DE3                              l3315 0D0C  
                            l3307 0CF4                              l3411 0666                              l3403 05D7  
                            l3139 0C11                              l3235 0F4A                              l3227 0F2B  
                            l3219 0F01                              l3163 0A2F                              l3171 0B27  
                            l3075 06DC                              l3067 06C4                              l3059 06C1  
                            l3261 0E09                              l3253 0DF7                              l3245 0DE8  
                            l3317 0D11                              l3309 0CFA                              l3413 0679  
                            l3405 05D8                              l3149 0C52                              l3229 0F34  
                            l3333 076E                              l3421 09BE                              l3165 0A36  
                            l3157 0A1A                              l3181 0B66                              l3173 0B31  
                            l3085 06FE                              l3077 06E2                              l3271 0E29  
                            l3263 0E0D                              l3255 0DF9                              l3247 0DEA  
                            l3239 0DDC                              l3191 07E7                              l3407 05ED  
                            l3511 0F62                              l3503 0F53                              l3431 0ADD  
                            l3343 07D0                              l3335 079F                              l3327 076D  
                            l3423 09C1                              l3167 0A3C                              l3159 0A1E  
                            l3415 0A72                              l3175 0B35                              l3095 0715  
                            l3087 0704                              l3079 06F5                              l3273 0E30  
                            l3265 0E11                              l3257 0DFF                              l3249 0DEE  
                            l3193 07E9                              l3185 07DE                              l3409 0609  
                            l3361 0522                              l3353 050A                              l3513 0F7D  
                            l3433 0ADE                              l3345 07D4                              l3337 07C6  
                            l3425 09C5                              l3177 0B4C                              l3441 0E90  
                            l3089 0711                              l3601 0254                              l3267 0E22  
                            l3259 0E02                              l3275 0E36                              l3291 0CC9  
                            l3283 0CBB                              l3195 07F0                              l3187 07DF  
                            l3363 054A                              l3371 05AD                              l3355 0520  
                            l3347 0507                              l3515 0F88                              l3523 0FCA  
                            l3435 0ADF                              l3427 0AA7                              l3339 07CA  
                            l3419 09BA                              l3179 0B55                              l3611 0264  
                            l3603 025C                              l3461 09F7                              l3277 0E3B  
                            l3269 0E28                              l3293 0CCD                              l3285 0CBE  
                            l3189 07E3                              l3373 05B1                              l3365 0572  
                            l3517 0F92                              l3525 0FDD                              l3509 0F57  
                            l3429 0AAF                              l3437 0E45                              l3453 0A58  
                            l3445 0A44                              l3701 0454                              l3613 0273  
                            l3605 0262                              l3541 0050                              l3463 0A03  
                            l3279 0E40                              l3295 0CD2                              l3287 0CC2  
                            l3375 05B7                              l3391 0D21                              l3527 0FE3  
                            l3519 0FAD                              l3199 0EB6                              l3471 0BBE  
                            l3439 0E82                              l3455 0A61                              l3447 0A57  
                            l3711 047B                              l3631 0330                              l3623 0290  
                            l3615 0279                              l3551 005C                              l3543 0052  
                            l3535 0047                              l3465 0A0A                              l3297 0CD8  
                            l3289 0CC7                              l3377 05BB                              l3369 059A  
                            l3393 0D30                              l3385 0D19                              l3529 0FE9  
                            l3457 0A67                              l3705 045B                              l3713 0483  
                            l3633 033D                              l3625 0295                              l3617 0286  
                            l3561 0088                              l3553 005E                              l3545 0054  
                            l3537 004D                              l3467 0A11                              l3299 0CDB  
                            l3379 05C1                              l3395 0D3E                              l3387 0D1A  
                            l3475 0BCB                              l3483 0BFD                              l3459 0A6B  
                            l3731 04FE                              l3715 0493                              l3707 0472  
                            l3723 04E9                              l3651 0379                              l3643 0365  
                            l3635 034A                              l3619 0289                              l3571 008D  
                            l3563 0089                              l3555 0063                              l3547 0058  
                            l3539 004E                              l3397 0D51                              l3733 0502  
                            l3725 04EE                              l3717 04A7                              l3661 03A1  
                            l3653 037C                              l3645 036A                              l3637 035B  
                            l3629 02A0                              l3581 0097                              l3565 008A  
                            l3557 006E                              l3549 005A                              ?_map 0048  
                            l3399 0D71                              l3479 0BEA                              l3727 04F4  
                            l3719 04E0                              l3671 03AB                              l3663 03A2  
                            l3655 0382                              l3639 035E                              l3591 016E  
                            l3583 00FD                              l3575 0094                              l3567 008B  
                            l3559 0085                              l3729 04F8                              l3665 03A3  
                            l3673 03B5                              l3649 0373                              l3593 01B2  
                            l3585 010B                              l3569 008C                              l3691 043D  
                            l3683 03C9                              l3675 03BB                              l3667 03A5  
                            l3595 01F6                              l3587 011A                              l3659 0386  
                            l3693 0445                              l3685 03DD                              l3677 03BF  
                            l3669 03A9                              l3589 012A                              l3695 0446  
                            l3687 042A                              l3679 03C2                              l3599 023A  
                            l3697 044B                              l3689 0430                              l3699 0451  
                            l3981 0BF2                              l3983 0C05                              l3975 0246  
                            l3985 0FD2                              l3977 0393                              l3987 0C5A  
                            l3979 0BD3                              l3989 05A2                              u3000 03A1  
                            u3001 03A0                              u3010 03A9                              u3011 03A8  
                            u2300 0740                              u3100 04F4                              u3020 03BB  
                            u2301 073F                              u3101 04F3                              u3021 03BA  
                            u2310 0746                              u3110 04F8                              u3030 03BF  
                            u2311 0745                              u3111 04F7                              u3031 03BE  
                            u2400 0B35                              u3120 04FE                              u3040 03C8  
                            u2401 0B34                              u2305 073C                              u3121 04FD  
                            u3041 03C7                              u2330 0767                              u3130 0502  
                            u3050 03DD                              u2411 0B3E                              u2331 0766  
                            u3131 0501                              u3051 03DC                              u2412 0B45  
                            u2324 074C                              u2260 06EF                              u3060 042A  
                            u2413 0B4C                              u2325 074A                              u2261 06EE  
                            u2245 06B6                              u3061 0429                              u2510 0F01  
                            u2270 06F5                              u2254 06D4                              u2350 07F9  
                            u3070 0445                              u2511 0F00                              u2335 0763  
                            u2271 06F4                              u2255 06D2                              u2351 07F8  
                            u3071 0444                              u2360 0A22                              u2440 0B66  
                            u2280 0711                              u3080 044B                              u2345 0B01  
                            u2505 0EF2                              u2361 0A21                              u2441 0B65  
                            u2425 0B4E                              u2281 0710                              u2265 06EB  
                            u3081 044A                              u2610 0E11                              u2450 07E3  
                            u2530 0F1C                              u3090 045A                              u2611 0E10  
                            u2451 07E2                              u2531 0F1B                              u2435 0B56  
                            u3091 0459                              u2460 07F0                              u2605 0E03  
                            u2461 07EF                              u2525 0F03                              u3157 09C9  
                            u2285 070D                              u2630 0E22                              u2710 0CEA  
                            u2550 0F3A                              u2470 0EBD                              u2390 0A3C  
                            u2294 0725                              u3167 0A07                              u2631 0E21  
                            u2711 0CE9                              u2551 0F39                              u2535 0F18  
                            u2471 0EBC                              u2391 0A3B                              u2375 0A29  
                            u2295 0723                              u2720 0CF4                              u2800 05C1  
                            u2560 0F3F                              u2480 0ECE                              u2625 0E12  
                            u2721 0CF3                              u2705 0CDC                              u2801 05C0  
                            u2561 0F3E                              u2545 0F2C                              u2481 0ECD  
                            u2385 0A30                              u2650 0E36                              u2570 0DE3  
                            u2810 0D20                              u2490 0EED                              u2651 0E35  
                            u2635 0E1E                              u2571 0DE2                              u2811 0D1F  
                            u2491 0EEC                              u2660 0E3B                              u2580 0DEE  
                            u2740 0D07                              u2900 0F88                              u2661 0E3A  
                            u2645 0E2A                              u2581 0DED                              u2741 0D06  
                            u2725 0CF0                              u2901 0F87                              u2590 0DFF  
                            u2750 0D0C                              u2670 0CC2                              u2830 0609  
                            u2910 0F92                              u2591 0DFE                              u2751 0D0B  
                            u2735 0CFB                              u2671 0CC1                              u2831 0608  
                            u2911 0F91                              u2680 0CCD                              u2920 0FE9  
                            u2840 0ABE                              u2760 079F                              u2681 0CCC  
                            u2825 0D46                              u2921 0FE8                              u2761 079E  
                            u2690 0CD8                              u2770 07D0                              u2850 0EAD  
                            u2930 0091                              u2691 0CD7                              u2835 0605  
                            u2771 07CF                              u2931 0090                              u2780 07DA  
                            u2860 0A71                              u2940 0262                              u2845 0AB9  
                            u2781 07D9                              u2765 079B                              u2861 0A70  
                            u2941 0261                              u2790 05B7                              u2950 0286  
                            u2791 05B6                              u2855 0EA8                              u2951 0285  
                            u2880 0A11                              u2960 028F                              u2881 0A10  
                            u2961 028E                              u2890 0F62                              u2970 0364  
                            u2875 09FA                              u2891 0F61                              u2971 0363  
                            u2955 0282                              u2980 0379                              _RCIF 0065  
                            u2981 0378                              u2990 0382                              u2991 0381  
                            _TMR0 0001                              _TXIF 0064                      __CFG_WRT$OFF 0000  
                            _disp 0060                              _main 0047                              _rand 0E45  
                            _temp 005C                              _time 00A0                              map@x 0048  
                            btemp 007E                  __end_of_ADC_Read 0A1A                     __CFG_BOREN$ON 0000  
                            start 0010                   __end_of_GetTime 0B27                 ___bmul@multiplier 0027  
                           ??_ISR 0020         __size_of_conteggioVeicoli 0065                             ??_map 0052  
                 __end_of___aldiv 0F53                             ?_main 0070                             ?_rand 0031  
                 __end_of___awdiv 0E45                     __CFG_WDTE$OFF 0000                   __end_of___awmod 0D16  
                 ___awdiv@divisor 003F                             _T1CON 0010                             i1l305 09B1  
                           i1l321 0DDB                             i1l307 09B7                             i1l308 09B9  
                           i1l159 0BBA                             i1l369 0CB2                   ___awdiv@counter 0044  
                           _RCREG 001A              UpdateTimes@_semafori 002E                             _TMR1H 000F  
                           _TMR1L 000E                             _SPBRG 0099                             _PORTD 0008  
                           _TRISA 0085                             _TRISB 0086                             _TRISC 0087  
                           _TRISD 0088                             _TRISE 0089                             _TXREG 0019  
             ___lmul@multiplicand 0028                     __CFG_PWRTE$ON 0000                __size_of_UART_Init 003A  
              __size_of_UART_Read 0009                   __end_of_display 0811                             _count 00B4  
                           _randx 00DB                             main@i 01EF                             main@l 01EA  
                           _truck 00B7                             pclath 000A                             status 0003  
                           wtemp0 007E                   __initialization 0013                      __end_of_main 0507  
                    __end_of_rand 0EB6         __size_of_SetReceivedTimes 0061                __size_of_GetDigits 00CD  
                          ??_main 0052                            ??_rand 0033                 SetDefaultTimers@i 002E  
               SetDefaultTimers@l 002F                __size_of_BuildByte 00C8                        _SetDisplay 0C0E  
                          _ADCON0 001F                            _ADCON1 009F                __size_of_Conteggio 004C  
                          _ADRESH 001E                            _ADRESL 009E                  ___awdiv@dividend 0041  
                          i1l2131 0B6F                            i1l2141 0BAA                            i1l2133 0B78  
                          i1l2135 0B88                            i1l2137 0B91                            i1l2139 0BA1  
                          i1l2543 09B1                            i1l2551 0D97                            u130_20 0B78  
                          i1l2545 09B8                            u130_21 0B77                            i1l2561 0DB2  
                          i1l2801 0C78                            i1l2563 0DCD                            i1l2555 0D98  
                          i1l2811 0C90                            i1l2803 0C86                            i1l2565 0DD1  
                          i1l2557 0DA1                            i1l2549 0D77                            i1l2821 0CA2  
                          i1l2813 0C95                            i1l2805 0C8A                            i1l2567 0DD5  
                          i1l2559 0DAA                            i1l2831 0CB0                            i1l2823 0CA8  
                          i1l2815 0C99                            i1l2807 0C8B                            u131_20 0B91  
                          u131_21 0B90                            i1l2825 0CA9                            i1l2817 0C9D  
                          i1l2809 0C8F                            i1l2827 0CAA                            i1l2819 0C9E  
                          i1l2829 0CAE                            i1l2791 0C67                            u132_20 0BAA  
                          u220_20 0C78                            u132_21 0BA9                            u220_21 0C77  
                          i1l2793 0C6B                            i1l2795 0C6E                            i1l2797 0C70  
                          i1l2789 0C63                            i1l2799 0C74                            u221_20 0C8F  
                          u221_21 0C8E                            u222_20 0C9D                            u222_21 0C9C  
                          u223_20 0CA8                            u223_21 0CA7                            u217_20 0C67  
                          _INTCON 000B                            u217_21 0C66                            u218_20 0C6B  
                          u218_21 0C6A                            u219_20 0C74                            u219_21 0C73  
                          u191_20 09B7                            u191_21 09B6                            u192_20 0DA1  
                          u192_21 0DA0                            u193_20 0DB2                            u193_21 0DB1  
                          u194_20 0DDB                            u194_21 0DDA                            _TMR0IF 005A  
                          _TMR1IF 0060                         ??_GetTime 0026                      ?_UART_TxChar 0070  
                   main@randomCar 01E6                 __end_of_UART_Init 0AE1                 __end_of_UART_Read 09BA  
                          ___bmul 07DB                            ___lmul 0B27                         ??___aldiv 002C  
                 GetTime@shortInt 0029                            ___wmul 0A1A                         ??___awdiv 0043  
                       ??___awmod 003C                  __end_of_init_ADC 09CD                            _cycled 0061  
                ___awdiv@quotient 0046                   ___awmod@divisor 0038                   ___awmod@counter 003D  
                __end_of_sendByte 0A72                         ?_ADC_Read 0024                            saved_w 007E  
         __end_of__initialization 0043                 __end_of_GetDigits 06A1                     ??_UpdateTimes 0024  
       __size_of_SetDefaultTimers 00CD               ___bmul@multiplicand 0024                    __pcstackCOMMON 0070  
               __end_of_BuildByte 0769                      __pidataBANK1 09E0                  _conteggioVeicoli 0D77  
               __end_of_Conteggio 0BBB                     ?_luciSemaforo 0024                        ??_ADC_Read 0026  
          SetDefaultTimers@giallo 0028         SetReceivedTimes@_semafori 002C                       ?_SetDisplay 0024  
                   GetDigits@Time 0049              _dataFromGatewayIndex 005E              _timerReadFromGateway 005D  
                      __pbssBANK0 005B                        __pbssBANK1 00A0                        __pbssBANK2 0110  
                      __pbssBANK3 0190                        __pmaintext 0047                           ?___bmul 0024  
ShowDigitsOnDisplay@display_index 0041                           ?___lmul 0024                           ?___wmul 0024  
                  ??_luciSemaforo 0025               __end_of_UpdateTimes 07DB                     sendByte@byte0 003D  
                   sendByte@byte1 0038                        __pintentry 0004                    ___lmul@product 002D  
                _SetReceivedTimes 0D16       __end_of_ShowDigitsOnDisplay 1000                        __stringtab 0800  
                       ?_init_ADC 0070                           _GetTime 0AE1                   BuildByte@valore 0025  
                 BuildByte@txByte 0029           GetTime@_dataFromGateway 0024                         ?_sendByte 0038  
                  main@randomMoto 01E5                        _n_semafori 0811              __size_of_UART_TxChar 000B  
                         ___aldiv 0EB6                   __size_of___bmul 0017                           ___awdiv 0DDC  
                 __size_of___lmul 0048                           ___awmod 0CBB               __size_of_SetDisplay 0055  
                 __size_of___wmul 0027                 conteggioVeicoli@i 007D                           _digits0 00D8  
                         _digits1 00D5                           _digits2 00D2                           _digits3 00CF  
                         _digits4 00CC                           _digits5 00C9                           _digits6 00C6  
                         _digits7 00C3                           __ptext1 0A41                           __ptext2 07F2  
                         __ptext3 06A1                           __ptext4 0E45                           __ptext5 0B27  
                         __ptext6 0A72                           __ptext7 0A1A                           __ptext8 0BBB  
                         __ptext9 09BA                           _display 0806                      __size_of_ISR 0058  
                    __size_of_map 0035                  ___awmod@dividend 003A                  ___aldiv@dividend 0028  
            BuildByte@sommaColumn 002F                           _umidita 005B                           clrloop0 09AA  
                GetDigits@_digits 0050              end_of_initialization 0043                        ??_init_ADC 0024  
                  main@lux_select 01ED                       _UpdateTimes 0769                        ??_sendByte 003A  
                _SetDefaultTimers 0507                         _RCSTAbits 0018                  ___aldiv@quotient 002F  
                      _motorcycle 00BF                         _UART_Init 0AA7                         _UART_Read 09B1  
           SetReceivedTimes@index 0034                         _PORTAbits 0005                         _PORTBbits 0006  
                       _PORTCbits 0007                      SetDisplay@d1 0024                      SetDisplay@d2 0025  
                    SetDisplay@d3 0026                         _TRISCbits 0087                 __size_of_ADC_Read 0026  
        __end_of_conteggioVeicoli 0DDC              __end_of_luciSemaforo 0C0E                        map@out_max 0050  
                      map@out_min 004E  SetReceivedTimes@_dataFromGateway 0033                         _TXSTAbits 0098  
                       _GetDigits 05D4                         _DigitsArr 00DF                    __end_of___bmul 07F2  
                  __end_of___lmul 0B6F                    __end_of___wmul 0A41                        ?_UART_Init 0033  
                      ?_UART_Read 0070                         _BuildByte 06A1                         _Conteggio 0B6F  
               BuildByte@sommaRow 002E               start_initialization 0013                       __end_of_ISR 0CBB  
                    ??_SetDisplay 0028                       __end_of_map 0AA7          __end_of_SetReceivedTimes 0D77  
                      ?_GetDigits 0048                          ??___bmul 0025                          ??___lmul 002C  
                  ADC_Read@canale 0027                          ??___wmul 0028                        init_fetch0 09CD  
                     __pdataBANK1 00DB                __end_of_SetDisplay 0C63                    GetDigits@index 0048  
                      ?_BuildByte 0024                        ?_Conteggio 0070                         ___latbits 0002  
                   __pcstackBANK0 0020                     __pcstackBANK3 01E5                          ?_GetTime 0024  
           SetDefaultTimers@verde 0026             SetDefaultTimers@rosso 0024                 __size_of_init_ADC 0013  
               __size_of_sendByte 0031                          ?___aldiv 0024                          ?___awdiv 003F  
                        ?___awmod 0038                       ??_UART_Init 0035                       ??_UART_Read 0070  
                  BuildByte@i_341 0036                         __pstrings 0800                    BuildByte@y_342 0032  
                  sendByte@valore 0039                    sendByte@txByte 003E                    BuildByte@byte0 0028  
                  BuildByte@byte1 0024          __end_of_SetDefaultTimers 05D4                          _ADC_Read 09F4  
           __size_of_luciSemaforo 0053                         _count_lux 005F                     UART_TxChar@ch 0024  
    __size_of_ShowDigitsOnDisplay 00AD                   ___aldiv@divisor 0024                 SetReceivedTimes@i 0035  
               interrupt_function 0004                   ___aldiv@counter 002D                    ___wmul@product 0028  
      SetReceivedTimes@semaforoId 0031                      ?_UpdateTimes 0070                         clear_ram0 09A9  
                        _PIE1bits 008C                     ??_UART_TxChar 0024                       ??_GetDigits 004B  
                        _GO_nDONE 00FA                      _luciSemaforo 0BBB                         _pressione 00B6  
               UART_Init@baudrate 0033                       ??_BuildByte 0026                         map@in_max 004C  
                       map@in_min 004A                       __stringbase 0805                         main@i_530 01E9  
                       main@i_532 01EE                         main@i_527 01EB                         main@i_528 01E8  
                     ??_Conteggio 0076                 ___wmul@multiplier 0024                      GetTime@index 0028  
               ___lmul@multiplier 0024                      _RoadsSensors 00B0                 ?_conteggioVeicoli 0070  
                    _secondPassed 0062                ??_conteggioVeicoli 0079                  __size_of_GetTime 0046  
                        _Semafori 00E7                   main@randomTruck 01E7                       _readGateway 0063  
                __size_of___aldiv 009D               __end_of_UART_TxChar 07FD                  __size_of___awdiv 0069  
                __size_of___awmod 005B                __end_of__stringtab 0806                         sendByte@i 003F  
                        __ptext10 0769                          __ptext11 0AA7                          __ptext20 0CBB  
                        __ptext12 0EB6                          __ptext21 0DDC                          __ptext13 0F53  
                        __ptext22 09F4                          __ptext14 0C0E                          __ptext23 0C63  
                        __ptext15 0D16                          __ptext24 0D77                          __ptext16 0AE1  
                        __ptext25 0B6F                          __ptext17 0507                          __ptext26 09B1  
                        __ptext18 05D4                          __ptext19 07DB                __end_of_n_semafori 0812  
         SetDisplay@display_index 002A                          _init_ADC 09BA                 ?_SetReceivedTimes 002C  
                   __size_of_main 04C0                   _dataFromGateway 0190                     __size_of_rand 0071  
                        _sendByte 0A41                ??_SetReceivedTimes 002D                        _INTCONbits 000B  
                        init_ram0 09D1              Conteggio@_motorcycle 0072                          intlevel1 0000  
                 _readGatewayDone 0064                         stringcode 0800                       _UART_TxChar 07F2  
         SetReceivedTimes@colorId 0032              __size_of_UpdateTimes 0072                        GetTime@tmp 002A  
             _ShowDigitsOnDisplay 0F53                        _OPTION_REG 0081                   SetDisplay@value 0027  
                        stringdir 0800                          stringtab 0800                      UpdateTimes@i 002F  
                    UpdateTimes@l 0030                 ?_SetDefaultTimers 0024                      ___aldiv@sign 002E  
              ??_SetDefaultTimers 002B              ?_ShowDigitsOnDisplay 0070                        BuildByte@i 0034  
                      BuildByte@y 0030         SetDefaultTimers@_semafori 002A                   Conteggio@_count 0070  
                   Conteggio@_car 0073                   Conteggio@_truck 0074                    Conteggio@index 0075  
