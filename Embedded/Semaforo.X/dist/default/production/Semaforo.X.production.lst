

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jul 15 21:35:45 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.10
    47                           ; Generated 31/07/2019 GMT
    48                           ; 
    49                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F877A Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0088                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0098                     	;# 
   129  0099                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  000E                     	;# 
   156  000F                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0014                     	;# 
   162  0015                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001B                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  001D                     	;# 
   173  001E                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  0087                     	;# 
   179  0088                     	;# 
   180  0089                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200                           
   201                           	psect	idataBANK0
   202  07FA                     __pidataBANK0:	
   203                           
   204                           ;initializer for _DigitsArr
   205  07FA  34E8               	retlw	low (_digits0| 0)
   206  07FB  34E5               	retlw	low (_digits1| 0)
   207                           
   208                           ;initializer for _Semafori
   209  07FC  34CB               	retlw	low (_s0| 0)
   210  07FD  34BD               	retlw	low (_s1| 0)
   211                           
   212                           	psect	idataBANK1
   213  0A1E                     __pidataBANK1:	
   214                           
   215                           ;initializer for _randx
   216  0A1E  3401               	retlw	1
   217  0A1F  3400               	retlw	0
   218  0A20  3400               	retlw	0
   219  0A21  3400               	retlw	0
   220                           
   221                           	psect	strings
   222  0800                     __pstrings:	
   223  0800                     stringtab:	
   224  0800                     __stringtab:	
   225  0800                     stringcode:	
   226                           ;	String table - string pointers are 1 byte each
   227                           
   228  0800                     stringdir:	
   229  0800  3008               	movlw	high stringdir
   230  0801  008A               	movwf	10
   231  0802  0804               	movf	4,w
   232  0803  0A84               	incf	4,f
   233  0804  0782               	addwf	2,f
   234  0805                     __stringbase:	
   235  0805  3400               	retlw	0
   236  0806                     __end_of__stringtab:	
   237  0806                     _display:	
   238  0806  343F               	retlw	63
   239  0807  3406               	retlw	6
   240  0808  345B               	retlw	91
   241  0809  344F               	retlw	79
   242  080A  3466               	retlw	102
   243  080B  346D               	retlw	109
   244  080C  347D               	retlw	125
   245  080D  3407               	retlw	7
   246  080E  347F               	retlw	127
   247  080F  346F               	retlw	111
   248  0810  3400               	retlw	0
   249  0811                     __end_of_display:	
   250  0811                     _n_semafori:	
   251  0811  3402               	retlw	2
   252  0812                     __end_of_n_semafori:	
   253  0008                     _PORTD	set	8
   254  0005                     _PORTAbits	set	5
   255  001A                     _RCREG	set	26
   256  0019                     _TXREG	set	25
   257  000B                     _INTCONbits	set	11
   258  0018                     _RCSTAbits	set	24
   259  001E                     _ADRESH	set	30
   260  001F                     _ADCON0	set	31
   261  0006                     _PORTBbits	set	6
   262  0007                     _PORTCbits	set	7
   263  000E                     _TMR1L	set	14
   264  000F                     _TMR1H	set	15
   265  0010                     _T1CON	set	16
   266  0001                     _TMR0	set	1
   267  000B                     _INTCON	set	11
   268  0060                     _TMR1IF	set	96
   269  005A                     _TMR0IF	set	90
   270  0065                     _RCIF	set	101
   271  0064                     _TXIF	set	100
   272  00FA                     _GO_nDONE	set	250
   273  008C                     _PIE1bits	set	140
   274  0099                     _SPBRG	set	153
   275  0098                     _TXSTAbits	set	152
   276  0087                     _TRISCbits	set	135
   277  009E                     _ADRESL	set	158
   278  009F                     _ADCON1	set	159
   279  0085                     _TRISA	set	133
   280  0081                     _OPTION_REG	set	129
   281  0089                     _TRISE	set	137
   282  0088                     _TRISD	set	136
   283  0087                     _TRISC	set	135
   284  0086                     _TRISB	set	134
   285                           
   286                           ; #config settings
   287  0000                     
   288                           	psect	cinit
   289  0013                     start_initialization:	
   290  0013                     __initialization:	
   291                           
   292                           ; Initialize objects allocated to BANK1
   293  0013  1683               	bsf	3,5	;RP0=1, select bank1
   294  0014  1303               	bcf	3,6	;RP1=0, select bank1
   295  0015  120A  158A  221E  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   296  001A  00EB               	movwf	__pdataBANK1& (0+127)
   297  001B  120A  158A  221F  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   298  0020  00EC               	movwf	(__pdataBANK1+1)& (0+127)
   299  0021  120A  158A  2220  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   300  0026  00ED               	movwf	(__pdataBANK1+2)& (0+127)
   301  0027  120A  158A  2221  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   302  002C  00EE               	movwf	(__pdataBANK1+3)& (0+127)
   303                           
   304                           ; Initialize objects allocated to BANK0
   305  002D  1283               	bcf	3,5	;RP0=0, select bank0
   306  002E  1303               	bcf	3,6	;RP1=0, select bank0
   307  002F  120A  118A  27FA  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   308  0034  00E2               	movwf	__pdataBANK0& (0+127)
   309  0035  120A  118A  27FB  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   310  003A  00E3               	movwf	(__pdataBANK0+1)& (0+127)
   311  003B  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   312  0040  00E4               	movwf	(__pdataBANK0+2)& (0+127)
   313  0041  120A  118A  27FD  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   314  0046  00E5               	movwf	(__pdataBANK0+3)& (0+127)
   315                           
   316                           ; Clear objects allocated to BANK1
   317  0047  1383               	bcf	3,7	;select IRP bank0
   318  0048  30A0               	movlw	low __pbssBANK1
   319  0049  0084               	movwf	4
   320  004A  30EB               	movlw	low (__pbssBANK1+75)
   321  004B  120A  158A  2222  120A  118A  	fcall	clear_ram0
   322                           
   323                           ; Clear objects allocated to BANK0
   324  0050  01DB               	clrf	__pbssBANK0& (0+127)
   325  0051  01DC               	clrf	(__pbssBANK0+1)& (0+127)
   326  0052  01DD               	clrf	(__pbssBANK0+2)& (0+127)
   327  0053  01DE               	clrf	(__pbssBANK0+3)& (0+127)
   328  0054  01DF               	clrf	(__pbssBANK0+4)& (0+127)
   329  0055  01E0               	clrf	(__pbssBANK0+5)& (0+127)
   330  0056  01E1               	clrf	(__pbssBANK0+6)& (0+127)
   331  0057                     end_of_initialization:	
   332                           ;End of C runtime variable initialization code
   333                           
   334  0057                     __end_of__initialization:	
   335  0057  0183               	clrf	3
   336  0058  120A  118A  285B   	ljmp	_main	;jump to C main() function
   337                           
   338                           	psect	bssBANK0
   339  005B                     __pbssBANK0:	
   340  005B                     _dataFromGatewayIndex:	
   341  005B                     	ds	1
   342  005C                     _count_lux:	
   343  005C                     	ds	1
   344  005D                     _disp:	
   345  005D                     	ds	1
   346  005E                     _cycled:	
   347  005E                     	ds	1
   348  005F                     _secondPassed:	
   349  005F                     	ds	1
   350  0060                     _readGateway:	
   351  0060                     	ds	1
   352  0061                     _readGatewayDone:	
   353  0061                     	ds	1
   354                           
   355                           	psect	dataBANK0
   356  0062                     __pdataBANK0:	
   357  0062                     _DigitsArr:	
   358  0062                     	ds	2
   359  0064                     _Semafori:	
   360  0064                     	ds	2
   361                           
   362                           	psect	bssBANK1
   363  00A0                     __pbssBANK1:	
   364  00A0                     _RoadsSensors:	
   365  00A0                     	ds	4
   366  00A4                     _time:	
   367  00A4                     	ds	4
   368  00A8                     _count:	
   369  00A8                     	ds	2
   370  00AA                     _pressione:	
   371  00AA                     	ds	1
   372  00AB                     _umidita:	
   373  00AB                     	ds	1
   374  00AC                     _temp:	
   375  00AC                     	ds	1
   376  00AD                     _timerReadFromGateway:	
   377  00AD                     	ds	1
   378  00AE                     _dataFromGateway:	
   379  00AE                     	ds	15
   380  00BD                     _s1:	
   381  00BD                     	ds	14
   382  00CB                     _s0:	
   383  00CB                     	ds	14
   384  00D9                     _truck:	
   385  00D9                     	ds	4
   386  00DD                     _car:	
   387  00DD                     	ds	4
   388  00E1                     _motorcycle:	
   389  00E1                     	ds	4
   390  00E5                     _digits1:	
   391  00E5                     	ds	3
   392  00E8                     _digits0:	
   393  00E8                     	ds	3
   394                           
   395                           	psect	dataBANK1
   396  00EB                     __pdataBANK1:	
   397  00EB                     _randx:	
   398  00EB                     	ds	4
   399                           
   400                           	psect	clrtext
   401  0A22                     clear_ram0:	
   402                           ;	Called with FSR containing the base address, and
   403                           ;	W with the last address+1
   404                           
   405  0A22  0064               	clrwdt	;clear the watchdog before getting into this loop
   406  0A23                     clrloop0:	
   407  0A23  0180               	clrf	0	;clear RAM location pointed to by FSR
   408  0A24  0A84               	incf	4,f	;increment pointer
   409  0A25  0604               	xorwf	4,w	;XOR with final address
   410  0A26  1903               	btfsc	3,2	;have we reached the end yet?
   411  0A27  3400               	retlw	0	;all done for this memory range, return
   412  0A28  0604               	xorwf	4,w	;XOR again to restore value
   413  0A29  2A23               	goto	clrloop0	;do the next byte
   414                           
   415                           	psect	cstackBANK3
   416  0190                     __pcstackBANK3:	
   417  0190                     	ds	3
   418  0193                     main@i_481:	
   419                           
   420                           ; 1 bytes @ 0x3
   421  0193                     	ds	1
   422  0194                     main@i_483:	
   423                           
   424                           ; 1 bytes @ 0x4
   425  0194                     	ds	1
   426  0195                     main@i_480:	
   427                           
   428                           ; 2 bytes @ 0x5
   429  0195                     	ds	2
   430  0197                     main@lux_select:	
   431                           
   432                           ; 1 bytes @ 0x7
   433  0197                     	ds	1
   434  0198                     main@i_485:	
   435                           
   436                           ; 1 bytes @ 0x8
   437  0198                     	ds	1
   438  0199                     main@i:	
   439                           
   440                           ; 1 bytes @ 0x9
   441  0199                     	ds	1
   442                           
   443                           	psect	cstackCOMMON
   444  0070                     __pcstackCOMMON:	
   445  0070                     ?_init_ADC:	
   446  0070                     ?_ShowDigitsOnDisplay:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_UpdateTimes:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_Conteggio:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_main:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_UART_TxChar:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_UART_Read:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ??_UART_Read:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_conteggioVeicoli:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_ISR:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     Conteggio@_count:	
   474                           ; 1 bytes @ 0x0
   475                           
   476                           
   477                           ; 2 bytes @ 0x0
   478  0070                     	ds	2
   479  0072                     Conteggio@_motorcycle:	
   480                           
   481                           ; 1 bytes @ 0x2
   482  0072                     	ds	1
   483  0073                     Conteggio@_car:	
   484                           
   485                           ; 1 bytes @ 0x3
   486  0073                     	ds	1
   487  0074                     Conteggio@_truck:	
   488                           
   489                           ; 1 bytes @ 0x4
   490  0074                     	ds	1
   491  0075                     Conteggio@index:	
   492                           
   493                           ; 1 bytes @ 0x5
   494  0075                     	ds	1
   495  0076                     ??_Conteggio:	
   496                           
   497                           ; 1 bytes @ 0x6
   498  0076                     	ds	3
   499  0079                     ??_conteggioVeicoli:	
   500                           
   501                           ; 1 bytes @ 0x9
   502  0079                     	ds	4
   503  007D                     conteggioVeicoli@i:	
   504                           
   505                           ; 1 bytes @ 0xD
   506  007D                     	ds	1
   507                           
   508                           	psect	cstackBANK0
   509  0020                     __pcstackBANK0:	
   510  0020                     ??_ISR:	
   511                           
   512                           ; 1 bytes @ 0x0
   513  0020                     	ds	4
   514  0024                     ??_init_ADC:	
   515  0024                     ?_luciSemaforo:	
   516                           ; 1 bytes @ 0x4
   517                           
   518  0024                     ?_BuildByte:	
   519                           ; 1 bytes @ 0x4
   520                           
   521  0024                     ??_UpdateTimes:	
   522                           ; 1 bytes @ 0x4
   523                           
   524  0024                     ?_SetDefaultTimers:	
   525                           ; 1 bytes @ 0x4
   526                           
   527  0024                     ??_UART_TxChar:	
   528                           ; 1 bytes @ 0x4
   529                           
   530  0024                     ?_SetDisplay:	
   531                           ; 1 bytes @ 0x4
   532                           
   533  0024                     ?___bmul:	
   534                           ; 1 bytes @ 0x4
   535                           
   536  0024                     ?_ADC_Read:	
   537                           ; 1 bytes @ 0x4
   538                           
   539  0024                     ?_GetTime:	
   540                           ; 2 bytes @ 0x4
   541                           
   542  0024                     ?___wmul:	
   543                           ; 2 bytes @ 0x4
   544                           
   545  0024                     ?___lmul:	
   546                           ; 2 bytes @ 0x4
   547                           
   548  0024                     ?___aldiv:	
   549                           ; 4 bytes @ 0x4
   550                           
   551  0024                     BuildByte@byte1:	
   552                           ; 4 bytes @ 0x4
   553                           
   554  0024                     GetTime@_dataFromGateway:	
   555                           ; 1 bytes @ 0x4
   556                           
   557  0024                     UART_TxChar@ch:	
   558                           ; 1 bytes @ 0x4
   559                           
   560  0024                     luciSemaforo@lux:	
   561                           ; 1 bytes @ 0x4
   562                           
   563  0024                     SetDisplay@d1:	
   564                           ; 1 bytes @ 0x4
   565                           
   566  0024                     ___bmul@multiplicand:	
   567                           ; 1 bytes @ 0x4
   568                           
   569  0024                     SetDefaultTimers@rosso:	
   570                           ; 1 bytes @ 0x4
   571                           
   572  0024                     ___wmul@multiplier:	
   573                           ; 2 bytes @ 0x4
   574                           
   575  0024                     ___lmul@multiplier:	
   576                           ; 2 bytes @ 0x4
   577                           
   578  0024                     ___aldiv@divisor:	
   579                           ; 4 bytes @ 0x4
   580                           
   581                           
   582                           ; 4 bytes @ 0x4
   583  0024                     	ds	1
   584  0025                     ??_luciSemaforo:	
   585  0025                     ??___bmul:	
   586                           ; 1 bytes @ 0x5
   587                           
   588  0025                     BuildByte@valore:	
   589                           ; 1 bytes @ 0x5
   590                           
   591  0025                     SetDisplay@d2:	
   592                           ; 1 bytes @ 0x5
   593                           
   594                           
   595                           ; 1 bytes @ 0x5
   596  0025                     	ds	1
   597  0026                     ??_ADC_Read:	
   598  0026                     ??_BuildByte:	
   599                           ; 1 bytes @ 0x6
   600                           
   601  0026                     ??_GetTime:	
   602                           ; 1 bytes @ 0x6
   603                           
   604  0026                     SetDisplay@d3:	
   605                           ; 1 bytes @ 0x6
   606                           
   607  0026                     ___bmul@product:	
   608                           ; 1 bytes @ 0x6
   609                           
   610  0026                     SetDefaultTimers@verde:	
   611                           ; 1 bytes @ 0x6
   612                           
   613  0026                     ___wmul@multiplicand:	
   614                           ; 2 bytes @ 0x6
   615                           
   616                           
   617                           ; 2 bytes @ 0x6
   618  0026                     	ds	1
   619  0027                     ADC_Read@canale:	
   620  0027                     luciSemaforo@index:	
   621                           ; 1 bytes @ 0x7
   622                           
   623  0027                     SetDisplay@value:	
   624                           ; 1 bytes @ 0x7
   625                           
   626  0027                     ___bmul@multiplier:	
   627                           ; 1 bytes @ 0x7
   628                           
   629                           
   630                           ; 1 bytes @ 0x7
   631  0027                     	ds	1
   632  0028                     ??_SetDisplay:	
   633  0028                     ??___wmul:	
   634                           ; 1 bytes @ 0x8
   635                           
   636  0028                     BuildByte@byte0:	
   637                           ; 1 bytes @ 0x8
   638                           
   639  0028                     GetTime@index:	
   640                           ; 1 bytes @ 0x8
   641                           
   642  0028                     SetDefaultTimers@giallo:	
   643                           ; 1 bytes @ 0x8
   644                           
   645  0028                     ___wmul@product:	
   646                           ; 2 bytes @ 0x8
   647                           
   648  0028                     ___lmul@multiplicand:	
   649                           ; 2 bytes @ 0x8
   650                           
   651  0028                     ___aldiv@dividend:	
   652                           ; 4 bytes @ 0x8
   653                           
   654                           
   655                           ; 4 bytes @ 0x8
   656  0028                     	ds	1
   657  0029                     GetTime@shortInt:	
   658  0029                     BuildByte@txByte:	
   659                           ; 1 bytes @ 0x9
   660                           
   661                           
   662                           ; 5 bytes @ 0x9
   663  0029                     	ds	1
   664  002A                     SetDefaultTimers@_semafori:	
   665  002A                     SetDisplay@display_index:	
   666                           ; 1 bytes @ 0xA
   667                           
   668  002A                     GetTime@tmp:	
   669                           ; 1 bytes @ 0xA
   670                           
   671                           
   672                           ; 2 bytes @ 0xA
   673  002A                     	ds	1
   674  002B                     ??_SetDefaultTimers:	
   675                           
   676                           ; 1 bytes @ 0xB
   677  002B                     	ds	1
   678  002C                     ?_SetReceivedTimes:	
   679  002C                     ??___lmul:	
   680                           ; 1 bytes @ 0xC
   681                           
   682  002C                     ??___aldiv:	
   683                           ; 1 bytes @ 0xC
   684                           
   685  002C                     SetReceivedTimes@_semafori:	
   686                           ; 1 bytes @ 0xC
   687                           
   688                           
   689                           ; 1 bytes @ 0xC
   690  002C                     	ds	1
   691  002D                     ??_SetReceivedTimes:	
   692  002D                     ___aldiv@counter:	
   693                           ; 1 bytes @ 0xD
   694                           
   695  002D                     ___lmul@product:	
   696                           ; 1 bytes @ 0xD
   697                           
   698                           
   699                           ; 4 bytes @ 0xD
   700  002D                     	ds	1
   701  002E                     BuildByte@sommaRow:	
   702  002E                     UpdateTimes@_semafori:	
   703                           ; 1 bytes @ 0xE
   704                           
   705  002E                     SetDefaultTimers@l:	
   706                           ; 1 bytes @ 0xE
   707                           
   708  002E                     ___aldiv@sign:	
   709                           ; 1 bytes @ 0xE
   710                           
   711                           
   712                           ; 1 bytes @ 0xE
   713  002E                     	ds	1
   714  002F                     BuildByte@sommaColumn:	
   715  002F                     UpdateTimes@i:	
   716                           ; 1 bytes @ 0xF
   717                           
   718  002F                     SetDefaultTimers@i:	
   719                           ; 1 bytes @ 0xF
   720                           
   721  002F                     ___aldiv@quotient:	
   722                           ; 1 bytes @ 0xF
   723                           
   724                           
   725                           ; 4 bytes @ 0xF
   726  002F                     	ds	1
   727  0030                     UpdateTimes@l:	
   728  0030                     BuildByte@y:	
   729                           ; 1 bytes @ 0x10
   730                           
   731                           
   732                           ; 2 bytes @ 0x10
   733  0030                     	ds	1
   734  0031                     ?_rand:	
   735  0031                     SetReceivedTimes@semaforoId:	
   736                           ; 2 bytes @ 0x11
   737                           
   738                           
   739                           ; 1 bytes @ 0x11
   740  0031                     	ds	1
   741  0032                     SetReceivedTimes@colorId:	
   742  0032                     BuildByte@y_342:	
   743                           ; 1 bytes @ 0x12
   744                           
   745                           
   746                           ; 2 bytes @ 0x12
   747  0032                     	ds	1
   748  0033                     ?_UART_Init:	
   749  0033                     ??_rand:	
   750                           ; 1 bytes @ 0x13
   751                           
   752  0033                     SetReceivedTimes@_dataFromGateway:	
   753                           ; 1 bytes @ 0x13
   754                           
   755  0033                     UART_Init@baudrate:	
   756                           ; 1 bytes @ 0x13
   757                           
   758                           
   759                           ; 2 bytes @ 0x13
   760  0033                     	ds	1
   761  0034                     SetReceivedTimes@index:	
   762  0034                     BuildByte@i:	
   763                           ; 1 bytes @ 0x14
   764                           
   765                           
   766                           ; 2 bytes @ 0x14
   767  0034                     	ds	1
   768  0035                     ??_UART_Init:	
   769  0035                     SetReceivedTimes@i:	
   770                           ; 1 bytes @ 0x15
   771                           
   772                           
   773                           ; 1 bytes @ 0x15
   774  0035                     	ds	1
   775  0036                     BuildByte@i_341:	
   776                           
   777                           ; 2 bytes @ 0x16
   778  0036                     	ds	2
   779  0038                     ?_sendByte:	
   780  0038                     ?___awmod:	
   781                           ; 1 bytes @ 0x18
   782                           
   783  0038                     sendByte@byte1:	
   784                           ; 2 bytes @ 0x18
   785                           
   786  0038                     ___awmod@divisor:	
   787                           ; 1 bytes @ 0x18
   788                           
   789                           
   790                           ; 2 bytes @ 0x18
   791  0038                     	ds	1
   792  0039                     sendByte@valore:	
   793                           
   794                           ; 1 bytes @ 0x19
   795  0039                     	ds	1
   796  003A                     ??_sendByte:	
   797  003A                     ___awmod@dividend:	
   798                           ; 1 bytes @ 0x1A
   799                           
   800                           
   801                           ; 2 bytes @ 0x1A
   802  003A                     	ds	2
   803  003C                     ??___awmod:	
   804                           
   805                           ; 1 bytes @ 0x1C
   806  003C                     	ds	1
   807  003D                     sendByte@byte0:	
   808  003D                     ___awmod@counter:	
   809                           ; 1 bytes @ 0x1D
   810                           
   811                           
   812                           ; 1 bytes @ 0x1D
   813  003D                     	ds	1
   814  003E                     sendByte@txByte:	
   815  003E                     ___awmod@sign:	
   816                           ; 1 bytes @ 0x1E
   817                           
   818                           
   819                           ; 1 bytes @ 0x1E
   820  003E                     	ds	1
   821  003F                     ??_ShowDigitsOnDisplay:	
   822  003F                     ?___awdiv:	
   823                           ; 1 bytes @ 0x1F
   824                           
   825  003F                     sendByte@i:	
   826                           ; 2 bytes @ 0x1F
   827                           
   828  003F                     ___awdiv@divisor:	
   829                           ; 1 bytes @ 0x1F
   830                           
   831                           
   832                           ; 2 bytes @ 0x1F
   833  003F                     	ds	2
   834  0041                     ShowDigitsOnDisplay@display_index:	
   835  0041                     ___awdiv@dividend:	
   836                           ; 1 bytes @ 0x21
   837                           
   838                           
   839                           ; 2 bytes @ 0x21
   840  0041                     	ds	2
   841  0043                     ??___awdiv:	
   842                           
   843                           ; 1 bytes @ 0x23
   844  0043                     	ds	1
   845  0044                     ___awdiv@counter:	
   846                           
   847                           ; 1 bytes @ 0x24
   848  0044                     	ds	1
   849  0045                     ___awdiv@sign:	
   850                           
   851                           ; 1 bytes @ 0x25
   852  0045                     	ds	1
   853  0046                     ___awdiv@quotient:	
   854                           
   855                           ; 2 bytes @ 0x26
   856  0046                     	ds	2
   857  0048                     ?_GetDigits:	
   858  0048                     ?_map:	
   859                           ; 1 bytes @ 0x28
   860                           
   861  0048                     GetDigits@index:	
   862                           ; 2 bytes @ 0x28
   863                           
   864  0048                     map@x:	
   865                           ; 1 bytes @ 0x28
   866                           
   867                           
   868                           ; 2 bytes @ 0x28
   869  0048                     	ds	1
   870  0049                     GetDigits@Time:	
   871                           
   872                           ; 2 bytes @ 0x29
   873  0049                     	ds	1
   874  004A                     map@in_min:	
   875                           
   876                           ; 2 bytes @ 0x2A
   877  004A                     	ds	1
   878  004B                     ??_GetDigits:	
   879                           
   880                           ; 1 bytes @ 0x2B
   881  004B                     	ds	1
   882  004C                     map@in_max:	
   883                           
   884                           ; 2 bytes @ 0x2C
   885  004C                     	ds	2
   886  004E                     map@out_min:	
   887  004E                     _GetDigits$1203:	
   888                           ; 2 bytes @ 0x2E
   889                           
   890                           
   891                           ; 2 bytes @ 0x2E
   892  004E                     	ds	2
   893  0050                     GetDigits@_digits:	
   894  0050                     map@out_max:	
   895                           ; 1 bytes @ 0x30
   896                           
   897                           
   898                           ; 2 bytes @ 0x30
   899  0050                     	ds	2
   900  0052                     ??_map:	
   901  0052                     ??_main:	
   902                           ; 1 bytes @ 0x32
   903                           
   904                           
   905                           ; 1 bytes @ 0x32
   906  0052                     	ds	9
   907                           
   908                           	psect	maintext
   909  005B                     __pmaintext:	
   910 ;;
   911 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
   912 ;;
   913 ;; *************** function _main *****************
   914 ;; Defined at:
   915 ;;		line 136 in file "main.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;  lux_select      1    7[BANK3 ] unsigned char 
   920 ;;  randomTruck     1    0        unsigned char 
   921 ;;  randomCar       1    0        unsigned char 
   922 ;;  randomMoto      1    0        unsigned char 
   923 ;;  i               1    4[BANK3 ] unsigned char 
   924 ;;  i               1    3[BANK3 ] unsigned char 
   925 ;;  i               2    5[BANK3 ] int 
   926 ;;  i               1    9[BANK3 ] unsigned char 
   927 ;;  i               1    8[BANK3 ] unsigned char 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      void 
   930 ;; Registers used:
   931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : B00/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   937 ;;      Params:         0       0       0       0       0
   938 ;;      Locals:         0       0       0      10       0
   939 ;;      Temps:          0       9       0       0       0
   940 ;;      Totals:         0       9       0      10       0
   941 ;;Total ram usage:       19 bytes
   942 ;; Hardware stack levels required when called:    5
   943 ;; This function calls:
   944 ;;		_ADC_Read
   945 ;;		_GetDigits
   946 ;;		_SetDefaultTimers
   947 ;;		_SetReceivedTimes
   948 ;;		_ShowDigitsOnDisplay
   949 ;;		_UART_Init
   950 ;;		_UpdateTimes
   951 ;;		___awmod
   952 ;;		_init_ADC
   953 ;;		_luciSemaforo
   954 ;;		_map
   955 ;;		_rand
   956 ;;		_sendByte
   957 ;; This function is called by:
   958 ;;		Startup code after reset
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           
   963                           ;psect for function _main
   964  005B                     _main:	
   965  005B                     l3500:	
   966                           ;incstack = 0
   967                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   968                           
   969                           
   970                           ;main.c: 138:     TRISB = 0x38;
   971  005B  3038               	movlw	56
   972  005C  1683               	bsf	3,5	;RP0=1, select bank1
   973  005D  1303               	bcf	3,6	;RP1=0, select bank1
   974  005E  0086               	movwf	6	;volatile
   975                           
   976                           ;main.c: 139:     TRISC = 0x80;
   977  005F  3080               	movlw	128
   978  0060  0087               	movwf	7	;volatile
   979  0061                     l3502:	
   980                           
   981                           ;main.c: 140:     TRISD = 0x00;
   982  0061  0188               	clrf	8	;volatile
   983  0062                     l3504:	
   984                           
   985                           ;main.c: 141:     TRISE = 0x01;
   986  0062  3001               	movlw	1
   987  0063  0089               	movwf	9	;volatile
   988  0064                     l3506:	
   989                           
   990                           ;main.c: 142:     INTCON = 0xE0;
   991  0064  30E0               	movlw	224
   992  0065  008B               	movwf	11	;volatile
   993  0066                     l3508:	
   994                           
   995                           ;main.c: 143:     OPTION_REG = 0x04;
   996  0066  3004               	movlw	4
   997  0067  0081               	movwf	1	;volatile
   998  0068                     l3510:	
   999                           
  1000                           ;main.c: 144:     TMR0 = 6;
  1001  0068  3006               	movlw	6
  1002  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1003  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1004  006B  0081               	movwf	1	;volatile
  1005  006C                     l3512:	
  1006                           
  1007                           ;main.c: 145:     T1CON = 0x31;
  1008  006C  3031               	movlw	49
  1009  006D  0090               	movwf	16	;volatile
  1010  006E                     l3514:	
  1011                           
  1012                           ;main.c: 147:     TMR1H = 60;
  1013  006E  303C               	movlw	60
  1014  006F  008F               	movwf	15	;volatile
  1015  0070                     l3516:	
  1016                           
  1017                           ;main.c: 148:     TMR1L = 176;
  1018  0070  30B0               	movlw	176
  1019  0071  008E               	movwf	14	;volatile
  1020  0072                     l3518:	
  1021                           
  1022                           ;main.c: 151:     init_ADC();
  1023  0072  120A  158A  223E  120A  118A  	fcall	_init_ADC
  1024  0077                     l3520:	
  1025                           
  1026                           ;main.c: 152:     UART_Init(9600);
  1027  0077  3080               	movlw	128
  1028  0078  1283               	bcf	3,5	;RP0=0, select bank0
  1029  0079  1303               	bcf	3,6	;RP1=0, select bank0
  1030  007A  00B3               	movwf	UART_Init@baudrate
  1031  007B  3025               	movlw	37
  1032  007C  00B4               	movwf	UART_Init@baudrate+1
  1033  007D  120A  118A  27C0  120A  118A  	fcall	_UART_Init
  1034  0082                     l3522:	
  1035                           
  1036                           ;main.c: 153:     SetDefaultTimers(6, 4, 2, Semafori);
  1037  0082  3006               	movlw	6
  1038  0083  1283               	bcf	3,5	;RP0=0, select bank0
  1039  0084  1303               	bcf	3,6	;RP1=0, select bank0
  1040  0085  00A4               	movwf	SetDefaultTimers@rosso
  1041  0086  3000               	movlw	0
  1042  0087  00A5               	movwf	SetDefaultTimers@rosso+1
  1043  0088  3004               	movlw	4
  1044  0089  00A6               	movwf	SetDefaultTimers@verde
  1045  008A  3000               	movlw	0
  1046  008B  00A7               	movwf	SetDefaultTimers@verde+1
  1047  008C  3002               	movlw	2
  1048  008D  00A8               	movwf	SetDefaultTimers@giallo
  1049  008E  3000               	movlw	0
  1050  008F  00A9               	movwf	SetDefaultTimers@giallo+1
  1051  0090  3064               	movlw	(low (_Semafori| 0))& (0+255)
  1052  0091  00D2               	movwf	??_main
  1053  0092  0852               	movf	??_main,w
  1054  0093  00AA               	movwf	SetDefaultTimers@_semafori
  1055  0094  120A  118A  265C  120A  118A  	fcall	_SetDefaultTimers
  1056  0099                     l3524:	
  1057                           
  1058                           ;main.c: 155:     PORTCbits.RC0 = 0;
  1059  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1060  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1061  009B  1007               	bcf	7,0	;volatile
  1062  009C                     l3526:	
  1063                           
  1064                           ;main.c: 156:     PORTBbits.RB7 = 0;
  1065  009C  1386               	bcf	6,7	;volatile
  1066  009D                     l3528:	
  1067                           
  1068                           ;main.c: 157:     PORTCbits.RC2 = 0;
  1069  009D  1107               	bcf	7,2	;volatile
  1070  009E                     l3530:	
  1071                           
  1072                           ;main.c: 158:     PORTBbits.RB6 = 0;
  1073  009E  1306               	bcf	6,6	;volatile
  1074  009F                     l3532:	
  1075                           
  1076                           ;main.c: 159:     PORTCbits.RC1 = 0;
  1077  009F  1087               	bcf	7,1	;volatile
  1078  00A0                     l3534:	
  1079                           
  1080                           ;main.c: 160:     PORTBbits.RB1 = 0;
  1081  00A0  1086               	bcf	6,1	;volatile
  1082  00A1                     l3536:	
  1083                           
  1084                           ;main.c: 163:     {;main.c: 165:         if (readGateway.Bit)
  1085  00A1  1C60               	btfss	_readGateway,0
  1086  00A2  28A4               	goto	u2971
  1087  00A3  28A5               	goto	u2970
  1088  00A4                     u2971:	
  1089  00A4  2B7C               	goto	l223
  1090  00A5                     u2970:	
  1091  00A5  2B67               	goto	l3618
  1092  00A6                     l225:	
  1093                           ;main.c: 168:             {;main.c: 169:             case 0x08:
  1094                           
  1095                           
  1096                           ;main.c: 170:                 readGatewayDone.Bit = 1;
  1097  00A6  1461               	bsf	_readGatewayDone,0
  1098                           
  1099                           ;main.c: 171:                 readGateway.Bit = 0;
  1100  00A7  1060               	bcf	_readGateway,0
  1101  00A8                     l3540:	
  1102                           
  1103                           ;main.c: 173:                 for (unsigned char i = 0; i < 4; i++)
  1104  00A8  1683               	bsf	3,5	;RP0=1, select bank3
  1105  00A9  1703               	bsf	3,6	;RP1=1, select bank3
  1106  00AA  0199               	clrf	main@i^(0+384)
  1107  00AB                     l3546:	
  1108  00AB  3014               	movlw	20
  1109  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1110  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1111  00AE  00B8               	movwf	___awmod@divisor
  1112  00AF  3000               	movlw	0
  1113  00B0  00B9               	movwf	___awmod@divisor+1
  1114  00B1  120A  158A  26F2  120A  118A  	fcall	_rand
  1115  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1116  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  1117  00B8  0831               	movf	?_rand,w
  1118  00B9  00D2               	movwf	??_main
  1119  00BA  01D3               	clrf	??_main+1
  1120  00BB  0852               	movf	??_main,w
  1121  00BC  00BA               	movwf	___awmod@dividend
  1122  00BD  0853               	movf	??_main+1,w
  1123  00BE  00BB               	movwf	___awmod@dividend+1
  1124  00BF  120A  158A  249D  120A  118A  	fcall	___awmod
  1125  00C4  3014               	movlw	20
  1126  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1127  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  1128  00C7  00B8               	movwf	___awmod@divisor
  1129  00C8  3000               	movlw	0
  1130  00C9  00B9               	movwf	___awmod@divisor+1
  1131  00CA  120A  158A  26F2  120A  118A  	fcall	_rand
  1132  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1133  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1134  00D1  0831               	movf	?_rand,w
  1135  00D2  00D2               	movwf	??_main
  1136  00D3  01D3               	clrf	??_main+1
  1137  00D4  0852               	movf	??_main,w
  1138  00D5  00BA               	movwf	___awmod@dividend
  1139  00D6  0853               	movf	??_main+1,w
  1140  00D7  00BB               	movwf	___awmod@dividend+1
  1141  00D8  120A  158A  249D  120A  118A  	fcall	___awmod
  1142  00DD  3014               	movlw	20
  1143  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  1144  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  1145  00E0  00B8               	movwf	___awmod@divisor
  1146  00E1  3000               	movlw	0
  1147  00E2  00B9               	movwf	___awmod@divisor+1
  1148  00E3  120A  158A  26F2  120A  118A  	fcall	_rand
  1149  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1150  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  1151  00EA  0831               	movf	?_rand,w
  1152  00EB  00D2               	movwf	??_main
  1153  00EC  01D3               	clrf	??_main+1
  1154  00ED  0852               	movf	??_main,w
  1155  00EE  00BA               	movwf	___awmod@dividend
  1156  00EF  0853               	movf	??_main+1,w
  1157  00F0  00BB               	movwf	___awmod@dividend+1
  1158  00F1  120A  158A  249D  120A  118A  	fcall	___awmod
  1159                           
  1160                           ;main.c: 181:                     switch (i)
  1161  00F6  2A0B               	goto	l3558
  1162  00F7                     l3548:	
  1163                           
  1164                           ;main.c: 184:                         sendByte(0x03, 0x01, motorcycle[i]);
  1165  00F7  01B8               	clrf	sendByte@byte1
  1166  00F8  0AB8               	incf	sendByte@byte1,f
  1167  00F9  1683               	bsf	3,5	;RP0=1, select bank3
  1168  00FA  1703               	bsf	3,6	;RP1=1, select bank3
  1169  00FB  0819               	movf	main@i^(0+384),w
  1170  00FC  3EE1               	addlw	(low (_motorcycle| 0))& (0+255)
  1171  00FD  0084               	movwf	4
  1172  00FE  1383               	bcf	3,7	;select IRP bank1
  1173  00FF  0800               	movf	0,w
  1174  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1175  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1176  0102  00D2               	movwf	??_main
  1177  0103  0852               	movf	??_main,w
  1178  0104  00B9               	movwf	sendByte@valore
  1179  0105  3003               	movlw	3
  1180  0106  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1181                           
  1182                           ;main.c: 185:                         sendByte(0x03, 0x02, car[i]);
  1183  010B  3002               	movlw	2
  1184  010C  1283               	bcf	3,5	;RP0=0, select bank0
  1185  010D  1303               	bcf	3,6	;RP1=0, select bank0
  1186  010E  00D2               	movwf	??_main
  1187  010F  0852               	movf	??_main,w
  1188  0110  00B8               	movwf	sendByte@byte1
  1189  0111  1683               	bsf	3,5	;RP0=1, select bank3
  1190  0112  1703               	bsf	3,6	;RP1=1, select bank3
  1191  0113  0819               	movf	main@i^(0+384),w
  1192  0114  3EDD               	addlw	(low (_car| 0))& (0+255)
  1193  0115  0084               	movwf	4
  1194  0116  1383               	bcf	3,7	;select IRP bank1
  1195  0117  0800               	movf	0,w
  1196  0118  1283               	bcf	3,5	;RP0=0, select bank0
  1197  0119  1303               	bcf	3,6	;RP1=0, select bank0
  1198  011A  00D3               	movwf	??_main+1
  1199  011B  0853               	movf	??_main+1,w
  1200  011C  00B9               	movwf	sendByte@valore
  1201  011D  3003               	movlw	3
  1202  011E  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1203                           
  1204                           ;main.c: 186:                         sendByte(0x03, 0x03, truck[i]);
  1205  0123  3003               	movlw	3
  1206  0124  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0125  1303               	bcf	3,6	;RP1=0, select bank0
  1208  0126  00D2               	movwf	??_main
  1209  0127  0852               	movf	??_main,w
  1210  0128  00B8               	movwf	sendByte@byte1
  1211  0129  1683               	bsf	3,5	;RP0=1, select bank3
  1212  012A  1703               	bsf	3,6	;RP1=1, select bank3
  1213  012B  0819               	movf	main@i^(0+384),w
  1214  012C  3ED9               	addlw	(low (_truck| 0))& (0+255)
  1215  012D  0084               	movwf	4
  1216  012E  1383               	bcf	3,7	;select IRP bank1
  1217  012F  0800               	movf	0,w
  1218  0130  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0131  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0132  00D3               	movwf	??_main+1
  1221  0133  0853               	movf	??_main+1,w
  1222  0134  00B9               	movwf	sendByte@valore
  1223  0135  3003               	movlw	3
  1224  0136  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1225                           
  1226                           ;main.c: 187:                         break;
  1227  013B  2A25               	goto	l3560
  1228  013C                     l3550:	
  1229                           
  1230                           ;main.c: 189:                         sendByte(0x05, 0x01, motorcycle[i]);
  1231  013C  01B8               	clrf	sendByte@byte1
  1232  013D  0AB8               	incf	sendByte@byte1,f
  1233  013E  1683               	bsf	3,5	;RP0=1, select bank3
  1234  013F  1703               	bsf	3,6	;RP1=1, select bank3
  1235  0140  0819               	movf	main@i^(0+384),w
  1236  0141  3EE1               	addlw	(low (_motorcycle| 0))& (0+255)
  1237  0142  0084               	movwf	4
  1238  0143  1383               	bcf	3,7	;select IRP bank1
  1239  0144  0800               	movf	0,w
  1240  0145  1283               	bcf	3,5	;RP0=0, select bank0
  1241  0146  1303               	bcf	3,6	;RP1=0, select bank0
  1242  0147  00D2               	movwf	??_main
  1243  0148  0852               	movf	??_main,w
  1244  0149  00B9               	movwf	sendByte@valore
  1245  014A  3005               	movlw	5
  1246  014B  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1247                           
  1248                           ;main.c: 190:                         sendByte(0x05, 0x02, car[i]);
  1249  0150  3002               	movlw	2
  1250  0151  1283               	bcf	3,5	;RP0=0, select bank0
  1251  0152  1303               	bcf	3,6	;RP1=0, select bank0
  1252  0153  00D2               	movwf	??_main
  1253  0154  0852               	movf	??_main,w
  1254  0155  00B8               	movwf	sendByte@byte1
  1255  0156  1683               	bsf	3,5	;RP0=1, select bank3
  1256  0157  1703               	bsf	3,6	;RP1=1, select bank3
  1257  0158  0819               	movf	main@i^(0+384),w
  1258  0159  3EDD               	addlw	(low (_car| 0))& (0+255)
  1259  015A  0084               	movwf	4
  1260  015B  1383               	bcf	3,7	;select IRP bank1
  1261  015C  0800               	movf	0,w
  1262  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1263  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1264  015F  00D3               	movwf	??_main+1
  1265  0160  0853               	movf	??_main+1,w
  1266  0161  00B9               	movwf	sendByte@valore
  1267  0162  3005               	movlw	5
  1268  0163  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1269                           
  1270                           ;main.c: 191:                         sendByte(0x05, 0x03, truck[i]);
  1271  0168  3003               	movlw	3
  1272  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1273  016A  1303               	bcf	3,6	;RP1=0, select bank0
  1274  016B  00D2               	movwf	??_main
  1275  016C  0852               	movf	??_main,w
  1276  016D  00B8               	movwf	sendByte@byte1
  1277  016E  1683               	bsf	3,5	;RP0=1, select bank3
  1278  016F  1703               	bsf	3,6	;RP1=1, select bank3
  1279  0170  0819               	movf	main@i^(0+384),w
  1280  0171  3ED9               	addlw	(low (_truck| 0))& (0+255)
  1281  0172  0084               	movwf	4
  1282  0173  1383               	bcf	3,7	;select IRP bank1
  1283  0174  0800               	movf	0,w
  1284  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1285  0176  1303               	bcf	3,6	;RP1=0, select bank0
  1286  0177  00D3               	movwf	??_main+1
  1287  0178  0853               	movf	??_main+1,w
  1288  0179  00B9               	movwf	sendByte@valore
  1289  017A  3005               	movlw	5
  1290  017B  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1291                           
  1292                           ;main.c: 192:                         break;
  1293  0180  2A25               	goto	l3560
  1294  0181                     l3552:	
  1295                           
  1296                           ;main.c: 194:                         sendByte(0x07, 0x01, motorcycle[i]);
  1297  0181  01B8               	clrf	sendByte@byte1
  1298  0182  0AB8               	incf	sendByte@byte1,f
  1299  0183  1683               	bsf	3,5	;RP0=1, select bank3
  1300  0184  1703               	bsf	3,6	;RP1=1, select bank3
  1301  0185  0819               	movf	main@i^(0+384),w
  1302  0186  3EE1               	addlw	(low (_motorcycle| 0))& (0+255)
  1303  0187  0084               	movwf	4
  1304  0188  1383               	bcf	3,7	;select IRP bank1
  1305  0189  0800               	movf	0,w
  1306  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1307  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1308  018C  00D2               	movwf	??_main
  1309  018D  0852               	movf	??_main,w
  1310  018E  00B9               	movwf	sendByte@valore
  1311  018F  3007               	movlw	7
  1312  0190  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1313                           
  1314                           ;main.c: 195:                         sendByte(0x07, 0x02, car[i]);
  1315  0195  3002               	movlw	2
  1316  0196  1283               	bcf	3,5	;RP0=0, select bank0
  1317  0197  1303               	bcf	3,6	;RP1=0, select bank0
  1318  0198  00D2               	movwf	??_main
  1319  0199  0852               	movf	??_main,w
  1320  019A  00B8               	movwf	sendByte@byte1
  1321  019B  1683               	bsf	3,5	;RP0=1, select bank3
  1322  019C  1703               	bsf	3,6	;RP1=1, select bank3
  1323  019D  0819               	movf	main@i^(0+384),w
  1324  019E  3EDD               	addlw	(low (_car| 0))& (0+255)
  1325  019F  0084               	movwf	4
  1326  01A0  1383               	bcf	3,7	;select IRP bank1
  1327  01A1  0800               	movf	0,w
  1328  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1329  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1330  01A4  00D3               	movwf	??_main+1
  1331  01A5  0853               	movf	??_main+1,w
  1332  01A6  00B9               	movwf	sendByte@valore
  1333  01A7  3007               	movlw	7
  1334  01A8  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1335                           
  1336                           ;main.c: 196:                         sendByte(0x07, 0x03, truck[i]);
  1337  01AD  3003               	movlw	3
  1338  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1339  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1340  01B0  00D2               	movwf	??_main
  1341  01B1  0852               	movf	??_main,w
  1342  01B2  00B8               	movwf	sendByte@byte1
  1343  01B3  1683               	bsf	3,5	;RP0=1, select bank3
  1344  01B4  1703               	bsf	3,6	;RP1=1, select bank3
  1345  01B5  0819               	movf	main@i^(0+384),w
  1346  01B6  3ED9               	addlw	(low (_truck| 0))& (0+255)
  1347  01B7  0084               	movwf	4
  1348  01B8  1383               	bcf	3,7	;select IRP bank1
  1349  01B9  0800               	movf	0,w
  1350  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1351  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1352  01BC  00D3               	movwf	??_main+1
  1353  01BD  0853               	movf	??_main+1,w
  1354  01BE  00B9               	movwf	sendByte@valore
  1355  01BF  3007               	movlw	7
  1356  01C0  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1357                           
  1358                           ;main.c: 197:                         break;
  1359  01C5  2A25               	goto	l3560
  1360  01C6                     l3554:	
  1361                           
  1362                           ;main.c: 199:                         sendByte(0x09, 0x01, motorcycle[i]);
  1363  01C6  01B8               	clrf	sendByte@byte1
  1364  01C7  0AB8               	incf	sendByte@byte1,f
  1365  01C8  1683               	bsf	3,5	;RP0=1, select bank3
  1366  01C9  1703               	bsf	3,6	;RP1=1, select bank3
  1367  01CA  0819               	movf	main@i^(0+384),w
  1368  01CB  3EE1               	addlw	(low (_motorcycle| 0))& (0+255)
  1369  01CC  0084               	movwf	4
  1370  01CD  1383               	bcf	3,7	;select IRP bank1
  1371  01CE  0800               	movf	0,w
  1372  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  1373  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  1374  01D1  00D2               	movwf	??_main
  1375  01D2  0852               	movf	??_main,w
  1376  01D3  00B9               	movwf	sendByte@valore
  1377  01D4  3009               	movlw	9
  1378  01D5  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1379                           
  1380                           ;main.c: 200:                         sendByte(0x09, 0x02, car[i]);
  1381  01DA  3002               	movlw	2
  1382  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1383  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1384  01DD  00D2               	movwf	??_main
  1385  01DE  0852               	movf	??_main,w
  1386  01DF  00B8               	movwf	sendByte@byte1
  1387  01E0  1683               	bsf	3,5	;RP0=1, select bank3
  1388  01E1  1703               	bsf	3,6	;RP1=1, select bank3
  1389  01E2  0819               	movf	main@i^(0+384),w
  1390  01E3  3EDD               	addlw	(low (_car| 0))& (0+255)
  1391  01E4  0084               	movwf	4
  1392  01E5  1383               	bcf	3,7	;select IRP bank1
  1393  01E6  0800               	movf	0,w
  1394  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1395  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1396  01E9  00D3               	movwf	??_main+1
  1397  01EA  0853               	movf	??_main+1,w
  1398  01EB  00B9               	movwf	sendByte@valore
  1399  01EC  3009               	movlw	9
  1400  01ED  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1401                           
  1402                           ;main.c: 201:                         sendByte(0x09, 0x03, truck[i]);
  1403  01F2  3003               	movlw	3
  1404  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  1405  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  1406  01F5  00D2               	movwf	??_main
  1407  01F6  0852               	movf	??_main,w
  1408  01F7  00B8               	movwf	sendByte@byte1
  1409  01F8  1683               	bsf	3,5	;RP0=1, select bank3
  1410  01F9  1703               	bsf	3,6	;RP1=1, select bank3
  1411  01FA  0819               	movf	main@i^(0+384),w
  1412  01FB  3ED9               	addlw	(low (_truck| 0))& (0+255)
  1413  01FC  0084               	movwf	4
  1414  01FD  1383               	bcf	3,7	;select IRP bank1
  1415  01FE  0800               	movf	0,w
  1416  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1417  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1418  0201  00D3               	movwf	??_main+1
  1419  0202  0853               	movf	??_main+1,w
  1420  0203  00B9               	movwf	sendByte@valore
  1421  0204  3009               	movlw	9
  1422  0205  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1423                           
  1424                           ;main.c: 202:                         break;
  1425  020A  2A25               	goto	l3560
  1426  020B                     l3558:	
  1427  020B  1683               	bsf	3,5	;RP0=1, select bank3
  1428  020C  1703               	bsf	3,6	;RP1=1, select bank3
  1429  020D  0819               	movf	main@i^(0+384),w
  1430  020E  1283               	bcf	3,5	;RP0=0, select bank0
  1431  020F  1303               	bcf	3,6	;RP1=0, select bank0
  1432  0210  00D2               	movwf	??_main
  1433  0211  01D3               	clrf	??_main+1
  1434                           
  1435                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1436                           ; Switch size 1, requested type "simple"
  1437                           ; Number of cases is 1, Range of values is 0 to 0
  1438                           ; switch strategies available:
  1439                           ; Name         Instructions Cycles
  1440                           ; simple_byte            4     3 (average)
  1441                           ; direct_byte           11     8 (fixed)
  1442                           ; jumptable            260     6 (fixed)
  1443                           ;	Chosen strategy is simple_byte
  1444  0212  0853               	movf	??_main+1,w
  1445  0213  3A00               	xorlw	0	; case 0
  1446  0214  1903               	skipnz
  1447  0215  2A17               	goto	l3926
  1448  0216  2A25               	goto	l3560
  1449  0217                     l3926:	
  1450                           
  1451                           ; Switch size 1, requested type "simple"
  1452                           ; Number of cases is 4, Range of values is 0 to 3
  1453                           ; switch strategies available:
  1454                           ; Name         Instructions Cycles
  1455                           ; simple_byte           13     7 (average)
  1456                           ; direct_byte           20     8 (fixed)
  1457                           ; jumptable            260     6 (fixed)
  1458                           ;	Chosen strategy is simple_byte
  1459  0217  0852               	movf	??_main,w
  1460  0218  3A00               	xorlw	0	; case 0
  1461  0219  1903               	skipnz
  1462  021A  28F7               	goto	l3548
  1463  021B  3A01               	xorlw	1	; case 1
  1464  021C  1903               	skipnz
  1465  021D  293C               	goto	l3550
  1466  021E  3A03               	xorlw	3	; case 2
  1467  021F  1903               	skipnz
  1468  0220  2981               	goto	l3552
  1469  0221  3A01               	xorlw	1	; case 3
  1470  0222  1903               	skipnz
  1471  0223  29C6               	goto	l3554
  1472  0224  2A25               	goto	l3560
  1473  0225                     l3560:	
  1474                           
  1475                           ;main.c: 204:                 }
  1476  0225  3001               	movlw	1
  1477  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1478  0227  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0228  00D2               	movwf	??_main
  1480  0229  0852               	movf	??_main,w
  1481  022A  1683               	bsf	3,5	;RP0=1, select bank3
  1482  022B  1703               	bsf	3,6	;RP1=1, select bank3
  1483  022C  0799               	addwf	main@i^(0+384),f
  1484  022D                     l3562:	
  1485  022D  3004               	movlw	4
  1486  022E  0219               	subwf	main@i^(0+384),w
  1487  022F  1C03               	skipc
  1488  0230  2A32               	goto	u2981
  1489  0231  2A33               	goto	u2980
  1490  0232                     u2981:	
  1491  0232  28AB               	goto	l3546
  1492  0233                     u2980:	
  1493  0233                     l3564:	
  1494                           
  1495                           ;main.c: 206:                 for (int i = 0; i < 4; i++)
  1496  0233  0195               	clrf	main@i_480^(0+384)
  1497  0234  0196               	clrf	(main@i_480+1)^(0+384)
  1498  0235                     l3570:	
  1499                           
  1500                           ;main.c: 207:                 {;main.c: 208:                     motorcycle[i] = 0;
  1501  0235  1683               	bsf	3,5	;RP0=1, select bank3
  1502  0236  1703               	bsf	3,6	;RP1=1, select bank3
  1503  0237  0815               	movf	main@i_480^(0+384),w
  1504  0238  3EE1               	addlw	(low (_motorcycle| 0))& (0+255)
  1505  0239  0084               	movwf	4
  1506  023A  1383               	bcf	3,7	;select IRP bank1
  1507  023B  0180               	clrf	0
  1508                           
  1509                           ;main.c: 209:                     car[i] = 0;
  1510  023C  0815               	movf	main@i_480^(0+384),w
  1511  023D  3EDD               	addlw	(low (_car| 0))& (0+255)
  1512  023E  0084               	movwf	4
  1513  023F  0180               	clrf	0
  1514                           
  1515                           ;main.c: 210:                     truck[i] = 0;
  1516  0240  0815               	movf	main@i_480^(0+384),w
  1517  0241  3ED9               	addlw	(low (_truck| 0))& (0+255)
  1518  0242  0084               	movwf	4
  1519  0243  0180               	clrf	0
  1520  0244                     l3572:	
  1521                           
  1522                           ;main.c: 211:                 }
  1523  0244  3001               	movlw	1
  1524  0245  0795               	addwf	main@i_480^(0+384),f
  1525  0246  1803               	skipnc
  1526  0247  0A96               	incf	(main@i_480+1)^(0+384),f
  1527  0248  3000               	movlw	0
  1528  0249  0796               	addwf	(main@i_480+1)^(0+384),f
  1529  024A                     l3574:	
  1530  024A  0816               	movf	(main@i_480+1)^(0+384),w
  1531  024B  3A80               	xorlw	128
  1532  024C  00FF               	movwf	btemp+1
  1533  024D  3080               	movlw	128
  1534  024E  027F               	subwf	btemp+1,w
  1535  024F  1D03               	skipz
  1536  0250  2A53               	goto	u2995
  1537  0251  3004               	movlw	4
  1538  0252  0215               	subwf	main@i_480^(0+384),w
  1539  0253                     u2995:	
  1540  0253  1C03               	skipc
  1541  0254  2A56               	goto	u2991
  1542  0255  2A57               	goto	u2990
  1543  0256                     u2991:	
  1544  0256  2A35               	goto	l3570
  1545  0257                     u2990:	
  1546  0257                     l3576:	
  1547                           
  1548                           ;main.c: 213:                 for (unsigned char i = 0; i < 5; i++)
  1549  0257  1683               	bsf	3,5	;RP0=1, select bank3
  1550  0258  1703               	bsf	3,6	;RP1=1, select bank3
  1551  0259  0193               	clrf	main@i_481^(0+384)
  1552  025A                     l3582:	
  1553                           
  1554                           ;main.c: 214:                 {;main.c: 215:                     dataFromGateway[i] = 0;
  1555  025A  0813               	movf	main@i_481^(0+384),w
  1556  025B  3EAE               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1557  025C  0084               	movwf	4
  1558  025D  1383               	bcf	3,7	;select IRP bank1
  1559  025E  0180               	clrf	0
  1560  025F                     l3584:	
  1561                           
  1562                           ;main.c: 216:                 }
  1563  025F  3001               	movlw	1
  1564  0260  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0261  1303               	bcf	3,6	;RP1=0, select bank0
  1566  0262  00D2               	movwf	??_main
  1567  0263  0852               	movf	??_main,w
  1568  0264  1683               	bsf	3,5	;RP0=1, select bank3
  1569  0265  1703               	bsf	3,6	;RP1=1, select bank3
  1570  0266  0793               	addwf	main@i_481^(0+384),f
  1571  0267                     l3586:	
  1572  0267  3005               	movlw	5
  1573  0268  0213               	subwf	main@i_481^(0+384),w
  1574  0269  1C03               	skipc
  1575  026A  2A6C               	goto	u3001
  1576  026B  2A6D               	goto	u3000
  1577  026C                     u3001:	
  1578  026C  2A5A               	goto	l3582
  1579  026D                     u3000:	
  1580  026D  2B7C               	goto	l223
  1581  026E                     l239:	
  1582                           ;main.c: 218:             case 0x0A:
  1583                           
  1584                           
  1585                           ;main.c: 219:                 readGatewayDone.Bit = 1;
  1586  026E  1461               	bsf	_readGatewayDone,0
  1587                           
  1588                           ;main.c: 220:                 readGateway.Bit = 0;
  1589  026F  1060               	bcf	_readGateway,0
  1590  0270                     l3588:	
  1591                           
  1592                           ;main.c: 222:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1593  0270  3000               	movlw	0
  1594  0271  120A  158A  2268  120A  118A  	fcall	_ADC_Read
  1595  0276  1283               	bcf	3,5	;RP0=0, select bank0
  1596  0277  1303               	bcf	3,6	;RP1=0, select bank0
  1597  0278  0824               	movf	?_ADC_Read,w
  1598  0279  00D2               	movwf	??_main
  1599  027A  0825               	movf	?_ADC_Read+1,w
  1600  027B  00D3               	movwf	??_main+1
  1601  027C  0D53               	rlf	??_main+1,w
  1602  027D  0CD3               	rrf	??_main+1,f
  1603  027E  0CD2               	rrf	??_main,f
  1604  027F  0D53               	rlf	??_main+1,w
  1605  0280  0CD3               	rrf	??_main+1,f
  1606  0281  0CD2               	rrf	??_main,f
  1607  0282  0852               	movf	??_main,w
  1608  0283  00C8               	movwf	map@x
  1609  0284  0853               	movf	??_main+1,w
  1610  0285  00C9               	movwf	map@x+1
  1611  0286  3000               	movlw	0
  1612  0287  00CA               	movwf	map@in_min
  1613  0288  00CB               	movwf	map@in_min+1
  1614  0289  30FF               	movlw	255
  1615  028A  00CC               	movwf	map@in_max
  1616  028B  3000               	movlw	0
  1617  028C  00CD               	movwf	map@in_max+1
  1618  028D  30EC               	movlw	236
  1619  028E  00CE               	movwf	map@out_min
  1620  028F  30FF               	movlw	255
  1621  0290  00CF               	movwf	map@out_min+1
  1622  0291  303C               	movlw	60
  1623  0292  00D0               	movwf	map@out_max
  1624  0293  3000               	movlw	0
  1625  0294  00D1               	movwf	map@out_max+1
  1626  0295  120A  158A  22E6  120A  118A  	fcall	_map
  1627  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1628  029B  1303               	bcf	3,6	;RP1=0, select bank0
  1629  029C  0848               	movf	?_map,w
  1630  029D  00D4               	movwf	??_main+2
  1631  029E  0854               	movf	??_main+2,w
  1632  029F  1683               	bsf	3,5	;RP0=1, select bank1
  1633  02A0  1303               	bcf	3,6	;RP1=0, select bank1
  1634  02A1  00AC               	movwf	_temp^(0+128)
  1635                           
  1636                           ;main.c: 223:                 umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  1637  02A2  3001               	movlw	1
  1638  02A3  120A  158A  2268  120A  118A  	fcall	_ADC_Read
  1639  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  1640  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  1641  02AA  0824               	movf	?_ADC_Read,w
  1642  02AB  00D2               	movwf	??_main
  1643  02AC  0825               	movf	?_ADC_Read+1,w
  1644  02AD  00D3               	movwf	??_main+1
  1645  02AE  0D53               	rlf	??_main+1,w
  1646  02AF  0CD3               	rrf	??_main+1,f
  1647  02B0  0CD2               	rrf	??_main,f
  1648  02B1  0D53               	rlf	??_main+1,w
  1649  02B2  0CD3               	rrf	??_main+1,f
  1650  02B3  0CD2               	rrf	??_main,f
  1651  02B4  0852               	movf	??_main,w
  1652  02B5  00C8               	movwf	map@x
  1653  02B6  0853               	movf	??_main+1,w
  1654  02B7  00C9               	movwf	map@x+1
  1655  02B8  3000               	movlw	0
  1656  02B9  00CA               	movwf	map@in_min
  1657  02BA  00CB               	movwf	map@in_min+1
  1658  02BB  30FF               	movlw	255
  1659  02BC  00CC               	movwf	map@in_max
  1660  02BD  3000               	movlw	0
  1661  02BE  00CD               	movwf	map@in_max+1
  1662  02BF  3000               	movlw	0
  1663  02C0  00CE               	movwf	map@out_min
  1664  02C1  00CF               	movwf	map@out_min+1
  1665  02C2  3064               	movlw	100
  1666  02C3  00D0               	movwf	map@out_max
  1667  02C4  3000               	movlw	0
  1668  02C5  00D1               	movwf	map@out_max+1
  1669  02C6  120A  158A  22E6  120A  118A  	fcall	_map
  1670  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  1671  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  1672  02CD  0848               	movf	?_map,w
  1673  02CE  00D4               	movwf	??_main+2
  1674  02CF  0854               	movf	??_main+2,w
  1675  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  1676  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  1677  02D2  00AB               	movwf	_umidita^(0+128)
  1678                           
  1679                           ;main.c: 224:                 pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  1680  02D3  3005               	movlw	5
  1681  02D4  120A  158A  2268  120A  118A  	fcall	_ADC_Read
  1682  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  1683  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  1684  02DB  0824               	movf	?_ADC_Read,w
  1685  02DC  00D2               	movwf	??_main
  1686  02DD  0825               	movf	?_ADC_Read+1,w
  1687  02DE  00D3               	movwf	??_main+1
  1688  02DF  0D53               	rlf	??_main+1,w
  1689  02E0  0CD3               	rrf	??_main+1,f
  1690  02E1  0CD2               	rrf	??_main,f
  1691  02E2  0D53               	rlf	??_main+1,w
  1692  02E3  0CD3               	rrf	??_main+1,f
  1693  02E4  0CD2               	rrf	??_main,f
  1694  02E5  0852               	movf	??_main,w
  1695  02E6  00C8               	movwf	map@x
  1696  02E7  0853               	movf	??_main+1,w
  1697  02E8  00C9               	movwf	map@x+1
  1698  02E9  3000               	movlw	0
  1699  02EA  00CA               	movwf	map@in_min
  1700  02EB  00CB               	movwf	map@in_min+1
  1701  02EC  30FF               	movlw	255
  1702  02ED  00CC               	movwf	map@in_max
  1703  02EE  3000               	movlw	0
  1704  02EF  00CD               	movwf	map@in_max+1
  1705  02F0  3000               	movlw	0
  1706  02F1  00CE               	movwf	map@out_min
  1707  02F2  00CF               	movwf	map@out_min+1
  1708  02F3  3064               	movlw	100
  1709  02F4  00D0               	movwf	map@out_max
  1710  02F5  3000               	movlw	0
  1711  02F6  00D1               	movwf	map@out_max+1
  1712  02F7  120A  158A  22E6  120A  118A  	fcall	_map
  1713  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  1714  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  1715  02FE  0848               	movf	?_map,w
  1716  02FF  00D4               	movwf	??_main+2
  1717  0300  0854               	movf	??_main+2,w
  1718  0301  1683               	bsf	3,5	;RP0=1, select bank1
  1719  0302  1303               	bcf	3,6	;RP1=0, select bank1
  1720  0303  00AA               	movwf	_pressione^(0+128)
  1721  0304                     l3590:	
  1722                           
  1723                           ;main.c: 225:                 sendByte(0x02, 0x00, temp);
  1724  0304  1283               	bcf	3,5	;RP0=0, select bank0
  1725  0305  1303               	bcf	3,6	;RP1=0, select bank0
  1726  0306  01B8               	clrf	sendByte@byte1
  1727  0307  1683               	bsf	3,5	;RP0=1, select bank1
  1728  0308  1303               	bcf	3,6	;RP1=0, select bank1
  1729  0309  082C               	movf	_temp^(0+128),w
  1730  030A  1283               	bcf	3,5	;RP0=0, select bank0
  1731  030B  1303               	bcf	3,6	;RP1=0, select bank0
  1732  030C  00D2               	movwf	??_main
  1733  030D  0852               	movf	??_main,w
  1734  030E  00B9               	movwf	sendByte@valore
  1735  030F  3002               	movlw	2
  1736  0310  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1737  0315                     l3592:	
  1738                           
  1739                           ;main.c: 226:                 sendByte(0x04, 0x00, umidita);
  1740  0315  1283               	bcf	3,5	;RP0=0, select bank0
  1741  0316  1303               	bcf	3,6	;RP1=0, select bank0
  1742  0317  01B8               	clrf	sendByte@byte1
  1743  0318  1683               	bsf	3,5	;RP0=1, select bank1
  1744  0319  1303               	bcf	3,6	;RP1=0, select bank1
  1745  031A  082B               	movf	_umidita^(0+128),w
  1746  031B  1283               	bcf	3,5	;RP0=0, select bank0
  1747  031C  1303               	bcf	3,6	;RP1=0, select bank0
  1748  031D  00D2               	movwf	??_main
  1749  031E  0852               	movf	??_main,w
  1750  031F  00B9               	movwf	sendByte@valore
  1751  0320  3004               	movlw	4
  1752  0321  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1753  0326                     l3594:	
  1754                           
  1755                           ;main.c: 227:                 sendByte(0x06, 0x00, pressione);
  1756  0326  1283               	bcf	3,5	;RP0=0, select bank0
  1757  0327  1303               	bcf	3,6	;RP1=0, select bank0
  1758  0328  01B8               	clrf	sendByte@byte1
  1759  0329  1683               	bsf	3,5	;RP0=1, select bank1
  1760  032A  1303               	bcf	3,6	;RP1=0, select bank1
  1761  032B  082A               	movf	_pressione^(0+128),w
  1762  032C  1283               	bcf	3,5	;RP0=0, select bank0
  1763  032D  1303               	bcf	3,6	;RP1=0, select bank0
  1764  032E  00D2               	movwf	??_main
  1765  032F  0852               	movf	??_main,w
  1766  0330  00B9               	movwf	sendByte@valore
  1767  0331  3006               	movlw	6
  1768  0332  120A  158A  22B5  120A  118A  	fcall	_sendByte
  1769  0337                     l3596:	
  1770                           
  1771                           ;main.c: 229:                 for (unsigned char i = 0; i < 5; i++)
  1772  0337  1683               	bsf	3,5	;RP0=1, select bank3
  1773  0338  1703               	bsf	3,6	;RP1=1, select bank3
  1774  0339  0194               	clrf	main@i_483^(0+384)
  1775  033A                     l3598:	
  1776  033A  3005               	movlw	5
  1777  033B  0214               	subwf	main@i_483^(0+384),w
  1778  033C  1C03               	skipc
  1779  033D  2B3F               	goto	u3011
  1780  033E  2B40               	goto	u3010
  1781  033F                     u3011:	
  1782  033F  2B41               	goto	l3602
  1783  0340                     u3010:	
  1784  0340  2B7C               	goto	l223
  1785  0341                     l3602:	
  1786                           
  1787                           ;main.c: 230:                 {;main.c: 231:                     dataFromGateway[i] = 0;
  1788  0341  0814               	movf	main@i_483^(0+384),w
  1789  0342  3EAE               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1790  0343  0084               	movwf	4
  1791  0344  1383               	bcf	3,7	;select IRP bank1
  1792  0345  0180               	clrf	0
  1793  0346                     l3604:	
  1794                           
  1795                           ;main.c: 232:                 }
  1796  0346  3001               	movlw	1
  1797  0347  1283               	bcf	3,5	;RP0=0, select bank0
  1798  0348  1303               	bcf	3,6	;RP1=0, select bank0
  1799  0349  00D2               	movwf	??_main
  1800  034A  0852               	movf	??_main,w
  1801  034B  1683               	bsf	3,5	;RP0=1, select bank3
  1802  034C  1703               	bsf	3,6	;RP1=1, select bank3
  1803  034D  0794               	addwf	main@i_483^(0+384),f
  1804  034E  2B3A               	goto	l3598
  1805  034F                     l3608:	
  1806                           
  1807                           ;main.c: 236:                 if (timerReadFromGateway >= 4)
  1808  034F  3004               	movlw	4
  1809  0350  1683               	bsf	3,5	;RP0=1, select bank1
  1810  0351  1303               	bcf	3,6	;RP1=0, select bank1
  1811  0352  022D               	subwf	_timerReadFromGateway^(0+128),w
  1812  0353  1C03               	skipc
  1813  0354  2B56               	goto	u3021
  1814  0355  2B57               	goto	u3020
  1815  0356                     u3021:	
  1816  0356  2B5C               	goto	l3612
  1817  0357                     u3020:	
  1818  0357                     l3610:	
  1819                           
  1820                           ;main.c: 237:                 {;main.c: 238:                     readGatewayDone.Bit = 1
      +                          ;
  1821  0357  1283               	bcf	3,5	;RP0=0, select bank0
  1822  0358  1303               	bcf	3,6	;RP1=0, select bank0
  1823  0359  1461               	bsf	_readGatewayDone,0
  1824                           
  1825                           ;main.c: 239:                     readGatewayDone.Timeout = 1;
  1826  035A  14E1               	bsf	_readGatewayDone,1
  1827                           
  1828                           ;main.c: 240:                     readGateway.Bit = 0;
  1829  035B  1060               	bcf	_readGateway,0
  1830  035C                     l3612:	
  1831                           
  1832                           ;main.c: 243:                 if (dataFromGatewayIndex >= 15)
  1833  035C  300F               	movlw	15
  1834  035D  1283               	bcf	3,5	;RP0=0, select bank0
  1835  035E  025B               	subwf	_dataFromGatewayIndex,w
  1836  035F  1C03               	skipc
  1837  0360  2B62               	goto	u3031
  1838  0361  2B63               	goto	u3030
  1839  0362                     u3031:	
  1840  0362  2B7C               	goto	l223
  1841  0363                     u3030:	
  1842  0363                     l3614:	
  1843                           
  1844                           ;main.c: 244:                 {;main.c: 245:                     readGatewayDone.Bit = 1
      +                          ;
  1845  0363  1461               	bsf	_readGatewayDone,0
  1846                           
  1847                           ;main.c: 246:                     readGatewayDone.Timeout = 0;
  1848  0364  10E1               	bcf	_readGatewayDone,1
  1849                           
  1850                           ;main.c: 247:                     readGateway.Bit = 0;
  1851  0365  1060               	bcf	_readGateway,0
  1852  0366  2B7C               	goto	l223
  1853  0367                     l3618:	
  1854  0367  1683               	bsf	3,5	;RP0=1, select bank1
  1855  0368  1303               	bcf	3,6	;RP1=0, select bank1
  1856  0369  082E               	movf	_dataFromGateway^(0+128),w
  1857  036A  397F               	andlw	127
  1858  036B  1283               	bcf	3,5	;RP0=0, select bank0
  1859  036C  1303               	bcf	3,6	;RP1=0, select bank0
  1860  036D  00D2               	movwf	??_main
  1861  036E  01D3               	clrf	??_main+1
  1862                           
  1863                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1864                           ; Switch size 1, requested type "simple"
  1865                           ; Number of cases is 1, Range of values is 0 to 0
  1866                           ; switch strategies available:
  1867                           ; Name         Instructions Cycles
  1868                           ; simple_byte            4     3 (average)
  1869                           ; direct_byte           11     8 (fixed)
  1870                           ; jumptable            260     6 (fixed)
  1871                           ;	Chosen strategy is simple_byte
  1872  036F  0853               	movf	??_main+1,w
  1873  0370  3A00               	xorlw	0	; case 0
  1874  0371  1903               	skipnz
  1875  0372  2B74               	goto	l3928
  1876  0373  2B4F               	goto	l3608
  1877  0374                     l3928:	
  1878                           
  1879                           ; Switch size 1, requested type "simple"
  1880                           ; Number of cases is 2, Range of values is 8 to 10
  1881                           ; switch strategies available:
  1882                           ; Name         Instructions Cycles
  1883                           ; simple_byte            7     4 (average)
  1884                           ; direct_byte           20    11 (fixed)
  1885                           ; jumptable            263     9 (fixed)
  1886                           ;	Chosen strategy is simple_byte
  1887  0374  0852               	movf	??_main,w
  1888  0375  3A08               	xorlw	8	; case 8
  1889  0376  1903               	skipnz
  1890  0377  28A6               	goto	l225
  1891  0378  3A02               	xorlw	2	; case 10
  1892  0379  1903               	skipnz
  1893  037A  2A6E               	goto	l239
  1894  037B  2B4F               	goto	l3608
  1895  037C                     l223:	
  1896                           ;main.c: 251:         }
  1897                           
  1898                           
  1899                           ;main.c: 254:         if (readGatewayDone.Bit)
  1900  037C  1283               	bcf	3,5	;RP0=0, select bank0
  1901  037D  1303               	bcf	3,6	;RP1=0, select bank0
  1902  037E  1C61               	btfss	_readGatewayDone,0
  1903  037F  2B81               	goto	u3041
  1904  0380  2B82               	goto	u3040
  1905  0381                     u3041:	
  1906  0381  2B9A               	goto	l3632
  1907  0382                     u3040:	
  1908  0382                     l3620:	
  1909                           
  1910                           ;main.c: 255:         {;main.c: 257:             readGateway.Bit = 0;
  1911  0382  1060               	bcf	_readGateway,0
  1912  0383                     l3622:	
  1913                           
  1914                           ;main.c: 258:             dataFromGatewayIndex = 0;
  1915  0383  01DB               	clrf	_dataFromGatewayIndex
  1916  0384                     l3624:	
  1917                           
  1918                           ;main.c: 259:             readGatewayDone.Bit = 0;
  1919  0384  1061               	bcf	_readGatewayDone,0
  1920                           
  1921                           ;main.c: 260:             timerReadFromGateway = 0;
  1922  0385  1683               	bsf	3,5	;RP0=1, select bank1
  1923  0386  1303               	bcf	3,6	;RP1=0, select bank1
  1924  0387  01AD               	clrf	_timerReadFromGateway^(0+128)
  1925  0388                     l3626:	
  1926                           
  1927                           ;main.c: 263:             if (readGatewayDone.Timeout)
  1928  0388  1283               	bcf	3,5	;RP0=0, select bank0
  1929  0389  1303               	bcf	3,6	;RP1=0, select bank0
  1930  038A  1CE1               	btfss	_readGatewayDone,1
  1931  038B  2B8D               	goto	u3051
  1932  038C  2B8E               	goto	u3050
  1933  038D                     u3051:	
  1934  038D  2B90               	goto	l3630
  1935  038E                     u3050:	
  1936  038E                     l3628:	
  1937                           
  1938                           ;main.c: 264:             {;main.c: 265:                 readGatewayDone.Timeout = 0;
  1939  038E  10E1               	bcf	_readGatewayDone,1
  1940                           
  1941                           ;main.c: 266:             }
  1942  038F  2B9A               	goto	l3632
  1943  0390                     l3630:	
  1944                           
  1945                           ;main.c: 269:             {;main.c: 271:                 SetReceivedTimes(dataFromGatewa
      +                          y, Semafori);
  1946  0390  3064               	movlw	(low (_Semafori| 0))& (0+255)
  1947  0391  00D2               	movwf	??_main
  1948  0392  0852               	movf	??_main,w
  1949  0393  00AC               	movwf	SetReceivedTimes@_semafori
  1950  0394  30AE               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1951  0395  120A  158A  24F8  120A  118A  	fcall	_SetReceivedTimes
  1952  039A                     l3632:	
  1953                           
  1954                           ;main.c: 277:         if (secondPassed.Bit && cycled.Bit)
  1955  039A  1283               	bcf	3,5	;RP0=0, select bank0
  1956  039B  1303               	bcf	3,6	;RP1=0, select bank0
  1957  039C  1C5F               	btfss	_secondPassed,0
  1958  039D  2B9F               	goto	u3061
  1959  039E  2BA0               	goto	u3060
  1960  039F                     u3061:	
  1961  039F  2CA9               	goto	l3674
  1962  03A0                     u3060:	
  1963  03A0                     l3634:	
  1964  03A0  1C5E               	btfss	_cycled,0
  1965  03A1  2BA3               	goto	u3071
  1966  03A2  2BA4               	goto	u3070
  1967  03A3                     u3071:	
  1968  03A3  2CA9               	goto	l3674
  1969  03A4                     u3070:	
  1970  03A4                     l3636:	
  1971                           
  1972                           ;main.c: 278:         {;main.c: 279:             for (unsigned char i = 0; i < n_semafor
      +                          i; i++)
  1973  03A4  1683               	bsf	3,5	;RP0=1, select bank3
  1974  03A5  1703               	bsf	3,6	;RP1=1, select bank3
  1975  03A6  0198               	clrf	main@i_485^(0+384)
  1976  03A7                     l3638:	
  1977  03A7  3002               	movlw	2
  1978  03A8  0218               	subwf	main@i_485^(0+384),w
  1979  03A9  1C03               	skipc
  1980  03AA  2BAC               	goto	u3081
  1981  03AB  2BAD               	goto	u3080
  1982  03AC                     u3081:	
  1983  03AC  2BAE               	goto	l3642
  1984  03AD                     u3080:	
  1985  03AD  2CA9               	goto	l3674
  1986  03AE                     l3642:	
  1987                           
  1988                           ;main.c: 280:             {;main.c: 281:                 if ((*Semafori[i]).times[0] != 
      +                          0)
  1989  03AE  0818               	movf	main@i_485^(0+384),w
  1990  03AF  3E64               	addlw	(low (_Semafori| 0))& (0+255)
  1991  03B0  0084               	movwf	4
  1992  03B1  1383               	bcf	3,7	;select IRP bank0
  1993  03B2  0800               	movf	0,w
  1994  03B3  0084               	movwf	4
  1995  03B4  0800               	movf	0,w
  1996  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  1997  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  1998  03B7  00D2               	movwf	??_main
  1999  03B8  0A84               	incf	4,f
  2000  03B9  0800               	movf	0,w
  2001  03BA  00D3               	movwf	??_main+1
  2002  03BB  0852               	movf	??_main,w
  2003  03BC  0453               	iorwf	??_main+1,w
  2004  03BD  1903               	btfsc	3,2
  2005  03BE  2BC0               	goto	u3091
  2006  03BF  2BC1               	goto	u3090
  2007  03C0                     u3091:	
  2008  03C0  2CA0               	goto	l3670
  2009  03C1                     u3090:	
  2010  03C1                     l3644:	
  2011                           
  2012                           ;main.c: 282:                 {;main.c: 283:                     time[i]++;
  2013  03C1  1683               	bsf	3,5	;RP0=1, select bank3
  2014  03C2  1703               	bsf	3,6	;RP1=1, select bank3
  2015  03C3  0818               	movf	main@i_485^(0+384),w
  2016  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2017  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2018  03C6  00D2               	movwf	??_main
  2019  03C7  0752               	addwf	??_main,w
  2020  03C8  3EA4               	addlw	(low (_time| 0))& (0+255)
  2021  03C9  0084               	movwf	4
  2022  03CA  3001               	movlw	1
  2023  03CB  0780               	addwf	0,f
  2024  03CC  0A84               	incf	4,f
  2025  03CD  1803               	skipnc
  2026  03CE  0A80               	incf	0,f
  2027                           
  2028                           ;main.c: 284:                     unsigned char lux_select = (*Semafori[i]).lux_select;
  2029  03CF  1683               	bsf	3,5	;RP0=1, select bank3
  2030  03D0  1703               	bsf	3,6	;RP1=1, select bank3
  2031  03D1  0818               	movf	main@i_485^(0+384),w
  2032  03D2  3E64               	addlw	(low (_Semafori| 0))& (0+255)
  2033  03D3  0084               	movwf	4
  2034  03D4  0800               	movf	0,w
  2035  03D5  3E0C               	addlw	12
  2036  03D6  0084               	movwf	4
  2037  03D7  0800               	movf	0,w
  2038  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2039  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  2040  03DA  00D2               	movwf	??_main
  2041  03DB  0852               	movf	??_main,w
  2042  03DC  1683               	bsf	3,5	;RP0=1, select bank3
  2043  03DD  1703               	bsf	3,6	;RP1=1, select bank3
  2044  03DE  0097               	movwf	main@lux_select^(0+384)
  2045                           
  2046                           ;main.c: 286:                     if ((*Semafori[i]).times[lux_select] - time[i] < 0)
  2047  03DF  0818               	movf	main@i_485^(0+384),w
  2048  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2049  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  2050  03E2  00D2               	movwf	??_main
  2051  03E3  0752               	addwf	??_main,w
  2052  03E4  3EA4               	addlw	(low (_time| 0))& (0+255)
  2053  03E5  0084               	movwf	4
  2054  03E6  0800               	movf	0,w
  2055  03E7  00D3               	movwf	??_main+1
  2056  03E8  0A84               	incf	4,f
  2057  03E9  0800               	movf	0,w
  2058  03EA  00D4               	movwf	??_main+2
  2059  03EB  1683               	bsf	3,5	;RP0=1, select bank3
  2060  03EC  1703               	bsf	3,6	;RP1=1, select bank3
  2061  03ED  0818               	movf	main@i_485^(0+384),w
  2062  03EE  3E64               	addlw	(low (_Semafori| 0))& (0+255)
  2063  03EF  0084               	movwf	4
  2064  03F0  0817               	movf	main@lux_select^(0+384),w
  2065  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  2066  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  2067  03F3  00D5               	movwf	??_main+3
  2068  03F4  0755               	addwf	??_main+3,w
  2069  03F5  0700               	addwf	0,w
  2070  03F6  00D6               	movwf	??_main+4
  2071  03F7  0856               	movf	??_main+4,w
  2072  03F8  0084               	movwf	4
  2073  03F9  0800               	movf	0,w
  2074  03FA  00D7               	movwf	??_main+5
  2075  03FB  0A84               	incf	4,f
  2076  03FC  0800               	movf	0,w
  2077  03FD  00D8               	movwf	??_main+6
  2078  03FE  0853               	movf	??_main+1,w
  2079  03FF  0257               	subwf	??_main+5,w
  2080  0400  00D9               	movwf	??_main+7
  2081  0401  0854               	movf	??_main+2,w
  2082  0402  1C03               	skipc
  2083  0403  0A54               	incf	??_main+2,w
  2084  0404  0258               	subwf	??_main+6,w
  2085  0405  00DA               	movwf	??_main+8
  2086  0406  1FDA               	btfss	??_main+8,7
  2087  0407  2C09               	goto	u3101
  2088  0408  2C0A               	goto	u3100
  2089  0409                     u3101:	
  2090  0409  2C46               	goto	l252
  2091  040A                     u3100:	
  2092  040A                     l3646:	
  2093                           
  2094                           ;main.c: 287:                     {;main.c: 288:                         lux_select++;
  2095  040A  3001               	movlw	1
  2096  040B  00D2               	movwf	??_main
  2097  040C  0852               	movf	??_main,w
  2098  040D  1683               	bsf	3,5	;RP0=1, select bank3
  2099  040E  1703               	bsf	3,6	;RP1=1, select bank3
  2100  040F  0797               	addwf	main@lux_select^(0+384),f
  2101  0410                     l3648:	
  2102                           
  2103                           ;main.c: 289:                         time[i] = 1;
  2104  0410  0818               	movf	main@i_485^(0+384),w
  2105  0411  1283               	bcf	3,5	;RP0=0, select bank0
  2106  0412  1303               	bcf	3,6	;RP1=0, select bank0
  2107  0413  00D2               	movwf	??_main
  2108  0414  0752               	addwf	??_main,w
  2109  0415  3EA4               	addlw	(low (_time| 0))& (0+255)
  2110  0416  0084               	movwf	4
  2111  0417  3001               	movlw	1
  2112  0418  0080               	movwf	0
  2113  0419  0A84               	incf	4,f
  2114  041A  3000               	movlw	0
  2115  041B  0080               	movwf	0
  2116  041C                     l3650:	
  2117                           
  2118                           ;main.c: 291:                         if (lux_select >= 3)
  2119  041C  3003               	movlw	3
  2120  041D  1683               	bsf	3,5	;RP0=1, select bank3
  2121  041E  1703               	bsf	3,6	;RP1=1, select bank3
  2122  041F  0217               	subwf	main@lux_select^(0+384),w
  2123  0420  1C03               	skipc
  2124  0421  2C23               	goto	u3111
  2125  0422  2C24               	goto	u3110
  2126  0423                     u3111:	
  2127  0423  2C46               	goto	l252
  2128  0424                     u3110:	
  2129  0424                     l3652:	
  2130                           
  2131                           ;main.c: 292:                         {;main.c: 293:                             lux_sel
      +                          ect = 0;
  2132  0424  0197               	clrf	main@lux_select^(0+384)
  2133  0425                     l3654:	
  2134                           
  2135                           ;main.c: 295:                             if (i == 0)
  2136  0425  0818               	movf	main@i_485^(0+384),w
  2137  0426  1D03               	btfss	3,2
  2138  0427  2C29               	goto	u3121
  2139  0428  2C2A               	goto	u3120
  2140  0429                     u3121:	
  2141  0429  2C46               	goto	l252
  2142  042A                     u3120:	
  2143  042A                     l3656:	
  2144                           
  2145                           ;main.c: 296:                             {;main.c: 297:                                
      +                           UpdateTimes(Semafori);
  2146  042A  3064               	movlw	(low (_Semafori| 0))& (0+255)
  2147  042B  120A  158A  2687  120A  118A  	fcall	_UpdateTimes
  2148  0430                     l3658:	
  2149                           
  2150                           ;main.c: 299:                                 time[0] = 1;
  2151  0430  3001               	movlw	1
  2152  0431  1683               	bsf	3,5	;RP0=1, select bank1
  2153  0432  1303               	bcf	3,6	;RP1=0, select bank1
  2154  0433  00A4               	movwf	_time^(0+128)
  2155  0434  3000               	movlw	0
  2156  0435  00A5               	movwf	(_time^(0+128)+1)
  2157  0436                     l3660:	
  2158                           
  2159                           ;main.c: 300:                                 time[1] = 1;
  2160  0436  3001               	movlw	1
  2161  0437  00A6               	movwf	(_time^(0+128)+2)
  2162  0438  3000               	movlw	0
  2163  0439  00A7               	movwf	(_time^(0+128)+3)
  2164  043A                     l3662:	
  2165                           
  2166                           ;main.c: 302:                                 (*Semafori[0]).lux_select = 0;
  2167  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2168  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2169  043C  0864               	movf	_Semafori,w
  2170  043D  3E0C               	addlw	12
  2171  043E  0084               	movwf	4
  2172  043F  1383               	bcf	3,7	;select IRP bank0
  2173  0440  0180               	clrf	0
  2174  0441                     l3664:	
  2175                           
  2176                           ;main.c: 303:                                 (*Semafori[1]).lux_select = 1;
  2177  0441  0865               	movf	low ((_Semafori| 0+1)),w
  2178  0442  3E0C               	addlw	12
  2179  0443  0084               	movwf	4
  2180  0444  0180               	clrf	0
  2181  0445  0A80               	incf	0,f
  2182  0446                     l252:	
  2183                           ;main.c: 306:                     }
  2184                           
  2185                           
  2186                           ;main.c: 308:                     luciSemaforo(i, lux_select);
  2187  0446  1683               	bsf	3,5	;RP0=1, select bank3
  2188  0447  1703               	bsf	3,6	;RP1=1, select bank3
  2189  0448  0817               	movf	main@lux_select^(0+384),w
  2190  0449  1283               	bcf	3,5	;RP0=0, select bank0
  2191  044A  1303               	bcf	3,6	;RP1=0, select bank0
  2192  044B  00D2               	movwf	??_main
  2193  044C  0852               	movf	??_main,w
  2194  044D  00A4               	movwf	luciSemaforo@lux
  2195  044E  1683               	bsf	3,5	;RP0=1, select bank3
  2196  044F  1703               	bsf	3,6	;RP1=1, select bank3
  2197  0450  0818               	movf	main@i_485^(0+384),w
  2198  0451  120A  158A  23F5  120A  118A  	fcall	_luciSemaforo
  2199  0456                     l3666:	
  2200                           
  2201                           ;main.c: 309:                     (*Semafori[i]).lux_select = lux_select;
  2202  0456  1683               	bsf	3,5	;RP0=1, select bank3
  2203  0457  1703               	bsf	3,6	;RP1=1, select bank3
  2204  0458  0817               	movf	main@lux_select^(0+384),w
  2205  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2206  045A  1303               	bcf	3,6	;RP1=0, select bank0
  2207  045B  00D2               	movwf	??_main
  2208  045C  1683               	bsf	3,5	;RP0=1, select bank3
  2209  045D  1703               	bsf	3,6	;RP1=1, select bank3
  2210  045E  0818               	movf	main@i_485^(0+384),w
  2211  045F  3E64               	addlw	(low (_Semafori| 0))& (0+255)
  2212  0460  0084               	movwf	4
  2213  0461  1383               	bcf	3,7	;select IRP bank0
  2214  0462  0800               	movf	0,w
  2215  0463  3E0C               	addlw	12
  2216  0464  0084               	movwf	4
  2217  0465  1283               	bcf	3,5	;RP0=0, select bank0
  2218  0466  1303               	bcf	3,6	;RP1=0, select bank0
  2219  0467  0852               	movf	??_main,w
  2220  0468  0080               	movwf	0
  2221  0469                     l3668:	
  2222                           
  2223                           ;main.c: 310:                     GetDigits(DigitsArr, i, (*Semafori[i]).times[lux_selec
      +                          t] - time[i]);
  2224  0469  1683               	bsf	3,5	;RP0=1, select bank3
  2225  046A  1703               	bsf	3,6	;RP1=1, select bank3
  2226  046B  0818               	movf	main@i_485^(0+384),w
  2227  046C  1283               	bcf	3,5	;RP0=0, select bank0
  2228  046D  1303               	bcf	3,6	;RP1=0, select bank0
  2229  046E  00D2               	movwf	??_main
  2230  046F  0852               	movf	??_main,w
  2231  0470  00C8               	movwf	GetDigits@index
  2232  0471  1683               	bsf	3,5	;RP0=1, select bank3
  2233  0472  1703               	bsf	3,6	;RP1=1, select bank3
  2234  0473  0818               	movf	main@i_485^(0+384),w
  2235  0474  1283               	bcf	3,5	;RP0=0, select bank0
  2236  0475  1303               	bcf	3,6	;RP1=0, select bank0
  2237  0476  00D3               	movwf	??_main+1
  2238  0477  0753               	addwf	??_main+1,w
  2239  0478  3EA4               	addlw	(low (_time| 0))& (0+255)
  2240  0479  0084               	movwf	4
  2241  047A  0800               	movf	0,w
  2242  047B  00D4               	movwf	??_main+2
  2243  047C  0A84               	incf	4,f
  2244  047D  0800               	movf	0,w
  2245  047E  00D5               	movwf	??_main+3
  2246  047F  1683               	bsf	3,5	;RP0=1, select bank3
  2247  0480  1703               	bsf	3,6	;RP1=1, select bank3
  2248  0481  0818               	movf	main@i_485^(0+384),w
  2249  0482  3E64               	addlw	(low (_Semafori| 0))& (0+255)
  2250  0483  0084               	movwf	4
  2251  0484  0817               	movf	main@lux_select^(0+384),w
  2252  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0487  00D6               	movwf	??_main+4
  2255  0488  0756               	addwf	??_main+4,w
  2256  0489  0700               	addwf	0,w
  2257  048A  00D7               	movwf	??_main+5
  2258  048B  0857               	movf	??_main+5,w
  2259  048C  0084               	movwf	4
  2260  048D  0800               	movf	0,w
  2261  048E  00D8               	movwf	??_main+6
  2262  048F  0A84               	incf	4,f
  2263  0490  0800               	movf	0,w
  2264  0491  00D9               	movwf	??_main+7
  2265  0492  0854               	movf	??_main+2,w
  2266  0493  0258               	subwf	??_main+6,w
  2267  0494  00C9               	movwf	GetDigits@Time
  2268  0495  0855               	movf	??_main+3,w
  2269  0496  1C03               	skipc
  2270  0497  0A55               	incf	??_main+3,w
  2271  0498  0259               	subwf	??_main+7,w
  2272  0499  00CA               	movwf	GetDigits@Time+1
  2273  049A  3062               	movlw	(low (_DigitsArr| 0))& (0+255)
  2274  049B  120A  118A  24C7  120A  118A  	fcall	_GetDigits
  2275  04A0                     l3670:	
  2276                           
  2277                           ;main.c: 312:             }
  2278  04A0  3001               	movlw	1
  2279  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  2280  04A2  1303               	bcf	3,6	;RP1=0, select bank0
  2281  04A3  00D2               	movwf	??_main
  2282  04A4  0852               	movf	??_main,w
  2283  04A5  1683               	bsf	3,5	;RP0=1, select bank3
  2284  04A6  1703               	bsf	3,6	;RP1=1, select bank3
  2285  04A7  0798               	addwf	main@i_485^(0+384),f
  2286  04A8  2BA7               	goto	l3638
  2287  04A9                     l3674:	
  2288                           
  2289                           ;main.c: 315:         ShowDigitsOnDisplay();
  2290  04A9  120A  118A  2713  120A  118A  	fcall	_ShowDigitsOnDisplay
  2291  04AE                     l3676:	
  2292                           
  2293                           ;main.c: 321:         if (secondPassed.Bit && cycled.Bit)
  2294  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  2295  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  2296  04B0  1C5F               	btfss	_secondPassed,0
  2297  04B1  2CB3               	goto	u3131
  2298  04B2  2CB4               	goto	u3130
  2299  04B3                     u3131:	
  2300  04B3  2CBA               	goto	l255
  2301  04B4                     u3130:	
  2302  04B4                     l3678:	
  2303  04B4  1C5E               	btfss	_cycled,0
  2304  04B5  2CB7               	goto	u3141
  2305  04B6  2CB8               	goto	u3140
  2306  04B7                     u3141:	
  2307  04B7  2CBA               	goto	l255
  2308  04B8                     u3140:	
  2309  04B8                     l3680:	
  2310                           
  2311                           ;main.c: 322:         {;main.c: 323:             secondPassed.Bit = 0;
  2312  04B8  105F               	bcf	_secondPassed,0
  2313                           
  2314                           ;main.c: 324:             cycled.Bit = 0;
  2315  04B9  105E               	bcf	_cycled,0
  2316  04BA                     l255:	
  2317                           ;main.c: 325:         }
  2318                           
  2319                           
  2320                           ;main.c: 326:         if (secondPassed.Bit && !cycled.Bit)
  2321  04BA  1C5F               	btfss	_secondPassed,0
  2322  04BB  2CBD               	goto	u3151
  2323  04BC  2CBE               	goto	u3150
  2324  04BD                     u3151:	
  2325  04BD  28A1               	goto	l3536
  2326  04BE                     u3150:	
  2327  04BE                     l3682:	
  2328  04BE  185E               	btfsc	_cycled,0
  2329  04BF  2CC1               	goto	u3161
  2330  04C0  2CC2               	goto	u3160
  2331  04C1                     u3161:	
  2332  04C1  28A1               	goto	l3536
  2333  04C2                     u3160:	
  2334  04C2                     l3684:	
  2335                           
  2336                           ;main.c: 327:         {;main.c: 328:             cycled.Bit = 1;
  2337  04C2  145E               	bsf	_cycled,0
  2338  04C3  28A1               	goto	l3536
  2339  04C4  120A  118A  2810   	ljmp	start
  2340  04C7                     __end_of_main:	
  2341                           
  2342                           	psect	text1
  2343  0AB5                     __ptext1:	
  2344 ;; *************** function _sendByte *****************
  2345 ;; Defined at:
  2346 ;;		line 390 in file "main.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  byte0           1    wreg     unsigned char 
  2349 ;;  byte1           1   24[BANK0 ] unsigned char 
  2350 ;;  valore          1   25[BANK0 ] unsigned char 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  byte0           1   29[BANK0 ] unsigned char 
  2353 ;;  i               1   31[BANK0 ] unsigned char 
  2354 ;;  txByte          1   30[BANK0 ] PTR unsigned char 
  2355 ;;		 -> BuildByte@txByte(5), 
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      void 
  2358 ;; Registers used:
  2359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2365 ;;      Params:         0       2       0       0       0
  2366 ;;      Locals:         0       3       0       0       0
  2367 ;;      Temps:          0       3       0       0       0
  2368 ;;      Totals:         0       8       0       0       0
  2369 ;;Total ram usage:        8 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    4
  2372 ;; This function calls:
  2373 ;;		_BuildByte
  2374 ;;		_UART_TxChar
  2375 ;; This function is called by:
  2376 ;;		_main
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           
  2381                           ;psect for function _sendByte
  2382  0AB5                     _sendByte:	
  2383                           
  2384                           ;incstack = 0
  2385                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2386                           ;sendByte@byte0 stored from wreg
  2387  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  2388  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  2389  0AB7  00BD               	movwf	sendByte@byte0
  2390  0AB8                     l3404:	
  2391                           
  2392                           ;main.c: 390: void sendByte(char byte0, char byte1, char valore);main.c: 391: {;main.c: 
      +                          392:     char *txByte;;main.c: 393:     txByte = BuildByte(byte0, byte1, valore);
  2393  0AB8  0838               	movf	sendByte@byte1,w
  2394  0AB9  00BA               	movwf	??_sendByte
  2395  0ABA  083A               	movf	??_sendByte,w
  2396  0ABB  00A4               	movwf	BuildByte@byte1
  2397  0ABC  0839               	movf	sendByte@valore,w
  2398  0ABD  00BB               	movwf	??_sendByte+1
  2399  0ABE  083B               	movf	??_sendByte+1,w
  2400  0ABF  00A5               	movwf	BuildByte@valore
  2401  0AC0  083D               	movf	sendByte@byte0,w
  2402  0AC1  120A  118A  2594  120A  158A  	fcall	_BuildByte
  2403  0AC6  1283               	bcf	3,5	;RP0=0, select bank0
  2404  0AC7  1303               	bcf	3,6	;RP1=0, select bank0
  2405  0AC8  00BC               	movwf	??_sendByte+2
  2406  0AC9  083C               	movf	??_sendByte+2,w
  2407  0ACA  00BE               	movwf	sendByte@txByte
  2408  0ACB                     l3406:	
  2409                           
  2410                           ;main.c: 395:     for (unsigned char i = 0; i < 5; i++)
  2411  0ACB  01BF               	clrf	sendByte@i
  2412  0ACC                     l3412:	
  2413                           
  2414                           ;main.c: 396:     {;main.c: 397:         UART_TxChar(*(txByte++));
  2415  0ACC  083E               	movf	sendByte@txByte,w
  2416  0ACD  0084               	movwf	4
  2417  0ACE  1383               	bcf	3,7	;select IRP bank0
  2418  0ACF  0800               	movf	0,w
  2419  0AD0  120A  158A  2233  120A  158A  	fcall	_UART_TxChar
  2420  0AD5                     l3414:	
  2421  0AD5  3001               	movlw	1
  2422  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
  2423  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
  2424  0AD8  00BA               	movwf	??_sendByte
  2425  0AD9  083A               	movf	??_sendByte,w
  2426  0ADA  07BE               	addwf	sendByte@txByte,f
  2427  0ADB                     l3416:	
  2428                           
  2429                           ;main.c: 398:     }
  2430  0ADB  3001               	movlw	1
  2431  0ADC  00BA               	movwf	??_sendByte
  2432  0ADD  083A               	movf	??_sendByte,w
  2433  0ADE  07BF               	addwf	sendByte@i,f
  2434  0ADF                     l3418:	
  2435  0ADF  3005               	movlw	5
  2436  0AE0  023F               	subwf	sendByte@i,w
  2437  0AE1  1C03               	skipc
  2438  0AE2  2AE4               	goto	u2881
  2439  0AE3  2AE5               	goto	u2880
  2440  0AE4                     u2881:	
  2441  0AE4  2ACC               	goto	l3412
  2442  0AE5                     u2880:	
  2443  0AE5                     l294:	
  2444  0AE5  0008               	return
  2445  0AE6                     __end_of_sendByte:	
  2446                           
  2447                           	psect	text2
  2448  0A33                     __ptext2:	
  2449 ;; *************** function _UART_TxChar *****************
  2450 ;; Defined at:
  2451 ;;		line 365 in file "main.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  ch              1    wreg     unsigned char 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  ch              1    4[BANK0 ] unsigned char 
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2465 ;;      Params:         0       0       0       0       0
  2466 ;;      Locals:         0       1       0       0       0
  2467 ;;      Temps:          0       0       0       0       0
  2468 ;;      Totals:         0       1       0       0       0
  2469 ;;Total ram usage:        1 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    3
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_sendByte
  2476 ;;		_UART_Write_Text
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           
  2481                           ;psect for function _UART_TxChar
  2482  0A33                     _UART_TxChar:	
  2483                           
  2484                           ;incstack = 0
  2485                           ; Regs used in _UART_TxChar: [wreg]
  2486                           ;UART_TxChar@ch stored from wreg
  2487  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  2488  0A34  1303               	bcf	3,6	;RP1=0, select bank0
  2489  0A35  00A4               	movwf	UART_TxChar@ch
  2490  0A36                     l3096:	
  2491  0A36                     l274:	
  2492                           ;main.c: 368:         ;
  2493                           
  2494                           
  2495                           ;main.c: 367:     while (!TXIF)
  2496  0A36  1E0C               	btfss	12,4	;volatile
  2497  0A37  2A39               	goto	u2371
  2498  0A38  2A3A               	goto	u2370
  2499  0A39                     u2371:	
  2500  0A39  2A36               	goto	l274
  2501  0A3A                     u2370:	
  2502  0A3A                     l276:	
  2503                           
  2504                           ;main.c: 369:     TXIF = 0;
  2505  0A3A  120C               	bcf	12,4	;volatile
  2506  0A3B                     l3098:	
  2507                           
  2508                           ;main.c: 370:     TXREG = ch;
  2509  0A3B  0824               	movf	UART_TxChar@ch,w
  2510  0A3C  0099               	movwf	25	;volatile
  2511  0A3D                     l277:	
  2512  0A3D  0008               	return
  2513  0A3E                     __end_of_UART_TxChar:	
  2514                           
  2515                           	psect	text3
  2516  0594                     __ptext3:	
  2517 ;; *************** function _BuildByte *****************
  2518 ;; Defined at:
  2519 ;;		line 2 in file "./CustomLib/Serial.h"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;  byte0           1    wreg     unsigned char 
  2522 ;;  byte1           1    4[BANK0 ] unsigned char 
  2523 ;;  valore          1    5[BANK0 ] unsigned char 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  byte0           1    8[BANK0 ] unsigned char 
  2526 ;;  y               2   18[BANK0 ] int 
  2527 ;;  y               2   16[BANK0 ] int 
  2528 ;;  i               2   22[BANK0 ] int 
  2529 ;;  i               2   20[BANK0 ] int 
  2530 ;;  txByte          5    9[BANK0 ] unsigned char [5]
  2531 ;;  sommaColumn     1   15[BANK0 ] unsigned char 
  2532 ;;  sommaRow        1   14[BANK0 ] unsigned char 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      PTR unsigned char 
  2535 ;; Registers used:
  2536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2542 ;;      Params:         0       2       0       0       0
  2543 ;;      Locals:         0      16       0       0       0
  2544 ;;      Temps:          0       2       0       0       0
  2545 ;;      Totals:         0      20       0       0       0
  2546 ;;Total ram usage:       20 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    3
  2549 ;; This function calls:
  2550 ;;		Nothing
  2551 ;; This function is called by:
  2552 ;;		_sendByte
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           
  2557                           ;psect for function _BuildByte
  2558  0594                     _BuildByte:	
  2559                           
  2560                           ;incstack = 0
  2561                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2562                           ;BuildByte@byte0 stored from wreg
  2563  0594  1283               	bcf	3,5	;RP0=0, select bank0
  2564  0595  1303               	bcf	3,6	;RP1=0, select bank0
  2565  0596  00A8               	movwf	BuildByte@byte0
  2566  0597                     l3014:	
  2567                           
  2568                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2569  0597  0828               	movf	BuildByte@byte0,w
  2570  0598  397F               	andlw	127
  2571  0599  00A6               	movwf	??_BuildByte
  2572  059A  0826               	movf	??_BuildByte,w
  2573  059B  00A9               	movwf	BuildByte@txByte
  2574                           
  2575                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2576  059C  0824               	movf	BuildByte@byte1,w
  2577  059D  397F               	andlw	127
  2578  059E  00A6               	movwf	??_BuildByte
  2579  059F  0826               	movf	??_BuildByte,w
  2580  05A0  00AA               	movwf	BuildByte@txByte+1
  2581                           
  2582                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2583  05A1  0825               	movf	BuildByte@valore,w
  2584  05A2  397F               	andlw	127
  2585  05A3  00A6               	movwf	??_BuildByte
  2586  05A4  0826               	movf	??_BuildByte,w
  2587  05A5  00AB               	movwf	BuildByte@txByte+2
  2588  05A6                     l3016:	
  2589                           
  2590                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2591  05A6  0825               	movf	BuildByte@valore,w
  2592  05A7  00A6               	movwf	??_BuildByte
  2593  05A8  3007               	movlw	7
  2594  05A9                     u2265:	
  2595  05A9  1003               	clrc
  2596  05AA  0CA6               	rrf	??_BuildByte,f
  2597  05AB  3EFF               	addlw	-1
  2598  05AC  1D03               	skipz
  2599  05AD  2DA9               	goto	u2265
  2600  05AE  0826               	movf	??_BuildByte,w
  2601  05AF  397F               	andlw	127
  2602  05B0  00A7               	movwf	??_BuildByte+1
  2603  05B1  0827               	movf	??_BuildByte+1,w
  2604  05B2  00AC               	movwf	BuildByte@txByte+3
  2605  05B3                     l3018:	
  2606                           
  2607                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2608  05B3  01AE               	clrf	BuildByte@sommaRow
  2609  05B4                     l3020:	
  2610                           
  2611                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2612  05B4  01AF               	clrf	BuildByte@sommaColumn
  2613  05B5                     l3022:	
  2614                           
  2615                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2616  05B5  01B4               	clrf	BuildByte@i
  2617  05B6  01B5               	clrf	BuildByte@i+1
  2618  05B7                     l3028:	
  2619                           
  2620                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2621  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  2622  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  2623  05B9  01B0               	clrf	BuildByte@y
  2624  05BA  01B1               	clrf	BuildByte@y+1
  2625  05BB                     l3034:	
  2626                           
  2627                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2628  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  2629  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  2630  05BD  0834               	movf	BuildByte@i,w
  2631  05BE  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2632  05BF  0084               	movwf	4
  2633  05C0  1383               	bcf	3,7	;select IRP bank0
  2634  05C1  0800               	movf	0,w
  2635  05C2  00A6               	movwf	??_BuildByte
  2636  05C3  0A30               	incf	BuildByte@y,w
  2637  05C4  2DC7               	goto	u2274
  2638  05C5                     u2275:	
  2639  05C5  1003               	clrc
  2640  05C6  0CA6               	rrf	??_BuildByte,f
  2641  05C7                     u2274:	
  2642  05C7  3EFF               	addlw	-1
  2643  05C8  1D03               	skipz
  2644  05C9  2DC5               	goto	u2275
  2645  05CA  0826               	movf	??_BuildByte,w
  2646  05CB  3901               	andlw	1
  2647  05CC  00A7               	movwf	??_BuildByte+1
  2648  05CD  0827               	movf	??_BuildByte+1,w
  2649  05CE  07AE               	addwf	BuildByte@sommaRow,f
  2650  05CF                     l3036:	
  2651                           
  2652                           ;./CustomLib/Serial.h: 18:         }
  2653  05CF  3001               	movlw	1
  2654  05D0  07B0               	addwf	BuildByte@y,f
  2655  05D1  1803               	skipnc
  2656  05D2  0AB1               	incf	BuildByte@y+1,f
  2657  05D3  3000               	movlw	0
  2658  05D4  07B1               	addwf	BuildByte@y+1,f
  2659  05D5                     l3038:	
  2660  05D5  0831               	movf	BuildByte@y+1,w
  2661  05D6  3A80               	xorlw	128
  2662  05D7  00FF               	movwf	btemp+1
  2663  05D8  3080               	movlw	128
  2664  05D9  027F               	subwf	btemp+1,w
  2665  05DA  1D03               	skipz
  2666  05DB  2DDE               	goto	u2285
  2667  05DC  3008               	movlw	8
  2668  05DD  0230               	subwf	BuildByte@y,w
  2669  05DE                     u2285:	
  2670  05DE  1C03               	skipc
  2671  05DF  2DE1               	goto	u2281
  2672  05E0  2DE2               	goto	u2280
  2673  05E1                     u2281:	
  2674  05E1  2DBB               	goto	l3034
  2675  05E2                     u2280:	
  2676  05E2                     l105:	
  2677                           
  2678                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  2679  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  2680  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  2681  05E4  1C2E               	btfss	BuildByte@sommaRow,0
  2682  05E5  2DE7               	goto	u2291
  2683  05E6  2DE8               	goto	u2290
  2684  05E7                     u2291:	
  2685  05E7  2DF0               	goto	l3042
  2686  05E8                     u2290:	
  2687  05E8                     l3040:	
  2688                           
  2689                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  2690  05E8  3080               	movlw	128
  2691  05E9  00A6               	movwf	??_BuildByte
  2692  05EA  0834               	movf	BuildByte@i,w
  2693  05EB  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2694  05EC  0084               	movwf	4
  2695  05ED  0826               	movf	??_BuildByte,w
  2696  05EE  1383               	bcf	3,7	;select IRP bank0
  2697  05EF  0780               	addwf	0,f
  2698  05F0                     l3042:	
  2699                           
  2700                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  2701  05F0  01AE               	clrf	BuildByte@sommaRow
  2702  05F1                     l3046:	
  2703                           ;./CustomLib/Serial.h: 23:         }
  2704                           
  2705                           
  2706                           ;./CustomLib/Serial.h: 28:     }
  2707  05F1  3001               	movlw	1
  2708  05F2  07B4               	addwf	BuildByte@i,f
  2709  05F3  1803               	skipnc
  2710  05F4  0AB5               	incf	BuildByte@i+1,f
  2711  05F5  3000               	movlw	0
  2712  05F6  07B5               	addwf	BuildByte@i+1,f
  2713  05F7                     l3048:	
  2714  05F7  0835               	movf	BuildByte@i+1,w
  2715  05F8  3A80               	xorlw	128
  2716  05F9  00FF               	movwf	btemp+1
  2717  05FA  3080               	movlw	128
  2718  05FB  027F               	subwf	btemp+1,w
  2719  05FC  1D03               	skipz
  2720  05FD  2E00               	goto	u2305
  2721  05FE  3004               	movlw	4
  2722  05FF  0234               	subwf	BuildByte@i,w
  2723  0600                     u2305:	
  2724  0600  1C03               	skipc
  2725  0601  2E03               	goto	u2301
  2726  0602  2E04               	goto	u2300
  2727  0603                     u2301:	
  2728  0603  2DB7               	goto	l3028
  2729  0604                     u2300:	
  2730  0604                     l3050:	
  2731                           
  2732                           ;./CustomLib/Serial.h: 31:     for (int i = 0; i < 8; i++)
  2733  0604  1283               	bcf	3,5	;RP0=0, select bank0
  2734  0605  1303               	bcf	3,6	;RP1=0, select bank0
  2735  0606  01B6               	clrf	BuildByte@i_341
  2736  0607  01B7               	clrf	BuildByte@i_341+1
  2737  0608                     l3056:	
  2738                           
  2739                           ;./CustomLib/Serial.h: 32:     {;./CustomLib/Serial.h: 33:         for (int y = 0; y < 4
      +                          ; y++)
  2740  0608  1283               	bcf	3,5	;RP0=0, select bank0
  2741  0609  1303               	bcf	3,6	;RP1=0, select bank0
  2742  060A  01B2               	clrf	BuildByte@y_342
  2743  060B  01B3               	clrf	BuildByte@y_342+1
  2744  060C                     l3062:	
  2745                           
  2746                           ;./CustomLib/Serial.h: 35:         {;./CustomLib/Serial.h: 36:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  2747  060C  1283               	bcf	3,5	;RP0=0, select bank0
  2748  060D  1303               	bcf	3,6	;RP1=0, select bank0
  2749  060E  0832               	movf	BuildByte@y_342,w
  2750  060F  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2751  0610  0084               	movwf	4
  2752  0611  1383               	bcf	3,7	;select IRP bank0
  2753  0612  0800               	movf	0,w
  2754  0613  00A6               	movwf	??_BuildByte
  2755  0614  0A36               	incf	BuildByte@i_341,w
  2756  0615  2E18               	goto	u2314
  2757  0616                     u2315:	
  2758  0616  1003               	clrc
  2759  0617  0CA6               	rrf	??_BuildByte,f
  2760  0618                     u2314:	
  2761  0618  3EFF               	addlw	-1
  2762  0619  1D03               	skipz
  2763  061A  2E16               	goto	u2315
  2764  061B  0826               	movf	??_BuildByte,w
  2765  061C  3901               	andlw	1
  2766  061D  00A7               	movwf	??_BuildByte+1
  2767  061E  0827               	movf	??_BuildByte+1,w
  2768  061F  07AF               	addwf	BuildByte@sommaColumn,f
  2769  0620                     l3064:	
  2770                           
  2771                           ;./CustomLib/Serial.h: 37:         }
  2772  0620  3001               	movlw	1
  2773  0621  07B2               	addwf	BuildByte@y_342,f
  2774  0622  1803               	skipnc
  2775  0623  0AB3               	incf	BuildByte@y_342+1,f
  2776  0624  3000               	movlw	0
  2777  0625  07B3               	addwf	BuildByte@y_342+1,f
  2778  0626                     l3066:	
  2779  0626  0833               	movf	BuildByte@y_342+1,w
  2780  0627  3A80               	xorlw	128
  2781  0628  00FF               	movwf	btemp+1
  2782  0629  3080               	movlw	128
  2783  062A  027F               	subwf	btemp+1,w
  2784  062B  1D03               	skipz
  2785  062C  2E2F               	goto	u2325
  2786  062D  3004               	movlw	4
  2787  062E  0232               	subwf	BuildByte@y_342,w
  2788  062F                     u2325:	
  2789  062F  1C03               	skipc
  2790  0630  2E32               	goto	u2321
  2791  0631  2E33               	goto	u2320
  2792  0632                     u2321:	
  2793  0632  2E0C               	goto	l3062
  2794  0633                     u2320:	
  2795  0633                     l111:	
  2796                           
  2797                           ;./CustomLib/Serial.h: 38:         if (sommaColumn % 2 == 1)
  2798  0633  1283               	bcf	3,5	;RP0=0, select bank0
  2799  0634  1303               	bcf	3,6	;RP1=0, select bank0
  2800  0635  1C2F               	btfss	BuildByte@sommaColumn,0
  2801  0636  2E38               	goto	u2331
  2802  0637  2E39               	goto	u2330
  2803  0638                     u2331:	
  2804  0638  2E46               	goto	l3070
  2805  0639                     u2330:	
  2806  0639                     l3068:	
  2807                           
  2808                           ;./CustomLib/Serial.h: 39:         {;./CustomLib/Serial.h: 40:             txByte[4] += 
      +                          0x01 << i;
  2809  0639  3001               	movlw	1
  2810  063A  00A6               	movwf	??_BuildByte
  2811  063B  0A36               	incf	BuildByte@i_341,w
  2812  063C  2E3F               	goto	u2344
  2813  063D                     u2345:	
  2814  063D  1003               	clrc
  2815  063E  0DA6               	rlf	??_BuildByte,f
  2816  063F                     u2344:	
  2817  063F  3EFF               	addlw	-1
  2818  0640  1D03               	skipz
  2819  0641  2E3D               	goto	u2345
  2820  0642  0826               	movf	??_BuildByte,w
  2821  0643  00A7               	movwf	??_BuildByte+1
  2822  0644  0827               	movf	??_BuildByte+1,w
  2823  0645  07AD               	addwf	BuildByte@txByte+4,f
  2824  0646                     l3070:	
  2825                           
  2826                           ;./CustomLib/Serial.h: 41:             sommaColumn = 0;
  2827  0646  01AF               	clrf	BuildByte@sommaColumn
  2828  0647                     l3074:	
  2829                           ;./CustomLib/Serial.h: 42:         }
  2830                           
  2831                           
  2832                           ;./CustomLib/Serial.h: 47:     }
  2833  0647  3001               	movlw	1
  2834  0648  07B6               	addwf	BuildByte@i_341,f
  2835  0649  1803               	skipnc
  2836  064A  0AB7               	incf	BuildByte@i_341+1,f
  2837  064B  3000               	movlw	0
  2838  064C  07B7               	addwf	BuildByte@i_341+1,f
  2839  064D                     l3076:	
  2840  064D  0837               	movf	BuildByte@i_341+1,w
  2841  064E  3A80               	xorlw	128
  2842  064F  00FF               	movwf	btemp+1
  2843  0650  3080               	movlw	128
  2844  0651  027F               	subwf	btemp+1,w
  2845  0652  1D03               	skipz
  2846  0653  2E56               	goto	u2355
  2847  0654  3008               	movlw	8
  2848  0655  0236               	subwf	BuildByte@i_341,w
  2849  0656                     u2355:	
  2850  0656  1C03               	skipc
  2851  0657  2E59               	goto	u2351
  2852  0658  2E5A               	goto	u2350
  2853  0659                     u2351:	
  2854  0659  2E08               	goto	l3056
  2855  065A                     u2350:	
  2856  065A                     l3078:	
  2857                           
  2858                           ;./CustomLib/Serial.h: 49:     return txByte;
  2859  065A  3029               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  2860  065B                     l114:	
  2861  065B  0008               	return
  2862  065C                     __end_of_BuildByte:	
  2863                           
  2864                           	psect	text4
  2865  0EF2                     __ptext4:	
  2866 ;; *************** function _rand *****************
  2867 ;; Defined at:
  2868 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  2   17[BANK0 ] int 
  2875 ;; Registers used:
  2876 ;;		wreg, status,2, status,0, pclath, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2882 ;;      Params:         0       2       0       0       0
  2883 ;;      Locals:         0       0       0       0       0
  2884 ;;      Temps:          0       5       0       0       0
  2885 ;;      Totals:         0       7       0       0       0
  2886 ;;Total ram usage:        7 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    4
  2889 ;; This function calls:
  2890 ;;		___lmul
  2891 ;; This function is called by:
  2892 ;;		_main
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           
  2897                           ;psect for function _rand
  2898  0EF2                     _rand:	
  2899  0EF2                     l3396:	
  2900                           ;incstack = 0
  2901                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  2902                           
  2903  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
  2904  0EF3  1303               	bcf	3,6	;RP1=0, select bank1
  2905  0EF4  086E               	movf	(_randx+3)^(0+128),w
  2906  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  2907  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  2908  0EF7  00A7               	movwf	___lmul@multiplier+3
  2909  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
  2910  0EF9  1303               	bcf	3,6	;RP1=0, select bank1
  2911  0EFA  086D               	movf	(_randx+2)^(0+128),w
  2912  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0EFD  00A6               	movwf	___lmul@multiplier+2
  2915  0EFE  1683               	bsf	3,5	;RP0=1, select bank1
  2916  0EFF  1303               	bcf	3,6	;RP1=0, select bank1
  2917  0F00  086C               	movf	(_randx+1)^(0+128),w
  2918  0F01  1283               	bcf	3,5	;RP0=0, select bank0
  2919  0F02  1303               	bcf	3,6	;RP1=0, select bank0
  2920  0F03  00A5               	movwf	___lmul@multiplier+1
  2921  0F04  1683               	bsf	3,5	;RP0=1, select bank1
  2922  0F05  1303               	bcf	3,6	;RP1=0, select bank1
  2923  0F06  086B               	movf	_randx^(0+128),w
  2924  0F07  1283               	bcf	3,5	;RP0=0, select bank0
  2925  0F08  1303               	bcf	3,6	;RP1=0, select bank0
  2926  0F09  00A4               	movwf	___lmul@multiplier
  2927  0F0A  3041               	movlw	65
  2928  0F0B  00AB               	movwf	___lmul@multiplicand+3
  2929  0F0C  30C6               	movlw	198
  2930  0F0D  00AA               	movwf	___lmul@multiplicand+2
  2931  0F0E  304E               	movlw	78
  2932  0F0F  00A9               	movwf	___lmul@multiplicand+1
  2933  0F10  306D               	movlw	109
  2934  0F11  00A8               	movwf	___lmul@multiplicand
  2935  0F12  120A  158A  2361  120A  158A  	fcall	___lmul
  2936  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  2937  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  2938  0F19  0827               	movf	?___lmul+3,w
  2939  0F1A  1683               	bsf	3,5	;RP0=1, select bank1
  2940  0F1B  1303               	bcf	3,6	;RP1=0, select bank1
  2941  0F1C  00EE               	movwf	(_randx+3)^(0+128)
  2942  0F1D  1283               	bcf	3,5	;RP0=0, select bank0
  2943  0F1E  1303               	bcf	3,6	;RP1=0, select bank0
  2944  0F1F  0826               	movf	?___lmul+2,w
  2945  0F20  1683               	bsf	3,5	;RP0=1, select bank1
  2946  0F21  1303               	bcf	3,6	;RP1=0, select bank1
  2947  0F22  00ED               	movwf	(_randx+2)^(0+128)
  2948  0F23  1283               	bcf	3,5	;RP0=0, select bank0
  2949  0F24  1303               	bcf	3,6	;RP1=0, select bank0
  2950  0F25  0825               	movf	?___lmul+1,w
  2951  0F26  1683               	bsf	3,5	;RP0=1, select bank1
  2952  0F27  1303               	bcf	3,6	;RP1=0, select bank1
  2953  0F28  00EC               	movwf	(_randx+1)^(0+128)
  2954  0F29  1283               	bcf	3,5	;RP0=0, select bank0
  2955  0F2A  1303               	bcf	3,6	;RP1=0, select bank0
  2956  0F2B  0824               	movf	?___lmul,w
  2957  0F2C  1683               	bsf	3,5	;RP0=1, select bank1
  2958  0F2D  1303               	bcf	3,6	;RP1=0, select bank1
  2959  0F2E  00EB               	movwf	_randx^(0+128)
  2960  0F2F                     l3398:	
  2961  0F2F  3039               	movlw	57
  2962  0F30  07EB               	addwf	_randx^(0+128),f
  2963  0F31  3030               	movlw	48
  2964  0F32  1803               	skipnc
  2965  0F33  3031               	movlw	49
  2966  0F34  07EC               	addwf	(_randx+1)^(0+128),f
  2967  0F35  3000               	movlw	0
  2968  0F36  1803               	skipnc
  2969  0F37  3001               	movlw	1
  2970  0F38  07ED               	addwf	(_randx+2)^(0+128),f
  2971  0F39  3000               	movlw	0
  2972  0F3A  1803               	skipnc
  2973  0F3B  3001               	movlw	1
  2974  0F3C  07EE               	addwf	(_randx+3)^(0+128),f
  2975  0F3D                     l3400:	
  2976  0F3D  086B               	movf	_randx^(0+128),w
  2977  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  2978  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  2979  0F40  00B3               	movwf	??_rand
  2980  0F41  1683               	bsf	3,5	;RP0=1, select bank1
  2981  0F42  1303               	bcf	3,6	;RP1=0, select bank1
  2982  0F43  086C               	movf	(_randx+1)^(0+128),w
  2983  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  2984  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  2985  0F46  00B4               	movwf	??_rand+1
  2986  0F47  1683               	bsf	3,5	;RP0=1, select bank1
  2987  0F48  1303               	bcf	3,6	;RP1=0, select bank1
  2988  0F49  086D               	movf	(_randx+2)^(0+128),w
  2989  0F4A  1283               	bcf	3,5	;RP0=0, select bank0
  2990  0F4B  1303               	bcf	3,6	;RP1=0, select bank0
  2991  0F4C  00B5               	movwf	??_rand+2
  2992  0F4D  1683               	bsf	3,5	;RP0=1, select bank1
  2993  0F4E  1303               	bcf	3,6	;RP1=0, select bank1
  2994  0F4F  086E               	movf	(_randx+3)^(0+128),w
  2995  0F50  1283               	bcf	3,5	;RP0=0, select bank0
  2996  0F51  1303               	bcf	3,6	;RP1=0, select bank0
  2997  0F52  00B6               	movwf	??_rand+3
  2998  0F53  3010               	movlw	16
  2999  0F54  00B7               	movwf	??_rand+4
  3000  0F55                     u2875:	
  3001  0F55  0D36               	rlf	??_rand+3,w
  3002  0F56  0CB6               	rrf	??_rand+3,f
  3003  0F57  0CB5               	rrf	??_rand+2,f
  3004  0F58  0CB4               	rrf	??_rand+1,f
  3005  0F59  0CB3               	rrf	??_rand,f
  3006  0F5A                     u2870:	
  3007  0F5A  0BB7               	decfsz	??_rand+4,f
  3008  0F5B  2F55               	goto	u2875
  3009  0F5C  30FF               	movlw	255
  3010  0F5D  0533               	andwf	??_rand,w
  3011  0F5E  00B1               	movwf	?_rand
  3012  0F5F  307F               	movlw	127
  3013  0F60  0534               	andwf	??_rand+1,w
  3014  0F61  00B2               	movwf	?_rand+1
  3015  0F62                     l886:	
  3016  0F62  0008               	return
  3017  0F63                     __end_of_rand:	
  3018                           
  3019                           	psect	text5
  3020  0B61                     __ptext5:	
  3021 ;; *************** function ___lmul *****************
  3022 ;; Defined at:
  3023 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  multiplier      4    4[BANK0 ] unsigned long 
  3026 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  product         4   13[BANK0 ] unsigned long 
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  4    4[BANK0 ] unsigned long 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2, status,0
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3038 ;;      Params:         0       8       0       0       0
  3039 ;;      Locals:         0       4       0       0       0
  3040 ;;      Temps:          0       1       0       0       0
  3041 ;;      Totals:         0      13       0       0       0
  3042 ;;Total ram usage:       13 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    3
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_rand
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           
  3053                           ;psect for function ___lmul
  3054  0B61                     ___lmul:	
  3055  0B61                     l3132:	
  3056                           ;incstack = 0
  3057                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3058                           
  3059  0B61  3000               	movlw	0
  3060  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  3061  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  3062  0B64  00B0               	movwf	___lmul@product+3
  3063  0B65  3000               	movlw	0
  3064  0B66  00AF               	movwf	___lmul@product+2
  3065  0B67  3000               	movlw	0
  3066  0B68  00AE               	movwf	___lmul@product+1
  3067  0B69  3000               	movlw	0
  3068  0B6A  00AD               	movwf	___lmul@product
  3069  0B6B                     l3134:	
  3070  0B6B  1C24               	btfss	___lmul@multiplier,0
  3071  0B6C  2B6E               	goto	u2421
  3072  0B6D  2B6F               	goto	u2420
  3073  0B6E                     u2421:	
  3074  0B6E  2B86               	goto	l3138
  3075  0B6F                     u2420:	
  3076  0B6F                     l3136:	
  3077  0B6F  0828               	movf	___lmul@multiplicand,w
  3078  0B70  07AD               	addwf	___lmul@product,f
  3079  0B71  0829               	movf	___lmul@multiplicand+1,w
  3080  0B72  1103               	clrz
  3081  0B73  1803               	skipnc
  3082  0B74  3E01               	addlw	1
  3083  0B75  1903               	skipnz
  3084  0B76  2B78               	goto	u2431
  3085  0B77  07AE               	addwf	___lmul@product+1,f
  3086  0B78                     u2431:	
  3087  0B78  082A               	movf	___lmul@multiplicand+2,w
  3088  0B79  1103               	clrz
  3089  0B7A  1803               	skipnc
  3090  0B7B  3E01               	addlw	1
  3091  0B7C  1903               	skipnz
  3092  0B7D  2B7F               	goto	u2432
  3093  0B7E  07AF               	addwf	___lmul@product+2,f
  3094  0B7F                     u2432:	
  3095  0B7F  082B               	movf	___lmul@multiplicand+3,w
  3096  0B80  1103               	clrz
  3097  0B81  1803               	skipnc
  3098  0B82  3E01               	addlw	1
  3099  0B83  1903               	skipnz
  3100  0B84  2B86               	goto	u2433
  3101  0B85  07B0               	addwf	___lmul@product+3,f
  3102  0B86                     u2433:	
  3103  0B86                     l3138:	
  3104  0B86  3001               	movlw	1
  3105  0B87  00AC               	movwf	??___lmul
  3106  0B88                     u2445:	
  3107  0B88  1003               	clrc
  3108  0B89  0DA8               	rlf	___lmul@multiplicand,f
  3109  0B8A  0DA9               	rlf	___lmul@multiplicand+1,f
  3110  0B8B  0DAA               	rlf	___lmul@multiplicand+2,f
  3111  0B8C  0DAB               	rlf	___lmul@multiplicand+3,f
  3112  0B8D  0BAC               	decfsz	??___lmul,f
  3113  0B8E  2B88               	goto	u2445
  3114  0B8F                     l3140:	
  3115  0B8F  3001               	movlw	1
  3116  0B90                     u2455:	
  3117  0B90  1003               	clrc
  3118  0B91  0CA7               	rrf	___lmul@multiplier+3,f
  3119  0B92  0CA6               	rrf	___lmul@multiplier+2,f
  3120  0B93  0CA5               	rrf	___lmul@multiplier+1,f
  3121  0B94  0CA4               	rrf	___lmul@multiplier,f
  3122  0B95  3EFF               	addlw	-1
  3123  0B96  1D03               	skipz
  3124  0B97  2B90               	goto	u2455
  3125  0B98  0827               	movf	___lmul@multiplier+3,w
  3126  0B99  0426               	iorwf	___lmul@multiplier+2,w
  3127  0B9A  0425               	iorwf	___lmul@multiplier+1,w
  3128  0B9B  0424               	iorwf	___lmul@multiplier,w
  3129  0B9C  1D03               	skipz
  3130  0B9D  2B9F               	goto	u2461
  3131  0B9E  2BA0               	goto	u2460
  3132  0B9F                     u2461:	
  3133  0B9F  2B6B               	goto	l3134
  3134  0BA0                     u2460:	
  3135  0BA0                     l3142:	
  3136  0BA0  0830               	movf	___lmul@product+3,w
  3137  0BA1  00A7               	movwf	?___lmul+3
  3138  0BA2  082F               	movf	___lmul@product+2,w
  3139  0BA3  00A6               	movwf	?___lmul+2
  3140  0BA4  082E               	movf	___lmul@product+1,w
  3141  0BA5  00A5               	movwf	?___lmul+1
  3142  0BA6  082D               	movf	___lmul@product,w
  3143  0BA7  00A4               	movwf	?___lmul
  3144  0BA8                     l450:	
  3145  0BA8  0008               	return
  3146  0BA9                     __end_of___lmul:	
  3147                           
  3148                           	psect	text6
  3149  0AE6                     __ptext6:	
  3150 ;; *************** function _map *****************
  3151 ;; Defined at:
  3152 ;;		line 127 in file "./CustomLib/TrafficLight.h"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  x               2   40[BANK0 ] int 
  3155 ;;  in_min          2   42[BANK0 ] int 
  3156 ;;  in_max          2   44[BANK0 ] int 
  3157 ;;  out_min         2   46[BANK0 ] int 
  3158 ;;  out_max         2   48[BANK0 ] int 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;		None
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  2   40[BANK0 ] int 
  3163 ;; Registers used:
  3164 ;;		wreg, status,2, status,0, pclath, cstack
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3170 ;;      Params:         0      10       0       0       0
  3171 ;;      Locals:         0       0       0       0       0
  3172 ;;      Temps:          0       0       0       0       0
  3173 ;;      Totals:         0      10       0       0       0
  3174 ;;Total ram usage:       10 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    4
  3177 ;; This function calls:
  3178 ;;		___awdiv
  3179 ;;		___wmul
  3180 ;; This function is called by:
  3181 ;;		_main
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           
  3186                           ;psect for function _map
  3187  0AE6                     _map:	
  3188  0AE6                     l3374:	
  3189                           ;incstack = 0
  3190                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3191                           
  3192                           
  3193                           ;./CustomLib/TrafficLight.h: 127: int map(int x, int in_min, int in_max, int out_min, in
      +                          t out_max);./CustomLib/TrafficLight.h: 128: {;./CustomLib/TrafficLight.h: 129:     retur
      +                          n (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3194  0AE6  1283               	bcf	3,5	;RP0=0, select bank0
  3195  0AE7  1303               	bcf	3,6	;RP1=0, select bank0
  3196  0AE8  084A               	movf	map@in_min,w
  3197  0AE9  024C               	subwf	map@in_max,w
  3198  0AEA  00BF               	movwf	___awdiv@divisor
  3199  0AEB  084B               	movf	map@in_min+1,w
  3200  0AEC  1C03               	skipc
  3201  0AED  0A4B               	incf	map@in_min+1,w
  3202  0AEE  024D               	subwf	map@in_max+1,w
  3203  0AEF  00C0               	movwf	___awdiv@divisor+1
  3204  0AF0  084A               	movf	map@in_min,w
  3205  0AF1  0248               	subwf	map@x,w
  3206  0AF2  00A4               	movwf	___wmul@multiplier
  3207  0AF3  084B               	movf	map@in_min+1,w
  3208  0AF4  1C03               	skipc
  3209  0AF5  0A4B               	incf	map@in_min+1,w
  3210  0AF6  0249               	subwf	map@x+1,w
  3211  0AF7  00A5               	movwf	___wmul@multiplier+1
  3212  0AF8  084E               	movf	map@out_min,w
  3213  0AF9  0250               	subwf	map@out_max,w
  3214  0AFA  00A6               	movwf	___wmul@multiplicand
  3215  0AFB  084F               	movf	map@out_min+1,w
  3216  0AFC  1C03               	skipc
  3217  0AFD  0A4F               	incf	map@out_min+1,w
  3218  0AFE  0251               	subwf	map@out_max+1,w
  3219  0AFF  00A7               	movwf	___wmul@multiplicand+1
  3220  0B00  120A  158A  228E  120A  158A  	fcall	___wmul
  3221  0B05  1283               	bcf	3,5	;RP0=0, select bank0
  3222  0B06  1303               	bcf	3,6	;RP1=0, select bank0
  3223  0B07  0825               	movf	?___wmul+1,w
  3224  0B08  00C2               	movwf	___awdiv@dividend+1
  3225  0B09  0824               	movf	?___wmul,w
  3226  0B0A  00C1               	movwf	___awdiv@dividend
  3227  0B0B  120A  158A  261E  120A  158A  	fcall	___awdiv
  3228  0B10  1283               	bcf	3,5	;RP0=0, select bank0
  3229  0B11  1303               	bcf	3,6	;RP1=0, select bank0
  3230  0B12  084E               	movf	map@out_min,w
  3231  0B13  073F               	addwf	?___awdiv,w
  3232  0B14  00C8               	movwf	?_map
  3233  0B15  084F               	movf	map@out_min+1,w
  3234  0B16  1803               	skipnc
  3235  0B17  0A4F               	incf	map@out_min+1,w
  3236  0B18  0740               	addwf	?___awdiv+1,w
  3237  0B19  00C9               	movwf	?_map+1
  3238  0B1A                     l169:	
  3239  0B1A  0008               	return
  3240  0B1B                     __end_of_map:	
  3241                           
  3242                           	psect	text7
  3243  0A8E                     __ptext7:	
  3244 ;; *************** function ___wmul *****************
  3245 ;; Defined at:
  3246 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;  multiplier      2    4[BANK0 ] unsigned int 
  3249 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  product         2    8[BANK0 ] unsigned int 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  2    4[BANK0 ] unsigned int 
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3261 ;;      Params:         0       4       0       0       0
  3262 ;;      Locals:         0       2       0       0       0
  3263 ;;      Temps:          0       0       0       0       0
  3264 ;;      Totals:         0       6       0       0       0
  3265 ;;Total ram usage:        6 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    3
  3268 ;; This function calls:
  3269 ;;		Nothing
  3270 ;; This function is called by:
  3271 ;;		_map
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           
  3276                           ;psect for function ___wmul
  3277  0A8E                     ___wmul:	
  3278  0A8E                     l3118:	
  3279                           ;incstack = 0
  3280                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3281                           
  3282  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  3283  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  3284  0A90  01A8               	clrf	___wmul@product
  3285  0A91  01A9               	clrf	___wmul@product+1
  3286  0A92                     l3120:	
  3287  0A92  1C24               	btfss	___wmul@multiplier,0
  3288  0A93  2A95               	goto	u2381
  3289  0A94  2A96               	goto	u2380
  3290  0A95                     u2381:	
  3291  0A95  2A9C               	goto	l436
  3292  0A96                     u2380:	
  3293  0A96                     l3122:	
  3294  0A96  0826               	movf	___wmul@multiplicand,w
  3295  0A97  07A8               	addwf	___wmul@product,f
  3296  0A98  1803               	skipnc
  3297  0A99  0AA9               	incf	___wmul@product+1,f
  3298  0A9A  0827               	movf	___wmul@multiplicand+1,w
  3299  0A9B  07A9               	addwf	___wmul@product+1,f
  3300  0A9C                     l436:	
  3301  0A9C  3001               	movlw	1
  3302  0A9D                     u2395:	
  3303  0A9D  1003               	clrc
  3304  0A9E  0DA6               	rlf	___wmul@multiplicand,f
  3305  0A9F  0DA7               	rlf	___wmul@multiplicand+1,f
  3306  0AA0  3EFF               	addlw	-1
  3307  0AA1  1D03               	skipz
  3308  0AA2  2A9D               	goto	u2395
  3309  0AA3                     l3124:	
  3310  0AA3  3001               	movlw	1
  3311  0AA4                     u2405:	
  3312  0AA4  1003               	clrc
  3313  0AA5  0CA5               	rrf	___wmul@multiplier+1,f
  3314  0AA6  0CA4               	rrf	___wmul@multiplier,f
  3315  0AA7  3EFF               	addlw	-1
  3316  0AA8  1D03               	skipz
  3317  0AA9  2AA4               	goto	u2405
  3318  0AAA                     l3126:	
  3319  0AAA  0824               	movf	___wmul@multiplier,w
  3320  0AAB  0425               	iorwf	___wmul@multiplier+1,w
  3321  0AAC  1D03               	btfss	3,2
  3322  0AAD  2AAF               	goto	u2411
  3323  0AAE  2AB0               	goto	u2410
  3324  0AAF                     u2411:	
  3325  0AAF  2A92               	goto	l3120
  3326  0AB0                     u2410:	
  3327  0AB0                     l3128:	
  3328  0AB0  0829               	movf	___wmul@product+1,w
  3329  0AB1  00A5               	movwf	?___wmul+1
  3330  0AB2  0828               	movf	___wmul@product,w
  3331  0AB3  00A4               	movwf	?___wmul
  3332  0AB4                     l438:	
  3333  0AB4  0008               	return
  3334  0AB5                     __end_of___wmul:	
  3335                           
  3336                           	psect	text8
  3337  0BF5                     __ptext8:	
  3338 ;; *************** function _luciSemaforo *****************
  3339 ;; Defined at:
  3340 ;;		line 422 in file "main.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;  index           1    wreg     unsigned char 
  3343 ;;  lux             1    4[BANK0 ] unsigned char 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  index           1    7[BANK0 ] unsigned char 
  3346 ;; Return value:  Size  Location     Type
  3347 ;;                  1    wreg      void 
  3348 ;; Registers used:
  3349 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3355 ;;      Params:         0       1       0       0       0
  3356 ;;      Locals:         0       1       0       0       0
  3357 ;;      Temps:          0       2       0       0       0
  3358 ;;      Totals:         0       4       0       0       0
  3359 ;;Total ram usage:        4 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    3
  3362 ;; This function calls:
  3363 ;;		Nothing
  3364 ;; This function is called by:
  3365 ;;		_main
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           
  3370                           ;psect for function _luciSemaforo
  3371  0BF5                     _luciSemaforo:	
  3372                           
  3373                           ;incstack = 0
  3374                           ; Regs used in _luciSemaforo: [wreg-fsr0h+status,2+status,0]
  3375                           ;luciSemaforo@index stored from wreg
  3376  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  3377  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  3378  0BF7  00A7               	movwf	luciSemaforo@index
  3379  0BF8                     l3430:	
  3380                           
  3381                           ;main.c: 422: void luciSemaforo(unsigned char index, unsigned char lux);main.c: 423: {;m
      +                          ain.c: 424:     switch (index)
  3382  0BF8  2C37               	goto	l3442
  3383  0BF9                     l308:	
  3384                           ;main.c: 428:         {;main.c: 429:         case 0:
  3385                           
  3386                           
  3387                           ;main.c: 430:             PORTCbits.RC1 = 0;
  3388  0BF9  1087               	bcf	7,1	;volatile
  3389                           
  3390                           ;main.c: 431:             PORTCbits.RC2 = 0;
  3391  0BFA  1107               	bcf	7,2	;volatile
  3392                           
  3393                           ;main.c: 432:             PORTCbits.RC0 = 1;
  3394  0BFB  1407               	bsf	7,0	;volatile
  3395                           
  3396                           ;main.c: 433:             break;
  3397  0BFC  2C47               	goto	l319
  3398  0BFD                     l310:	
  3399                           ;main.c: 434:         case 1:
  3400                           
  3401                           
  3402                           ;main.c: 435:             PORTCbits.RC0 = 0;
  3403  0BFD  1007               	bcf	7,0	;volatile
  3404                           
  3405                           ;main.c: 436:             PORTCbits.RC2 = 0;
  3406  0BFE  1107               	bcf	7,2	;volatile
  3407                           
  3408                           ;main.c: 437:             PORTCbits.RC1 = 1;
  3409  0BFF  1487               	bsf	7,1	;volatile
  3410                           
  3411                           ;main.c: 438:             break;
  3412  0C00  2C47               	goto	l319
  3413  0C01                     l311:	
  3414                           ;main.c: 439:         case 2:
  3415                           
  3416                           
  3417                           ;main.c: 440:             PORTCbits.RC0 = 0;
  3418  0C01  1007               	bcf	7,0	;volatile
  3419                           
  3420                           ;main.c: 441:             PORTCbits.RC1 = 0;
  3421  0C02  1087               	bcf	7,1	;volatile
  3422                           
  3423                           ;main.c: 442:             PORTCbits.RC2 = 1;
  3424  0C03  1507               	bsf	7,2	;volatile
  3425                           
  3426                           ;main.c: 443:             break;
  3427  0C04  2C47               	goto	l319
  3428  0C05                     l3434:	
  3429  0C05  0824               	movf	luciSemaforo@lux,w
  3430  0C06  00A5               	movwf	??_luciSemaforo
  3431  0C07  01A6               	clrf	??_luciSemaforo+1
  3432                           
  3433                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3434                           ; Switch size 1, requested type "simple"
  3435                           ; Number of cases is 1, Range of values is 0 to 0
  3436                           ; switch strategies available:
  3437                           ; Name         Instructions Cycles
  3438                           ; simple_byte            4     3 (average)
  3439                           ; direct_byte           11     8 (fixed)
  3440                           ; jumptable            260     6 (fixed)
  3441                           ;	Chosen strategy is simple_byte
  3442  0C08  0826               	movf	??_luciSemaforo+1,w
  3443  0C09  3A00               	xorlw	0	; case 0
  3444  0C0A  1903               	skipnz
  3445  0C0B  2C0D               	goto	l3930
  3446  0C0C  2C47               	goto	l319
  3447  0C0D                     l3930:	
  3448                           
  3449                           ; Switch size 1, requested type "simple"
  3450                           ; Number of cases is 3, Range of values is 0 to 2
  3451                           ; switch strategies available:
  3452                           ; Name         Instructions Cycles
  3453                           ; simple_byte           10     6 (average)
  3454                           ; direct_byte           17     8 (fixed)
  3455                           ; jumptable            260     6 (fixed)
  3456                           ;	Chosen strategy is simple_byte
  3457  0C0D  0825               	movf	??_luciSemaforo,w
  3458  0C0E  3A00               	xorlw	0	; case 0
  3459  0C0F  1903               	skipnz
  3460  0C10  2BF9               	goto	l308
  3461  0C11  3A01               	xorlw	1	; case 1
  3462  0C12  1903               	skipnz
  3463  0C13  2BFD               	goto	l310
  3464  0C14  3A03               	xorlw	3	; case 2
  3465  0C15  1903               	skipnz
  3466  0C16  2C01               	goto	l311
  3467  0C17  2C47               	goto	l319
  3468  0C18                     l315:	
  3469                           ;main.c: 449:         {;main.c: 450:         case 0:
  3470                           
  3471                           
  3472                           ;main.c: 451:             PORTBbits.RB1 = 0;
  3473  0C18  1086               	bcf	6,1	;volatile
  3474                           
  3475                           ;main.c: 452:             PORTBbits.RB6 = 0;
  3476  0C19  1306               	bcf	6,6	;volatile
  3477                           
  3478                           ;main.c: 453:             PORTBbits.RB7 = 1;
  3479  0C1A  1786               	bsf	6,7	;volatile
  3480                           
  3481                           ;main.c: 454:             break;
  3482  0C1B  2C47               	goto	l319
  3483  0C1C                     l317:	
  3484                           ;main.c: 455:         case 1:
  3485                           
  3486                           
  3487                           ;main.c: 456:             PORTBbits.RB7 = 0;
  3488  0C1C  1386               	bcf	6,7	;volatile
  3489                           
  3490                           ;main.c: 457:             PORTBbits.RB6 = 0;
  3491  0C1D  1306               	bcf	6,6	;volatile
  3492                           
  3493                           ;main.c: 458:             PORTBbits.RB1 = 1;
  3494  0C1E  1486               	bsf	6,1	;volatile
  3495                           
  3496                           ;main.c: 459:             break;
  3497  0C1F  2C47               	goto	l319
  3498  0C20                     l318:	
  3499                           ;main.c: 460:         case 2:
  3500                           
  3501                           
  3502                           ;main.c: 461:             PORTBbits.RB7 = 0;
  3503  0C20  1386               	bcf	6,7	;volatile
  3504                           
  3505                           ;main.c: 462:             PORTBbits.RB1 = 0;
  3506  0C21  1086               	bcf	6,1	;volatile
  3507                           
  3508                           ;main.c: 463:             PORTBbits.RB6 = 1;
  3509  0C22  1706               	bsf	6,6	;volatile
  3510                           
  3511                           ;main.c: 464:             break;
  3512  0C23  2C47               	goto	l319
  3513  0C24                     l3438:	
  3514  0C24  0824               	movf	luciSemaforo@lux,w
  3515  0C25  00A5               	movwf	??_luciSemaforo
  3516  0C26  01A6               	clrf	??_luciSemaforo+1
  3517                           
  3518                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3519                           ; Switch size 1, requested type "simple"
  3520                           ; Number of cases is 1, Range of values is 0 to 0
  3521                           ; switch strategies available:
  3522                           ; Name         Instructions Cycles
  3523                           ; simple_byte            4     3 (average)
  3524                           ; direct_byte           11     8 (fixed)
  3525                           ; jumptable            260     6 (fixed)
  3526                           ;	Chosen strategy is simple_byte
  3527  0C27  0826               	movf	??_luciSemaforo+1,w
  3528  0C28  3A00               	xorlw	0	; case 0
  3529  0C29  1903               	skipnz
  3530  0C2A  2C2C               	goto	l3932
  3531  0C2B  2C47               	goto	l319
  3532  0C2C                     l3932:	
  3533                           
  3534                           ; Switch size 1, requested type "simple"
  3535                           ; Number of cases is 3, Range of values is 0 to 2
  3536                           ; switch strategies available:
  3537                           ; Name         Instructions Cycles
  3538                           ; simple_byte           10     6 (average)
  3539                           ; direct_byte           17     8 (fixed)
  3540                           ; jumptable            260     6 (fixed)
  3541                           ;	Chosen strategy is simple_byte
  3542  0C2C  0825               	movf	??_luciSemaforo,w
  3543  0C2D  3A00               	xorlw	0	; case 0
  3544  0C2E  1903               	skipnz
  3545  0C2F  2C18               	goto	l315
  3546  0C30  3A01               	xorlw	1	; case 1
  3547  0C31  1903               	skipnz
  3548  0C32  2C1C               	goto	l317
  3549  0C33  3A03               	xorlw	3	; case 2
  3550  0C34  1903               	skipnz
  3551  0C35  2C20               	goto	l318
  3552  0C36  2C47               	goto	l319
  3553  0C37                     l3442:	
  3554  0C37  0827               	movf	luciSemaforo@index,w
  3555  0C38  00A5               	movwf	??_luciSemaforo
  3556  0C39  01A6               	clrf	??_luciSemaforo+1
  3557                           
  3558                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3559                           ; Switch size 1, requested type "simple"
  3560                           ; Number of cases is 1, Range of values is 0 to 0
  3561                           ; switch strategies available:
  3562                           ; Name         Instructions Cycles
  3563                           ; simple_byte            4     3 (average)
  3564                           ; direct_byte           11     8 (fixed)
  3565                           ; jumptable            260     6 (fixed)
  3566                           ;	Chosen strategy is simple_byte
  3567  0C3A  0826               	movf	??_luciSemaforo+1,w
  3568  0C3B  3A00               	xorlw	0	; case 0
  3569  0C3C  1903               	skipnz
  3570  0C3D  2C3F               	goto	l3934
  3571  0C3E  2C47               	goto	l319
  3572  0C3F                     l3934:	
  3573                           
  3574                           ; Switch size 1, requested type "simple"
  3575                           ; Number of cases is 2, Range of values is 0 to 1
  3576                           ; switch strategies available:
  3577                           ; Name         Instructions Cycles
  3578                           ; simple_byte            7     4 (average)
  3579                           ; direct_byte           14     8 (fixed)
  3580                           ; jumptable            260     6 (fixed)
  3581                           ;	Chosen strategy is simple_byte
  3582  0C3F  0825               	movf	??_luciSemaforo,w
  3583  0C40  3A00               	xorlw	0	; case 0
  3584  0C41  1903               	skipnz
  3585  0C42  2C05               	goto	l3434
  3586  0C43  3A01               	xorlw	1	; case 1
  3587  0C44  1903               	skipnz
  3588  0C45  2C24               	goto	l3438
  3589  0C46  2C47               	goto	l319
  3590  0C47                     l319:	
  3591  0C47  0008               	return
  3592  0C48                     __end_of_luciSemaforo:	
  3593                           
  3594                           	psect	text9
  3595  0A3E                     __ptext9:	
  3596 ;; *************** function _init_ADC *****************
  3597 ;; Defined at:
  3598 ;;		line 334 in file "main.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;		None
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3612 ;;      Params:         0       0       0       0       0
  3613 ;;      Locals:         0       0       0       0       0
  3614 ;;      Temps:          0       1       0       0       0
  3615 ;;      Totals:         0       1       0       0       0
  3616 ;;Total ram usage:        1 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    3
  3619 ;; This function calls:
  3620 ;;		Nothing
  3621 ;; This function is called by:
  3622 ;;		_main
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           
  3627                           ;psect for function _init_ADC
  3628  0A3E                     _init_ADC:	
  3629  0A3E                     l3378:	
  3630                           ;incstack = 0
  3631                           ; Regs used in _init_ADC: [wreg+status,2]
  3632                           
  3633                           
  3634                           ;main.c: 336:     TRISA = 0xE3;
  3635  0A3E  30E3               	movlw	227
  3636  0A3F  1683               	bsf	3,5	;RP0=1, select bank1
  3637  0A40  1303               	bcf	3,6	;RP1=0, select bank1
  3638  0A41  0085               	movwf	5	;volatile
  3639  0A42                     l3380:	
  3640                           
  3641                           ;main.c: 337:     ADCON0 = 0x00;
  3642  0A42  1283               	bcf	3,5	;RP0=0, select bank0
  3643  0A43  1303               	bcf	3,6	;RP1=0, select bank0
  3644  0A44  019F               	clrf	31	;volatile
  3645  0A45                     l3382:	
  3646                           
  3647                           ;main.c: 338:     ADCON1 = 0x80;
  3648  0A45  3080               	movlw	128
  3649  0A46  1683               	bsf	3,5	;RP0=1, select bank1
  3650  0A47  1303               	bcf	3,6	;RP1=0, select bank1
  3651  0A48  009F               	movwf	31	;volatile
  3652  0A49                     l3384:	
  3653                           
  3654                           ;main.c: 339:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3655  0A49  3019               	movlw	25
  3656  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  3657  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  3658  0A4C  00A4               	movwf	??_init_ADC
  3659  0A4D                     u3187:	
  3660  0A4D  0BA4               	decfsz	??_init_ADC,f
  3661  0A4E  2A4D               	goto	u3187
  3662  0A4F  2A50               	nop2
  3663  0A50                     l262:	
  3664  0A50  0008               	return
  3665  0A51                     __end_of_init_ADC:	
  3666                           
  3667                           	psect	text10
  3668  0E87                     __ptext10:	
  3669 ;; *************** function _UpdateTimes *****************
  3670 ;; Defined at:
  3671 ;;		line 4 in file "./CustomLib/TrafficLight.h"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  _semafori       1    wreg     PTR PTR struct .
  3674 ;;		 -> Semafori(2), 
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;  _semafori       1   14[BANK0 ] PTR PTR struct .
  3677 ;;		 -> Semafori(2), 
  3678 ;;  i               1   15[BANK0 ] unsigned char 
  3679 ;;  l               1   16[BANK0 ] unsigned char 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  1    wreg      void 
  3682 ;; Registers used:
  3683 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3689 ;;      Params:         0       0       0       0       0
  3690 ;;      Locals:         0       3       0       0       0
  3691 ;;      Temps:          0      10       0       0       0
  3692 ;;      Totals:         0      13       0       0       0
  3693 ;;Total ram usage:       13 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    3
  3696 ;; This function calls:
  3697 ;;		Nothing
  3698 ;; This function is called by:
  3699 ;;		_main
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           
  3704                           ;psect for function _UpdateTimes
  3705  0E87                     _UpdateTimes:	
  3706                           
  3707                           ;incstack = 0
  3708                           ; Regs used in _UpdateTimes: [wreg-fsr0h+status,2+status,0]
  3709                           ;UpdateTimes@_semafori stored from wreg
  3710  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  3711  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  3712  0E89  00AE               	movwf	UpdateTimes@_semafori
  3713  0E8A                     l3282:	
  3714                           
  3715                           ;./CustomLib/TrafficLight.h: 4: void UpdateTimes(_Semafori _semafori);./CustomLib/Traffi
      +                          cLight.h: 5: {;./CustomLib/TrafficLight.h: 7:     for (unsigned char l = 0; l < n_semafo
      +                          ri; l++)
  3716  0E8A  01B0               	clrf	UpdateTimes@l
  3717  0E8B                     l3288:	
  3718                           
  3719                           ;./CustomLib/TrafficLight.h: 8:     {;./CustomLib/TrafficLight.h: 9:         for (unsign
      +                          ed char i = 0; i < 3; i++)
  3720  0E8B  01AF               	clrf	UpdateTimes@i
  3721  0E8C                     l3294:	
  3722                           
  3723                           ;./CustomLib/TrafficLight.h: 10:         {;./CustomLib/TrafficLight.h: 11:             i
      +                          f ((*(_semafori)[l]).times[i] != (*(_semafori)[l]).new_times[i])
  3724  0E8C  0830               	movf	UpdateTimes@l,w
  3725  0E8D  072E               	addwf	UpdateTimes@_semafori,w
  3726  0E8E  00A4               	movwf	??_UpdateTimes
  3727  0E8F  0824               	movf	??_UpdateTimes,w
  3728  0E90  0084               	movwf	4
  3729  0E91  082F               	movf	UpdateTimes@i,w
  3730  0E92  00A5               	movwf	??_UpdateTimes+1
  3731  0E93  0725               	addwf	??_UpdateTimes+1,w
  3732  0E94  1383               	bcf	3,7	;select IRP bank0
  3733  0E95  0700               	addwf	0,w
  3734  0E96  00A6               	movwf	??_UpdateTimes+2
  3735  0E97  0826               	movf	??_UpdateTimes+2,w
  3736  0E98  3E06               	addlw	6
  3737  0E99  0084               	movwf	4
  3738  0E9A  0800               	movf	0,w
  3739  0E9B  00A7               	movwf	??_UpdateTimes+3
  3740  0E9C  0A84               	incf	4,f
  3741  0E9D  0800               	movf	0,w
  3742  0E9E  00A8               	movwf	??_UpdateTimes+4
  3743  0E9F  0830               	movf	UpdateTimes@l,w
  3744  0EA0  072E               	addwf	UpdateTimes@_semafori,w
  3745  0EA1  00A9               	movwf	??_UpdateTimes+5
  3746  0EA2  0829               	movf	??_UpdateTimes+5,w
  3747  0EA3  0084               	movwf	4
  3748  0EA4  082F               	movf	UpdateTimes@i,w
  3749  0EA5  00AA               	movwf	??_UpdateTimes+6
  3750  0EA6  072A               	addwf	??_UpdateTimes+6,w
  3751  0EA7  0700               	addwf	0,w
  3752  0EA8  00AB               	movwf	??_UpdateTimes+7
  3753  0EA9  082B               	movf	??_UpdateTimes+7,w
  3754  0EAA  0084               	movwf	4
  3755  0EAB  0800               	movf	0,w
  3756  0EAC  00AC               	movwf	??_UpdateTimes+8
  3757  0EAD  0A84               	incf	4,f
  3758  0EAE  0800               	movf	0,w
  3759  0EAF  00AD               	movwf	??_UpdateTimes+9
  3760  0EB0  0828               	movf	??_UpdateTimes+4,w
  3761  0EB1  062D               	xorwf	??_UpdateTimes+9,w
  3762  0EB2  1D03               	skipz
  3763  0EB3  2EB6               	goto	u2785
  3764  0EB4  0827               	movf	??_UpdateTimes+3,w
  3765  0EB5  062C               	xorwf	??_UpdateTimes+8,w
  3766  0EB6                     u2785:	
  3767  0EB6  1903               	skipnz
  3768  0EB7  2EB9               	goto	u2781
  3769  0EB8  2EBA               	goto	u2780
  3770  0EB9                     u2781:	
  3771  0EB9  2EDD               	goto	l3298
  3772  0EBA                     u2780:	
  3773  0EBA                     l3296:	
  3774                           
  3775                           ;./CustomLib/TrafficLight.h: 12:             {;./CustomLib/TrafficLight.h: 13:          
      +                                 (*(_semafori)[l]).times[i] = (*(_semafori)[l]).new_times[i];
  3776  0EBA  0830               	movf	UpdateTimes@l,w
  3777  0EBB  072E               	addwf	UpdateTimes@_semafori,w
  3778  0EBC  00A4               	movwf	??_UpdateTimes
  3779  0EBD  0824               	movf	??_UpdateTimes,w
  3780  0EBE  0084               	movwf	4
  3781  0EBF  082F               	movf	UpdateTimes@i,w
  3782  0EC0  00A5               	movwf	??_UpdateTimes+1
  3783  0EC1  0725               	addwf	??_UpdateTimes+1,w
  3784  0EC2  0700               	addwf	0,w
  3785  0EC3  00A6               	movwf	??_UpdateTimes+2
  3786  0EC4  0826               	movf	??_UpdateTimes+2,w
  3787  0EC5  3E06               	addlw	6
  3788  0EC6  0084               	movwf	4
  3789  0EC7  0800               	movf	0,w
  3790  0EC8  00A7               	movwf	??_UpdateTimes+3
  3791  0EC9  0A84               	incf	4,f
  3792  0ECA  0800               	movf	0,w
  3793  0ECB  00A8               	movwf	??_UpdateTimes+4
  3794  0ECC  0830               	movf	UpdateTimes@l,w
  3795  0ECD  072E               	addwf	UpdateTimes@_semafori,w
  3796  0ECE  00A9               	movwf	??_UpdateTimes+5
  3797  0ECF  0829               	movf	??_UpdateTimes+5,w
  3798  0ED0  0084               	movwf	4
  3799  0ED1  082F               	movf	UpdateTimes@i,w
  3800  0ED2  00AA               	movwf	??_UpdateTimes+6
  3801  0ED3  072A               	addwf	??_UpdateTimes+6,w
  3802  0ED4  0700               	addwf	0,w
  3803  0ED5  00AB               	movwf	??_UpdateTimes+7
  3804  0ED6  082B               	movf	??_UpdateTimes+7,w
  3805  0ED7  0084               	movwf	4
  3806  0ED8  0827               	movf	??_UpdateTimes+3,w
  3807  0ED9  0080               	movwf	0
  3808  0EDA  0A84               	incf	4,f
  3809  0EDB  0828               	movf	??_UpdateTimes+4,w
  3810  0EDC  0080               	movwf	0
  3811  0EDD                     l3298:	
  3812                           
  3813                           ;./CustomLib/TrafficLight.h: 15:         }
  3814  0EDD  3001               	movlw	1
  3815  0EDE  00A4               	movwf	??_UpdateTimes
  3816  0EDF  0824               	movf	??_UpdateTimes,w
  3817  0EE0  07AF               	addwf	UpdateTimes@i,f
  3818  0EE1                     l3300:	
  3819  0EE1  3003               	movlw	3
  3820  0EE2  022F               	subwf	UpdateTimes@i,w
  3821  0EE3  1C03               	skipc
  3822  0EE4  2EE6               	goto	u2791
  3823  0EE5  2EE7               	goto	u2790
  3824  0EE6                     u2791:	
  3825  0EE6  2E8C               	goto	l3294
  3826  0EE7                     u2790:	
  3827  0EE7                     l3304:	
  3828                           
  3829                           ;./CustomLib/TrafficLight.h: 21:     }
  3830  0EE7  3001               	movlw	1
  3831  0EE8  00A4               	movwf	??_UpdateTimes
  3832  0EE9  0824               	movf	??_UpdateTimes,w
  3833  0EEA  07B0               	addwf	UpdateTimes@l,f
  3834  0EEB                     l3306:	
  3835  0EEB  3002               	movlw	2
  3836  0EEC  0230               	subwf	UpdateTimes@l,w
  3837  0EED  1C03               	skipc
  3838  0EEE  2EF0               	goto	u2801
  3839  0EEF  2EF1               	goto	u2800
  3840  0EF0                     u2801:	
  3841  0EF0  2E8B               	goto	l3288
  3842  0EF1                     u2800:	
  3843  0EF1                     l127:	
  3844  0EF1  0008               	return
  3845  0EF2                     __end_of_UpdateTimes:	
  3846                           
  3847                           	psect	text11
  3848  07C0                     __ptext11:	
  3849 ;; *************** function _UART_Init *****************
  3850 ;; Defined at:
  3851 ;;		line 353 in file "main.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  baudrate        2   19[BANK0 ] int 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0, pclath, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3865 ;;      Params:         0       2       0       0       0
  3866 ;;      Locals:         0       0       0       0       0
  3867 ;;      Temps:          0       4       0       0       0
  3868 ;;      Totals:         0       6       0       0       0
  3869 ;;Total ram usage:        6 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    4
  3872 ;; This function calls:
  3873 ;;		___aldiv
  3874 ;; This function is called by:
  3875 ;;		_main
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           
  3880                           ;psect for function _UART_Init
  3881  07C0                     _UART_Init:	
  3882  07C0                     l3386:	
  3883                           ;incstack = 0
  3884                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3885                           
  3886                           
  3887                           ;main.c: 353: void UART_Init(int baudrate);main.c: 354: {;main.c: 355:     TRISCbits.TRI
      +                          SC6 = 0;
  3888  07C0  1683               	bsf	3,5	;RP0=1, select bank1
  3889  07C1  1303               	bcf	3,6	;RP1=0, select bank1
  3890  07C2  1307               	bcf	7,6	;volatile
  3891                           
  3892                           ;main.c: 356:     TXSTAbits.TXEN = 1;
  3893  07C3  1698               	bsf	24,5	;volatile
  3894                           
  3895                           ;main.c: 357:     RCSTAbits.SPEN = 1;
  3896  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  3897  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  3898  07C6  1798               	bsf	24,7	;volatile
  3899                           
  3900                           ;main.c: 358:     RCSTAbits.CREN = 1;
  3901  07C7  1618               	bsf	24,4	;volatile
  3902  07C8                     l3388:	
  3903                           
  3904                           ;main.c: 359:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  3905  07C8  0833               	movf	UART_Init@baudrate,w
  3906  07C9  00B5               	movwf	??_UART_Init
  3907  07CA  0834               	movf	UART_Init@baudrate+1,w
  3908  07CB  00B6               	movwf	??_UART_Init+1
  3909  07CC  3000               	movlw	0
  3910  07CD  1BB6               	btfsc	??_UART_Init+1,7
  3911  07CE  30FF               	movlw	255
  3912  07CF  00B7               	movwf	??_UART_Init+2
  3913  07D0  00B8               	movwf	??_UART_Init+3
  3914  07D1  3006               	movlw	6
  3915  07D2                     u2865:	
  3916  07D2  1003               	clrc
  3917  07D3  0DB5               	rlf	??_UART_Init,f
  3918  07D4  0DB6               	rlf	??_UART_Init+1,f
  3919  07D5  0DB7               	rlf	??_UART_Init+2,f
  3920  07D6  0DB8               	rlf	??_UART_Init+3,f
  3921  07D7                     u2860:	
  3922  07D7  3EFF               	addlw	-1
  3923  07D8  1D03               	skipz
  3924  07D9  2FD2               	goto	u2865
  3925  07DA  0838               	movf	??_UART_Init+3,w
  3926  07DB  00A7               	movwf	___aldiv@divisor+3
  3927  07DC  0837               	movf	??_UART_Init+2,w
  3928  07DD  00A6               	movwf	___aldiv@divisor+2
  3929  07DE  0836               	movf	??_UART_Init+1,w
  3930  07DF  00A5               	movwf	___aldiv@divisor+1
  3931  07E0  0835               	movf	??_UART_Init,w
  3932  07E1  00A4               	movwf	___aldiv@divisor
  3933  07E2  3001               	movlw	1
  3934  07E3  00AB               	movwf	___aldiv@dividend+3
  3935  07E4  30E8               	movlw	232
  3936  07E5  00AA               	movwf	___aldiv@dividend+2
  3937  07E6  3048               	movlw	72
  3938  07E7  00A9               	movwf	___aldiv@dividend+1
  3939  07E8  3000               	movlw	0
  3940  07E9  00A8               	movwf	___aldiv@dividend
  3941  07EA  120A  158A  2763  120A  118A  	fcall	___aldiv
  3942  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  3943  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  3944  07F1  0824               	movf	?___aldiv,w
  3945  07F2  3EFF               	addlw	255
  3946  07F3  1683               	bsf	3,5	;RP0=1, select bank1
  3947  07F4  1303               	bcf	3,6	;RP1=0, select bank1
  3948  07F5  0099               	movwf	25	;volatile
  3949  07F6                     l3390:	
  3950                           
  3951                           ;main.c: 360:     INTCONbits.GIE = 1;
  3952  07F6  178B               	bsf	11,7	;volatile
  3953  07F7                     l3392:	
  3954                           
  3955                           ;main.c: 361:     INTCONbits.PEIE = 1;
  3956  07F7  170B               	bsf	11,6	;volatile
  3957  07F8                     l3394:	
  3958                           
  3959                           ;main.c: 362:     PIE1bits.RCIE = 1;
  3960  07F8  168C               	bsf	12,5	;volatile
  3961  07F9                     l271:	
  3962  07F9  0008               	return
  3963  07FA                     __end_of_UART_Init:	
  3964                           
  3965                           	psect	text12
  3966  0F63                     __ptext12:	
  3967 ;; *************** function ___aldiv *****************
  3968 ;; Defined at:
  3969 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;  divisor         4    4[BANK0 ] long 
  3972 ;;  dividend        4    8[BANK0 ] long 
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  quotient        4   15[BANK0 ] long 
  3975 ;;  sign            1   14[BANK0 ] unsigned char 
  3976 ;;  counter         1   13[BANK0 ] unsigned char 
  3977 ;; Return value:  Size  Location     Type
  3978 ;;                  4    4[BANK0 ] long 
  3979 ;; Registers used:
  3980 ;;		wreg, status,2, status,0
  3981 ;; Tracked objects:
  3982 ;;		On entry : 0/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3986 ;;      Params:         0       8       0       0       0
  3987 ;;      Locals:         0       6       0       0       0
  3988 ;;      Temps:          0       1       0       0       0
  3989 ;;      Totals:         0      15       0       0       0
  3990 ;;Total ram usage:       15 bytes
  3991 ;; Hardware stack levels used:    1
  3992 ;; Hardware stack levels required when called:    3
  3993 ;; This function calls:
  3994 ;;		Nothing
  3995 ;; This function is called by:
  3996 ;;		_UART_Init
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           
  4001                           ;psect for function ___aldiv
  4002  0F63                     ___aldiv:	
  4003  0F63                     l3160:	
  4004                           ;incstack = 0
  4005                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4006                           
  4007  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  4008  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  4009  0F65  01AE               	clrf	___aldiv@sign
  4010  0F66                     l3162:	
  4011  0F66  1FA7               	btfss	___aldiv@divisor+3,7
  4012  0F67  2F69               	goto	u2491
  4013  0F68  2F6A               	goto	u2490
  4014  0F69                     u2491:	
  4015  0F69  2F77               	goto	l501
  4016  0F6A                     u2490:	
  4017  0F6A                     l3164:	
  4018  0F6A  09A4               	comf	___aldiv@divisor,f
  4019  0F6B  09A5               	comf	___aldiv@divisor+1,f
  4020  0F6C  09A6               	comf	___aldiv@divisor+2,f
  4021  0F6D  09A7               	comf	___aldiv@divisor+3,f
  4022  0F6E  0AA4               	incf	___aldiv@divisor,f
  4023  0F6F  1903               	skipnz
  4024  0F70  0AA5               	incf	___aldiv@divisor+1,f
  4025  0F71  1903               	skipnz
  4026  0F72  0AA6               	incf	___aldiv@divisor+2,f
  4027  0F73  1903               	skipnz
  4028  0F74  0AA7               	incf	___aldiv@divisor+3,f
  4029  0F75  01AE               	clrf	___aldiv@sign
  4030  0F76  0AAE               	incf	___aldiv@sign,f
  4031  0F77                     l501:	
  4032  0F77  1FAB               	btfss	___aldiv@dividend+3,7
  4033  0F78  2F7A               	goto	u2501
  4034  0F79  2F7B               	goto	u2500
  4035  0F7A                     u2501:	
  4036  0F7A  2F8A               	goto	l3170
  4037  0F7B                     u2500:	
  4038  0F7B                     l3166:	
  4039  0F7B  09A8               	comf	___aldiv@dividend,f
  4040  0F7C  09A9               	comf	___aldiv@dividend+1,f
  4041  0F7D  09AA               	comf	___aldiv@dividend+2,f
  4042  0F7E  09AB               	comf	___aldiv@dividend+3,f
  4043  0F7F  0AA8               	incf	___aldiv@dividend,f
  4044  0F80  1903               	skipnz
  4045  0F81  0AA9               	incf	___aldiv@dividend+1,f
  4046  0F82  1903               	skipnz
  4047  0F83  0AAA               	incf	___aldiv@dividend+2,f
  4048  0F84  1903               	skipnz
  4049  0F85  0AAB               	incf	___aldiv@dividend+3,f
  4050  0F86                     l3168:	
  4051  0F86  3001               	movlw	1
  4052  0F87  00AC               	movwf	??___aldiv
  4053  0F88  082C               	movf	??___aldiv,w
  4054  0F89  06AE               	xorwf	___aldiv@sign,f
  4055  0F8A                     l3170:	
  4056  0F8A  3000               	movlw	0
  4057  0F8B  00B2               	movwf	___aldiv@quotient+3
  4058  0F8C  3000               	movlw	0
  4059  0F8D  00B1               	movwf	___aldiv@quotient+2
  4060  0F8E  3000               	movlw	0
  4061  0F8F  00B0               	movwf	___aldiv@quotient+1
  4062  0F90  3000               	movlw	0
  4063  0F91  00AF               	movwf	___aldiv@quotient
  4064  0F92                     l3172:	
  4065  0F92  0827               	movf	___aldiv@divisor+3,w
  4066  0F93  0426               	iorwf	___aldiv@divisor+2,w
  4067  0F94  0425               	iorwf	___aldiv@divisor+1,w
  4068  0F95  0424               	iorwf	___aldiv@divisor,w
  4069  0F96  1903               	skipnz
  4070  0F97  2F99               	goto	u2511
  4071  0F98  2F9A               	goto	u2510
  4072  0F99                     u2511:	
  4073  0F99  2FE7               	goto	l3192
  4074  0F9A                     u2510:	
  4075  0F9A                     l3174:	
  4076  0F9A  01AD               	clrf	___aldiv@counter
  4077  0F9B  0AAD               	incf	___aldiv@counter,f
  4078  0F9C  2FAA               	goto	l3178
  4079  0F9D                     l3176:	
  4080  0F9D  3001               	movlw	1
  4081  0F9E  00AC               	movwf	??___aldiv
  4082  0F9F                     u2525:	
  4083  0F9F  1003               	clrc
  4084  0FA0  0DA4               	rlf	___aldiv@divisor,f
  4085  0FA1  0DA5               	rlf	___aldiv@divisor+1,f
  4086  0FA2  0DA6               	rlf	___aldiv@divisor+2,f
  4087  0FA3  0DA7               	rlf	___aldiv@divisor+3,f
  4088  0FA4  0BAC               	decfsz	??___aldiv,f
  4089  0FA5  2F9F               	goto	u2525
  4090  0FA6  3001               	movlw	1
  4091  0FA7  00AC               	movwf	??___aldiv
  4092  0FA8  082C               	movf	??___aldiv,w
  4093  0FA9  07AD               	addwf	___aldiv@counter,f
  4094  0FAA                     l3178:	
  4095  0FAA  1FA7               	btfss	___aldiv@divisor+3,7
  4096  0FAB  2FAD               	goto	u2531
  4097  0FAC  2FAE               	goto	u2530
  4098  0FAD                     u2531:	
  4099  0FAD  2F9D               	goto	l3176
  4100  0FAE                     u2530:	
  4101  0FAE                     l3180:	
  4102  0FAE  3001               	movlw	1
  4103  0FAF  00AC               	movwf	??___aldiv
  4104  0FB0                     u2545:	
  4105  0FB0  1003               	clrc
  4106  0FB1  0DAF               	rlf	___aldiv@quotient,f
  4107  0FB2  0DB0               	rlf	___aldiv@quotient+1,f
  4108  0FB3  0DB1               	rlf	___aldiv@quotient+2,f
  4109  0FB4  0DB2               	rlf	___aldiv@quotient+3,f
  4110  0FB5  0BAC               	decfsz	??___aldiv,f
  4111  0FB6  2FB0               	goto	u2545
  4112  0FB7                     l3182:	
  4113  0FB7  0827               	movf	___aldiv@divisor+3,w
  4114  0FB8  022B               	subwf	___aldiv@dividend+3,w
  4115  0FB9  1D03               	skipz
  4116  0FBA  2FC5               	goto	u2555
  4117  0FBB  0826               	movf	___aldiv@divisor+2,w
  4118  0FBC  022A               	subwf	___aldiv@dividend+2,w
  4119  0FBD  1D03               	skipz
  4120  0FBE  2FC5               	goto	u2555
  4121  0FBF  0825               	movf	___aldiv@divisor+1,w
  4122  0FC0  0229               	subwf	___aldiv@dividend+1,w
  4123  0FC1  1D03               	skipz
  4124  0FC2  2FC5               	goto	u2555
  4125  0FC3  0824               	movf	___aldiv@divisor,w
  4126  0FC4  0228               	subwf	___aldiv@dividend,w
  4127  0FC5                     u2555:	
  4128  0FC5  1C03               	skipc
  4129  0FC6  2FC8               	goto	u2551
  4130  0FC7  2FC9               	goto	u2550
  4131  0FC8                     u2551:	
  4132  0FC8  2FD8               	goto	l3188
  4133  0FC9                     u2550:	
  4134  0FC9                     l3184:	
  4135  0FC9  0824               	movf	___aldiv@divisor,w
  4136  0FCA  02A8               	subwf	___aldiv@dividend,f
  4137  0FCB  0825               	movf	___aldiv@divisor+1,w
  4138  0FCC  1C03               	skipc
  4139  0FCD  0F25               	incfsz	___aldiv@divisor+1,w
  4140  0FCE  02A9               	subwf	___aldiv@dividend+1,f
  4141  0FCF  0826               	movf	___aldiv@divisor+2,w
  4142  0FD0  1C03               	skipc
  4143  0FD1  0F26               	incfsz	___aldiv@divisor+2,w
  4144  0FD2  02AA               	subwf	___aldiv@dividend+2,f
  4145  0FD3  0827               	movf	___aldiv@divisor+3,w
  4146  0FD4  1C03               	skipc
  4147  0FD5  0F27               	incfsz	___aldiv@divisor+3,w
  4148  0FD6  02AB               	subwf	___aldiv@dividend+3,f
  4149  0FD7                     l3186:	
  4150  0FD7  142F               	bsf	___aldiv@quotient,0
  4151  0FD8                     l3188:	
  4152  0FD8  3001               	movlw	1
  4153  0FD9                     u2565:	
  4154  0FD9  1003               	clrc
  4155  0FDA  0CA7               	rrf	___aldiv@divisor+3,f
  4156  0FDB  0CA6               	rrf	___aldiv@divisor+2,f
  4157  0FDC  0CA5               	rrf	___aldiv@divisor+1,f
  4158  0FDD  0CA4               	rrf	___aldiv@divisor,f
  4159  0FDE  3EFF               	addlw	-1
  4160  0FDF  1D03               	skipz
  4161  0FE0  2FD9               	goto	u2565
  4162  0FE1                     l3190:	
  4163  0FE1  3001               	movlw	1
  4164  0FE2  02AD               	subwf	___aldiv@counter,f
  4165  0FE3  1D03               	btfss	3,2
  4166  0FE4  2FE6               	goto	u2571
  4167  0FE5  2FE7               	goto	u2570
  4168  0FE6                     u2571:	
  4169  0FE6  2FAE               	goto	l3180
  4170  0FE7                     u2570:	
  4171  0FE7                     l3192:	
  4172  0FE7  082E               	movf	___aldiv@sign,w
  4173  0FE8  1903               	btfsc	3,2
  4174  0FE9  2FEB               	goto	u2581
  4175  0FEA  2FEC               	goto	u2580
  4176  0FEB                     u2581:	
  4177  0FEB  2FF7               	goto	l3196
  4178  0FEC                     u2580:	
  4179  0FEC                     l3194:	
  4180  0FEC  09AF               	comf	___aldiv@quotient,f
  4181  0FED  09B0               	comf	___aldiv@quotient+1,f
  4182  0FEE  09B1               	comf	___aldiv@quotient+2,f
  4183  0FEF  09B2               	comf	___aldiv@quotient+3,f
  4184  0FF0  0AAF               	incf	___aldiv@quotient,f
  4185  0FF1  1903               	skipnz
  4186  0FF2  0AB0               	incf	___aldiv@quotient+1,f
  4187  0FF3  1903               	skipnz
  4188  0FF4  0AB1               	incf	___aldiv@quotient+2,f
  4189  0FF5  1903               	skipnz
  4190  0FF6  0AB2               	incf	___aldiv@quotient+3,f
  4191  0FF7                     l3196:	
  4192  0FF7  0832               	movf	___aldiv@quotient+3,w
  4193  0FF8  00A7               	movwf	?___aldiv+3
  4194  0FF9  0831               	movf	___aldiv@quotient+2,w
  4195  0FFA  00A6               	movwf	?___aldiv+2
  4196  0FFB  0830               	movf	___aldiv@quotient+1,w
  4197  0FFC  00A5               	movwf	?___aldiv+1
  4198  0FFD  082F               	movf	___aldiv@quotient,w
  4199  0FFE  00A4               	movwf	?___aldiv
  4200  0FFF                     l511:	
  4201  0FFF  0008               	return
  4202  1000                     __end_of___aldiv:	
  4203                           
  4204                           	psect	text13
  4205  0713                     __ptext13:	
  4206 ;; *************** function _ShowDigitsOnDisplay *****************
  4207 ;; Defined at:
  4208 ;;		line 495 in file "main.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;		None
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  display_inde    1   33[BANK0 ] unsigned char 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4222 ;;      Params:         0       0       0       0       0
  4223 ;;      Locals:         0       1       0       0       0
  4224 ;;      Temps:          0       2       0       0       0
  4225 ;;      Totals:         0       3       0       0       0
  4226 ;;Total ram usage:        3 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    4
  4229 ;; This function calls:
  4230 ;;		_SetDisplay
  4231 ;;		___awmod
  4232 ;; This function is called by:
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _ShowDigitsOnDisplay
  4239  0713                     _ShowDigitsOnDisplay:	
  4240  0713                     l3462:	
  4241                           ;incstack = 0
  4242                           ; Regs used in _ShowDigitsOnDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4243                           
  4244                           
  4245                           ;main.c: 497:     for (unsigned char display_index = 0; display_index < n_semafori; disp
      +                          lay_index++)
  4246  0713  1283               	bcf	3,5	;RP0=0, select bank0
  4247  0714  1303               	bcf	3,6	;RP1=0, select bank0
  4248  0715  01C1               	clrf	ShowDigitsOnDisplay@display_index
  4249  0716  2F8A               	goto	l3482
  4250  0717                     l3468:	
  4251                           
  4252                           ;main.c: 502:             if ((*DigitsArr[display_index]).centinaia > 0)
  4253  0717  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4254  0718  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4255  0719  0084               	movwf	4
  4256  071A  1383               	bcf	3,7	;select IRP bank0
  4257  071B  0800               	movf	0,w
  4258  071C  0084               	movwf	4
  4259  071D  0800               	movf	0,w
  4260  071E  1903               	btfsc	3,2
  4261  071F  2F21               	goto	u2911
  4262  0720  2F22               	goto	u2910
  4263  0721                     u2911:	
  4264  0721  2F9D               	goto	l3484
  4265  0722                     u2910:	
  4266  0722                     l3470:	
  4267                           
  4268                           ;main.c: 503:             {;main.c: 504:                 SetDisplay(display_index, 1, 0,
      +                           0, display[(*DigitsArr[display_index]).centinaia]);
  4269  0722  01A4               	clrf	SetDisplay@d1
  4270  0723  0AA4               	incf	SetDisplay@d1,f
  4271  0724  01A5               	clrf	SetDisplay@d2
  4272  0725  01A6               	clrf	SetDisplay@d3
  4273  0726  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4274  0727  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4275  0728  0084               	movwf	4
  4276  0729  0800               	movf	0,w
  4277  072A  0084               	movwf	4
  4278  072B  0800               	movf	0,w
  4279  072C  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4280  072D  0084               	movwf	4
  4281  072E  120A  158A  2000  120A  118A  	fcall	stringdir
  4282  0733  00BF               	movwf	??_ShowDigitsOnDisplay
  4283  0734  083F               	movf	??_ShowDigitsOnDisplay,w
  4284  0735  00A7               	movwf	SetDisplay@value
  4285  0736  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4286  0737  120A  158A  2448  120A  118A  	fcall	_SetDisplay
  4287  073C  2F9D               	goto	l3484
  4288  073D                     l3472:	
  4289                           
  4290                           ;main.c: 508:             if ((*DigitsArr[display_index]).decine > 0 || (*DigitsArr[disp
      +                          lay_index]).centinaia > 0)
  4291  073D  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4292  073E  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4293  073F  0084               	movwf	4
  4294  0740  1383               	bcf	3,7	;select IRP bank0
  4295  0741  0A00               	incf	0,w
  4296  0742  0084               	movwf	4
  4297  0743  0800               	movf	0,w
  4298  0744  1D03               	btfss	3,2
  4299  0745  2F47               	goto	u2921
  4300  0746  2F48               	goto	u2920
  4301  0747                     u2921:	
  4302  0747  2F52               	goto	l3476
  4303  0748                     u2920:	
  4304  0748                     l3474:	
  4305  0748  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4306  0749  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4307  074A  0084               	movwf	4
  4308  074B  0800               	movf	0,w
  4309  074C  0084               	movwf	4
  4310  074D  0800               	movf	0,w
  4311  074E  1903               	btfsc	3,2
  4312  074F  2F51               	goto	u2931
  4313  0750  2F52               	goto	u2930
  4314  0751                     u2931:	
  4315  0751  2F9D               	goto	l3484
  4316  0752                     u2930:	
  4317  0752                     l3476:	
  4318                           
  4319                           ;main.c: 509:             {;main.c: 510:                 SetDisplay(display_index, 0, 1,
      +                           0, display[(*DigitsArr[display_index]).decine]);
  4320  0752  01A4               	clrf	SetDisplay@d1
  4321  0753  01A5               	clrf	SetDisplay@d2
  4322  0754  0AA5               	incf	SetDisplay@d2,f
  4323  0755  01A6               	clrf	SetDisplay@d3
  4324  0756  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4325  0757  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4326  0758  0084               	movwf	4
  4327  0759  0A00               	incf	0,w
  4328  075A  0084               	movwf	4
  4329  075B  0800               	movf	0,w
  4330  075C  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4331  075D  0084               	movwf	4
  4332  075E  120A  158A  2000  120A  118A  	fcall	stringdir
  4333  0763  00BF               	movwf	??_ShowDigitsOnDisplay
  4334  0764  083F               	movf	??_ShowDigitsOnDisplay,w
  4335  0765  00A7               	movwf	SetDisplay@value
  4336  0766  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4337  0767  120A  158A  2448  120A  118A  	fcall	_SetDisplay
  4338  076C  2F9D               	goto	l3484
  4339  076D                     l3478:	
  4340                           
  4341                           ;main.c: 514:             SetDisplay(display_index, 0, 0, 1, display[(*DigitsArr[display
      +                          _index]).unita]);
  4342  076D  01A4               	clrf	SetDisplay@d1
  4343  076E  01A5               	clrf	SetDisplay@d2
  4344  076F  01A6               	clrf	SetDisplay@d3
  4345  0770  0AA6               	incf	SetDisplay@d3,f
  4346  0771  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4347  0772  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4348  0773  0084               	movwf	4
  4349  0774  1383               	bcf	3,7	;select IRP bank0
  4350  0775  0800               	movf	0,w
  4351  0776  3E02               	addlw	2
  4352  0777  0084               	movwf	4
  4353  0778  0800               	movf	0,w
  4354  0779  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4355  077A  0084               	movwf	4
  4356  077B  120A  158A  2000  120A  118A  	fcall	stringdir
  4357  0780  00BF               	movwf	??_ShowDigitsOnDisplay
  4358  0781  083F               	movf	??_ShowDigitsOnDisplay,w
  4359  0782  00A7               	movwf	SetDisplay@value
  4360  0783  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4361  0784  120A  158A  2448  120A  118A  	fcall	_SetDisplay
  4362                           
  4363                           ;main.c: 515:             break;
  4364  0789  2F9D               	goto	l3484
  4365  078A                     l3482:	
  4366  078A  085D               	movf	_disp,w
  4367  078B  00BF               	movwf	??_ShowDigitsOnDisplay
  4368  078C  01C0               	clrf	??_ShowDigitsOnDisplay+1
  4369                           
  4370                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4371                           ; Switch size 1, requested type "simple"
  4372                           ; Number of cases is 1, Range of values is 0 to 0
  4373                           ; switch strategies available:
  4374                           ; Name         Instructions Cycles
  4375                           ; simple_byte            4     3 (average)
  4376                           ; direct_byte           11     8 (fixed)
  4377                           ; jumptable            260     6 (fixed)
  4378                           ;	Chosen strategy is simple_byte
  4379  078D  0840               	movf	??_ShowDigitsOnDisplay+1,w
  4380  078E  3A00               	xorlw	0	; case 0
  4381  078F  1903               	skipnz
  4382  0790  2F92               	goto	l3936
  4383  0791  2F9D               	goto	l3484
  4384  0792                     l3936:	
  4385                           
  4386                           ; Switch size 1, requested type "simple"
  4387                           ; Number of cases is 3, Range of values is 0 to 2
  4388                           ; switch strategies available:
  4389                           ; Name         Instructions Cycles
  4390                           ; simple_byte           10     6 (average)
  4391                           ; direct_byte           17     8 (fixed)
  4392                           ; jumptable            260     6 (fixed)
  4393                           ;	Chosen strategy is simple_byte
  4394  0792  083F               	movf	??_ShowDigitsOnDisplay,w
  4395  0793  3A00               	xorlw	0	; case 0
  4396  0794  1903               	skipnz
  4397  0795  2F17               	goto	l3468
  4398  0796  3A01               	xorlw	1	; case 1
  4399  0797  1903               	skipnz
  4400  0798  2F3D               	goto	l3472
  4401  0799  3A03               	xorlw	3	; case 2
  4402  079A  1903               	skipnz
  4403  079B  2F6D               	goto	l3478
  4404  079C  2F9D               	goto	l3484
  4405  079D                     l3484:	
  4406                           
  4407                           ;main.c: 517:     }
  4408  079D  3001               	movlw	1
  4409  079E  1283               	bcf	3,5	;RP0=0, select bank0
  4410  079F  1303               	bcf	3,6	;RP1=0, select bank0
  4411  07A0  00BF               	movwf	??_ShowDigitsOnDisplay
  4412  07A1  083F               	movf	??_ShowDigitsOnDisplay,w
  4413  07A2  07C1               	addwf	ShowDigitsOnDisplay@display_index,f
  4414  07A3                     l3486:	
  4415  07A3  3002               	movlw	2
  4416  07A4  0241               	subwf	ShowDigitsOnDisplay@display_index,w
  4417  07A5  1C03               	skipc
  4418  07A6  2FA8               	goto	u2941
  4419  07A7  2FA9               	goto	u2940
  4420  07A8                     u2941:	
  4421  07A8  2F8A               	goto	l3482
  4422  07A9                     u2940:	
  4423  07A9                     l3488:	
  4424                           
  4425                           ;main.c: 518:     disp = (disp + 1) % 3;
  4426  07A9  3003               	movlw	3
  4427  07AA  00B8               	movwf	___awmod@divisor
  4428  07AB  3000               	movlw	0
  4429  07AC  00B9               	movwf	___awmod@divisor+1
  4430  07AD  085D               	movf	_disp,w
  4431  07AE  3E01               	addlw	1
  4432  07AF  00BA               	movwf	___awmod@dividend
  4433  07B0  3000               	movlw	0
  4434  07B1  1803               	skipnc
  4435  07B2  3001               	movlw	1
  4436  07B3  00BB               	movwf	___awmod@dividend+1
  4437  07B4  120A  158A  249D  120A  118A  	fcall	___awmod
  4438  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  4439  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  4440  07BB  0838               	movf	?___awmod,w
  4441  07BC  00BF               	movwf	??_ShowDigitsOnDisplay
  4442  07BD  083F               	movf	??_ShowDigitsOnDisplay,w
  4443  07BE  00DD               	movwf	_disp
  4444  07BF                     l340:	
  4445  07BF  0008               	return
  4446  07C0                     __end_of_ShowDigitsOnDisplay:	
  4447                           
  4448                           	psect	text14
  4449  0C48                     __ptext14:	
  4450 ;; *************** function _SetDisplay *****************
  4451 ;; Defined at:
  4452 ;;		line 470 in file "main.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  display_inde    1    wreg     unsigned char 
  4455 ;;  d1              1    4[BANK0 ] unsigned char 
  4456 ;;  d2              1    5[BANK0 ] unsigned char 
  4457 ;;  d3              1    6[BANK0 ] unsigned char 
  4458 ;;  value           1    7[BANK0 ] unsigned char 
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  display_inde    1   10[BANK0 ] unsigned char 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  1    wreg      void 
  4463 ;; Registers used:
  4464 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4470 ;;      Params:         0       4       0       0       0
  4471 ;;      Locals:         0       1       0       0       0
  4472 ;;      Temps:          0       2       0       0       0
  4473 ;;      Totals:         0       7       0       0       0
  4474 ;;Total ram usage:        7 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; Hardware stack levels required when called:    3
  4477 ;; This function calls:
  4478 ;;		Nothing
  4479 ;; This function is called by:
  4480 ;;		_ShowDigitsOnDisplay
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484                           
  4485                           ;psect for function _SetDisplay
  4486  0C48                     _SetDisplay:	
  4487                           
  4488                           ;incstack = 0
  4489                           ; Regs used in _SetDisplay: [wreg-fsr0h+status,2+status,0]
  4490                           ;SetDisplay@display_index stored from wreg
  4491  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  4492  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  4493  0C4A  00AA               	movwf	SetDisplay@display_index
  4494  0C4B                     l3100:	
  4495                           
  4496                           ;main.c: 470: void SetDisplay(unsigned char display_index, char d1, char d2, char d3, ch
      +                          ar value);main.c: 471: {;main.c: 472:     switch (display_index)
  4497  0C4B  2C8C               	goto	l3110
  4498  0C4C                     l3102:	
  4499                           
  4500                           ;main.c: 475:         PORTAbits.RA2 = d1;
  4501  0C4C  0C24               	rrf	SetDisplay@d1,w
  4502  0C4D  1C03               	skipc
  4503  0C4E  1105               	bcf	5,2	;volatile
  4504  0C4F  1803               	skipnc
  4505  0C50  1505               	bsf	5,2	;volatile
  4506                           
  4507                           ;main.c: 476:         PORTAbits.RA3 = d2;
  4508  0C51  0C25               	rrf	SetDisplay@d2,w
  4509  0C52  1C03               	skipc
  4510  0C53  1185               	bcf	5,3	;volatile
  4511  0C54  1803               	skipnc
  4512  0C55  1585               	bsf	5,3	;volatile
  4513                           
  4514                           ;main.c: 477:         PORTAbits.RA4 = d3;
  4515  0C56  0C26               	rrf	SetDisplay@d3,w
  4516  0C57  1C03               	skipc
  4517  0C58  1205               	bcf	5,4	;volatile
  4518  0C59  1803               	skipnc
  4519  0C5A  1605               	bsf	5,4	;volatile
  4520                           
  4521                           ;main.c: 478:         PORTBbits.RB0 = d1;
  4522  0C5B  0C24               	rrf	SetDisplay@d1,w
  4523  0C5C  1C03               	skipc
  4524  0C5D  1006               	bcf	6,0	;volatile
  4525  0C5E  1803               	skipnc
  4526  0C5F  1406               	bsf	6,0	;volatile
  4527                           
  4528                           ;main.c: 479:         PORTBbits.RB0 = d2;
  4529  0C60  0C25               	rrf	SetDisplay@d2,w
  4530  0C61  1C03               	skipc
  4531  0C62  1006               	bcf	6,0	;volatile
  4532  0C63  1803               	skipnc
  4533  0C64  1406               	bsf	6,0	;volatile
  4534                           
  4535                           ;main.c: 480:         PORTBbits.RB0 = d3;
  4536  0C65  0C26               	rrf	SetDisplay@d3,w
  4537  0C66  1C03               	skipc
  4538  0C67  1006               	bcf	6,0	;volatile
  4539  0C68  1803               	skipnc
  4540  0C69  1406               	bsf	6,0	;volatile
  4541  0C6A                     l3104:	
  4542                           
  4543                           ;main.c: 481:         PORTD = value;
  4544  0C6A  0827               	movf	SetDisplay@value,w
  4545  0C6B  0088               	movwf	8	;volatile
  4546                           
  4547                           ;main.c: 482:         break;
  4548  0C6C  2C9C               	goto	l326
  4549  0C6D                     l3106:	
  4550                           
  4551                           ;main.c: 484:         PORTAbits.RA5 = d1;
  4552  0C6D  0C24               	rrf	SetDisplay@d1,w
  4553  0C6E  1C03               	skipc
  4554  0C6F  1285               	bcf	5,5	;volatile
  4555  0C70  1803               	skipnc
  4556  0C71  1685               	bsf	5,5	;volatile
  4557                           
  4558                           ;main.c: 485:         PORTBbits.RB0 = d2;
  4559  0C72  0C25               	rrf	SetDisplay@d2,w
  4560  0C73  1C03               	skipc
  4561  0C74  1006               	bcf	6,0	;volatile
  4562  0C75  1803               	skipnc
  4563  0C76  1406               	bsf	6,0	;volatile
  4564                           
  4565                           ;main.c: 486:         PORTBbits.RB0 = d3;
  4566  0C77  0C26               	rrf	SetDisplay@d3,w
  4567  0C78  1C03               	skipc
  4568  0C79  1006               	bcf	6,0	;volatile
  4569  0C7A  1803               	skipnc
  4570  0C7B  1406               	bsf	6,0	;volatile
  4571                           
  4572                           ;main.c: 487:         PORTBbits.RB0 = d1;
  4573  0C7C  0C24               	rrf	SetDisplay@d1,w
  4574  0C7D  1C03               	skipc
  4575  0C7E  1006               	bcf	6,0	;volatile
  4576  0C7F  1803               	skipnc
  4577  0C80  1406               	bsf	6,0	;volatile
  4578                           
  4579                           ;main.c: 488:         PORTBbits.RB0 = d2;
  4580  0C81  0C25               	rrf	SetDisplay@d2,w
  4581  0C82  1C03               	skipc
  4582  0C83  1006               	bcf	6,0	;volatile
  4583  0C84  1803               	skipnc
  4584  0C85  1406               	bsf	6,0	;volatile
  4585                           
  4586                           ;main.c: 489:         PORTBbits.RB0 = d3;
  4587  0C86  0C26               	rrf	SetDisplay@d3,w
  4588  0C87  1C03               	skipc
  4589  0C88  1006               	bcf	6,0	;volatile
  4590  0C89  1803               	skipnc
  4591  0C8A  1406               	bsf	6,0	;volatile
  4592                           
  4593                           ;main.c: 491:         break;
  4594  0C8B  2C9C               	goto	l326
  4595  0C8C                     l3110:	
  4596  0C8C  082A               	movf	SetDisplay@display_index,w
  4597  0C8D  00A8               	movwf	??_SetDisplay
  4598  0C8E  01A9               	clrf	??_SetDisplay+1
  4599                           
  4600                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4601                           ; Switch size 1, requested type "simple"
  4602                           ; Number of cases is 1, Range of values is 0 to 0
  4603                           ; switch strategies available:
  4604                           ; Name         Instructions Cycles
  4605                           ; simple_byte            4     3 (average)
  4606                           ; direct_byte           11     8 (fixed)
  4607                           ; jumptable            260     6 (fixed)
  4608                           ;	Chosen strategy is simple_byte
  4609  0C8F  0829               	movf	??_SetDisplay+1,w
  4610  0C90  3A00               	xorlw	0	; case 0
  4611  0C91  1903               	skipnz
  4612  0C92  2C94               	goto	l3938
  4613  0C93  2C9C               	goto	l326
  4614  0C94                     l3938:	
  4615                           
  4616                           ; Switch size 1, requested type "simple"
  4617                           ; Number of cases is 2, Range of values is 0 to 1
  4618                           ; switch strategies available:
  4619                           ; Name         Instructions Cycles
  4620                           ; simple_byte            7     4 (average)
  4621                           ; direct_byte           14     8 (fixed)
  4622                           ; jumptable            260     6 (fixed)
  4623                           ;	Chosen strategy is simple_byte
  4624  0C94  0828               	movf	??_SetDisplay,w
  4625  0C95  3A00               	xorlw	0	; case 0
  4626  0C96  1903               	skipnz
  4627  0C97  2C4C               	goto	l3102
  4628  0C98  3A01               	xorlw	1	; case 1
  4629  0C99  1903               	skipnz
  4630  0C9A  2C6D               	goto	l3106
  4631  0C9B  2C9C               	goto	l326
  4632  0C9C                     l326:	
  4633  0C9C  0008               	return
  4634  0C9D                     __end_of_SetDisplay:	
  4635                           
  4636                           	psect	text15
  4637  0CF8                     __ptext15:	
  4638 ;; *************** function _SetReceivedTimes *****************
  4639 ;; Defined at:
  4640 ;;		line 86 in file "./CustomLib/TrafficLight.h"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  _dataFromGat    1    wreg     PTR unsigned char 
  4643 ;;		 -> dataFromGateway(15), 
  4644 ;;  _semafori       1   12[BANK0 ] PTR PTR struct .
  4645 ;;		 -> Semafori(2), 
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  _dataFromGat    1   19[BANK0 ] PTR unsigned char 
  4648 ;;		 -> dataFromGateway(15), 
  4649 ;;  index           1   20[BANK0 ] unsigned char 
  4650 ;;  colorId         1   18[BANK0 ] unsigned char 
  4651 ;;  semaforoId      1   17[BANK0 ] unsigned char 
  4652 ;;  i               1   21[BANK0 ] unsigned char 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4662 ;;      Params:         0       1       0       0       0
  4663 ;;      Locals:         0       5       0       0       0
  4664 ;;      Temps:          0       4       0       0       0
  4665 ;;      Totals:         0      10       0       0       0
  4666 ;;Total ram usage:       10 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    4
  4669 ;; This function calls:
  4670 ;;		_GetTime
  4671 ;;		___bmul
  4672 ;; This function is called by:
  4673 ;;		_main
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           
  4678                           ;psect for function _SetReceivedTimes
  4679  0CF8                     _SetReceivedTimes:	
  4680                           
  4681                           ;incstack = 0
  4682                           ; Regs used in _SetReceivedTimes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4683                           ;SetReceivedTimes@_dataFromGateway stored from wreg
  4684  0CF8  1283               	bcf	3,5	;RP0=0, select bank0
  4685  0CF9  1303               	bcf	3,6	;RP1=0, select bank0
  4686  0CFA  00B3               	movwf	SetReceivedTimes@_dataFromGateway
  4687  0CFB                     l3344:	
  4688                           
  4689                           ;./CustomLib/TrafficLight.h: 86: void SetReceivedTimes(ProtocolBytes _dataFromGateway, _
      +                          Semafori _semafori);./CustomLib/TrafficLight.h: 87: {;./CustomLib/TrafficLight.h: 88:   
      +                            for (unsigned char i = 0; i < 3; i++)
  4690  0CFB  01B5               	clrf	SetReceivedTimes@i
  4691  0CFC                     l3346:	
  4692  0CFC  3003               	movlw	3
  4693  0CFD  0235               	subwf	SetReceivedTimes@i,w
  4694  0CFE  1C03               	skipc
  4695  0CFF  2D01               	goto	u2831
  4696  0D00  2D02               	goto	u2830
  4697  0D01                     u2831:	
  4698  0D01  2D03               	goto	l3350
  4699  0D02                     u2830:	
  4700  0D02  2D57               	goto	l154
  4701  0D03                     l3350:	
  4702                           
  4703                           ;./CustomLib/TrafficLight.h: 89:     {;./CustomLib/TrafficLight.h: 90:         unsigned 
      +                          char index = i * 5;
  4704  0D03  3005               	movlw	5
  4705  0D04  00AD               	movwf	??_SetReceivedTimes
  4706  0D05  082D               	movf	??_SetReceivedTimes,w
  4707  0D06  00A4               	movwf	___bmul@multiplicand
  4708  0D07  0835               	movf	SetReceivedTimes@i,w
  4709  0D08  120A  158A  2251  120A  158A  	fcall	___bmul
  4710  0D0D  1283               	bcf	3,5	;RP0=0, select bank0
  4711  0D0E  1303               	bcf	3,6	;RP1=0, select bank0
  4712  0D0F  00AE               	movwf	??_SetReceivedTimes+1
  4713  0D10  082E               	movf	??_SetReceivedTimes+1,w
  4714  0D11  00B4               	movwf	SetReceivedTimes@index
  4715  0D12                     l3352:	
  4716                           
  4717                           ;./CustomLib/TrafficLight.h: 91:         unsigned char semaforoId = (_dataFromGateway[in
      +                          dex] >> 1) & 0x0F;
  4718  0D12  0834               	movf	SetReceivedTimes@index,w
  4719  0D13  0733               	addwf	SetReceivedTimes@_dataFromGateway,w
  4720  0D14  00AD               	movwf	??_SetReceivedTimes
  4721  0D15  082D               	movf	??_SetReceivedTimes,w
  4722  0D16  0084               	movwf	4
  4723  0D17  1383               	bcf	3,7	;select IRP bank0
  4724  0D18  0800               	movf	0,w
  4725  0D19  00AE               	movwf	??_SetReceivedTimes+1
  4726  0D1A  1003               	clrc
  4727  0D1B  0C2E               	rrf	??_SetReceivedTimes+1,w
  4728  0D1C  390F               	andlw	15
  4729  0D1D  00AF               	movwf	??_SetReceivedTimes+2
  4730  0D1E  082F               	movf	??_SetReceivedTimes+2,w
  4731  0D1F  00B1               	movwf	SetReceivedTimes@semaforoId
  4732  0D20                     l3354:	
  4733                           
  4734                           ;./CustomLib/TrafficLight.h: 92:         unsigned char colorId = ((_dataFromGateway[inde
      +                          x] >> 5) & 0x03) - 1;
  4735  0D20  0834               	movf	SetReceivedTimes@index,w
  4736  0D21  0733               	addwf	SetReceivedTimes@_dataFromGateway,w
  4737  0D22  00AD               	movwf	??_SetReceivedTimes
  4738  0D23  082D               	movf	??_SetReceivedTimes,w
  4739  0D24  0084               	movwf	4
  4740  0D25  0800               	movf	0,w
  4741  0D26  00AE               	movwf	??_SetReceivedTimes+1
  4742  0D27  3005               	movlw	5
  4743  0D28                     u2845:	
  4744  0D28  1003               	clrc
  4745  0D29  0CAE               	rrf	??_SetReceivedTimes+1,f
  4746  0D2A  3EFF               	addlw	-1
  4747  0D2B  1D03               	skipz
  4748  0D2C  2D28               	goto	u2845
  4749  0D2D  082E               	movf	??_SetReceivedTimes+1,w
  4750  0D2E  3903               	andlw	3
  4751  0D2F  3EFF               	addlw	255
  4752  0D30  00AF               	movwf	??_SetReceivedTimes+2
  4753  0D31  082F               	movf	??_SetReceivedTimes+2,w
  4754  0D32  00B2               	movwf	SetReceivedTimes@colorId
  4755  0D33                     l3356:	
  4756                           
  4757                           ;./CustomLib/TrafficLight.h: 94:         (*(_semafori)[semaforoId]).new_times[colorId] =
      +                           GetTime(index, _dataFromGateway);
  4758  0D33  0833               	movf	SetReceivedTimes@_dataFromGateway,w
  4759  0D34  00AD               	movwf	??_SetReceivedTimes
  4760  0D35  082D               	movf	??_SetReceivedTimes,w
  4761  0D36  00A4               	movwf	GetTime@_dataFromGateway
  4762  0D37  0834               	movf	SetReceivedTimes@index,w
  4763  0D38  120A  158A  231B  120A  158A  	fcall	_GetTime
  4764  0D3D  1283               	bcf	3,5	;RP0=0, select bank0
  4765  0D3E  1303               	bcf	3,6	;RP1=0, select bank0
  4766  0D3F  0831               	movf	SetReceivedTimes@semaforoId,w
  4767  0D40  072C               	addwf	SetReceivedTimes@_semafori,w
  4768  0D41  00AE               	movwf	??_SetReceivedTimes+1
  4769  0D42  082E               	movf	??_SetReceivedTimes+1,w
  4770  0D43  0084               	movwf	4
  4771  0D44  0832               	movf	SetReceivedTimes@colorId,w
  4772  0D45  00AF               	movwf	??_SetReceivedTimes+2
  4773  0D46  072F               	addwf	??_SetReceivedTimes+2,w
  4774  0D47  1383               	bcf	3,7	;select IRP bank0
  4775  0D48  0700               	addwf	0,w
  4776  0D49  00B0               	movwf	??_SetReceivedTimes+3
  4777  0D4A  0830               	movf	??_SetReceivedTimes+3,w
  4778  0D4B  3E06               	addlw	6
  4779  0D4C  0084               	movwf	4
  4780  0D4D  0824               	movf	?_GetTime,w
  4781  0D4E  0080               	movwf	0
  4782  0D4F  0A84               	incf	4,f
  4783  0D50  0825               	movf	?_GetTime+1,w
  4784  0D51  0080               	movwf	0
  4785  0D52                     l3358:	
  4786                           
  4787                           ;./CustomLib/TrafficLight.h: 95:     }
  4788  0D52  3001               	movlw	1
  4789  0D53  00AD               	movwf	??_SetReceivedTimes
  4790  0D54  082D               	movf	??_SetReceivedTimes,w
  4791  0D55  07B5               	addwf	SetReceivedTimes@i,f
  4792  0D56  2CFC               	goto	l3346
  4793  0D57                     l154:	
  4794  0D57  0008               	return
  4795  0D58                     __end_of_SetReceivedTimes:	
  4796                           
  4797                           	psect	text16
  4798  0B1B                     __ptext16:	
  4799 ;; *************** function _GetTime *****************
  4800 ;; Defined at:
  4801 ;;		line 37 in file "./CustomLib/TrafficLight.h"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  index           1    wreg     unsigned char 
  4804 ;;  _dataFromGat    1    4[BANK0 ] PTR unsigned char 
  4805 ;;		 -> dataFromGateway(15), 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  index           1    8[BANK0 ] unsigned char 
  4808 ;;  tmp             2   10[BANK0 ] int 
  4809 ;;  shortInt        1    9[BANK0 ] struct .
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  2    4[BANK0 ] int 
  4812 ;; Registers used:
  4813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4819 ;;      Params:         0       2       0       0       0
  4820 ;;      Locals:         0       4       0       0       0
  4821 ;;      Temps:          0       2       0       0       0
  4822 ;;      Totals:         0       8       0       0       0
  4823 ;;Total ram usage:        8 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    3
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_SetReceivedTimes
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           
  4834                           ;psect for function _GetTime
  4835  0B1B                     _GetTime:	
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4839                           ;GetTime@index stored from wreg
  4840  0B1B  1283               	bcf	3,5	;RP0=0, select bank0
  4841  0B1C  1303               	bcf	3,6	;RP1=0, select bank0
  4842  0B1D  00A8               	movwf	GetTime@index
  4843  0B1E                     l3082:	
  4844                           
  4845                           ;./CustomLib/TrafficLight.h: 37: int GetTime(unsigned char index, ProtocolBytes _dataFro
      +                          mGateway);./CustomLib/TrafficLight.h: 38: {;./CustomLib/TrafficLight.h: 39:     int tmp;
      +                          ;./CustomLib/TrafficLight.h: 43:     } shortInt;;./CustomLib/TrafficLight.h: 45:     sho
      +                          rtInt.Val = _dataFromGateway[index + 3] & 0x7F;
  4846  0B1E  0828               	movf	GetTime@index,w
  4847  0B1F  0724               	addwf	GetTime@_dataFromGateway,w
  4848  0B20  00A6               	movwf	??_GetTime
  4849  0B21  0826               	movf	??_GetTime,w
  4850  0B22  3E03               	addlw	3
  4851  0B23  0084               	movwf	4
  4852  0B24  307F               	movlw	127
  4853  0B25  1383               	bcf	3,7	;select IRP bank0
  4854  0B26  0500               	andwf	0,w
  4855  0B27  00A7               	movwf	??_GetTime+1
  4856  0B28  0829               	movf	GetTime@shortInt,w
  4857  0B29  0627               	xorwf	??_GetTime+1,w
  4858  0B2A  3980               	andlw	-128
  4859  0B2B  0627               	xorwf	??_GetTime+1,w
  4860  0B2C  00A9               	movwf	GetTime@shortInt
  4861  0B2D                     l3084:	
  4862                           
  4863                           ;./CustomLib/TrafficLight.h: 46:     tmp = shortInt.Val;
  4864  0B2D  0829               	movf	GetTime@shortInt,w
  4865  0B2E  397F               	andlw	127
  4866  0B2F  00A6               	movwf	??_GetTime
  4867  0B30  01A7               	clrf	??_GetTime+1
  4868  0B31  0826               	movf	??_GetTime,w
  4869  0B32  00AA               	movwf	GetTime@tmp
  4870  0B33  0827               	movf	??_GetTime+1,w
  4871  0B34  00AB               	movwf	GetTime@tmp+1
  4872  0B35                     l3086:	
  4873                           
  4874                           ;./CustomLib/TrafficLight.h: 47:     tmp = (tmp << 7) & 0x80;
  4875  0B35  082B               	movf	GetTime@tmp+1,w
  4876  0B36  00A7               	movwf	??_GetTime+1
  4877  0B37  082A               	movf	GetTime@tmp,w
  4878  0B38  00A6               	movwf	??_GetTime
  4879  0B39  3007               	movlw	7
  4880  0B3A  00FF               	movwf	btemp+1
  4881  0B3B                     u2365:	
  4882  0B3B  1003               	clrc
  4883  0B3C  0DA6               	rlf	??_GetTime,f
  4884  0B3D  0DA7               	rlf	??_GetTime+1,f
  4885  0B3E  0BFF               	decfsz	btemp+1,f
  4886  0B3F  2B3B               	goto	u2365
  4887  0B40  3080               	movlw	128
  4888  0B41  0526               	andwf	??_GetTime,w
  4889  0B42  00AA               	movwf	GetTime@tmp
  4890  0B43  3000               	movlw	0
  4891  0B44  0527               	andwf	??_GetTime+1,w
  4892  0B45  00AB               	movwf	GetTime@tmp+1
  4893  0B46                     l3088:	
  4894                           
  4895                           ;./CustomLib/TrafficLight.h: 49:     shortInt.Val = _dataFromGateway[index + 2] & 0x7F;
  4896  0B46  0828               	movf	GetTime@index,w
  4897  0B47  0724               	addwf	GetTime@_dataFromGateway,w
  4898  0B48  00A6               	movwf	??_GetTime
  4899  0B49  0826               	movf	??_GetTime,w
  4900  0B4A  3E02               	addlw	2
  4901  0B4B  0084               	movwf	4
  4902  0B4C  307F               	movlw	127
  4903  0B4D  0500               	andwf	0,w
  4904  0B4E  00A7               	movwf	??_GetTime+1
  4905  0B4F  0829               	movf	GetTime@shortInt,w
  4906  0B50  0627               	xorwf	??_GetTime+1,w
  4907  0B51  3980               	andlw	-128
  4908  0B52  0627               	xorwf	??_GetTime+1,w
  4909  0B53  00A9               	movwf	GetTime@shortInt
  4910  0B54                     l3090:	
  4911                           
  4912                           ;./CustomLib/TrafficLight.h: 50:     tmp = tmp | shortInt.Val;
  4913  0B54  0829               	movf	GetTime@shortInt,w
  4914  0B55  397F               	andlw	127
  4915  0B56  00A6               	movwf	??_GetTime
  4916  0B57  082A               	movf	GetTime@tmp,w
  4917  0B58  0426               	iorwf	??_GetTime,w
  4918  0B59  00AA               	movwf	GetTime@tmp
  4919  0B5A  082B               	movf	GetTime@tmp+1,w
  4920  0B5B  00AB               	movwf	GetTime@tmp+1
  4921  0B5C                     l3092:	
  4922                           
  4923                           ;./CustomLib/TrafficLight.h: 52:     return tmp;
  4924  0B5C  082B               	movf	GetTime@tmp+1,w
  4925  0B5D  00A5               	movwf	?_GetTime+1
  4926  0B5E  082A               	movf	GetTime@tmp,w
  4927  0B5F  00A4               	movwf	?_GetTime
  4928  0B60                     l137:	
  4929  0B60  0008               	return
  4930  0B61                     __end_of_GetTime:	
  4931                           
  4932                           	psect	text17
  4933  065C                     __ptext17:	
  4934 ;; *************** function _SetDefaultTimers *****************
  4935 ;; Defined at:
  4936 ;;		line 56 in file "./CustomLib/TrafficLight.h"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;  rosso           2    4[BANK0 ] int 
  4939 ;;  verde           2    6[BANK0 ] int 
  4940 ;;  giallo          2    8[BANK0 ] int 
  4941 ;;  _semafori       1   10[BANK0 ] PTR PTR struct .
  4942 ;;		 -> Semafori(2), 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  i               1   15[BANK0 ] unsigned char 
  4945 ;;  l               1   14[BANK0 ] unsigned char 
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  1    wreg      void 
  4948 ;; Registers used:
  4949 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4955 ;;      Params:         0       7       0       0       0
  4956 ;;      Locals:         0       2       0       0       0
  4957 ;;      Temps:          0       3       0       0       0
  4958 ;;      Totals:         0      12       0       0       0
  4959 ;;Total ram usage:       12 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:    3
  4962 ;; This function calls:
  4963 ;;		Nothing
  4964 ;; This function is called by:
  4965 ;;		_main
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           
  4970                           ;psect for function _SetDefaultTimers
  4971  065C                     _SetDefaultTimers:	
  4972  065C                     l3308:	
  4973                           ;incstack = 0
  4974                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4975                           
  4976                           
  4977                           ;./CustomLib/TrafficLight.h: 56: void SetDefaultTimers(int rosso, int verde, int giallo,
      +                           _Semafori _semafori);./CustomLib/TrafficLight.h: 57: {;./CustomLib/TrafficLight.h: 58: 
      +                              for (unsigned char l = 0; l < n_semafori; l++)
  4978  065C  1283               	bcf	3,5	;RP0=0, select bank0
  4979  065D  1303               	bcf	3,6	;RP1=0, select bank0
  4980  065E  01AE               	clrf	SetDefaultTimers@l
  4981  065F                     l3314:	
  4982                           
  4983                           ;./CustomLib/TrafficLight.h: 59:     {;./CustomLib/TrafficLight.h: 60:         for (unsi
      +                          gned char i = 0; i < 3; i++)
  4984  065F  01AF               	clrf	SetDefaultTimers@i
  4985  0660  2ED0               	goto	l3328
  4986  0661                     l3320:	
  4987                           
  4988                           ;./CustomLib/TrafficLight.h: 65:                 (*(_semafori)[l]).times[i] = rosso;
  4989  0661  082E               	movf	SetDefaultTimers@l,w
  4990  0662  072A               	addwf	SetDefaultTimers@_semafori,w
  4991  0663  00AB               	movwf	??_SetDefaultTimers
  4992  0664  082B               	movf	??_SetDefaultTimers,w
  4993  0665  0084               	movwf	4
  4994  0666  082F               	movf	SetDefaultTimers@i,w
  4995  0667  00AC               	movwf	??_SetDefaultTimers+1
  4996  0668  072C               	addwf	??_SetDefaultTimers+1,w
  4997  0669  1383               	bcf	3,7	;select IRP bank0
  4998  066A  0700               	addwf	0,w
  4999  066B  00AD               	movwf	??_SetDefaultTimers+2
  5000  066C  082D               	movf	??_SetDefaultTimers+2,w
  5001  066D  0084               	movwf	4
  5002  066E  0824               	movf	SetDefaultTimers@rosso,w
  5003  066F  0080               	movwf	0
  5004  0670  0A84               	incf	4,f
  5005  0671  0825               	movf	SetDefaultTimers@rosso+1,w
  5006  0672  0080               	movwf	0
  5007                           
  5008                           ;./CustomLib/TrafficLight.h: 66:                 (*(_semafori)[l]).new_times[i] = rosso;
  5009  0673  082E               	movf	SetDefaultTimers@l,w
  5010  0674  072A               	addwf	SetDefaultTimers@_semafori,w
  5011  0675  00AB               	movwf	??_SetDefaultTimers
  5012  0676  082B               	movf	??_SetDefaultTimers,w
  5013  0677  0084               	movwf	4
  5014  0678  082F               	movf	SetDefaultTimers@i,w
  5015  0679  00AC               	movwf	??_SetDefaultTimers+1
  5016  067A  072C               	addwf	??_SetDefaultTimers+1,w
  5017  067B  0700               	addwf	0,w
  5018  067C  00AD               	movwf	??_SetDefaultTimers+2
  5019  067D  082D               	movf	??_SetDefaultTimers+2,w
  5020  067E  3E06               	addlw	6
  5021  067F  0084               	movwf	4
  5022  0680  0824               	movf	SetDefaultTimers@rosso,w
  5023  0681  0080               	movwf	0
  5024  0682  0A84               	incf	4,f
  5025  0683  0825               	movf	SetDefaultTimers@rosso+1,w
  5026  0684  0080               	movwf	0
  5027                           
  5028                           ;./CustomLib/TrafficLight.h: 67:                 break;
  5029  0685  2EE3               	goto	l3330
  5030  0686                     l3322:	
  5031                           
  5032                           ;./CustomLib/TrafficLight.h: 69:                 (*(_semafori)[l]).times[i] = verde;
  5033  0686  082E               	movf	SetDefaultTimers@l,w
  5034  0687  072A               	addwf	SetDefaultTimers@_semafori,w
  5035  0688  00AB               	movwf	??_SetDefaultTimers
  5036  0689  082B               	movf	??_SetDefaultTimers,w
  5037  068A  0084               	movwf	4
  5038  068B  082F               	movf	SetDefaultTimers@i,w
  5039  068C  00AC               	movwf	??_SetDefaultTimers+1
  5040  068D  072C               	addwf	??_SetDefaultTimers+1,w
  5041  068E  1383               	bcf	3,7	;select IRP bank0
  5042  068F  0700               	addwf	0,w
  5043  0690  00AD               	movwf	??_SetDefaultTimers+2
  5044  0691  082D               	movf	??_SetDefaultTimers+2,w
  5045  0692  0084               	movwf	4
  5046  0693  0826               	movf	SetDefaultTimers@verde,w
  5047  0694  0080               	movwf	0
  5048  0695  0A84               	incf	4,f
  5049  0696  0827               	movf	SetDefaultTimers@verde+1,w
  5050  0697  0080               	movwf	0
  5051                           
  5052                           ;./CustomLib/TrafficLight.h: 70:                 (*(_semafori)[l]).new_times[i] = verde;
  5053  0698  082E               	movf	SetDefaultTimers@l,w
  5054  0699  072A               	addwf	SetDefaultTimers@_semafori,w
  5055  069A  00AB               	movwf	??_SetDefaultTimers
  5056  069B  082B               	movf	??_SetDefaultTimers,w
  5057  069C  0084               	movwf	4
  5058  069D  082F               	movf	SetDefaultTimers@i,w
  5059  069E  00AC               	movwf	??_SetDefaultTimers+1
  5060  069F  072C               	addwf	??_SetDefaultTimers+1,w
  5061  06A0  0700               	addwf	0,w
  5062  06A1  00AD               	movwf	??_SetDefaultTimers+2
  5063  06A2  082D               	movf	??_SetDefaultTimers+2,w
  5064  06A3  3E06               	addlw	6
  5065  06A4  0084               	movwf	4
  5066  06A5  0826               	movf	SetDefaultTimers@verde,w
  5067  06A6  0080               	movwf	0
  5068  06A7  0A84               	incf	4,f
  5069  06A8  0827               	movf	SetDefaultTimers@verde+1,w
  5070  06A9  0080               	movwf	0
  5071                           
  5072                           ;./CustomLib/TrafficLight.h: 71:                 break;
  5073  06AA  2EE3               	goto	l3330
  5074  06AB                     l3324:	
  5075                           
  5076                           ;./CustomLib/TrafficLight.h: 73:                 (*(_semafori)[l]).times[i] = giallo;
  5077  06AB  082E               	movf	SetDefaultTimers@l,w
  5078  06AC  072A               	addwf	SetDefaultTimers@_semafori,w
  5079  06AD  00AB               	movwf	??_SetDefaultTimers
  5080  06AE  082B               	movf	??_SetDefaultTimers,w
  5081  06AF  0084               	movwf	4
  5082  06B0  082F               	movf	SetDefaultTimers@i,w
  5083  06B1  00AC               	movwf	??_SetDefaultTimers+1
  5084  06B2  072C               	addwf	??_SetDefaultTimers+1,w
  5085  06B3  1383               	bcf	3,7	;select IRP bank0
  5086  06B4  0700               	addwf	0,w
  5087  06B5  00AD               	movwf	??_SetDefaultTimers+2
  5088  06B6  082D               	movf	??_SetDefaultTimers+2,w
  5089  06B7  0084               	movwf	4
  5090  06B8  0828               	movf	SetDefaultTimers@giallo,w
  5091  06B9  0080               	movwf	0
  5092  06BA  0A84               	incf	4,f
  5093  06BB  0829               	movf	SetDefaultTimers@giallo+1,w
  5094  06BC  0080               	movwf	0
  5095                           
  5096                           ;./CustomLib/TrafficLight.h: 74:                 (*(_semafori)[l]).new_times[i] = giallo
      +                          ;
  5097  06BD  082E               	movf	SetDefaultTimers@l,w
  5098  06BE  072A               	addwf	SetDefaultTimers@_semafori,w
  5099  06BF  00AB               	movwf	??_SetDefaultTimers
  5100  06C0  082B               	movf	??_SetDefaultTimers,w
  5101  06C1  0084               	movwf	4
  5102  06C2  082F               	movf	SetDefaultTimers@i,w
  5103  06C3  00AC               	movwf	??_SetDefaultTimers+1
  5104  06C4  072C               	addwf	??_SetDefaultTimers+1,w
  5105  06C5  0700               	addwf	0,w
  5106  06C6  00AD               	movwf	??_SetDefaultTimers+2
  5107  06C7  082D               	movf	??_SetDefaultTimers+2,w
  5108  06C8  3E06               	addlw	6
  5109  06C9  0084               	movwf	4
  5110  06CA  0828               	movf	SetDefaultTimers@giallo,w
  5111  06CB  0080               	movwf	0
  5112  06CC  0A84               	incf	4,f
  5113  06CD  0829               	movf	SetDefaultTimers@giallo+1,w
  5114  06CE  0080               	movwf	0
  5115                           
  5116                           ;./CustomLib/TrafficLight.h: 75:                 break;
  5117  06CF  2EE3               	goto	l3330
  5118  06D0                     l3328:	
  5119  06D0  082F               	movf	SetDefaultTimers@i,w
  5120  06D1  00AB               	movwf	??_SetDefaultTimers
  5121  06D2  01AC               	clrf	??_SetDefaultTimers+1
  5122                           
  5123                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5124                           ; Switch size 1, requested type "simple"
  5125                           ; Number of cases is 1, Range of values is 0 to 0
  5126                           ; switch strategies available:
  5127                           ; Name         Instructions Cycles
  5128                           ; simple_byte            4     3 (average)
  5129                           ; direct_byte           11     8 (fixed)
  5130                           ; jumptable            260     6 (fixed)
  5131                           ;	Chosen strategy is simple_byte
  5132  06D3  082C               	movf	??_SetDefaultTimers+1,w
  5133  06D4  3A00               	xorlw	0	; case 0
  5134  06D5  1903               	skipnz
  5135  06D6  2ED8               	goto	l3940
  5136  06D7  2EE3               	goto	l3330
  5137  06D8                     l3940:	
  5138                           
  5139                           ; Switch size 1, requested type "simple"
  5140                           ; Number of cases is 3, Range of values is 0 to 2
  5141                           ; switch strategies available:
  5142                           ; Name         Instructions Cycles
  5143                           ; simple_byte           10     6 (average)
  5144                           ; direct_byte           17     8 (fixed)
  5145                           ; jumptable            260     6 (fixed)
  5146                           ;	Chosen strategy is simple_byte
  5147  06D8  082B               	movf	??_SetDefaultTimers,w
  5148  06D9  3A00               	xorlw	0	; case 0
  5149  06DA  1903               	skipnz
  5150  06DB  2E61               	goto	l3320
  5151  06DC  3A01               	xorlw	1	; case 1
  5152  06DD  1903               	skipnz
  5153  06DE  2E86               	goto	l3322
  5154  06DF  3A03               	xorlw	3	; case 2
  5155  06E0  1903               	skipnz
  5156  06E1  2EAB               	goto	l3324
  5157  06E2  2EE3               	goto	l3330
  5158  06E3                     l3330:	
  5159                           
  5160                           ;./CustomLib/TrafficLight.h: 77:         }
  5161  06E3  3001               	movlw	1
  5162  06E4  00AB               	movwf	??_SetDefaultTimers
  5163  06E5  082B               	movf	??_SetDefaultTimers,w
  5164  06E6  07AF               	addwf	SetDefaultTimers@i,f
  5165  06E7                     l3332:	
  5166  06E7  3003               	movlw	3
  5167  06E8  022F               	subwf	SetDefaultTimers@i,w
  5168  06E9  1C03               	skipc
  5169  06EA  2EEC               	goto	u2811
  5170  06EB  2EED               	goto	u2810
  5171  06EC                     u2811:	
  5172  06EC  2ED0               	goto	l3328
  5173  06ED                     u2810:	
  5174  06ED                     l3334:	
  5175                           
  5176                           ;./CustomLib/TrafficLight.h: 78:     }
  5177  06ED  3001               	movlw	1
  5178  06EE  00AB               	movwf	??_SetDefaultTimers
  5179  06EF  082B               	movf	??_SetDefaultTimers,w
  5180  06F0  07AE               	addwf	SetDefaultTimers@l,f
  5181  06F1                     l3336:	
  5182  06F1  3002               	movlw	2
  5183  06F2  022E               	subwf	SetDefaultTimers@l,w
  5184  06F3  1C03               	skipc
  5185  06F4  2EF6               	goto	u2821
  5186  06F5  2EF7               	goto	u2820
  5187  06F6                     u2821:	
  5188  06F6  2E5F               	goto	l3314
  5189  06F7                     u2820:	
  5190  06F7                     l3338:	
  5191                           
  5192                           ;./CustomLib/TrafficLight.h: 80:     (*(_semafori)[0]).lux_select = 0;
  5193  06F7  082A               	movf	SetDefaultTimers@_semafori,w
  5194  06F8  0084               	movwf	4
  5195  06F9  1383               	bcf	3,7	;select IRP bank0
  5196  06FA  0800               	movf	0,w
  5197  06FB  3E0C               	addlw	12
  5198  06FC  0084               	movwf	4
  5199  06FD  0180               	clrf	0
  5200                           
  5201                           ;./CustomLib/TrafficLight.h: 81:     (*(_semafori)[0]).new_lux_select = 0;
  5202  06FE  082A               	movf	SetDefaultTimers@_semafori,w
  5203  06FF  0084               	movwf	4
  5204  0700  0800               	movf	0,w
  5205  0701  3E0D               	addlw	13
  5206  0702  0084               	movwf	4
  5207  0703  0180               	clrf	0
  5208                           
  5209                           ;./CustomLib/TrafficLight.h: 82:     (*(_semafori)[1]).lux_select = 1;
  5210  0704  0A2A               	incf	SetDefaultTimers@_semafori,w
  5211  0705  0084               	movwf	4
  5212  0706  0800               	movf	0,w
  5213  0707  3E0C               	addlw	12
  5214  0708  0084               	movwf	4
  5215  0709  0180               	clrf	0
  5216  070A  0A80               	incf	0,f
  5217                           
  5218                           ;./CustomLib/TrafficLight.h: 83:     (*(_semafori)[1]).new_lux_select = 1;
  5219  070B  0A2A               	incf	SetDefaultTimers@_semafori,w
  5220  070C  0084               	movwf	4
  5221  070D  0800               	movf	0,w
  5222  070E  3E0D               	addlw	13
  5223  070F  0084               	movwf	4
  5224  0710  0180               	clrf	0
  5225  0711  0A80               	incf	0,f
  5226  0712                     l149:	
  5227  0712  0008               	return
  5228  0713                     __end_of_SetDefaultTimers:	
  5229                           
  5230                           	psect	text18
  5231  04C7                     __ptext18:	
  5232 ;; *************** function _GetDigits *****************
  5233 ;; Defined at:
  5234 ;;		line 98 in file "./CustomLib/TrafficLight.h"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  _digits         1    wreg     PTR PTR struct .
  5237 ;;		 -> DigitsArr(2), 
  5238 ;;  index           1   40[BANK0 ] unsigned char 
  5239 ;;  Time            2   41[BANK0 ] int 
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;  _digits         1   48[BANK0 ] PTR PTR struct .
  5242 ;;		 -> DigitsArr(2), 
  5243 ;; Return value:  Size  Location     Type
  5244 ;;                  1    wreg      void 
  5245 ;; Registers used:
  5246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5247 ;; Tracked objects:
  5248 ;;		On entry : 0/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5252 ;;      Params:         0       3       0       0       0
  5253 ;;      Locals:         0       3       0       0       0
  5254 ;;      Temps:          0       3       0       0       0
  5255 ;;      Totals:         0       9       0       0       0
  5256 ;;Total ram usage:        9 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    4
  5259 ;; This function calls:
  5260 ;;		___awdiv
  5261 ;;		___awmod
  5262 ;;		___bmul
  5263 ;; This function is called by:
  5264 ;;		_main
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           
  5269                           ;psect for function _GetDigits
  5270  04C7                     _GetDigits:	
  5271                           
  5272                           ;incstack = 0
  5273                           ; Regs used in _GetDigits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5274                           ;GetDigits@_digits stored from wreg
  5275  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  5276  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  5277  04C9  00D0               	movwf	GetDigits@_digits
  5278  04CA                     l3362:	
  5279                           
  5280                           ;./CustomLib/TrafficLight.h: 98: void GetDigits(_Digits _digits, unsigned char index, in
      +                          t Time);./CustomLib/TrafficLight.h: 99: {;./CustomLib/TrafficLight.h: 100:     while (Ti
      +                          me / 1000 > 0)
  5281  04CA  2CE0               	goto	l3366
  5282  04CB                     l3364:	
  5283                           
  5284                           ;./CustomLib/TrafficLight.h: 101:     {;./CustomLib/TrafficLight.h: 102:         Time = 
      +                          Time / 10;
  5285  04CB  300A               	movlw	10
  5286  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  5287  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  5288  04CE  00BF               	movwf	___awdiv@divisor
  5289  04CF  3000               	movlw	0
  5290  04D0  00C0               	movwf	___awdiv@divisor+1
  5291  04D1  084A               	movf	GetDigits@Time+1,w
  5292  04D2  00C2               	movwf	___awdiv@dividend+1
  5293  04D3  0849               	movf	GetDigits@Time,w
  5294  04D4  00C1               	movwf	___awdiv@dividend
  5295  04D5  120A  158A  261E  120A  118A  	fcall	___awdiv
  5296  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  5297  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  5298  04DC  0840               	movf	?___awdiv+1,w
  5299  04DD  00CA               	movwf	GetDigits@Time+1
  5300  04DE  083F               	movf	?___awdiv,w
  5301  04DF  00C9               	movwf	GetDigits@Time
  5302  04E0                     l3366:	
  5303                           
  5304                           ;./CustomLib/TrafficLight.h: 100:     while (Time / 1000 > 0)
  5305  04E0  30E8               	movlw	232
  5306  04E1  00BF               	movwf	___awdiv@divisor
  5307  04E2  3003               	movlw	3
  5308  04E3  00C0               	movwf	___awdiv@divisor+1
  5309  04E4  084A               	movf	GetDigits@Time+1,w
  5310  04E5  00C2               	movwf	___awdiv@dividend+1
  5311  04E6  0849               	movf	GetDigits@Time,w
  5312  04E7  00C1               	movwf	___awdiv@dividend
  5313  04E8  120A  158A  261E  120A  118A  	fcall	___awdiv
  5314  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  5315  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  5316  04EF  0840               	movf	?___awdiv+1,w
  5317  04F0  3A80               	xorlw	128
  5318  04F1  00FF               	movwf	btemp+1
  5319  04F2  3080               	movlw	128
  5320  04F3  027F               	subwf	btemp+1,w
  5321  04F4  1D03               	skipz
  5322  04F5  2CF8               	goto	u2855
  5323  04F6  3001               	movlw	1
  5324  04F7  023F               	subwf	?___awdiv,w
  5325  04F8                     u2855:	
  5326  04F8  1803               	skipnc
  5327  04F9  2CFB               	goto	u2851
  5328  04FA  2CFC               	goto	u2850
  5329  04FB                     u2851:	
  5330  04FB  2CCB               	goto	l3364
  5331  04FC                     u2850:	
  5332  04FC                     l3368:	
  5333                           
  5334                           ;./CustomLib/TrafficLight.h: 105:     (*_digits)[index].centinaia = Time / 100;
  5335  04FC  3064               	movlw	100
  5336  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  5337  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  5338  04FF  00BF               	movwf	___awdiv@divisor
  5339  0500  3000               	movlw	0
  5340  0501  00C0               	movwf	___awdiv@divisor+1
  5341  0502  084A               	movf	GetDigits@Time+1,w
  5342  0503  00C2               	movwf	___awdiv@dividend+1
  5343  0504  0849               	movf	GetDigits@Time,w
  5344  0505  00C1               	movwf	___awdiv@dividend
  5345  0506  120A  158A  261E  120A  118A  	fcall	___awdiv
  5346  050B  1283               	bcf	3,5	;RP0=0, select bank0
  5347  050C  1303               	bcf	3,6	;RP1=0, select bank0
  5348  050D  083F               	movf	?___awdiv,w
  5349  050E  00CB               	movwf	??_GetDigits
  5350  050F  0850               	movf	GetDigits@_digits,w
  5351  0510  0084               	movwf	4
  5352  0511  3003               	movlw	3
  5353  0512  00CC               	movwf	??_GetDigits+1
  5354  0513  084C               	movf	??_GetDigits+1,w
  5355  0514  00A4               	movwf	___bmul@multiplicand
  5356  0515  0848               	movf	GetDigits@index,w
  5357  0516  120A  158A  2251  120A  118A  	fcall	___bmul
  5358  051B  1383               	bcf	3,7	;select IRP bank0
  5359  051C  0700               	addwf	0,w
  5360  051D  1283               	bcf	3,5	;RP0=0, select bank0
  5361  051E  1303               	bcf	3,6	;RP1=0, select bank0
  5362  051F  00CD               	movwf	??_GetDigits+2
  5363  0520  084D               	movf	??_GetDigits+2,w
  5364  0521  0084               	movwf	4
  5365  0522  084B               	movf	??_GetDigits,w
  5366  0523  0080               	movwf	0
  5367                           
  5368                           ;./CustomLib/TrafficLight.h: 106:     (*_digits)[index].decine = (Time % 100) / 10;
  5369  0524  300A               	movlw	10
  5370  0525  00BF               	movwf	___awdiv@divisor
  5371  0526  3000               	movlw	0
  5372  0527  00C0               	movwf	___awdiv@divisor+1
  5373  0528  084A               	movf	GetDigits@Time+1,w
  5374  0529  00BB               	movwf	___awmod@dividend+1
  5375  052A  0849               	movf	GetDigits@Time,w
  5376  052B  00BA               	movwf	___awmod@dividend
  5377  052C  3064               	movlw	100
  5378  052D  00B8               	movwf	___awmod@divisor
  5379  052E  3000               	movlw	0
  5380  052F  00B9               	movwf	___awmod@divisor+1
  5381  0530  120A  158A  249D  120A  118A  	fcall	___awmod
  5382  0535  1283               	bcf	3,5	;RP0=0, select bank0
  5383  0536  1303               	bcf	3,6	;RP1=0, select bank0
  5384  0537  0839               	movf	?___awmod+1,w
  5385  0538  00C2               	movwf	___awdiv@dividend+1
  5386  0539  0838               	movf	?___awmod,w
  5387  053A  00C1               	movwf	___awdiv@dividend
  5388  053B  120A  158A  261E  120A  118A  	fcall	___awdiv
  5389  0540  1283               	bcf	3,5	;RP0=0, select bank0
  5390  0541  1303               	bcf	3,6	;RP1=0, select bank0
  5391  0542  083F               	movf	?___awdiv,w
  5392  0543  00CB               	movwf	??_GetDigits
  5393  0544  0850               	movf	GetDigits@_digits,w
  5394  0545  0084               	movwf	4
  5395  0546  3003               	movlw	3
  5396  0547  00CC               	movwf	??_GetDigits+1
  5397  0548  084C               	movf	??_GetDigits+1,w
  5398  0549  00A4               	movwf	___bmul@multiplicand
  5399  054A  0848               	movf	GetDigits@index,w
  5400  054B  120A  158A  2251  120A  118A  	fcall	___bmul
  5401  0550  1383               	bcf	3,7	;select IRP bank0
  5402  0551  0700               	addwf	0,w
  5403  0552  1283               	bcf	3,5	;RP0=0, select bank0
  5404  0553  1303               	bcf	3,6	;RP1=0, select bank0
  5405  0554  00CD               	movwf	??_GetDigits+2
  5406  0555  0A4D               	incf	??_GetDigits+2,w
  5407  0556  0084               	movwf	4
  5408  0557  084B               	movf	??_GetDigits,w
  5409  0558  0080               	movwf	0
  5410  0559                     l3370:	
  5411                           
  5412                           ;./CustomLib/TrafficLight.h: 107:     (*_digits)[index].unita = (Time % 100) % 10;
  5413  0559  084A               	movf	GetDigits@Time+1,w
  5414  055A  00BB               	movwf	___awmod@dividend+1
  5415  055B  0849               	movf	GetDigits@Time,w
  5416  055C  00BA               	movwf	___awmod@dividend
  5417  055D  3064               	movlw	100
  5418  055E  00B8               	movwf	___awmod@divisor
  5419  055F  3000               	movlw	0
  5420  0560  00B9               	movwf	___awmod@divisor+1
  5421  0561  120A  158A  249D  120A  118A  	fcall	___awmod
  5422  0566  1283               	bcf	3,5	;RP0=0, select bank0
  5423  0567  1303               	bcf	3,6	;RP1=0, select bank0
  5424  0568  0839               	movf	?___awmod+1,w
  5425  0569  00CF               	movwf	_GetDigits$1203+1
  5426  056A  0838               	movf	?___awmod,w
  5427  056B  00CE               	movwf	_GetDigits$1203
  5428  056C                     l3372:	
  5429                           
  5430                           ;./CustomLib/TrafficLight.h: 107:     (*_digits)[index].unita = (Time % 100) % 10;
  5431  056C  300A               	movlw	10
  5432  056D  00B8               	movwf	___awmod@divisor
  5433  056E  3000               	movlw	0
  5434  056F  00B9               	movwf	___awmod@divisor+1
  5435  0570  084F               	movf	_GetDigits$1203+1,w
  5436  0571  00BB               	movwf	___awmod@dividend+1
  5437  0572  084E               	movf	_GetDigits$1203,w
  5438  0573  00BA               	movwf	___awmod@dividend
  5439  0574  120A  158A  249D  120A  118A  	fcall	___awmod
  5440  0579  1283               	bcf	3,5	;RP0=0, select bank0
  5441  057A  1303               	bcf	3,6	;RP1=0, select bank0
  5442  057B  0838               	movf	?___awmod,w
  5443  057C  00CB               	movwf	??_GetDigits
  5444  057D  0850               	movf	GetDigits@_digits,w
  5445  057E  0084               	movwf	4
  5446  057F  3003               	movlw	3
  5447  0580  00CC               	movwf	??_GetDigits+1
  5448  0581  084C               	movf	??_GetDigits+1,w
  5449  0582  00A4               	movwf	___bmul@multiplicand
  5450  0583  0848               	movf	GetDigits@index,w
  5451  0584  120A  158A  2251  120A  118A  	fcall	___bmul
  5452  0589  1383               	bcf	3,7	;select IRP bank0
  5453  058A  0700               	addwf	0,w
  5454  058B  1283               	bcf	3,5	;RP0=0, select bank0
  5455  058C  1303               	bcf	3,6	;RP1=0, select bank0
  5456  058D  00CD               	movwf	??_GetDigits+2
  5457  058E  084D               	movf	??_GetDigits+2,w
  5458  058F  3E02               	addlw	2
  5459  0590  0084               	movwf	4
  5460  0591  084B               	movf	??_GetDigits,w
  5461  0592  0080               	movwf	0
  5462  0593                     l160:	
  5463  0593  0008               	return
  5464  0594                     __end_of_GetDigits:	
  5465                           
  5466                           	psect	text19
  5467  0A51                     __ptext19:	
  5468 ;; *************** function ___bmul *****************
  5469 ;; Defined at:
  5470 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  multiplier      1    wreg     unsigned char 
  5473 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;  multiplier      1    7[BANK0 ] unsigned char 
  5476 ;;  product         1    6[BANK0 ] unsigned char 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  1    wreg      unsigned char 
  5479 ;; Registers used:
  5480 ;;		wreg, status,2, status,0
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5486 ;;      Params:         0       1       0       0       0
  5487 ;;      Locals:         0       2       0       0       0
  5488 ;;      Temps:          0       1       0       0       0
  5489 ;;      Totals:         0       4       0       0       0
  5490 ;;Total ram usage:        4 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    3
  5493 ;; This function calls:
  5494 ;;		Nothing
  5495 ;; This function is called by:
  5496 ;;		_SetReceivedTimes
  5497 ;;		_GetDigits
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           
  5502                           ;psect for function ___bmul
  5503  0A51                     ___bmul:	
  5504                           
  5505                           ;incstack = 0
  5506                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5507                           ;___bmul@multiplier stored from wreg
  5508  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  5509  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  5510  0A53  00A7               	movwf	___bmul@multiplier
  5511  0A54                     l3146:	
  5512  0A54  01A6               	clrf	___bmul@product
  5513  0A55                     l3148:	
  5514  0A55  1C27               	btfss	___bmul@multiplier,0
  5515  0A56  2A58               	goto	u2471
  5516  0A57  2A59               	goto	u2470
  5517  0A58                     u2471:	
  5518  0A58  2A5D               	goto	l3152
  5519  0A59                     u2470:	
  5520  0A59                     l3150:	
  5521  0A59  0824               	movf	___bmul@multiplicand,w
  5522  0A5A  00A5               	movwf	??___bmul
  5523  0A5B  0825               	movf	??___bmul,w
  5524  0A5C  07A6               	addwf	___bmul@product,f
  5525  0A5D                     l3152:	
  5526  0A5D  1003               	clrc
  5527  0A5E  0DA4               	rlf	___bmul@multiplicand,f
  5528  0A5F                     l3154:	
  5529  0A5F  1003               	clrc
  5530  0A60  0CA7               	rrf	___bmul@multiplier,f
  5531  0A61  0827               	movf	___bmul@multiplier,w
  5532  0A62  1D03               	btfss	3,2
  5533  0A63  2A65               	goto	u2481
  5534  0A64  2A66               	goto	u2480
  5535  0A65                     u2481:	
  5536  0A65  2A55               	goto	l3148
  5537  0A66                     u2480:	
  5538  0A66                     l3156:	
  5539  0A66  0826               	movf	___bmul@product,w
  5540  0A67                     l462:	
  5541  0A67  0008               	return
  5542  0A68                     __end_of___bmul:	
  5543                           
  5544                           	psect	text20
  5545  0C9D                     __ptext20:	
  5546 ;; *************** function ___awmod *****************
  5547 ;; Defined at:
  5548 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  divisor         2   24[BANK0 ] int 
  5551 ;;  dividend        2   26[BANK0 ] int 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  sign            1   30[BANK0 ] unsigned char 
  5554 ;;  counter         1   29[BANK0 ] unsigned char 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  2   24[BANK0 ] int 
  5557 ;; Registers used:
  5558 ;;		wreg, status,2, status,0
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5564 ;;      Params:         0       4       0       0       0
  5565 ;;      Locals:         0       2       0       0       0
  5566 ;;      Temps:          0       1       0       0       0
  5567 ;;      Totals:         0       7       0       0       0
  5568 ;;Total ram usage:        7 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    3
  5571 ;; This function calls:
  5572 ;;		Nothing
  5573 ;; This function is called by:
  5574 ;;		_GetDigits
  5575 ;;		_main
  5576 ;;		_ShowDigitsOnDisplay
  5577 ;;		_ChangeTrafficLight
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function ___awmod
  5583  0C9D                     ___awmod:	
  5584  0C9D                     l3244:	
  5585                           ;incstack = 0
  5586                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5587                           
  5588  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  5589  0C9E  1303               	bcf	3,6	;RP1=0, select bank0
  5590  0C9F  01BE               	clrf	___awmod@sign
  5591  0CA0                     l3246:	
  5592  0CA0  1FBB               	btfss	___awmod@dividend+1,7
  5593  0CA1  2CA3               	goto	u2691
  5594  0CA2  2CA4               	goto	u2690
  5595  0CA3                     u2691:	
  5596  0CA3  2CAB               	goto	l3252
  5597  0CA4                     u2690:	
  5598  0CA4                     l3248:	
  5599  0CA4  09BA               	comf	___awmod@dividend,f
  5600  0CA5  09BB               	comf	___awmod@dividend+1,f
  5601  0CA6  0ABA               	incf	___awmod@dividend,f
  5602  0CA7  1903               	skipnz
  5603  0CA8  0ABB               	incf	___awmod@dividend+1,f
  5604  0CA9                     l3250:	
  5605  0CA9  01BE               	clrf	___awmod@sign
  5606  0CAA  0ABE               	incf	___awmod@sign,f
  5607  0CAB                     l3252:	
  5608  0CAB  1FB9               	btfss	___awmod@divisor+1,7
  5609  0CAC  2CAE               	goto	u2701
  5610  0CAD  2CAF               	goto	u2700
  5611  0CAE                     u2701:	
  5612  0CAE  2CB4               	goto	l3256
  5613  0CAF                     u2700:	
  5614  0CAF                     l3254:	
  5615  0CAF  09B8               	comf	___awmod@divisor,f
  5616  0CB0  09B9               	comf	___awmod@divisor+1,f
  5617  0CB1  0AB8               	incf	___awmod@divisor,f
  5618  0CB2  1903               	skipnz
  5619  0CB3  0AB9               	incf	___awmod@divisor+1,f
  5620  0CB4                     l3256:	
  5621  0CB4  0838               	movf	___awmod@divisor,w
  5622  0CB5  0439               	iorwf	___awmod@divisor+1,w
  5623  0CB6  1903               	btfsc	3,2
  5624  0CB7  2CB9               	goto	u2711
  5625  0CB8  2CBA               	goto	u2710
  5626  0CB9                     u2711:	
  5627  0CB9  2CE9               	goto	l3274
  5628  0CBA                     u2710:	
  5629  0CBA                     l3258:	
  5630  0CBA  01BD               	clrf	___awmod@counter
  5631  0CBB  0ABD               	incf	___awmod@counter,f
  5632  0CBC  2CC8               	goto	l3264
  5633  0CBD                     l3260:	
  5634  0CBD  3001               	movlw	1
  5635  0CBE                     u2725:	
  5636  0CBE  1003               	clrc
  5637  0CBF  0DB8               	rlf	___awmod@divisor,f
  5638  0CC0  0DB9               	rlf	___awmod@divisor+1,f
  5639  0CC1  3EFF               	addlw	-1
  5640  0CC2  1D03               	skipz
  5641  0CC3  2CBE               	goto	u2725
  5642  0CC4                     l3262:	
  5643  0CC4  3001               	movlw	1
  5644  0CC5  00BC               	movwf	??___awmod
  5645  0CC6  083C               	movf	??___awmod,w
  5646  0CC7  07BD               	addwf	___awmod@counter,f
  5647  0CC8                     l3264:	
  5648  0CC8  1FB9               	btfss	___awmod@divisor+1,7
  5649  0CC9  2CCB               	goto	u2731
  5650  0CCA  2CCC               	goto	u2730
  5651  0CCB                     u2731:	
  5652  0CCB  2CBD               	goto	l3260
  5653  0CCC                     u2730:	
  5654  0CCC                     l3266:	
  5655  0CCC  0839               	movf	___awmod@divisor+1,w
  5656  0CCD  023B               	subwf	___awmod@dividend+1,w
  5657  0CCE  1D03               	skipz
  5658  0CCF  2CD2               	goto	u2745
  5659  0CD0  0838               	movf	___awmod@divisor,w
  5660  0CD1  023A               	subwf	___awmod@dividend,w
  5661  0CD2                     u2745:	
  5662  0CD2  1C03               	skipc
  5663  0CD3  2CD5               	goto	u2741
  5664  0CD4  2CD6               	goto	u2740
  5665  0CD5                     u2741:	
  5666  0CD5  2CDC               	goto	l3270
  5667  0CD6                     u2740:	
  5668  0CD6                     l3268:	
  5669  0CD6  0838               	movf	___awmod@divisor,w
  5670  0CD7  02BA               	subwf	___awmod@dividend,f
  5671  0CD8  0839               	movf	___awmod@divisor+1,w
  5672  0CD9  1C03               	skipc
  5673  0CDA  03BB               	decf	___awmod@dividend+1,f
  5674  0CDB  02BB               	subwf	___awmod@dividend+1,f
  5675  0CDC                     l3270:	
  5676  0CDC  3001               	movlw	1
  5677  0CDD                     u2755:	
  5678  0CDD  1003               	clrc
  5679  0CDE  0CB9               	rrf	___awmod@divisor+1,f
  5680  0CDF  0CB8               	rrf	___awmod@divisor,f
  5681  0CE0  3EFF               	addlw	-1
  5682  0CE1  1D03               	skipz
  5683  0CE2  2CDD               	goto	u2755
  5684  0CE3                     l3272:	
  5685  0CE3  3001               	movlw	1
  5686  0CE4  02BD               	subwf	___awmod@counter,f
  5687  0CE5  1D03               	btfss	3,2
  5688  0CE6  2CE8               	goto	u2761
  5689  0CE7  2CE9               	goto	u2760
  5690  0CE8                     u2761:	
  5691  0CE8  2CCC               	goto	l3266
  5692  0CE9                     u2760:	
  5693  0CE9                     l3274:	
  5694  0CE9  083E               	movf	___awmod@sign,w
  5695  0CEA  1903               	btfsc	3,2
  5696  0CEB  2CED               	goto	u2771
  5697  0CEC  2CEE               	goto	u2770
  5698  0CED                     u2771:	
  5699  0CED  2CF3               	goto	l3278
  5700  0CEE                     u2770:	
  5701  0CEE                     l3276:	
  5702  0CEE  09BA               	comf	___awmod@dividend,f
  5703  0CEF  09BB               	comf	___awmod@dividend+1,f
  5704  0CF0  0ABA               	incf	___awmod@dividend,f
  5705  0CF1  1903               	skipnz
  5706  0CF2  0ABB               	incf	___awmod@dividend+1,f
  5707  0CF3                     l3278:	
  5708  0CF3  083B               	movf	___awmod@dividend+1,w
  5709  0CF4  00B9               	movwf	?___awmod+1
  5710  0CF5  083A               	movf	___awmod@dividend,w
  5711  0CF6  00B8               	movwf	?___awmod
  5712  0CF7                     l602:	
  5713  0CF7  0008               	return
  5714  0CF8                     __end_of___awmod:	
  5715                           
  5716                           	psect	text21
  5717  0E1E                     __ptext21:	
  5718 ;; *************** function ___awdiv *****************
  5719 ;; Defined at:
  5720 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;  divisor         2   31[BANK0 ] int 
  5723 ;;  dividend        2   33[BANK0 ] int 
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  quotient        2   38[BANK0 ] int 
  5726 ;;  sign            1   37[BANK0 ] unsigned char 
  5727 ;;  counter         1   36[BANK0 ] unsigned char 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  2   31[BANK0 ] int 
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5737 ;;      Params:         0       4       0       0       0
  5738 ;;      Locals:         0       4       0       0       0
  5739 ;;      Temps:          0       1       0       0       0
  5740 ;;      Totals:         0       9       0       0       0
  5741 ;;Total ram usage:        9 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    3
  5744 ;; This function calls:
  5745 ;;		Nothing
  5746 ;; This function is called by:
  5747 ;;		_GetDigits
  5748 ;;		_map
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           
  5753                           ;psect for function ___awdiv
  5754  0E1E                     ___awdiv:	
  5755  0E1E                     l3200:	
  5756                           ;incstack = 0
  5757                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5758                           
  5759  0E1E  1283               	bcf	3,5	;RP0=0, select bank0
  5760  0E1F  1303               	bcf	3,6	;RP1=0, select bank0
  5761  0E20  01C5               	clrf	___awdiv@sign
  5762  0E21                     l3202:	
  5763  0E21  1FC0               	btfss	___awdiv@divisor+1,7
  5764  0E22  2E24               	goto	u2591
  5765  0E23  2E25               	goto	u2590
  5766  0E24                     u2591:	
  5767  0E24  2E2C               	goto	l3208
  5768  0E25                     u2590:	
  5769  0E25                     l3204:	
  5770  0E25  09BF               	comf	___awdiv@divisor,f
  5771  0E26  09C0               	comf	___awdiv@divisor+1,f
  5772  0E27  0ABF               	incf	___awdiv@divisor,f
  5773  0E28  1903               	skipnz
  5774  0E29  0AC0               	incf	___awdiv@divisor+1,f
  5775  0E2A                     l3206:	
  5776  0E2A  01C5               	clrf	___awdiv@sign
  5777  0E2B  0AC5               	incf	___awdiv@sign,f
  5778  0E2C                     l3208:	
  5779  0E2C  1FC2               	btfss	___awdiv@dividend+1,7
  5780  0E2D  2E2F               	goto	u2601
  5781  0E2E  2E30               	goto	u2600
  5782  0E2F                     u2601:	
  5783  0E2F  2E39               	goto	l3214
  5784  0E30                     u2600:	
  5785  0E30                     l3210:	
  5786  0E30  09C1               	comf	___awdiv@dividend,f
  5787  0E31  09C2               	comf	___awdiv@dividend+1,f
  5788  0E32  0AC1               	incf	___awdiv@dividend,f
  5789  0E33  1903               	skipnz
  5790  0E34  0AC2               	incf	___awdiv@dividend+1,f
  5791  0E35                     l3212:	
  5792  0E35  3001               	movlw	1
  5793  0E36  00C3               	movwf	??___awdiv
  5794  0E37  0843               	movf	??___awdiv,w
  5795  0E38  06C5               	xorwf	___awdiv@sign,f
  5796  0E39                     l3214:	
  5797  0E39  01C6               	clrf	___awdiv@quotient
  5798  0E3A  01C7               	clrf	___awdiv@quotient+1
  5799  0E3B                     l3216:	
  5800  0E3B  083F               	movf	___awdiv@divisor,w
  5801  0E3C  0440               	iorwf	___awdiv@divisor+1,w
  5802  0E3D  1903               	btfsc	3,2
  5803  0E3E  2E40               	goto	u2611
  5804  0E3F  2E41               	goto	u2610
  5805  0E40                     u2611:	
  5806  0E40  2E78               	goto	l3236
  5807  0E41                     u2610:	
  5808  0E41                     l3218:	
  5809  0E41  01C4               	clrf	___awdiv@counter
  5810  0E42  0AC4               	incf	___awdiv@counter,f
  5811  0E43  2E4F               	goto	l3224
  5812  0E44                     l3220:	
  5813  0E44  3001               	movlw	1
  5814  0E45                     u2625:	
  5815  0E45  1003               	clrc
  5816  0E46  0DBF               	rlf	___awdiv@divisor,f
  5817  0E47  0DC0               	rlf	___awdiv@divisor+1,f
  5818  0E48  3EFF               	addlw	-1
  5819  0E49  1D03               	skipz
  5820  0E4A  2E45               	goto	u2625
  5821  0E4B                     l3222:	
  5822  0E4B  3001               	movlw	1
  5823  0E4C  00C3               	movwf	??___awdiv
  5824  0E4D  0843               	movf	??___awdiv,w
  5825  0E4E  07C4               	addwf	___awdiv@counter,f
  5826  0E4F                     l3224:	
  5827  0E4F  1FC0               	btfss	___awdiv@divisor+1,7
  5828  0E50  2E52               	goto	u2631
  5829  0E51  2E53               	goto	u2630
  5830  0E52                     u2631:	
  5831  0E52  2E44               	goto	l3220
  5832  0E53                     u2630:	
  5833  0E53                     l3226:	
  5834  0E53  3001               	movlw	1
  5835  0E54                     u2645:	
  5836  0E54  1003               	clrc
  5837  0E55  0DC6               	rlf	___awdiv@quotient,f
  5838  0E56  0DC7               	rlf	___awdiv@quotient+1,f
  5839  0E57  3EFF               	addlw	-1
  5840  0E58  1D03               	skipz
  5841  0E59  2E54               	goto	u2645
  5842  0E5A  0840               	movf	___awdiv@divisor+1,w
  5843  0E5B  0242               	subwf	___awdiv@dividend+1,w
  5844  0E5C  1D03               	skipz
  5845  0E5D  2E60               	goto	u2655
  5846  0E5E  083F               	movf	___awdiv@divisor,w
  5847  0E5F  0241               	subwf	___awdiv@dividend,w
  5848  0E60                     u2655:	
  5849  0E60  1C03               	skipc
  5850  0E61  2E63               	goto	u2651
  5851  0E62  2E64               	goto	u2650
  5852  0E63                     u2651:	
  5853  0E63  2E6B               	goto	l3232
  5854  0E64                     u2650:	
  5855  0E64                     l3228:	
  5856  0E64  083F               	movf	___awdiv@divisor,w
  5857  0E65  02C1               	subwf	___awdiv@dividend,f
  5858  0E66  0840               	movf	___awdiv@divisor+1,w
  5859  0E67  1C03               	skipc
  5860  0E68  03C2               	decf	___awdiv@dividend+1,f
  5861  0E69  02C2               	subwf	___awdiv@dividend+1,f
  5862  0E6A                     l3230:	
  5863  0E6A  1446               	bsf	___awdiv@quotient,0
  5864  0E6B                     l3232:	
  5865  0E6B  3001               	movlw	1
  5866  0E6C                     u2665:	
  5867  0E6C  1003               	clrc
  5868  0E6D  0CC0               	rrf	___awdiv@divisor+1,f
  5869  0E6E  0CBF               	rrf	___awdiv@divisor,f
  5870  0E6F  3EFF               	addlw	-1
  5871  0E70  1D03               	skipz
  5872  0E71  2E6C               	goto	u2665
  5873  0E72                     l3234:	
  5874  0E72  3001               	movlw	1
  5875  0E73  02C4               	subwf	___awdiv@counter,f
  5876  0E74  1D03               	btfss	3,2
  5877  0E75  2E77               	goto	u2671
  5878  0E76  2E78               	goto	u2670
  5879  0E77                     u2671:	
  5880  0E77  2E53               	goto	l3226
  5881  0E78                     u2670:	
  5882  0E78                     l3236:	
  5883  0E78  0845               	movf	___awdiv@sign,w
  5884  0E79  1903               	btfsc	3,2
  5885  0E7A  2E7C               	goto	u2681
  5886  0E7B  2E7D               	goto	u2680
  5887  0E7C                     u2681:	
  5888  0E7C  2E82               	goto	l3240
  5889  0E7D                     u2680:	
  5890  0E7D                     l3238:	
  5891  0E7D  09C6               	comf	___awdiv@quotient,f
  5892  0E7E  09C7               	comf	___awdiv@quotient+1,f
  5893  0E7F  0AC6               	incf	___awdiv@quotient,f
  5894  0E80  1903               	skipnz
  5895  0E81  0AC7               	incf	___awdiv@quotient+1,f
  5896  0E82                     l3240:	
  5897  0E82  0847               	movf	___awdiv@quotient+1,w
  5898  0E83  00C0               	movwf	?___awdiv+1
  5899  0E84  0846               	movf	___awdiv@quotient,w
  5900  0E85  00BF               	movwf	?___awdiv
  5901  0E86                     l589:	
  5902  0E86  0008               	return
  5903  0E87                     __end_of___awdiv:	
  5904                           
  5905                           	psect	text22
  5906  0A68                     __ptext22:	
  5907 ;; *************** function _ADC_Read *****************
  5908 ;; Defined at:
  5909 ;;		line 343 in file "main.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  canale          1    wreg     unsigned char 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  canale          1    7[BANK0 ] unsigned char 
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  2    4[BANK0 ] int 
  5916 ;; Registers used:
  5917 ;;		wreg, status,2, status,0
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5923 ;;      Params:         0       2       0       0       0
  5924 ;;      Locals:         0       1       0       0       0
  5925 ;;      Temps:          0       1       0       0       0
  5926 ;;      Totals:         0       4       0       0       0
  5927 ;;Total ram usage:        4 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    3
  5930 ;; This function calls:
  5931 ;;		Nothing
  5932 ;; This function is called by:
  5933 ;;		_main
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           
  5938                           ;psect for function _ADC_Read
  5939  0A68                     _ADC_Read:	
  5940                           
  5941                           ;incstack = 0
  5942                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5943                           ;ADC_Read@canale stored from wreg
  5944  0A68  1283               	bcf	3,5	;RP0=0, select bank0
  5945  0A69  1303               	bcf	3,6	;RP1=0, select bank0
  5946  0A6A  00A7               	movwf	ADC_Read@canale
  5947  0A6B                     l3420:	
  5948                           
  5949                           ;main.c: 343: int ADC_Read(char canale);main.c: 344: {;main.c: 345:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  5950  0A6B  0827               	movf	ADC_Read@canale,w
  5951  0A6C  00A6               	movwf	??_ADC_Read
  5952  0A6D  3002               	movlw	2
  5953  0A6E                     u2895:	
  5954  0A6E  1003               	clrc
  5955  0A6F  0DA6               	rlf	??_ADC_Read,f
  5956  0A70  3EFF               	addlw	-1
  5957  0A71  1D03               	skipz
  5958  0A72  2A6E               	goto	u2895
  5959  0A73  1003               	clrc
  5960  0A74  0D26               	rlf	??_ADC_Read,w
  5961  0A75  3801               	iorlw	1
  5962  0A76  009F               	movwf	31	;volatile
  5963  0A77                     l3422:	
  5964                           
  5965                           ;main.c: 346:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5966  0A77  3004               	movlw	4
  5967  0A78  1283               	bcf	3,5	;RP0=0, select bank0
  5968  0A79  1303               	bcf	3,6	;RP1=0, select bank0
  5969  0A7A  00A6               	movwf	??_ADC_Read
  5970  0A7B                     u3197:	
  5971  0A7B  0BA6               	decfsz	??_ADC_Read,f
  5972  0A7C  2A7B               	goto	u3197
  5973  0A7D  0000               	nop
  5974  0A7E                     l3424:	
  5975                           
  5976                           ;main.c: 347:     GO_nDONE = 1;
  5977  0A7E  1283               	bcf	3,5	;RP0=0, select bank0
  5978  0A7F  1303               	bcf	3,6	;RP1=0, select bank0
  5979  0A80  151F               	bsf	31,2	;volatile
  5980  0A81                     l265:	
  5981                           ;main.c: 349:         ;
  5982                           
  5983                           
  5984                           ;main.c: 348:     while (GO_nDONE)
  5985  0A81  191F               	btfsc	31,2	;volatile
  5986  0A82  2A84               	goto	u2901
  5987  0A83  2A85               	goto	u2900
  5988  0A84                     u2901:	
  5989  0A84  2A81               	goto	l265
  5990  0A85                     u2900:	
  5991  0A85                     l3426:	
  5992                           
  5993                           ;main.c: 350:     return ADRESL + (ADRESH << 8);
  5994  0A85  081E               	movf	30,w	;volatile
  5995  0A86  00A5               	movwf	?_ADC_Read+1
  5996  0A87  1683               	bsf	3,5	;RP0=1, select bank1
  5997  0A88  1303               	bcf	3,6	;RP1=0, select bank1
  5998  0A89  081E               	movf	30,w	;volatile
  5999  0A8A  1283               	bcf	3,5	;RP0=0, select bank0
  6000  0A8B  1303               	bcf	3,6	;RP1=0, select bank0
  6001  0A8C  00A4               	movwf	?_ADC_Read
  6002  0A8D                     l268:	
  6003  0A8D  0008               	return
  6004  0A8E                     __end_of_ADC_Read:	
  6005                           
  6006                           	psect	text23
  6007  0D58                     __ptext23:	
  6008 ;; *************** function _ISR *****************
  6009 ;; Defined at:
  6010 ;;		line 521 in file "main.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;		None
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;		None
  6015 ;; Return value:  Size  Location     Type
  6016 ;;                  1    wreg      void 
  6017 ;; Registers used:
  6018 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6024 ;;      Params:         0       0       0       0       0
  6025 ;;      Locals:         0       0       0       0       0
  6026 ;;      Temps:          0       4       0       0       0
  6027 ;;      Totals:         0       4       0       0       0
  6028 ;;Total ram usage:        4 bytes
  6029 ;; Hardware stack levels used:    1
  6030 ;; Hardware stack levels required when called:    2
  6031 ;; This function calls:
  6032 ;;		_UART_Read
  6033 ;;		_conteggioVeicoli
  6034 ;; This function is called by:
  6035 ;;		Interrupt level 1
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           
  6040                           ;psect for function _ISR
  6041  0D58                     _ISR:	
  6042  0D58                     i1l2750:	
  6043                           
  6044                           ;main.c: 524:     if (RCIF && readGateway.Bit == 0)
  6045  0D58  1E8C               	btfss	12,5	;volatile
  6046  0D59  2D5B               	goto	u219_21
  6047  0D5A  2D5C               	goto	u219_20
  6048  0D5B                     u219_21:	
  6049  0D5B  2D67               	goto	i1l2758
  6050  0D5C                     u219_20:	
  6051  0D5C                     i1l2752:	
  6052  0D5C  1860               	btfsc	_readGateway,0
  6053  0D5D  2D5F               	goto	u220_21
  6054  0D5E  2D60               	goto	u220_20
  6055  0D5F                     u220_21:	
  6056  0D5F  2D67               	goto	i1l2758
  6057  0D60                     u220_20:	
  6058  0D60                     i1l2754:	
  6059                           
  6060                           ;main.c: 525:     {;main.c: 526:         readGateway.Bit = 1;
  6061  0D60  1460               	bsf	_readGateway,0
  6062                           
  6063                           ;main.c: 527:         readGatewayDone.Bit = 0;
  6064  0D61  1061               	bcf	_readGatewayDone,0
  6065                           
  6066                           ;main.c: 528:         readGatewayDone.Timeout = 0;
  6067  0D62  10E1               	bcf	_readGatewayDone,1
  6068  0D63                     i1l2756:	
  6069                           
  6070                           ;main.c: 529:         dataFromGatewayIndex = 0;
  6071  0D63  01DB               	clrf	_dataFromGatewayIndex
  6072                           
  6073                           ;main.c: 530:         timerReadFromGateway = 0;
  6074  0D64  1683               	bsf	3,5	;RP0=1, select bank1
  6075  0D65  1303               	bcf	3,6	;RP1=0, select bank1
  6076  0D66  01AD               	clrf	_timerReadFromGateway^(0+128)
  6077  0D67                     i1l2758:	
  6078                           
  6079                           ;main.c: 532:     if (RCIF && readGateway.Bit == 1)
  6080  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  6081  0D68  1E8C               	btfss	12,5	;volatile
  6082  0D69  2D6B               	goto	u221_21
  6083  0D6A  2D6C               	goto	u221_20
  6084  0D6B                     u221_21:	
  6085  0D6B  2D85               	goto	i1l2768
  6086  0D6C                     u221_20:	
  6087  0D6C                     i1l2760:	
  6088  0D6C  1C60               	btfss	_readGateway,0
  6089  0D6D  2D6F               	goto	u222_21
  6090  0D6E  2D70               	goto	u222_20
  6091  0D6F                     u222_21:	
  6092  0D6F  2D85               	goto	i1l2768
  6093  0D70                     u222_20:	
  6094  0D70                     i1l2762:	
  6095                           
  6096                           ;main.c: 533:     {;main.c: 534:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  6097  0D70  120A  158A  222A  120A  158A  	fcall	_UART_Read
  6098  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  6099  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  6100  0D77  00A0               	movwf	??_ISR
  6101  0D78  085B               	movf	_dataFromGatewayIndex,w
  6102  0D79  3EAE               	addlw	(low (_dataFromGateway| 0))& (0+255)
  6103  0D7A  0084               	movwf	4
  6104  0D7B  0820               	movf	??_ISR,w
  6105  0D7C  1383               	bcf	3,7	;select IRP bank1
  6106  0D7D  0080               	movwf	0
  6107  0D7E                     i1l2764:	
  6108                           
  6109                           ;main.c: 535:         dataFromGatewayIndex++;
  6110  0D7E  3001               	movlw	1
  6111  0D7F  00A0               	movwf	??_ISR
  6112  0D80  0820               	movf	??_ISR,w
  6113  0D81  07DB               	addwf	_dataFromGatewayIndex,f
  6114  0D82                     i1l2766:	
  6115                           
  6116                           ;main.c: 536:         timerReadFromGateway = 0;
  6117  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  6118  0D83  1303               	bcf	3,6	;RP1=0, select bank1
  6119  0D84  01AD               	clrf	_timerReadFromGateway^(0+128)
  6120  0D85                     i1l2768:	
  6121                           
  6122                           ;main.c: 541:     if (TMR0IF)
  6123  0D85  1D0B               	btfss	11,2	;volatile
  6124  0D86  2D88               	goto	u223_21
  6125  0D87  2D89               	goto	u223_20
  6126  0D88                     u223_21:	
  6127  0D88  2D93               	goto	i1l2776
  6128  0D89                     u223_20:	
  6129  0D89                     i1l2770:	
  6130                           
  6131                           ;main.c: 542:     {;main.c: 543:         TMR0IF = 0;
  6132  0D89  110B               	bcf	11,2	;volatile
  6133  0D8A                     i1l2772:	
  6134                           
  6135                           ;main.c: 544:         conteggioVeicoli();
  6136  0D8A  120A  158A  25B9  120A  158A  	fcall	_conteggioVeicoli
  6137  0D8F                     i1l2774:	
  6138                           
  6139                           ;main.c: 545:         TMR0 = 6;
  6140  0D8F  3006               	movlw	6
  6141  0D90  1283               	bcf	3,5	;RP0=0, select bank0
  6142  0D91  1303               	bcf	3,6	;RP1=0, select bank0
  6143  0D92  0081               	movwf	1	;volatile
  6144  0D93                     i1l2776:	
  6145                           
  6146                           ;main.c: 548:     if (TMR1IF)
  6147  0D93  1283               	bcf	3,5	;RP0=0, select bank0
  6148  0D94  1C0C               	btfss	12,0	;volatile
  6149  0D95  2D97               	goto	u224_21
  6150  0D96  2D98               	goto	u224_20
  6151  0D97                     u224_21:	
  6152  0D97  2DB0               	goto	i1l350
  6153  0D98                     u224_20:	
  6154  0D98                     i1l2778:	
  6155                           
  6156                           ;main.c: 549:     {;main.c: 550:         TMR1IF = 0;
  6157  0D98  100C               	bcf	12,0	;volatile
  6158  0D99                     i1l2780:	
  6159                           
  6160                           ;main.c: 551:         count_lux++;
  6161  0D99  3001               	movlw	1
  6162  0D9A  00A0               	movwf	??_ISR
  6163  0D9B  0820               	movf	??_ISR,w
  6164  0D9C  07DC               	addwf	_count_lux,f
  6165  0D9D                     i1l2782:	
  6166                           
  6167                           ;main.c: 553:         if (count_lux >= 20)
  6168  0D9D  3014               	movlw	20
  6169  0D9E  025C               	subwf	_count_lux,w
  6170  0D9F  1C03               	skipc
  6171  0DA0  2DA2               	goto	u225_21
  6172  0DA1  2DA3               	goto	u225_20
  6173  0DA2                     u225_21:	
  6174  0DA2  2DAB               	goto	i1l2790
  6175  0DA3                     u225_20:	
  6176  0DA3                     i1l2784:	
  6177                           
  6178                           ;main.c: 554:         {;main.c: 555:             secondPassed.Bit = 1;
  6179  0DA3  145F               	bsf	_secondPassed,0
  6180  0DA4                     i1l2786:	
  6181                           
  6182                           ;main.c: 556:             count_lux = 0;
  6183  0DA4  01DC               	clrf	_count_lux
  6184  0DA5                     i1l2788:	
  6185                           
  6186                           ;main.c: 557:             timerReadFromGateway++;
  6187  0DA5  3001               	movlw	1
  6188  0DA6  00A0               	movwf	??_ISR
  6189  0DA7  0820               	movf	??_ISR,w
  6190  0DA8  1683               	bsf	3,5	;RP0=1, select bank1
  6191  0DA9  1303               	bcf	3,6	;RP1=0, select bank1
  6192  0DAA  07AD               	addwf	_timerReadFromGateway^(0+128),f
  6193  0DAB                     i1l2790:	
  6194                           
  6195                           ;main.c: 560:         TMR1H = 60;
  6196  0DAB  303C               	movlw	60
  6197  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  6198  0DAD  008F               	movwf	15	;volatile
  6199  0DAE                     i1l2792:	
  6200                           
  6201                           ;main.c: 561:         TMR1L = 176;
  6202  0DAE  30B0               	movlw	176
  6203  0DAF  008E               	movwf	14	;volatile
  6204  0DB0                     i1l350:	
  6205  0DB0  0823               	movf	??_ISR+3,w
  6206  0DB1  008A               	movwf	10
  6207  0DB2  0822               	movf	??_ISR+2,w
  6208  0DB3  0084               	movwf	4
  6209  0DB4  0E21               	swapf	(??_ISR+1)^0,w
  6210  0DB5  0083               	movwf	3
  6211  0DB6  0EFE               	swapf	btemp,f
  6212  0DB7  0E7E               	swapf	btemp,w
  6213  0DB8  0009               	retfie
  6214  0DB9                     __end_of_ISR:	
  6215                           
  6216                           	psect	intentry
  6217  0004                     __pintentry:	
  6218                           ;incstack = 0
  6219                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6220                           
  6221  0004                     interrupt_function:	
  6222  007E                     saved_w	set	btemp
  6223  0004  00FE               	movwf	btemp
  6224  0005  0E03               	swapf	3,w
  6225  0006  1283               	bcf	3,5	;RP0=0, select bank0
  6226  0007  1303               	bcf	3,6	;RP1=0, select bank0
  6227  0008  00A1               	movwf	??_ISR+1
  6228  0009  0804               	movf	4,w
  6229  000A  00A2               	movwf	??_ISR+2
  6230  000B  080A               	movf	10,w
  6231  000C  00A3               	movwf	??_ISR+3
  6232  000D  120A  158A  2D58   	ljmp	_ISR
  6233                           
  6234                           	psect	text24
  6235  0DB9                     __ptext24:	
  6236 ;; *************** function _conteggioVeicoli *****************
  6237 ;; Defined at:
  6238 ;;		line 401 in file "main.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;		None
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;  i               1   13[COMMON] unsigned char 
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  1    wreg      void 
  6245 ;; Registers used:
  6246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6252 ;;      Params:         0       0       0       0       0
  6253 ;;      Locals:         1       0       0       0       0
  6254 ;;      Temps:          4       0       0       0       0
  6255 ;;      Totals:         5       0       0       0       0
  6256 ;;Total ram usage:        5 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:    1
  6259 ;; This function calls:
  6260 ;;		_Conteggio
  6261 ;; This function is called by:
  6262 ;;		_ISR
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           
  6267                           ;psect for function _conteggioVeicoli
  6268  0DB9                     _conteggioVeicoli:	
  6269  0DB9                     i1l2518:	
  6270                           ;incstack = 0
  6271                           ; Regs used in _conteggioVeicoli: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6272                           
  6273                           
  6274                           ;main.c: 403:     RoadsSensors[0] = PORTBbits.RB3;
  6275  0DB9  3000               	movlw	0
  6276  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  6277  0DBB  1303               	bcf	3,6	;RP1=0, select bank0
  6278  0DBC  1986               	btfsc	6,3	;volatile
  6279  0DBD  3001               	movlw	1
  6280  0DBE  1683               	bsf	3,5	;RP0=1, select bank1
  6281  0DBF  1303               	bcf	3,6	;RP1=0, select bank1
  6282  0DC0  00A0               	movwf	_RoadsSensors^(0+128)
  6283                           
  6284                           ;main.c: 404:     RoadsSensors[1] = PORTBbits.RB4;
  6285  0DC1  3000               	movlw	0
  6286  0DC2  1283               	bcf	3,5	;RP0=0, select bank0
  6287  0DC3  1303               	bcf	3,6	;RP1=0, select bank0
  6288  0DC4  1A06               	btfsc	6,4	;volatile
  6289  0DC5  3001               	movlw	1
  6290  0DC6  1683               	bsf	3,5	;RP0=1, select bank1
  6291  0DC7  1303               	bcf	3,6	;RP1=0, select bank1
  6292  0DC8  00A1               	movwf	(_RoadsSensors^(0+128)+1)
  6293                           
  6294                           ;main.c: 405:     RoadsSensors[2] = PORTBbits.RB5;
  6295  0DC9  3000               	movlw	0
  6296  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  6297  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  6298  0DCC  1A86               	btfsc	6,5	;volatile
  6299  0DCD  3001               	movlw	1
  6300  0DCE  1683               	bsf	3,5	;RP0=1, select bank1
  6301  0DCF  1303               	bcf	3,6	;RP1=0, select bank1
  6302  0DD0  00A2               	movwf	(_RoadsSensors^(0+128)+2)
  6303                           
  6304                           ;main.c: 406:     RoadsSensors[3] = PORTAbits.RA5;
  6305  0DD1  3000               	movlw	0
  6306  0DD2  1283               	bcf	3,5	;RP0=0, select bank0
  6307  0DD3  1303               	bcf	3,6	;RP1=0, select bank0
  6308  0DD4  1A85               	btfsc	5,5	;volatile
  6309  0DD5  3001               	movlw	1
  6310  0DD6  1683               	bsf	3,5	;RP0=1, select bank1
  6311  0DD7  1303               	bcf	3,6	;RP1=0, select bank1
  6312  0DD8  00A3               	movwf	(_RoadsSensors^(0+128)+3)
  6313  0DD9                     i1l2520:	
  6314                           
  6315                           ;main.c: 408:     for (unsigned char i = 0; i < 4; i++)
  6316  0DD9  01FD               	clrf	conteggioVeicoli@i
  6317  0DDA                     i1l2524:	
  6318                           
  6319                           ;main.c: 409:     {;main.c: 410:         if (!RoadsSensors[i])
  6320  0DDA  087D               	movf	conteggioVeicoli@i,w
  6321  0DDB  3EA0               	addlw	(low (_RoadsSensors| 0))& (0+255)
  6322  0DDC  0084               	movwf	4
  6323  0DDD  1383               	bcf	3,7	;select IRP bank1
  6324  0DDE  0800               	movf	0,w
  6325  0DDF  1D03               	btfss	3,2
  6326  0DE0  2DE2               	goto	u193_21
  6327  0DE1  2DE3               	goto	u193_20
  6328  0DE2                     u193_21:	
  6329  0DE2  2DEC               	goto	i1l2528
  6330  0DE3                     u193_20:	
  6331  0DE3                     i1l2526:	
  6332                           
  6333                           ;main.c: 411:         {;main.c: 412:             count++;
  6334  0DE3  3001               	movlw	1
  6335  0DE4  1683               	bsf	3,5	;RP0=1, select bank1
  6336  0DE5  1303               	bcf	3,6	;RP1=0, select bank1
  6337  0DE6  07A8               	addwf	_count^(0+128),f
  6338  0DE7  1803               	skipnc
  6339  0DE8  0AA9               	incf	(_count+1)^(0+128),f
  6340  0DE9  3000               	movlw	0
  6341  0DEA  07A9               	addwf	(_count+1)^(0+128),f
  6342                           
  6343                           ;main.c: 413:         }
  6344  0DEB  2E13               	goto	i1l2534
  6345  0DEC                     i1l2528:	
  6346  0DEC  087D               	movf	conteggioVeicoli@i,w
  6347  0DED  3EA0               	addlw	(low (_RoadsSensors| 0))& (0+255)
  6348  0DEE  0084               	movwf	4
  6349  0DEF  0800               	movf	0,w
  6350  0DF0  1903               	btfsc	3,2
  6351  0DF1  2DF3               	goto	u194_21
  6352  0DF2  2DF4               	goto	u194_20
  6353  0DF3                     u194_21:	
  6354  0DF3  2E13               	goto	i1l2534
  6355  0DF4                     u194_20:	
  6356  0DF4                     i1l2530:	
  6357                           
  6358                           ;main.c: 415:         {;main.c: 416:             Conteggio(count, motorcycle, car, truck
      +                          , i);
  6359  0DF4  1683               	bsf	3,5	;RP0=1, select bank1
  6360  0DF5  1303               	bcf	3,6	;RP1=0, select bank1
  6361  0DF6  0829               	movf	(_count+1)^(0+128),w
  6362  0DF7  00F1               	movwf	Conteggio@_count+1
  6363  0DF8  0828               	movf	_count^(0+128),w
  6364  0DF9  00F0               	movwf	Conteggio@_count
  6365  0DFA  30E1               	movlw	(low (_motorcycle| 0))& (0+255)
  6366  0DFB  00F9               	movwf	??_conteggioVeicoli
  6367  0DFC  0879               	movf	??_conteggioVeicoli,w
  6368  0DFD  00F2               	movwf	Conteggio@_motorcycle
  6369  0DFE  30DD               	movlw	(low (_car| 0))& (0+255)
  6370  0DFF  00FA               	movwf	??_conteggioVeicoli+1
  6371  0E00  087A               	movf	??_conteggioVeicoli+1,w
  6372  0E01  00F3               	movwf	Conteggio@_car
  6373  0E02  30D9               	movlw	(low (_truck| 0))& (0+255)
  6374  0E03  00FB               	movwf	??_conteggioVeicoli+2
  6375  0E04  087B               	movf	??_conteggioVeicoli+2,w
  6376  0E05  00F4               	movwf	Conteggio@_truck
  6377  0E06  087D               	movf	conteggioVeicoli@i,w
  6378  0E07  00FC               	movwf	??_conteggioVeicoli+3
  6379  0E08  087C               	movf	??_conteggioVeicoli+3,w
  6380  0E09  00F5               	movwf	Conteggio@index
  6381  0E0A  120A  158A  23A9  120A  158A  	fcall	_Conteggio
  6382  0E0F                     i1l2532:	
  6383                           
  6384                           ;main.c: 417:             count = 0;
  6385  0E0F  1683               	bsf	3,5	;RP0=1, select bank1
  6386  0E10  1303               	bcf	3,6	;RP1=0, select bank1
  6387  0E11  01A8               	clrf	_count^(0+128)
  6388  0E12  01A9               	clrf	(_count+1)^(0+128)
  6389  0E13                     i1l2534:	
  6390                           
  6391                           ;main.c: 419:     }
  6392  0E13  3001               	movlw	1
  6393  0E14  00F9               	movwf	??_conteggioVeicoli
  6394  0E15  0879               	movf	??_conteggioVeicoli,w
  6395  0E16  07FD               	addwf	conteggioVeicoli@i,f
  6396  0E17                     i1l2536:	
  6397  0E17  3004               	movlw	4
  6398  0E18  027D               	subwf	conteggioVeicoli@i,w
  6399  0E19  1C03               	skipc
  6400  0E1A  2E1C               	goto	u195_21
  6401  0E1B  2E1D               	goto	u195_20
  6402  0E1C                     u195_21:	
  6403  0E1C  2DDA               	goto	i1l2524
  6404  0E1D                     u195_20:	
  6405  0E1D                     i1l302:	
  6406  0E1D  0008               	return
  6407  0E1E                     __end_of_conteggioVeicoli:	
  6408                           
  6409                           	psect	text25
  6410  0BA9                     __ptext25:	
  6411 ;; *************** function _Conteggio *****************
  6412 ;; Defined at:
  6413 ;;		line 111 in file "./CustomLib/TrafficLight.h"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  _count          2    0[COMMON] unsigned int 
  6416 ;;  _motorcycle     1    2[COMMON] PTR unsigned char 
  6417 ;;		 -> motorcycle(4), 
  6418 ;;  _car            1    3[COMMON] PTR unsigned char 
  6419 ;;		 -> car(4), 
  6420 ;;  _truck          1    4[COMMON] PTR unsigned char 
  6421 ;;		 -> truck(4), 
  6422 ;;  index           1    5[COMMON] unsigned char 
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;		None
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      void 
  6427 ;; Registers used:
  6428 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6434 ;;      Params:         6       0       0       0       0
  6435 ;;      Locals:         0       0       0       0       0
  6436 ;;      Temps:          3       0       0       0       0
  6437 ;;      Totals:         9       0       0       0       0
  6438 ;;Total ram usage:        9 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; This function calls:
  6441 ;;		Nothing
  6442 ;; This function is called by:
  6443 ;;		_conteggioVeicoli
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           
  6448                           ;psect for function _Conteggio
  6449  0BA9                     _Conteggio:	
  6450  0BA9                     i1l2102:	
  6451                           ;incstack = 0
  6452                           ; Regs used in _Conteggio: [wreg-fsr0h+status,2+status,0]
  6453                           
  6454                           
  6455                           ;./CustomLib/TrafficLight.h: 111: void Conteggio(unsigned int _count, unsigned char _mot
      +                          orcycle[4], unsigned char _car[4], unsigned char _truck[4], unsigned char index);./Custo
      +                          mLib/TrafficLight.h: 112: {;./CustomLib/TrafficLight.h: 113:     if (_count >= 500)
  6456  0BA9  3001               	movlw	1
  6457  0BAA  0271               	subwf	Conteggio@_count+1,w
  6458  0BAB  30F4               	movlw	244
  6459  0BAC  1903               	skipnz
  6460  0BAD  0270               	subwf	Conteggio@_count,w
  6461  0BAE  1C03               	skipc
  6462  0BAF  2BB1               	goto	u131_21
  6463  0BB0  2BB2               	goto	u131_20
  6464  0BB1                     u131_21:	
  6465  0BB1  2BC2               	goto	i1l2106
  6466  0BB2                     u131_20:	
  6467  0BB2                     i1l2104:	
  6468                           
  6469                           ;./CustomLib/TrafficLight.h: 114:     {;./CustomLib/TrafficLight.h: 115:         _motorc
      +                          ycle[index] = _motorcycle[index] + 1;
  6470  0BB2  0875               	movf	Conteggio@index,w
  6471  0BB3  0772               	addwf	Conteggio@_motorcycle,w
  6472  0BB4  00F6               	movwf	??_Conteggio
  6473  0BB5  0876               	movf	??_Conteggio,w
  6474  0BB6  0084               	movwf	4
  6475  0BB7  1383               	bcf	3,7	;select IRP bank0
  6476  0BB8  0800               	movf	0,w
  6477  0BB9  3E01               	addlw	1
  6478  0BBA  00F7               	movwf	??_Conteggio+1
  6479  0BBB  0875               	movf	Conteggio@index,w
  6480  0BBC  0772               	addwf	Conteggio@_motorcycle,w
  6481  0BBD  00F8               	movwf	??_Conteggio+2
  6482  0BBE  0878               	movf	??_Conteggio+2,w
  6483  0BBF  0084               	movwf	4
  6484  0BC0  0877               	movf	??_Conteggio+1,w
  6485  0BC1  0080               	movwf	0
  6486  0BC2                     i1l2106:	
  6487                           
  6488                           ;./CustomLib/TrafficLight.h: 117:     if (_count >= 1500)
  6489  0BC2  3005               	movlw	5
  6490  0BC3  0271               	subwf	Conteggio@_count+1,w
  6491  0BC4  30DC               	movlw	220
  6492  0BC5  1903               	skipnz
  6493  0BC6  0270               	subwf	Conteggio@_count,w
  6494  0BC7  1C03               	skipc
  6495  0BC8  2BCA               	goto	u132_21
  6496  0BC9  2BCB               	goto	u132_20
  6497  0BCA                     u132_21:	
  6498  0BCA  2BDB               	goto	i1l2110
  6499  0BCB                     u132_20:	
  6500  0BCB                     i1l2108:	
  6501                           
  6502                           ;./CustomLib/TrafficLight.h: 118:     {;./CustomLib/TrafficLight.h: 119:         _car[in
      +                          dex] = _car[index] + 1;
  6503  0BCB  0875               	movf	Conteggio@index,w
  6504  0BCC  0773               	addwf	Conteggio@_car,w
  6505  0BCD  00F6               	movwf	??_Conteggio
  6506  0BCE  0876               	movf	??_Conteggio,w
  6507  0BCF  0084               	movwf	4
  6508  0BD0  1383               	bcf	3,7	;select IRP bank0
  6509  0BD1  0800               	movf	0,w
  6510  0BD2  3E01               	addlw	1
  6511  0BD3  00F7               	movwf	??_Conteggio+1
  6512  0BD4  0875               	movf	Conteggio@index,w
  6513  0BD5  0773               	addwf	Conteggio@_car,w
  6514  0BD6  00F8               	movwf	??_Conteggio+2
  6515  0BD7  0878               	movf	??_Conteggio+2,w
  6516  0BD8  0084               	movwf	4
  6517  0BD9  0877               	movf	??_Conteggio+1,w
  6518  0BDA  0080               	movwf	0
  6519  0BDB                     i1l2110:	
  6520                           
  6521                           ;./CustomLib/TrafficLight.h: 121:     if (_count >= 3000)
  6522  0BDB  300B               	movlw	11
  6523  0BDC  0271               	subwf	Conteggio@_count+1,w
  6524  0BDD  30B8               	movlw	184
  6525  0BDE  1903               	skipnz
  6526  0BDF  0270               	subwf	Conteggio@_count,w
  6527  0BE0  1C03               	skipc
  6528  0BE1  2BE3               	goto	u133_21
  6529  0BE2  2BE4               	goto	u133_20
  6530  0BE3                     u133_21:	
  6531  0BE3  2BF4               	goto	i1l166
  6532  0BE4                     u133_20:	
  6533  0BE4                     i1l2112:	
  6534                           
  6535                           ;./CustomLib/TrafficLight.h: 122:     {;./CustomLib/TrafficLight.h: 123:         _truck[
      +                          index] = _truck[index] + 1;
  6536  0BE4  0875               	movf	Conteggio@index,w
  6537  0BE5  0774               	addwf	Conteggio@_truck,w
  6538  0BE6  00F6               	movwf	??_Conteggio
  6539  0BE7  0876               	movf	??_Conteggio,w
  6540  0BE8  0084               	movwf	4
  6541  0BE9  1383               	bcf	3,7	;select IRP bank0
  6542  0BEA  0800               	movf	0,w
  6543  0BEB  3E01               	addlw	1
  6544  0BEC  00F7               	movwf	??_Conteggio+1
  6545  0BED  0875               	movf	Conteggio@index,w
  6546  0BEE  0774               	addwf	Conteggio@_truck,w
  6547  0BEF  00F8               	movwf	??_Conteggio+2
  6548  0BF0  0878               	movf	??_Conteggio+2,w
  6549  0BF1  0084               	movwf	4
  6550  0BF2  0877               	movf	??_Conteggio+1,w
  6551  0BF3  0080               	movwf	0
  6552  0BF4                     i1l166:	
  6553  0BF4  0008               	return
  6554  0BF5                     __end_of_Conteggio:	
  6555                           
  6556                           	psect	text26
  6557  0A2A                     __ptext26:	
  6558 ;; *************** function _UART_Read *****************
  6559 ;; Defined at:
  6560 ;;		line 382 in file "main.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;		None
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;		None
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  1    wreg      unsigned char 
  6567 ;; Registers used:
  6568 ;;		wreg
  6569 ;; Tracked objects:
  6570 ;;		On entry : 0/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6574 ;;      Params:         0       0       0       0       0
  6575 ;;      Locals:         0       0       0       0       0
  6576 ;;      Temps:          0       0       0       0       0
  6577 ;;      Totals:         0       0       0       0       0
  6578 ;;Total ram usage:        0 bytes
  6579 ;; Hardware stack levels used:    1
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_ISR
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _UART_Read
  6589  0A2A                     _UART_Read:	
  6590  0A2A                     i1l2512:	
  6591                           ;incstack = 0
  6592                           ; Regs used in _UART_Read: [wreg]
  6593                           
  6594  0A2A                     i1l286:	
  6595                           ;main.c: 385:         ;
  6596                           
  6597                           
  6598                           ;main.c: 384:     while (!RCIF)
  6599  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  6600  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  6601  0A2C  1E8C               	btfss	12,5	;volatile
  6602  0A2D  2A2F               	goto	u192_21
  6603  0A2E  2A30               	goto	u192_20
  6604  0A2F                     u192_21:	
  6605  0A2F  2A2A               	goto	i1l286
  6606  0A30                     u192_20:	
  6607  0A30                     i1l288:	
  6608                           
  6609                           ;main.c: 386:     RCIF = 0;
  6610  0A30  128C               	bcf	12,5	;volatile
  6611  0A31                     i1l2514:	
  6612                           
  6613                           ;main.c: 387:     return RCREG;
  6614  0A31  081A               	movf	26,w	;volatile
  6615  0A32                     i1l289:	
  6616  0A32  0008               	return
  6617  0A33                     __end_of_UART_Read:	
  6618  007E                     btemp	set	126	;btemp
  6619  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    12
    Data        8
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     59      70
    BANK1            80      0      79
    BANK3            96     10      10
    BANK2            96      0       0

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    DigitsArr	PTR struct .[2] size(1) Largest target is 3
		 -> digits1(BANK1[3]), digits0(BANK1[3]), 

    Semafori	PTR struct .[2] size(1) Largest target is 14
		 -> s1(BANK1[14]), s0(BANK1[14]), 

    Conteggio@_truck	PTR unsigned char  size(1) Largest target is 4
		 -> truck(BANK1[4]), 

    Conteggio@_car	PTR unsigned char  size(1) Largest target is 4
		 -> car(BANK1[4]), 

    Conteggio@_motorcycle	PTR unsigned char  size(1) Largest target is 4
		 -> motorcycle(BANK1[4]), 

    GetDigits@_digits	PTR PTR struct . size(1) Largest target is 2
		 -> DigitsArr(BANK0[2]), 

    SetReceivedTimes@_semafori	PTR PTR struct . size(1) Largest target is 2
		 -> Semafori(BANK0[2]), 

    SetReceivedTimes@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 

    SetDefaultTimers@_semafori	PTR PTR struct . size(1) Largest target is 2
		 -> Semafori(BANK0[2]), 

    GetTime@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 

    UpdateTimes@_semafori	PTR PTR struct . size(1) Largest target is 2
		 -> Semafori(BANK0[2]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli
    _conteggioVeicoli->_Conteggio

Critical Paths under _main in BANK0

    _main->_map
    _sendByte->_BuildByte
    _rand->___lmul
    _map->___awdiv
    _UART_Init->___aldiv
    _ShowDigitsOnDisplay->___awmod
    _SetReceivedTimes->_GetTime
    _GetDigits->___awdiv
    ___awmod->_rand
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   26135
                                             50 BANK0      9     9      0
                                              0 BANK3     10    10      0
                           _ADC_Read
                          _GetDigits
                   _SetDefaultTimers
                   _SetReceivedTimes
                _ShowDigitsOnDisplay
                          _UART_Init
                        _UpdateTimes
                            ___awmod
                           _init_ADC
                       _luciSemaforo
                                _map
                               _rand
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    4067
                                             24 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1138
                                              4 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _rand                                                 7     5      2     316
                                             17 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     316
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    5528
                                             40 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2616
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _luciSemaforo                                         4     3      1     183
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UpdateTimes                                         13    13      0     668
                                              4 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             19 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              4 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _ShowDigitsOnDisplay                                  3     3      0    3734
                                             31 BANK0      3     3      0
                         _SetDisplay
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _SetDisplay                                           7     3      4    1514
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _SetReceivedTimes                                    10     9      1    1618
                                             12 BANK0     10     9      1
                            _GetTime
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              8     6      2     384
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    12     5      7    1395
                                              4 BANK0     12     5      7
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            9     6      3    4533
                                             40 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     721
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1873
                                             24 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1345
                                             31 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0     822
                                              0 BANK0      4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     5     5      0     822
                                              9 COMMON     5     5      0
                          _Conteggio
 ---------------------------------------------------------------------------------
 (5) _Conteggio                                            9     3      6     710
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       ___wmul (ARG)
     ___awmod
       _rand (ARG)
         ___lmul
     ___bmul
   _SetDefaultTimers
   _SetReceivedTimes
     _GetTime
     ___bmul
   _ShowDigitsOnDisplay
     _SetDisplay
     ___awmod
       _rand (ARG)
         ___lmul
   _UART_Init
     ___aldiv
   _UpdateTimes
   ___awmod
     _rand (ARG)
       ___lmul
   _init_ADC
   _luciSemaforo
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       ___wmul (ARG)
     ___wmul (ARG)
   _rand
     ___lmul
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli
     _Conteggio

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      A       A       9       10.4%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3B      46       5       87.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      AD      12        0.0%
ABS                  0      0      AD       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jul 15 21:35:45 2020

                 luciSemaforo@lux 0024                                 pc 0002                    ___bmul@product 0026  
                     __CFG_CP$OFF 0000                      ___awdiv@sign 0045                                _s0 00CB  
                              _s1 00BD                                fsr 0004               ___wmul@multiplicand 0026  
                  _GetDigits$1203 004E                 luciSemaforo@index 0027                       __CFG_LVP$ON 0000  
                             l111 0633                               l105 05E2                               l114 065B  
                             l310 0BFD                               l127 0EF1                               l311 0C01  
                             l223 037C                               l160 0593                               l137 0B60  
                             l225 00A6                               l154 0D57                               l315 0C18  
                             l340 07BF                               l308 0BF9                               l252 0446  
                             l149 0712                               l501 0F77                               l317 0C1C  
                             l326 0C9C                               l262 0A50                               l318 0C20  
                             l511 0FFF                               l271 07F9                               l319 0C47  
                             l255 04BA                               l239 026E                               l265 0A81  
                             l169 0B1A                               l602 0CF7                               l450 0BA8  
                             l274 0A36                               l268 0A8D                               l436 0A9C  
                             l276 0A3A                               l277 0A3D                               l462 0A67  
                             l438 0AB4                               l294 0AE5                               l589 0E86  
                             l886 0F62                      __CFG_CPD$OFF 0000                               _ISR 0D58  
                             _car 00DD                               _map 0AE6                               fsr0 0004  
                             indf 0000                      ___awmod@sign 003E                      __CFG_FOSC$HS 0000  
                            ?_ISR 0070             ??_ShowDigitsOnDisplay 003F                              l3100 0C4B  
                            l3020 05B4                              l3102 0C4C                              l3110 0C8C  
                            l3022 05B5                              l3014 0597                              l3200 0E1E  
                            l3104 0C6A                              l3120 0A92                              l3040 05E8  
                            l3016 05A6                              l3210 0E30                              l3202 0E21  
                            l3106 0C6D                              l3122 0A96                              l3050 0604  
                            l3042 05F0                              l3034 05BB                              l3018 05B3  
                            l3220 0E44                              l3212 0E35                              l3204 0E25  
                            l3300 0EE1                              l3124 0AA3                              l3140 0B8F  
                            l3132 0B61                              l3036 05CF                              l3028 05B7  
                            l3230 0E6A                              l3222 0E4B                              l3214 0E39  
                            l3206 0E2A                              l3150 0A59                              l3126 0AAA  
                            l3118 0A8E                              l3142 0BA0                              l3134 0B6B  
                            l3070 0646                              l3062 060C                              l3046 05F1  
                            l3038 05D5                              l3240 0E82                              l3232 0E6B  
                            l3224 0E4F                              l3216 0E3B                              l3208 0E2C  
                            l3152 0A5D                              l3320 0661                              l3160 0F63  
                            l3304 0EE7                              l3128 0AB0                              l3136 0B6F  
                            l3400 0F3D                              l3064 0620                              l3056 0608  
                            l3048 05F7                              l3234 0E72                              l3226 0E53  
                            l3218 0E41                              l3250 0CA9                              l3154 0A5F  
                            l3146 0A54                              l3322 0686                              l3330 06E3  
                            l3314 065F                              l3090 0B54                              l3082 0B1E  
                            l3170 0F8A                              l3162 0F66                              l3306 0EEB  
                            l3138 0B86                              l3074 0647                              l3066 0626  
                            l3420 0A6B                              l3228 0E64                              l3236 0E78  
                            l3260 0CBD                              l3252 0CAB                              l3244 0C9D  
                            l3156 0A66                              l3148 0A55                              l3332 06E7  
                            l3324 06AB                              l3308 065C                              l3092 0B5C  
                            l3084 0B2D                              l3180 0FAE                              l3172 0F92  
                            l3164 0F6A                              l3076 064D                              l3068 0639  
                            l3412 0ACC                              l3404 0AB8                              l3500 005B  
                            l3422 0A77                              l3238 0E7D                              l3270 0CDC  
                            l3262 0CC4                              l3254 0CAF                              l3246 0CA0  
                            l3334 06ED                              l3086 0B35                              l3350 0D03  
                            l3190 0FE1                              l3182 0FB7                              l3174 0F9A  
                            l3166 0F7B                              l3430 0BF8                              l3078 065A  
                            l3414 0AD5                              l3406 0ACB                              l3510 0068  
                            l3502 0061                              l3424 0A7E                              l3272 0CE3  
                            l3264 0CC8                              l3256 0CB4                              l3248 0CA4  
                            l3336 06F1                              l3328 06D0                              l3088 0B46  
                            l3352 0D12                              l3344 0CFB                              l3184 0FC9  
                            l3176 0F9D                              l3192 0FE7                              l3168 0F86  
                            l3096 0A36                              l3416 0ADB                              l3520 0077  
                            l3512 006C                              l3504 0062                              l3426 0A85  
                            l3266 0CCC                              l3258 0CBA                              l3274 0CE9  
                            l3370 0559                              l3362 04CA                              l3338 06F7  
                            l3354 0D20                              l3346 0CFC                              l3194 0FEC  
                            l3186 0FD7                              l3178 0FAA                              l3282 0E8A  
                            l3434 0C05                              l3442 0C37                              l3098 0A3B  
                            l3418 0ADF                              l3610 0357                              l3602 0341  
                            l3530 009E                              l3522 0082                              l3514 006E  
                            l3506 0064                              l3276 0CEE                              l3268 0CD6  
                            l3372 056C                              l3364 04CB                              l3356 0D33  
                            l3196 0FF7                              l3188 0FD8                              l3380 0A42  
                            l3620 0382                              l3612 035C                              l3604 0346  
                            l3540 00A8                              l3532 009F                              l3524 0099  
                            l3516 0070                              l3508 0066                              l3278 0CF3  
                            l3366 04E0                              l3358 0D52                              l3470 0722  
                            l3462 0713                              l3390 07F6                              l3294 0E8C  
                            l3382 0A45                              l3438 0C24                              l3374 0AE6  
                            l3630 0390                              l3622 0383                              l3614 0363  
                            l3550 013C                              l3534 00A0                              l3526 009C  
                            l3518 0072                              l3368 04FC                              l3472 073D  
                            l3392 07F7                              l3296 0EBA                              l3288 0E8B  
                            l3384 0A49                              l3624 0384                              l3632 039A  
                            l3608 034F                              l3552 0181                              l3560 0225  
                            l3536 00A1                              l3528 009D                              l3474 0748  
                            l3482 078A                              l3394 07F8                              l3386 07C0  
                            l3298 0EDD                              l3378 0A3E                              l3650 041C  
                            l3642 03AE                              l3634 03A0                              l3626 0388  
                            l3570 0235                              l3562 022D                              l3554 01C6  
                            l3546 00AB                              l3618 0367                              l3476 0752  
                            l3484 079D                              l3468 0717                              l3388 07C8  
                            l3396 0EF2                              l3660 0436                              l3652 0424  
                            l3644 03C1                              l3636 03A4                              l3628 038E  
                            l3572 0244                              l3564 0233                              l3548 00F7  
                            l3486 07A3                              l3478 076D                              l3398 0F2F  
                            l3662 043A                              l3654 0425                              l3646 040A  
                            l3670 04A0                              l3638 03A7                              l3590 0304  
                            l3582 025A                              l3574 024A                              l3558 020B  
                            ?_map 0048                              l3488 07A9                              l3680 04B8  
                            l3664 0441                              l3656 042A                              l3648 0410  
                            l3592 0315                              l3584 025F                              l3576 0257  
                            l3930 0C0D                              l3682 04BE                              l3666 0456  
                            l3658 0430                              l3674 04A9                              l3594 0326  
                            l3586 0267                              l3940 06D8                              l3932 0C2C  
                            l3684 04C2                              l3676 04AE                              l3668 0469  
                            l3596 0337                              l3588 0270                              l3934 0C3F  
                            l3678 04B4                              l3598 033A                              l3926 0217  
                            l3936 0792                              l3928 0374                              l3938 0C94  
                            u3000 026D                              u3001 026C                              u3010 0340  
                            u3011 033F                              u2300 0604                              u3100 040A  
                            u3020 0357                              u2301 0603                              u3101 0409  
                            u3021 0356                              u3110 0424                              u3030 0363  
                            u3111 0423                              u3031 0362                              u2320 0633  
                            u3120 042A                              u3040 0382                              u2321 0632  
                            u2305 0600                              u3121 0429                              u3041 0381  
                            u2410 0AB0                              u2330 0639                              u2314 0618  
                            u3130 04B4                              u3050 038E                              u2411 0AAF  
                            u2331 0638                              u2315 0616                              u3131 04B3  
                            u3051 038D                              u2500 0F7B                              u2420 0B6F  
                            u3140 04B8                              u3060 03A0                              u2501 0F7A  
                            u2405 0AA4                              u2421 0B6E                              u2325 062F  
                            u3141 04B7                              u3061 039F                              u2510 0F9A  
                            u2350 065A                              u3150 04BE                              u3070 03A4  
                            u2511 0F99                              u2431 0B78                              u2351 0659  
                            u3151 04BD                              u3071 03A3                              u2600 0E30  
                            u2432 0B7F                              u2344 063F                              u2280 05E2  
                            u3160 04C2                              u3080 03AD                              u2601 0E2F  
                            u2433 0B86                              u2345 063D                              u2281 05E1  
                            u2265 05A9                              u3161 04C1                              u3081 03AC  
                            u2610 0E41                              u2530 0FAE                              u2290 05E8  
                            u2274 05C7                              u2370 0A3A                              u3090 03C1  
                            u2611 0E40                              u2531 0FAD                              u2355 0656  
                            u2291 05E7                              u2275 05C5                              u2371 0A39  
                            u3091 03C0                              u2700 0CAF                              u2380 0A96  
                            u2460 0BA0                              u2701 0CAE                              u2365 0B3B  
                            u2525 0F9F                              u2381 0A95                              u2461 0B9F  
                            u2445 0B88                              u2285 05DE                              u2630 0E53  
                            u2710 0CBA                              u2470 0A59                              u2550 0FC9  
                            u2631 0E52                              u2711 0CB9                              u2471 0A58  
                            u2551 0FC8                              u2455 0B90                              u2480 0A66  
                            u2800 0EF1                              u2625 0E45                              u2481 0A65  
                            u2545 0FB0                              u2801 0EF0                              u2650 0E64  
                            u2730 0CCC                              u2810 06ED                              u2570 0FE7  
                            u2490 0F6A                              u2651 0E63                              u2731 0CCB  
                            u2811 06EC                              u2571 0FE6                              u2555 0FC5  
                            u2491 0F69                              u3187 0A4D                              u2395 0A9D  
                            u2900 0A85                              u2740 0CD6                              u2820 06F7  
                            u2580 0FEC                              u2901 0A84                              u3197 0A7B  
                            u2645 0E54                              u2741 0CD5                              u2725 0CBE  
                            u2821 06F6                              u2581 0FEB                              u2565 0FD9  
                            u2670 0E78                              u2590 0E25                              u2830 0D02  
                            u2910 0722                              u2671 0E77                              u2655 0E60  
                            u2591 0E24                              u2831 0D01                              u2911 0721  
                            u2680 0E7D                              u2760 0CE9                              u2920 0748  
                            u2681 0E7C                              u2665 0E6C                              u2761 0CE8  
                            u2745 0CD2                              u2921 0747                              u2770 0CEE  
                            u2690 0CA4                              u2850 04FC                              u2930 0752  
                            u2771 0CED                              u2755 0CDD                              u2691 0CA3  
                            u2851 04FB                              u2931 0751                              u2940 07A9  
                            u2860 07D7                              u2780 0EBA                              u2845 0D28  
                            u2941 07A8                              u2781 0EB9                              u2790 0EE7  
                            u2870 0F5A                              u2855 04F8                              u2791 0EE6  
                            u2880 0AE5                              u2865 07D2                              u2785 0EB6  
                            u2881 0AE4                              u2970 00A5                              u2875 0F55  
                            u2971 00A4                              u2980 0233                              _RCIF 0065  
                            u2981 0232                              u2990 0257                              u2895 0A6E  
                            u2991 0256                              u2995 0253                              _TMR0 0001  
                            _TXIF 0064                      __CFG_WRT$OFF 0000                              _disp 005D  
                            _main 005B                              _rand 0EF2                              _temp 00AC  
                            _time 00A4                              map@x 0048                              btemp 007E  
                __end_of_ADC_Read 0A8E                     __CFG_BOREN$ON 0000                              start 0010  
                 __end_of_GetTime 0B61                 ___bmul@multiplier 0027                             ??_ISR 0020  
       __size_of_conteggioVeicoli 0065                             ??_map 0052                   __end_of___aldiv 1000  
                           ?_main 0070                             ?_rand 0031                   __end_of___awdiv 0E87  
                   __CFG_WDTE$OFF 0000                   __end_of___awmod 0CF8                   ___awdiv@divisor 003F  
                           _T1CON 0010                             i1l302 0E1D                             i1l166 0BF4  
                           i1l350 0DB0                             i1l286 0A2A                             i1l288 0A30  
                           i1l289 0A32                   ___awdiv@counter 0044                             _RCREG 001A  
            UpdateTimes@_semafori 002E                             _TMR1H 000F                             _TMR1L 000E  
                           _SPBRG 0099                             _PORTD 0008                             _TRISA 0085  
                           _TRISB 0086                             _TRISC 0087                             _TRISD 0088  
                           _TRISE 0089                             _TXREG 0019               ___lmul@multiplicand 0028  
                   __CFG_PWRTE$ON 0000                __size_of_UART_Init 003A                __size_of_UART_Read 0009  
                 __end_of_display 0811                             _count 00A8                             _randx 00EB  
                           main@i 0199                             _truck 00D9                             pclath 000A  
                           status 0003                             wtemp0 007E                   __initialization 0013  
                    __end_of_main 04C7                      __end_of_rand 0F63         __size_of_SetReceivedTimes 0060  
              __size_of_GetDigits 00CD                            ??_main 0052                            ??_rand 0033  
               SetDefaultTimers@i 002F                 SetDefaultTimers@l 002E                __size_of_BuildByte 00C8  
                      _SetDisplay 0C48                            _ADCON0 001F                            _ADCON1 009F  
              __size_of_Conteggio 004C                            _ADRESH 001E                            _ADRESL 009E  
                ___awdiv@dividend 0041                            i1l2110 0BDB                            i1l2102 0BA9  
                          i1l2112 0BE4                            i1l2104 0BB2                            i1l2106 0BC2  
                          i1l2108 0BCB                            i1l2512 0A2A                            i1l2520 0DD9  
                          i1l2514 0A31                            i1l2530 0DF4                            i1l2532 0E0F  
                          i1l2524 0DDA                            i1l2534 0E13                            i1l2526 0DE3  
                          i1l2518 0DB9                            i1l2536 0E17                            i1l2528 0DEC  
                          i1l2750 0D58                            u131_20 0BB2                            i1l2760 0D6C  
                          i1l2752 0D5C                            u131_21 0BB1                            i1l2770 0D89  
                          i1l2762 0D70                            i1l2754 0D60                            i1l2780 0D99  
                          i1l2772 0D8A                            i1l2764 0D7E                            i1l2756 0D63  
                          i1l2790 0DAB                            i1l2782 0D9D                            i1l2774 0D8F  
                          i1l2766 0D82                            i1l2758 0D67                            u132_20 0BCB  
                          i1l2792 0DAE                            i1l2784 0DA3                            i1l2776 0D93  
                          i1l2768 0D85                            u220_20 0D60                            u132_21 0BCA  
                          u220_21 0D5F                            i1l2786 0DA4                            i1l2778 0D98  
                          i1l2788 0DA5                            u133_20 0BE4                            u221_20 0D6C  
                          u133_21 0BE3                            u221_21 0D6B                            u222_20 0D70  
                          u222_21 0D6F                            u223_20 0D89                            u223_21 0D88  
                          u224_20 0D98                            u224_21 0D97                            u225_20 0DA3  
                          _INTCON 000B                            u225_21 0DA2                            u219_20 0D5C  
                          u219_21 0D5B                            u192_20 0A30                            u192_21 0A2F  
                          u193_20 0DE3                            u193_21 0DE2                            u194_20 0DF4  
                          u194_21 0DF3                            u195_20 0E1D                            u195_21 0E1C  
                          _TMR0IF 005A                            _TMR1IF 0060                         ??_GetTime 0026  
                    ?_UART_TxChar 0070                 __end_of_UART_Init 07FA                 __end_of_UART_Read 0A33  
                          ___bmul 0A51                            ___lmul 0B61                         ??___aldiv 002C  
                 GetTime@shortInt 0029                            ___wmul 0A8E                         ??___awdiv 0043  
                       ??___awmod 003C                  __end_of_init_ADC 0A51                            _cycled 005E  
                ___awdiv@quotient 0046                   ___awmod@divisor 0038                   ___awmod@counter 003D  
                __end_of_sendByte 0AE6                         ?_ADC_Read 0024                            saved_w 007E  
         __end_of__initialization 0057                 __end_of_GetDigits 0594                     ??_UpdateTimes 0024  
       __size_of_SetDefaultTimers 00B7               ___bmul@multiplicand 0024                    __pcstackCOMMON 0070  
               __end_of_BuildByte 065C                      __pidataBANK0 07FA                      __pidataBANK1 0A1E  
                _conteggioVeicoli 0DB9                 __end_of_Conteggio 0BF5                     ?_luciSemaforo 0024  
                      ??_ADC_Read 0026            SetDefaultTimers@giallo 0028         SetReceivedTimes@_semafori 002C  
                     ?_SetDisplay 0024                     GetDigits@Time 0049              _dataFromGatewayIndex 005B  
            _timerReadFromGateway 00AD                        __pbssBANK0 005B                        __pbssBANK1 00A0  
                      __pmaintext 005B                           ?___bmul 0024  ShowDigitsOnDisplay@display_index 0041  
                         ?___lmul 0024                           ?___wmul 0024                    ??_luciSemaforo 0025  
             __end_of_UpdateTimes 0EF2                     sendByte@byte0 003D                     sendByte@byte1 0038  
                      __pintentry 0004                    ___lmul@product 002D                  _SetReceivedTimes 0CF8  
     __end_of_ShowDigitsOnDisplay 07C0                        __stringtab 0800                         ?_init_ADC 0070  
                         _GetTime 0B1B                   BuildByte@valore 0025                   BuildByte@txByte 0029  
         GetTime@_dataFromGateway 0024                         ?_sendByte 0038                        _n_semafori 0811  
            __size_of_UART_TxChar 000B                           ___aldiv 0F63                   __size_of___bmul 0017  
                         ___awdiv 0E1E                   __size_of___lmul 0048                           ___awmod 0C9D  
             __size_of_SetDisplay 0055                   __size_of___wmul 0027                 conteggioVeicoli@i 007D  
                         _digits0 00E8                           _digits1 00E5                           __ptext1 0AB5  
                         __ptext2 0A33                           __ptext3 0594                           __ptext4 0EF2  
                         __ptext5 0B61                           __ptext6 0AE6                           __ptext7 0A8E  
                         __ptext8 0BF5                           __ptext9 0A3E                           _display 0806  
                    __size_of_ISR 0061                      __size_of_map 0035                  ___awmod@dividend 003A  
                ___aldiv@dividend 0028              BuildByte@sommaColumn 002F                           _umidita 00AB  
                         clrloop0 0A23                  GetDigits@_digits 0050              end_of_initialization 0057  
                      ??_init_ADC 0024                    main@lux_select 0197                       _UpdateTimes 0E87  
                      ??_sendByte 003A                  _SetDefaultTimers 065C                         _RCSTAbits 0018  
                ___aldiv@quotient 002F                        _motorcycle 00E1                         _UART_Init 07C0  
                       _UART_Read 0A2A             SetReceivedTimes@index 0034                         _PORTAbits 0005  
                       _PORTBbits 0006                         _PORTCbits 0007                      SetDisplay@d1 0024  
                    SetDisplay@d2 0025                      SetDisplay@d3 0026                         _TRISCbits 0087  
               __size_of_ADC_Read 0026          __end_of_conteggioVeicoli 0E1E              __end_of_luciSemaforo 0C48  
                      map@out_max 0050                        map@out_min 004E  SetReceivedTimes@_dataFromGateway 0033  
                       _TXSTAbits 0098                         _GetDigits 04C7                         _DigitsArr 0062  
                  __end_of___bmul 0A68                    __end_of___lmul 0BA9                    __end_of___wmul 0AB5  
                      ?_UART_Init 0033                        ?_UART_Read 0070                         _BuildByte 0594  
                       _Conteggio 0BA9                 BuildByte@sommaRow 002E               start_initialization 0013  
                     __end_of_ISR 0DB9                      ??_SetDisplay 0028                       __end_of_map 0B1B  
        __end_of_SetReceivedTimes 0D58                        ?_GetDigits 0048                          ??___bmul 0025  
                        ??___lmul 002C                    ADC_Read@canale 0027                          ??___wmul 0028  
                     __pdataBANK0 0062                       __pdataBANK1 00EB                __end_of_SetDisplay 0C9D  
                  GetDigits@index 0048                        ?_BuildByte 0024                        ?_Conteggio 0070  
                       ___latbits 0002                     __pcstackBANK0 0020                     __pcstackBANK3 0190  
                        ?_GetTime 0024             SetDefaultTimers@verde 0026             SetDefaultTimers@rosso 0024  
               __size_of_init_ADC 0013                 __size_of_sendByte 0031                          ?___aldiv 0024  
                        ?___awdiv 003F                          ?___awmod 0038                       ??_UART_Init 0035  
                     ??_UART_Read 0070                    BuildByte@i_341 0036                         __pstrings 0800  
                  BuildByte@y_342 0032                    sendByte@valore 0039                    sendByte@txByte 003E  
                  BuildByte@byte0 0028                    BuildByte@byte1 0024          __end_of_SetDefaultTimers 0713  
                        _ADC_Read 0A68             __size_of_luciSemaforo 0053                         _count_lux 005C  
                   UART_TxChar@ch 0024      __size_of_ShowDigitsOnDisplay 00AD                   ___aldiv@divisor 0024  
               SetReceivedTimes@i 0035                 interrupt_function 0004                   ___aldiv@counter 002D  
                  ___wmul@product 0028        SetReceivedTimes@semaforoId 0031                      ?_UpdateTimes 0070  
                       clear_ram0 0A22                          _PIE1bits 008C                     ??_UART_TxChar 0024  
                     ??_GetDigits 004B                          _GO_nDONE 00FA                      _luciSemaforo 0BF5  
                       _pressione 00AA                 UART_Init@baudrate 0033                       ??_BuildByte 0026  
                       map@in_max 004C                         map@in_min 004A                       __stringbase 0805  
                       main@i_480 0195                         main@i_481 0193                         main@i_483 0194  
                       main@i_485 0198                       ??_Conteggio 0076                 ___wmul@multiplier 0024  
                    GetTime@index 0028                 ___lmul@multiplier 0024                      _RoadsSensors 00A0  
               ?_conteggioVeicoli 0070                      _secondPassed 005F                ??_conteggioVeicoli 0079  
                __size_of_GetTime 0046                          _Semafori 0064                       _readGateway 0060  
                __size_of___aldiv 009D               __end_of_UART_TxChar 0A3E                  __size_of___awdiv 0069  
                __size_of___awmod 005B                __end_of__stringtab 0806                         sendByte@i 003F  
                        __ptext10 0E87                          __ptext11 07C0                          __ptext20 0C9D  
                        __ptext12 0F63                          __ptext21 0E1E                          __ptext13 0713  
                        __ptext22 0A68                          __ptext14 0C48                          __ptext23 0D58  
                        __ptext15 0CF8                          __ptext24 0DB9                          __ptext16 0B1B  
                        __ptext25 0BA9                          __ptext17 065C                          __ptext26 0A2A  
                        __ptext18 04C7                          __ptext19 0A51                __end_of_n_semafori 0812  
         SetDisplay@display_index 002A                          _init_ADC 0A3E                 ?_SetReceivedTimes 002C  
                   __size_of_main 046C                   _dataFromGateway 00AE                     __size_of_rand 0071  
                        _sendByte 0AB5                ??_SetReceivedTimes 002D                        _INTCONbits 000B  
            Conteggio@_motorcycle 0072                          intlevel1 0000                   _readGatewayDone 0061  
                       stringcode 0800                       _UART_TxChar 0A33           SetReceivedTimes@colorId 0032  
            __size_of_UpdateTimes 006B                        GetTime@tmp 002A               _ShowDigitsOnDisplay 0713  
                      _OPTION_REG 0081                   SetDisplay@value 0027                          stringdir 0800  
                        stringtab 0800                      UpdateTimes@i 002F                      UpdateTimes@l 0030  
               ?_SetDefaultTimers 0024                      ___aldiv@sign 002E                ??_SetDefaultTimers 002B  
            ?_ShowDigitsOnDisplay 0070                        BuildByte@i 0034                        BuildByte@y 0030  
       SetDefaultTimers@_semafori 002A                   Conteggio@_count 0070                     Conteggio@_car 0073  
                 Conteggio@_truck 0074                    Conteggio@index 0075  
