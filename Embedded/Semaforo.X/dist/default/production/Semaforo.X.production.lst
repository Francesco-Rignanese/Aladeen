

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Jul 16 16:18:04 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 2.10
    48                           ; Generated 31/07/2019 GMT
    49                           ; 
    50                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F877A Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0014                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  001D                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  0088                     	;# 
   121  0089                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  008E                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  010F                     	;# 
   139  018C                     	;# 
   140  018D                     	;# 
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  0008                     	;# 
   150  0009                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000D                     	;# 
   155  000E                     	;# 
   156  000E                     	;# 
   157  000F                     	;# 
   158  0010                     	;# 
   159  0011                     	;# 
   160  0012                     	;# 
   161  0013                     	;# 
   162  0014                     	;# 
   163  0015                     	;# 
   164  0015                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001B                     	;# 
   171  001B                     	;# 
   172  001C                     	;# 
   173  001D                     	;# 
   174  001E                     	;# 
   175  001F                     	;# 
   176  0081                     	;# 
   177  0085                     	;# 
   178  0086                     	;# 
   179  0087                     	;# 
   180  0088                     	;# 
   181  0089                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  010F                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201                           
   202                           	psect	idataBANK1
   203  0A1B                     __pidataBANK1:	
   204                           
   205                           ;initializer for _randx
   206  0A1B  3401               	retlw	1
   207  0A1C  3400               	retlw	0
   208  0A1D  3400               	retlw	0
   209  0A1E  3400               	retlw	0
   210                           
   211                           ;initializer for _DigitsArr
   212  0A1F  34CB               	retlw	low (_digits0| 0)
   213  0A20  34C8               	retlw	low (_digits1| 0)
   214  0A21  34C5               	retlw	low (_digits2| 0)
   215  0A22  34C2               	retlw	low (_digits3| 0)
   216  0A23  34BF               	retlw	low (_digits4| 0)
   217  0A24  34BC               	retlw	low (_digits5| 0)
   218  0A25  34B9               	retlw	low (_digits6| 0)
   219  0A26  34B6               	retlw	low (_digits7| 0)
   220                           
   221                           ;initializer for _Semafori
   222  0A27  34D7               	retlw	low (_s0| (0+256))
   223  0A28  34C9               	retlw	low (_s1| (0+256))
   224  0A29  34BB               	retlw	low (_s2| (0+256))
   225  0A2A  34AD               	retlw	low (_s3| (0+256))
   226  0A2B  349F               	retlw	low (_s4| (0+256))
   227  0A2C  342C               	retlw	low (_s5| (0+256))
   228  0A2D  341E               	retlw	low (_s6| (0+256))
   229  0A2E  3410               	retlw	low (_s7| (0+256))
   230                           
   231                           	psect	strings
   232  0800                     __pstrings:	
   233  0800                     stringtab:	
   234  0800                     __stringtab:	
   235  0800                     stringcode:	
   236                           ;	String table - string pointers are 1 byte each
   237                           
   238  0800                     stringdir:	
   239  0800  3008               	movlw	high stringdir
   240  0801  008A               	movwf	10
   241  0802  0804               	movf	4,w
   242  0803  0A84               	incf	4,f
   243  0804  0782               	addwf	2,f
   244  0805                     __stringbase:	
   245  0805  3400               	retlw	0
   246  0806                     __end_of__stringtab:	
   247  0806                     _display:	
   248  0806  343F               	retlw	63
   249  0807  3406               	retlw	6
   250  0808  345B               	retlw	91
   251  0809  344F               	retlw	79
   252  080A  3466               	retlw	102
   253  080B  346D               	retlw	109
   254  080C  347D               	retlw	125
   255  080D  3407               	retlw	7
   256  080E  347F               	retlw	127
   257  080F  346F               	retlw	111
   258  0810  3400               	retlw	0
   259  0811                     __end_of_display:	
   260  0811                     _n_semafori:	
   261  0811  3408               	retlw	8
   262  0812                     __end_of_n_semafori:	
   263  0008                     _PORTD	set	8
   264  0005                     _PORTAbits	set	5
   265  001A                     _RCREG	set	26
   266  0019                     _TXREG	set	25
   267  000B                     _INTCONbits	set	11
   268  0018                     _RCSTAbits	set	24
   269  001E                     _ADRESH	set	30
   270  001F                     _ADCON0	set	31
   271  0006                     _PORTBbits	set	6
   272  0007                     _PORTCbits	set	7
   273  000E                     _TMR1L	set	14
   274  000F                     _TMR1H	set	15
   275  0010                     _T1CON	set	16
   276  0001                     _TMR0	set	1
   277  000B                     _INTCON	set	11
   278  0060                     _TMR1IF	set	96
   279  005A                     _TMR0IF	set	90
   280  0065                     _RCIF	set	101
   281  0064                     _TXIF	set	100
   282  00FA                     _GO_nDONE	set	250
   283  008C                     _PIE1bits	set	140
   284  0099                     _SPBRG	set	153
   285  0098                     _TXSTAbits	set	152
   286  0087                     _TRISCbits	set	135
   287  009E                     _ADRESL	set	158
   288  009F                     _ADCON1	set	159
   289  0085                     _TRISA	set	133
   290  0081                     _OPTION_REG	set	129
   291  0089                     _TRISE	set	137
   292  0088                     _TRISD	set	136
   293  0087                     _TRISC	set	135
   294  0086                     _TRISB	set	134
   295                           
   296                           ; #config settings
   297  0000                     
   298                           	psect	cinit
   299  0013                     start_initialization:	
   300  0013                     __initialization:	
   301                           
   302                           ; Initialize objects allocated to BANK1
   303  0013  1383               	bcf	3,7	;select IRP bank0
   304  0014  30E2               	movlw	low (__pdataBANK1+20)
   305  0015  00FD               	movwf	btemp+-1
   306  0016  300A               	movlw	high __pidataBANK1
   307  0017  00FE               	movwf	btemp
   308  0018  301B               	movlw	low __pidataBANK1
   309  0019  00FF               	movwf	btemp+1
   310  001A  30CE               	movlw	low __pdataBANK1
   311  001B  0084               	movwf	4
   312  001C  120A  158A  220C  120A  118A  	fcall	init_ram0
   313                           
   314                           ; Clear objects allocated to BANK3
   315  0021  1783               	bsf	3,7	;select IRP bank2
   316  0022  3090               	movlw	low __pbssBANK3
   317  0023  0084               	movwf	4
   318  0024  30E5               	movlw	low (__pbssBANK3+85)
   319  0025  120A  158A  21D9  120A  118A  	fcall	clear_ram0
   320                           
   321                           ; Clear objects allocated to BANK2
   322  002A  3010               	movlw	low __pbssBANK2
   323  002B  0084               	movwf	4
   324  002C  303A               	movlw	low (__pbssBANK2+42)
   325  002D  120A  158A  21D9  120A  118A  	fcall	clear_ram0
   326                           
   327                           ; Clear objects allocated to BANK1
   328  0032  1383               	bcf	3,7	;select IRP bank0
   329  0033  30A0               	movlw	low __pbssBANK1
   330  0034  0084               	movwf	4
   331  0035  30CE               	movlw	low (__pbssBANK1+46)
   332  0036  120A  158A  21D9  120A  118A  	fcall	clear_ram0
   333                           
   334                           ; Clear objects allocated to BANK0
   335  003B  305B               	movlw	low __pbssBANK0
   336  003C  0084               	movwf	4
   337  003D  3066               	movlw	low (__pbssBANK0+11)
   338  003E  120A  158A  21D9  120A  118A  	fcall	clear_ram0
   339  0043                     end_of_initialization:	
   340                           ;End of C runtime variable initialization code
   341                           
   342  0043                     __end_of__initialization:	
   343  0043  0183               	clrf	3
   344  0044  120A  118A  2847   	ljmp	_main	;jump to C main() function
   345                           
   346                           	psect	bssBANK0
   347  005B                     __pbssBANK0:	
   348  005B                     _pressione:	
   349  005B                     	ds	1
   350  005C                     _umidita:	
   351  005C                     	ds	1
   352  005D                     _temp:	
   353  005D                     	ds	1
   354  005E                     _timerReadFromGateway:	
   355  005E                     	ds	1
   356  005F                     _dataFromGatewayIndex:	
   357  005F                     	ds	1
   358  0060                     _count_lux:	
   359  0060                     	ds	1
   360  0061                     _disp:	
   361  0061                     	ds	1
   362  0062                     _cycled:	
   363  0062                     	ds	1
   364  0063                     _secondPassed:	
   365  0063                     	ds	1
   366  0064                     _readGateway:	
   367  0064                     	ds	1
   368  0065                     _readGatewayDone:	
   369  0065                     	ds	1
   370                           
   371                           	psect	bssBANK1
   372  00A0                     __pbssBANK1:	
   373  00A0                     _RoadsSensors:	
   374  00A0                     	ds	4
   375  00A4                     _time:	
   376  00A4                     	ds	4
   377  00A8                     _count:	
   378  00A8                     	ds	2
   379  00AA                     _truck:	
   380  00AA                     	ds	4
   381  00AE                     _car:	
   382  00AE                     	ds	4
   383  00B2                     _motorcycle:	
   384  00B2                     	ds	4
   385  00B6                     _digits7:	
   386  00B6                     	ds	3
   387  00B9                     _digits6:	
   388  00B9                     	ds	3
   389  00BC                     _digits5:	
   390  00BC                     	ds	3
   391  00BF                     _digits4:	
   392  00BF                     	ds	3
   393  00C2                     _digits3:	
   394  00C2                     	ds	3
   395  00C5                     _digits2:	
   396  00C5                     	ds	3
   397  00C8                     _digits1:	
   398  00C8                     	ds	3
   399  00CB                     _digits0:	
   400  00CB                     	ds	3
   401                           
   402                           	psect	dataBANK1
   403  00CE                     __pdataBANK1:	
   404  00CE                     _randx:	
   405  00CE                     	ds	4
   406  00D2                     _DigitsArr:	
   407  00D2                     	ds	8
   408  00DA                     _Semafori:	
   409  00DA                     	ds	8
   410                           
   411                           	psect	bssBANK3
   412  0190                     __pbssBANK3:	
   413  0190                     _dataFromGateway:	
   414  0190                     	ds	15
   415  019F                     _s4:	
   416  019F                     	ds	14
   417  01AD                     _s3:	
   418  01AD                     	ds	14
   419  01BB                     _s2:	
   420  01BB                     	ds	14
   421  01C9                     _s1:	
   422  01C9                     	ds	14
   423  01D7                     _s0:	
   424  01D7                     	ds	14
   425                           
   426                           	psect	bssBANK2
   427  0110                     __pbssBANK2:	
   428  0110                     _s7:	
   429  0110                     	ds	14
   430  011E                     _s6:	
   431  011E                     	ds	14
   432  012C                     _s5:	
   433  012C                     	ds	14
   434                           
   435                           	psect	inittext
   436  0A08                     init_fetch0:	
   437                           ;	Called with low address in FSR and high address in W
   438                           
   439  0A08  087E               	movf	btemp,w
   440  0A09  008A               	movwf	10
   441  0A0A  087F               	movf	btemp+1,w
   442  0A0B  0082               	movwf	2
   443  0A0C                     init_ram0:	
   444                           ;Called with:
   445                           ;	high address of idata address in btemp 
   446                           ;	low address of idata address in btemp+1 
   447                           ;	low address of data in FSR
   448                           ;	high address + 1 of data in btemp-1
   449                           
   450  0A0C  120A  158A  2208  120A  158A  	fcall	init_fetch0
   451  0A11  0080               	movwf	0
   452  0A12  0A84               	incf	4,f
   453  0A13  0804               	movf	4,w
   454  0A14  067D               	xorwf	btemp+-1,w
   455  0A15  1903               	btfsc	3,2
   456  0A16  3400               	retlw	0
   457  0A17  0AFF               	incf	btemp+1,f
   458  0A18  1903               	btfsc	3,2
   459  0A19  0AFE               	incf	btemp,f
   460  0A1A  2A0C               	goto	init_ram0
   461                           
   462                           	psect	clrtext
   463  09D9                     clear_ram0:	
   464                           ;	Called with FSR containing the base address, and
   465                           ;	W with the last address+1
   466                           
   467  09D9  0064               	clrwdt	;clear the watchdog before getting into this loop
   468  09DA                     clrloop0:	
   469  09DA  0180               	clrf	0	;clear RAM location pointed to by FSR
   470  09DB  0A84               	incf	4,f	;increment pointer
   471  09DC  0604               	xorwf	4,w	;XOR with final address
   472  09DD  1903               	btfsc	3,2	;have we reached the end yet?
   473  09DE  3400               	retlw	0	;all done for this memory range, return
   474  09DF  0604               	xorwf	4,w	;XOR again to restore value
   475  09E0  29DA               	goto	clrloop0	;do the next byte
   476                           
   477                           	psect	cstackBANK3
   478  01E5                     __pcstackBANK3:	
   479  01E5                     main@randomMoto:	
   480                           
   481                           ; 1 bytes @ 0x0
   482  01E5                     	ds	1
   483  01E6                     main@randomCar:	
   484                           
   485                           ; 1 bytes @ 0x1
   486  01E6                     	ds	1
   487  01E7                     main@randomTruck:	
   488                           
   489                           ; 1 bytes @ 0x2
   490  01E7                     	ds	1
   491  01E8                     main@i_528:	
   492                           
   493                           ; 1 bytes @ 0x3
   494  01E8                     	ds	1
   495  01E9                     main@i_530:	
   496                           
   497                           ; 1 bytes @ 0x4
   498  01E9                     	ds	1
   499  01EA                     main@i_527:	
   500                           
   501                           ; 2 bytes @ 0x5
   502  01EA                     	ds	2
   503  01EC                     main@lux_select:	
   504                           
   505                           ; 1 bytes @ 0x7
   506  01EC                     	ds	1
   507  01ED                     main@i_532:	
   508                           
   509                           ; 1 bytes @ 0x8
   510  01ED                     	ds	1
   511  01EE                     main@i:	
   512                           
   513                           ; 1 bytes @ 0x9
   514  01EE                     	ds	1
   515                           
   516                           	psect	cstackCOMMON
   517  0070                     __pcstackCOMMON:	
   518  0070                     ?_init_ADC:	
   519  0070                     ?_ShowDigitsOnDisplay:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0070                     ?_UpdateTimes:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0070                     ?_Conteggio:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0070                     ?_main:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0070                     ?_UART_TxChar:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  0070                     ?_UART_Read:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  0070                     ??_UART_Read:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  0070                     ?_conteggioVeicoli:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0070                     ?_ISR:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0070                     Conteggio@_count:	
   547                           ; 1 bytes @ 0x0
   548                           
   549                           
   550                           ; 2 bytes @ 0x0
   551  0070                     	ds	2
   552  0072                     Conteggio@_motorcycle:	
   553                           
   554                           ; 1 bytes @ 0x2
   555  0072                     	ds	1
   556  0073                     Conteggio@_car:	
   557                           
   558                           ; 1 bytes @ 0x3
   559  0073                     	ds	1
   560  0074                     Conteggio@_truck:	
   561                           
   562                           ; 1 bytes @ 0x4
   563  0074                     	ds	1
   564  0075                     Conteggio@index:	
   565                           
   566                           ; 1 bytes @ 0x5
   567  0075                     	ds	1
   568  0076                     ??_Conteggio:	
   569                           
   570                           ; 1 bytes @ 0x6
   571  0076                     	ds	3
   572  0079                     ??_conteggioVeicoli:	
   573                           
   574                           ; 1 bytes @ 0x9
   575  0079                     	ds	4
   576  007D                     conteggioVeicoli@i:	
   577                           
   578                           ; 1 bytes @ 0xD
   579  007D                     	ds	1
   580                           
   581                           	psect	cstackBANK0
   582  0020                     __pcstackBANK0:	
   583  0020                     ??_ISR:	
   584                           
   585                           ; 1 bytes @ 0x0
   586  0020                     	ds	4
   587  0024                     ??_init_ADC:	
   588  0024                     ?_luciSemaforo:	
   589                           ; 1 bytes @ 0x4
   590                           
   591  0024                     ?_BuildByte:	
   592                           ; 1 bytes @ 0x4
   593                           
   594  0024                     ??_UpdateTimes:	
   595                           ; 1 bytes @ 0x4
   596                           
   597  0024                     ?_SetDefaultTimers:	
   598                           ; 1 bytes @ 0x4
   599                           
   600  0024                     ??_UART_TxChar:	
   601                           ; 1 bytes @ 0x4
   602                           
   603  0024                     ?_SetDisplay:	
   604                           ; 1 bytes @ 0x4
   605                           
   606  0024                     ?___bmul:	
   607                           ; 1 bytes @ 0x4
   608                           
   609  0024                     ?_ADC_Read:	
   610                           ; 1 bytes @ 0x4
   611                           
   612  0024                     ?_GetTime:	
   613                           ; 2 bytes @ 0x4
   614                           
   615  0024                     ?___wmul:	
   616                           ; 2 bytes @ 0x4
   617                           
   618  0024                     ?___lmul:	
   619                           ; 2 bytes @ 0x4
   620                           
   621  0024                     ?___aldiv:	
   622                           ; 4 bytes @ 0x4
   623                           
   624  0024                     BuildByte@byte1:	
   625                           ; 4 bytes @ 0x4
   626                           
   627  0024                     GetTime@_dataFromGateway:	
   628                           ; 1 bytes @ 0x4
   629                           
   630  0024                     UART_TxChar@ch:	
   631                           ; 1 bytes @ 0x4
   632                           
   633  0024                     luciSemaforo@lux:	
   634                           ; 1 bytes @ 0x4
   635                           
   636  0024                     SetDisplay@d1:	
   637                           ; 1 bytes @ 0x4
   638                           
   639  0024                     ___bmul@multiplicand:	
   640                           ; 1 bytes @ 0x4
   641                           
   642  0024                     SetDefaultTimers@rosso:	
   643                           ; 1 bytes @ 0x4
   644                           
   645  0024                     ___wmul@multiplier:	
   646                           ; 2 bytes @ 0x4
   647                           
   648  0024                     ___lmul@multiplier:	
   649                           ; 2 bytes @ 0x4
   650                           
   651  0024                     ___aldiv@divisor:	
   652                           ; 4 bytes @ 0x4
   653                           
   654                           
   655                           ; 4 bytes @ 0x4
   656  0024                     	ds	1
   657  0025                     ??_luciSemaforo:	
   658  0025                     ??___bmul:	
   659                           ; 1 bytes @ 0x5
   660                           
   661  0025                     BuildByte@valore:	
   662                           ; 1 bytes @ 0x5
   663                           
   664  0025                     SetDisplay@d2:	
   665                           ; 1 bytes @ 0x5
   666                           
   667                           
   668                           ; 1 bytes @ 0x5
   669  0025                     	ds	1
   670  0026                     ??_ADC_Read:	
   671  0026                     ??_BuildByte:	
   672                           ; 1 bytes @ 0x6
   673                           
   674  0026                     ??_GetTime:	
   675                           ; 1 bytes @ 0x6
   676                           
   677  0026                     SetDisplay@d3:	
   678                           ; 1 bytes @ 0x6
   679                           
   680  0026                     ___bmul@product:	
   681                           ; 1 bytes @ 0x6
   682                           
   683  0026                     SetDefaultTimers@verde:	
   684                           ; 1 bytes @ 0x6
   685                           
   686  0026                     ___wmul@multiplicand:	
   687                           ; 2 bytes @ 0x6
   688                           
   689                           
   690                           ; 2 bytes @ 0x6
   691  0026                     	ds	1
   692  0027                     ADC_Read@canale:	
   693  0027                     luciSemaforo@index:	
   694                           ; 1 bytes @ 0x7
   695                           
   696  0027                     SetDisplay@value:	
   697                           ; 1 bytes @ 0x7
   698                           
   699  0027                     ___bmul@multiplier:	
   700                           ; 1 bytes @ 0x7
   701                           
   702                           
   703                           ; 1 bytes @ 0x7
   704  0027                     	ds	1
   705  0028                     ??_SetDisplay:	
   706  0028                     ??___wmul:	
   707                           ; 1 bytes @ 0x8
   708                           
   709  0028                     BuildByte@byte0:	
   710                           ; 1 bytes @ 0x8
   711                           
   712  0028                     GetTime@index:	
   713                           ; 1 bytes @ 0x8
   714                           
   715  0028                     SetDefaultTimers@giallo:	
   716                           ; 1 bytes @ 0x8
   717                           
   718  0028                     ___wmul@product:	
   719                           ; 2 bytes @ 0x8
   720                           
   721  0028                     ___lmul@multiplicand:	
   722                           ; 2 bytes @ 0x8
   723                           
   724  0028                     ___aldiv@dividend:	
   725                           ; 4 bytes @ 0x8
   726                           
   727                           
   728                           ; 4 bytes @ 0x8
   729  0028                     	ds	1
   730  0029                     GetTime@shortInt:	
   731  0029                     BuildByte@txByte:	
   732                           ; 1 bytes @ 0x9
   733                           
   734                           
   735                           ; 5 bytes @ 0x9
   736  0029                     	ds	1
   737  002A                     SetDefaultTimers@_semafori:	
   738  002A                     SetDisplay@display_index:	
   739                           ; 1 bytes @ 0xA
   740                           
   741  002A                     GetTime@tmp:	
   742                           ; 1 bytes @ 0xA
   743                           
   744                           
   745                           ; 2 bytes @ 0xA
   746  002A                     	ds	1
   747  002B                     ??_SetDefaultTimers:	
   748                           
   749                           ; 1 bytes @ 0xB
   750  002B                     	ds	1
   751  002C                     ?_SetReceivedTimes:	
   752  002C                     ??___lmul:	
   753                           ; 1 bytes @ 0xC
   754                           
   755  002C                     ??___aldiv:	
   756                           ; 1 bytes @ 0xC
   757                           
   758  002C                     SetReceivedTimes@_semafori:	
   759                           ; 1 bytes @ 0xC
   760                           
   761                           
   762                           ; 1 bytes @ 0xC
   763  002C                     	ds	1
   764  002D                     ??_SetReceivedTimes:	
   765  002D                     ___aldiv@counter:	
   766                           ; 1 bytes @ 0xD
   767                           
   768  002D                     ___lmul@product:	
   769                           ; 1 bytes @ 0xD
   770                           
   771                           
   772                           ; 4 bytes @ 0xD
   773  002D                     	ds	1
   774  002E                     BuildByte@sommaRow:	
   775  002E                     UpdateTimes@_semafori:	
   776                           ; 1 bytes @ 0xE
   777                           
   778  002E                     SetDefaultTimers@l:	
   779                           ; 1 bytes @ 0xE
   780                           
   781  002E                     ___aldiv@sign:	
   782                           ; 1 bytes @ 0xE
   783                           
   784                           
   785                           ; 1 bytes @ 0xE
   786  002E                     	ds	1
   787  002F                     BuildByte@sommaColumn:	
   788  002F                     UpdateTimes@i:	
   789                           ; 1 bytes @ 0xF
   790                           
   791  002F                     SetDefaultTimers@i:	
   792                           ; 1 bytes @ 0xF
   793                           
   794  002F                     ___aldiv@quotient:	
   795                           ; 1 bytes @ 0xF
   796                           
   797                           
   798                           ; 4 bytes @ 0xF
   799  002F                     	ds	1
   800  0030                     UpdateTimes@l:	
   801  0030                     BuildByte@y:	
   802                           ; 1 bytes @ 0x10
   803                           
   804                           
   805                           ; 2 bytes @ 0x10
   806  0030                     	ds	1
   807  0031                     ?_rand:	
   808  0031                     SetReceivedTimes@semaforoId:	
   809                           ; 2 bytes @ 0x11
   810                           
   811                           
   812                           ; 1 bytes @ 0x11
   813  0031                     	ds	1
   814  0032                     SetReceivedTimes@colorId:	
   815  0032                     BuildByte@y_342:	
   816                           ; 1 bytes @ 0x12
   817                           
   818                           
   819                           ; 2 bytes @ 0x12
   820  0032                     	ds	1
   821  0033                     ?_UART_Init:	
   822  0033                     ??_rand:	
   823                           ; 1 bytes @ 0x13
   824                           
   825  0033                     SetReceivedTimes@_dataFromGateway:	
   826                           ; 1 bytes @ 0x13
   827                           
   828  0033                     UART_Init@baudrate:	
   829                           ; 1 bytes @ 0x13
   830                           
   831                           
   832                           ; 2 bytes @ 0x13
   833  0033                     	ds	1
   834  0034                     SetReceivedTimes@index:	
   835  0034                     BuildByte@i:	
   836                           ; 1 bytes @ 0x14
   837                           
   838                           
   839                           ; 2 bytes @ 0x14
   840  0034                     	ds	1
   841  0035                     ??_UART_Init:	
   842  0035                     SetReceivedTimes@i:	
   843                           ; 1 bytes @ 0x15
   844                           
   845                           
   846                           ; 1 bytes @ 0x15
   847  0035                     	ds	1
   848  0036                     BuildByte@i_341:	
   849                           
   850                           ; 2 bytes @ 0x16
   851  0036                     	ds	2
   852  0038                     ?_sendByte:	
   853  0038                     ?___awmod:	
   854                           ; 1 bytes @ 0x18
   855                           
   856  0038                     sendByte@byte1:	
   857                           ; 2 bytes @ 0x18
   858                           
   859  0038                     ___awmod@divisor:	
   860                           ; 1 bytes @ 0x18
   861                           
   862                           
   863                           ; 2 bytes @ 0x18
   864  0038                     	ds	1
   865  0039                     sendByte@valore:	
   866                           
   867                           ; 1 bytes @ 0x19
   868  0039                     	ds	1
   869  003A                     ??_sendByte:	
   870  003A                     ___awmod@dividend:	
   871                           ; 1 bytes @ 0x1A
   872                           
   873                           
   874                           ; 2 bytes @ 0x1A
   875  003A                     	ds	2
   876  003C                     ??___awmod:	
   877                           
   878                           ; 1 bytes @ 0x1C
   879  003C                     	ds	1
   880  003D                     sendByte@byte0:	
   881  003D                     ___awmod@counter:	
   882                           ; 1 bytes @ 0x1D
   883                           
   884                           
   885                           ; 1 bytes @ 0x1D
   886  003D                     	ds	1
   887  003E                     sendByte@txByte:	
   888  003E                     ___awmod@sign:	
   889                           ; 1 bytes @ 0x1E
   890                           
   891                           
   892                           ; 1 bytes @ 0x1E
   893  003E                     	ds	1
   894  003F                     ??_ShowDigitsOnDisplay:	
   895  003F                     ?___awdiv:	
   896                           ; 1 bytes @ 0x1F
   897                           
   898  003F                     sendByte@i:	
   899                           ; 2 bytes @ 0x1F
   900                           
   901  003F                     ___awdiv@divisor:	
   902                           ; 1 bytes @ 0x1F
   903                           
   904                           
   905                           ; 2 bytes @ 0x1F
   906  003F                     	ds	2
   907  0041                     ShowDigitsOnDisplay@display_index:	
   908  0041                     ___awdiv@dividend:	
   909                           ; 1 bytes @ 0x21
   910                           
   911                           
   912                           ; 2 bytes @ 0x21
   913  0041                     	ds	2
   914  0043                     ??___awdiv:	
   915                           
   916                           ; 1 bytes @ 0x23
   917  0043                     	ds	1
   918  0044                     ___awdiv@counter:	
   919                           
   920                           ; 1 bytes @ 0x24
   921  0044                     	ds	1
   922  0045                     ___awdiv@sign:	
   923                           
   924                           ; 1 bytes @ 0x25
   925  0045                     	ds	1
   926  0046                     ___awdiv@quotient:	
   927                           
   928                           ; 2 bytes @ 0x26
   929  0046                     	ds	2
   930  0048                     ?_GetDigits:	
   931  0048                     ?_map:	
   932                           ; 1 bytes @ 0x28
   933                           
   934  0048                     GetDigits@index:	
   935                           ; 2 bytes @ 0x28
   936                           
   937  0048                     map@x:	
   938                           ; 1 bytes @ 0x28
   939                           
   940                           
   941                           ; 2 bytes @ 0x28
   942  0048                     	ds	1
   943  0049                     GetDigits@Time:	
   944                           
   945                           ; 2 bytes @ 0x29
   946  0049                     	ds	1
   947  004A                     map@in_min:	
   948                           
   949                           ; 2 bytes @ 0x2A
   950  004A                     	ds	1
   951  004B                     ??_GetDigits:	
   952                           
   953                           ; 1 bytes @ 0x2B
   954  004B                     	ds	1
   955  004C                     map@in_max:	
   956                           
   957                           ; 2 bytes @ 0x2C
   958  004C                     	ds	2
   959  004E                     map@out_min:	
   960  004E                     _GetDigits$1247:	
   961                           ; 2 bytes @ 0x2E
   962                           
   963                           
   964                           ; 2 bytes @ 0x2E
   965  004E                     	ds	2
   966  0050                     GetDigits@_digits:	
   967  0050                     map@out_max:	
   968                           ; 1 bytes @ 0x30
   969                           
   970                           
   971                           ; 2 bytes @ 0x30
   972  0050                     	ds	2
   973  0052                     ??_map:	
   974  0052                     ??_main:	
   975                           ; 1 bytes @ 0x32
   976                           
   977                           
   978                           ; 1 bytes @ 0x32
   979  0052                     	ds	9
   980                           
   981                           	psect	maintext
   982  0047                     __pmaintext:	
   983 ;;
   984 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
   985 ;;
   986 ;; *************** function _main *****************
   987 ;; Defined at:
   988 ;;		line 136 in file "main.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;  lux_select      1    7[BANK3 ] unsigned char 
   993 ;;  randomTruck     1    2[BANK3 ] unsigned char 
   994 ;;  randomCar       1    1[BANK3 ] unsigned char 
   995 ;;  randomMoto      1    0[BANK3 ] unsigned char 
   996 ;;  i               1    4[BANK3 ] unsigned char 
   997 ;;  i               1    3[BANK3 ] unsigned char 
   998 ;;  i               2    5[BANK3 ] int 
   999 ;;  i               1    9[BANK3 ] unsigned char 
  1000 ;;  i               1    8[BANK3 ] unsigned char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : B00/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1010 ;;      Params:         0       0       0       0       0
  1011 ;;      Locals:         0       0       0      10       0
  1012 ;;      Temps:          0       9       0       0       0
  1013 ;;      Totals:         0       9       0      10       0
  1014 ;;Total ram usage:       19 bytes
  1015 ;; Hardware stack levels required when called:    5
  1016 ;; This function calls:
  1017 ;;		_ADC_Read
  1018 ;;		_GetDigits
  1019 ;;		_SetDefaultTimers
  1020 ;;		_SetReceivedTimes
  1021 ;;		_ShowDigitsOnDisplay
  1022 ;;		_UART_Init
  1023 ;;		_UpdateTimes
  1024 ;;		___awmod
  1025 ;;		_init_ADC
  1026 ;;		_luciSemaforo
  1027 ;;		_map
  1028 ;;		_rand
  1029 ;;		_sendByte
  1030 ;; This function is called by:
  1031 ;;		Startup code after reset
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           
  1036                           ;psect for function _main
  1037  0047                     _main:	
  1038  0047                     l3511:	
  1039                           ;incstack = 0
  1040                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1041                           
  1042                           
  1043                           ;main.c: 138:     TRISB = 0x38;
  1044  0047  3038               	movlw	56
  1045  0048  1683               	bsf	3,5	;RP0=1, select bank1
  1046  0049  1303               	bcf	3,6	;RP1=0, select bank1
  1047  004A  0086               	movwf	6	;volatile
  1048                           
  1049                           ;main.c: 139:     TRISC = 0x80;
  1050  004B  3080               	movlw	128
  1051  004C  0087               	movwf	7	;volatile
  1052  004D                     l3513:	
  1053                           
  1054                           ;main.c: 140:     TRISD = 0x00;
  1055  004D  0188               	clrf	8	;volatile
  1056  004E                     l3515:	
  1057                           
  1058                           ;main.c: 141:     TRISE = 0x01;
  1059  004E  3001               	movlw	1
  1060  004F  0089               	movwf	9	;volatile
  1061  0050                     l3517:	
  1062                           
  1063                           ;main.c: 142:     INTCON = 0xE0;
  1064  0050  30E0               	movlw	224
  1065  0051  008B               	movwf	11	;volatile
  1066  0052                     l3519:	
  1067                           
  1068                           ;main.c: 143:     OPTION_REG = 0x04;
  1069  0052  3004               	movlw	4
  1070  0053  0081               	movwf	1	;volatile
  1071  0054                     l3521:	
  1072                           
  1073                           ;main.c: 144:     TMR0 = 6;
  1074  0054  3006               	movlw	6
  1075  0055  1283               	bcf	3,5	;RP0=0, select bank0
  1076  0056  1303               	bcf	3,6	;RP1=0, select bank0
  1077  0057  0081               	movwf	1	;volatile
  1078  0058                     l3523:	
  1079                           
  1080                           ;main.c: 145:     T1CON = 0x31;
  1081  0058  3031               	movlw	49
  1082  0059  0090               	movwf	16	;volatile
  1083  005A                     l3525:	
  1084                           
  1085                           ;main.c: 147:     TMR1H = 60;
  1086  005A  303C               	movlw	60
  1087  005B  008F               	movwf	15	;volatile
  1088  005C                     l3527:	
  1089                           
  1090                           ;main.c: 148:     TMR1L = 176;
  1091  005C  30B0               	movlw	176
  1092  005D  008E               	movwf	14	;volatile
  1093  005E                     l3529:	
  1094                           
  1095                           ;main.c: 151:     init_ADC();
  1096  005E  120A  158A  21F5  120A  118A  	fcall	_init_ADC
  1097  0063                     l3531:	
  1098                           
  1099                           ;main.c: 152:     UART_Init(9600);
  1100  0063  3080               	movlw	128
  1101  0064  1283               	bcf	3,5	;RP0=0, select bank0
  1102  0065  1303               	bcf	3,6	;RP1=0, select bank0
  1103  0066  00B3               	movwf	UART_Init@baudrate
  1104  0067  3025               	movlw	37
  1105  0068  00B4               	movwf	UART_Init@baudrate+1
  1106  0069  120A  158A  22E2  120A  118A  	fcall	_UART_Init
  1107  006E                     l3533:	
  1108                           
  1109                           ;main.c: 153:     SetDefaultTimers(6, 4, 2, Semafori);
  1110  006E  3006               	movlw	6
  1111  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1112  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1113  0071  00A4               	movwf	SetDefaultTimers@rosso
  1114  0072  3000               	movlw	0
  1115  0073  00A5               	movwf	SetDefaultTimers@rosso+1
  1116  0074  3004               	movlw	4
  1117  0075  00A6               	movwf	SetDefaultTimers@verde
  1118  0076  3000               	movlw	0
  1119  0077  00A7               	movwf	SetDefaultTimers@verde+1
  1120  0078  3002               	movlw	2
  1121  0079  00A8               	movwf	SetDefaultTimers@giallo
  1122  007A  3000               	movlw	0
  1123  007B  00A9               	movwf	SetDefaultTimers@giallo+1
  1124  007C  30DA               	movlw	(low (_Semafori| 0))& (0+255)
  1125  007D  00D2               	movwf	??_main
  1126  007E  0852               	movf	??_main,w
  1127  007F  00AA               	movwf	SetDefaultTimers@_semafori
  1128  0080  120A  118A  2675  120A  118A  	fcall	_SetDefaultTimers
  1129  0085                     l3535:	
  1130                           
  1131                           ;main.c: 155:     PORTCbits.RC0 = 0;
  1132  0085  1283               	bcf	3,5	;RP0=0, select bank0
  1133  0086  1303               	bcf	3,6	;RP1=0, select bank0
  1134  0087  1007               	bcf	7,0	;volatile
  1135  0088                     l3537:	
  1136                           
  1137                           ;main.c: 156:     PORTBbits.RB7 = 0;
  1138  0088  1386               	bcf	6,7	;volatile
  1139  0089                     l3539:	
  1140                           
  1141                           ;main.c: 157:     PORTCbits.RC2 = 0;
  1142  0089  1107               	bcf	7,2	;volatile
  1143  008A                     l3541:	
  1144                           
  1145                           ;main.c: 158:     PORTBbits.RB6 = 0;
  1146  008A  1306               	bcf	6,6	;volatile
  1147  008B                     l3543:	
  1148                           
  1149                           ;main.c: 159:     PORTCbits.RC1 = 0;
  1150  008B  1087               	bcf	7,1	;volatile
  1151  008C                     l3545:	
  1152                           
  1153                           ;main.c: 160:     PORTBbits.RB1 = 0;
  1154  008C  1086               	bcf	6,1	;volatile
  1155  008D                     l3547:	
  1156                           
  1157                           ;main.c: 163:     {;main.c: 165:         if (readGateway.Bit)
  1158  008D  1C64               	btfss	_readGateway,0
  1159  008E  2890               	goto	u2911
  1160  008F  2891               	goto	u2910
  1161  0090                     u2911:	
  1162  0090  2B92               	goto	l240
  1163  0091                     u2910:	
  1164  0091  2B7D               	goto	l3635
  1165  0092                     l242:	
  1166                           ;main.c: 168:             {;main.c: 169:             case 0x08:
  1167                           
  1168                           
  1169                           ;main.c: 170:                 readGatewayDone.Bit = 1;
  1170  0092  1465               	bsf	_readGatewayDone,0
  1171                           
  1172                           ;main.c: 171:                 readGateway.Bit = 0;
  1173  0093  1064               	bcf	_readGateway,0
  1174  0094                     l3551:	
  1175                           
  1176                           ;main.c: 173:                 for (unsigned char i = 0; i < 4; i++)
  1177  0094  1683               	bsf	3,5	;RP0=1, select bank3
  1178  0095  1703               	bsf	3,6	;RP1=1, select bank3
  1179  0096  01EE               	clrf	main@i^(0+384)
  1180  0097                     l3557:	
  1181                           
  1182                           ;main.c: 174:                 {;main.c: 176:                     unsigned char randomMot
      +                          o = (char)rand() % 20 + 1;
  1183  0097  3014               	movlw	20
  1184  0098  1283               	bcf	3,5	;RP0=0, select bank0
  1185  0099  1303               	bcf	3,6	;RP1=0, select bank0
  1186  009A  00B8               	movwf	___awmod@divisor
  1187  009B  3000               	movlw	0
  1188  009C  00B9               	movwf	___awmod@divisor+1
  1189  009D  120A  158A  2680  120A  118A  	fcall	_rand
  1190  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1191  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  1192  00A4  0831               	movf	?_rand,w
  1193  00A5  00D2               	movwf	??_main
  1194  00A6  01D3               	clrf	??_main+1
  1195  00A7  0852               	movf	??_main,w
  1196  00A8  00BA               	movwf	___awmod@dividend
  1197  00A9  0853               	movf	??_main+1,w
  1198  00AA  00BB               	movwf	___awmod@dividend+1
  1199  00AB  120A  158A  24F6  120A  118A  	fcall	___awmod
  1200  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  1201  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  1202  00B2  0838               	movf	?___awmod,w
  1203  00B3  3E01               	addlw	1
  1204  00B4  00D4               	movwf	??_main+2
  1205  00B5  0854               	movf	??_main+2,w
  1206  00B6  1683               	bsf	3,5	;RP0=1, select bank3
  1207  00B7  1703               	bsf	3,6	;RP1=1, select bank3
  1208  00B8  00E5               	movwf	main@randomMoto^(0+384)
  1209                           
  1210                           ;main.c: 177:                     unsigned char randomCar = (char)rand() % 20 + 1;
  1211  00B9  3014               	movlw	20
  1212  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1213  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1214  00BC  00B8               	movwf	___awmod@divisor
  1215  00BD  3000               	movlw	0
  1216  00BE  00B9               	movwf	___awmod@divisor+1
  1217  00BF  120A  158A  2680  120A  118A  	fcall	_rand
  1218  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1219  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1220  00C6  0831               	movf	?_rand,w
  1221  00C7  00D2               	movwf	??_main
  1222  00C8  01D3               	clrf	??_main+1
  1223  00C9  0852               	movf	??_main,w
  1224  00CA  00BA               	movwf	___awmod@dividend
  1225  00CB  0853               	movf	??_main+1,w
  1226  00CC  00BB               	movwf	___awmod@dividend+1
  1227  00CD  120A  158A  24F6  120A  118A  	fcall	___awmod
  1228  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1229  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1230  00D4  0838               	movf	?___awmod,w
  1231  00D5  3E01               	addlw	1
  1232  00D6  00D4               	movwf	??_main+2
  1233  00D7  0854               	movf	??_main+2,w
  1234  00D8  1683               	bsf	3,5	;RP0=1, select bank3
  1235  00D9  1703               	bsf	3,6	;RP1=1, select bank3
  1236  00DA  00E6               	movwf	main@randomCar^(0+384)
  1237                           
  1238                           ;main.c: 178:                     unsigned char randomTruck = (char)rand() % 20 + 1;
  1239  00DB  3014               	movlw	20
  1240  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1241  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1242  00DE  00B8               	movwf	___awmod@divisor
  1243  00DF  3000               	movlw	0
  1244  00E0  00B9               	movwf	___awmod@divisor+1
  1245  00E1  120A  158A  2680  120A  118A  	fcall	_rand
  1246  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  1247  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  1248  00E8  0831               	movf	?_rand,w
  1249  00E9  00D2               	movwf	??_main
  1250  00EA  01D3               	clrf	??_main+1
  1251  00EB  0852               	movf	??_main,w
  1252  00EC  00BA               	movwf	___awmod@dividend
  1253  00ED  0853               	movf	??_main+1,w
  1254  00EE  00BB               	movwf	___awmod@dividend+1
  1255  00EF  120A  158A  24F6  120A  118A  	fcall	___awmod
  1256  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1257  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1258  00F6  0838               	movf	?___awmod,w
  1259  00F7  3E01               	addlw	1
  1260  00F8  00D4               	movwf	??_main+2
  1261  00F9  0854               	movf	??_main+2,w
  1262  00FA  1683               	bsf	3,5	;RP0=1, select bank3
  1263  00FB  1703               	bsf	3,6	;RP1=1, select bank3
  1264  00FC  00E7               	movwf	main@randomTruck^(0+384)
  1265  00FD                     l3559:	
  1266                           
  1267                           ;main.c: 180:                     motorcycle[i] = randomMoto;
  1268  00FD  0865               	movf	main@randomMoto^(0+384),w
  1269  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1270  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1271  0100  00D2               	movwf	??_main
  1272  0101  1683               	bsf	3,5	;RP0=1, select bank3
  1273  0102  1703               	bsf	3,6	;RP1=1, select bank3
  1274  0103  086E               	movf	main@i^(0+384),w
  1275  0104  3EB2               	addlw	(low (_motorcycle| 0))& (0+255)
  1276  0105  0084               	movwf	4
  1277  0106  1283               	bcf	3,5	;RP0=0, select bank0
  1278  0107  1303               	bcf	3,6	;RP1=0, select bank0
  1279  0108  0852               	movf	??_main,w
  1280  0109  1383               	bcf	3,7	;select IRP bank1
  1281  010A  0080               	movwf	0
  1282  010B                     l3561:	
  1283                           
  1284                           ;main.c: 181:                     car[i] = randomCar;
  1285  010B  1683               	bsf	3,5	;RP0=1, select bank3
  1286  010C  1703               	bsf	3,6	;RP1=1, select bank3
  1287  010D  0866               	movf	main@randomCar^(0+384),w
  1288  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1289  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1290  0110  00D2               	movwf	??_main
  1291  0111  1683               	bsf	3,5	;RP0=1, select bank3
  1292  0112  1703               	bsf	3,6	;RP1=1, select bank3
  1293  0113  086E               	movf	main@i^(0+384),w
  1294  0114  3EAE               	addlw	(low (_car| 0))& (0+255)
  1295  0115  0084               	movwf	4
  1296  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1297  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1298  0118  0852               	movf	??_main,w
  1299  0119  0080               	movwf	0
  1300  011A                     l3563:	
  1301                           
  1302                           ;main.c: 182:                     truck[i] = randomTruck;
  1303  011A  1683               	bsf	3,5	;RP0=1, select bank3
  1304  011B  1703               	bsf	3,6	;RP1=1, select bank3
  1305  011C  0867               	movf	main@randomTruck^(0+384),w
  1306  011D  1283               	bcf	3,5	;RP0=0, select bank0
  1307  011E  1303               	bcf	3,6	;RP1=0, select bank0
  1308  011F  00D2               	movwf	??_main
  1309  0120  1683               	bsf	3,5	;RP0=1, select bank3
  1310  0121  1703               	bsf	3,6	;RP1=1, select bank3
  1311  0122  086E               	movf	main@i^(0+384),w
  1312  0123  3EAA               	addlw	(low (_truck| 0))& (0+255)
  1313  0124  0084               	movwf	4
  1314  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1315  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1316  0127  0852               	movf	??_main,w
  1317  0128  0080               	movwf	0
  1318                           
  1319                           ;main.c: 185:                     switch (i)
  1320  0129  2A3A               	goto	l3575
  1321  012A                     l3565:	
  1322                           
  1323                           ;main.c: 188:                         sendByte(0x03, 0x01, motorcycle[i]);
  1324  012A  01B8               	clrf	sendByte@byte1
  1325  012B  0AB8               	incf	sendByte@byte1,f
  1326  012C  1683               	bsf	3,5	;RP0=1, select bank3
  1327  012D  1703               	bsf	3,6	;RP1=1, select bank3
  1328  012E  086E               	movf	main@i^(0+384),w
  1329  012F  3EB2               	addlw	(low (_motorcycle| 0))& (0+255)
  1330  0130  0084               	movwf	4
  1331  0131  0800               	movf	0,w
  1332  0132  1283               	bcf	3,5	;RP0=0, select bank0
  1333  0133  1303               	bcf	3,6	;RP1=0, select bank0
  1334  0134  00D2               	movwf	??_main
  1335  0135  0852               	movf	??_main,w
  1336  0136  00B9               	movwf	sendByte@valore
  1337  0137  3003               	movlw	3
  1338  0138  120A  158A  227C  120A  118A  	fcall	_sendByte
  1339                           
  1340                           ;main.c: 189:                         sendByte(0x03, 0x02, car[i]);
  1341  013D  3002               	movlw	2
  1342  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1343  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1344  0140  00D2               	movwf	??_main
  1345  0141  0852               	movf	??_main,w
  1346  0142  00B8               	movwf	sendByte@byte1
  1347  0143  1683               	bsf	3,5	;RP0=1, select bank3
  1348  0144  1703               	bsf	3,6	;RP1=1, select bank3
  1349  0145  086E               	movf	main@i^(0+384),w
  1350  0146  3EAE               	addlw	(low (_car| 0))& (0+255)
  1351  0147  0084               	movwf	4
  1352  0148  1383               	bcf	3,7	;select IRP bank1
  1353  0149  0800               	movf	0,w
  1354  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1355  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1356  014C  00D3               	movwf	??_main+1
  1357  014D  0853               	movf	??_main+1,w
  1358  014E  00B9               	movwf	sendByte@valore
  1359  014F  3003               	movlw	3
  1360  0150  120A  158A  227C  120A  118A  	fcall	_sendByte
  1361                           
  1362                           ;main.c: 190:                         sendByte(0x03, 0x03, truck[i]);
  1363  0155  3003               	movlw	3
  1364  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1365  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1366  0158  00D2               	movwf	??_main
  1367  0159  0852               	movf	??_main,w
  1368  015A  00B8               	movwf	sendByte@byte1
  1369  015B  1683               	bsf	3,5	;RP0=1, select bank3
  1370  015C  1703               	bsf	3,6	;RP1=1, select bank3
  1371  015D  086E               	movf	main@i^(0+384),w
  1372  015E  3EAA               	addlw	(low (_truck| 0))& (0+255)
  1373  015F  0084               	movwf	4
  1374  0160  1383               	bcf	3,7	;select IRP bank1
  1375  0161  0800               	movf	0,w
  1376  0162  1283               	bcf	3,5	;RP0=0, select bank0
  1377  0163  1303               	bcf	3,6	;RP1=0, select bank0
  1378  0164  00D3               	movwf	??_main+1
  1379  0165  0853               	movf	??_main+1,w
  1380  0166  00B9               	movwf	sendByte@valore
  1381  0167  3003               	movlw	3
  1382  0168  120A  158A  227C  120A  118A  	fcall	_sendByte
  1383                           
  1384                           ;main.c: 191:                         break;
  1385  016D  2A54               	goto	l3577
  1386  016E                     l3567:	
  1387                           
  1388                           ;main.c: 193:                         sendByte(0x05, 0x01, motorcycle[i]);
  1389  016E  01B8               	clrf	sendByte@byte1
  1390  016F  0AB8               	incf	sendByte@byte1,f
  1391  0170  1683               	bsf	3,5	;RP0=1, select bank3
  1392  0171  1703               	bsf	3,6	;RP1=1, select bank3
  1393  0172  086E               	movf	main@i^(0+384),w
  1394  0173  3EB2               	addlw	(low (_motorcycle| 0))& (0+255)
  1395  0174  0084               	movwf	4
  1396  0175  0800               	movf	0,w
  1397  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1398  0177  1303               	bcf	3,6	;RP1=0, select bank0
  1399  0178  00D2               	movwf	??_main
  1400  0179  0852               	movf	??_main,w
  1401  017A  00B9               	movwf	sendByte@valore
  1402  017B  3005               	movlw	5
  1403  017C  120A  158A  227C  120A  118A  	fcall	_sendByte
  1404                           
  1405                           ;main.c: 194:                         sendByte(0x05, 0x02, car[i]);
  1406  0181  3002               	movlw	2
  1407  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1408  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1409  0184  00D2               	movwf	??_main
  1410  0185  0852               	movf	??_main,w
  1411  0186  00B8               	movwf	sendByte@byte1
  1412  0187  1683               	bsf	3,5	;RP0=1, select bank3
  1413  0188  1703               	bsf	3,6	;RP1=1, select bank3
  1414  0189  086E               	movf	main@i^(0+384),w
  1415  018A  3EAE               	addlw	(low (_car| 0))& (0+255)
  1416  018B  0084               	movwf	4
  1417  018C  1383               	bcf	3,7	;select IRP bank1
  1418  018D  0800               	movf	0,w
  1419  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1420  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1421  0190  00D3               	movwf	??_main+1
  1422  0191  0853               	movf	??_main+1,w
  1423  0192  00B9               	movwf	sendByte@valore
  1424  0193  3005               	movlw	5
  1425  0194  120A  158A  227C  120A  118A  	fcall	_sendByte
  1426                           
  1427                           ;main.c: 195:                         sendByte(0x05, 0x03, truck[i]);
  1428  0199  3003               	movlw	3
  1429  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1430  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1431  019C  00D2               	movwf	??_main
  1432  019D  0852               	movf	??_main,w
  1433  019E  00B8               	movwf	sendByte@byte1
  1434  019F  1683               	bsf	3,5	;RP0=1, select bank3
  1435  01A0  1703               	bsf	3,6	;RP1=1, select bank3
  1436  01A1  086E               	movf	main@i^(0+384),w
  1437  01A2  3EAA               	addlw	(low (_truck| 0))& (0+255)
  1438  01A3  0084               	movwf	4
  1439  01A4  1383               	bcf	3,7	;select IRP bank1
  1440  01A5  0800               	movf	0,w
  1441  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1442  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1443  01A8  00D3               	movwf	??_main+1
  1444  01A9  0853               	movf	??_main+1,w
  1445  01AA  00B9               	movwf	sendByte@valore
  1446  01AB  3005               	movlw	5
  1447  01AC  120A  158A  227C  120A  118A  	fcall	_sendByte
  1448                           
  1449                           ;main.c: 196:                         break;
  1450  01B1  2A54               	goto	l3577
  1451  01B2                     l3569:	
  1452                           
  1453                           ;main.c: 198:                         sendByte(0x07, 0x01, motorcycle[i]);
  1454  01B2  01B8               	clrf	sendByte@byte1
  1455  01B3  0AB8               	incf	sendByte@byte1,f
  1456  01B4  1683               	bsf	3,5	;RP0=1, select bank3
  1457  01B5  1703               	bsf	3,6	;RP1=1, select bank3
  1458  01B6  086E               	movf	main@i^(0+384),w
  1459  01B7  3EB2               	addlw	(low (_motorcycle| 0))& (0+255)
  1460  01B8  0084               	movwf	4
  1461  01B9  0800               	movf	0,w
  1462  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1463  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1464  01BC  00D2               	movwf	??_main
  1465  01BD  0852               	movf	??_main,w
  1466  01BE  00B9               	movwf	sendByte@valore
  1467  01BF  3007               	movlw	7
  1468  01C0  120A  158A  227C  120A  118A  	fcall	_sendByte
  1469                           
  1470                           ;main.c: 199:                         sendByte(0x07, 0x02, car[i]);
  1471  01C5  3002               	movlw	2
  1472  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  1473  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  1474  01C8  00D2               	movwf	??_main
  1475  01C9  0852               	movf	??_main,w
  1476  01CA  00B8               	movwf	sendByte@byte1
  1477  01CB  1683               	bsf	3,5	;RP0=1, select bank3
  1478  01CC  1703               	bsf	3,6	;RP1=1, select bank3
  1479  01CD  086E               	movf	main@i^(0+384),w
  1480  01CE  3EAE               	addlw	(low (_car| 0))& (0+255)
  1481  01CF  0084               	movwf	4
  1482  01D0  1383               	bcf	3,7	;select IRP bank1
  1483  01D1  0800               	movf	0,w
  1484  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1485  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1486  01D4  00D3               	movwf	??_main+1
  1487  01D5  0853               	movf	??_main+1,w
  1488  01D6  00B9               	movwf	sendByte@valore
  1489  01D7  3007               	movlw	7
  1490  01D8  120A  158A  227C  120A  118A  	fcall	_sendByte
  1491                           
  1492                           ;main.c: 200:                         sendByte(0x07, 0x03, truck[i]);
  1493  01DD  3003               	movlw	3
  1494  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1495  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1496  01E0  00D2               	movwf	??_main
  1497  01E1  0852               	movf	??_main,w
  1498  01E2  00B8               	movwf	sendByte@byte1
  1499  01E3  1683               	bsf	3,5	;RP0=1, select bank3
  1500  01E4  1703               	bsf	3,6	;RP1=1, select bank3
  1501  01E5  086E               	movf	main@i^(0+384),w
  1502  01E6  3EAA               	addlw	(low (_truck| 0))& (0+255)
  1503  01E7  0084               	movwf	4
  1504  01E8  1383               	bcf	3,7	;select IRP bank1
  1505  01E9  0800               	movf	0,w
  1506  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1507  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1508  01EC  00D3               	movwf	??_main+1
  1509  01ED  0853               	movf	??_main+1,w
  1510  01EE  00B9               	movwf	sendByte@valore
  1511  01EF  3007               	movlw	7
  1512  01F0  120A  158A  227C  120A  118A  	fcall	_sendByte
  1513                           
  1514                           ;main.c: 201:                         break;
  1515  01F5  2A54               	goto	l3577
  1516  01F6                     l3571:	
  1517                           
  1518                           ;main.c: 203:                         sendByte(0x09, 0x01, motorcycle[i]);
  1519  01F6  01B8               	clrf	sendByte@byte1
  1520  01F7  0AB8               	incf	sendByte@byte1,f
  1521  01F8  1683               	bsf	3,5	;RP0=1, select bank3
  1522  01F9  1703               	bsf	3,6	;RP1=1, select bank3
  1523  01FA  086E               	movf	main@i^(0+384),w
  1524  01FB  3EB2               	addlw	(low (_motorcycle| 0))& (0+255)
  1525  01FC  0084               	movwf	4
  1526  01FD  0800               	movf	0,w
  1527  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  1528  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  1529  0200  00D2               	movwf	??_main
  1530  0201  0852               	movf	??_main,w
  1531  0202  00B9               	movwf	sendByte@valore
  1532  0203  3009               	movlw	9
  1533  0204  120A  158A  227C  120A  118A  	fcall	_sendByte
  1534                           
  1535                           ;main.c: 204:                         sendByte(0x09, 0x02, car[i]);
  1536  0209  3002               	movlw	2
  1537  020A  1283               	bcf	3,5	;RP0=0, select bank0
  1538  020B  1303               	bcf	3,6	;RP1=0, select bank0
  1539  020C  00D2               	movwf	??_main
  1540  020D  0852               	movf	??_main,w
  1541  020E  00B8               	movwf	sendByte@byte1
  1542  020F  1683               	bsf	3,5	;RP0=1, select bank3
  1543  0210  1703               	bsf	3,6	;RP1=1, select bank3
  1544  0211  086E               	movf	main@i^(0+384),w
  1545  0212  3EAE               	addlw	(low (_car| 0))& (0+255)
  1546  0213  0084               	movwf	4
  1547  0214  1383               	bcf	3,7	;select IRP bank1
  1548  0215  0800               	movf	0,w
  1549  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1550  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1551  0218  00D3               	movwf	??_main+1
  1552  0219  0853               	movf	??_main+1,w
  1553  021A  00B9               	movwf	sendByte@valore
  1554  021B  3009               	movlw	9
  1555  021C  120A  158A  227C  120A  118A  	fcall	_sendByte
  1556                           
  1557                           ;main.c: 205:                         sendByte(0x09, 0x03, truck[i]);
  1558  0221  3003               	movlw	3
  1559  0222  1283               	bcf	3,5	;RP0=0, select bank0
  1560  0223  1303               	bcf	3,6	;RP1=0, select bank0
  1561  0224  00D2               	movwf	??_main
  1562  0225  0852               	movf	??_main,w
  1563  0226  00B8               	movwf	sendByte@byte1
  1564  0227  1683               	bsf	3,5	;RP0=1, select bank3
  1565  0228  1703               	bsf	3,6	;RP1=1, select bank3
  1566  0229  086E               	movf	main@i^(0+384),w
  1567  022A  3EAA               	addlw	(low (_truck| 0))& (0+255)
  1568  022B  0084               	movwf	4
  1569  022C  1383               	bcf	3,7	;select IRP bank1
  1570  022D  0800               	movf	0,w
  1571  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1572  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1573  0230  00D3               	movwf	??_main+1
  1574  0231  0853               	movf	??_main+1,w
  1575  0232  00B9               	movwf	sendByte@valore
  1576  0233  3009               	movlw	9
  1577  0234  120A  158A  227C  120A  118A  	fcall	_sendByte
  1578                           
  1579                           ;main.c: 206:                         break;
  1580  0239  2A54               	goto	l3577
  1581  023A                     l3575:	
  1582  023A  1683               	bsf	3,5	;RP0=1, select bank3
  1583  023B  1703               	bsf	3,6	;RP1=1, select bank3
  1584  023C  086E               	movf	main@i^(0+384),w
  1585  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1586  023E  1303               	bcf	3,6	;RP1=0, select bank0
  1587  023F  00D2               	movwf	??_main
  1588  0240  01D3               	clrf	??_main+1
  1589                           
  1590                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1591                           ; Switch size 1, requested type "simple"
  1592                           ; Number of cases is 1, Range of values is 0 to 0
  1593                           ; switch strategies available:
  1594                           ; Name         Instructions Cycles
  1595                           ; simple_byte            4     3 (average)
  1596                           ; direct_byte           11     8 (fixed)
  1597                           ; jumptable            260     6 (fixed)
  1598                           ;	Chosen strategy is simple_byte
  1599  0241  0853               	movf	??_main+1,w
  1600  0242  3A00               	xorlw	0	; case 0
  1601  0243  1903               	skipnz
  1602  0244  2A46               	goto	l3943
  1603  0245  2A54               	goto	l3577
  1604  0246                     l3943:	
  1605                           
  1606                           ; Switch size 1, requested type "simple"
  1607                           ; Number of cases is 4, Range of values is 0 to 3
  1608                           ; switch strategies available:
  1609                           ; Name         Instructions Cycles
  1610                           ; simple_byte           13     7 (average)
  1611                           ; direct_byte           20     8 (fixed)
  1612                           ; jumptable            260     6 (fixed)
  1613                           ;	Chosen strategy is simple_byte
  1614  0246  0852               	movf	??_main,w
  1615  0247  3A00               	xorlw	0	; case 0
  1616  0248  1903               	skipnz
  1617  0249  292A               	goto	l3565
  1618  024A  3A01               	xorlw	1	; case 1
  1619  024B  1903               	skipnz
  1620  024C  296E               	goto	l3567
  1621  024D  3A03               	xorlw	3	; case 2
  1622  024E  1903               	skipnz
  1623  024F  29B2               	goto	l3569
  1624  0250  3A01               	xorlw	1	; case 3
  1625  0251  1903               	skipnz
  1626  0252  29F6               	goto	l3571
  1627  0253  2A54               	goto	l3577
  1628  0254                     l3577:	
  1629                           
  1630                           ;main.c: 208:                 }
  1631  0254  3001               	movlw	1
  1632  0255  1283               	bcf	3,5	;RP0=0, select bank0
  1633  0256  1303               	bcf	3,6	;RP1=0, select bank0
  1634  0257  00D2               	movwf	??_main
  1635  0258  0852               	movf	??_main,w
  1636  0259  1683               	bsf	3,5	;RP0=1, select bank3
  1637  025A  1703               	bsf	3,6	;RP1=1, select bank3
  1638  025B  07EE               	addwf	main@i^(0+384),f
  1639  025C                     l3579:	
  1640  025C  3004               	movlw	4
  1641  025D  026E               	subwf	main@i^(0+384),w
  1642  025E  1C03               	skipc
  1643  025F  2A61               	goto	u2921
  1644  0260  2A62               	goto	u2920
  1645  0261                     u2921:	
  1646  0261  2897               	goto	l3557
  1647  0262                     u2920:	
  1648  0262                     l3581:	
  1649                           
  1650                           ;main.c: 210:                 for (int i = 0; i < 4; i++)
  1651  0262  01EA               	clrf	main@i_527^(0+384)
  1652  0263  01EB               	clrf	(main@i_527+1)^(0+384)
  1653  0264                     l3587:	
  1654                           
  1655                           ;main.c: 211:                 {;main.c: 212:                     motorcycle[i] = 0;
  1656  0264  1683               	bsf	3,5	;RP0=1, select bank3
  1657  0265  1703               	bsf	3,6	;RP1=1, select bank3
  1658  0266  086A               	movf	main@i_527^(0+384),w
  1659  0267  3EB2               	addlw	(low (_motorcycle| 0))& (0+255)
  1660  0268  0084               	movwf	4
  1661  0269  1383               	bcf	3,7	;select IRP bank1
  1662  026A  0180               	clrf	0
  1663                           
  1664                           ;main.c: 213:                     car[i] = 0;
  1665  026B  086A               	movf	main@i_527^(0+384),w
  1666  026C  3EAE               	addlw	(low (_car| 0))& (0+255)
  1667  026D  0084               	movwf	4
  1668  026E  0180               	clrf	0
  1669                           
  1670                           ;main.c: 214:                     truck[i] = 0;
  1671  026F  086A               	movf	main@i_527^(0+384),w
  1672  0270  3EAA               	addlw	(low (_truck| 0))& (0+255)
  1673  0271  0084               	movwf	4
  1674  0272  0180               	clrf	0
  1675  0273                     l3589:	
  1676                           
  1677                           ;main.c: 215:                 }
  1678  0273  3001               	movlw	1
  1679  0274  07EA               	addwf	main@i_527^(0+384),f
  1680  0275  1803               	skipnc
  1681  0276  0AEB               	incf	(main@i_527+1)^(0+384),f
  1682  0277  3000               	movlw	0
  1683  0278  07EB               	addwf	(main@i_527+1)^(0+384),f
  1684  0279                     l3591:	
  1685  0279  086B               	movf	(main@i_527+1)^(0+384),w
  1686  027A  3A80               	xorlw	128
  1687  027B  00FF               	movwf	btemp+1
  1688  027C  3080               	movlw	128
  1689  027D  027F               	subwf	btemp+1,w
  1690  027E  1D03               	skipz
  1691  027F  2A82               	goto	u2935
  1692  0280  3004               	movlw	4
  1693  0281  026A               	subwf	main@i_527^(0+384),w
  1694  0282                     u2935:	
  1695  0282  1C03               	skipc
  1696  0283  2A85               	goto	u2931
  1697  0284  2A86               	goto	u2930
  1698  0285                     u2931:	
  1699  0285  2A64               	goto	l3587
  1700  0286                     u2930:	
  1701  0286                     l3593:	
  1702                           
  1703                           ;main.c: 217:                 for (unsigned char i = 0; i < 5; i++)
  1704  0286  1683               	bsf	3,5	;RP0=1, select bank3
  1705  0287  1703               	bsf	3,6	;RP1=1, select bank3
  1706  0288  01E8               	clrf	main@i_528^(0+384)
  1707  0289                     l3599:	
  1708                           
  1709                           ;main.c: 218:                 {;main.c: 219:                     dataFromGateway[i] = 0;
  1710  0289  0868               	movf	main@i_528^(0+384),w
  1711  028A  3E90               	addlw	(low (_dataFromGateway| (0+256)))& (0+255)
  1712  028B  0084               	movwf	4
  1713  028C  1783               	bsf	3,7	;select IRP bank3
  1714  028D  0180               	clrf	0
  1715  028E                     l3601:	
  1716                           
  1717                           ;main.c: 220:                 }
  1718  028E  3001               	movlw	1
  1719  028F  1283               	bcf	3,5	;RP0=0, select bank0
  1720  0290  1303               	bcf	3,6	;RP1=0, select bank0
  1721  0291  00D2               	movwf	??_main
  1722  0292  0852               	movf	??_main,w
  1723  0293  1683               	bsf	3,5	;RP0=1, select bank3
  1724  0294  1703               	bsf	3,6	;RP1=1, select bank3
  1725  0295  07E8               	addwf	main@i_528^(0+384),f
  1726  0296                     l3603:	
  1727  0296  3005               	movlw	5
  1728  0297  0268               	subwf	main@i_528^(0+384),w
  1729  0298  1C03               	skipc
  1730  0299  2A9B               	goto	u2941
  1731  029A  2A9C               	goto	u2940
  1732  029B                     u2941:	
  1733  029B  2A89               	goto	l3599
  1734  029C                     u2940:	
  1735  029C  2B92               	goto	l240
  1736  029D                     l256:	
  1737                           ;main.c: 222:             case 0x0A:
  1738                           
  1739                           
  1740                           ;main.c: 223:                 readGatewayDone.Bit = 1;
  1741  029D  1465               	bsf	_readGatewayDone,0
  1742                           
  1743                           ;main.c: 224:                 readGateway.Bit = 0;
  1744  029E  1064               	bcf	_readGateway,0
  1745  029F                     l3605:	
  1746                           
  1747                           ;main.c: 226:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1748  029F  3000               	movlw	0
  1749  02A0  120A  158A  222F  120A  118A  	fcall	_ADC_Read
  1750  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  1751  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  1752  02A7  0824               	movf	?_ADC_Read,w
  1753  02A8  00D2               	movwf	??_main
  1754  02A9  0825               	movf	?_ADC_Read+1,w
  1755  02AA  00D3               	movwf	??_main+1
  1756  02AB  0D53               	rlf	??_main+1,w
  1757  02AC  0CD3               	rrf	??_main+1,f
  1758  02AD  0CD2               	rrf	??_main,f
  1759  02AE  0D53               	rlf	??_main+1,w
  1760  02AF  0CD3               	rrf	??_main+1,f
  1761  02B0  0CD2               	rrf	??_main,f
  1762  02B1  0852               	movf	??_main,w
  1763  02B2  00C8               	movwf	map@x
  1764  02B3  0853               	movf	??_main+1,w
  1765  02B4  00C9               	movwf	map@x+1
  1766  02B5  3000               	movlw	0
  1767  02B6  00CA               	movwf	map@in_min
  1768  02B7  00CB               	movwf	map@in_min+1
  1769  02B8  30FF               	movlw	255
  1770  02B9  00CC               	movwf	map@in_max
  1771  02BA  3000               	movlw	0
  1772  02BB  00CD               	movwf	map@in_max+1
  1773  02BC  30EC               	movlw	236
  1774  02BD  00CE               	movwf	map@out_min
  1775  02BE  30FF               	movlw	255
  1776  02BF  00CF               	movwf	map@out_min+1
  1777  02C0  303C               	movlw	60
  1778  02C1  00D0               	movwf	map@out_max
  1779  02C2  3000               	movlw	0
  1780  02C3  00D1               	movwf	map@out_max+1
  1781  02C4  120A  158A  22AD  120A  118A  	fcall	_map
  1782  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  1783  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  1784  02CB  0848               	movf	?_map,w
  1785  02CC  00D4               	movwf	??_main+2
  1786  02CD  0854               	movf	??_main+2,w
  1787  02CE  00DD               	movwf	_temp
  1788                           
  1789                           ;main.c: 227:                 umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  1790  02CF  3001               	movlw	1
  1791  02D0  120A  158A  222F  120A  118A  	fcall	_ADC_Read
  1792  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  1793  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  1794  02D7  0824               	movf	?_ADC_Read,w
  1795  02D8  00D2               	movwf	??_main
  1796  02D9  0825               	movf	?_ADC_Read+1,w
  1797  02DA  00D3               	movwf	??_main+1
  1798  02DB  0D53               	rlf	??_main+1,w
  1799  02DC  0CD3               	rrf	??_main+1,f
  1800  02DD  0CD2               	rrf	??_main,f
  1801  02DE  0D53               	rlf	??_main+1,w
  1802  02DF  0CD3               	rrf	??_main+1,f
  1803  02E0  0CD2               	rrf	??_main,f
  1804  02E1  0852               	movf	??_main,w
  1805  02E2  00C8               	movwf	map@x
  1806  02E3  0853               	movf	??_main+1,w
  1807  02E4  00C9               	movwf	map@x+1
  1808  02E5  3000               	movlw	0
  1809  02E6  00CA               	movwf	map@in_min
  1810  02E7  00CB               	movwf	map@in_min+1
  1811  02E8  30FF               	movlw	255
  1812  02E9  00CC               	movwf	map@in_max
  1813  02EA  3000               	movlw	0
  1814  02EB  00CD               	movwf	map@in_max+1
  1815  02EC  3000               	movlw	0
  1816  02ED  00CE               	movwf	map@out_min
  1817  02EE  00CF               	movwf	map@out_min+1
  1818  02EF  3064               	movlw	100
  1819  02F0  00D0               	movwf	map@out_max
  1820  02F1  3000               	movlw	0
  1821  02F2  00D1               	movwf	map@out_max+1
  1822  02F3  120A  158A  22AD  120A  118A  	fcall	_map
  1823  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  1824  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  1825  02FA  0848               	movf	?_map,w
  1826  02FB  00D4               	movwf	??_main+2
  1827  02FC  0854               	movf	??_main+2,w
  1828  02FD  00DC               	movwf	_umidita
  1829                           
  1830                           ;main.c: 228:                 pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  1831  02FE  3005               	movlw	5
  1832  02FF  120A  158A  222F  120A  118A  	fcall	_ADC_Read
  1833  0304  1283               	bcf	3,5	;RP0=0, select bank0
  1834  0305  1303               	bcf	3,6	;RP1=0, select bank0
  1835  0306  0824               	movf	?_ADC_Read,w
  1836  0307  00D2               	movwf	??_main
  1837  0308  0825               	movf	?_ADC_Read+1,w
  1838  0309  00D3               	movwf	??_main+1
  1839  030A  0D53               	rlf	??_main+1,w
  1840  030B  0CD3               	rrf	??_main+1,f
  1841  030C  0CD2               	rrf	??_main,f
  1842  030D  0D53               	rlf	??_main+1,w
  1843  030E  0CD3               	rrf	??_main+1,f
  1844  030F  0CD2               	rrf	??_main,f
  1845  0310  0852               	movf	??_main,w
  1846  0311  00C8               	movwf	map@x
  1847  0312  0853               	movf	??_main+1,w
  1848  0313  00C9               	movwf	map@x+1
  1849  0314  3000               	movlw	0
  1850  0315  00CA               	movwf	map@in_min
  1851  0316  00CB               	movwf	map@in_min+1
  1852  0317  30FF               	movlw	255
  1853  0318  00CC               	movwf	map@in_max
  1854  0319  3000               	movlw	0
  1855  031A  00CD               	movwf	map@in_max+1
  1856  031B  3000               	movlw	0
  1857  031C  00CE               	movwf	map@out_min
  1858  031D  00CF               	movwf	map@out_min+1
  1859  031E  3064               	movlw	100
  1860  031F  00D0               	movwf	map@out_max
  1861  0320  3000               	movlw	0
  1862  0321  00D1               	movwf	map@out_max+1
  1863  0322  120A  158A  22AD  120A  118A  	fcall	_map
  1864  0327  1283               	bcf	3,5	;RP0=0, select bank0
  1865  0328  1303               	bcf	3,6	;RP1=0, select bank0
  1866  0329  0848               	movf	?_map,w
  1867  032A  00D4               	movwf	??_main+2
  1868  032B  0854               	movf	??_main+2,w
  1869  032C  00DB               	movwf	_pressione
  1870  032D                     l3607:	
  1871                           
  1872                           ;main.c: 229:                 sendByte(0x02, 0x00, temp);
  1873  032D  01B8               	clrf	sendByte@byte1
  1874  032E  085D               	movf	_temp,w
  1875  032F  00D2               	movwf	??_main
  1876  0330  0852               	movf	??_main,w
  1877  0331  00B9               	movwf	sendByte@valore
  1878  0332  3002               	movlw	2
  1879  0333  120A  158A  227C  120A  118A  	fcall	_sendByte
  1880  0338                     l3609:	
  1881                           
  1882                           ;main.c: 230:                 sendByte(0x04, 0x00, umidita);
  1883  0338  1283               	bcf	3,5	;RP0=0, select bank0
  1884  0339  1303               	bcf	3,6	;RP1=0, select bank0
  1885  033A  01B8               	clrf	sendByte@byte1
  1886  033B  085C               	movf	_umidita,w
  1887  033C  00D2               	movwf	??_main
  1888  033D  0852               	movf	??_main,w
  1889  033E  00B9               	movwf	sendByte@valore
  1890  033F  3004               	movlw	4
  1891  0340  120A  158A  227C  120A  118A  	fcall	_sendByte
  1892  0345                     l3611:	
  1893                           
  1894                           ;main.c: 231:                 sendByte(0x06, 0x00, pressione);
  1895  0345  1283               	bcf	3,5	;RP0=0, select bank0
  1896  0346  1303               	bcf	3,6	;RP1=0, select bank0
  1897  0347  01B8               	clrf	sendByte@byte1
  1898  0348  085B               	movf	_pressione,w
  1899  0349  00D2               	movwf	??_main
  1900  034A  0852               	movf	??_main,w
  1901  034B  00B9               	movwf	sendByte@valore
  1902  034C  3006               	movlw	6
  1903  034D  120A  158A  227C  120A  118A  	fcall	_sendByte
  1904  0352                     l3613:	
  1905                           
  1906                           ;main.c: 233:                 for (unsigned char i = 0; i < 5; i++)
  1907  0352  1683               	bsf	3,5	;RP0=1, select bank3
  1908  0353  1703               	bsf	3,6	;RP1=1, select bank3
  1909  0354  01E9               	clrf	main@i_530^(0+384)
  1910  0355                     l3615:	
  1911  0355  3005               	movlw	5
  1912  0356  0269               	subwf	main@i_530^(0+384),w
  1913  0357  1C03               	skipc
  1914  0358  2B5A               	goto	u2951
  1915  0359  2B5B               	goto	u2950
  1916  035A                     u2951:	
  1917  035A  2B5C               	goto	l3619
  1918  035B                     u2950:	
  1919  035B  2B92               	goto	l240
  1920  035C                     l3619:	
  1921                           
  1922                           ;main.c: 234:                 {;main.c: 235:                     dataFromGateway[i] = 0;
  1923  035C  0869               	movf	main@i_530^(0+384),w
  1924  035D  3E90               	addlw	(low (_dataFromGateway| (0+256)))& (0+255)
  1925  035E  0084               	movwf	4
  1926  035F  1783               	bsf	3,7	;select IRP bank3
  1927  0360  0180               	clrf	0
  1928  0361                     l3621:	
  1929                           
  1930                           ;main.c: 236:                 }
  1931  0361  3001               	movlw	1
  1932  0362  1283               	bcf	3,5	;RP0=0, select bank0
  1933  0363  1303               	bcf	3,6	;RP1=0, select bank0
  1934  0364  00D2               	movwf	??_main
  1935  0365  0852               	movf	??_main,w
  1936  0366  1683               	bsf	3,5	;RP0=1, select bank3
  1937  0367  1703               	bsf	3,6	;RP1=1, select bank3
  1938  0368  07E9               	addwf	main@i_530^(0+384),f
  1939  0369  2B55               	goto	l3615
  1940  036A                     l3625:	
  1941                           
  1942                           ;main.c: 240:                 if (timerReadFromGateway >= 4)
  1943  036A  3004               	movlw	4
  1944  036B  025E               	subwf	_timerReadFromGateway,w
  1945  036C  1C03               	skipc
  1946  036D  2B6F               	goto	u2961
  1947  036E  2B70               	goto	u2960
  1948  036F                     u2961:	
  1949  036F  2B73               	goto	l3629
  1950  0370                     u2960:	
  1951  0370                     l3627:	
  1952                           
  1953                           ;main.c: 241:                 {;main.c: 242:                     readGatewayDone.Bit = 1
      +                          ;
  1954  0370  1465               	bsf	_readGatewayDone,0
  1955                           
  1956                           ;main.c: 243:                     readGatewayDone.Timeout = 1;
  1957  0371  14E5               	bsf	_readGatewayDone,1
  1958                           
  1959                           ;main.c: 244:                     readGateway.Bit = 0;
  1960  0372  1064               	bcf	_readGateway,0
  1961  0373                     l3629:	
  1962                           
  1963                           ;main.c: 247:                 if (dataFromGatewayIndex >= 15)
  1964  0373  300F               	movlw	15
  1965  0374  025F               	subwf	_dataFromGatewayIndex,w
  1966  0375  1C03               	skipc
  1967  0376  2B78               	goto	u2971
  1968  0377  2B79               	goto	u2970
  1969  0378                     u2971:	
  1970  0378  2B92               	goto	l240
  1971  0379                     u2970:	
  1972  0379                     l3631:	
  1973                           
  1974                           ;main.c: 248:                 {;main.c: 249:                     readGatewayDone.Bit = 1
      +                          ;
  1975  0379  1465               	bsf	_readGatewayDone,0
  1976                           
  1977                           ;main.c: 250:                     readGatewayDone.Timeout = 0;
  1978  037A  10E5               	bcf	_readGatewayDone,1
  1979                           
  1980                           ;main.c: 251:                     readGateway.Bit = 0;
  1981  037B  1064               	bcf	_readGateway,0
  1982  037C  2B92               	goto	l240
  1983  037D                     l3635:	
  1984  037D  1683               	bsf	3,5	;RP0=1, select bank3
  1985  037E  1703               	bsf	3,6	;RP1=1, select bank3
  1986  037F  0810               	movf	_dataFromGateway^(0+384),w
  1987  0380  397F               	andlw	127
  1988  0381  1283               	bcf	3,5	;RP0=0, select bank0
  1989  0382  1303               	bcf	3,6	;RP1=0, select bank0
  1990  0383  00D2               	movwf	??_main
  1991  0384  01D3               	clrf	??_main+1
  1992                           
  1993                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1994                           ; Switch size 1, requested type "simple"
  1995                           ; Number of cases is 1, Range of values is 0 to 0
  1996                           ; switch strategies available:
  1997                           ; Name         Instructions Cycles
  1998                           ; simple_byte            4     3 (average)
  1999                           ; direct_byte           11     8 (fixed)
  2000                           ; jumptable            260     6 (fixed)
  2001                           ;	Chosen strategy is simple_byte
  2002  0385  0853               	movf	??_main+1,w
  2003  0386  3A00               	xorlw	0	; case 0
  2004  0387  1903               	skipnz
  2005  0388  2B8A               	goto	l3945
  2006  0389  2B6A               	goto	l3625
  2007  038A                     l3945:	
  2008                           
  2009                           ; Switch size 1, requested type "simple"
  2010                           ; Number of cases is 2, Range of values is 8 to 10
  2011                           ; switch strategies available:
  2012                           ; Name         Instructions Cycles
  2013                           ; simple_byte            7     4 (average)
  2014                           ; direct_byte           20    11 (fixed)
  2015                           ; jumptable            263     9 (fixed)
  2016                           ;	Chosen strategy is simple_byte
  2017  038A  0852               	movf	??_main,w
  2018  038B  3A08               	xorlw	8	; case 8
  2019  038C  1903               	skipnz
  2020  038D  2892               	goto	l242
  2021  038E  3A02               	xorlw	2	; case 10
  2022  038F  1903               	skipnz
  2023  0390  2A9D               	goto	l256
  2024  0391  2B6A               	goto	l3625
  2025  0392                     l240:	
  2026                           ;main.c: 255:         }
  2027                           
  2028                           
  2029                           ;main.c: 258:         if (readGatewayDone.Bit)
  2030  0392  1283               	bcf	3,5	;RP0=0, select bank0
  2031  0393  1303               	bcf	3,6	;RP1=0, select bank0
  2032  0394  1C65               	btfss	_readGatewayDone,0
  2033  0395  2B97               	goto	u2981
  2034  0396  2B98               	goto	u2980
  2035  0397                     u2981:	
  2036  0397  2BAC               	goto	l3649
  2037  0398                     u2980:	
  2038  0398                     l3637:	
  2039                           
  2040                           ;main.c: 259:         {;main.c: 261:             readGateway.Bit = 0;
  2041  0398  1064               	bcf	_readGateway,0
  2042  0399                     l3639:	
  2043                           
  2044                           ;main.c: 262:             dataFromGatewayIndex = 0;
  2045  0399  01DF               	clrf	_dataFromGatewayIndex
  2046  039A                     l3641:	
  2047                           
  2048                           ;main.c: 263:             readGatewayDone.Bit = 0;
  2049  039A  1065               	bcf	_readGatewayDone,0
  2050                           
  2051                           ;main.c: 264:             timerReadFromGateway = 0;
  2052  039B  01DE               	clrf	_timerReadFromGateway
  2053  039C                     l3643:	
  2054                           
  2055                           ;main.c: 267:             if (readGatewayDone.Timeout)
  2056  039C  1CE5               	btfss	_readGatewayDone,1
  2057  039D  2B9F               	goto	u2991
  2058  039E  2BA0               	goto	u2990
  2059  039F                     u2991:	
  2060  039F  2BA2               	goto	l3647
  2061  03A0                     u2990:	
  2062  03A0                     l3645:	
  2063                           
  2064                           ;main.c: 268:             {;main.c: 269:                 readGatewayDone.Timeout = 0;
  2065  03A0  10E5               	bcf	_readGatewayDone,1
  2066                           
  2067                           ;main.c: 270:             }
  2068  03A1  2BAC               	goto	l3649
  2069  03A2                     l3647:	
  2070                           
  2071                           ;main.c: 273:             {;main.c: 275:                 SetReceivedTimes(dataFromGatewa
      +                          y, Semafori);
  2072  03A2  30DA               	movlw	(low (_Semafori| 0))& (0+255)
  2073  03A3  00D2               	movwf	??_main
  2074  03A4  0852               	movf	??_main,w
  2075  03A5  00AC               	movwf	SetReceivedTimes@_semafori
  2076  03A6  3090               	movlw	(low (_dataFromGateway| (0+256)))& (0+255)
  2077  03A7  120A  158A  2551  120A  118A  	fcall	_SetReceivedTimes
  2078  03AC                     l3649:	
  2079                           
  2080                           ;main.c: 281:         if (secondPassed.Bit && cycled.Bit)
  2081  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  2082  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  2083  03AE  1C63               	btfss	_secondPassed,0
  2084  03AF  2BB1               	goto	u3001
  2085  03B0  2BB2               	goto	u3000
  2086  03B1                     u3001:	
  2087  03B1  2CC2               	goto	l3691
  2088  03B2                     u3000:	
  2089  03B2                     l3651:	
  2090  03B2  1C62               	btfss	_cycled,0
  2091  03B3  2BB5               	goto	u3011
  2092  03B4  2BB6               	goto	u3010
  2093  03B5                     u3011:	
  2094  03B5  2CC2               	goto	l3691
  2095  03B6                     u3010:	
  2096  03B6                     l3653:	
  2097                           
  2098                           ;main.c: 282:         {;main.c: 283:             for (unsigned char i = 0; i < n_semafor
      +                          i; i++)
  2099  03B6  1683               	bsf	3,5	;RP0=1, select bank3
  2100  03B7  1703               	bsf	3,6	;RP1=1, select bank3
  2101  03B8  01ED               	clrf	main@i_532^(0+384)
  2102  03B9                     l3655:	
  2103  03B9  3008               	movlw	8
  2104  03BA  026D               	subwf	main@i_532^(0+384),w
  2105  03BB  1C03               	skipc
  2106  03BC  2BBE               	goto	u3021
  2107  03BD  2BBF               	goto	u3020
  2108  03BE                     u3021:	
  2109  03BE  2BC0               	goto	l3659
  2110  03BF                     u3020:	
  2111  03BF  2CC2               	goto	l3691
  2112  03C0                     l3659:	
  2113                           
  2114                           ;main.c: 284:             {;main.c: 285:                 if ((*Semafori[i]).times[0] != 
      +                          0)
  2115  03C0  086D               	movf	main@i_532^(0+384),w
  2116  03C1  3EDA               	addlw	(low (_Semafori| 0))& (0+255)
  2117  03C2  0084               	movwf	4
  2118  03C3  1383               	bcf	3,7	;select IRP bank1
  2119  03C4  0800               	movf	0,w
  2120  03C5  0084               	movwf	4
  2121  03C6  1783               	bsf	3,7	;select IRP bank2
  2122  03C7  0800               	movf	0,w
  2123  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  2124  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  2125  03CA  00D2               	movwf	??_main
  2126  03CB  0A84               	incf	4,f
  2127  03CC  0800               	movf	0,w
  2128  03CD  00D3               	movwf	??_main+1
  2129  03CE  0852               	movf	??_main,w
  2130  03CF  0453               	iorwf	??_main+1,w
  2131  03D0  1903               	btfsc	3,2
  2132  03D1  2BD3               	goto	u3031
  2133  03D2  2BD4               	goto	u3030
  2134  03D3                     u3031:	
  2135  03D3  2CB9               	goto	l3687
  2136  03D4                     u3030:	
  2137  03D4                     l3661:	
  2138                           
  2139                           ;main.c: 286:                 {;main.c: 287:                     time[i]++;
  2140  03D4  1683               	bsf	3,5	;RP0=1, select bank3
  2141  03D5  1703               	bsf	3,6	;RP1=1, select bank3
  2142  03D6  086D               	movf	main@i_532^(0+384),w
  2143  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  2144  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  2145  03D9  00D2               	movwf	??_main
  2146  03DA  0752               	addwf	??_main,w
  2147  03DB  3EA4               	addlw	(low (_time| 0))& (0+255)
  2148  03DC  0084               	movwf	4
  2149  03DD  3001               	movlw	1
  2150  03DE  1383               	bcf	3,7	;select IRP bank1
  2151  03DF  0780               	addwf	0,f
  2152  03E0  0A84               	incf	4,f
  2153  03E1  1803               	skipnc
  2154  03E2  0A80               	incf	0,f
  2155                           
  2156                           ;main.c: 288:                     unsigned char lux_select = (*Semafori[i]).lux_select;
  2157  03E3  1683               	bsf	3,5	;RP0=1, select bank3
  2158  03E4  1703               	bsf	3,6	;RP1=1, select bank3
  2159  03E5  086D               	movf	main@i_532^(0+384),w
  2160  03E6  3EDA               	addlw	(low (_Semafori| 0))& (0+255)
  2161  03E7  0084               	movwf	4
  2162  03E8  0800               	movf	0,w
  2163  03E9  3E0C               	addlw	12
  2164  03EA  0084               	movwf	4
  2165  03EB  1783               	bsf	3,7	;select IRP bank2
  2166  03EC  0800               	movf	0,w
  2167  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2168  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  2169  03EF  00D2               	movwf	??_main
  2170  03F0  0852               	movf	??_main,w
  2171  03F1  1683               	bsf	3,5	;RP0=1, select bank3
  2172  03F2  1703               	bsf	3,6	;RP1=1, select bank3
  2173  03F3  00EC               	movwf	main@lux_select^(0+384)
  2174                           
  2175                           ;main.c: 290:                     if ((*Semafori[i]).times[lux_select] - time[i] < 0)
  2176  03F4  086D               	movf	main@i_532^(0+384),w
  2177  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2178  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  2179  03F7  00D2               	movwf	??_main
  2180  03F8  0752               	addwf	??_main,w
  2181  03F9  3EA4               	addlw	(low (_time| 0))& (0+255)
  2182  03FA  0084               	movwf	4
  2183  03FB  1383               	bcf	3,7	;select IRP bank1
  2184  03FC  0800               	movf	0,w
  2185  03FD  00D3               	movwf	??_main+1
  2186  03FE  0A84               	incf	4,f
  2187  03FF  0800               	movf	0,w
  2188  0400  00D4               	movwf	??_main+2
  2189  0401  1683               	bsf	3,5	;RP0=1, select bank3
  2190  0402  1703               	bsf	3,6	;RP1=1, select bank3
  2191  0403  086D               	movf	main@i_532^(0+384),w
  2192  0404  3EDA               	addlw	(low (_Semafori| 0))& (0+255)
  2193  0405  0084               	movwf	4
  2194  0406  086C               	movf	main@lux_select^(0+384),w
  2195  0407  1283               	bcf	3,5	;RP0=0, select bank0
  2196  0408  1303               	bcf	3,6	;RP1=0, select bank0
  2197  0409  00D5               	movwf	??_main+3
  2198  040A  0755               	addwf	??_main+3,w
  2199  040B  0700               	addwf	0,w
  2200  040C  00D6               	movwf	??_main+4
  2201  040D  0856               	movf	??_main+4,w
  2202  040E  0084               	movwf	4
  2203  040F  1783               	bsf	3,7	;select IRP bank2
  2204  0410  0800               	movf	0,w
  2205  0411  00D7               	movwf	??_main+5
  2206  0412  0A84               	incf	4,f
  2207  0413  0800               	movf	0,w
  2208  0414  00D8               	movwf	??_main+6
  2209  0415  0853               	movf	??_main+1,w
  2210  0416  0257               	subwf	??_main+5,w
  2211  0417  00D9               	movwf	??_main+7
  2212  0418  0854               	movf	??_main+2,w
  2213  0419  1C03               	skipc
  2214  041A  0A54               	incf	??_main+2,w
  2215  041B  0258               	subwf	??_main+6,w
  2216  041C  00DA               	movwf	??_main+8
  2217  041D  1FDA               	btfss	??_main+8,7
  2218  041E  2C20               	goto	u3041
  2219  041F  2C21               	goto	u3040
  2220  0420                     u3041:	
  2221  0420  2C5C               	goto	l269
  2222  0421                     u3040:	
  2223  0421                     l3663:	
  2224                           
  2225                           ;main.c: 291:                     {;main.c: 292:                         lux_select++;
  2226  0421  3001               	movlw	1
  2227  0422  00D2               	movwf	??_main
  2228  0423  0852               	movf	??_main,w
  2229  0424  1683               	bsf	3,5	;RP0=1, select bank3
  2230  0425  1703               	bsf	3,6	;RP1=1, select bank3
  2231  0426  07EC               	addwf	main@lux_select^(0+384),f
  2232  0427                     l3665:	
  2233                           
  2234                           ;main.c: 293:                         time[i] = 1;
  2235  0427  086D               	movf	main@i_532^(0+384),w
  2236  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2237  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2238  042A  00D2               	movwf	??_main
  2239  042B  0752               	addwf	??_main,w
  2240  042C  3EA4               	addlw	(low (_time| 0))& (0+255)
  2241  042D  0084               	movwf	4
  2242  042E  3001               	movlw	1
  2243  042F  1383               	bcf	3,7	;select IRP bank1
  2244  0430  0080               	movwf	0
  2245  0431  0A84               	incf	4,f
  2246  0432  3000               	movlw	0
  2247  0433  0080               	movwf	0
  2248  0434                     l3667:	
  2249                           
  2250                           ;main.c: 295:                         if (lux_select >= 3)
  2251  0434  3003               	movlw	3
  2252  0435  1683               	bsf	3,5	;RP0=1, select bank3
  2253  0436  1703               	bsf	3,6	;RP1=1, select bank3
  2254  0437  026C               	subwf	main@lux_select^(0+384),w
  2255  0438  1C03               	skipc
  2256  0439  2C3B               	goto	u3051
  2257  043A  2C3C               	goto	u3050
  2258  043B                     u3051:	
  2259  043B  2C5C               	goto	l269
  2260  043C                     u3050:	
  2261  043C                     l3669:	
  2262                           
  2263                           ;main.c: 296:                         {;main.c: 297:                             lux_sel
      +                          ect = 0;
  2264  043C  01EC               	clrf	main@lux_select^(0+384)
  2265  043D                     l3671:	
  2266                           
  2267                           ;main.c: 299:                             if (i == 0)
  2268  043D  086D               	movf	main@i_532^(0+384),w
  2269  043E  1D03               	btfss	3,2
  2270  043F  2C41               	goto	u3061
  2271  0440  2C42               	goto	u3060
  2272  0441                     u3061:	
  2273  0441  2C5C               	goto	l269
  2274  0442                     u3060:	
  2275  0442                     l3673:	
  2276                           
  2277                           ;main.c: 300:                             {;main.c: 301:                                
      +                           UpdateTimes(Semafori);
  2278  0442  30DA               	movlw	(low (_Semafori| 0))& (0+255)
  2279  0443  120A  158A  26F1  120A  118A  	fcall	_UpdateTimes
  2280  0448                     l3675:	
  2281                           
  2282                           ;main.c: 303:                                 time[0] = 1;
  2283  0448  3001               	movlw	1
  2284  0449  1683               	bsf	3,5	;RP0=1, select bank1
  2285  044A  1303               	bcf	3,6	;RP1=0, select bank1
  2286  044B  00A4               	movwf	_time^(0+128)
  2287  044C  3000               	movlw	0
  2288  044D  00A5               	movwf	(_time^(0+128)+1)
  2289  044E                     l3677:	
  2290                           
  2291                           ;main.c: 304:                                 time[1] = 1;
  2292  044E  3001               	movlw	1
  2293  044F  00A6               	movwf	(_time^(0+128)+2)
  2294  0450  3000               	movlw	0
  2295  0451  00A7               	movwf	(_time^(0+128)+3)
  2296  0452                     l3679:	
  2297                           
  2298                           ;main.c: 306:                                 (*Semafori[0]).lux_select = 0;
  2299  0452  085A               	movf	_Semafori^(0+128),w
  2300  0453  3E0C               	addlw	12
  2301  0454  0084               	movwf	4
  2302  0455  1783               	bsf	3,7	;select IRP bank2
  2303  0456  0180               	clrf	0
  2304  0457                     l3681:	
  2305                           
  2306                           ;main.c: 307:                                 (*Semafori[1]).lux_select = 1;
  2307  0457  085B               	movf	(low ((_Semafori| 0+1)))^(0+128),w
  2308  0458  3E0C               	addlw	12
  2309  0459  0084               	movwf	4
  2310  045A  0180               	clrf	0
  2311  045B  0A80               	incf	0,f
  2312  045C                     l269:	
  2313                           ;main.c: 310:                     }
  2314                           
  2315                           
  2316                           ;main.c: 312:                     luciSemaforo(i, lux_select);
  2317  045C  1683               	bsf	3,5	;RP0=1, select bank3
  2318  045D  1703               	bsf	3,6	;RP1=1, select bank3
  2319  045E  086C               	movf	main@lux_select^(0+384),w
  2320  045F  1283               	bcf	3,5	;RP0=0, select bank0
  2321  0460  1303               	bcf	3,6	;RP1=0, select bank0
  2322  0461  00D2               	movwf	??_main
  2323  0462  0852               	movf	??_main,w
  2324  0463  00A4               	movwf	luciSemaforo@lux
  2325  0464  1683               	bsf	3,5	;RP0=1, select bank3
  2326  0465  1703               	bsf	3,6	;RP1=1, select bank3
  2327  0466  086D               	movf	main@i_532^(0+384),w
  2328  0467  120A  158A  23F6  120A  118A  	fcall	_luciSemaforo
  2329  046C                     l3683:	
  2330                           
  2331                           ;main.c: 313:                     (*Semafori[i]).lux_select = lux_select;
  2332  046C  1683               	bsf	3,5	;RP0=1, select bank3
  2333  046D  1703               	bsf	3,6	;RP1=1, select bank3
  2334  046E  086C               	movf	main@lux_select^(0+384),w
  2335  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2336  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2337  0471  00D2               	movwf	??_main
  2338  0472  1683               	bsf	3,5	;RP0=1, select bank3
  2339  0473  1703               	bsf	3,6	;RP1=1, select bank3
  2340  0474  086D               	movf	main@i_532^(0+384),w
  2341  0475  3EDA               	addlw	(low (_Semafori| 0))& (0+255)
  2342  0476  0084               	movwf	4
  2343  0477  1383               	bcf	3,7	;select IRP bank1
  2344  0478  0800               	movf	0,w
  2345  0479  3E0C               	addlw	12
  2346  047A  0084               	movwf	4
  2347  047B  1283               	bcf	3,5	;RP0=0, select bank0
  2348  047C  1303               	bcf	3,6	;RP1=0, select bank0
  2349  047D  0852               	movf	??_main,w
  2350  047E  1783               	bsf	3,7	;select IRP bank2
  2351  047F  0080               	movwf	0
  2352  0480                     l3685:	
  2353                           
  2354                           ;main.c: 314:                     GetDigits(DigitsArr, i, (*Semafori[i]).times[lux_selec
      +                          t] - time[i]);
  2355  0480  1683               	bsf	3,5	;RP0=1, select bank3
  2356  0481  1703               	bsf	3,6	;RP1=1, select bank3
  2357  0482  086D               	movf	main@i_532^(0+384),w
  2358  0483  1283               	bcf	3,5	;RP0=0, select bank0
  2359  0484  1303               	bcf	3,6	;RP1=0, select bank0
  2360  0485  00D2               	movwf	??_main
  2361  0486  0852               	movf	??_main,w
  2362  0487  00C8               	movwf	GetDigits@index
  2363  0488  1683               	bsf	3,5	;RP0=1, select bank3
  2364  0489  1703               	bsf	3,6	;RP1=1, select bank3
  2365  048A  086D               	movf	main@i_532^(0+384),w
  2366  048B  1283               	bcf	3,5	;RP0=0, select bank0
  2367  048C  1303               	bcf	3,6	;RP1=0, select bank0
  2368  048D  00D3               	movwf	??_main+1
  2369  048E  0753               	addwf	??_main+1,w
  2370  048F  3EA4               	addlw	(low (_time| 0))& (0+255)
  2371  0490  0084               	movwf	4
  2372  0491  1383               	bcf	3,7	;select IRP bank1
  2373  0492  0800               	movf	0,w
  2374  0493  00D4               	movwf	??_main+2
  2375  0494  0A84               	incf	4,f
  2376  0495  0800               	movf	0,w
  2377  0496  00D5               	movwf	??_main+3
  2378  0497  1683               	bsf	3,5	;RP0=1, select bank3
  2379  0498  1703               	bsf	3,6	;RP1=1, select bank3
  2380  0499  086D               	movf	main@i_532^(0+384),w
  2381  049A  3EDA               	addlw	(low (_Semafori| 0))& (0+255)
  2382  049B  0084               	movwf	4
  2383  049C  086C               	movf	main@lux_select^(0+384),w
  2384  049D  1283               	bcf	3,5	;RP0=0, select bank0
  2385  049E  1303               	bcf	3,6	;RP1=0, select bank0
  2386  049F  00D6               	movwf	??_main+4
  2387  04A0  0756               	addwf	??_main+4,w
  2388  04A1  0700               	addwf	0,w
  2389  04A2  00D7               	movwf	??_main+5
  2390  04A3  0857               	movf	??_main+5,w
  2391  04A4  0084               	movwf	4
  2392  04A5  1783               	bsf	3,7	;select IRP bank2
  2393  04A6  0800               	movf	0,w
  2394  04A7  00D8               	movwf	??_main+6
  2395  04A8  0A84               	incf	4,f
  2396  04A9  0800               	movf	0,w
  2397  04AA  00D9               	movwf	??_main+7
  2398  04AB  0854               	movf	??_main+2,w
  2399  04AC  0258               	subwf	??_main+6,w
  2400  04AD  00C9               	movwf	GetDigits@Time
  2401  04AE  0855               	movf	??_main+3,w
  2402  04AF  1C03               	skipc
  2403  04B0  0A55               	incf	??_main+3,w
  2404  04B1  0259               	subwf	??_main+7,w
  2405  04B2  00CA               	movwf	GetDigits@Time+1
  2406  04B3  30D2               	movlw	(low (_DigitsArr| 0))& (0+255)
  2407  04B4  120A  118A  24E0  120A  118A  	fcall	_GetDigits
  2408  04B9                     l3687:	
  2409                           
  2410                           ;main.c: 316:             }
  2411  04B9  3001               	movlw	1
  2412  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  2413  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  2414  04BC  00D2               	movwf	??_main
  2415  04BD  0852               	movf	??_main,w
  2416  04BE  1683               	bsf	3,5	;RP0=1, select bank3
  2417  04BF  1703               	bsf	3,6	;RP1=1, select bank3
  2418  04C0  07ED               	addwf	main@i_532^(0+384),f
  2419  04C1  2BB9               	goto	l3655
  2420  04C2                     l3691:	
  2421                           
  2422                           ;main.c: 319:         ShowDigitsOnDisplay();
  2423  04C2  120A  118A  273C  120A  118A  	fcall	_ShowDigitsOnDisplay
  2424  04C7                     l3693:	
  2425                           
  2426                           ;main.c: 325:         if (secondPassed.Bit && cycled.Bit)
  2427  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  2428  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  2429  04C9  1C63               	btfss	_secondPassed,0
  2430  04CA  2CCC               	goto	u3071
  2431  04CB  2CCD               	goto	u3070
  2432  04CC                     u3071:	
  2433  04CC  2CD3               	goto	l272
  2434  04CD                     u3070:	
  2435  04CD                     l3695:	
  2436  04CD  1C62               	btfss	_cycled,0
  2437  04CE  2CD0               	goto	u3081
  2438  04CF  2CD1               	goto	u3080
  2439  04D0                     u3081:	
  2440  04D0  2CD3               	goto	l272
  2441  04D1                     u3080:	
  2442  04D1                     l3697:	
  2443                           
  2444                           ;main.c: 326:         {;main.c: 327:             secondPassed.Bit = 0;
  2445  04D1  1063               	bcf	_secondPassed,0
  2446                           
  2447                           ;main.c: 328:             cycled.Bit = 0;
  2448  04D2  1062               	bcf	_cycled,0
  2449  04D3                     l272:	
  2450                           ;main.c: 329:         }
  2451                           
  2452                           
  2453                           ;main.c: 330:         if (secondPassed.Bit && !cycled.Bit)
  2454  04D3  1C63               	btfss	_secondPassed,0
  2455  04D4  2CD6               	goto	u3091
  2456  04D5  2CD7               	goto	u3090
  2457  04D6                     u3091:	
  2458  04D6  288D               	goto	l3547
  2459  04D7                     u3090:	
  2460  04D7                     l3699:	
  2461  04D7  1862               	btfsc	_cycled,0
  2462  04D8  2CDA               	goto	u3101
  2463  04D9  2CDB               	goto	u3100
  2464  04DA                     u3101:	
  2465  04DA  288D               	goto	l3547
  2466  04DB                     u3100:	
  2467  04DB                     l3701:	
  2468                           
  2469                           ;main.c: 331:         {;main.c: 332:             cycled.Bit = 1;
  2470  04DB  1462               	bsf	_cycled,0
  2471  04DC  288D               	goto	l3547
  2472  04DD  120A  118A  2810   	ljmp	start
  2473  04E0                     __end_of_main:	
  2474                           
  2475                           	psect	text1
  2476  0A7C                     __ptext1:	
  2477 ;; *************** function _sendByte *****************
  2478 ;; Defined at:
  2479 ;;		line 394 in file "main.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  byte0           1    wreg     unsigned char 
  2482 ;;  byte1           1   24[BANK0 ] unsigned char 
  2483 ;;  valore          1   25[BANK0 ] unsigned char 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  byte0           1   29[BANK0 ] unsigned char 
  2486 ;;  i               1   31[BANK0 ] unsigned char 
  2487 ;;  txByte          1   30[BANK0 ] PTR unsigned char 
  2488 ;;		 -> BuildByte@txByte(5), 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2498 ;;      Params:         0       2       0       0       0
  2499 ;;      Locals:         0       3       0       0       0
  2500 ;;      Temps:          0       3       0       0       0
  2501 ;;      Totals:         0       8       0       0       0
  2502 ;;Total ram usage:        8 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    4
  2505 ;; This function calls:
  2506 ;;		_BuildByte
  2507 ;;		_UART_TxChar
  2508 ;; This function is called by:
  2509 ;;		_main
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           
  2514                           ;psect for function _sendByte
  2515  0A7C                     _sendByte:	
  2516                           
  2517                           ;incstack = 0
  2518                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2519                           ;sendByte@byte0 stored from wreg
  2520  0A7C  1283               	bcf	3,5	;RP0=0, select bank0
  2521  0A7D  1303               	bcf	3,6	;RP1=0, select bank0
  2522  0A7E  00BD               	movwf	sendByte@byte0
  2523  0A7F                     l3421:	
  2524                           
  2525                           ;main.c: 394: void sendByte(char byte0, char byte1, char valore);main.c: 395: {;main.c: 
      +                          396:     char *txByte;;main.c: 397:     txByte = BuildByte(byte0, byte1, valore);
  2526  0A7F  0838               	movf	sendByte@byte1,w
  2527  0A80  00BA               	movwf	??_sendByte
  2528  0A81  083A               	movf	??_sendByte,w
  2529  0A82  00A4               	movwf	BuildByte@byte1
  2530  0A83  0839               	movf	sendByte@valore,w
  2531  0A84  00BB               	movwf	??_sendByte+1
  2532  0A85  083B               	movf	??_sendByte+1,w
  2533  0A86  00A5               	movwf	BuildByte@valore
  2534  0A87  083D               	movf	sendByte@byte0,w
  2535  0A88  120A  118A  25AD  120A  158A  	fcall	_BuildByte
  2536  0A8D  1283               	bcf	3,5	;RP0=0, select bank0
  2537  0A8E  1303               	bcf	3,6	;RP1=0, select bank0
  2538  0A8F  00BC               	movwf	??_sendByte+2
  2539  0A90  083C               	movf	??_sendByte+2,w
  2540  0A91  00BE               	movwf	sendByte@txByte
  2541  0A92                     l3423:	
  2542                           
  2543                           ;main.c: 399:     for (unsigned char i = 0; i < 5; i++)
  2544  0A92  01BF               	clrf	sendByte@i
  2545  0A93                     l3429:	
  2546                           
  2547                           ;main.c: 400:     {;main.c: 401:         UART_TxChar(*(txByte++));
  2548  0A93  083E               	movf	sendByte@txByte,w
  2549  0A94  0084               	movwf	4
  2550  0A95  1383               	bcf	3,7	;select IRP bank0
  2551  0A96  0800               	movf	0,w
  2552  0A97  120A  158A  21EA  120A  158A  	fcall	_UART_TxChar
  2553  0A9C                     l3431:	
  2554  0A9C  3001               	movlw	1
  2555  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  2556  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  2557  0A9F  00BA               	movwf	??_sendByte
  2558  0AA0  083A               	movf	??_sendByte,w
  2559  0AA1  07BE               	addwf	sendByte@txByte,f
  2560  0AA2                     l3433:	
  2561                           
  2562                           ;main.c: 402:     }
  2563  0AA2  3001               	movlw	1
  2564  0AA3  00BA               	movwf	??_sendByte
  2565  0AA4  083A               	movf	??_sendByte,w
  2566  0AA5  07BF               	addwf	sendByte@i,f
  2567  0AA6                     l3435:	
  2568  0AA6  3005               	movlw	5
  2569  0AA7  023F               	subwf	sendByte@i,w
  2570  0AA8  1C03               	skipc
  2571  0AA9  2AAB               	goto	u2841
  2572  0AAA  2AAC               	goto	u2840
  2573  0AAB                     u2841:	
  2574  0AAB  2A93               	goto	l3429
  2575  0AAC                     u2840:	
  2576  0AAC                     l311:	
  2577  0AAC  0008               	return
  2578  0AAD                     __end_of_sendByte:	
  2579                           
  2580                           	psect	text2
  2581  09EA                     __ptext2:	
  2582 ;; *************** function _UART_TxChar *****************
  2583 ;; Defined at:
  2584 ;;		line 369 in file "main.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  ch              1    wreg     unsigned char 
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;  ch              1    4[BANK0 ] unsigned char 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2598 ;;      Params:         0       0       0       0       0
  2599 ;;      Locals:         0       1       0       0       0
  2600 ;;      Temps:          0       0       0       0       0
  2601 ;;      Totals:         0       1       0       0       0
  2602 ;;Total ram usage:        1 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    3
  2605 ;; This function calls:
  2606 ;;		Nothing
  2607 ;; This function is called by:
  2608 ;;		_sendByte
  2609 ;;		_UART_Write_Text
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _UART_TxChar
  2615  09EA                     _UART_TxChar:	
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _UART_TxChar: [wreg]
  2619                           ;UART_TxChar@ch stored from wreg
  2620  09EA  1283               	bcf	3,5	;RP0=0, select bank0
  2621  09EB  1303               	bcf	3,6	;RP1=0, select bank0
  2622  09EC  00A4               	movwf	UART_TxChar@ch
  2623  09ED                     l3113:	
  2624  09ED                     l291:	
  2625                           ;main.c: 372:         ;
  2626                           
  2627                           
  2628                           ;main.c: 371:     while (!TXIF)
  2629  09ED  1E0C               	btfss	12,4	;volatile
  2630  09EE  29F0               	goto	u2331
  2631  09EF  29F1               	goto	u2330
  2632  09F0                     u2331:	
  2633  09F0  29ED               	goto	l291
  2634  09F1                     u2330:	
  2635  09F1                     l293:	
  2636                           
  2637                           ;main.c: 373:     TXIF = 0;
  2638  09F1  120C               	bcf	12,4	;volatile
  2639  09F2                     l3115:	
  2640                           
  2641                           ;main.c: 374:     TXREG = ch;
  2642  09F2  0824               	movf	UART_TxChar@ch,w
  2643  09F3  0099               	movwf	25	;volatile
  2644  09F4                     l294:	
  2645  09F4  0008               	return
  2646  09F5                     __end_of_UART_TxChar:	
  2647                           
  2648                           	psect	text3
  2649  05AD                     __ptext3:	
  2650 ;; *************** function _BuildByte *****************
  2651 ;; Defined at:
  2652 ;;		line 2 in file "./CustomLib/Serial.h"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  byte0           1    wreg     unsigned char 
  2655 ;;  byte1           1    4[BANK0 ] unsigned char 
  2656 ;;  valore          1    5[BANK0 ] unsigned char 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  byte0           1    8[BANK0 ] unsigned char 
  2659 ;;  y               2   18[BANK0 ] int 
  2660 ;;  y               2   16[BANK0 ] int 
  2661 ;;  i               2   22[BANK0 ] int 
  2662 ;;  i               2   20[BANK0 ] int 
  2663 ;;  txByte          5    9[BANK0 ] unsigned char [5]
  2664 ;;  sommaColumn     1   15[BANK0 ] unsigned char 
  2665 ;;  sommaRow        1   14[BANK0 ] unsigned char 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      PTR unsigned char 
  2668 ;; Registers used:
  2669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2675 ;;      Params:         0       2       0       0       0
  2676 ;;      Locals:         0      16       0       0       0
  2677 ;;      Temps:          0       2       0       0       0
  2678 ;;      Totals:         0      20       0       0       0
  2679 ;;Total ram usage:       20 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    3
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_sendByte
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           
  2690                           ;psect for function _BuildByte
  2691  05AD                     _BuildByte:	
  2692                           
  2693                           ;incstack = 0
  2694                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2695                           ;BuildByte@byte0 stored from wreg
  2696  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  2697  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  2698  05AF  00A8               	movwf	BuildByte@byte0
  2699  05B0                     l3031:	
  2700                           
  2701                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2702  05B0  0828               	movf	BuildByte@byte0,w
  2703  05B1  397F               	andlw	127
  2704  05B2  00A6               	movwf	??_BuildByte
  2705  05B3  0826               	movf	??_BuildByte,w
  2706  05B4  00A9               	movwf	BuildByte@txByte
  2707                           
  2708                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2709  05B5  0824               	movf	BuildByte@byte1,w
  2710  05B6  397F               	andlw	127
  2711  05B7  00A6               	movwf	??_BuildByte
  2712  05B8  0826               	movf	??_BuildByte,w
  2713  05B9  00AA               	movwf	BuildByte@txByte+1
  2714                           
  2715                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2716  05BA  0825               	movf	BuildByte@valore,w
  2717  05BB  397F               	andlw	127
  2718  05BC  00A6               	movwf	??_BuildByte
  2719  05BD  0826               	movf	??_BuildByte,w
  2720  05BE  00AB               	movwf	BuildByte@txByte+2
  2721  05BF                     l3033:	
  2722                           
  2723                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2724  05BF  0825               	movf	BuildByte@valore,w
  2725  05C0  00A6               	movwf	??_BuildByte
  2726  05C1  3007               	movlw	7
  2727  05C2                     u2225:	
  2728  05C2  1003               	clrc
  2729  05C3  0CA6               	rrf	??_BuildByte,f
  2730  05C4  3EFF               	addlw	-1
  2731  05C5  1D03               	skipz
  2732  05C6  2DC2               	goto	u2225
  2733  05C7  0826               	movf	??_BuildByte,w
  2734  05C8  397F               	andlw	127
  2735  05C9  00A7               	movwf	??_BuildByte+1
  2736  05CA  0827               	movf	??_BuildByte+1,w
  2737  05CB  00AC               	movwf	BuildByte@txByte+3
  2738  05CC                     l3035:	
  2739                           
  2740                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2741  05CC  01AE               	clrf	BuildByte@sommaRow
  2742  05CD                     l3037:	
  2743                           
  2744                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2745  05CD  01AF               	clrf	BuildByte@sommaColumn
  2746  05CE                     l3039:	
  2747                           
  2748                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2749  05CE  01B4               	clrf	BuildByte@i
  2750  05CF  01B5               	clrf	BuildByte@i+1
  2751  05D0                     l3045:	
  2752                           
  2753                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2754  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  2755  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  2756  05D2  01B0               	clrf	BuildByte@y
  2757  05D3  01B1               	clrf	BuildByte@y+1
  2758  05D4                     l3051:	
  2759                           
  2760                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2761  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  2762  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  2763  05D6  0834               	movf	BuildByte@i,w
  2764  05D7  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2765  05D8  0084               	movwf	4
  2766  05D9  1383               	bcf	3,7	;select IRP bank0
  2767  05DA  0800               	movf	0,w
  2768  05DB  00A6               	movwf	??_BuildByte
  2769  05DC  0A30               	incf	BuildByte@y,w
  2770  05DD  2DE0               	goto	u2234
  2771  05DE                     u2235:	
  2772  05DE  1003               	clrc
  2773  05DF  0CA6               	rrf	??_BuildByte,f
  2774  05E0                     u2234:	
  2775  05E0  3EFF               	addlw	-1
  2776  05E1  1D03               	skipz
  2777  05E2  2DDE               	goto	u2235
  2778  05E3  0826               	movf	??_BuildByte,w
  2779  05E4  3901               	andlw	1
  2780  05E5  00A7               	movwf	??_BuildByte+1
  2781  05E6  0827               	movf	??_BuildByte+1,w
  2782  05E7  07AE               	addwf	BuildByte@sommaRow,f
  2783  05E8                     l3053:	
  2784                           
  2785                           ;./CustomLib/Serial.h: 18:         }
  2786  05E8  3001               	movlw	1
  2787  05E9  07B0               	addwf	BuildByte@y,f
  2788  05EA  1803               	skipnc
  2789  05EB  0AB1               	incf	BuildByte@y+1,f
  2790  05EC  3000               	movlw	0
  2791  05ED  07B1               	addwf	BuildByte@y+1,f
  2792  05EE                     l3055:	
  2793  05EE  0831               	movf	BuildByte@y+1,w
  2794  05EF  3A80               	xorlw	128
  2795  05F0  00FF               	movwf	btemp+1
  2796  05F1  3080               	movlw	128
  2797  05F2  027F               	subwf	btemp+1,w
  2798  05F3  1D03               	skipz
  2799  05F4  2DF7               	goto	u2245
  2800  05F5  3008               	movlw	8
  2801  05F6  0230               	subwf	BuildByte@y,w
  2802  05F7                     u2245:	
  2803  05F7  1C03               	skipc
  2804  05F8  2DFA               	goto	u2241
  2805  05F9  2DFB               	goto	u2240
  2806  05FA                     u2241:	
  2807  05FA  2DD4               	goto	l3051
  2808  05FB                     u2240:	
  2809  05FB                     l105:	
  2810                           
  2811                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  2812  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  2813  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  2814  05FD  1C2E               	btfss	BuildByte@sommaRow,0
  2815  05FE  2E00               	goto	u2251
  2816  05FF  2E01               	goto	u2250
  2817  0600                     u2251:	
  2818  0600  2E09               	goto	l3059
  2819  0601                     u2250:	
  2820  0601                     l3057:	
  2821                           
  2822                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  2823  0601  3080               	movlw	128
  2824  0602  00A6               	movwf	??_BuildByte
  2825  0603  0834               	movf	BuildByte@i,w
  2826  0604  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2827  0605  0084               	movwf	4
  2828  0606  0826               	movf	??_BuildByte,w
  2829  0607  1383               	bcf	3,7	;select IRP bank0
  2830  0608  0780               	addwf	0,f
  2831  0609                     l3059:	
  2832                           
  2833                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  2834  0609  01AE               	clrf	BuildByte@sommaRow
  2835  060A                     l3063:	
  2836                           ;./CustomLib/Serial.h: 23:         }
  2837                           
  2838                           
  2839                           ;./CustomLib/Serial.h: 28:     }
  2840  060A  3001               	movlw	1
  2841  060B  07B4               	addwf	BuildByte@i,f
  2842  060C  1803               	skipnc
  2843  060D  0AB5               	incf	BuildByte@i+1,f
  2844  060E  3000               	movlw	0
  2845  060F  07B5               	addwf	BuildByte@i+1,f
  2846  0610                     l3065:	
  2847  0610  0835               	movf	BuildByte@i+1,w
  2848  0611  3A80               	xorlw	128
  2849  0612  00FF               	movwf	btemp+1
  2850  0613  3080               	movlw	128
  2851  0614  027F               	subwf	btemp+1,w
  2852  0615  1D03               	skipz
  2853  0616  2E19               	goto	u2265
  2854  0617  3004               	movlw	4
  2855  0618  0234               	subwf	BuildByte@i,w
  2856  0619                     u2265:	
  2857  0619  1C03               	skipc
  2858  061A  2E1C               	goto	u2261
  2859  061B  2E1D               	goto	u2260
  2860  061C                     u2261:	
  2861  061C  2DD0               	goto	l3045
  2862  061D                     u2260:	
  2863  061D                     l3067:	
  2864                           
  2865                           ;./CustomLib/Serial.h: 31:     for (int i = 0; i < 8; i++)
  2866  061D  1283               	bcf	3,5	;RP0=0, select bank0
  2867  061E  1303               	bcf	3,6	;RP1=0, select bank0
  2868  061F  01B6               	clrf	BuildByte@i_341
  2869  0620  01B7               	clrf	BuildByte@i_341+1
  2870  0621                     l3073:	
  2871                           
  2872                           ;./CustomLib/Serial.h: 32:     {;./CustomLib/Serial.h: 33:         for (int y = 0; y < 4
      +                          ; y++)
  2873  0621  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0622  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0623  01B2               	clrf	BuildByte@y_342
  2876  0624  01B3               	clrf	BuildByte@y_342+1
  2877  0625                     l3079:	
  2878                           
  2879                           ;./CustomLib/Serial.h: 35:         {;./CustomLib/Serial.h: 36:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  2880  0625  1283               	bcf	3,5	;RP0=0, select bank0
  2881  0626  1303               	bcf	3,6	;RP1=0, select bank0
  2882  0627  0832               	movf	BuildByte@y_342,w
  2883  0628  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2884  0629  0084               	movwf	4
  2885  062A  1383               	bcf	3,7	;select IRP bank0
  2886  062B  0800               	movf	0,w
  2887  062C  00A6               	movwf	??_BuildByte
  2888  062D  0A36               	incf	BuildByte@i_341,w
  2889  062E  2E31               	goto	u2274
  2890  062F                     u2275:	
  2891  062F  1003               	clrc
  2892  0630  0CA6               	rrf	??_BuildByte,f
  2893  0631                     u2274:	
  2894  0631  3EFF               	addlw	-1
  2895  0632  1D03               	skipz
  2896  0633  2E2F               	goto	u2275
  2897  0634  0826               	movf	??_BuildByte,w
  2898  0635  3901               	andlw	1
  2899  0636  00A7               	movwf	??_BuildByte+1
  2900  0637  0827               	movf	??_BuildByte+1,w
  2901  0638  07AF               	addwf	BuildByte@sommaColumn,f
  2902  0639                     l3081:	
  2903                           
  2904                           ;./CustomLib/Serial.h: 37:         }
  2905  0639  3001               	movlw	1
  2906  063A  07B2               	addwf	BuildByte@y_342,f
  2907  063B  1803               	skipnc
  2908  063C  0AB3               	incf	BuildByte@y_342+1,f
  2909  063D  3000               	movlw	0
  2910  063E  07B3               	addwf	BuildByte@y_342+1,f
  2911  063F                     l3083:	
  2912  063F  0833               	movf	BuildByte@y_342+1,w
  2913  0640  3A80               	xorlw	128
  2914  0641  00FF               	movwf	btemp+1
  2915  0642  3080               	movlw	128
  2916  0643  027F               	subwf	btemp+1,w
  2917  0644  1D03               	skipz
  2918  0645  2E48               	goto	u2285
  2919  0646  3004               	movlw	4
  2920  0647  0232               	subwf	BuildByte@y_342,w
  2921  0648                     u2285:	
  2922  0648  1C03               	skipc
  2923  0649  2E4B               	goto	u2281
  2924  064A  2E4C               	goto	u2280
  2925  064B                     u2281:	
  2926  064B  2E25               	goto	l3079
  2927  064C                     u2280:	
  2928  064C                     l111:	
  2929                           
  2930                           ;./CustomLib/Serial.h: 38:         if (sommaColumn % 2 == 1)
  2931  064C  1283               	bcf	3,5	;RP0=0, select bank0
  2932  064D  1303               	bcf	3,6	;RP1=0, select bank0
  2933  064E  1C2F               	btfss	BuildByte@sommaColumn,0
  2934  064F  2E51               	goto	u2291
  2935  0650  2E52               	goto	u2290
  2936  0651                     u2291:	
  2937  0651  2E5F               	goto	l3087
  2938  0652                     u2290:	
  2939  0652                     l3085:	
  2940                           
  2941                           ;./CustomLib/Serial.h: 39:         {;./CustomLib/Serial.h: 40:             txByte[4] += 
      +                          0x01 << i;
  2942  0652  3001               	movlw	1
  2943  0653  00A6               	movwf	??_BuildByte
  2944  0654  0A36               	incf	BuildByte@i_341,w
  2945  0655  2E58               	goto	u2304
  2946  0656                     u2305:	
  2947  0656  1003               	clrc
  2948  0657  0DA6               	rlf	??_BuildByte,f
  2949  0658                     u2304:	
  2950  0658  3EFF               	addlw	-1
  2951  0659  1D03               	skipz
  2952  065A  2E56               	goto	u2305
  2953  065B  0826               	movf	??_BuildByte,w
  2954  065C  00A7               	movwf	??_BuildByte+1
  2955  065D  0827               	movf	??_BuildByte+1,w
  2956  065E  07AD               	addwf	BuildByte@txByte+4,f
  2957  065F                     l3087:	
  2958                           
  2959                           ;./CustomLib/Serial.h: 41:             sommaColumn = 0;
  2960  065F  01AF               	clrf	BuildByte@sommaColumn
  2961  0660                     l3091:	
  2962                           ;./CustomLib/Serial.h: 42:         }
  2963                           
  2964                           
  2965                           ;./CustomLib/Serial.h: 47:     }
  2966  0660  3001               	movlw	1
  2967  0661  07B6               	addwf	BuildByte@i_341,f
  2968  0662  1803               	skipnc
  2969  0663  0AB7               	incf	BuildByte@i_341+1,f
  2970  0664  3000               	movlw	0
  2971  0665  07B7               	addwf	BuildByte@i_341+1,f
  2972  0666                     l3093:	
  2973  0666  0837               	movf	BuildByte@i_341+1,w
  2974  0667  3A80               	xorlw	128
  2975  0668  00FF               	movwf	btemp+1
  2976  0669  3080               	movlw	128
  2977  066A  027F               	subwf	btemp+1,w
  2978  066B  1D03               	skipz
  2979  066C  2E6F               	goto	u2315
  2980  066D  3008               	movlw	8
  2981  066E  0236               	subwf	BuildByte@i_341,w
  2982  066F                     u2315:	
  2983  066F  1C03               	skipc
  2984  0670  2E72               	goto	u2311
  2985  0671  2E73               	goto	u2310
  2986  0672                     u2311:	
  2987  0672  2E21               	goto	l3073
  2988  0673                     u2310:	
  2989  0673                     l3095:	
  2990                           
  2991                           ;./CustomLib/Serial.h: 49:     return txByte;
  2992  0673  3029               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  2993  0674                     l114:	
  2994  0674  0008               	return
  2995  0675                     __end_of_BuildByte:	
  2996                           
  2997                           	psect	text4
  2998  0E80                     __ptext4:	
  2999 ;; *************** function _rand *****************
  3000 ;; Defined at:
  3001 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  3002 ;; Parameters:    Size  Location     Type
  3003 ;;		None
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;		None
  3006 ;; Return value:  Size  Location     Type
  3007 ;;                  2   17[BANK0 ] int 
  3008 ;; Registers used:
  3009 ;;		wreg, status,2, status,0, pclath, cstack
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/0
  3012 ;;		On exit  : 0/0
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3015 ;;      Params:         0       2       0       0       0
  3016 ;;      Locals:         0       0       0       0       0
  3017 ;;      Temps:          0       5       0       0       0
  3018 ;;      Totals:         0       7       0       0       0
  3019 ;;Total ram usage:        7 bytes
  3020 ;; Hardware stack levels used:    1
  3021 ;; Hardware stack levels required when called:    4
  3022 ;; This function calls:
  3023 ;;		___lmul
  3024 ;; This function is called by:
  3025 ;;		_main
  3026 ;; This function uses a non-reentrant model
  3027 ;;
  3028                           
  3029                           
  3030                           ;psect for function _rand
  3031  0E80                     _rand:	
  3032  0E80                     l3413:	
  3033                           ;incstack = 0
  3034                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  3035                           
  3036  0E80  1683               	bsf	3,5	;RP0=1, select bank1
  3037  0E81  1303               	bcf	3,6	;RP1=0, select bank1
  3038  0E82  0851               	movf	(_randx+3)^(0+128),w
  3039  0E83  1283               	bcf	3,5	;RP0=0, select bank0
  3040  0E84  1303               	bcf	3,6	;RP1=0, select bank0
  3041  0E85  00A7               	movwf	___lmul@multiplier+3
  3042  0E86  1683               	bsf	3,5	;RP0=1, select bank1
  3043  0E87  1303               	bcf	3,6	;RP1=0, select bank1
  3044  0E88  0850               	movf	(_randx+2)^(0+128),w
  3045  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  3046  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  3047  0E8B  00A6               	movwf	___lmul@multiplier+2
  3048  0E8C  1683               	bsf	3,5	;RP0=1, select bank1
  3049  0E8D  1303               	bcf	3,6	;RP1=0, select bank1
  3050  0E8E  084F               	movf	(_randx+1)^(0+128),w
  3051  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  3052  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  3053  0E91  00A5               	movwf	___lmul@multiplier+1
  3054  0E92  1683               	bsf	3,5	;RP0=1, select bank1
  3055  0E93  1303               	bcf	3,6	;RP1=0, select bank1
  3056  0E94  084E               	movf	_randx^(0+128),w
  3057  0E95  1283               	bcf	3,5	;RP0=0, select bank0
  3058  0E96  1303               	bcf	3,6	;RP1=0, select bank0
  3059  0E97  00A4               	movwf	___lmul@multiplier
  3060  0E98  3041               	movlw	65
  3061  0E99  00AB               	movwf	___lmul@multiplicand+3
  3062  0E9A  30C6               	movlw	198
  3063  0E9B  00AA               	movwf	___lmul@multiplicand+2
  3064  0E9C  304E               	movlw	78
  3065  0E9D  00A9               	movwf	___lmul@multiplicand+1
  3066  0E9E  306D               	movlw	109
  3067  0E9F  00A8               	movwf	___lmul@multiplicand
  3068  0EA0  120A  158A  2362  120A  158A  	fcall	___lmul
  3069  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  3070  0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  3071  0EA7  0827               	movf	?___lmul+3,w
  3072  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  3073  0EA9  1303               	bcf	3,6	;RP1=0, select bank1
  3074  0EAA  00D1               	movwf	(_randx+3)^(0+128)
  3075  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  3076  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  3077  0EAD  0826               	movf	?___lmul+2,w
  3078  0EAE  1683               	bsf	3,5	;RP0=1, select bank1
  3079  0EAF  1303               	bcf	3,6	;RP1=0, select bank1
  3080  0EB0  00D0               	movwf	(_randx+2)^(0+128)
  3081  0EB1  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0EB2  1303               	bcf	3,6	;RP1=0, select bank0
  3083  0EB3  0825               	movf	?___lmul+1,w
  3084  0EB4  1683               	bsf	3,5	;RP0=1, select bank1
  3085  0EB5  1303               	bcf	3,6	;RP1=0, select bank1
  3086  0EB6  00CF               	movwf	(_randx+1)^(0+128)
  3087  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
  3088  0EB8  1303               	bcf	3,6	;RP1=0, select bank0
  3089  0EB9  0824               	movf	?___lmul,w
  3090  0EBA  1683               	bsf	3,5	;RP0=1, select bank1
  3091  0EBB  1303               	bcf	3,6	;RP1=0, select bank1
  3092  0EBC  00CE               	movwf	_randx^(0+128)
  3093  0EBD                     l3415:	
  3094  0EBD  3039               	movlw	57
  3095  0EBE  07CE               	addwf	_randx^(0+128),f
  3096  0EBF  3030               	movlw	48
  3097  0EC0  1803               	skipnc
  3098  0EC1  3031               	movlw	49
  3099  0EC2  07CF               	addwf	(_randx+1)^(0+128),f
  3100  0EC3  3000               	movlw	0
  3101  0EC4  1803               	skipnc
  3102  0EC5  3001               	movlw	1
  3103  0EC6  07D0               	addwf	(_randx+2)^(0+128),f
  3104  0EC7  3000               	movlw	0
  3105  0EC8  1803               	skipnc
  3106  0EC9  3001               	movlw	1
  3107  0ECA  07D1               	addwf	(_randx+3)^(0+128),f
  3108  0ECB                     l3417:	
  3109  0ECB  084E               	movf	_randx^(0+128),w
  3110  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  3111  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  3112  0ECE  00B3               	movwf	??_rand
  3113  0ECF  1683               	bsf	3,5	;RP0=1, select bank1
  3114  0ED0  1303               	bcf	3,6	;RP1=0, select bank1
  3115  0ED1  084F               	movf	(_randx+1)^(0+128),w
  3116  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  3117  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  3118  0ED4  00B4               	movwf	??_rand+1
  3119  0ED5  1683               	bsf	3,5	;RP0=1, select bank1
  3120  0ED6  1303               	bcf	3,6	;RP1=0, select bank1
  3121  0ED7  0850               	movf	(_randx+2)^(0+128),w
  3122  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  3123  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  3124  0EDA  00B5               	movwf	??_rand+2
  3125  0EDB  1683               	bsf	3,5	;RP0=1, select bank1
  3126  0EDC  1303               	bcf	3,6	;RP1=0, select bank1
  3127  0EDD  0851               	movf	(_randx+3)^(0+128),w
  3128  0EDE  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0EDF  1303               	bcf	3,6	;RP1=0, select bank0
  3130  0EE0  00B6               	movwf	??_rand+3
  3131  0EE1  3010               	movlw	16
  3132  0EE2  00B7               	movwf	??_rand+4
  3133  0EE3                     u2835:	
  3134  0EE3  0D36               	rlf	??_rand+3,w
  3135  0EE4  0CB6               	rrf	??_rand+3,f
  3136  0EE5  0CB5               	rrf	??_rand+2,f
  3137  0EE6  0CB4               	rrf	??_rand+1,f
  3138  0EE7  0CB3               	rrf	??_rand,f
  3139  0EE8                     u2830:	
  3140  0EE8  0BB7               	decfsz	??_rand+4,f
  3141  0EE9  2EE3               	goto	u2835
  3142  0EEA  30FF               	movlw	255
  3143  0EEB  0533               	andwf	??_rand,w
  3144  0EEC  00B1               	movwf	?_rand
  3145  0EED  307F               	movlw	127
  3146  0EEE  0534               	andwf	??_rand+1,w
  3147  0EEF  00B2               	movwf	?_rand+1
  3148  0EF0                     l903:	
  3149  0EF0  0008               	return
  3150  0EF1                     __end_of_rand:	
  3151                           
  3152                           	psect	text5
  3153  0B62                     __ptext5:	
  3154 ;; *************** function ___lmul *****************
  3155 ;; Defined at:
  3156 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  multiplier      4    4[BANK0 ] unsigned long 
  3159 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  product         4   13[BANK0 ] unsigned long 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  4    4[BANK0 ] unsigned long 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3171 ;;      Params:         0       8       0       0       0
  3172 ;;      Locals:         0       4       0       0       0
  3173 ;;      Temps:          0       1       0       0       0
  3174 ;;      Totals:         0      13       0       0       0
  3175 ;;Total ram usage:       13 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    3
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_rand
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           
  3186                           ;psect for function ___lmul
  3187  0B62                     ___lmul:	
  3188  0B62                     l3149:	
  3189                           ;incstack = 0
  3190                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3191                           
  3192  0B62  3000               	movlw	0
  3193  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  3194  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  3195  0B65  00B0               	movwf	___lmul@product+3
  3196  0B66  3000               	movlw	0
  3197  0B67  00AF               	movwf	___lmul@product+2
  3198  0B68  3000               	movlw	0
  3199  0B69  00AE               	movwf	___lmul@product+1
  3200  0B6A  3000               	movlw	0
  3201  0B6B  00AD               	movwf	___lmul@product
  3202  0B6C                     l3151:	
  3203  0B6C  1C24               	btfss	___lmul@multiplier,0
  3204  0B6D  2B6F               	goto	u2381
  3205  0B6E  2B70               	goto	u2380
  3206  0B6F                     u2381:	
  3207  0B6F  2B87               	goto	l3155
  3208  0B70                     u2380:	
  3209  0B70                     l3153:	
  3210  0B70  0828               	movf	___lmul@multiplicand,w
  3211  0B71  07AD               	addwf	___lmul@product,f
  3212  0B72  0829               	movf	___lmul@multiplicand+1,w
  3213  0B73  1103               	clrz
  3214  0B74  1803               	skipnc
  3215  0B75  3E01               	addlw	1
  3216  0B76  1903               	skipnz
  3217  0B77  2B79               	goto	u2391
  3218  0B78  07AE               	addwf	___lmul@product+1,f
  3219  0B79                     u2391:	
  3220  0B79  082A               	movf	___lmul@multiplicand+2,w
  3221  0B7A  1103               	clrz
  3222  0B7B  1803               	skipnc
  3223  0B7C  3E01               	addlw	1
  3224  0B7D  1903               	skipnz
  3225  0B7E  2B80               	goto	u2392
  3226  0B7F  07AF               	addwf	___lmul@product+2,f
  3227  0B80                     u2392:	
  3228  0B80  082B               	movf	___lmul@multiplicand+3,w
  3229  0B81  1103               	clrz
  3230  0B82  1803               	skipnc
  3231  0B83  3E01               	addlw	1
  3232  0B84  1903               	skipnz
  3233  0B85  2B87               	goto	u2393
  3234  0B86  07B0               	addwf	___lmul@product+3,f
  3235  0B87                     u2393:	
  3236  0B87                     l3155:	
  3237  0B87  3001               	movlw	1
  3238  0B88  00AC               	movwf	??___lmul
  3239  0B89                     u2405:	
  3240  0B89  1003               	clrc
  3241  0B8A  0DA8               	rlf	___lmul@multiplicand,f
  3242  0B8B  0DA9               	rlf	___lmul@multiplicand+1,f
  3243  0B8C  0DAA               	rlf	___lmul@multiplicand+2,f
  3244  0B8D  0DAB               	rlf	___lmul@multiplicand+3,f
  3245  0B8E  0BAC               	decfsz	??___lmul,f
  3246  0B8F  2B89               	goto	u2405
  3247  0B90                     l3157:	
  3248  0B90  3001               	movlw	1
  3249  0B91                     u2415:	
  3250  0B91  1003               	clrc
  3251  0B92  0CA7               	rrf	___lmul@multiplier+3,f
  3252  0B93  0CA6               	rrf	___lmul@multiplier+2,f
  3253  0B94  0CA5               	rrf	___lmul@multiplier+1,f
  3254  0B95  0CA4               	rrf	___lmul@multiplier,f
  3255  0B96  3EFF               	addlw	-1
  3256  0B97  1D03               	skipz
  3257  0B98  2B91               	goto	u2415
  3258  0B99  0827               	movf	___lmul@multiplier+3,w
  3259  0B9A  0426               	iorwf	___lmul@multiplier+2,w
  3260  0B9B  0425               	iorwf	___lmul@multiplier+1,w
  3261  0B9C  0424               	iorwf	___lmul@multiplier,w
  3262  0B9D  1D03               	skipz
  3263  0B9E  2BA0               	goto	u2421
  3264  0B9F  2BA1               	goto	u2420
  3265  0BA0                     u2421:	
  3266  0BA0  2B6C               	goto	l3151
  3267  0BA1                     u2420:	
  3268  0BA1                     l3159:	
  3269  0BA1  0830               	movf	___lmul@product+3,w
  3270  0BA2  00A7               	movwf	?___lmul+3
  3271  0BA3  082F               	movf	___lmul@product+2,w
  3272  0BA4  00A6               	movwf	?___lmul+2
  3273  0BA5  082E               	movf	___lmul@product+1,w
  3274  0BA6  00A5               	movwf	?___lmul+1
  3275  0BA7  082D               	movf	___lmul@product,w
  3276  0BA8  00A4               	movwf	?___lmul
  3277  0BA9                     l467:	
  3278  0BA9  0008               	return
  3279  0BAA                     __end_of___lmul:	
  3280                           
  3281                           	psect	text6
  3282  0AAD                     __ptext6:	
  3283 ;; *************** function _map *****************
  3284 ;; Defined at:
  3285 ;;		line 115 in file "./CustomLib/TrafficLight.h"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  x               2   40[BANK0 ] int 
  3288 ;;  in_min          2   42[BANK0 ] int 
  3289 ;;  in_max          2   44[BANK0 ] int 
  3290 ;;  out_min         2   46[BANK0 ] int 
  3291 ;;  out_max         2   48[BANK0 ] int 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;		None
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  2   40[BANK0 ] int 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0, pclath, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3303 ;;      Params:         0      10       0       0       0
  3304 ;;      Locals:         0       0       0       0       0
  3305 ;;      Temps:          0       0       0       0       0
  3306 ;;      Totals:         0      10       0       0       0
  3307 ;;Total ram usage:       10 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    4
  3310 ;; This function calls:
  3311 ;;		___awdiv
  3312 ;;		___wmul
  3313 ;; This function is called by:
  3314 ;;		_main
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           
  3319                           ;psect for function _map
  3320  0AAD                     _map:	
  3321  0AAD                     l3391:	
  3322                           ;incstack = 0
  3323                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3324                           
  3325                           
  3326                           ;./CustomLib/TrafficLight.h: 115: int map(int x, int in_min, int in_max, int out_min, in
      +                          t out_max);./CustomLib/TrafficLight.h: 116: {;./CustomLib/TrafficLight.h: 117:     retur
      +                          n (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3327  0AAD  1283               	bcf	3,5	;RP0=0, select bank0
  3328  0AAE  1303               	bcf	3,6	;RP1=0, select bank0
  3329  0AAF  084A               	movf	map@in_min,w
  3330  0AB0  024C               	subwf	map@in_max,w
  3331  0AB1  00BF               	movwf	___awdiv@divisor
  3332  0AB2  084B               	movf	map@in_min+1,w
  3333  0AB3  1C03               	skipc
  3334  0AB4  0A4B               	incf	map@in_min+1,w
  3335  0AB5  024D               	subwf	map@in_max+1,w
  3336  0AB6  00C0               	movwf	___awdiv@divisor+1
  3337  0AB7  084A               	movf	map@in_min,w
  3338  0AB8  0248               	subwf	map@x,w
  3339  0AB9  00A4               	movwf	___wmul@multiplier
  3340  0ABA  084B               	movf	map@in_min+1,w
  3341  0ABB  1C03               	skipc
  3342  0ABC  0A4B               	incf	map@in_min+1,w
  3343  0ABD  0249               	subwf	map@x+1,w
  3344  0ABE  00A5               	movwf	___wmul@multiplier+1
  3345  0ABF  084E               	movf	map@out_min,w
  3346  0AC0  0250               	subwf	map@out_max,w
  3347  0AC1  00A6               	movwf	___wmul@multiplicand
  3348  0AC2  084F               	movf	map@out_min+1,w
  3349  0AC3  1C03               	skipc
  3350  0AC4  0A4F               	incf	map@out_min+1,w
  3351  0AC5  0251               	subwf	map@out_max+1,w
  3352  0AC6  00A7               	movwf	___wmul@multiplicand+1
  3353  0AC7  120A  158A  2255  120A  158A  	fcall	___wmul
  3354  0ACC  1283               	bcf	3,5	;RP0=0, select bank0
  3355  0ACD  1303               	bcf	3,6	;RP1=0, select bank0
  3356  0ACE  0825               	movf	?___wmul+1,w
  3357  0ACF  00C2               	movwf	___awdiv@dividend+1
  3358  0AD0  0824               	movf	?___wmul,w
  3359  0AD1  00C1               	movwf	___awdiv@dividend
  3360  0AD2  120A  158A  2617  120A  158A  	fcall	___awdiv
  3361  0AD7  1283               	bcf	3,5	;RP0=0, select bank0
  3362  0AD8  1303               	bcf	3,6	;RP1=0, select bank0
  3363  0AD9  084E               	movf	map@out_min,w
  3364  0ADA  073F               	addwf	?___awdiv,w
  3365  0ADB  00C8               	movwf	?_map
  3366  0ADC  084F               	movf	map@out_min+1,w
  3367  0ADD  1803               	skipnc
  3368  0ADE  0A4F               	incf	map@out_min+1,w
  3369  0ADF  0740               	addwf	?___awdiv+1,w
  3370  0AE0  00C9               	movwf	?_map+1
  3371  0AE1                     l162:	
  3372  0AE1  0008               	return
  3373  0AE2                     __end_of_map:	
  3374                           
  3375                           	psect	text7
  3376  0A55                     __ptext7:	
  3377 ;; *************** function ___wmul *****************
  3378 ;; Defined at:
  3379 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;  multiplier      2    4[BANK0 ] unsigned int 
  3382 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  product         2    8[BANK0 ] unsigned int 
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  2    4[BANK0 ] unsigned int 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3394 ;;      Params:         0       4       0       0       0
  3395 ;;      Locals:         0       2       0       0       0
  3396 ;;      Temps:          0       0       0       0       0
  3397 ;;      Totals:         0       6       0       0       0
  3398 ;;Total ram usage:        6 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    3
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		_map
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           
  3409                           ;psect for function ___wmul
  3410  0A55                     ___wmul:	
  3411  0A55                     l3135:	
  3412                           ;incstack = 0
  3413                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3414                           
  3415  0A55  1283               	bcf	3,5	;RP0=0, select bank0
  3416  0A56  1303               	bcf	3,6	;RP1=0, select bank0
  3417  0A57  01A8               	clrf	___wmul@product
  3418  0A58  01A9               	clrf	___wmul@product+1
  3419  0A59                     l3137:	
  3420  0A59  1C24               	btfss	___wmul@multiplier,0
  3421  0A5A  2A5C               	goto	u2341
  3422  0A5B  2A5D               	goto	u2340
  3423  0A5C                     u2341:	
  3424  0A5C  2A63               	goto	l453
  3425  0A5D                     u2340:	
  3426  0A5D                     l3139:	
  3427  0A5D  0826               	movf	___wmul@multiplicand,w
  3428  0A5E  07A8               	addwf	___wmul@product,f
  3429  0A5F  1803               	skipnc
  3430  0A60  0AA9               	incf	___wmul@product+1,f
  3431  0A61  0827               	movf	___wmul@multiplicand+1,w
  3432  0A62  07A9               	addwf	___wmul@product+1,f
  3433  0A63                     l453:	
  3434  0A63  3001               	movlw	1
  3435  0A64                     u2355:	
  3436  0A64  1003               	clrc
  3437  0A65  0DA6               	rlf	___wmul@multiplicand,f
  3438  0A66  0DA7               	rlf	___wmul@multiplicand+1,f
  3439  0A67  3EFF               	addlw	-1
  3440  0A68  1D03               	skipz
  3441  0A69  2A64               	goto	u2355
  3442  0A6A                     l3141:	
  3443  0A6A  3001               	movlw	1
  3444  0A6B                     u2365:	
  3445  0A6B  1003               	clrc
  3446  0A6C  0CA5               	rrf	___wmul@multiplier+1,f
  3447  0A6D  0CA4               	rrf	___wmul@multiplier,f
  3448  0A6E  3EFF               	addlw	-1
  3449  0A6F  1D03               	skipz
  3450  0A70  2A6B               	goto	u2365
  3451  0A71                     l3143:	
  3452  0A71  0824               	movf	___wmul@multiplier,w
  3453  0A72  0425               	iorwf	___wmul@multiplier+1,w
  3454  0A73  1D03               	btfss	3,2
  3455  0A74  2A76               	goto	u2371
  3456  0A75  2A77               	goto	u2370
  3457  0A76                     u2371:	
  3458  0A76  2A59               	goto	l3137
  3459  0A77                     u2370:	
  3460  0A77                     l3145:	
  3461  0A77  0829               	movf	___wmul@product+1,w
  3462  0A78  00A5               	movwf	?___wmul+1
  3463  0A79  0828               	movf	___wmul@product,w
  3464  0A7A  00A4               	movwf	?___wmul
  3465  0A7B                     l455:	
  3466  0A7B  0008               	return
  3467  0A7C                     __end_of___wmul:	
  3468                           
  3469                           	psect	text8
  3470  0BF6                     __ptext8:	
  3471 ;; *************** function _luciSemaforo *****************
  3472 ;; Defined at:
  3473 ;;		line 426 in file "main.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;  index           1    wreg     unsigned char 
  3476 ;;  lux             1    4[BANK0 ] unsigned char 
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  index           1    7[BANK0 ] unsigned char 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3488 ;;      Params:         0       1       0       0       0
  3489 ;;      Locals:         0       1       0       0       0
  3490 ;;      Temps:          0       2       0       0       0
  3491 ;;      Totals:         0       4       0       0       0
  3492 ;;Total ram usage:        4 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    3
  3495 ;; This function calls:
  3496 ;;		Nothing
  3497 ;; This function is called by:
  3498 ;;		_main
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           
  3503                           ;psect for function _luciSemaforo
  3504  0BF6                     _luciSemaforo:	
  3505                           
  3506                           ;incstack = 0
  3507                           ; Regs used in _luciSemaforo: [wreg-fsr0h+status,2+status,0]
  3508                           ;luciSemaforo@index stored from wreg
  3509  0BF6  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0BF7  1303               	bcf	3,6	;RP1=0, select bank0
  3511  0BF8  00A7               	movwf	luciSemaforo@index
  3512  0BF9                     l3447:	
  3513                           
  3514                           ;main.c: 426: void luciSemaforo(unsigned char index, unsigned char lux);main.c: 427: {;m
      +                          ain.c: 428:     switch (index)
  3515  0BF9  2C38               	goto	l3459
  3516  0BFA                     l325:	
  3517                           ;main.c: 432:         {;main.c: 433:         case 0:
  3518                           
  3519                           
  3520                           ;main.c: 434:             PORTCbits.RC1 = 0;
  3521  0BFA  1087               	bcf	7,1	;volatile
  3522                           
  3523                           ;main.c: 435:             PORTCbits.RC2 = 0;
  3524  0BFB  1107               	bcf	7,2	;volatile
  3525                           
  3526                           ;main.c: 436:             PORTCbits.RC0 = 1;
  3527  0BFC  1407               	bsf	7,0	;volatile
  3528                           
  3529                           ;main.c: 437:             break;
  3530  0BFD  2C48               	goto	l336
  3531  0BFE                     l327:	
  3532                           ;main.c: 438:         case 1:
  3533                           
  3534                           
  3535                           ;main.c: 439:             PORTCbits.RC0 = 0;
  3536  0BFE  1007               	bcf	7,0	;volatile
  3537                           
  3538                           ;main.c: 440:             PORTCbits.RC2 = 0;
  3539  0BFF  1107               	bcf	7,2	;volatile
  3540                           
  3541                           ;main.c: 441:             PORTCbits.RC1 = 1;
  3542  0C00  1487               	bsf	7,1	;volatile
  3543                           
  3544                           ;main.c: 442:             break;
  3545  0C01  2C48               	goto	l336
  3546  0C02                     l328:	
  3547                           ;main.c: 443:         case 2:
  3548                           
  3549                           
  3550                           ;main.c: 444:             PORTCbits.RC0 = 0;
  3551  0C02  1007               	bcf	7,0	;volatile
  3552                           
  3553                           ;main.c: 445:             PORTCbits.RC1 = 0;
  3554  0C03  1087               	bcf	7,1	;volatile
  3555                           
  3556                           ;main.c: 446:             PORTCbits.RC2 = 1;
  3557  0C04  1507               	bsf	7,2	;volatile
  3558                           
  3559                           ;main.c: 447:             break;
  3560  0C05  2C48               	goto	l336
  3561  0C06                     l3451:	
  3562  0C06  0824               	movf	luciSemaforo@lux,w
  3563  0C07  00A5               	movwf	??_luciSemaforo
  3564  0C08  01A6               	clrf	??_luciSemaforo+1
  3565                           
  3566                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3567                           ; Switch size 1, requested type "simple"
  3568                           ; Number of cases is 1, Range of values is 0 to 0
  3569                           ; switch strategies available:
  3570                           ; Name         Instructions Cycles
  3571                           ; simple_byte            4     3 (average)
  3572                           ; direct_byte           11     8 (fixed)
  3573                           ; jumptable            260     6 (fixed)
  3574                           ;	Chosen strategy is simple_byte
  3575  0C09  0826               	movf	??_luciSemaforo+1,w
  3576  0C0A  3A00               	xorlw	0	; case 0
  3577  0C0B  1903               	skipnz
  3578  0C0C  2C0E               	goto	l3947
  3579  0C0D  2C48               	goto	l336
  3580  0C0E                     l3947:	
  3581                           
  3582                           ; Switch size 1, requested type "simple"
  3583                           ; Number of cases is 3, Range of values is 0 to 2
  3584                           ; switch strategies available:
  3585                           ; Name         Instructions Cycles
  3586                           ; simple_byte           10     6 (average)
  3587                           ; direct_byte           17     8 (fixed)
  3588                           ; jumptable            260     6 (fixed)
  3589                           ;	Chosen strategy is simple_byte
  3590  0C0E  0825               	movf	??_luciSemaforo,w
  3591  0C0F  3A00               	xorlw	0	; case 0
  3592  0C10  1903               	skipnz
  3593  0C11  2BFA               	goto	l325
  3594  0C12  3A01               	xorlw	1	; case 1
  3595  0C13  1903               	skipnz
  3596  0C14  2BFE               	goto	l327
  3597  0C15  3A03               	xorlw	3	; case 2
  3598  0C16  1903               	skipnz
  3599  0C17  2C02               	goto	l328
  3600  0C18  2C48               	goto	l336
  3601  0C19                     l332:	
  3602                           ;main.c: 453:         {;main.c: 454:         case 0:
  3603                           
  3604                           
  3605                           ;main.c: 455:             PORTBbits.RB1 = 0;
  3606  0C19  1086               	bcf	6,1	;volatile
  3607                           
  3608                           ;main.c: 456:             PORTBbits.RB6 = 0;
  3609  0C1A  1306               	bcf	6,6	;volatile
  3610                           
  3611                           ;main.c: 457:             PORTBbits.RB7 = 1;
  3612  0C1B  1786               	bsf	6,7	;volatile
  3613                           
  3614                           ;main.c: 458:             break;
  3615  0C1C  2C48               	goto	l336
  3616  0C1D                     l334:	
  3617                           ;main.c: 459:         case 1:
  3618                           
  3619                           
  3620                           ;main.c: 460:             PORTBbits.RB7 = 0;
  3621  0C1D  1386               	bcf	6,7	;volatile
  3622                           
  3623                           ;main.c: 461:             PORTBbits.RB6 = 0;
  3624  0C1E  1306               	bcf	6,6	;volatile
  3625                           
  3626                           ;main.c: 462:             PORTBbits.RB1 = 1;
  3627  0C1F  1486               	bsf	6,1	;volatile
  3628                           
  3629                           ;main.c: 463:             break;
  3630  0C20  2C48               	goto	l336
  3631  0C21                     l335:	
  3632                           ;main.c: 464:         case 2:
  3633                           
  3634                           
  3635                           ;main.c: 465:             PORTBbits.RB7 = 0;
  3636  0C21  1386               	bcf	6,7	;volatile
  3637                           
  3638                           ;main.c: 466:             PORTBbits.RB1 = 0;
  3639  0C22  1086               	bcf	6,1	;volatile
  3640                           
  3641                           ;main.c: 467:             PORTBbits.RB6 = 1;
  3642  0C23  1706               	bsf	6,6	;volatile
  3643                           
  3644                           ;main.c: 468:             break;
  3645  0C24  2C48               	goto	l336
  3646  0C25                     l3455:	
  3647  0C25  0824               	movf	luciSemaforo@lux,w
  3648  0C26  00A5               	movwf	??_luciSemaforo
  3649  0C27  01A6               	clrf	??_luciSemaforo+1
  3650                           
  3651                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3652                           ; Switch size 1, requested type "simple"
  3653                           ; Number of cases is 1, Range of values is 0 to 0
  3654                           ; switch strategies available:
  3655                           ; Name         Instructions Cycles
  3656                           ; simple_byte            4     3 (average)
  3657                           ; direct_byte           11     8 (fixed)
  3658                           ; jumptable            260     6 (fixed)
  3659                           ;	Chosen strategy is simple_byte
  3660  0C28  0826               	movf	??_luciSemaforo+1,w
  3661  0C29  3A00               	xorlw	0	; case 0
  3662  0C2A  1903               	skipnz
  3663  0C2B  2C2D               	goto	l3949
  3664  0C2C  2C48               	goto	l336
  3665  0C2D                     l3949:	
  3666                           
  3667                           ; Switch size 1, requested type "simple"
  3668                           ; Number of cases is 3, Range of values is 0 to 2
  3669                           ; switch strategies available:
  3670                           ; Name         Instructions Cycles
  3671                           ; simple_byte           10     6 (average)
  3672                           ; direct_byte           17     8 (fixed)
  3673                           ; jumptable            260     6 (fixed)
  3674                           ;	Chosen strategy is simple_byte
  3675  0C2D  0825               	movf	??_luciSemaforo,w
  3676  0C2E  3A00               	xorlw	0	; case 0
  3677  0C2F  1903               	skipnz
  3678  0C30  2C19               	goto	l332
  3679  0C31  3A01               	xorlw	1	; case 1
  3680  0C32  1903               	skipnz
  3681  0C33  2C1D               	goto	l334
  3682  0C34  3A03               	xorlw	3	; case 2
  3683  0C35  1903               	skipnz
  3684  0C36  2C21               	goto	l335
  3685  0C37  2C48               	goto	l336
  3686  0C38                     l3459:	
  3687  0C38  0827               	movf	luciSemaforo@index,w
  3688  0C39  00A5               	movwf	??_luciSemaforo
  3689  0C3A  01A6               	clrf	??_luciSemaforo+1
  3690                           
  3691                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3692                           ; Switch size 1, requested type "simple"
  3693                           ; Number of cases is 1, Range of values is 0 to 0
  3694                           ; switch strategies available:
  3695                           ; Name         Instructions Cycles
  3696                           ; simple_byte            4     3 (average)
  3697                           ; direct_byte           11     8 (fixed)
  3698                           ; jumptable            260     6 (fixed)
  3699                           ;	Chosen strategy is simple_byte
  3700  0C3B  0826               	movf	??_luciSemaforo+1,w
  3701  0C3C  3A00               	xorlw	0	; case 0
  3702  0C3D  1903               	skipnz
  3703  0C3E  2C40               	goto	l3951
  3704  0C3F  2C48               	goto	l336
  3705  0C40                     l3951:	
  3706                           
  3707                           ; Switch size 1, requested type "simple"
  3708                           ; Number of cases is 2, Range of values is 0 to 1
  3709                           ; switch strategies available:
  3710                           ; Name         Instructions Cycles
  3711                           ; simple_byte            7     4 (average)
  3712                           ; direct_byte           14     8 (fixed)
  3713                           ; jumptable            260     6 (fixed)
  3714                           ;	Chosen strategy is simple_byte
  3715  0C40  0825               	movf	??_luciSemaforo,w
  3716  0C41  3A00               	xorlw	0	; case 0
  3717  0C42  1903               	skipnz
  3718  0C43  2C06               	goto	l3451
  3719  0C44  3A01               	xorlw	1	; case 1
  3720  0C45  1903               	skipnz
  3721  0C46  2C25               	goto	l3455
  3722  0C47  2C48               	goto	l336
  3723  0C48                     l336:	
  3724  0C48  0008               	return
  3725  0C49                     __end_of_luciSemaforo:	
  3726                           
  3727                           	psect	text9
  3728  09F5                     __ptext9:	
  3729 ;; *************** function _init_ADC *****************
  3730 ;; Defined at:
  3731 ;;		line 338 in file "main.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;		None
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;		None
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      void 
  3738 ;; Registers used:
  3739 ;;		wreg, status,2
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3745 ;;      Params:         0       0       0       0       0
  3746 ;;      Locals:         0       0       0       0       0
  3747 ;;      Temps:          0       1       0       0       0
  3748 ;;      Totals:         0       1       0       0       0
  3749 ;;Total ram usage:        1 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    3
  3752 ;; This function calls:
  3753 ;;		Nothing
  3754 ;; This function is called by:
  3755 ;;		_main
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           
  3760                           ;psect for function _init_ADC
  3761  09F5                     _init_ADC:	
  3762  09F5                     l3395:	
  3763                           ;incstack = 0
  3764                           ; Regs used in _init_ADC: [wreg+status,2]
  3765                           
  3766                           
  3767                           ;main.c: 340:     TRISA = 0xE3;
  3768  09F5  30E3               	movlw	227
  3769  09F6  1683               	bsf	3,5	;RP0=1, select bank1
  3770  09F7  1303               	bcf	3,6	;RP1=0, select bank1
  3771  09F8  0085               	movwf	5	;volatile
  3772  09F9                     l3397:	
  3773                           
  3774                           ;main.c: 341:     ADCON0 = 0x00;
  3775  09F9  1283               	bcf	3,5	;RP0=0, select bank0
  3776  09FA  1303               	bcf	3,6	;RP1=0, select bank0
  3777  09FB  019F               	clrf	31	;volatile
  3778  09FC                     l3399:	
  3779                           
  3780                           ;main.c: 342:     ADCON1 = 0x80;
  3781  09FC  3080               	movlw	128
  3782  09FD  1683               	bsf	3,5	;RP0=1, select bank1
  3783  09FE  1303               	bcf	3,6	;RP1=0, select bank1
  3784  09FF  009F               	movwf	31	;volatile
  3785  0A00                     l3401:	
  3786                           
  3787                           ;main.c: 343:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3788  0A00  3019               	movlw	25
  3789  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  3790  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  3791  0A03  00A4               	movwf	??_init_ADC
  3792  0A04                     u3127:	
  3793  0A04  0BA4               	decfsz	??_init_ADC,f
  3794  0A05  2A04               	goto	u3127
  3795  0A06  2A07               	nop2
  3796  0A07                     l279:	
  3797  0A07  0008               	return
  3798  0A08                     __end_of_init_ADC:	
  3799                           
  3800                           	psect	text10
  3801  0EF1                     __ptext10:	
  3802 ;; *************** function _UpdateTimes *****************
  3803 ;; Defined at:
  3804 ;;		line 4 in file "./CustomLib/TrafficLight.h"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  _semafori       1    wreg     PTR PTR struct .
  3807 ;;		 -> Semafori(8), 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  _semafori       1   14[BANK0 ] PTR PTR struct .
  3810 ;;		 -> Semafori(8), 
  3811 ;;  i               1   15[BANK0 ] unsigned char 
  3812 ;;  l               1   16[BANK0 ] unsigned char 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3822 ;;      Params:         0       0       0       0       0
  3823 ;;      Locals:         0       3       0       0       0
  3824 ;;      Temps:          0      10       0       0       0
  3825 ;;      Totals:         0      13       0       0       0
  3826 ;;Total ram usage:       13 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    3
  3829 ;; This function calls:
  3830 ;;		Nothing
  3831 ;; This function is called by:
  3832 ;;		_main
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           
  3837                           ;psect for function _UpdateTimes
  3838  0EF1                     _UpdateTimes:	
  3839                           
  3840                           ;incstack = 0
  3841                           ; Regs used in _UpdateTimes: [wreg-fsr0h+status,2+status,0]
  3842                           ;UpdateTimes@_semafori stored from wreg
  3843  0EF1  1283               	bcf	3,5	;RP0=0, select bank0
  3844  0EF2  1303               	bcf	3,6	;RP1=0, select bank0
  3845  0EF3  00AE               	movwf	UpdateTimes@_semafori
  3846  0EF4                     l3299:	
  3847                           
  3848                           ;./CustomLib/TrafficLight.h: 4: void UpdateTimes(_Semafori _semafori);./CustomLib/Traffi
      +                          cLight.h: 5: {;./CustomLib/TrafficLight.h: 7:     for (unsigned char l = 0; l < n_semafo
      +                          ri; l++)
  3849  0EF4  01B0               	clrf	UpdateTimes@l
  3850  0EF5                     l3305:	
  3851                           
  3852                           ;./CustomLib/TrafficLight.h: 8:     {;./CustomLib/TrafficLight.h: 9:         for (unsign
      +                          ed char i = 0; i < 3; i++)
  3853  0EF5  01AF               	clrf	UpdateTimes@i
  3854  0EF6                     l3311:	
  3855                           
  3856                           ;./CustomLib/TrafficLight.h: 10:         {;./CustomLib/TrafficLight.h: 11:             i
      +                          f ((*(_semafori)[l]).times[i] != (*(_semafori)[l]).new_times[i])
  3857  0EF6  0830               	movf	UpdateTimes@l,w
  3858  0EF7  072E               	addwf	UpdateTimes@_semafori,w
  3859  0EF8  00A4               	movwf	??_UpdateTimes
  3860  0EF9  0824               	movf	??_UpdateTimes,w
  3861  0EFA  0084               	movwf	4
  3862  0EFB  082F               	movf	UpdateTimes@i,w
  3863  0EFC  00A5               	movwf	??_UpdateTimes+1
  3864  0EFD  0725               	addwf	??_UpdateTimes+1,w
  3865  0EFE  1383               	bcf	3,7	;select IRP bank0
  3866  0EFF  0700               	addwf	0,w
  3867  0F00  00A6               	movwf	??_UpdateTimes+2
  3868  0F01  0826               	movf	??_UpdateTimes+2,w
  3869  0F02  3E06               	addlw	6
  3870  0F03  0084               	movwf	4
  3871  0F04  1783               	bsf	3,7	;select IRP bank2
  3872  0F05  0800               	movf	0,w
  3873  0F06  00A7               	movwf	??_UpdateTimes+3
  3874  0F07  0A84               	incf	4,f
  3875  0F08  0800               	movf	0,w
  3876  0F09  00A8               	movwf	??_UpdateTimes+4
  3877  0F0A  0830               	movf	UpdateTimes@l,w
  3878  0F0B  072E               	addwf	UpdateTimes@_semafori,w
  3879  0F0C  00A9               	movwf	??_UpdateTimes+5
  3880  0F0D  0829               	movf	??_UpdateTimes+5,w
  3881  0F0E  0084               	movwf	4
  3882  0F0F  082F               	movf	UpdateTimes@i,w
  3883  0F10  00AA               	movwf	??_UpdateTimes+6
  3884  0F11  072A               	addwf	??_UpdateTimes+6,w
  3885  0F12  1383               	bcf	3,7	;select IRP bank0
  3886  0F13  0700               	addwf	0,w
  3887  0F14  00AB               	movwf	??_UpdateTimes+7
  3888  0F15  082B               	movf	??_UpdateTimes+7,w
  3889  0F16  0084               	movwf	4
  3890  0F17  1783               	bsf	3,7	;select IRP bank2
  3891  0F18  0800               	movf	0,w
  3892  0F19  00AC               	movwf	??_UpdateTimes+8
  3893  0F1A  0A84               	incf	4,f
  3894  0F1B  0800               	movf	0,w
  3895  0F1C  00AD               	movwf	??_UpdateTimes+9
  3896  0F1D  0828               	movf	??_UpdateTimes+4,w
  3897  0F1E  062D               	xorwf	??_UpdateTimes+9,w
  3898  0F1F  1D03               	skipz
  3899  0F20  2F23               	goto	u2745
  3900  0F21  0827               	movf	??_UpdateTimes+3,w
  3901  0F22  062C               	xorwf	??_UpdateTimes+8,w
  3902  0F23                     u2745:	
  3903  0F23  1903               	skipnz
  3904  0F24  2F26               	goto	u2741
  3905  0F25  2F27               	goto	u2740
  3906  0F26                     u2741:	
  3907  0F26  2F4E               	goto	l3315
  3908  0F27                     u2740:	
  3909  0F27                     l3313:	
  3910                           
  3911                           ;./CustomLib/TrafficLight.h: 12:             {;./CustomLib/TrafficLight.h: 13:          
      +                                 (*(_semafori)[l]).times[i] = (*(_semafori)[l]).new_times[i];
  3912  0F27  0830               	movf	UpdateTimes@l,w
  3913  0F28  072E               	addwf	UpdateTimes@_semafori,w
  3914  0F29  00A4               	movwf	??_UpdateTimes
  3915  0F2A  0824               	movf	??_UpdateTimes,w
  3916  0F2B  0084               	movwf	4
  3917  0F2C  082F               	movf	UpdateTimes@i,w
  3918  0F2D  00A5               	movwf	??_UpdateTimes+1
  3919  0F2E  0725               	addwf	??_UpdateTimes+1,w
  3920  0F2F  1383               	bcf	3,7	;select IRP bank0
  3921  0F30  0700               	addwf	0,w
  3922  0F31  00A6               	movwf	??_UpdateTimes+2
  3923  0F32  0826               	movf	??_UpdateTimes+2,w
  3924  0F33  3E06               	addlw	6
  3925  0F34  0084               	movwf	4
  3926  0F35  1783               	bsf	3,7	;select IRP bank2
  3927  0F36  0800               	movf	0,w
  3928  0F37  00A7               	movwf	??_UpdateTimes+3
  3929  0F38  0A84               	incf	4,f
  3930  0F39  0800               	movf	0,w
  3931  0F3A  00A8               	movwf	??_UpdateTimes+4
  3932  0F3B  0830               	movf	UpdateTimes@l,w
  3933  0F3C  072E               	addwf	UpdateTimes@_semafori,w
  3934  0F3D  00A9               	movwf	??_UpdateTimes+5
  3935  0F3E  0829               	movf	??_UpdateTimes+5,w
  3936  0F3F  0084               	movwf	4
  3937  0F40  082F               	movf	UpdateTimes@i,w
  3938  0F41  00AA               	movwf	??_UpdateTimes+6
  3939  0F42  072A               	addwf	??_UpdateTimes+6,w
  3940  0F43  1383               	bcf	3,7	;select IRP bank0
  3941  0F44  0700               	addwf	0,w
  3942  0F45  00AB               	movwf	??_UpdateTimes+7
  3943  0F46  082B               	movf	??_UpdateTimes+7,w
  3944  0F47  0084               	movwf	4
  3945  0F48  0827               	movf	??_UpdateTimes+3,w
  3946  0F49  1783               	bsf	3,7	;select IRP bank2
  3947  0F4A  0080               	movwf	0
  3948  0F4B  0A84               	incf	4,f
  3949  0F4C  0828               	movf	??_UpdateTimes+4,w
  3950  0F4D  0080               	movwf	0
  3951  0F4E                     l3315:	
  3952                           
  3953                           ;./CustomLib/TrafficLight.h: 15:         }
  3954  0F4E  3001               	movlw	1
  3955  0F4F  00A4               	movwf	??_UpdateTimes
  3956  0F50  0824               	movf	??_UpdateTimes,w
  3957  0F51  07AF               	addwf	UpdateTimes@i,f
  3958  0F52                     l3317:	
  3959  0F52  3003               	movlw	3
  3960  0F53  022F               	subwf	UpdateTimes@i,w
  3961  0F54  1C03               	skipc
  3962  0F55  2F57               	goto	u2751
  3963  0F56  2F58               	goto	u2750
  3964  0F57                     u2751:	
  3965  0F57  2EF6               	goto	l3311
  3966  0F58                     u2750:	
  3967  0F58                     l3321:	
  3968                           
  3969                           ;./CustomLib/TrafficLight.h: 21:     }
  3970  0F58  3001               	movlw	1
  3971  0F59  00A4               	movwf	??_UpdateTimes
  3972  0F5A  0824               	movf	??_UpdateTimes,w
  3973  0F5B  07B0               	addwf	UpdateTimes@l,f
  3974  0F5C                     l3323:	
  3975  0F5C  3008               	movlw	8
  3976  0F5D  0230               	subwf	UpdateTimes@l,w
  3977  0F5E  1C03               	skipc
  3978  0F5F  2F61               	goto	u2761
  3979  0F60  2F62               	goto	u2760
  3980  0F61                     u2761:	
  3981  0F61  2EF5               	goto	l3305
  3982  0F62                     u2760:	
  3983  0F62                     l127:	
  3984  0F62  0008               	return
  3985  0F63                     __end_of_UpdateTimes:	
  3986                           
  3987                           	psect	text11
  3988  0AE2                     __ptext11:	
  3989 ;; *************** function _UART_Init *****************
  3990 ;; Defined at:
  3991 ;;		line 357 in file "main.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  baudrate        2   19[BANK0 ] int 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;		None
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg, status,2, status,0, pclath, cstack
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4005 ;;      Params:         0       2       0       0       0
  4006 ;;      Locals:         0       0       0       0       0
  4007 ;;      Temps:          0       4       0       0       0
  4008 ;;      Totals:         0       6       0       0       0
  4009 ;;Total ram usage:        6 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    4
  4012 ;; This function calls:
  4013 ;;		___aldiv
  4014 ;; This function is called by:
  4015 ;;		_main
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           
  4020                           ;psect for function _UART_Init
  4021  0AE2                     _UART_Init:	
  4022  0AE2                     l3403:	
  4023                           ;incstack = 0
  4024                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4025                           
  4026                           
  4027                           ;main.c: 357: void UART_Init(int baudrate);main.c: 358: {;main.c: 359:     TRISCbits.TRI
      +                          SC6 = 0;
  4028  0AE2  1683               	bsf	3,5	;RP0=1, select bank1
  4029  0AE3  1303               	bcf	3,6	;RP1=0, select bank1
  4030  0AE4  1307               	bcf	7,6	;volatile
  4031                           
  4032                           ;main.c: 360:     TXSTAbits.TXEN = 1;
  4033  0AE5  1698               	bsf	24,5	;volatile
  4034                           
  4035                           ;main.c: 361:     RCSTAbits.SPEN = 1;
  4036  0AE6  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0AE7  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0AE8  1798               	bsf	24,7	;volatile
  4039                           
  4040                           ;main.c: 362:     RCSTAbits.CREN = 1;
  4041  0AE9  1618               	bsf	24,4	;volatile
  4042  0AEA                     l3405:	
  4043                           
  4044                           ;main.c: 363:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4045  0AEA  0833               	movf	UART_Init@baudrate,w
  4046  0AEB  00B5               	movwf	??_UART_Init
  4047  0AEC  0834               	movf	UART_Init@baudrate+1,w
  4048  0AED  00B6               	movwf	??_UART_Init+1
  4049  0AEE  3000               	movlw	0
  4050  0AEF  1BB6               	btfsc	??_UART_Init+1,7
  4051  0AF0  30FF               	movlw	255
  4052  0AF1  00B7               	movwf	??_UART_Init+2
  4053  0AF2  00B8               	movwf	??_UART_Init+3
  4054  0AF3  3006               	movlw	6
  4055  0AF4                     u2825:	
  4056  0AF4  1003               	clrc
  4057  0AF5  0DB5               	rlf	??_UART_Init,f
  4058  0AF6  0DB6               	rlf	??_UART_Init+1,f
  4059  0AF7  0DB7               	rlf	??_UART_Init+2,f
  4060  0AF8  0DB8               	rlf	??_UART_Init+3,f
  4061  0AF9                     u2820:	
  4062  0AF9  3EFF               	addlw	-1
  4063  0AFA  1D03               	skipz
  4064  0AFB  2AF4               	goto	u2825
  4065  0AFC  0838               	movf	??_UART_Init+3,w
  4066  0AFD  00A7               	movwf	___aldiv@divisor+3
  4067  0AFE  0837               	movf	??_UART_Init+2,w
  4068  0AFF  00A6               	movwf	___aldiv@divisor+2
  4069  0B00  0836               	movf	??_UART_Init+1,w
  4070  0B01  00A5               	movwf	___aldiv@divisor+1
  4071  0B02  0835               	movf	??_UART_Init,w
  4072  0B03  00A4               	movwf	___aldiv@divisor
  4073  0B04  3001               	movlw	1
  4074  0B05  00AB               	movwf	___aldiv@dividend+3
  4075  0B06  30E8               	movlw	232
  4076  0B07  00AA               	movwf	___aldiv@dividend+2
  4077  0B08  3048               	movlw	72
  4078  0B09  00A9               	movwf	___aldiv@dividend+1
  4079  0B0A  3000               	movlw	0
  4080  0B0B  00A8               	movwf	___aldiv@dividend
  4081  0B0C  120A  158A  2763  120A  158A  	fcall	___aldiv
  4082  0B11  1283               	bcf	3,5	;RP0=0, select bank0
  4083  0B12  1303               	bcf	3,6	;RP1=0, select bank0
  4084  0B13  0824               	movf	?___aldiv,w
  4085  0B14  3EFF               	addlw	255
  4086  0B15  1683               	bsf	3,5	;RP0=1, select bank1
  4087  0B16  1303               	bcf	3,6	;RP1=0, select bank1
  4088  0B17  0099               	movwf	25	;volatile
  4089  0B18                     l3407:	
  4090                           
  4091                           ;main.c: 364:     INTCONbits.GIE = 1;
  4092  0B18  178B               	bsf	11,7	;volatile
  4093  0B19                     l3409:	
  4094                           
  4095                           ;main.c: 365:     INTCONbits.PEIE = 1;
  4096  0B19  170B               	bsf	11,6	;volatile
  4097  0B1A                     l3411:	
  4098                           
  4099                           ;main.c: 366:     PIE1bits.RCIE = 1;
  4100  0B1A  168C               	bsf	12,5	;volatile
  4101  0B1B                     l288:	
  4102  0B1B  0008               	return
  4103  0B1C                     __end_of_UART_Init:	
  4104                           
  4105                           	psect	text12
  4106  0F63                     __ptext12:	
  4107 ;; *************** function ___aldiv *****************
  4108 ;; Defined at:
  4109 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;  divisor         4    4[BANK0 ] long 
  4112 ;;  dividend        4    8[BANK0 ] long 
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  quotient        4   15[BANK0 ] long 
  4115 ;;  sign            1   14[BANK0 ] unsigned char 
  4116 ;;  counter         1   13[BANK0 ] unsigned char 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  4    4[BANK0 ] long 
  4119 ;; Registers used:
  4120 ;;		wreg, status,2, status,0
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4126 ;;      Params:         0       8       0       0       0
  4127 ;;      Locals:         0       6       0       0       0
  4128 ;;      Temps:          0       1       0       0       0
  4129 ;;      Totals:         0      15       0       0       0
  4130 ;;Total ram usage:       15 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    3
  4133 ;; This function calls:
  4134 ;;		Nothing
  4135 ;; This function is called by:
  4136 ;;		_UART_Init
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           
  4141                           ;psect for function ___aldiv
  4142  0F63                     ___aldiv:	
  4143  0F63                     l3177:	
  4144                           ;incstack = 0
  4145                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4146                           
  4147  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  4148  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  4149  0F65  01AE               	clrf	___aldiv@sign
  4150  0F66                     l3179:	
  4151  0F66  1FA7               	btfss	___aldiv@divisor+3,7
  4152  0F67  2F69               	goto	u2451
  4153  0F68  2F6A               	goto	u2450
  4154  0F69                     u2451:	
  4155  0F69  2F77               	goto	l518
  4156  0F6A                     u2450:	
  4157  0F6A                     l3181:	
  4158  0F6A  09A4               	comf	___aldiv@divisor,f
  4159  0F6B  09A5               	comf	___aldiv@divisor+1,f
  4160  0F6C  09A6               	comf	___aldiv@divisor+2,f
  4161  0F6D  09A7               	comf	___aldiv@divisor+3,f
  4162  0F6E  0AA4               	incf	___aldiv@divisor,f
  4163  0F6F  1903               	skipnz
  4164  0F70  0AA5               	incf	___aldiv@divisor+1,f
  4165  0F71  1903               	skipnz
  4166  0F72  0AA6               	incf	___aldiv@divisor+2,f
  4167  0F73  1903               	skipnz
  4168  0F74  0AA7               	incf	___aldiv@divisor+3,f
  4169  0F75  01AE               	clrf	___aldiv@sign
  4170  0F76  0AAE               	incf	___aldiv@sign,f
  4171  0F77                     l518:	
  4172  0F77  1FAB               	btfss	___aldiv@dividend+3,7
  4173  0F78  2F7A               	goto	u2461
  4174  0F79  2F7B               	goto	u2460
  4175  0F7A                     u2461:	
  4176  0F7A  2F8A               	goto	l3187
  4177  0F7B                     u2460:	
  4178  0F7B                     l3183:	
  4179  0F7B  09A8               	comf	___aldiv@dividend,f
  4180  0F7C  09A9               	comf	___aldiv@dividend+1,f
  4181  0F7D  09AA               	comf	___aldiv@dividend+2,f
  4182  0F7E  09AB               	comf	___aldiv@dividend+3,f
  4183  0F7F  0AA8               	incf	___aldiv@dividend,f
  4184  0F80  1903               	skipnz
  4185  0F81  0AA9               	incf	___aldiv@dividend+1,f
  4186  0F82  1903               	skipnz
  4187  0F83  0AAA               	incf	___aldiv@dividend+2,f
  4188  0F84  1903               	skipnz
  4189  0F85  0AAB               	incf	___aldiv@dividend+3,f
  4190  0F86                     l3185:	
  4191  0F86  3001               	movlw	1
  4192  0F87  00AC               	movwf	??___aldiv
  4193  0F88  082C               	movf	??___aldiv,w
  4194  0F89  06AE               	xorwf	___aldiv@sign,f
  4195  0F8A                     l3187:	
  4196  0F8A  3000               	movlw	0
  4197  0F8B  00B2               	movwf	___aldiv@quotient+3
  4198  0F8C  3000               	movlw	0
  4199  0F8D  00B1               	movwf	___aldiv@quotient+2
  4200  0F8E  3000               	movlw	0
  4201  0F8F  00B0               	movwf	___aldiv@quotient+1
  4202  0F90  3000               	movlw	0
  4203  0F91  00AF               	movwf	___aldiv@quotient
  4204  0F92                     l3189:	
  4205  0F92  0827               	movf	___aldiv@divisor+3,w
  4206  0F93  0426               	iorwf	___aldiv@divisor+2,w
  4207  0F94  0425               	iorwf	___aldiv@divisor+1,w
  4208  0F95  0424               	iorwf	___aldiv@divisor,w
  4209  0F96  1903               	skipnz
  4210  0F97  2F99               	goto	u2471
  4211  0F98  2F9A               	goto	u2470
  4212  0F99                     u2471:	
  4213  0F99  2FE7               	goto	l3209
  4214  0F9A                     u2470:	
  4215  0F9A                     l3191:	
  4216  0F9A  01AD               	clrf	___aldiv@counter
  4217  0F9B  0AAD               	incf	___aldiv@counter,f
  4218  0F9C  2FAA               	goto	l3195
  4219  0F9D                     l3193:	
  4220  0F9D  3001               	movlw	1
  4221  0F9E  00AC               	movwf	??___aldiv
  4222  0F9F                     u2485:	
  4223  0F9F  1003               	clrc
  4224  0FA0  0DA4               	rlf	___aldiv@divisor,f
  4225  0FA1  0DA5               	rlf	___aldiv@divisor+1,f
  4226  0FA2  0DA6               	rlf	___aldiv@divisor+2,f
  4227  0FA3  0DA7               	rlf	___aldiv@divisor+3,f
  4228  0FA4  0BAC               	decfsz	??___aldiv,f
  4229  0FA5  2F9F               	goto	u2485
  4230  0FA6  3001               	movlw	1
  4231  0FA7  00AC               	movwf	??___aldiv
  4232  0FA8  082C               	movf	??___aldiv,w
  4233  0FA9  07AD               	addwf	___aldiv@counter,f
  4234  0FAA                     l3195:	
  4235  0FAA  1FA7               	btfss	___aldiv@divisor+3,7
  4236  0FAB  2FAD               	goto	u2491
  4237  0FAC  2FAE               	goto	u2490
  4238  0FAD                     u2491:	
  4239  0FAD  2F9D               	goto	l3193
  4240  0FAE                     u2490:	
  4241  0FAE                     l3197:	
  4242  0FAE  3001               	movlw	1
  4243  0FAF  00AC               	movwf	??___aldiv
  4244  0FB0                     u2505:	
  4245  0FB0  1003               	clrc
  4246  0FB1  0DAF               	rlf	___aldiv@quotient,f
  4247  0FB2  0DB0               	rlf	___aldiv@quotient+1,f
  4248  0FB3  0DB1               	rlf	___aldiv@quotient+2,f
  4249  0FB4  0DB2               	rlf	___aldiv@quotient+3,f
  4250  0FB5  0BAC               	decfsz	??___aldiv,f
  4251  0FB6  2FB0               	goto	u2505
  4252  0FB7                     l3199:	
  4253  0FB7  0827               	movf	___aldiv@divisor+3,w
  4254  0FB8  022B               	subwf	___aldiv@dividend+3,w
  4255  0FB9  1D03               	skipz
  4256  0FBA  2FC5               	goto	u2515
  4257  0FBB  0826               	movf	___aldiv@divisor+2,w
  4258  0FBC  022A               	subwf	___aldiv@dividend+2,w
  4259  0FBD  1D03               	skipz
  4260  0FBE  2FC5               	goto	u2515
  4261  0FBF  0825               	movf	___aldiv@divisor+1,w
  4262  0FC0  0229               	subwf	___aldiv@dividend+1,w
  4263  0FC1  1D03               	skipz
  4264  0FC2  2FC5               	goto	u2515
  4265  0FC3  0824               	movf	___aldiv@divisor,w
  4266  0FC4  0228               	subwf	___aldiv@dividend,w
  4267  0FC5                     u2515:	
  4268  0FC5  1C03               	skipc
  4269  0FC6  2FC8               	goto	u2511
  4270  0FC7  2FC9               	goto	u2510
  4271  0FC8                     u2511:	
  4272  0FC8  2FD8               	goto	l3205
  4273  0FC9                     u2510:	
  4274  0FC9                     l3201:	
  4275  0FC9  0824               	movf	___aldiv@divisor,w
  4276  0FCA  02A8               	subwf	___aldiv@dividend,f
  4277  0FCB  0825               	movf	___aldiv@divisor+1,w
  4278  0FCC  1C03               	skipc
  4279  0FCD  0F25               	incfsz	___aldiv@divisor+1,w
  4280  0FCE  02A9               	subwf	___aldiv@dividend+1,f
  4281  0FCF  0826               	movf	___aldiv@divisor+2,w
  4282  0FD0  1C03               	skipc
  4283  0FD1  0F26               	incfsz	___aldiv@divisor+2,w
  4284  0FD2  02AA               	subwf	___aldiv@dividend+2,f
  4285  0FD3  0827               	movf	___aldiv@divisor+3,w
  4286  0FD4  1C03               	skipc
  4287  0FD5  0F27               	incfsz	___aldiv@divisor+3,w
  4288  0FD6  02AB               	subwf	___aldiv@dividend+3,f
  4289  0FD7                     l3203:	
  4290  0FD7  142F               	bsf	___aldiv@quotient,0
  4291  0FD8                     l3205:	
  4292  0FD8  3001               	movlw	1
  4293  0FD9                     u2525:	
  4294  0FD9  1003               	clrc
  4295  0FDA  0CA7               	rrf	___aldiv@divisor+3,f
  4296  0FDB  0CA6               	rrf	___aldiv@divisor+2,f
  4297  0FDC  0CA5               	rrf	___aldiv@divisor+1,f
  4298  0FDD  0CA4               	rrf	___aldiv@divisor,f
  4299  0FDE  3EFF               	addlw	-1
  4300  0FDF  1D03               	skipz
  4301  0FE0  2FD9               	goto	u2525
  4302  0FE1                     l3207:	
  4303  0FE1  3001               	movlw	1
  4304  0FE2  02AD               	subwf	___aldiv@counter,f
  4305  0FE3  1D03               	btfss	3,2
  4306  0FE4  2FE6               	goto	u2531
  4307  0FE5  2FE7               	goto	u2530
  4308  0FE6                     u2531:	
  4309  0FE6  2FAE               	goto	l3197
  4310  0FE7                     u2530:	
  4311  0FE7                     l3209:	
  4312  0FE7  082E               	movf	___aldiv@sign,w
  4313  0FE8  1903               	btfsc	3,2
  4314  0FE9  2FEB               	goto	u2541
  4315  0FEA  2FEC               	goto	u2540
  4316  0FEB                     u2541:	
  4317  0FEB  2FF7               	goto	l3213
  4318  0FEC                     u2540:	
  4319  0FEC                     l3211:	
  4320  0FEC  09AF               	comf	___aldiv@quotient,f
  4321  0FED  09B0               	comf	___aldiv@quotient+1,f
  4322  0FEE  09B1               	comf	___aldiv@quotient+2,f
  4323  0FEF  09B2               	comf	___aldiv@quotient+3,f
  4324  0FF0  0AAF               	incf	___aldiv@quotient,f
  4325  0FF1  1903               	skipnz
  4326  0FF2  0AB0               	incf	___aldiv@quotient+1,f
  4327  0FF3  1903               	skipnz
  4328  0FF4  0AB1               	incf	___aldiv@quotient+2,f
  4329  0FF5  1903               	skipnz
  4330  0FF6  0AB2               	incf	___aldiv@quotient+3,f
  4331  0FF7                     l3213:	
  4332  0FF7  0832               	movf	___aldiv@quotient+3,w
  4333  0FF8  00A7               	movwf	?___aldiv+3
  4334  0FF9  0831               	movf	___aldiv@quotient+2,w
  4335  0FFA  00A6               	movwf	?___aldiv+2
  4336  0FFB  0830               	movf	___aldiv@quotient+1,w
  4337  0FFC  00A5               	movwf	?___aldiv+1
  4338  0FFD  082F               	movf	___aldiv@quotient,w
  4339  0FFE  00A4               	movwf	?___aldiv
  4340  0FFF                     l528:	
  4341  0FFF  0008               	return
  4342  1000                     __end_of___aldiv:	
  4343                           
  4344                           	psect	text13
  4345  073C                     __ptext13:	
  4346 ;; *************** function _ShowDigitsOnDisplay *****************
  4347 ;; Defined at:
  4348 ;;		line 499 in file "main.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;		None
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  display_inde    1   33[BANK0 ] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  1    wreg      void 
  4355 ;; Registers used:
  4356 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4362 ;;      Params:         0       0       0       0       0
  4363 ;;      Locals:         0       1       0       0       0
  4364 ;;      Temps:          0       2       0       0       0
  4365 ;;      Totals:         0       3       0       0       0
  4366 ;;Total ram usage:        3 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    4
  4369 ;; This function calls:
  4370 ;;		_SetDisplay
  4371 ;;		___awmod
  4372 ;; This function is called by:
  4373 ;;		_main
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           
  4378                           ;psect for function _ShowDigitsOnDisplay
  4379  073C                     _ShowDigitsOnDisplay:	
  4380  073C                     l3479:	
  4381                           ;incstack = 0
  4382                           ; Regs used in _ShowDigitsOnDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4383                           
  4384                           
  4385                           ;main.c: 501:     for (unsigned char display_index = 0; display_index < n_semafori; disp
      +                          lay_index++)
  4386  073C  1283               	bcf	3,5	;RP0=0, select bank0
  4387  073D  1303               	bcf	3,6	;RP1=0, select bank0
  4388  073E  01C1               	clrf	ShowDigitsOnDisplay@display_index
  4389  073F  2FB3               	goto	l3499
  4390  0740                     l3485:	
  4391                           
  4392                           ;main.c: 506:             if ((*DigitsArr[display_index]).centinaia > 0)
  4393  0740  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4394  0741  3ED2               	addlw	(low (_DigitsArr| 0))& (0+255)
  4395  0742  0084               	movwf	4
  4396  0743  1383               	bcf	3,7	;select IRP bank1
  4397  0744  0800               	movf	0,w
  4398  0745  0084               	movwf	4
  4399  0746  0800               	movf	0,w
  4400  0747  1903               	btfsc	3,2
  4401  0748  2F4A               	goto	u2871
  4402  0749  2F4B               	goto	u2870
  4403  074A                     u2871:	
  4404  074A  2FC6               	goto	l3501
  4405  074B                     u2870:	
  4406  074B                     l3487:	
  4407                           
  4408                           ;main.c: 507:             {;main.c: 508:                 SetDisplay(display_index, 1, 0,
      +                           0, display[(*DigitsArr[display_index]).centinaia]);
  4409  074B  01A4               	clrf	SetDisplay@d1
  4410  074C  0AA4               	incf	SetDisplay@d1,f
  4411  074D  01A5               	clrf	SetDisplay@d2
  4412  074E  01A6               	clrf	SetDisplay@d3
  4413  074F  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4414  0750  3ED2               	addlw	(low (_DigitsArr| 0))& (0+255)
  4415  0751  0084               	movwf	4
  4416  0752  0800               	movf	0,w
  4417  0753  0084               	movwf	4
  4418  0754  0800               	movf	0,w
  4419  0755  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4420  0756  0084               	movwf	4
  4421  0757  120A  158A  2000  120A  118A  	fcall	stringdir
  4422  075C  00BF               	movwf	??_ShowDigitsOnDisplay
  4423  075D  083F               	movf	??_ShowDigitsOnDisplay,w
  4424  075E  00A7               	movwf	SetDisplay@value
  4425  075F  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4426  0760  120A  158A  2449  120A  118A  	fcall	_SetDisplay
  4427  0765  2FC6               	goto	l3501
  4428  0766                     l3489:	
  4429                           
  4430                           ;main.c: 512:             if ((*DigitsArr[display_index]).decine > 0 || (*DigitsArr[disp
      +                          lay_index]).centinaia > 0)
  4431  0766  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4432  0767  3ED2               	addlw	(low (_DigitsArr| 0))& (0+255)
  4433  0768  0084               	movwf	4
  4434  0769  1383               	bcf	3,7	;select IRP bank1
  4435  076A  0A00               	incf	0,w
  4436  076B  0084               	movwf	4
  4437  076C  0800               	movf	0,w
  4438  076D  1D03               	btfss	3,2
  4439  076E  2F70               	goto	u2881
  4440  076F  2F71               	goto	u2880
  4441  0770                     u2881:	
  4442  0770  2F7B               	goto	l3493
  4443  0771                     u2880:	
  4444  0771                     l3491:	
  4445  0771  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4446  0772  3ED2               	addlw	(low (_DigitsArr| 0))& (0+255)
  4447  0773  0084               	movwf	4
  4448  0774  0800               	movf	0,w
  4449  0775  0084               	movwf	4
  4450  0776  0800               	movf	0,w
  4451  0777  1903               	btfsc	3,2
  4452  0778  2F7A               	goto	u2891
  4453  0779  2F7B               	goto	u2890
  4454  077A                     u2891:	
  4455  077A  2FC6               	goto	l3501
  4456  077B                     u2890:	
  4457  077B                     l3493:	
  4458                           
  4459                           ;main.c: 513:             {;main.c: 514:                 SetDisplay(display_index, 0, 1,
      +                           0, display[(*DigitsArr[display_index]).decine]);
  4460  077B  01A4               	clrf	SetDisplay@d1
  4461  077C  01A5               	clrf	SetDisplay@d2
  4462  077D  0AA5               	incf	SetDisplay@d2,f
  4463  077E  01A6               	clrf	SetDisplay@d3
  4464  077F  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4465  0780  3ED2               	addlw	(low (_DigitsArr| 0))& (0+255)
  4466  0781  0084               	movwf	4
  4467  0782  0A00               	incf	0,w
  4468  0783  0084               	movwf	4
  4469  0784  0800               	movf	0,w
  4470  0785  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4471  0786  0084               	movwf	4
  4472  0787  120A  158A  2000  120A  118A  	fcall	stringdir
  4473  078C  00BF               	movwf	??_ShowDigitsOnDisplay
  4474  078D  083F               	movf	??_ShowDigitsOnDisplay,w
  4475  078E  00A7               	movwf	SetDisplay@value
  4476  078F  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4477  0790  120A  158A  2449  120A  118A  	fcall	_SetDisplay
  4478  0795  2FC6               	goto	l3501
  4479  0796                     l3495:	
  4480                           
  4481                           ;main.c: 518:             SetDisplay(display_index, 0, 0, 1, display[(*DigitsArr[display
      +                          _index]).unita]);
  4482  0796  01A4               	clrf	SetDisplay@d1
  4483  0797  01A5               	clrf	SetDisplay@d2
  4484  0798  01A6               	clrf	SetDisplay@d3
  4485  0799  0AA6               	incf	SetDisplay@d3,f
  4486  079A  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4487  079B  3ED2               	addlw	(low (_DigitsArr| 0))& (0+255)
  4488  079C  0084               	movwf	4
  4489  079D  1383               	bcf	3,7	;select IRP bank1
  4490  079E  0800               	movf	0,w
  4491  079F  3E02               	addlw	2
  4492  07A0  0084               	movwf	4
  4493  07A1  0800               	movf	0,w
  4494  07A2  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4495  07A3  0084               	movwf	4
  4496  07A4  120A  158A  2000  120A  118A  	fcall	stringdir
  4497  07A9  00BF               	movwf	??_ShowDigitsOnDisplay
  4498  07AA  083F               	movf	??_ShowDigitsOnDisplay,w
  4499  07AB  00A7               	movwf	SetDisplay@value
  4500  07AC  0841               	movf	ShowDigitsOnDisplay@display_index,w
  4501  07AD  120A  158A  2449  120A  118A  	fcall	_SetDisplay
  4502                           
  4503                           ;main.c: 519:             break;
  4504  07B2  2FC6               	goto	l3501
  4505  07B3                     l3499:	
  4506  07B3  0861               	movf	_disp,w
  4507  07B4  00BF               	movwf	??_ShowDigitsOnDisplay
  4508  07B5  01C0               	clrf	??_ShowDigitsOnDisplay+1
  4509                           
  4510                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4511                           ; Switch size 1, requested type "simple"
  4512                           ; Number of cases is 1, Range of values is 0 to 0
  4513                           ; switch strategies available:
  4514                           ; Name         Instructions Cycles
  4515                           ; simple_byte            4     3 (average)
  4516                           ; direct_byte           11     8 (fixed)
  4517                           ; jumptable            260     6 (fixed)
  4518                           ;	Chosen strategy is simple_byte
  4519  07B6  0840               	movf	??_ShowDigitsOnDisplay+1,w
  4520  07B7  3A00               	xorlw	0	; case 0
  4521  07B8  1903               	skipnz
  4522  07B9  2FBB               	goto	l3953
  4523  07BA  2FC6               	goto	l3501
  4524  07BB                     l3953:	
  4525                           
  4526                           ; Switch size 1, requested type "simple"
  4527                           ; Number of cases is 3, Range of values is 0 to 2
  4528                           ; switch strategies available:
  4529                           ; Name         Instructions Cycles
  4530                           ; simple_byte           10     6 (average)
  4531                           ; direct_byte           17     8 (fixed)
  4532                           ; jumptable            260     6 (fixed)
  4533                           ;	Chosen strategy is simple_byte
  4534  07BB  083F               	movf	??_ShowDigitsOnDisplay,w
  4535  07BC  3A00               	xorlw	0	; case 0
  4536  07BD  1903               	skipnz
  4537  07BE  2F40               	goto	l3485
  4538  07BF  3A01               	xorlw	1	; case 1
  4539  07C0  1903               	skipnz
  4540  07C1  2F66               	goto	l3489
  4541  07C2  3A03               	xorlw	3	; case 2
  4542  07C3  1903               	skipnz
  4543  07C4  2F96               	goto	l3495
  4544  07C5  2FC6               	goto	l3501
  4545  07C6                     l3501:	
  4546                           
  4547                           ;main.c: 521:     }
  4548  07C6  3001               	movlw	1
  4549  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  4550  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  4551  07C9  00BF               	movwf	??_ShowDigitsOnDisplay
  4552  07CA  083F               	movf	??_ShowDigitsOnDisplay,w
  4553  07CB  07C1               	addwf	ShowDigitsOnDisplay@display_index,f
  4554  07CC                     l3503:	
  4555  07CC  3008               	movlw	8
  4556  07CD  0241               	subwf	ShowDigitsOnDisplay@display_index,w
  4557  07CE  1C03               	skipc
  4558  07CF  2FD1               	goto	u2901
  4559  07D0  2FD2               	goto	u2900
  4560  07D1                     u2901:	
  4561  07D1  2FB3               	goto	l3499
  4562  07D2                     u2900:	
  4563  07D2                     l3505:	
  4564                           
  4565                           ;main.c: 522:     disp = (disp + 1) % 3;
  4566  07D2  3003               	movlw	3
  4567  07D3  00B8               	movwf	___awmod@divisor
  4568  07D4  3000               	movlw	0
  4569  07D5  00B9               	movwf	___awmod@divisor+1
  4570  07D6  0861               	movf	_disp,w
  4571  07D7  3E01               	addlw	1
  4572  07D8  00BA               	movwf	___awmod@dividend
  4573  07D9  3000               	movlw	0
  4574  07DA  1803               	skipnc
  4575  07DB  3001               	movlw	1
  4576  07DC  00BB               	movwf	___awmod@dividend+1
  4577  07DD  120A  158A  24F6  120A  118A  	fcall	___awmod
  4578  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  4579  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  4580  07E4  0838               	movf	?___awmod,w
  4581  07E5  00BF               	movwf	??_ShowDigitsOnDisplay
  4582  07E6  083F               	movf	??_ShowDigitsOnDisplay,w
  4583  07E7  00E1               	movwf	_disp
  4584  07E8                     l357:	
  4585  07E8  0008               	return
  4586  07E9                     __end_of_ShowDigitsOnDisplay:	
  4587                           
  4588                           	psect	text14
  4589  0C49                     __ptext14:	
  4590 ;; *************** function _SetDisplay *****************
  4591 ;; Defined at:
  4592 ;;		line 474 in file "main.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  display_inde    1    wreg     unsigned char 
  4595 ;;  d1              1    4[BANK0 ] unsigned char 
  4596 ;;  d2              1    5[BANK0 ] unsigned char 
  4597 ;;  d3              1    6[BANK0 ] unsigned char 
  4598 ;;  value           1    7[BANK0 ] unsigned char 
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;  display_inde    1   10[BANK0 ] unsigned char 
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4610 ;;      Params:         0       4       0       0       0
  4611 ;;      Locals:         0       1       0       0       0
  4612 ;;      Temps:          0       2       0       0       0
  4613 ;;      Totals:         0       7       0       0       0
  4614 ;;Total ram usage:        7 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:    3
  4617 ;; This function calls:
  4618 ;;		Nothing
  4619 ;; This function is called by:
  4620 ;;		_ShowDigitsOnDisplay
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624                           
  4625                           ;psect for function _SetDisplay
  4626  0C49                     _SetDisplay:	
  4627                           
  4628                           ;incstack = 0
  4629                           ; Regs used in _SetDisplay: [wreg-fsr0h+status,2+status,0]
  4630                           ;SetDisplay@display_index stored from wreg
  4631  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  4632  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  4633  0C4B  00AA               	movwf	SetDisplay@display_index
  4634  0C4C                     l3117:	
  4635                           
  4636                           ;main.c: 474: void SetDisplay(unsigned char display_index, char d1, char d2, char d3, ch
      +                          ar value);main.c: 475: {;main.c: 476:     switch (display_index)
  4637  0C4C  2C8D               	goto	l3127
  4638  0C4D                     l3119:	
  4639                           
  4640                           ;main.c: 479:         PORTAbits.RA2 = d1;
  4641  0C4D  0C24               	rrf	SetDisplay@d1,w
  4642  0C4E  1C03               	skipc
  4643  0C4F  1105               	bcf	5,2	;volatile
  4644  0C50  1803               	skipnc
  4645  0C51  1505               	bsf	5,2	;volatile
  4646                           
  4647                           ;main.c: 480:         PORTAbits.RA3 = d2;
  4648  0C52  0C25               	rrf	SetDisplay@d2,w
  4649  0C53  1C03               	skipc
  4650  0C54  1185               	bcf	5,3	;volatile
  4651  0C55  1803               	skipnc
  4652  0C56  1585               	bsf	5,3	;volatile
  4653                           
  4654                           ;main.c: 481:         PORTAbits.RA4 = d3;
  4655  0C57  0C26               	rrf	SetDisplay@d3,w
  4656  0C58  1C03               	skipc
  4657  0C59  1205               	bcf	5,4	;volatile
  4658  0C5A  1803               	skipnc
  4659  0C5B  1605               	bsf	5,4	;volatile
  4660                           
  4661                           ;main.c: 482:         PORTBbits.RB0 = d1;
  4662  0C5C  0C24               	rrf	SetDisplay@d1,w
  4663  0C5D  1C03               	skipc
  4664  0C5E  1006               	bcf	6,0	;volatile
  4665  0C5F  1803               	skipnc
  4666  0C60  1406               	bsf	6,0	;volatile
  4667                           
  4668                           ;main.c: 483:         PORTBbits.RB0 = d2;
  4669  0C61  0C25               	rrf	SetDisplay@d2,w
  4670  0C62  1C03               	skipc
  4671  0C63  1006               	bcf	6,0	;volatile
  4672  0C64  1803               	skipnc
  4673  0C65  1406               	bsf	6,0	;volatile
  4674                           
  4675                           ;main.c: 484:         PORTBbits.RB0 = d3;
  4676  0C66  0C26               	rrf	SetDisplay@d3,w
  4677  0C67  1C03               	skipc
  4678  0C68  1006               	bcf	6,0	;volatile
  4679  0C69  1803               	skipnc
  4680  0C6A  1406               	bsf	6,0	;volatile
  4681  0C6B                     l3121:	
  4682                           
  4683                           ;main.c: 485:         PORTD = value;
  4684  0C6B  0827               	movf	SetDisplay@value,w
  4685  0C6C  0088               	movwf	8	;volatile
  4686                           
  4687                           ;main.c: 486:         break;
  4688  0C6D  2C9D               	goto	l343
  4689  0C6E                     l3123:	
  4690                           
  4691                           ;main.c: 488:         PORTAbits.RA5 = d1;
  4692  0C6E  0C24               	rrf	SetDisplay@d1,w
  4693  0C6F  1C03               	skipc
  4694  0C70  1285               	bcf	5,5	;volatile
  4695  0C71  1803               	skipnc
  4696  0C72  1685               	bsf	5,5	;volatile
  4697                           
  4698                           ;main.c: 489:         PORTBbits.RB0 = d2;
  4699  0C73  0C25               	rrf	SetDisplay@d2,w
  4700  0C74  1C03               	skipc
  4701  0C75  1006               	bcf	6,0	;volatile
  4702  0C76  1803               	skipnc
  4703  0C77  1406               	bsf	6,0	;volatile
  4704                           
  4705                           ;main.c: 490:         PORTBbits.RB0 = d3;
  4706  0C78  0C26               	rrf	SetDisplay@d3,w
  4707  0C79  1C03               	skipc
  4708  0C7A  1006               	bcf	6,0	;volatile
  4709  0C7B  1803               	skipnc
  4710  0C7C  1406               	bsf	6,0	;volatile
  4711                           
  4712                           ;main.c: 491:         PORTBbits.RB0 = d1;
  4713  0C7D  0C24               	rrf	SetDisplay@d1,w
  4714  0C7E  1C03               	skipc
  4715  0C7F  1006               	bcf	6,0	;volatile
  4716  0C80  1803               	skipnc
  4717  0C81  1406               	bsf	6,0	;volatile
  4718                           
  4719                           ;main.c: 492:         PORTBbits.RB0 = d2;
  4720  0C82  0C25               	rrf	SetDisplay@d2,w
  4721  0C83  1C03               	skipc
  4722  0C84  1006               	bcf	6,0	;volatile
  4723  0C85  1803               	skipnc
  4724  0C86  1406               	bsf	6,0	;volatile
  4725                           
  4726                           ;main.c: 493:         PORTBbits.RB0 = d3;
  4727  0C87  0C26               	rrf	SetDisplay@d3,w
  4728  0C88  1C03               	skipc
  4729  0C89  1006               	bcf	6,0	;volatile
  4730  0C8A  1803               	skipnc
  4731  0C8B  1406               	bsf	6,0	;volatile
  4732                           
  4733                           ;main.c: 495:         break;
  4734  0C8C  2C9D               	goto	l343
  4735  0C8D                     l3127:	
  4736  0C8D  082A               	movf	SetDisplay@display_index,w
  4737  0C8E  00A8               	movwf	??_SetDisplay
  4738  0C8F  01A9               	clrf	??_SetDisplay+1
  4739                           
  4740                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4741                           ; Switch size 1, requested type "simple"
  4742                           ; Number of cases is 1, Range of values is 0 to 0
  4743                           ; switch strategies available:
  4744                           ; Name         Instructions Cycles
  4745                           ; simple_byte            4     3 (average)
  4746                           ; direct_byte           11     8 (fixed)
  4747                           ; jumptable            260     6 (fixed)
  4748                           ;	Chosen strategy is simple_byte
  4749  0C90  0829               	movf	??_SetDisplay+1,w
  4750  0C91  3A00               	xorlw	0	; case 0
  4751  0C92  1903               	skipnz
  4752  0C93  2C95               	goto	l3955
  4753  0C94  2C9D               	goto	l343
  4754  0C95                     l3955:	
  4755                           
  4756                           ; Switch size 1, requested type "simple"
  4757                           ; Number of cases is 2, Range of values is 0 to 1
  4758                           ; switch strategies available:
  4759                           ; Name         Instructions Cycles
  4760                           ; simple_byte            7     4 (average)
  4761                           ; direct_byte           14     8 (fixed)
  4762                           ; jumptable            260     6 (fixed)
  4763                           ;	Chosen strategy is simple_byte
  4764  0C95  0828               	movf	??_SetDisplay,w
  4765  0C96  3A00               	xorlw	0	; case 0
  4766  0C97  1903               	skipnz
  4767  0C98  2C4D               	goto	l3119
  4768  0C99  3A01               	xorlw	1	; case 1
  4769  0C9A  1903               	skipnz
  4770  0C9B  2C6E               	goto	l3123
  4771  0C9C  2C9D               	goto	l343
  4772  0C9D                     l343:	
  4773  0C9D  0008               	return
  4774  0C9E                     __end_of_SetDisplay:	
  4775                           
  4776                           	psect	text15
  4777  0D51                     __ptext15:	
  4778 ;; *************** function _SetReceivedTimes *****************
  4779 ;; Defined at:
  4780 ;;		line 74 in file "./CustomLib/TrafficLight.h"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;  _dataFromGat    1    wreg     PTR unsigned char 
  4783 ;;		 -> dataFromGateway(15), 
  4784 ;;  _semafori       1   12[BANK0 ] PTR PTR struct .
  4785 ;;		 -> Semafori(8), 
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;  _dataFromGat    1   19[BANK0 ] PTR unsigned char 
  4788 ;;		 -> dataFromGateway(15), 
  4789 ;;  index           1   20[BANK0 ] unsigned char 
  4790 ;;  colorId         1   18[BANK0 ] unsigned char 
  4791 ;;  semaforoId      1   17[BANK0 ] unsigned char 
  4792 ;;  i               1   21[BANK0 ] unsigned char 
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  1    wreg      void 
  4795 ;; Registers used:
  4796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4802 ;;      Params:         0       1       0       0       0
  4803 ;;      Locals:         0       5       0       0       0
  4804 ;;      Temps:          0       4       0       0       0
  4805 ;;      Totals:         0      10       0       0       0
  4806 ;;Total ram usage:       10 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    4
  4809 ;; This function calls:
  4810 ;;		_GetTime
  4811 ;;		___bmul
  4812 ;; This function is called by:
  4813 ;;		_main
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           
  4818                           ;psect for function _SetReceivedTimes
  4819  0D51                     _SetReceivedTimes:	
  4820                           
  4821                           ;incstack = 0
  4822                           ; Regs used in _SetReceivedTimes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4823                           ;SetReceivedTimes@_dataFromGateway stored from wreg
  4824  0D51  1283               	bcf	3,5	;RP0=0, select bank0
  4825  0D52  1303               	bcf	3,6	;RP1=0, select bank0
  4826  0D53  00B3               	movwf	SetReceivedTimes@_dataFromGateway
  4827  0D54                     l3361:	
  4828                           
  4829                           ;./CustomLib/TrafficLight.h: 74: void SetReceivedTimes(ProtocolBytes _dataFromGateway, _
      +                          Semafori _semafori);./CustomLib/TrafficLight.h: 75: {;./CustomLib/TrafficLight.h: 76:   
      +                            for (unsigned char i = 0; i < 3; i++)
  4830  0D54  01B5               	clrf	SetReceivedTimes@i
  4831  0D55                     l3363:	
  4832  0D55  3003               	movlw	3
  4833  0D56  0235               	subwf	SetReceivedTimes@i,w
  4834  0D57  1C03               	skipc
  4835  0D58  2D5A               	goto	u2791
  4836  0D59  2D5B               	goto	u2790
  4837  0D5A                     u2791:	
  4838  0D5A  2D5C               	goto	l3367
  4839  0D5B                     u2790:	
  4840  0D5B  2DB1               	goto	l147
  4841  0D5C                     l3367:	
  4842                           
  4843                           ;./CustomLib/TrafficLight.h: 77:     {;./CustomLib/TrafficLight.h: 78:         unsigned 
      +                          char index = i * 5;
  4844  0D5C  3005               	movlw	5
  4845  0D5D  00AD               	movwf	??_SetReceivedTimes
  4846  0D5E  082D               	movf	??_SetReceivedTimes,w
  4847  0D5F  00A4               	movwf	___bmul@multiplicand
  4848  0D60  0835               	movf	SetReceivedTimes@i,w
  4849  0D61  120A  118A  27E9  120A  158A  	fcall	___bmul
  4850  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  4851  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  4852  0D68  00AE               	movwf	??_SetReceivedTimes+1
  4853  0D69  082E               	movf	??_SetReceivedTimes+1,w
  4854  0D6A  00B4               	movwf	SetReceivedTimes@index
  4855  0D6B                     l3369:	
  4856                           
  4857                           ;./CustomLib/TrafficLight.h: 79:         unsigned char semaforoId = (_dataFromGateway[in
      +                          dex] >> 1) & 0x0F;
  4858  0D6B  0834               	movf	SetReceivedTimes@index,w
  4859  0D6C  0733               	addwf	SetReceivedTimes@_dataFromGateway,w
  4860  0D6D  00AD               	movwf	??_SetReceivedTimes
  4861  0D6E  082D               	movf	??_SetReceivedTimes,w
  4862  0D6F  0084               	movwf	4
  4863  0D70  1783               	bsf	3,7	;select IRP bank2
  4864  0D71  0800               	movf	0,w
  4865  0D72  00AE               	movwf	??_SetReceivedTimes+1
  4866  0D73  1003               	clrc
  4867  0D74  0C2E               	rrf	??_SetReceivedTimes+1,w
  4868  0D75  390F               	andlw	15
  4869  0D76  00AF               	movwf	??_SetReceivedTimes+2
  4870  0D77  082F               	movf	??_SetReceivedTimes+2,w
  4871  0D78  00B1               	movwf	SetReceivedTimes@semaforoId
  4872  0D79                     l3371:	
  4873                           
  4874                           ;./CustomLib/TrafficLight.h: 80:         unsigned char colorId = ((_dataFromGateway[inde
      +                          x] >> 5) & 0x03) - 1;
  4875  0D79  0834               	movf	SetReceivedTimes@index,w
  4876  0D7A  0733               	addwf	SetReceivedTimes@_dataFromGateway,w
  4877  0D7B  00AD               	movwf	??_SetReceivedTimes
  4878  0D7C  082D               	movf	??_SetReceivedTimes,w
  4879  0D7D  0084               	movwf	4
  4880  0D7E  0800               	movf	0,w
  4881  0D7F  00AE               	movwf	??_SetReceivedTimes+1
  4882  0D80  3005               	movlw	5
  4883  0D81                     u2805:	
  4884  0D81  1003               	clrc
  4885  0D82  0CAE               	rrf	??_SetReceivedTimes+1,f
  4886  0D83  3EFF               	addlw	-1
  4887  0D84  1D03               	skipz
  4888  0D85  2D81               	goto	u2805
  4889  0D86  082E               	movf	??_SetReceivedTimes+1,w
  4890  0D87  3903               	andlw	3
  4891  0D88  3EFF               	addlw	255
  4892  0D89  00AF               	movwf	??_SetReceivedTimes+2
  4893  0D8A  082F               	movf	??_SetReceivedTimes+2,w
  4894  0D8B  00B2               	movwf	SetReceivedTimes@colorId
  4895  0D8C                     l3373:	
  4896                           
  4897                           ;./CustomLib/TrafficLight.h: 82:         (*(_semafori)[semaforoId]).new_times[colorId] =
      +                           GetTime(index, _dataFromGateway);
  4898  0D8C  0833               	movf	SetReceivedTimes@_dataFromGateway,w
  4899  0D8D  00AD               	movwf	??_SetReceivedTimes
  4900  0D8E  082D               	movf	??_SetReceivedTimes,w
  4901  0D8F  00A4               	movwf	GetTime@_dataFromGateway
  4902  0D90  0834               	movf	SetReceivedTimes@index,w
  4903  0D91  120A  158A  231C  120A  158A  	fcall	_GetTime
  4904  0D96  1283               	bcf	3,5	;RP0=0, select bank0
  4905  0D97  1303               	bcf	3,6	;RP1=0, select bank0
  4906  0D98  0831               	movf	SetReceivedTimes@semaforoId,w
  4907  0D99  072C               	addwf	SetReceivedTimes@_semafori,w
  4908  0D9A  00AE               	movwf	??_SetReceivedTimes+1
  4909  0D9B  082E               	movf	??_SetReceivedTimes+1,w
  4910  0D9C  0084               	movwf	4
  4911  0D9D  0832               	movf	SetReceivedTimes@colorId,w
  4912  0D9E  00AF               	movwf	??_SetReceivedTimes+2
  4913  0D9F  072F               	addwf	??_SetReceivedTimes+2,w
  4914  0DA0  1383               	bcf	3,7	;select IRP bank0
  4915  0DA1  0700               	addwf	0,w
  4916  0DA2  00B0               	movwf	??_SetReceivedTimes+3
  4917  0DA3  0830               	movf	??_SetReceivedTimes+3,w
  4918  0DA4  3E06               	addlw	6
  4919  0DA5  0084               	movwf	4
  4920  0DA6  0824               	movf	?_GetTime,w
  4921  0DA7  1783               	bsf	3,7	;select IRP bank2
  4922  0DA8  0080               	movwf	0
  4923  0DA9  0A84               	incf	4,f
  4924  0DAA  0825               	movf	?_GetTime+1,w
  4925  0DAB  0080               	movwf	0
  4926  0DAC                     l3375:	
  4927                           
  4928                           ;./CustomLib/TrafficLight.h: 83:     }
  4929  0DAC  3001               	movlw	1
  4930  0DAD  00AD               	movwf	??_SetReceivedTimes
  4931  0DAE  082D               	movf	??_SetReceivedTimes,w
  4932  0DAF  07B5               	addwf	SetReceivedTimes@i,f
  4933  0DB0  2D55               	goto	l3363
  4934  0DB1                     l147:	
  4935  0DB1  0008               	return
  4936  0DB2                     __end_of_SetReceivedTimes:	
  4937                           
  4938                           	psect	text16
  4939  0B1C                     __ptext16:	
  4940 ;; *************** function _GetTime *****************
  4941 ;; Defined at:
  4942 ;;		line 25 in file "./CustomLib/TrafficLight.h"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;  index           1    wreg     unsigned char 
  4945 ;;  _dataFromGat    1    4[BANK0 ] PTR unsigned char 
  4946 ;;		 -> dataFromGateway(15), 
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;  index           1    8[BANK0 ] unsigned char 
  4949 ;;  tmp             2   10[BANK0 ] int 
  4950 ;;  shortInt        1    9[BANK0 ] struct .
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  2    4[BANK0 ] int 
  4953 ;; Registers used:
  4954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4960 ;;      Params:         0       2       0       0       0
  4961 ;;      Locals:         0       4       0       0       0
  4962 ;;      Temps:          0       2       0       0       0
  4963 ;;      Totals:         0       8       0       0       0
  4964 ;;Total ram usage:        8 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:    3
  4967 ;; This function calls:
  4968 ;;		Nothing
  4969 ;; This function is called by:
  4970 ;;		_SetReceivedTimes
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           
  4975                           ;psect for function _GetTime
  4976  0B1C                     _GetTime:	
  4977                           
  4978                           ;incstack = 0
  4979                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4980                           ;GetTime@index stored from wreg
  4981  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
  4982  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
  4983  0B1E  00A8               	movwf	GetTime@index
  4984  0B1F                     l3099:	
  4985                           
  4986                           ;./CustomLib/TrafficLight.h: 25: int GetTime(unsigned char index, ProtocolBytes _dataFro
      +                          mGateway);./CustomLib/TrafficLight.h: 26: {;./CustomLib/TrafficLight.h: 27:     int tmp;
      +                          ;./CustomLib/TrafficLight.h: 31:     } shortInt;;./CustomLib/TrafficLight.h: 33:     sho
      +                          rtInt.Val = _dataFromGateway[index + 3] & 0x7F;
  4987  0B1F  0828               	movf	GetTime@index,w
  4988  0B20  0724               	addwf	GetTime@_dataFromGateway,w
  4989  0B21  00A6               	movwf	??_GetTime
  4990  0B22  0826               	movf	??_GetTime,w
  4991  0B23  3E03               	addlw	3
  4992  0B24  0084               	movwf	4
  4993  0B25  307F               	movlw	127
  4994  0B26  1783               	bsf	3,7	;select IRP bank2
  4995  0B27  0500               	andwf	0,w
  4996  0B28  00A7               	movwf	??_GetTime+1
  4997  0B29  0829               	movf	GetTime@shortInt,w
  4998  0B2A  0627               	xorwf	??_GetTime+1,w
  4999  0B2B  3980               	andlw	-128
  5000  0B2C  0627               	xorwf	??_GetTime+1,w
  5001  0B2D  00A9               	movwf	GetTime@shortInt
  5002  0B2E                     l3101:	
  5003                           
  5004                           ;./CustomLib/TrafficLight.h: 34:     tmp = shortInt.Val;
  5005  0B2E  0829               	movf	GetTime@shortInt,w
  5006  0B2F  397F               	andlw	127
  5007  0B30  00A6               	movwf	??_GetTime
  5008  0B31  01A7               	clrf	??_GetTime+1
  5009  0B32  0826               	movf	??_GetTime,w
  5010  0B33  00AA               	movwf	GetTime@tmp
  5011  0B34  0827               	movf	??_GetTime+1,w
  5012  0B35  00AB               	movwf	GetTime@tmp+1
  5013  0B36                     l3103:	
  5014                           
  5015                           ;./CustomLib/TrafficLight.h: 35:     tmp = (tmp << 7) & 0x80;
  5016  0B36  082B               	movf	GetTime@tmp+1,w
  5017  0B37  00A7               	movwf	??_GetTime+1
  5018  0B38  082A               	movf	GetTime@tmp,w
  5019  0B39  00A6               	movwf	??_GetTime
  5020  0B3A  3007               	movlw	7
  5021  0B3B  00FF               	movwf	btemp+1
  5022  0B3C                     u2325:	
  5023  0B3C  1003               	clrc
  5024  0B3D  0DA6               	rlf	??_GetTime,f
  5025  0B3E  0DA7               	rlf	??_GetTime+1,f
  5026  0B3F  0BFF               	decfsz	btemp+1,f
  5027  0B40  2B3C               	goto	u2325
  5028  0B41  3080               	movlw	128
  5029  0B42  0526               	andwf	??_GetTime,w
  5030  0B43  00AA               	movwf	GetTime@tmp
  5031  0B44  3000               	movlw	0
  5032  0B45  0527               	andwf	??_GetTime+1,w
  5033  0B46  00AB               	movwf	GetTime@tmp+1
  5034  0B47                     l3105:	
  5035                           
  5036                           ;./CustomLib/TrafficLight.h: 37:     shortInt.Val = _dataFromGateway[index + 2] & 0x7F;
  5037  0B47  0828               	movf	GetTime@index,w
  5038  0B48  0724               	addwf	GetTime@_dataFromGateway,w
  5039  0B49  00A6               	movwf	??_GetTime
  5040  0B4A  0826               	movf	??_GetTime,w
  5041  0B4B  3E02               	addlw	2
  5042  0B4C  0084               	movwf	4
  5043  0B4D  307F               	movlw	127
  5044  0B4E  0500               	andwf	0,w
  5045  0B4F  00A7               	movwf	??_GetTime+1
  5046  0B50  0829               	movf	GetTime@shortInt,w
  5047  0B51  0627               	xorwf	??_GetTime+1,w
  5048  0B52  3980               	andlw	-128
  5049  0B53  0627               	xorwf	??_GetTime+1,w
  5050  0B54  00A9               	movwf	GetTime@shortInt
  5051  0B55                     l3107:	
  5052                           
  5053                           ;./CustomLib/TrafficLight.h: 38:     tmp = tmp | shortInt.Val;
  5054  0B55  0829               	movf	GetTime@shortInt,w
  5055  0B56  397F               	andlw	127
  5056  0B57  00A6               	movwf	??_GetTime
  5057  0B58  082A               	movf	GetTime@tmp,w
  5058  0B59  0426               	iorwf	??_GetTime,w
  5059  0B5A  00AA               	movwf	GetTime@tmp
  5060  0B5B  082B               	movf	GetTime@tmp+1,w
  5061  0B5C  00AB               	movwf	GetTime@tmp+1
  5062  0B5D                     l3109:	
  5063                           
  5064                           ;./CustomLib/TrafficLight.h: 40:     return tmp;
  5065  0B5D  082B               	movf	GetTime@tmp+1,w
  5066  0B5E  00A5               	movwf	?_GetTime+1
  5067  0B5F  082A               	movf	GetTime@tmp,w
  5068  0B60  00A4               	movwf	?_GetTime
  5069  0B61                     l130:	
  5070  0B61  0008               	return
  5071  0B62                     __end_of_GetTime:	
  5072                           
  5073                           	psect	text17
  5074  0675                     __ptext17:	
  5075 ;; *************** function _SetDefaultTimers *****************
  5076 ;; Defined at:
  5077 ;;		line 44 in file "./CustomLib/TrafficLight.h"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  rosso           2    4[BANK0 ] int 
  5080 ;;  verde           2    6[BANK0 ] int 
  5081 ;;  giallo          2    8[BANK0 ] int 
  5082 ;;  _semafori       1   10[BANK0 ] PTR PTR struct .
  5083 ;;		 -> Semafori(8), 
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;  i               1   15[BANK0 ] unsigned char 
  5086 ;;  l               1   14[BANK0 ] unsigned char 
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  1    wreg      void 
  5089 ;; Registers used:
  5090 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5096 ;;      Params:         0       7       0       0       0
  5097 ;;      Locals:         0       2       0       0       0
  5098 ;;      Temps:          0       3       0       0       0
  5099 ;;      Totals:         0      12       0       0       0
  5100 ;;Total ram usage:       12 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    3
  5103 ;; This function calls:
  5104 ;;		Nothing
  5105 ;; This function is called by:
  5106 ;;		_main
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           
  5111                           ;psect for function _SetDefaultTimers
  5112  0675                     _SetDefaultTimers:	
  5113  0675                     l3325:	
  5114                           ;incstack = 0
  5115                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  5116                           
  5117                           
  5118                           ;./CustomLib/TrafficLight.h: 44: void SetDefaultTimers(int rosso, int verde, int giallo,
      +                           _Semafori _semafori);./CustomLib/TrafficLight.h: 45: {;./CustomLib/TrafficLight.h: 46: 
      +                              for (unsigned char l = 0; l < n_semafori; l++)
  5119  0675  1283               	bcf	3,5	;RP0=0, select bank0
  5120  0676  1303               	bcf	3,6	;RP1=0, select bank0
  5121  0677  01AE               	clrf	SetDefaultTimers@l
  5122  0678                     l3331:	
  5123                           
  5124                           ;./CustomLib/TrafficLight.h: 47:     {;./CustomLib/TrafficLight.h: 48:         for (unsi
      +                          gned char i = 0; i < 3; i++)
  5125  0678  01AF               	clrf	SetDefaultTimers@i
  5126  0679  2EF2               	goto	l3345
  5127  067A                     l3337:	
  5128                           
  5129                           ;./CustomLib/TrafficLight.h: 53:                 (*(_semafori)[l]).times[i] = rosso;
  5130  067A  082E               	movf	SetDefaultTimers@l,w
  5131  067B  072A               	addwf	SetDefaultTimers@_semafori,w
  5132  067C  00AB               	movwf	??_SetDefaultTimers
  5133  067D  082B               	movf	??_SetDefaultTimers,w
  5134  067E  0084               	movwf	4
  5135  067F  082F               	movf	SetDefaultTimers@i,w
  5136  0680  00AC               	movwf	??_SetDefaultTimers+1
  5137  0681  072C               	addwf	??_SetDefaultTimers+1,w
  5138  0682  1383               	bcf	3,7	;select IRP bank0
  5139  0683  0700               	addwf	0,w
  5140  0684  00AD               	movwf	??_SetDefaultTimers+2
  5141  0685  082D               	movf	??_SetDefaultTimers+2,w
  5142  0686  0084               	movwf	4
  5143  0687  0824               	movf	SetDefaultTimers@rosso,w
  5144  0688  1783               	bsf	3,7	;select IRP bank2
  5145  0689  0080               	movwf	0
  5146  068A  0A84               	incf	4,f
  5147  068B  0825               	movf	SetDefaultTimers@rosso+1,w
  5148  068C  0080               	movwf	0
  5149                           
  5150                           ;./CustomLib/TrafficLight.h: 54:                 (*(_semafori)[l]).new_times[i] = rosso;
  5151  068D  082E               	movf	SetDefaultTimers@l,w
  5152  068E  072A               	addwf	SetDefaultTimers@_semafori,w
  5153  068F  00AB               	movwf	??_SetDefaultTimers
  5154  0690  082B               	movf	??_SetDefaultTimers,w
  5155  0691  0084               	movwf	4
  5156  0692  082F               	movf	SetDefaultTimers@i,w
  5157  0693  00AC               	movwf	??_SetDefaultTimers+1
  5158  0694  072C               	addwf	??_SetDefaultTimers+1,w
  5159  0695  1383               	bcf	3,7	;select IRP bank0
  5160  0696  0700               	addwf	0,w
  5161  0697  00AD               	movwf	??_SetDefaultTimers+2
  5162  0698  082D               	movf	??_SetDefaultTimers+2,w
  5163  0699  3E06               	addlw	6
  5164  069A  0084               	movwf	4
  5165  069B  0824               	movf	SetDefaultTimers@rosso,w
  5166  069C  1783               	bsf	3,7	;select IRP bank2
  5167  069D  0080               	movwf	0
  5168  069E  0A84               	incf	4,f
  5169  069F  0825               	movf	SetDefaultTimers@rosso+1,w
  5170  06A0  0080               	movwf	0
  5171                           
  5172                           ;./CustomLib/TrafficLight.h: 55:                 break;
  5173  06A1  2F05               	goto	l3347
  5174  06A2                     l3339:	
  5175                           
  5176                           ;./CustomLib/TrafficLight.h: 57:                 (*(_semafori)[l]).times[i] = verde;
  5177  06A2  082E               	movf	SetDefaultTimers@l,w
  5178  06A3  072A               	addwf	SetDefaultTimers@_semafori,w
  5179  06A4  00AB               	movwf	??_SetDefaultTimers
  5180  06A5  082B               	movf	??_SetDefaultTimers,w
  5181  06A6  0084               	movwf	4
  5182  06A7  082F               	movf	SetDefaultTimers@i,w
  5183  06A8  00AC               	movwf	??_SetDefaultTimers+1
  5184  06A9  072C               	addwf	??_SetDefaultTimers+1,w
  5185  06AA  1383               	bcf	3,7	;select IRP bank0
  5186  06AB  0700               	addwf	0,w
  5187  06AC  00AD               	movwf	??_SetDefaultTimers+2
  5188  06AD  082D               	movf	??_SetDefaultTimers+2,w
  5189  06AE  0084               	movwf	4
  5190  06AF  0826               	movf	SetDefaultTimers@verde,w
  5191  06B0  1783               	bsf	3,7	;select IRP bank2
  5192  06B1  0080               	movwf	0
  5193  06B2  0A84               	incf	4,f
  5194  06B3  0827               	movf	SetDefaultTimers@verde+1,w
  5195  06B4  0080               	movwf	0
  5196                           
  5197                           ;./CustomLib/TrafficLight.h: 58:                 (*(_semafori)[l]).new_times[i] = verde;
  5198  06B5  082E               	movf	SetDefaultTimers@l,w
  5199  06B6  072A               	addwf	SetDefaultTimers@_semafori,w
  5200  06B7  00AB               	movwf	??_SetDefaultTimers
  5201  06B8  082B               	movf	??_SetDefaultTimers,w
  5202  06B9  0084               	movwf	4
  5203  06BA  082F               	movf	SetDefaultTimers@i,w
  5204  06BB  00AC               	movwf	??_SetDefaultTimers+1
  5205  06BC  072C               	addwf	??_SetDefaultTimers+1,w
  5206  06BD  1383               	bcf	3,7	;select IRP bank0
  5207  06BE  0700               	addwf	0,w
  5208  06BF  00AD               	movwf	??_SetDefaultTimers+2
  5209  06C0  082D               	movf	??_SetDefaultTimers+2,w
  5210  06C1  3E06               	addlw	6
  5211  06C2  0084               	movwf	4
  5212  06C3  0826               	movf	SetDefaultTimers@verde,w
  5213  06C4  1783               	bsf	3,7	;select IRP bank2
  5214  06C5  0080               	movwf	0
  5215  06C6  0A84               	incf	4,f
  5216  06C7  0827               	movf	SetDefaultTimers@verde+1,w
  5217  06C8  0080               	movwf	0
  5218                           
  5219                           ;./CustomLib/TrafficLight.h: 59:                 break;
  5220  06C9  2F05               	goto	l3347
  5221  06CA                     l3341:	
  5222                           
  5223                           ;./CustomLib/TrafficLight.h: 61:                 (*(_semafori)[l]).times[i] = giallo;
  5224  06CA  082E               	movf	SetDefaultTimers@l,w
  5225  06CB  072A               	addwf	SetDefaultTimers@_semafori,w
  5226  06CC  00AB               	movwf	??_SetDefaultTimers
  5227  06CD  082B               	movf	??_SetDefaultTimers,w
  5228  06CE  0084               	movwf	4
  5229  06CF  082F               	movf	SetDefaultTimers@i,w
  5230  06D0  00AC               	movwf	??_SetDefaultTimers+1
  5231  06D1  072C               	addwf	??_SetDefaultTimers+1,w
  5232  06D2  1383               	bcf	3,7	;select IRP bank0
  5233  06D3  0700               	addwf	0,w
  5234  06D4  00AD               	movwf	??_SetDefaultTimers+2
  5235  06D5  082D               	movf	??_SetDefaultTimers+2,w
  5236  06D6  0084               	movwf	4
  5237  06D7  0828               	movf	SetDefaultTimers@giallo,w
  5238  06D8  1783               	bsf	3,7	;select IRP bank2
  5239  06D9  0080               	movwf	0
  5240  06DA  0A84               	incf	4,f
  5241  06DB  0829               	movf	SetDefaultTimers@giallo+1,w
  5242  06DC  0080               	movwf	0
  5243                           
  5244                           ;./CustomLib/TrafficLight.h: 62:                 (*(_semafori)[l]).new_times[i] = giallo
      +                          ;
  5245  06DD  082E               	movf	SetDefaultTimers@l,w
  5246  06DE  072A               	addwf	SetDefaultTimers@_semafori,w
  5247  06DF  00AB               	movwf	??_SetDefaultTimers
  5248  06E0  082B               	movf	??_SetDefaultTimers,w
  5249  06E1  0084               	movwf	4
  5250  06E2  082F               	movf	SetDefaultTimers@i,w
  5251  06E3  00AC               	movwf	??_SetDefaultTimers+1
  5252  06E4  072C               	addwf	??_SetDefaultTimers+1,w
  5253  06E5  1383               	bcf	3,7	;select IRP bank0
  5254  06E6  0700               	addwf	0,w
  5255  06E7  00AD               	movwf	??_SetDefaultTimers+2
  5256  06E8  082D               	movf	??_SetDefaultTimers+2,w
  5257  06E9  3E06               	addlw	6
  5258  06EA  0084               	movwf	4
  5259  06EB  0828               	movf	SetDefaultTimers@giallo,w
  5260  06EC  1783               	bsf	3,7	;select IRP bank2
  5261  06ED  0080               	movwf	0
  5262  06EE  0A84               	incf	4,f
  5263  06EF  0829               	movf	SetDefaultTimers@giallo+1,w
  5264  06F0  0080               	movwf	0
  5265                           
  5266                           ;./CustomLib/TrafficLight.h: 63:                 break;
  5267  06F1  2F05               	goto	l3347
  5268  06F2                     l3345:	
  5269  06F2  082F               	movf	SetDefaultTimers@i,w
  5270  06F3  00AB               	movwf	??_SetDefaultTimers
  5271  06F4  01AC               	clrf	??_SetDefaultTimers+1
  5272                           
  5273                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5274                           ; Switch size 1, requested type "simple"
  5275                           ; Number of cases is 1, Range of values is 0 to 0
  5276                           ; switch strategies available:
  5277                           ; Name         Instructions Cycles
  5278                           ; simple_byte            4     3 (average)
  5279                           ; direct_byte           11     8 (fixed)
  5280                           ; jumptable            260     6 (fixed)
  5281                           ;	Chosen strategy is simple_byte
  5282  06F5  082C               	movf	??_SetDefaultTimers+1,w
  5283  06F6  3A00               	xorlw	0	; case 0
  5284  06F7  1903               	skipnz
  5285  06F8  2EFA               	goto	l3957
  5286  06F9  2F05               	goto	l3347
  5287  06FA                     l3957:	
  5288                           
  5289                           ; Switch size 1, requested type "simple"
  5290                           ; Number of cases is 3, Range of values is 0 to 2
  5291                           ; switch strategies available:
  5292                           ; Name         Instructions Cycles
  5293                           ; simple_byte           10     6 (average)
  5294                           ; direct_byte           17     8 (fixed)
  5295                           ; jumptable            260     6 (fixed)
  5296                           ;	Chosen strategy is simple_byte
  5297  06FA  082B               	movf	??_SetDefaultTimers,w
  5298  06FB  3A00               	xorlw	0	; case 0
  5299  06FC  1903               	skipnz
  5300  06FD  2E7A               	goto	l3337
  5301  06FE  3A01               	xorlw	1	; case 1
  5302  06FF  1903               	skipnz
  5303  0700  2EA2               	goto	l3339
  5304  0701  3A03               	xorlw	3	; case 2
  5305  0702  1903               	skipnz
  5306  0703  2ECA               	goto	l3341
  5307  0704  2F05               	goto	l3347
  5308  0705                     l3347:	
  5309                           
  5310                           ;./CustomLib/TrafficLight.h: 65:         }
  5311  0705  3001               	movlw	1
  5312  0706  00AB               	movwf	??_SetDefaultTimers
  5313  0707  082B               	movf	??_SetDefaultTimers,w
  5314  0708  07AF               	addwf	SetDefaultTimers@i,f
  5315  0709                     l3349:	
  5316  0709  3003               	movlw	3
  5317  070A  022F               	subwf	SetDefaultTimers@i,w
  5318  070B  1C03               	skipc
  5319  070C  2F0E               	goto	u2771
  5320  070D  2F0F               	goto	u2770
  5321  070E                     u2771:	
  5322  070E  2EF2               	goto	l3345
  5323  070F                     u2770:	
  5324  070F                     l3351:	
  5325                           
  5326                           ;./CustomLib/TrafficLight.h: 66:     }
  5327  070F  3001               	movlw	1
  5328  0710  00AB               	movwf	??_SetDefaultTimers
  5329  0711  082B               	movf	??_SetDefaultTimers,w
  5330  0712  07AE               	addwf	SetDefaultTimers@l,f
  5331  0713                     l3353:	
  5332  0713  3008               	movlw	8
  5333  0714  022E               	subwf	SetDefaultTimers@l,w
  5334  0715  1C03               	skipc
  5335  0716  2F18               	goto	u2781
  5336  0717  2F19               	goto	u2780
  5337  0718                     u2781:	
  5338  0718  2E78               	goto	l3331
  5339  0719                     u2780:	
  5340  0719                     l3355:	
  5341                           
  5342                           ;./CustomLib/TrafficLight.h: 68:     (*(_semafori)[0]).lux_select = 0;
  5343  0719  082A               	movf	SetDefaultTimers@_semafori,w
  5344  071A  0084               	movwf	4
  5345  071B  1383               	bcf	3,7	;select IRP bank0
  5346  071C  0800               	movf	0,w
  5347  071D  3E0C               	addlw	12
  5348  071E  0084               	movwf	4
  5349  071F  1783               	bsf	3,7	;select IRP bank2
  5350  0720  0180               	clrf	0
  5351                           
  5352                           ;./CustomLib/TrafficLight.h: 69:     (*(_semafori)[0]).new_lux_select = 0;
  5353  0721  082A               	movf	SetDefaultTimers@_semafori,w
  5354  0722  0084               	movwf	4
  5355  0723  1383               	bcf	3,7	;select IRP bank0
  5356  0724  0800               	movf	0,w
  5357  0725  3E0D               	addlw	13
  5358  0726  0084               	movwf	4
  5359  0727  1783               	bsf	3,7	;select IRP bank2
  5360  0728  0180               	clrf	0
  5361                           
  5362                           ;./CustomLib/TrafficLight.h: 70:     (*(_semafori)[1]).lux_select = 1;
  5363  0729  0A2A               	incf	SetDefaultTimers@_semafori,w
  5364  072A  0084               	movwf	4
  5365  072B  1383               	bcf	3,7	;select IRP bank0
  5366  072C  0800               	movf	0,w
  5367  072D  3E0C               	addlw	12
  5368  072E  0084               	movwf	4
  5369  072F  1783               	bsf	3,7	;select IRP bank2
  5370  0730  0180               	clrf	0
  5371  0731  0A80               	incf	0,f
  5372                           
  5373                           ;./CustomLib/TrafficLight.h: 71:     (*(_semafori)[1]).new_lux_select = 1;
  5374  0732  0A2A               	incf	SetDefaultTimers@_semafori,w
  5375  0733  0084               	movwf	4
  5376  0734  1383               	bcf	3,7	;select IRP bank0
  5377  0735  0800               	movf	0,w
  5378  0736  3E0D               	addlw	13
  5379  0737  0084               	movwf	4
  5380  0738  1783               	bsf	3,7	;select IRP bank2
  5381  0739  0180               	clrf	0
  5382  073A  0A80               	incf	0,f
  5383  073B                     l142:	
  5384  073B  0008               	return
  5385  073C                     __end_of_SetDefaultTimers:	
  5386                           
  5387                           	psect	text18
  5388  04E0                     __ptext18:	
  5389 ;; *************** function _GetDigits *****************
  5390 ;; Defined at:
  5391 ;;		line 86 in file "./CustomLib/TrafficLight.h"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  _digits         1    wreg     PTR PTR struct .
  5394 ;;		 -> DigitsArr(8), 
  5395 ;;  index           1   40[BANK0 ] unsigned char 
  5396 ;;  Time            2   41[BANK0 ] int 
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;  _digits         1   48[BANK0 ] PTR PTR struct .
  5399 ;;		 -> DigitsArr(8), 
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  1    wreg      void 
  5402 ;; Registers used:
  5403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5409 ;;      Params:         0       3       0       0       0
  5410 ;;      Locals:         0       3       0       0       0
  5411 ;;      Temps:          0       3       0       0       0
  5412 ;;      Totals:         0       9       0       0       0
  5413 ;;Total ram usage:        9 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; Hardware stack levels required when called:    4
  5416 ;; This function calls:
  5417 ;;		___awdiv
  5418 ;;		___awmod
  5419 ;;		___bmul
  5420 ;; This function is called by:
  5421 ;;		_main
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           
  5426                           ;psect for function _GetDigits
  5427  04E0                     _GetDigits:	
  5428                           
  5429                           ;incstack = 0
  5430                           ; Regs used in _GetDigits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5431                           ;GetDigits@_digits stored from wreg
  5432  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  5433  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  5434  04E2  00D0               	movwf	GetDigits@_digits
  5435  04E3                     l3379:	
  5436                           
  5437                           ;./CustomLib/TrafficLight.h: 86: void GetDigits(_Digits _digits, unsigned char index, in
      +                          t Time);./CustomLib/TrafficLight.h: 87: {;./CustomLib/TrafficLight.h: 88:     while (Tim
      +                          e / 1000 > 0)
  5438  04E3  2CF9               	goto	l3383
  5439  04E4                     l3381:	
  5440                           
  5441                           ;./CustomLib/TrafficLight.h: 89:     {;./CustomLib/TrafficLight.h: 90:         Time = Ti
      +                          me / 10;
  5442  04E4  300A               	movlw	10
  5443  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  5444  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  5445  04E7  00BF               	movwf	___awdiv@divisor
  5446  04E8  3000               	movlw	0
  5447  04E9  00C0               	movwf	___awdiv@divisor+1
  5448  04EA  084A               	movf	GetDigits@Time+1,w
  5449  04EB  00C2               	movwf	___awdiv@dividend+1
  5450  04EC  0849               	movf	GetDigits@Time,w
  5451  04ED  00C1               	movwf	___awdiv@dividend
  5452  04EE  120A  158A  2617  120A  118A  	fcall	___awdiv
  5453  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  5454  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  5455  04F5  0840               	movf	?___awdiv+1,w
  5456  04F6  00CA               	movwf	GetDigits@Time+1
  5457  04F7  083F               	movf	?___awdiv,w
  5458  04F8  00C9               	movwf	GetDigits@Time
  5459  04F9                     l3383:	
  5460                           
  5461                           ;./CustomLib/TrafficLight.h: 88:     while (Time / 1000 > 0)
  5462  04F9  30E8               	movlw	232
  5463  04FA  00BF               	movwf	___awdiv@divisor
  5464  04FB  3003               	movlw	3
  5465  04FC  00C0               	movwf	___awdiv@divisor+1
  5466  04FD  084A               	movf	GetDigits@Time+1,w
  5467  04FE  00C2               	movwf	___awdiv@dividend+1
  5468  04FF  0849               	movf	GetDigits@Time,w
  5469  0500  00C1               	movwf	___awdiv@dividend
  5470  0501  120A  158A  2617  120A  118A  	fcall	___awdiv
  5471  0506  1283               	bcf	3,5	;RP0=0, select bank0
  5472  0507  1303               	bcf	3,6	;RP1=0, select bank0
  5473  0508  0840               	movf	?___awdiv+1,w
  5474  0509  3A80               	xorlw	128
  5475  050A  00FF               	movwf	btemp+1
  5476  050B  3080               	movlw	128
  5477  050C  027F               	subwf	btemp+1,w
  5478  050D  1D03               	skipz
  5479  050E  2D11               	goto	u2815
  5480  050F  3001               	movlw	1
  5481  0510  023F               	subwf	?___awdiv,w
  5482  0511                     u2815:	
  5483  0511  1803               	skipnc
  5484  0512  2D14               	goto	u2811
  5485  0513  2D15               	goto	u2810
  5486  0514                     u2811:	
  5487  0514  2CE4               	goto	l3381
  5488  0515                     u2810:	
  5489  0515                     l3385:	
  5490                           
  5491                           ;./CustomLib/TrafficLight.h: 93:     (*_digits)[index].centinaia = Time / 100;
  5492  0515  3064               	movlw	100
  5493  0516  1283               	bcf	3,5	;RP0=0, select bank0
  5494  0517  1303               	bcf	3,6	;RP1=0, select bank0
  5495  0518  00BF               	movwf	___awdiv@divisor
  5496  0519  3000               	movlw	0
  5497  051A  00C0               	movwf	___awdiv@divisor+1
  5498  051B  084A               	movf	GetDigits@Time+1,w
  5499  051C  00C2               	movwf	___awdiv@dividend+1
  5500  051D  0849               	movf	GetDigits@Time,w
  5501  051E  00C1               	movwf	___awdiv@dividend
  5502  051F  120A  158A  2617  120A  118A  	fcall	___awdiv
  5503  0524  1283               	bcf	3,5	;RP0=0, select bank0
  5504  0525  1303               	bcf	3,6	;RP1=0, select bank0
  5505  0526  083F               	movf	?___awdiv,w
  5506  0527  00CB               	movwf	??_GetDigits
  5507  0528  0850               	movf	GetDigits@_digits,w
  5508  0529  0084               	movwf	4
  5509  052A  3003               	movlw	3
  5510  052B  00CC               	movwf	??_GetDigits+1
  5511  052C  084C               	movf	??_GetDigits+1,w
  5512  052D  00A4               	movwf	___bmul@multiplicand
  5513  052E  0848               	movf	GetDigits@index,w
  5514  052F  120A  118A  27E9  120A  118A  	fcall	___bmul
  5515  0534  1383               	bcf	3,7	;select IRP bank0
  5516  0535  0700               	addwf	0,w
  5517  0536  1283               	bcf	3,5	;RP0=0, select bank0
  5518  0537  1303               	bcf	3,6	;RP1=0, select bank0
  5519  0538  00CD               	movwf	??_GetDigits+2
  5520  0539  084D               	movf	??_GetDigits+2,w
  5521  053A  0084               	movwf	4
  5522  053B  084B               	movf	??_GetDigits,w
  5523  053C  0080               	movwf	0
  5524                           
  5525                           ;./CustomLib/TrafficLight.h: 94:     (*_digits)[index].decine = (Time % 100) / 10;
  5526  053D  300A               	movlw	10
  5527  053E  00BF               	movwf	___awdiv@divisor
  5528  053F  3000               	movlw	0
  5529  0540  00C0               	movwf	___awdiv@divisor+1
  5530  0541  084A               	movf	GetDigits@Time+1,w
  5531  0542  00BB               	movwf	___awmod@dividend+1
  5532  0543  0849               	movf	GetDigits@Time,w
  5533  0544  00BA               	movwf	___awmod@dividend
  5534  0545  3064               	movlw	100
  5535  0546  00B8               	movwf	___awmod@divisor
  5536  0547  3000               	movlw	0
  5537  0548  00B9               	movwf	___awmod@divisor+1
  5538  0549  120A  158A  24F6  120A  118A  	fcall	___awmod
  5539  054E  1283               	bcf	3,5	;RP0=0, select bank0
  5540  054F  1303               	bcf	3,6	;RP1=0, select bank0
  5541  0550  0839               	movf	?___awmod+1,w
  5542  0551  00C2               	movwf	___awdiv@dividend+1
  5543  0552  0838               	movf	?___awmod,w
  5544  0553  00C1               	movwf	___awdiv@dividend
  5545  0554  120A  158A  2617  120A  118A  	fcall	___awdiv
  5546  0559  1283               	bcf	3,5	;RP0=0, select bank0
  5547  055A  1303               	bcf	3,6	;RP1=0, select bank0
  5548  055B  083F               	movf	?___awdiv,w
  5549  055C  00CB               	movwf	??_GetDigits
  5550  055D  0850               	movf	GetDigits@_digits,w
  5551  055E  0084               	movwf	4
  5552  055F  3003               	movlw	3
  5553  0560  00CC               	movwf	??_GetDigits+1
  5554  0561  084C               	movf	??_GetDigits+1,w
  5555  0562  00A4               	movwf	___bmul@multiplicand
  5556  0563  0848               	movf	GetDigits@index,w
  5557  0564  120A  118A  27E9  120A  118A  	fcall	___bmul
  5558  0569  1383               	bcf	3,7	;select IRP bank0
  5559  056A  0700               	addwf	0,w
  5560  056B  1283               	bcf	3,5	;RP0=0, select bank0
  5561  056C  1303               	bcf	3,6	;RP1=0, select bank0
  5562  056D  00CD               	movwf	??_GetDigits+2
  5563  056E  0A4D               	incf	??_GetDigits+2,w
  5564  056F  0084               	movwf	4
  5565  0570  084B               	movf	??_GetDigits,w
  5566  0571  0080               	movwf	0
  5567  0572                     l3387:	
  5568                           
  5569                           ;./CustomLib/TrafficLight.h: 95:     (*_digits)[index].unita = (Time % 100) % 10;
  5570  0572  084A               	movf	GetDigits@Time+1,w
  5571  0573  00BB               	movwf	___awmod@dividend+1
  5572  0574  0849               	movf	GetDigits@Time,w
  5573  0575  00BA               	movwf	___awmod@dividend
  5574  0576  3064               	movlw	100
  5575  0577  00B8               	movwf	___awmod@divisor
  5576  0578  3000               	movlw	0
  5577  0579  00B9               	movwf	___awmod@divisor+1
  5578  057A  120A  158A  24F6  120A  118A  	fcall	___awmod
  5579  057F  1283               	bcf	3,5	;RP0=0, select bank0
  5580  0580  1303               	bcf	3,6	;RP1=0, select bank0
  5581  0581  0839               	movf	?___awmod+1,w
  5582  0582  00CF               	movwf	_GetDigits$1247+1
  5583  0583  0838               	movf	?___awmod,w
  5584  0584  00CE               	movwf	_GetDigits$1247
  5585  0585                     l3389:	
  5586                           
  5587                           ;./CustomLib/TrafficLight.h: 95:     (*_digits)[index].unita = (Time % 100) % 10;
  5588  0585  300A               	movlw	10
  5589  0586  00B8               	movwf	___awmod@divisor
  5590  0587  3000               	movlw	0
  5591  0588  00B9               	movwf	___awmod@divisor+1
  5592  0589  084F               	movf	_GetDigits$1247+1,w
  5593  058A  00BB               	movwf	___awmod@dividend+1
  5594  058B  084E               	movf	_GetDigits$1247,w
  5595  058C  00BA               	movwf	___awmod@dividend
  5596  058D  120A  158A  24F6  120A  118A  	fcall	___awmod
  5597  0592  1283               	bcf	3,5	;RP0=0, select bank0
  5598  0593  1303               	bcf	3,6	;RP1=0, select bank0
  5599  0594  0838               	movf	?___awmod,w
  5600  0595  00CB               	movwf	??_GetDigits
  5601  0596  0850               	movf	GetDigits@_digits,w
  5602  0597  0084               	movwf	4
  5603  0598  3003               	movlw	3
  5604  0599  00CC               	movwf	??_GetDigits+1
  5605  059A  084C               	movf	??_GetDigits+1,w
  5606  059B  00A4               	movwf	___bmul@multiplicand
  5607  059C  0848               	movf	GetDigits@index,w
  5608  059D  120A  118A  27E9  120A  118A  	fcall	___bmul
  5609  05A2  1383               	bcf	3,7	;select IRP bank0
  5610  05A3  0700               	addwf	0,w
  5611  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  5612  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  5613  05A6  00CD               	movwf	??_GetDigits+2
  5614  05A7  084D               	movf	??_GetDigits+2,w
  5615  05A8  3E02               	addlw	2
  5616  05A9  0084               	movwf	4
  5617  05AA  084B               	movf	??_GetDigits,w
  5618  05AB  0080               	movwf	0
  5619  05AC                     l153:	
  5620  05AC  0008               	return
  5621  05AD                     __end_of_GetDigits:	
  5622                           
  5623                           	psect	text19
  5624  07E9                     __ptext19:	
  5625 ;; *************** function ___bmul *****************
  5626 ;; Defined at:
  5627 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;  multiplier      1    wreg     unsigned char 
  5630 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  5631 ;; Auto vars:     Size  Location     Type
  5632 ;;  multiplier      1    7[BANK0 ] unsigned char 
  5633 ;;  product         1    6[BANK0 ] unsigned char 
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  1    wreg      unsigned char 
  5636 ;; Registers used:
  5637 ;;		wreg, status,2, status,0
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5643 ;;      Params:         0       1       0       0       0
  5644 ;;      Locals:         0       2       0       0       0
  5645 ;;      Temps:          0       1       0       0       0
  5646 ;;      Totals:         0       4       0       0       0
  5647 ;;Total ram usage:        4 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    3
  5650 ;; This function calls:
  5651 ;;		Nothing
  5652 ;; This function is called by:
  5653 ;;		_SetReceivedTimes
  5654 ;;		_GetDigits
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           
  5659                           ;psect for function ___bmul
  5660  07E9                     ___bmul:	
  5661                           
  5662                           ;incstack = 0
  5663                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5664                           ;___bmul@multiplier stored from wreg
  5665  07E9  1283               	bcf	3,5	;RP0=0, select bank0
  5666  07EA  1303               	bcf	3,6	;RP1=0, select bank0
  5667  07EB  00A7               	movwf	___bmul@multiplier
  5668  07EC                     l3163:	
  5669  07EC  01A6               	clrf	___bmul@product
  5670  07ED                     l3165:	
  5671  07ED  1C27               	btfss	___bmul@multiplier,0
  5672  07EE  2FF0               	goto	u2431
  5673  07EF  2FF1               	goto	u2430
  5674  07F0                     u2431:	
  5675  07F0  2FF5               	goto	l3169
  5676  07F1                     u2430:	
  5677  07F1                     l3167:	
  5678  07F1  0824               	movf	___bmul@multiplicand,w
  5679  07F2  00A5               	movwf	??___bmul
  5680  07F3  0825               	movf	??___bmul,w
  5681  07F4  07A6               	addwf	___bmul@product,f
  5682  07F5                     l3169:	
  5683  07F5  1003               	clrc
  5684  07F6  0DA4               	rlf	___bmul@multiplicand,f
  5685  07F7                     l3171:	
  5686  07F7  1003               	clrc
  5687  07F8  0CA7               	rrf	___bmul@multiplier,f
  5688  07F9  0827               	movf	___bmul@multiplier,w
  5689  07FA  1D03               	btfss	3,2
  5690  07FB  2FFD               	goto	u2441
  5691  07FC  2FFE               	goto	u2440
  5692  07FD                     u2441:	
  5693  07FD  2FED               	goto	l3165
  5694  07FE                     u2440:	
  5695  07FE                     l3173:	
  5696  07FE  0826               	movf	___bmul@product,w
  5697  07FF                     l479:	
  5698  07FF  0008               	return
  5699  0800                     __end_of___bmul:	
  5700                           
  5701                           	psect	text20
  5702  0CF6                     __ptext20:	
  5703 ;; *************** function ___awmod *****************
  5704 ;; Defined at:
  5705 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  divisor         2   24[BANK0 ] int 
  5708 ;;  dividend        2   26[BANK0 ] int 
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;  sign            1   30[BANK0 ] unsigned char 
  5711 ;;  counter         1   29[BANK0 ] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  2   24[BANK0 ] int 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5721 ;;      Params:         0       4       0       0       0
  5722 ;;      Locals:         0       2       0       0       0
  5723 ;;      Temps:          0       1       0       0       0
  5724 ;;      Totals:         0       7       0       0       0
  5725 ;;Total ram usage:        7 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    3
  5728 ;; This function calls:
  5729 ;;		Nothing
  5730 ;; This function is called by:
  5731 ;;		_GetDigits
  5732 ;;		_main
  5733 ;;		_ShowDigitsOnDisplay
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           
  5738                           ;psect for function ___awmod
  5739  0CF6                     ___awmod:	
  5740  0CF6                     l3261:	
  5741                           ;incstack = 0
  5742                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5743                           
  5744  0CF6  1283               	bcf	3,5	;RP0=0, select bank0
  5745  0CF7  1303               	bcf	3,6	;RP1=0, select bank0
  5746  0CF8  01BE               	clrf	___awmod@sign
  5747  0CF9                     l3263:	
  5748  0CF9  1FBB               	btfss	___awmod@dividend+1,7
  5749  0CFA  2CFC               	goto	u2651
  5750  0CFB  2CFD               	goto	u2650
  5751  0CFC                     u2651:	
  5752  0CFC  2D04               	goto	l3269
  5753  0CFD                     u2650:	
  5754  0CFD                     l3265:	
  5755  0CFD  09BA               	comf	___awmod@dividend,f
  5756  0CFE  09BB               	comf	___awmod@dividend+1,f
  5757  0CFF  0ABA               	incf	___awmod@dividend,f
  5758  0D00  1903               	skipnz
  5759  0D01  0ABB               	incf	___awmod@dividend+1,f
  5760  0D02                     l3267:	
  5761  0D02  01BE               	clrf	___awmod@sign
  5762  0D03  0ABE               	incf	___awmod@sign,f
  5763  0D04                     l3269:	
  5764  0D04  1FB9               	btfss	___awmod@divisor+1,7
  5765  0D05  2D07               	goto	u2661
  5766  0D06  2D08               	goto	u2660
  5767  0D07                     u2661:	
  5768  0D07  2D0D               	goto	l3273
  5769  0D08                     u2660:	
  5770  0D08                     l3271:	
  5771  0D08  09B8               	comf	___awmod@divisor,f
  5772  0D09  09B9               	comf	___awmod@divisor+1,f
  5773  0D0A  0AB8               	incf	___awmod@divisor,f
  5774  0D0B  1903               	skipnz
  5775  0D0C  0AB9               	incf	___awmod@divisor+1,f
  5776  0D0D                     l3273:	
  5777  0D0D  0838               	movf	___awmod@divisor,w
  5778  0D0E  0439               	iorwf	___awmod@divisor+1,w
  5779  0D0F  1903               	btfsc	3,2
  5780  0D10  2D12               	goto	u2671
  5781  0D11  2D13               	goto	u2670
  5782  0D12                     u2671:	
  5783  0D12  2D42               	goto	l3291
  5784  0D13                     u2670:	
  5785  0D13                     l3275:	
  5786  0D13  01BD               	clrf	___awmod@counter
  5787  0D14  0ABD               	incf	___awmod@counter,f
  5788  0D15  2D21               	goto	l3281
  5789  0D16                     l3277:	
  5790  0D16  3001               	movlw	1
  5791  0D17                     u2685:	
  5792  0D17  1003               	clrc
  5793  0D18  0DB8               	rlf	___awmod@divisor,f
  5794  0D19  0DB9               	rlf	___awmod@divisor+1,f
  5795  0D1A  3EFF               	addlw	-1
  5796  0D1B  1D03               	skipz
  5797  0D1C  2D17               	goto	u2685
  5798  0D1D                     l3279:	
  5799  0D1D  3001               	movlw	1
  5800  0D1E  00BC               	movwf	??___awmod
  5801  0D1F  083C               	movf	??___awmod,w
  5802  0D20  07BD               	addwf	___awmod@counter,f
  5803  0D21                     l3281:	
  5804  0D21  1FB9               	btfss	___awmod@divisor+1,7
  5805  0D22  2D24               	goto	u2691
  5806  0D23  2D25               	goto	u2690
  5807  0D24                     u2691:	
  5808  0D24  2D16               	goto	l3277
  5809  0D25                     u2690:	
  5810  0D25                     l3283:	
  5811  0D25  0839               	movf	___awmod@divisor+1,w
  5812  0D26  023B               	subwf	___awmod@dividend+1,w
  5813  0D27  1D03               	skipz
  5814  0D28  2D2B               	goto	u2705
  5815  0D29  0838               	movf	___awmod@divisor,w
  5816  0D2A  023A               	subwf	___awmod@dividend,w
  5817  0D2B                     u2705:	
  5818  0D2B  1C03               	skipc
  5819  0D2C  2D2E               	goto	u2701
  5820  0D2D  2D2F               	goto	u2700
  5821  0D2E                     u2701:	
  5822  0D2E  2D35               	goto	l3287
  5823  0D2F                     u2700:	
  5824  0D2F                     l3285:	
  5825  0D2F  0838               	movf	___awmod@divisor,w
  5826  0D30  02BA               	subwf	___awmod@dividend,f
  5827  0D31  0839               	movf	___awmod@divisor+1,w
  5828  0D32  1C03               	skipc
  5829  0D33  03BB               	decf	___awmod@dividend+1,f
  5830  0D34  02BB               	subwf	___awmod@dividend+1,f
  5831  0D35                     l3287:	
  5832  0D35  3001               	movlw	1
  5833  0D36                     u2715:	
  5834  0D36  1003               	clrc
  5835  0D37  0CB9               	rrf	___awmod@divisor+1,f
  5836  0D38  0CB8               	rrf	___awmod@divisor,f
  5837  0D39  3EFF               	addlw	-1
  5838  0D3A  1D03               	skipz
  5839  0D3B  2D36               	goto	u2715
  5840  0D3C                     l3289:	
  5841  0D3C  3001               	movlw	1
  5842  0D3D  02BD               	subwf	___awmod@counter,f
  5843  0D3E  1D03               	btfss	3,2
  5844  0D3F  2D41               	goto	u2721
  5845  0D40  2D42               	goto	u2720
  5846  0D41                     u2721:	
  5847  0D41  2D25               	goto	l3283
  5848  0D42                     u2720:	
  5849  0D42                     l3291:	
  5850  0D42  083E               	movf	___awmod@sign,w
  5851  0D43  1903               	btfsc	3,2
  5852  0D44  2D46               	goto	u2731
  5853  0D45  2D47               	goto	u2730
  5854  0D46                     u2731:	
  5855  0D46  2D4C               	goto	l3295
  5856  0D47                     u2730:	
  5857  0D47                     l3293:	
  5858  0D47  09BA               	comf	___awmod@dividend,f
  5859  0D48  09BB               	comf	___awmod@dividend+1,f
  5860  0D49  0ABA               	incf	___awmod@dividend,f
  5861  0D4A  1903               	skipnz
  5862  0D4B  0ABB               	incf	___awmod@dividend+1,f
  5863  0D4C                     l3295:	
  5864  0D4C  083B               	movf	___awmod@dividend+1,w
  5865  0D4D  00B9               	movwf	?___awmod+1
  5866  0D4E  083A               	movf	___awmod@dividend,w
  5867  0D4F  00B8               	movwf	?___awmod
  5868  0D50                     l619:	
  5869  0D50  0008               	return
  5870  0D51                     __end_of___awmod:	
  5871                           
  5872                           	psect	text21
  5873  0E17                     __ptext21:	
  5874 ;; *************** function ___awdiv *****************
  5875 ;; Defined at:
  5876 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  divisor         2   31[BANK0 ] int 
  5879 ;;  dividend        2   33[BANK0 ] int 
  5880 ;; Auto vars:     Size  Location     Type
  5881 ;;  quotient        2   38[BANK0 ] int 
  5882 ;;  sign            1   37[BANK0 ] unsigned char 
  5883 ;;  counter         1   36[BANK0 ] unsigned char 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  2   31[BANK0 ] int 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5893 ;;      Params:         0       4       0       0       0
  5894 ;;      Locals:         0       4       0       0       0
  5895 ;;      Temps:          0       1       0       0       0
  5896 ;;      Totals:         0       9       0       0       0
  5897 ;;Total ram usage:        9 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    3
  5900 ;; This function calls:
  5901 ;;		Nothing
  5902 ;; This function is called by:
  5903 ;;		_GetDigits
  5904 ;;		_map
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           
  5909                           ;psect for function ___awdiv
  5910  0E17                     ___awdiv:	
  5911  0E17                     l3217:	
  5912                           ;incstack = 0
  5913                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5914                           
  5915  0E17  1283               	bcf	3,5	;RP0=0, select bank0
  5916  0E18  1303               	bcf	3,6	;RP1=0, select bank0
  5917  0E19  01C5               	clrf	___awdiv@sign
  5918  0E1A                     l3219:	
  5919  0E1A  1FC0               	btfss	___awdiv@divisor+1,7
  5920  0E1B  2E1D               	goto	u2551
  5921  0E1C  2E1E               	goto	u2550
  5922  0E1D                     u2551:	
  5923  0E1D  2E25               	goto	l3225
  5924  0E1E                     u2550:	
  5925  0E1E                     l3221:	
  5926  0E1E  09BF               	comf	___awdiv@divisor,f
  5927  0E1F  09C0               	comf	___awdiv@divisor+1,f
  5928  0E20  0ABF               	incf	___awdiv@divisor,f
  5929  0E21  1903               	skipnz
  5930  0E22  0AC0               	incf	___awdiv@divisor+1,f
  5931  0E23                     l3223:	
  5932  0E23  01C5               	clrf	___awdiv@sign
  5933  0E24  0AC5               	incf	___awdiv@sign,f
  5934  0E25                     l3225:	
  5935  0E25  1FC2               	btfss	___awdiv@dividend+1,7
  5936  0E26  2E28               	goto	u2561
  5937  0E27  2E29               	goto	u2560
  5938  0E28                     u2561:	
  5939  0E28  2E32               	goto	l3231
  5940  0E29                     u2560:	
  5941  0E29                     l3227:	
  5942  0E29  09C1               	comf	___awdiv@dividend,f
  5943  0E2A  09C2               	comf	___awdiv@dividend+1,f
  5944  0E2B  0AC1               	incf	___awdiv@dividend,f
  5945  0E2C  1903               	skipnz
  5946  0E2D  0AC2               	incf	___awdiv@dividend+1,f
  5947  0E2E                     l3229:	
  5948  0E2E  3001               	movlw	1
  5949  0E2F  00C3               	movwf	??___awdiv
  5950  0E30  0843               	movf	??___awdiv,w
  5951  0E31  06C5               	xorwf	___awdiv@sign,f
  5952  0E32                     l3231:	
  5953  0E32  01C6               	clrf	___awdiv@quotient
  5954  0E33  01C7               	clrf	___awdiv@quotient+1
  5955  0E34                     l3233:	
  5956  0E34  083F               	movf	___awdiv@divisor,w
  5957  0E35  0440               	iorwf	___awdiv@divisor+1,w
  5958  0E36  1903               	btfsc	3,2
  5959  0E37  2E39               	goto	u2571
  5960  0E38  2E3A               	goto	u2570
  5961  0E39                     u2571:	
  5962  0E39  2E71               	goto	l3253
  5963  0E3A                     u2570:	
  5964  0E3A                     l3235:	
  5965  0E3A  01C4               	clrf	___awdiv@counter
  5966  0E3B  0AC4               	incf	___awdiv@counter,f
  5967  0E3C  2E48               	goto	l3241
  5968  0E3D                     l3237:	
  5969  0E3D  3001               	movlw	1
  5970  0E3E                     u2585:	
  5971  0E3E  1003               	clrc
  5972  0E3F  0DBF               	rlf	___awdiv@divisor,f
  5973  0E40  0DC0               	rlf	___awdiv@divisor+1,f
  5974  0E41  3EFF               	addlw	-1
  5975  0E42  1D03               	skipz
  5976  0E43  2E3E               	goto	u2585
  5977  0E44                     l3239:	
  5978  0E44  3001               	movlw	1
  5979  0E45  00C3               	movwf	??___awdiv
  5980  0E46  0843               	movf	??___awdiv,w
  5981  0E47  07C4               	addwf	___awdiv@counter,f
  5982  0E48                     l3241:	
  5983  0E48  1FC0               	btfss	___awdiv@divisor+1,7
  5984  0E49  2E4B               	goto	u2591
  5985  0E4A  2E4C               	goto	u2590
  5986  0E4B                     u2591:	
  5987  0E4B  2E3D               	goto	l3237
  5988  0E4C                     u2590:	
  5989  0E4C                     l3243:	
  5990  0E4C  3001               	movlw	1
  5991  0E4D                     u2605:	
  5992  0E4D  1003               	clrc
  5993  0E4E  0DC6               	rlf	___awdiv@quotient,f
  5994  0E4F  0DC7               	rlf	___awdiv@quotient+1,f
  5995  0E50  3EFF               	addlw	-1
  5996  0E51  1D03               	skipz
  5997  0E52  2E4D               	goto	u2605
  5998  0E53  0840               	movf	___awdiv@divisor+1,w
  5999  0E54  0242               	subwf	___awdiv@dividend+1,w
  6000  0E55  1D03               	skipz
  6001  0E56  2E59               	goto	u2615
  6002  0E57  083F               	movf	___awdiv@divisor,w
  6003  0E58  0241               	subwf	___awdiv@dividend,w
  6004  0E59                     u2615:	
  6005  0E59  1C03               	skipc
  6006  0E5A  2E5C               	goto	u2611
  6007  0E5B  2E5D               	goto	u2610
  6008  0E5C                     u2611:	
  6009  0E5C  2E64               	goto	l3249
  6010  0E5D                     u2610:	
  6011  0E5D                     l3245:	
  6012  0E5D  083F               	movf	___awdiv@divisor,w
  6013  0E5E  02C1               	subwf	___awdiv@dividend,f
  6014  0E5F  0840               	movf	___awdiv@divisor+1,w
  6015  0E60  1C03               	skipc
  6016  0E61  03C2               	decf	___awdiv@dividend+1,f
  6017  0E62  02C2               	subwf	___awdiv@dividend+1,f
  6018  0E63                     l3247:	
  6019  0E63  1446               	bsf	___awdiv@quotient,0
  6020  0E64                     l3249:	
  6021  0E64  3001               	movlw	1
  6022  0E65                     u2625:	
  6023  0E65  1003               	clrc
  6024  0E66  0CC0               	rrf	___awdiv@divisor+1,f
  6025  0E67  0CBF               	rrf	___awdiv@divisor,f
  6026  0E68  3EFF               	addlw	-1
  6027  0E69  1D03               	skipz
  6028  0E6A  2E65               	goto	u2625
  6029  0E6B                     l3251:	
  6030  0E6B  3001               	movlw	1
  6031  0E6C  02C4               	subwf	___awdiv@counter,f
  6032  0E6D  1D03               	btfss	3,2
  6033  0E6E  2E70               	goto	u2631
  6034  0E6F  2E71               	goto	u2630
  6035  0E70                     u2631:	
  6036  0E70  2E4C               	goto	l3243
  6037  0E71                     u2630:	
  6038  0E71                     l3253:	
  6039  0E71  0845               	movf	___awdiv@sign,w
  6040  0E72  1903               	btfsc	3,2
  6041  0E73  2E75               	goto	u2641
  6042  0E74  2E76               	goto	u2640
  6043  0E75                     u2641:	
  6044  0E75  2E7B               	goto	l3257
  6045  0E76                     u2640:	
  6046  0E76                     l3255:	
  6047  0E76  09C6               	comf	___awdiv@quotient,f
  6048  0E77  09C7               	comf	___awdiv@quotient+1,f
  6049  0E78  0AC6               	incf	___awdiv@quotient,f
  6050  0E79  1903               	skipnz
  6051  0E7A  0AC7               	incf	___awdiv@quotient+1,f
  6052  0E7B                     l3257:	
  6053  0E7B  0847               	movf	___awdiv@quotient+1,w
  6054  0E7C  00C0               	movwf	?___awdiv+1
  6055  0E7D  0846               	movf	___awdiv@quotient,w
  6056  0E7E  00BF               	movwf	?___awdiv
  6057  0E7F                     l606:	
  6058  0E7F  0008               	return
  6059  0E80                     __end_of___awdiv:	
  6060                           
  6061                           	psect	text22
  6062  0A2F                     __ptext22:	
  6063 ;; *************** function _ADC_Read *****************
  6064 ;; Defined at:
  6065 ;;		line 347 in file "main.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;  canale          1    wreg     unsigned char 
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;  canale          1    7[BANK0 ] unsigned char 
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  2    4[BANK0 ] int 
  6072 ;; Registers used:
  6073 ;;		wreg, status,2, status,0
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6079 ;;      Params:         0       2       0       0       0
  6080 ;;      Locals:         0       1       0       0       0
  6081 ;;      Temps:          0       1       0       0       0
  6082 ;;      Totals:         0       4       0       0       0
  6083 ;;Total ram usage:        4 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:    3
  6086 ;; This function calls:
  6087 ;;		Nothing
  6088 ;; This function is called by:
  6089 ;;		_main
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           
  6094                           ;psect for function _ADC_Read
  6095  0A2F                     _ADC_Read:	
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  6099                           ;ADC_Read@canale stored from wreg
  6100  0A2F  1283               	bcf	3,5	;RP0=0, select bank0
  6101  0A30  1303               	bcf	3,6	;RP1=0, select bank0
  6102  0A31  00A7               	movwf	ADC_Read@canale
  6103  0A32                     l3437:	
  6104                           
  6105                           ;main.c: 347: int ADC_Read(char canale);main.c: 348: {;main.c: 349:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  6106  0A32  0827               	movf	ADC_Read@canale,w
  6107  0A33  00A6               	movwf	??_ADC_Read
  6108  0A34  3002               	movlw	2
  6109  0A35                     u2855:	
  6110  0A35  1003               	clrc
  6111  0A36  0DA6               	rlf	??_ADC_Read,f
  6112  0A37  3EFF               	addlw	-1
  6113  0A38  1D03               	skipz
  6114  0A39  2A35               	goto	u2855
  6115  0A3A  1003               	clrc
  6116  0A3B  0D26               	rlf	??_ADC_Read,w
  6117  0A3C  3801               	iorlw	1
  6118  0A3D  009F               	movwf	31	;volatile
  6119  0A3E                     l3439:	
  6120                           
  6121                           ;main.c: 350:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  6122  0A3E  3004               	movlw	4
  6123  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  6124  0A40  1303               	bcf	3,6	;RP1=0, select bank0
  6125  0A41  00A6               	movwf	??_ADC_Read
  6126  0A42                     u3137:	
  6127  0A42  0BA6               	decfsz	??_ADC_Read,f
  6128  0A43  2A42               	goto	u3137
  6129  0A44  0000               	nop
  6130  0A45                     l3441:	
  6131                           
  6132                           ;main.c: 351:     GO_nDONE = 1;
  6133  0A45  1283               	bcf	3,5	;RP0=0, select bank0
  6134  0A46  1303               	bcf	3,6	;RP1=0, select bank0
  6135  0A47  151F               	bsf	31,2	;volatile
  6136  0A48                     l282:	
  6137                           ;main.c: 353:         ;
  6138                           
  6139                           
  6140                           ;main.c: 352:     while (GO_nDONE)
  6141  0A48  191F               	btfsc	31,2	;volatile
  6142  0A49  2A4B               	goto	u2861
  6143  0A4A  2A4C               	goto	u2860
  6144  0A4B                     u2861:	
  6145  0A4B  2A48               	goto	l282
  6146  0A4C                     u2860:	
  6147  0A4C                     l3443:	
  6148                           
  6149                           ;main.c: 354:     return ADRESL + (ADRESH << 8);
  6150  0A4C  081E               	movf	30,w	;volatile
  6151  0A4D  00A5               	movwf	?_ADC_Read+1
  6152  0A4E  1683               	bsf	3,5	;RP0=1, select bank1
  6153  0A4F  1303               	bcf	3,6	;RP1=0, select bank1
  6154  0A50  081E               	movf	30,w	;volatile
  6155  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  6156  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  6157  0A53  00A4               	movwf	?_ADC_Read
  6158  0A54                     l285:	
  6159  0A54  0008               	return
  6160  0A55                     __end_of_ADC_Read:	
  6161                           
  6162                           	psect	text23
  6163  0C9E                     __ptext23:	
  6164 ;; *************** function _ISR *****************
  6165 ;; Defined at:
  6166 ;;		line 525 in file "main.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      void 
  6173 ;; Registers used:
  6174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6180 ;;      Params:         0       0       0       0       0
  6181 ;;      Locals:         0       0       0       0       0
  6182 ;;      Temps:          0       4       0       0       0
  6183 ;;      Totals:         0       4       0       0       0
  6184 ;;Total ram usage:        4 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    2
  6187 ;; This function calls:
  6188 ;;		_UART_Read
  6189 ;;		_conteggioVeicoli
  6190 ;; This function is called by:
  6191 ;;		Interrupt level 1
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           
  6196                           ;psect for function _ISR
  6197  0C9E                     _ISR:	
  6198  0C9E                     i1l2767:	
  6199                           
  6200                           ;main.c: 528:     if (RCIF && readGateway.Bit == 0)
  6201  0C9E  1E8C               	btfss	12,5	;volatile
  6202  0C9F  2CA1               	goto	u215_21
  6203  0CA0  2CA2               	goto	u215_20
  6204  0CA1                     u215_21:	
  6205  0CA1  2CAB               	goto	i1l2775
  6206  0CA2                     u215_20:	
  6207  0CA2                     i1l2769:	
  6208  0CA2  1864               	btfsc	_readGateway,0
  6209  0CA3  2CA5               	goto	u216_21
  6210  0CA4  2CA6               	goto	u216_20
  6211  0CA5                     u216_21:	
  6212  0CA5  2CAB               	goto	i1l2775
  6213  0CA6                     u216_20:	
  6214  0CA6                     i1l2771:	
  6215                           
  6216                           ;main.c: 529:     {;main.c: 530:         readGateway.Bit = 1;
  6217  0CA6  1464               	bsf	_readGateway,0
  6218                           
  6219                           ;main.c: 531:         readGatewayDone.Bit = 0;
  6220  0CA7  1065               	bcf	_readGatewayDone,0
  6221                           
  6222                           ;main.c: 532:         readGatewayDone.Timeout = 0;
  6223  0CA8  10E5               	bcf	_readGatewayDone,1
  6224  0CA9                     i1l2773:	
  6225                           
  6226                           ;main.c: 533:         dataFromGatewayIndex = 0;
  6227  0CA9  01DF               	clrf	_dataFromGatewayIndex
  6228                           
  6229                           ;main.c: 534:         timerReadFromGateway = 0;
  6230  0CAA  01DE               	clrf	_timerReadFromGateway
  6231  0CAB                     i1l2775:	
  6232                           
  6233                           ;main.c: 536:     if (RCIF && readGateway.Bit == 1)
  6234  0CAB  1E8C               	btfss	12,5	;volatile
  6235  0CAC  2CAE               	goto	u217_21
  6236  0CAD  2CAF               	goto	u217_20
  6237  0CAE                     u217_21:	
  6238  0CAE  2CC6               	goto	i1l2785
  6239  0CAF                     u217_20:	
  6240  0CAF                     i1l2777:	
  6241  0CAF  1C64               	btfss	_readGateway,0
  6242  0CB0  2CB2               	goto	u218_21
  6243  0CB1  2CB3               	goto	u218_20
  6244  0CB2                     u218_21:	
  6245  0CB2  2CC6               	goto	i1l2785
  6246  0CB3                     u218_20:	
  6247  0CB3                     i1l2779:	
  6248                           
  6249                           ;main.c: 537:     {;main.c: 538:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  6250  0CB3  120A  158A  21E1  120A  158A  	fcall	_UART_Read
  6251  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  6252  0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  6253  0CBA  00A0               	movwf	??_ISR
  6254  0CBB  085F               	movf	_dataFromGatewayIndex,w
  6255  0CBC  3E90               	addlw	(low (_dataFromGateway| (0+256)))& (0+255)
  6256  0CBD  0084               	movwf	4
  6257  0CBE  0820               	movf	??_ISR,w
  6258  0CBF  1783               	bsf	3,7	;select IRP bank3
  6259  0CC0  0080               	movwf	0
  6260  0CC1                     i1l2781:	
  6261                           
  6262                           ;main.c: 539:         dataFromGatewayIndex++;
  6263  0CC1  3001               	movlw	1
  6264  0CC2  00A0               	movwf	??_ISR
  6265  0CC3  0820               	movf	??_ISR,w
  6266  0CC4  07DF               	addwf	_dataFromGatewayIndex,f
  6267  0CC5                     i1l2783:	
  6268                           
  6269                           ;main.c: 540:         timerReadFromGateway = 0;
  6270  0CC5  01DE               	clrf	_timerReadFromGateway
  6271  0CC6                     i1l2785:	
  6272                           
  6273                           ;main.c: 545:     if (TMR0IF)
  6274  0CC6  1D0B               	btfss	11,2	;volatile
  6275  0CC7  2CC9               	goto	u219_21
  6276  0CC8  2CCA               	goto	u219_20
  6277  0CC9                     u219_21:	
  6278  0CC9  2CD4               	goto	i1l2793
  6279  0CCA                     u219_20:	
  6280  0CCA                     i1l2787:	
  6281                           
  6282                           ;main.c: 546:     {;main.c: 547:         TMR0IF = 0;
  6283  0CCA  110B               	bcf	11,2	;volatile
  6284  0CCB                     i1l2789:	
  6285                           
  6286                           ;main.c: 548:         conteggioVeicoli();
  6287  0CCB  120A  158A  25B2  120A  158A  	fcall	_conteggioVeicoli
  6288  0CD0                     i1l2791:	
  6289                           
  6290                           ;main.c: 549:         TMR0 = 6;
  6291  0CD0  3006               	movlw	6
  6292  0CD1  1283               	bcf	3,5	;RP0=0, select bank0
  6293  0CD2  1303               	bcf	3,6	;RP1=0, select bank0
  6294  0CD3  0081               	movwf	1	;volatile
  6295  0CD4                     i1l2793:	
  6296                           
  6297                           ;main.c: 552:     if (TMR1IF)
  6298  0CD4  1C0C               	btfss	12,0	;volatile
  6299  0CD5  2CD7               	goto	u220_21
  6300  0CD6  2CD8               	goto	u220_20
  6301  0CD7                     u220_21:	
  6302  0CD7  2CED               	goto	i1l367
  6303  0CD8                     u220_20:	
  6304  0CD8                     i1l2795:	
  6305                           
  6306                           ;main.c: 553:     {;main.c: 554:         TMR1IF = 0;
  6307  0CD8  100C               	bcf	12,0	;volatile
  6308  0CD9                     i1l2797:	
  6309                           
  6310                           ;main.c: 555:         count_lux++;
  6311  0CD9  3001               	movlw	1
  6312  0CDA  00A0               	movwf	??_ISR
  6313  0CDB  0820               	movf	??_ISR,w
  6314  0CDC  07E0               	addwf	_count_lux,f
  6315  0CDD                     i1l2799:	
  6316                           
  6317                           ;main.c: 557:         if (count_lux >= 20)
  6318  0CDD  3014               	movlw	20
  6319  0CDE  0260               	subwf	_count_lux,w
  6320  0CDF  1C03               	skipc
  6321  0CE0  2CE2               	goto	u221_21
  6322  0CE1  2CE3               	goto	u221_20
  6323  0CE2                     u221_21:	
  6324  0CE2  2CE9               	goto	i1l2807
  6325  0CE3                     u221_20:	
  6326  0CE3                     i1l2801:	
  6327                           
  6328                           ;main.c: 558:         {;main.c: 559:             secondPassed.Bit = 1;
  6329  0CE3  1463               	bsf	_secondPassed,0
  6330  0CE4                     i1l2803:	
  6331                           
  6332                           ;main.c: 560:             count_lux = 0;
  6333  0CE4  01E0               	clrf	_count_lux
  6334  0CE5                     i1l2805:	
  6335                           
  6336                           ;main.c: 561:             timerReadFromGateway++;
  6337  0CE5  3001               	movlw	1
  6338  0CE6  00A0               	movwf	??_ISR
  6339  0CE7  0820               	movf	??_ISR,w
  6340  0CE8  07DE               	addwf	_timerReadFromGateway,f
  6341  0CE9                     i1l2807:	
  6342                           
  6343                           ;main.c: 564:         TMR1H = 60;
  6344  0CE9  303C               	movlw	60
  6345  0CEA  008F               	movwf	15	;volatile
  6346  0CEB                     i1l2809:	
  6347                           
  6348                           ;main.c: 565:         TMR1L = 176;
  6349  0CEB  30B0               	movlw	176
  6350  0CEC  008E               	movwf	14	;volatile
  6351  0CED                     i1l367:	
  6352  0CED  0823               	movf	??_ISR+3,w
  6353  0CEE  008A               	movwf	10
  6354  0CEF  0822               	movf	??_ISR+2,w
  6355  0CF0  0084               	movwf	4
  6356  0CF1  0E21               	swapf	(??_ISR+1)^0,w
  6357  0CF2  0083               	movwf	3
  6358  0CF3  0EFE               	swapf	btemp,f
  6359  0CF4  0E7E               	swapf	btemp,w
  6360  0CF5  0009               	retfie
  6361  0CF6                     __end_of_ISR:	
  6362                           
  6363                           	psect	intentry
  6364  0004                     __pintentry:	
  6365                           ;incstack = 0
  6366                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6367                           
  6368  0004                     interrupt_function:	
  6369  007E                     saved_w	set	btemp
  6370  0004  00FE               	movwf	btemp
  6371  0005  0E03               	swapf	3,w
  6372  0006  1283               	bcf	3,5	;RP0=0, select bank0
  6373  0007  1303               	bcf	3,6	;RP1=0, select bank0
  6374  0008  00A1               	movwf	??_ISR+1
  6375  0009  0804               	movf	4,w
  6376  000A  00A2               	movwf	??_ISR+2
  6377  000B  080A               	movf	10,w
  6378  000C  00A3               	movwf	??_ISR+3
  6379  000D  120A  158A  2C9E   	ljmp	_ISR
  6380                           
  6381                           	psect	text24
  6382  0DB2                     __ptext24:	
  6383 ;; *************** function _conteggioVeicoli *****************
  6384 ;; Defined at:
  6385 ;;		line 405 in file "main.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;  i               1   13[COMMON] unsigned char 
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      void 
  6392 ;; Registers used:
  6393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6399 ;;      Params:         0       0       0       0       0
  6400 ;;      Locals:         1       0       0       0       0
  6401 ;;      Temps:          4       0       0       0       0
  6402 ;;      Totals:         5       0       0       0       0
  6403 ;;Total ram usage:        5 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    1
  6406 ;; This function calls:
  6407 ;;		_Conteggio
  6408 ;; This function is called by:
  6409 ;;		_ISR
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           
  6414                           ;psect for function _conteggioVeicoli
  6415  0DB2                     _conteggioVeicoli:	
  6416  0DB2                     i1l2535:	
  6417                           ;incstack = 0
  6418                           ; Regs used in _conteggioVeicoli: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6419                           
  6420                           
  6421                           ;main.c: 407:     RoadsSensors[0] = PORTBbits.RB3;
  6422  0DB2  3000               	movlw	0
  6423  0DB3  1283               	bcf	3,5	;RP0=0, select bank0
  6424  0DB4  1303               	bcf	3,6	;RP1=0, select bank0
  6425  0DB5  1986               	btfsc	6,3	;volatile
  6426  0DB6  3001               	movlw	1
  6427  0DB7  1683               	bsf	3,5	;RP0=1, select bank1
  6428  0DB8  1303               	bcf	3,6	;RP1=0, select bank1
  6429  0DB9  00A0               	movwf	_RoadsSensors^(0+128)
  6430                           
  6431                           ;main.c: 408:     RoadsSensors[1] = PORTBbits.RB4;
  6432  0DBA  3000               	movlw	0
  6433  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  6434  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  6435  0DBD  1A06               	btfsc	6,4	;volatile
  6436  0DBE  3001               	movlw	1
  6437  0DBF  1683               	bsf	3,5	;RP0=1, select bank1
  6438  0DC0  1303               	bcf	3,6	;RP1=0, select bank1
  6439  0DC1  00A1               	movwf	(_RoadsSensors^(0+128)+1)
  6440                           
  6441                           ;main.c: 409:     RoadsSensors[2] = PORTBbits.RB5;
  6442  0DC2  3000               	movlw	0
  6443  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  6444  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  6445  0DC5  1A86               	btfsc	6,5	;volatile
  6446  0DC6  3001               	movlw	1
  6447  0DC7  1683               	bsf	3,5	;RP0=1, select bank1
  6448  0DC8  1303               	bcf	3,6	;RP1=0, select bank1
  6449  0DC9  00A2               	movwf	(_RoadsSensors^(0+128)+2)
  6450                           
  6451                           ;main.c: 410:     RoadsSensors[3] = PORTAbits.RA5;
  6452  0DCA  3000               	movlw	0
  6453  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  6454  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  6455  0DCD  1A85               	btfsc	5,5	;volatile
  6456  0DCE  3001               	movlw	1
  6457  0DCF  1683               	bsf	3,5	;RP0=1, select bank1
  6458  0DD0  1303               	bcf	3,6	;RP1=0, select bank1
  6459  0DD1  00A3               	movwf	(_RoadsSensors^(0+128)+3)
  6460  0DD2                     i1l2537:	
  6461                           
  6462                           ;main.c: 412:     for (unsigned char i = 0; i < 4; i++)
  6463  0DD2  01FD               	clrf	conteggioVeicoli@i
  6464  0DD3                     i1l2541:	
  6465                           
  6466                           ;main.c: 413:     {;main.c: 414:         if (!RoadsSensors[i])
  6467  0DD3  087D               	movf	conteggioVeicoli@i,w
  6468  0DD4  3EA0               	addlw	(low (_RoadsSensors| 0))& (0+255)
  6469  0DD5  0084               	movwf	4
  6470  0DD6  1383               	bcf	3,7	;select IRP bank1
  6471  0DD7  0800               	movf	0,w
  6472  0DD8  1D03               	btfss	3,2
  6473  0DD9  2DDB               	goto	u191_21
  6474  0DDA  2DDC               	goto	u191_20
  6475  0DDB                     u191_21:	
  6476  0DDB  2DE5               	goto	i1l2545
  6477  0DDC                     u191_20:	
  6478  0DDC                     i1l2543:	
  6479                           
  6480                           ;main.c: 415:         {;main.c: 416:             count++;
  6481  0DDC  3001               	movlw	1
  6482  0DDD  1683               	bsf	3,5	;RP0=1, select bank1
  6483  0DDE  1303               	bcf	3,6	;RP1=0, select bank1
  6484  0DDF  07A8               	addwf	_count^(0+128),f
  6485  0DE0  1803               	skipnc
  6486  0DE1  0AA9               	incf	(_count+1)^(0+128),f
  6487  0DE2  3000               	movlw	0
  6488  0DE3  07A9               	addwf	(_count+1)^(0+128),f
  6489                           
  6490                           ;main.c: 417:         }
  6491  0DE4  2E0C               	goto	i1l2551
  6492  0DE5                     i1l2545:	
  6493  0DE5  087D               	movf	conteggioVeicoli@i,w
  6494  0DE6  3EA0               	addlw	(low (_RoadsSensors| 0))& (0+255)
  6495  0DE7  0084               	movwf	4
  6496  0DE8  0800               	movf	0,w
  6497  0DE9  1903               	btfsc	3,2
  6498  0DEA  2DEC               	goto	u192_21
  6499  0DEB  2DED               	goto	u192_20
  6500  0DEC                     u192_21:	
  6501  0DEC  2E0C               	goto	i1l2551
  6502  0DED                     u192_20:	
  6503  0DED                     i1l2547:	
  6504                           
  6505                           ;main.c: 419:         {;main.c: 420:             Conteggio(count, motorcycle, car, truck
      +                          , i);
  6506  0DED  1683               	bsf	3,5	;RP0=1, select bank1
  6507  0DEE  1303               	bcf	3,6	;RP1=0, select bank1
  6508  0DEF  0829               	movf	(_count+1)^(0+128),w
  6509  0DF0  00F1               	movwf	Conteggio@_count+1
  6510  0DF1  0828               	movf	_count^(0+128),w
  6511  0DF2  00F0               	movwf	Conteggio@_count
  6512  0DF3  30B2               	movlw	(low (_motorcycle| 0))& (0+255)
  6513  0DF4  00F9               	movwf	??_conteggioVeicoli
  6514  0DF5  0879               	movf	??_conteggioVeicoli,w
  6515  0DF6  00F2               	movwf	Conteggio@_motorcycle
  6516  0DF7  30AE               	movlw	(low (_car| 0))& (0+255)
  6517  0DF8  00FA               	movwf	??_conteggioVeicoli+1
  6518  0DF9  087A               	movf	??_conteggioVeicoli+1,w
  6519  0DFA  00F3               	movwf	Conteggio@_car
  6520  0DFB  30AA               	movlw	(low (_truck| 0))& (0+255)
  6521  0DFC  00FB               	movwf	??_conteggioVeicoli+2
  6522  0DFD  087B               	movf	??_conteggioVeicoli+2,w
  6523  0DFE  00F4               	movwf	Conteggio@_truck
  6524  0DFF  087D               	movf	conteggioVeicoli@i,w
  6525  0E00  00FC               	movwf	??_conteggioVeicoli+3
  6526  0E01  087C               	movf	??_conteggioVeicoli+3,w
  6527  0E02  00F5               	movwf	Conteggio@index
  6528  0E03  120A  158A  23AA  120A  158A  	fcall	_Conteggio
  6529  0E08                     i1l2549:	
  6530                           
  6531                           ;main.c: 421:             count = 0;
  6532  0E08  1683               	bsf	3,5	;RP0=1, select bank1
  6533  0E09  1303               	bcf	3,6	;RP1=0, select bank1
  6534  0E0A  01A8               	clrf	_count^(0+128)
  6535  0E0B  01A9               	clrf	(_count+1)^(0+128)
  6536  0E0C                     i1l2551:	
  6537                           
  6538                           ;main.c: 423:     }
  6539  0E0C  3001               	movlw	1
  6540  0E0D  00F9               	movwf	??_conteggioVeicoli
  6541  0E0E  0879               	movf	??_conteggioVeicoli,w
  6542  0E0F  07FD               	addwf	conteggioVeicoli@i,f
  6543  0E10                     i1l2553:	
  6544  0E10  3004               	movlw	4
  6545  0E11  027D               	subwf	conteggioVeicoli@i,w
  6546  0E12  1C03               	skipc
  6547  0E13  2E15               	goto	u193_21
  6548  0E14  2E16               	goto	u193_20
  6549  0E15                     u193_21:	
  6550  0E15  2DD3               	goto	i1l2541
  6551  0E16                     u193_20:	
  6552  0E16                     i1l319:	
  6553  0E16  0008               	return
  6554  0E17                     __end_of_conteggioVeicoli:	
  6555                           
  6556                           	psect	text25
  6557  0BAA                     __ptext25:	
  6558 ;; *************** function _Conteggio *****************
  6559 ;; Defined at:
  6560 ;;		line 99 in file "./CustomLib/TrafficLight.h"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;  _count          2    0[COMMON] unsigned int 
  6563 ;;  _motorcycle     1    2[COMMON] PTR unsigned char 
  6564 ;;		 -> motorcycle(4), 
  6565 ;;  _car            1    3[COMMON] PTR unsigned char 
  6566 ;;		 -> car(4), 
  6567 ;;  _truck          1    4[COMMON] PTR unsigned char 
  6568 ;;		 -> truck(4), 
  6569 ;;  index           1    5[COMMON] unsigned char 
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;		None
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  1    wreg      void 
  6574 ;; Registers used:
  6575 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6581 ;;      Params:         6       0       0       0       0
  6582 ;;      Locals:         0       0       0       0       0
  6583 ;;      Temps:          3       0       0       0       0
  6584 ;;      Totals:         9       0       0       0       0
  6585 ;;Total ram usage:        9 bytes
  6586 ;; Hardware stack levels used:    1
  6587 ;; This function calls:
  6588 ;;		Nothing
  6589 ;; This function is called by:
  6590 ;;		_conteggioVeicoli
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           
  6595                           ;psect for function _Conteggio
  6596  0BAA                     _Conteggio:	
  6597  0BAA                     i1l2119:	
  6598                           ;incstack = 0
  6599                           ; Regs used in _Conteggio: [wreg-fsr0h+status,2+status,0]
  6600                           
  6601                           
  6602                           ;./CustomLib/TrafficLight.h: 99: void Conteggio(unsigned int _count, unsigned char _moto
      +                          rcycle[4], unsigned char _car[4], unsigned char _truck[4], unsigned char index);./Custom
      +                          Lib/TrafficLight.h: 100: {;./CustomLib/TrafficLight.h: 101:     if (_count >= 500)
  6603  0BAA  3001               	movlw	1
  6604  0BAB  0271               	subwf	Conteggio@_count+1,w
  6605  0BAC  30F4               	movlw	244
  6606  0BAD  1903               	skipnz
  6607  0BAE  0270               	subwf	Conteggio@_count,w
  6608  0BAF  1C03               	skipc
  6609  0BB0  2BB2               	goto	u129_21
  6610  0BB1  2BB3               	goto	u129_20
  6611  0BB2                     u129_21:	
  6612  0BB2  2BC3               	goto	i1l2123
  6613  0BB3                     u129_20:	
  6614  0BB3                     i1l2121:	
  6615                           
  6616                           ;./CustomLib/TrafficLight.h: 102:     {;./CustomLib/TrafficLight.h: 103:         _motorc
      +                          ycle[index] = _motorcycle[index] + 1;
  6617  0BB3  0875               	movf	Conteggio@index,w
  6618  0BB4  0772               	addwf	Conteggio@_motorcycle,w
  6619  0BB5  00F6               	movwf	??_Conteggio
  6620  0BB6  0876               	movf	??_Conteggio,w
  6621  0BB7  0084               	movwf	4
  6622  0BB8  1383               	bcf	3,7	;select IRP bank0
  6623  0BB9  0800               	movf	0,w
  6624  0BBA  3E01               	addlw	1
  6625  0BBB  00F7               	movwf	??_Conteggio+1
  6626  0BBC  0875               	movf	Conteggio@index,w
  6627  0BBD  0772               	addwf	Conteggio@_motorcycle,w
  6628  0BBE  00F8               	movwf	??_Conteggio+2
  6629  0BBF  0878               	movf	??_Conteggio+2,w
  6630  0BC0  0084               	movwf	4
  6631  0BC1  0877               	movf	??_Conteggio+1,w
  6632  0BC2  0080               	movwf	0
  6633  0BC3                     i1l2123:	
  6634                           
  6635                           ;./CustomLib/TrafficLight.h: 105:     if (_count >= 1500)
  6636  0BC3  3005               	movlw	5
  6637  0BC4  0271               	subwf	Conteggio@_count+1,w
  6638  0BC5  30DC               	movlw	220
  6639  0BC6  1903               	skipnz
  6640  0BC7  0270               	subwf	Conteggio@_count,w
  6641  0BC8  1C03               	skipc
  6642  0BC9  2BCB               	goto	u130_21
  6643  0BCA  2BCC               	goto	u130_20
  6644  0BCB                     u130_21:	
  6645  0BCB  2BDC               	goto	i1l2127
  6646  0BCC                     u130_20:	
  6647  0BCC                     i1l2125:	
  6648                           
  6649                           ;./CustomLib/TrafficLight.h: 106:     {;./CustomLib/TrafficLight.h: 107:         _car[in
      +                          dex] = _car[index] + 1;
  6650  0BCC  0875               	movf	Conteggio@index,w
  6651  0BCD  0773               	addwf	Conteggio@_car,w
  6652  0BCE  00F6               	movwf	??_Conteggio
  6653  0BCF  0876               	movf	??_Conteggio,w
  6654  0BD0  0084               	movwf	4
  6655  0BD1  1383               	bcf	3,7	;select IRP bank0
  6656  0BD2  0800               	movf	0,w
  6657  0BD3  3E01               	addlw	1
  6658  0BD4  00F7               	movwf	??_Conteggio+1
  6659  0BD5  0875               	movf	Conteggio@index,w
  6660  0BD6  0773               	addwf	Conteggio@_car,w
  6661  0BD7  00F8               	movwf	??_Conteggio+2
  6662  0BD8  0878               	movf	??_Conteggio+2,w
  6663  0BD9  0084               	movwf	4
  6664  0BDA  0877               	movf	??_Conteggio+1,w
  6665  0BDB  0080               	movwf	0
  6666  0BDC                     i1l2127:	
  6667                           
  6668                           ;./CustomLib/TrafficLight.h: 109:     if (_count >= 3000)
  6669  0BDC  300B               	movlw	11
  6670  0BDD  0271               	subwf	Conteggio@_count+1,w
  6671  0BDE  30B8               	movlw	184
  6672  0BDF  1903               	skipnz
  6673  0BE0  0270               	subwf	Conteggio@_count,w
  6674  0BE1  1C03               	skipc
  6675  0BE2  2BE4               	goto	u131_21
  6676  0BE3  2BE5               	goto	u131_20
  6677  0BE4                     u131_21:	
  6678  0BE4  2BF5               	goto	i1l159
  6679  0BE5                     u131_20:	
  6680  0BE5                     i1l2129:	
  6681                           
  6682                           ;./CustomLib/TrafficLight.h: 110:     {;./CustomLib/TrafficLight.h: 111:         _truck[
      +                          index] = _truck[index] + 1;
  6683  0BE5  0875               	movf	Conteggio@index,w
  6684  0BE6  0774               	addwf	Conteggio@_truck,w
  6685  0BE7  00F6               	movwf	??_Conteggio
  6686  0BE8  0876               	movf	??_Conteggio,w
  6687  0BE9  0084               	movwf	4
  6688  0BEA  1383               	bcf	3,7	;select IRP bank0
  6689  0BEB  0800               	movf	0,w
  6690  0BEC  3E01               	addlw	1
  6691  0BED  00F7               	movwf	??_Conteggio+1
  6692  0BEE  0875               	movf	Conteggio@index,w
  6693  0BEF  0774               	addwf	Conteggio@_truck,w
  6694  0BF0  00F8               	movwf	??_Conteggio+2
  6695  0BF1  0878               	movf	??_Conteggio+2,w
  6696  0BF2  0084               	movwf	4
  6697  0BF3  0877               	movf	??_Conteggio+1,w
  6698  0BF4  0080               	movwf	0
  6699  0BF5                     i1l159:	
  6700  0BF5  0008               	return
  6701  0BF6                     __end_of_Conteggio:	
  6702                           
  6703                           	psect	text26
  6704  09E1                     __ptext26:	
  6705 ;; *************** function _UART_Read *****************
  6706 ;; Defined at:
  6707 ;;		line 386 in file "main.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;		None
  6712 ;; Return value:  Size  Location     Type
  6713 ;;                  1    wreg      unsigned char 
  6714 ;; Registers used:
  6715 ;;		wreg
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6721 ;;      Params:         0       0       0       0       0
  6722 ;;      Locals:         0       0       0       0       0
  6723 ;;      Temps:          0       0       0       0       0
  6724 ;;      Totals:         0       0       0       0       0
  6725 ;;Total ram usage:        0 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; This function calls:
  6728 ;;		Nothing
  6729 ;; This function is called by:
  6730 ;;		_ISR
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           
  6735                           ;psect for function _UART_Read
  6736  09E1                     _UART_Read:	
  6737  09E1                     i1l2529:	
  6738                           ;incstack = 0
  6739                           ; Regs used in _UART_Read: [wreg]
  6740                           
  6741  09E1                     i1l303:	
  6742                           ;main.c: 389:         ;
  6743                           
  6744                           
  6745                           ;main.c: 388:     while (!RCIF)
  6746  09E1  1283               	bcf	3,5	;RP0=0, select bank0
  6747  09E2  1303               	bcf	3,6	;RP1=0, select bank0
  6748  09E3  1E8C               	btfss	12,5	;volatile
  6749  09E4  29E6               	goto	u190_21
  6750  09E5  29E7               	goto	u190_20
  6751  09E6                     u190_21:	
  6752  09E6  29E1               	goto	i1l303
  6753  09E7                     u190_20:	
  6754  09E7                     i1l305:	
  6755                           
  6756                           ;main.c: 390:     RCIF = 0;
  6757  09E7  128C               	bcf	12,5	;volatile
  6758  09E8                     i1l2531:	
  6759                           
  6760                           ;main.c: 391:     return RCREG;
  6761  09E8  081A               	movf	26,w	;volatile
  6762  09E9                     i1l306:	
  6763  09E9  0008               	return
  6764  09EA                     __end_of_UART_Read:	
  6765  007E                     btemp	set	126	;btemp
  6766  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    12
    Data        20
    BSS         184
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     59      70
    BANK1            80      0      66
    BANK3            96     10      95
    BANK2            96      0      42

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    DigitsArr	PTR struct .[8] size(1) Largest target is 3
		 -> digits7(BANK1[3]), digits6(BANK1[3]), digits5(BANK1[3]), digits4(BANK1[3]), 
		 -> digits3(BANK1[3]), digits2(BANK1[3]), digits1(BANK1[3]), digits0(BANK1[3]), 

    Semafori	PTR struct .[8] size(1) Largest target is 14
		 -> s7(BANK2[14]), s6(BANK2[14]), s5(BANK2[14]), s4(BANK3[14]), 
		 -> s3(BANK3[14]), s2(BANK3[14]), s1(BANK3[14]), s0(BANK3[14]), 

    Conteggio@_truck	PTR unsigned char  size(1) Largest target is 4
		 -> truck(BANK1[4]), 

    Conteggio@_car	PTR unsigned char  size(1) Largest target is 4
		 -> car(BANK1[4]), 

    Conteggio@_motorcycle	PTR unsigned char  size(1) Largest target is 4
		 -> motorcycle(BANK1[4]), 

    GetDigits@_digits	PTR PTR struct . size(1) Largest target is 8
		 -> DigitsArr(BANK1[8]), 

    SetReceivedTimes@_semafori	PTR PTR struct . size(1) Largest target is 16
		 -> Semafori(BANK1[8]), 

    SetReceivedTimes@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK3[15]), 

    SetDefaultTimers@_semafori	PTR PTR struct . size(1) Largest target is 16
		 -> Semafori(BANK1[8]), 

    GetTime@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK3[15]), 

    UpdateTimes@_semafori	PTR PTR struct . size(1) Largest target is 16
		 -> Semafori(BANK1[8]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli
    _conteggioVeicoli->_Conteggio

Critical Paths under _main in BANK0

    _main->_map
    _sendByte->_BuildByte
    _rand->___lmul
    _map->___awdiv
    _UART_Init->___aldiv
    _ShowDigitsOnDisplay->___awmod
    _SetReceivedTimes->_GetTime
    _GetDigits->___awdiv
    ___awmod->_rand
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   25671
                                             50 BANK0      9     9      0
                                              0 BANK3     10    10      0
                           _ADC_Read
                          _GetDigits
                   _SetDefaultTimers
                   _SetReceivedTimes
                _ShowDigitsOnDisplay
                          _UART_Init
                        _UpdateTimes
                            ___awmod
                           _init_ADC
                       _luciSemaforo
                                _map
                               _rand
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    4067
                                             24 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1138
                                              4 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _rand                                                 7     5      2     316
                                             17 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     316
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    5418
                                             40 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2506
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _luciSemaforo                                         4     3      1     183
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UpdateTimes                                         13    13      0     668
                                              4 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             19 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              4 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _ShowDigitsOnDisplay                                  3     3      0    3554
                                             31 BANK0      3     3      0
                         _SetDisplay
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _SetDisplay                                           7     3      4    1514
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _SetReceivedTimes                                    10     9      1    1618
                                             12 BANK0     10     9      1
                            _GetTime
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              8     6      2     384
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    12     5      7    1395
                                              4 BANK0     12     5      7
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            9     6      3    4353
                                             40 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     721
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1693
                                             24 BANK0      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1345
                                             31 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0     822
                                              0 BANK0      4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     5     5      0     822
                                              9 COMMON     5     5      0
                          _Conteggio
 ---------------------------------------------------------------------------------
 (5) _Conteggio                                            9     3      6     710
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       ___wmul (ARG)
     ___awmod
       _rand (ARG)
         ___lmul
     ___bmul
   _SetDefaultTimers
   _SetReceivedTimes
     _GetTime
     ___bmul
   _ShowDigitsOnDisplay
     _SetDisplay
     ___awmod
       _rand (ARG)
         ___lmul
   _UART_Init
     ___aldiv
   _UpdateTimes
   ___awmod
     _rand (ARG)
       ___lmul
   _init_ADC
   _luciSemaforo
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       ___wmul (ARG)
     ___wmul (ARG)
   _rand
     ___lmul
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli
     _Conteggio

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      A      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      2A      11       43.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      42       7       82.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3B      46       5       87.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     11F      12        0.0%
ABS                  0      0     11F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Jul 16 16:18:04 2020

                 luciSemaforo@lux 0024                                 pc 0002                    ___bmul@product 0026  
                     __CFG_CP$OFF 0000                      ___awdiv@sign 0045                                _s0 01D7  
                              _s1 01C9                                _s2 01BB                                _s3 01AD  
                              _s4 019F                                _s5 012C                                _s6 011E  
                              _s7 0110                                fsr 0004               ___wmul@multiplicand 0026  
                  _GetDigits$1247 004E                 luciSemaforo@index 0027                       __CFG_LVP$ON 0000  
                             l111 064C                               l105 05FB                               l130 0B61  
                             l114 0674                               l142 073B                               l127 0F62  
                             l311 0AAC                               l240 0392                               l153 05AC  
                             l162 0AE1                               l242 0092                               l147 0DB1  
                             l332 0C19                               l325 0BFA                               l334 0C1D  
                             l343 0C9D                               l335 0C21                               l327 0BFE  
                             l328 0C02                               l336 0C48                               l272 04D3  
                             l256 029D                               l282 0A48                               l291 09ED  
                             l285 0A54                               l357 07E8                               l453 0A63  
                             l293 09F1                               l269 045C                               l606 0E7F  
                             l518 0F77                               l294 09F4                               l279 0A07  
                             l455 0A7B                               l528 0FFF                               l288 0B1B  
                             l619 0D50                               l467 0BA9                               l479 07FF  
                             l903 0EF0                      __CFG_CPD$OFF 0000                               _ISR 0C9E  
                             _car 00AE                               _map 0AAD                               fsr0 0004  
                             indf 0000                      ___awmod@sign 003E                      __CFG_FOSC$HS 0000  
                            ?_ISR 0070             ??_ShowDigitsOnDisplay 003F                              l3101 0B2E  
                            l3103 0B36                              l3031 05B0                              l3105 0B47  
                            l3121 0C6B                              l3201 0FC9                              l3033 05BF  
                            l3113 09ED                              l3107 0B55                              l3123 0C6E  
                            l3211 0FEC                              l3203 0FD7                              l3051 05D4  
                            l3035 05CC                              l3115 09F2                              l3221 0E1E  
                            l3109 0B5D                              l3117 0C4C                              l3213 0FF7  
                            l3205 0FD8                              l3141 0A6A                              l3053 05E8  
                            l3045 05D0                              l3037 05CD                              l3231 0E32  
                            l3223 0E23                              l3119 0C4D                              l3127 0C8D  
                            l3207 0FE1                              l3311 0EF6                              l3143 0A71  
                            l3135 0A55                              l3151 0B6C                              l3063 060A  
                            l3055 05EE                              l3039 05CE                              l3241 0E48  
                            l3233 0E34                              l3225 0E25                              l3217 0E17  
                            l3209 0FE7                              l3321 0F58                              l3313 0F27  
                            l3305 0EF5                              l3401 0A00                              l3145 0A77  
                            l3137 0A59                              l3153 0B70                              l3081 0639  
                            l3073 0621                              l3065 0610                              l3057 0601  
                            l3251 0E6B                              l3243 0E4C                              l3235 0E3A  
                            l3227 0E29                              l3219 0E1A                              l3171 07F7  
                            l3163 07EC                              l3331 0678                              l3411 0B1A  
                            l3403 0AE2                              l3323 0F5C                              l3315 0F4E  
                            l3139 0A5D                              l3155 0B87                              l3091 0660  
                            l3083 063F                              l3067 061D                              l3059 0609  
                            l3245 0E5D                              l3237 0E3D                              l3253 0E71  
                            l3229 0E2E                              l3261 0CF6                              l3173 07FE  
                            l3165 07ED                              l3341 06CA                              l3325 0675  
                            l3501 07C6                              l3181 0F6A                              l3405 0AEA  
                            l3317 0F52                              l3157 0B90                              l3149 0B62  
                            l3413 0E80                              l3093 0666                              l3085 0652  
                            l3421 0A7F                              l3255 0E76                              l3247 0E63  
                            l3239 0E44                              l3271 0D08                              l3263 0CF9  
                            l3167 07F1                              l3351 070F                              l3503 07CC  
                            l3191 0F9A                              l3183 0F7B                              l3407 0B18  
                            l3159 0BA1                              l3415 0EBD                              l3095 0673  
                            l3087 065F                              l3079 0625                              l3431 0A9C  
                            l3423 0A92                              l3511 0047                              l3441 0A45  
                            l3257 0E7B                              l3249 0E64                              l3281 0D21  
                            l3273 0D0D                              l3265 0CFD                              l3169 07F5  
                            l3353 0713                              l3337 067A                              l3345 06F2  
                            l3361 0D54                              l3505 07D2                              l3193 0F9D  
                            l3185 0F86                              l3177 0F63                              l3409 0B19  
                            l3417 0ECB                              l3433 0AA2                              l3601 028E  
                            l3521 0054                              l3513 004D                              l3443 0A4C  
                            l3283 0D25                              l3275 0D13                              l3291 0D42  
                            l3267 0D02                              l3355 0719                              l3339 06A2  
                            l3347 0705                              l3099 0B1F                              l3371 0D79  
                            l3363 0D55                              l3195 0FAA                              l3187 0F8A  
                            l3179 0F66                              l3451 0C06                              l3435 0AA6  
                            l3611 0345                              l3603 0296                              l3531 0063  
                            l3523 0058                              l3515 004E                              l3437 0A32  
                            l3293 0D47                              l3285 0D2F                              l3277 0D16  
                            l3269 0D04                              l3381 04E4                              l3349 0709  
                            l3373 0D8C                              l3197 0FAE                              l3189 0F92  
                            l3429 0A93                              l3701 04DB                              l3621 0361  
                            l3613 0352                              l3605 029F                              l3541 008A  
                            l3533 006E                              l3525 005A                              l3517 0050  
                            l3439 0A3E                              l3295 0D4C                              l3287 0D35  
                            l3279 0D1D                              l3383 04F9                              l3375 0DAC  
                            l3367 0D5C                              l3199 0FB7                              l3455 0C25  
                            l3447 0BF9                              l3391 0AAD                              l3631 0379  
                            l3615 0355                              l3607 032D                              l3551 0094  
                            l3543 008B                              l3535 0085                              l3527 005C  
                            l3519 0052                              l3289 0D3C                              l3385 0515  
                            l3369 0D6B                              l3641 039A                              l3625 036A  
                            l3609 0338                              l3561 010B                              l3545 008C  
                            l3537 0088                              l3529 005E                              l3387 0572  
                            l3379 04E3                              l3491 0771                              l3299 0EF4  
                            l3395 09F5                              l3459 0C38                              l3651 03B2  
                            l3643 039C                              l3627 0370                              l3619 035C  
                            l3571 01F6                              l3563 011A                              l3635 037D  
                            l3547 008D                              l3539 0089                              l3389 0585  
                            l3493 077B                              l3485 0740                              l3397 09F9  
                            l3661 03D4                              l3653 03B6                              l3645 03A0  
                            l3637 0398                              l3629 0373                              l3581 0262  
                            l3565 012A                              l3557 0097                              ?_map 0048  
                            l3495 0796                              l3487 074B                              l3479 073C  
                            l3399 09FC                              l3671 043D                              l3663 0421  
                            l3655 03B9                              l3647 03A2                              l3639 0399  
                            l3591 0279                              l3567 016E                              l3575 023A  
                            l3559 00FD                              l3489 0766                              l3681 0457  
                            l3673 0442                              l3665 0427                              l3649 03AC  
                            l3593 0286                              l3569 01B2                              l3577 0254  
                            l3499 07B3                              l3683 046C                              l3675 0448  
                            l3667 0434                              l3659 03C0                              l3691 04C2  
                            l3587 0264                              l3579 025C                              l3693 04C7  
                            l3685 0480                              l3677 044E                              l3669 043C  
                            l3589 0273                              l3951 0C40                              l3695 04CD  
                            l3679 0452                              l3687 04B9                              l3599 0289  
                            l3943 0246                              l3953 07BB                              l3697 04D1  
                            l3945 038A                              l3955 0C95                              l3947 0C0E  
                            l3699 04D7                              l3957 06FA                              l3949 0C2D  
                            u3000 03B2                              u3001 03B1                              u3010 03B6  
                            u3011 03B5                              u3100 04DB                              u3020 03BF  
                            u3101 04DA                              u3021 03BE                              u2310 0673  
                            u3030 03D4                              u2311 0672                              u3031 03D3  
                            u2304 0658                              u2240 05FB                              u3040 0421  
                            u2305 0656                              u2241 05FA                              u2225 05C2  
                            u3041 0420                              u2250 0601                              u2234 05E0  
                            u2330 09F1                              u3050 043C                              u2315 066F  
                            u2251 0600                              u2235 05DE                              u2331 09F0  
                            u3051 043B                              u2340 0A5D                              u2420 0BA1  
                            u2260 061D                              u3060 0442                              u2325 0B3C  
                            u2341 0A5C                              u2421 0BA0                              u2405 0B89  
                            u2261 061C                              u2245 05F7                              u3061 0441  
                            u2430 07F1                              u2510 0FC9                              u3070 04CD  
                            u2431 07F0                              u2511 0FC8                              u3127 0A04  
                            u2415 0B91                              u3071 04CC                              u2440 07FE  
                            u2280 064C                              u3080 04D1                              u3137 0A42  
                            u2441 07FD                              u2505 0FB0                              u2281 064B  
                            u2265 0619                              u3081 04D0                              u2610 0E5D  
                            u2530 0FE7                              u2450 0F6A                              u2370 0A77  
                            u2290 0652                              u2274 0631                              u3090 04D7  
                            u2611 0E5C                              u2531 0FE6                              u2515 0FC5  
                            u2451 0F69                              u2371 0A76                              u2355 0A64  
                            u2291 0651                              u2275 062F                              u3091 04D6  
                            u2700 0D2F                              u2540 0FEC                              u2460 0F7B  
                            u2380 0B70                              u2605 0E4D                              u2701 0D2E  
                            u2541 0FEB                              u2525 0FD9                              u2461 0F7A  
                            u2365 0A6B                              u2381 0B6F                              u2285 0648  
                            u2630 0E71                              u2550 0E1E                              u2470 0F9A  
                            u2631 0E70                              u2615 0E59                              u2551 0E1D  
                            u2471 0F99                              u2391 0B79                              u2640 0E76  
                            u2560 0E29                              u2720 0D42                              u2392 0B80  
                            u2641 0E75                              u2625 0E65                              u2561 0E28  
                            u2721 0D41                              u2705 0D2B                              u2393 0B87  
                            u2570 0E3A                              u2730 0D47                              u2650 0CFD  
                            u2810 0515                              u2490 0FAE                              u2571 0E39  
                            u2731 0D46                              u2715 0D36                              u2651 0CFC  
                            u2811 0514                              u2491 0FAD                              u2660 0D08  
                            u2900 07D2                              u2820 0AF9                              u2740 0F27  
                            u2661 0D07                              u2805 0D81                              u2901 07D1  
                            u2485 0F9F                              u2741 0F26                              u2590 0E4C  
                            u2670 0D13                              u2750 0F58                              u2830 0EE8  
                            u2910 0091                              u2591 0E4B                              u2671 0D12  
                            u2815 0511                              u2751 0F57                              u2911 0090  
                            u2760 0F62                              u2840 0AAC                              u2920 0262  
                            u2585 0E3E                              u2825 0AF4                              u2761 0F61  
                            u2745 0F23                              u2841 0AAB                              u2921 0261  
                            u2690 0D25                              u2770 070F                              u2930 0286  
                            u2691 0D24                              u2771 070E                              u2835 0EE3  
                            u2931 0285                              u2860 0A4C                              u2780 0719  
                            u2940 029C                              u2861 0A4B                              u2685 0D17  
                            u2781 0718                              u2941 029B                              u2790 0D5B  
                            u2870 074B                              u2950 035B                              u2855 0A35  
                            u2791 0D5A                              u2871 074A                              u2951 035A  
                            u2935 0282                              u2880 0771                              u2960 0370  
                            u2881 0770                              u2961 036F                              u2890 077B  
                            u2970 0379                              u2891 077A                              u2971 0378  
                            u2980 0398                              _RCIF 0065                              u2981 0397  
                            u2990 03A0                              u2991 039F                              _TMR0 0001  
                            _TXIF 0064                      __CFG_WRT$OFF 0000                              _disp 0061  
                            _main 0047                              _rand 0E80                              _temp 005D  
                            _time 00A4                              map@x 0048                              btemp 007E  
                __end_of_ADC_Read 0A55                     __CFG_BOREN$ON 0000                              start 0010  
                 __end_of_GetTime 0B62                 ___bmul@multiplier 0027                             ??_ISR 0020  
       __size_of_conteggioVeicoli 0065                             ??_map 0052                   __end_of___aldiv 1000  
                           ?_main 0070                             ?_rand 0031                   __end_of___awdiv 0E80  
                   __CFG_WDTE$OFF 0000                   __end_of___awmod 0D51                   ___awdiv@divisor 003F  
                           _T1CON 0010                             i1l303 09E1                             i1l305 09E7  
                           i1l306 09E9                             i1l159 0BF5                             i1l319 0E16  
                           i1l367 0CED                   ___awdiv@counter 0044                             _RCREG 001A  
            UpdateTimes@_semafori 002E                             _TMR1H 000F                             _TMR1L 000E  
                           _SPBRG 0099                             _PORTD 0008                             _TRISA 0085  
                           _TRISB 0086                             _TRISC 0087                             _TRISD 0088  
                           _TRISE 0089                             _TXREG 0019               ___lmul@multiplicand 0028  
                   __CFG_PWRTE$ON 0000                __size_of_UART_Init 003A                __size_of_UART_Read 0009  
                 __end_of_display 0811                             _count 00A8                             _randx 00CE  
                           main@i 01EE                             _truck 00AA                             pclath 000A  
                           status 0003                             wtemp0 007E                   __initialization 0013  
                    __end_of_main 04E0                      __end_of_rand 0EF1         __size_of_SetReceivedTimes 0061  
              __size_of_GetDigits 00CD                            ??_main 0052                            ??_rand 0033  
               SetDefaultTimers@i 002F                 SetDefaultTimers@l 002E                __size_of_BuildByte 00C8  
                      _SetDisplay 0C49                            _ADCON0 001F                            _ADCON1 009F  
              __size_of_Conteggio 004C                            _ADRESH 001E                            _ADRESL 009E  
                ___awdiv@dividend 0041                            i1l2121 0BB3                            i1l2123 0BC3  
                          i1l2125 0BCC                            i1l2127 0BDC                            i1l2119 0BAA  
                          i1l2129 0BE5                            i1l2531 09E8                            i1l2541 0DD3  
                          i1l2551 0E0C                            i1l2543 0DDC                            i1l2535 0DB2  
                          u130_20 0BCC                            i1l2529 09E1                            u130_21 0BCB  
                          i1l2553 0E10                            i1l2545 0DE5                            i1l2537 0DD2  
                          i1l2801 0CE3                            i1l2547 0DED                            i1l2803 0CE4  
                          i1l2549 0E08                            i1l2805 0CE5                            i1l2807 0CE9  
                          u131_20 0BE5                            u131_21 0BE4                            i1l2809 0CEB  
                          i1l2771 0CA6                            i1l2781 0CC1                            i1l2773 0CA9  
                          i1l2791 0CD0                            i1l2783 0CC5                            i1l2775 0CAB  
                          i1l2767 0C9E                            u220_20 0CD8                            u220_21 0CD7  
                          i1l2793 0CD4                            i1l2777 0CAF                            i1l2785 0CC6  
                          i1l2769 0CA2                            i1l2795 0CD8                            i1l2787 0CCA  
                          i1l2779 0CB3                            i1l2797 0CD9                            i1l2789 0CCB  
                          i1l2799 0CDD                            u221_20 0CE3                            u221_21 0CE2  
                          u215_20 0CA2                            u215_21 0CA1                            u216_20 0CA6  
                          u216_21 0CA5                            u129_20 0BB3                            u217_20 0CAF  
                          _INTCON 000B                            u129_21 0BB2                            u217_21 0CAE  
                          u218_20 0CB3                            u218_21 0CB2                            u219_20 0CCA  
                          u219_21 0CC9                            u190_20 09E7                            u190_21 09E6  
                          u191_20 0DDC                            u191_21 0DDB                            u192_20 0DED  
                          u192_21 0DEC                            u193_20 0E16                            u193_21 0E15  
                          _TMR0IF 005A                            _TMR1IF 0060                         ??_GetTime 0026  
                    ?_UART_TxChar 0070                     main@randomCar 01E6                 __end_of_UART_Init 0B1C  
               __end_of_UART_Read 09EA                            ___bmul 07E9                            ___lmul 0B62  
                       ??___aldiv 002C                   GetTime@shortInt 0029                            ___wmul 0A55  
                       ??___awdiv 0043                         ??___awmod 003C                  __end_of_init_ADC 0A08  
                          _cycled 0062                  ___awdiv@quotient 0046                   ___awmod@divisor 0038  
                 ___awmod@counter 003D                  __end_of_sendByte 0AAD                         ?_ADC_Read 0024  
                          saved_w 007E           __end_of__initialization 0043                 __end_of_GetDigits 05AD  
                   ??_UpdateTimes 0024         __size_of_SetDefaultTimers 00C7               ___bmul@multiplicand 0024  
                  __pcstackCOMMON 0070                 __end_of_BuildByte 0675                      __pidataBANK1 0A1B  
                _conteggioVeicoli 0DB2                 __end_of_Conteggio 0BF6                     ?_luciSemaforo 0024  
                      ??_ADC_Read 0026            SetDefaultTimers@giallo 0028         SetReceivedTimes@_semafori 002C  
                     ?_SetDisplay 0024                     GetDigits@Time 0049              _dataFromGatewayIndex 005F  
            _timerReadFromGateway 005E                        __pbssBANK0 005B                        __pbssBANK1 00A0  
                      __pbssBANK2 0110                        __pbssBANK3 0190                        __pmaintext 0047  
                         ?___bmul 0024  ShowDigitsOnDisplay@display_index 0041                           ?___lmul 0024  
                         ?___wmul 0024                    ??_luciSemaforo 0025               __end_of_UpdateTimes 0F63  
                   sendByte@byte0 003D                     sendByte@byte1 0038                        __pintentry 0004  
                  ___lmul@product 002D                  _SetReceivedTimes 0D51       __end_of_ShowDigitsOnDisplay 07E9  
                      __stringtab 0800                         ?_init_ADC 0070                           _GetTime 0B1C  
                 BuildByte@valore 0025                   BuildByte@txByte 0029           GetTime@_dataFromGateway 0024  
                       ?_sendByte 0038                    main@randomMoto 01E5                        _n_semafori 0811  
            __size_of_UART_TxChar 000B                           ___aldiv 0F63                   __size_of___bmul 0017  
                         ___awdiv 0E17                   __size_of___lmul 0048                           ___awmod 0CF6  
             __size_of_SetDisplay 0055                   __size_of___wmul 0027                 conteggioVeicoli@i 007D  
                         _digits0 00CB                           _digits1 00C8                           _digits2 00C5  
                         _digits3 00C2                           _digits4 00BF                           _digits5 00BC  
                         _digits6 00B9                           _digits7 00B6                           __ptext1 0A7C  
                         __ptext2 09EA                           __ptext3 05AD                           __ptext4 0E80  
                         __ptext5 0B62                           __ptext6 0AAD                           __ptext7 0A55  
                         __ptext8 0BF6                           __ptext9 09F5                           _display 0806  
                    __size_of_ISR 0058                      __size_of_map 0035                  ___awmod@dividend 003A  
                ___aldiv@dividend 0028              BuildByte@sommaColumn 002F                           _umidita 005C  
                         clrloop0 09DA                  GetDigits@_digits 0050              end_of_initialization 0043  
                      ??_init_ADC 0024                    main@lux_select 01EC                       _UpdateTimes 0EF1  
                      ??_sendByte 003A                  _SetDefaultTimers 0675                         _RCSTAbits 0018  
                ___aldiv@quotient 002F                        _motorcycle 00B2                         _UART_Init 0AE2  
                       _UART_Read 09E1             SetReceivedTimes@index 0034                         _PORTAbits 0005  
                       _PORTBbits 0006                         _PORTCbits 0007                      SetDisplay@d1 0024  
                    SetDisplay@d2 0025                      SetDisplay@d3 0026                         _TRISCbits 0087  
               __size_of_ADC_Read 0026          __end_of_conteggioVeicoli 0E17              __end_of_luciSemaforo 0C49  
                      map@out_max 0050                        map@out_min 004E  SetReceivedTimes@_dataFromGateway 0033  
                       _TXSTAbits 0098                         _GetDigits 04E0                         _DigitsArr 00D2  
                  __end_of___bmul 0800                    __end_of___lmul 0BAA                    __end_of___wmul 0A7C  
                      ?_UART_Init 0033                        ?_UART_Read 0070                         _BuildByte 05AD  
                       _Conteggio 0BAA                 BuildByte@sommaRow 002E               start_initialization 0013  
                     __end_of_ISR 0CF6                      ??_SetDisplay 0028                       __end_of_map 0AE2  
        __end_of_SetReceivedTimes 0DB2                        ?_GetDigits 0048                          ??___bmul 0025  
                        ??___lmul 002C                    ADC_Read@canale 0027                          ??___wmul 0028  
                      init_fetch0 0A08                       __pdataBANK1 00CE                __end_of_SetDisplay 0C9E  
                  GetDigits@index 0048                        ?_BuildByte 0024                        ?_Conteggio 0070  
                       ___latbits 0002                     __pcstackBANK0 0020                     __pcstackBANK3 01E5  
                        ?_GetTime 0024             SetDefaultTimers@verde 0026             SetDefaultTimers@rosso 0024  
               __size_of_init_ADC 0013                 __size_of_sendByte 0031                          ?___aldiv 0024  
                        ?___awdiv 003F                          ?___awmod 0038                       ??_UART_Init 0035  
                     ??_UART_Read 0070                    BuildByte@i_341 0036                         __pstrings 0800  
                  BuildByte@y_342 0032                    sendByte@valore 0039                    sendByte@txByte 003E  
                  BuildByte@byte0 0028                    BuildByte@byte1 0024          __end_of_SetDefaultTimers 073C  
                        _ADC_Read 0A2F             __size_of_luciSemaforo 0053                         _count_lux 0060  
                   UART_TxChar@ch 0024      __size_of_ShowDigitsOnDisplay 00AD                   ___aldiv@divisor 0024  
               SetReceivedTimes@i 0035                 interrupt_function 0004                   ___aldiv@counter 002D  
                  ___wmul@product 0028        SetReceivedTimes@semaforoId 0031                      ?_UpdateTimes 0070  
                       clear_ram0 09D9                          _PIE1bits 008C                     ??_UART_TxChar 0024  
                     ??_GetDigits 004B                          _GO_nDONE 00FA                      _luciSemaforo 0BF6  
                       _pressione 005B                 UART_Init@baudrate 0033                       ??_BuildByte 0026  
                       map@in_max 004C                         map@in_min 004A                       __stringbase 0805  
                       main@i_530 01E9                         main@i_532 01ED                         main@i_527 01EA  
                       main@i_528 01E8                       ??_Conteggio 0076                 ___wmul@multiplier 0024  
                    GetTime@index 0028                 ___lmul@multiplier 0024                      _RoadsSensors 00A0  
               ?_conteggioVeicoli 0070                      _secondPassed 0063                ??_conteggioVeicoli 0079  
                __size_of_GetTime 0046                          _Semafori 00DA                   main@randomTruck 01E7  
                     _readGateway 0064                  __size_of___aldiv 009D               __end_of_UART_TxChar 09F5  
                __size_of___awdiv 0069                  __size_of___awmod 005B                __end_of__stringtab 0806  
                       sendByte@i 003F                          __ptext10 0EF1                          __ptext11 0AE2  
                        __ptext20 0CF6                          __ptext12 0F63                          __ptext21 0E17  
                        __ptext13 073C                          __ptext22 0A2F                          __ptext14 0C49  
                        __ptext23 0C9E                          __ptext15 0D51                          __ptext24 0DB2  
                        __ptext16 0B1C                          __ptext25 0BAA                          __ptext17 0675  
                        __ptext26 09E1                          __ptext18 04E0                          __ptext19 07E9  
              __end_of_n_semafori 0812           SetDisplay@display_index 002A                          _init_ADC 09F5  
               ?_SetReceivedTimes 002C                     __size_of_main 0499                   _dataFromGateway 0190  
                   __size_of_rand 0071                          _sendByte 0A7C                ??_SetReceivedTimes 002D  
                      _INTCONbits 000B                          init_ram0 0A0C              Conteggio@_motorcycle 0072  
                        intlevel1 0000                   _readGatewayDone 0065                         stringcode 0800  
                     _UART_TxChar 09EA           SetReceivedTimes@colorId 0032              __size_of_UpdateTimes 0072  
                      GetTime@tmp 002A               _ShowDigitsOnDisplay 073C                        _OPTION_REG 0081  
                 SetDisplay@value 0027                          stringdir 0800                          stringtab 0800  
                    UpdateTimes@i 002F                      UpdateTimes@l 0030                 ?_SetDefaultTimers 0024  
                    ___aldiv@sign 002E                ??_SetDefaultTimers 002B              ?_ShowDigitsOnDisplay 0070  
                      BuildByte@i 0034                        BuildByte@y 0030         SetDefaultTimers@_semafori 002A  
                 Conteggio@_count 0070                     Conteggio@_car 0073                   Conteggio@_truck 0074  
                  Conteggio@index 0075  
