

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Jul 13 22:33:19 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  0A73                     __pidataBANK0:	
   202                           
   203                           ;initializer for _randx
   204  0A73  3401               	retlw	1
   205  0A74  3400               	retlw	0
   206  0A75  3400               	retlw	0
   207  0A76  3400               	retlw	0
   208                           
   209                           ;initializer for _DigitsArr
   210  0A77  34DA               	retlw	low (_digits0| 0)
   211  0A78  34D7               	retlw	low (_digits1| 0)
   212                           
   213                           ;initializer for _Semafori
   214  0A79  34C1               	retlw	low (_s0| 0)
   215  0A7A  34B3               	retlw	low (_s1| 0)
   216                           
   217                           	psect	strings
   218  0800                     __pstrings:	
   219  0800                     stringtab:	
   220  0800                     __stringtab:	
   221  0800                     stringcode:	
   222                           ;	String table - string pointers are 1 byte each
   223                           
   224  0800                     stringdir:	
   225  0800  3008               	movlw	high stringdir
   226  0801  008A               	movwf	10
   227  0802  0804               	movf	4,w
   228  0803  0A84               	incf	4,f
   229  0804  0782               	addwf	2,f
   230  0805                     __stringbase:	
   231  0805  3400               	retlw	0
   232  0806                     __end_of__stringtab:	
   233  0806                     _display:	
   234  0806  343F               	retlw	63
   235  0807  3406               	retlw	6
   236  0808  345B               	retlw	91
   237  0809  344F               	retlw	79
   238  080A  3466               	retlw	102
   239  080B  346D               	retlw	109
   240  080C  347D               	retlw	125
   241  080D  3407               	retlw	7
   242  080E  347F               	retlw	127
   243  080F  346F               	retlw	111
   244  0810  3400               	retlw	0
   245  0811                     __end_of_display:	
   246  0811                     _n_semafori:	
   247  0811  3402               	retlw	2
   248  0812                     __end_of_n_semafori:	
   249  0008                     _PORTD	set	8
   250  0005                     _PORTAbits	set	5
   251  001A                     _RCREG	set	26
   252  0019                     _TXREG	set	25
   253  000B                     _INTCONbits	set	11
   254  0018                     _RCSTAbits	set	24
   255  001E                     _ADRESH	set	30
   256  001F                     _ADCON0	set	31
   257  0006                     _PORTBbits	set	6
   258  0007                     _PORTCbits	set	7
   259  000E                     _TMR1L	set	14
   260  000F                     _TMR1H	set	15
   261  0010                     _T1CON	set	16
   262  0001                     _TMR0	set	1
   263  000B                     _INTCON	set	11
   264  0060                     _TMR1IF	set	96
   265  005A                     _TMR0IF	set	90
   266  0065                     _RCIF	set	101
   267  0064                     _TXIF	set	100
   268  00FA                     _GO_nDONE	set	250
   269  008C                     _PIE1bits	set	140
   270  0099                     _SPBRG	set	153
   271  0098                     _TXSTAbits	set	152
   272  0087                     _TRISCbits	set	135
   273  009E                     _ADRESL	set	158
   274  009F                     _ADCON1	set	159
   275  0085                     _TRISA	set	133
   276  0081                     _OPTION_REG	set	129
   277  0089                     _TRISE	set	137
   278  0088                     _TRISD	set	136
   279  0087                     _TRISC	set	135
   280  0086                     _TRISB	set	134
   281                           
   282                           ; #config settings
   283  0000                     
   284                           	psect	cinit
   285  0013                     start_initialization:	
   286  0013                     __initialization:	
   287                           
   288                           ; Initialize objects allocated to BANK0
   289  0013  1383               	bcf	3,7	;select IRP bank0
   290  0014  3066               	movlw	low (__pdataBANK0+8)
   291  0015  00FD               	movwf	btemp+-1
   292  0016  300A               	movlw	high __pidataBANK0
   293  0017  00FE               	movwf	btemp
   294  0018  3073               	movlw	low __pidataBANK0
   295  0019  00FF               	movwf	btemp+1
   296  001A  305E               	movlw	low __pdataBANK0
   297  001B  0084               	movwf	4
   298  001C  120A  158A  22A6  120A  118A  	fcall	init_ram0
   299                           
   300                           ; Clear objects allocated to BANK1
   301  0021  30A0               	movlw	low __pbssBANK1
   302  0022  0084               	movwf	4
   303  0023  30DD               	movlw	low (__pbssBANK1+61)
   304  0024  120A  158A  226B  120A  118A  	fcall	clear_ram0
   305                           
   306                           ; Clear objects allocated to BANK0
   307  0029  3049               	movlw	low __pbssBANK0
   308  002A  0084               	movwf	4
   309  002B  305E               	movlw	low (__pbssBANK0+21)
   310  002C  120A  158A  226B  120A  118A  	fcall	clear_ram0
   311  0031                     end_of_initialization:	
   312                           ;End of C runtime variable initialization code
   313                           
   314  0031                     __end_of__initialization:	
   315  0031  0183               	clrf	3
   316  0032  120A  118A  2835   	ljmp	_main	;jump to C main() function
   317                           
   318                           	psect	bssBANK0
   319  0049                     __pbssBANK0:	
   320  0049                     _time:	
   321  0049                     	ds	4
   322  004D                     _count:	
   323  004D                     	ds	2
   324  004F                     _pressione:	
   325  004F                     	ds	1
   326  0050                     _umidita:	
   327  0050                     	ds	1
   328  0051                     _temp:	
   329  0051                     	ds	1
   330  0052                     _timerReadFromGateway:	
   331  0052                     	ds	1
   332  0053                     _dataFromGatewayIndex:	
   333  0053                     	ds	1
   334  0054                     _count_lux:	
   335  0054                     	ds	1
   336  0055                     _disp:	
   337  0055                     	ds	1
   338  0056                     _cycled:	
   339  0056                     	ds	1
   340  0057                     _secondPassed:	
   341  0057                     	ds	1
   342  0058                     _readGateway:	
   343  0058                     	ds	1
   344  0059                     _readGatewayDone:	
   345  0059                     	ds	1
   346  005A                     _motorcycle:	
   347  005A                     	ds	4
   348                           
   349                           	psect	dataBANK0
   350  005E                     __pdataBANK0:	
   351  005E                     _randx:	
   352  005E                     	ds	4
   353  0062                     _DigitsArr:	
   354  0062                     	ds	2
   355  0064                     _Semafori:	
   356  0064                     	ds	2
   357                           
   358                           	psect	bssBANK1
   359  00A0                     __pbssBANK1:	
   360  00A0                     _RoadsSensors:	
   361  00A0                     	ds	4
   362  00A4                     _dataFromGateway:	
   363  00A4                     	ds	15
   364  00B3                     _s1:	
   365  00B3                     	ds	14
   366  00C1                     _s0:	
   367  00C1                     	ds	14
   368  00CF                     _truck:	
   369  00CF                     	ds	4
   370  00D3                     _car:	
   371  00D3                     	ds	4
   372  00D7                     _digits1:	
   373  00D7                     	ds	3
   374  00DA                     _digits0:	
   375  00DA                     	ds	3
   376                           
   377                           	psect	inittext
   378  0AA2                     init_fetch0:	
   379                           ;	Called with low address in FSR and high address in W
   380                           
   381  0AA2  087E               	movf	btemp,w
   382  0AA3  008A               	movwf	10
   383  0AA4  087F               	movf	btemp+1,w
   384  0AA5  0082               	movwf	2
   385  0AA6                     init_ram0:	
   386                           ;Called with:
   387                           ;	high address of idata address in btemp 
   388                           ;	low address of idata address in btemp+1 
   389                           ;	low address of data in FSR
   390                           ;	high address + 1 of data in btemp-1
   391                           
   392  0AA6  120A  158A  22A2  120A  158A  	fcall	init_fetch0
   393  0AAB  0080               	movwf	0
   394  0AAC  0A84               	incf	4,f
   395  0AAD  0804               	movf	4,w
   396  0AAE  067D               	xorwf	btemp+-1,w
   397  0AAF  1903               	btfsc	3,2
   398  0AB0  3400               	retlw	0
   399  0AB1  0AFF               	incf	btemp+1,f
   400  0AB2  1903               	btfsc	3,2
   401  0AB3  0AFE               	incf	btemp,f
   402  0AB4  2AA6               	goto	init_ram0
   403                           
   404                           	psect	clrtext
   405  0A6B                     clear_ram0:	
   406                           ;	Called with FSR containing the base address, and
   407                           ;	W with the last address+1
   408                           
   409  0A6B  0064               	clrwdt	;clear the watchdog before getting into this loop
   410  0A6C                     clrloop0:	
   411  0A6C  0180               	clrf	0	;clear RAM location pointed to by FSR
   412  0A6D  0A84               	incf	4,f	;increment pointer
   413  0A6E  0604               	xorwf	4,w	;XOR with final address
   414  0A6F  1903               	btfsc	3,2	;have we reached the end yet?
   415  0A70  3400               	retlw	0	;all done for this memory range, return
   416  0A71  0604               	xorwf	4,w	;XOR again to restore value
   417  0A72  2A6C               	goto	clrloop0	;do the next byte
   418                           
   419                           	psect	cstackBANK1
   420  00DD                     __pcstackBANK1:	
   421  00DD                     main@randomMoto:	
   422                           
   423                           ; 1 bytes @ 0x0
   424  00DD                     	ds	1
   425  00DE                     main@randomCar:	
   426                           
   427                           ; 1 bytes @ 0x1
   428  00DE                     	ds	1
   429  00DF                     main@randomTruck:	
   430                           
   431                           ; 1 bytes @ 0x2
   432  00DF                     	ds	1
   433  00E0                     main@i_481:	
   434                           
   435                           ; 1 bytes @ 0x3
   436  00E0                     	ds	1
   437  00E1                     main@i_483:	
   438                           
   439                           ; 1 bytes @ 0x4
   440  00E1                     	ds	1
   441  00E2                     main@i_480:	
   442                           
   443                           ; 2 bytes @ 0x5
   444  00E2                     	ds	2
   445  00E4                     main@lux_select:	
   446                           
   447                           ; 1 bytes @ 0x7
   448  00E4                     	ds	1
   449  00E5                     main@i_485:	
   450                           
   451                           ; 1 bytes @ 0x8
   452  00E5                     	ds	1
   453  00E6                     main@i:	
   454                           
   455                           ; 1 bytes @ 0x9
   456  00E6                     	ds	1
   457                           
   458                           	psect	cstackCOMMON
   459  0070                     __pcstackCOMMON:	
   460  0070                     ?_init_ADC:	
   461  0070                     ?_ShowDigitsOnDisplay:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?_UpdateTimes:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_Conteggio:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_main:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_UART_TxChar:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_UART_Read:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ??_UART_Read:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_conteggioVeicoli:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_ISR:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     Conteggio@_count:	
   489                           ; 1 bytes @ 0x0
   490                           
   491                           
   492                           ; 2 bytes @ 0x0
   493  0070                     	ds	2
   494  0072                     Conteggio@_motorcycle:	
   495                           
   496                           ; 1 bytes @ 0x2
   497  0072                     	ds	1
   498  0073                     Conteggio@_car:	
   499                           
   500                           ; 1 bytes @ 0x3
   501  0073                     	ds	1
   502  0074                     Conteggio@_truck:	
   503                           
   504                           ; 1 bytes @ 0x4
   505  0074                     	ds	1
   506  0075                     Conteggio@index:	
   507                           
   508                           ; 1 bytes @ 0x5
   509  0075                     	ds	1
   510  0076                     ??_Conteggio:	
   511                           
   512                           ; 1 bytes @ 0x6
   513  0076                     	ds	3
   514  0079                     ??_conteggioVeicoli:	
   515                           
   516                           ; 1 bytes @ 0x9
   517  0079                     	ds	4
   518  007D                     conteggioVeicoli@i:	
   519                           
   520                           ; 1 bytes @ 0xD
   521  007D                     	ds	1
   522                           
   523                           	psect	cstackBANK0
   524  0020                     __pcstackBANK0:	
   525  0020                     ??_ISR:	
   526                           
   527                           ; 1 bytes @ 0x0
   528  0020                     	ds	4
   529  0024                     ??_init_ADC:	
   530  0024                     ?_luciSemaforo:	
   531                           ; 1 bytes @ 0x4
   532                           
   533  0024                     ?_BuildByte:	
   534                           ; 1 bytes @ 0x4
   535                           
   536  0024                     ??_UpdateTimes:	
   537                           ; 1 bytes @ 0x4
   538                           
   539  0024                     ?_SetDefaultTimers:	
   540                           ; 1 bytes @ 0x4
   541                           
   542  0024                     ??_UART_TxChar:	
   543                           ; 1 bytes @ 0x4
   544                           
   545  0024                     ?_SetDisplay:	
   546                           ; 1 bytes @ 0x4
   547                           
   548  0024                     ?___bmul:	
   549                           ; 1 bytes @ 0x4
   550                           
   551  0024                     ?_ADC_Read:	
   552                           ; 1 bytes @ 0x4
   553                           
   554  0024                     ?_GetTime:	
   555                           ; 2 bytes @ 0x4
   556                           
   557  0024                     ?___wmul:	
   558                           ; 2 bytes @ 0x4
   559                           
   560  0024                     ?___awmod:	
   561                           ; 2 bytes @ 0x4
   562                           
   563  0024                     ?___lmul:	
   564                           ; 2 bytes @ 0x4
   565                           
   566  0024                     ?___aldiv:	
   567                           ; 4 bytes @ 0x4
   568                           
   569  0024                     BuildByte@byte1:	
   570                           ; 4 bytes @ 0x4
   571                           
   572  0024                     GetTime@_dataFromGateway:	
   573                           ; 1 bytes @ 0x4
   574                           
   575  0024                     UART_TxChar@ch:	
   576                           ; 1 bytes @ 0x4
   577                           
   578  0024                     luciSemaforo@lux:	
   579                           ; 1 bytes @ 0x4
   580                           
   581  0024                     SetDisplay@d1:	
   582                           ; 1 bytes @ 0x4
   583                           
   584  0024                     ___bmul@multiplicand:	
   585                           ; 1 bytes @ 0x4
   586                           
   587  0024                     SetDefaultTimers@rosso:	
   588                           ; 1 bytes @ 0x4
   589                           
   590  0024                     ___wmul@multiplier:	
   591                           ; 2 bytes @ 0x4
   592                           
   593  0024                     ___awmod@divisor:	
   594                           ; 2 bytes @ 0x4
   595                           
   596  0024                     ___lmul@multiplier:	
   597                           ; 2 bytes @ 0x4
   598                           
   599  0024                     ___aldiv@divisor:	
   600                           ; 4 bytes @ 0x4
   601                           
   602                           
   603                           ; 4 bytes @ 0x4
   604  0024                     	ds	1
   605  0025                     ??_luciSemaforo:	
   606  0025                     ??___bmul:	
   607                           ; 1 bytes @ 0x5
   608                           
   609  0025                     BuildByte@valore:	
   610                           ; 1 bytes @ 0x5
   611                           
   612  0025                     SetDisplay@d2:	
   613                           ; 1 bytes @ 0x5
   614                           
   615                           
   616                           ; 1 bytes @ 0x5
   617  0025                     	ds	1
   618  0026                     ??_ADC_Read:	
   619  0026                     ??_BuildByte:	
   620                           ; 1 bytes @ 0x6
   621                           
   622  0026                     ??_GetTime:	
   623                           ; 1 bytes @ 0x6
   624                           
   625  0026                     SetDisplay@d3:	
   626                           ; 1 bytes @ 0x6
   627                           
   628  0026                     ___bmul@product:	
   629                           ; 1 bytes @ 0x6
   630                           
   631  0026                     SetDefaultTimers@verde:	
   632                           ; 1 bytes @ 0x6
   633                           
   634  0026                     ___wmul@multiplicand:	
   635                           ; 2 bytes @ 0x6
   636                           
   637  0026                     ___awmod@dividend:	
   638                           ; 2 bytes @ 0x6
   639                           
   640                           
   641                           ; 2 bytes @ 0x6
   642  0026                     	ds	1
   643  0027                     ADC_Read@canale:	
   644  0027                     luciSemaforo@index:	
   645                           ; 1 bytes @ 0x7
   646                           
   647  0027                     SetDisplay@value:	
   648                           ; 1 bytes @ 0x7
   649                           
   650  0027                     ___bmul@multiplier:	
   651                           ; 1 bytes @ 0x7
   652                           
   653                           
   654                           ; 1 bytes @ 0x7
   655  0027                     	ds	1
   656  0028                     ??_SetDisplay:	
   657  0028                     ??___wmul:	
   658                           ; 1 bytes @ 0x8
   659                           
   660  0028                     ??___awmod:	
   661                           ; 1 bytes @ 0x8
   662                           
   663  0028                     BuildByte@byte0:	
   664                           ; 1 bytes @ 0x8
   665                           
   666  0028                     GetTime@index:	
   667                           ; 1 bytes @ 0x8
   668                           
   669  0028                     SetDefaultTimers@giallo:	
   670                           ; 1 bytes @ 0x8
   671                           
   672  0028                     ___wmul@product:	
   673                           ; 2 bytes @ 0x8
   674                           
   675  0028                     ___lmul@multiplicand:	
   676                           ; 2 bytes @ 0x8
   677                           
   678  0028                     ___aldiv@dividend:	
   679                           ; 4 bytes @ 0x8
   680                           
   681                           
   682                           ; 4 bytes @ 0x8
   683  0028                     	ds	1
   684  0029                     GetTime@shortInt:	
   685  0029                     ___awmod@counter:	
   686                           ; 1 bytes @ 0x9
   687                           
   688  0029                     BuildByte@txByte:	
   689                           ; 1 bytes @ 0x9
   690                           
   691                           
   692                           ; 5 bytes @ 0x9
   693  0029                     	ds	1
   694  002A                     SetDefaultTimers@_semafori:	
   695  002A                     SetDisplay@display_index:	
   696                           ; 1 bytes @ 0xA
   697                           
   698  002A                     ___awmod@sign:	
   699                           ; 1 bytes @ 0xA
   700                           
   701  002A                     GetTime@tmp:	
   702                           ; 1 bytes @ 0xA
   703                           
   704                           
   705                           ; 2 bytes @ 0xA
   706  002A                     	ds	1
   707  002B                     ??_ShowDigitsOnDisplay:	
   708  002B                     ??_SetDefaultTimers:	
   709                           ; 1 bytes @ 0xB
   710                           
   711  002B                     ?___awdiv:	
   712                           ; 1 bytes @ 0xB
   713                           
   714  002B                     ___awdiv@divisor:	
   715                           ; 2 bytes @ 0xB
   716                           
   717                           
   718                           ; 2 bytes @ 0xB
   719  002B                     	ds	1
   720  002C                     ?_SetReceivedTimes:	
   721  002C                     ??___lmul:	
   722                           ; 1 bytes @ 0xC
   723                           
   724  002C                     ??___aldiv:	
   725                           ; 1 bytes @ 0xC
   726                           
   727  002C                     SetReceivedTimes@_semafori:	
   728                           ; 1 bytes @ 0xC
   729                           
   730                           
   731                           ; 1 bytes @ 0xC
   732  002C                     	ds	1
   733  002D                     ??_SetReceivedTimes:	
   734  002D                     ShowDigitsOnDisplay@display_index:	
   735                           ; 1 bytes @ 0xD
   736                           
   737  002D                     ___aldiv@counter:	
   738                           ; 1 bytes @ 0xD
   739                           
   740  002D                     ___awdiv@dividend:	
   741                           ; 1 bytes @ 0xD
   742                           
   743  002D                     ___lmul@product:	
   744                           ; 2 bytes @ 0xD
   745                           
   746                           
   747                           ; 4 bytes @ 0xD
   748  002D                     	ds	1
   749  002E                     BuildByte@sommaRow:	
   750  002E                     UpdateTimes@_semafori:	
   751                           ; 1 bytes @ 0xE
   752                           
   753  002E                     SetDefaultTimers@l:	
   754                           ; 1 bytes @ 0xE
   755                           
   756  002E                     ___aldiv@sign:	
   757                           ; 1 bytes @ 0xE
   758                           
   759                           
   760                           ; 1 bytes @ 0xE
   761  002E                     	ds	1
   762  002F                     ??___awdiv:	
   763  002F                     BuildByte@sommaColumn:	
   764                           ; 1 bytes @ 0xF
   765                           
   766  002F                     UpdateTimes@i:	
   767                           ; 1 bytes @ 0xF
   768                           
   769  002F                     SetDefaultTimers@i:	
   770                           ; 1 bytes @ 0xF
   771                           
   772  002F                     ___aldiv@quotient:	
   773                           ; 1 bytes @ 0xF
   774                           
   775                           
   776                           ; 4 bytes @ 0xF
   777  002F                     	ds	1
   778  0030                     UpdateTimes@l:	
   779  0030                     ___awdiv@counter:	
   780                           ; 1 bytes @ 0x10
   781                           
   782  0030                     BuildByte@y:	
   783                           ; 1 bytes @ 0x10
   784                           
   785                           
   786                           ; 2 bytes @ 0x10
   787  0030                     	ds	1
   788  0031                     ?_rand:	
   789  0031                     SetReceivedTimes@semaforoId:	
   790                           ; 2 bytes @ 0x11
   791                           
   792  0031                     ___awdiv@sign:	
   793                           ; 1 bytes @ 0x11
   794                           
   795                           
   796                           ; 1 bytes @ 0x11
   797  0031                     	ds	1
   798  0032                     SetReceivedTimes@colorId:	
   799  0032                     BuildByte@y_342:	
   800                           ; 1 bytes @ 0x12
   801                           
   802  0032                     ___awdiv@quotient:	
   803                           ; 2 bytes @ 0x12
   804                           
   805                           
   806                           ; 2 bytes @ 0x12
   807  0032                     	ds	1
   808  0033                     ?_UART_Init:	
   809  0033                     ??_rand:	
   810                           ; 1 bytes @ 0x13
   811                           
   812  0033                     SetReceivedTimes@_dataFromGateway:	
   813                           ; 1 bytes @ 0x13
   814                           
   815  0033                     UART_Init@baudrate:	
   816                           ; 1 bytes @ 0x13
   817                           
   818                           
   819                           ; 2 bytes @ 0x13
   820  0033                     	ds	1
   821  0034                     ?_GetDigits:	
   822  0034                     ?_map:	
   823                           ; 1 bytes @ 0x14
   824                           
   825  0034                     SetReceivedTimes@index:	
   826                           ; 2 bytes @ 0x14
   827                           
   828  0034                     GetDigits@index:	
   829                           ; 1 bytes @ 0x14
   830                           
   831  0034                     BuildByte@i:	
   832                           ; 1 bytes @ 0x14
   833                           
   834  0034                     map@x:	
   835                           ; 2 bytes @ 0x14
   836                           
   837                           
   838                           ; 2 bytes @ 0x14
   839  0034                     	ds	1
   840  0035                     ??_UART_Init:	
   841  0035                     SetReceivedTimes@i:	
   842                           ; 1 bytes @ 0x15
   843                           
   844  0035                     GetDigits@Time:	
   845                           ; 1 bytes @ 0x15
   846                           
   847                           
   848                           ; 2 bytes @ 0x15
   849  0035                     	ds	1
   850  0036                     BuildByte@i_341:	
   851  0036                     map@in_min:	
   852                           ; 2 bytes @ 0x16
   853                           
   854                           
   855                           ; 2 bytes @ 0x16
   856  0036                     	ds	1
   857  0037                     ??_GetDigits:	
   858                           
   859                           ; 1 bytes @ 0x17
   860  0037                     	ds	1
   861  0038                     ?_sendByte:	
   862  0038                     sendByte@byte1:	
   863                           ; 1 bytes @ 0x18
   864                           
   865  0038                     map@in_max:	
   866                           ; 1 bytes @ 0x18
   867                           
   868                           
   869                           ; 2 bytes @ 0x18
   870  0038                     	ds	1
   871  0039                     sendByte@valore:	
   872                           
   873                           ; 1 bytes @ 0x19
   874  0039                     	ds	1
   875  003A                     ??_sendByte:	
   876  003A                     map@out_min:	
   877                           ; 1 bytes @ 0x1A
   878                           
   879  003A                     _GetDigits$1203:	
   880                           ; 2 bytes @ 0x1A
   881                           
   882                           
   883                           ; 2 bytes @ 0x1A
   884  003A                     	ds	2
   885  003C                     GetDigits@_digits:	
   886  003C                     map@out_max:	
   887                           ; 1 bytes @ 0x1C
   888                           
   889                           
   890                           ; 2 bytes @ 0x1C
   891  003C                     	ds	1
   892  003D                     sendByte@byte0:	
   893                           
   894                           ; 1 bytes @ 0x1D
   895  003D                     	ds	1
   896  003E                     ??_map:	
   897  003E                     sendByte@txByte:	
   898                           ; 1 bytes @ 0x1E
   899                           
   900                           
   901                           ; 1 bytes @ 0x1E
   902  003E                     	ds	1
   903  003F                     sendByte@i:	
   904                           
   905                           ; 1 bytes @ 0x1F
   906  003F                     	ds	1
   907  0040                     ??_main:	
   908                           
   909                           ; 1 bytes @ 0x20
   910  0040                     	ds	9
   911                           
   912                           	psect	maintext
   913  0035                     __pmaintext:	
   914 ;;
   915 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
   916 ;;
   917 ;; *************** function _main *****************
   918 ;; Defined at:
   919 ;;		line 136 in file "main.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;		None
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  lux_select      1    7[BANK1 ] unsigned char 
   924 ;;  randomTruck     1    2[BANK1 ] unsigned char 
   925 ;;  randomCar       1    1[BANK1 ] unsigned char 
   926 ;;  randomMoto      1    0[BANK1 ] unsigned char 
   927 ;;  i               1    4[BANK1 ] unsigned char 
   928 ;;  i               1    3[BANK1 ] unsigned char 
   929 ;;  i               2    5[BANK1 ] int 
   930 ;;  i               1    9[BANK1 ] unsigned char 
   931 ;;  i               1    8[BANK1 ] unsigned char 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : B00/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   941 ;;      Params:         0       0       0       0       0
   942 ;;      Locals:         0       0      10       0       0
   943 ;;      Temps:          0       9       0       0       0
   944 ;;      Totals:         0       9      10       0       0
   945 ;;Total ram usage:       19 bytes
   946 ;; Hardware stack levels required when called:    5
   947 ;; This function calls:
   948 ;;		_ADC_Read
   949 ;;		_GetDigits
   950 ;;		_SetDefaultTimers
   951 ;;		_SetReceivedTimes
   952 ;;		_ShowDigitsOnDisplay
   953 ;;		_UART_Init
   954 ;;		_UpdateTimes
   955 ;;		_init_ADC
   956 ;;		_luciSemaforo
   957 ;;		_map
   958 ;;		_rand
   959 ;;		_sendByte
   960 ;; This function is called by:
   961 ;;		Startup code after reset
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           
   966                           ;psect for function _main
   967  0035                     _main:	
   968  0035                     l3527:	
   969                           ;incstack = 0
   970                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   971                           
   972                           
   973                           ;main.c: 138:     TRISB = 0x38;
   974  0035  3038               	movlw	56
   975  0036  1683               	bsf	3,5	;RP0=1, select bank1
   976  0037  1303               	bcf	3,6	;RP1=0, select bank1
   977  0038  0086               	movwf	6	;volatile
   978                           
   979                           ;main.c: 139:     TRISC = 0x80;
   980  0039  3080               	movlw	128
   981  003A  0087               	movwf	7	;volatile
   982  003B                     l3529:	
   983                           
   984                           ;main.c: 140:     TRISD = 0x00;
   985  003B  0188               	clrf	8	;volatile
   986  003C                     l3531:	
   987                           
   988                           ;main.c: 141:     TRISE = 0x01;
   989  003C  3001               	movlw	1
   990  003D  0089               	movwf	9	;volatile
   991  003E                     l3533:	
   992                           
   993                           ;main.c: 142:     INTCON = 0xE0;
   994  003E  30E0               	movlw	224
   995  003F  008B               	movwf	11	;volatile
   996  0040                     l3535:	
   997                           
   998                           ;main.c: 143:     OPTION_REG = 0x04;
   999  0040  3004               	movlw	4
  1000  0041  0081               	movwf	1	;volatile
  1001  0042                     l3537:	
  1002                           
  1003                           ;main.c: 144:     TMR0 = 6;
  1004  0042  3006               	movlw	6
  1005  0043  1283               	bcf	3,5	;RP0=0, select bank0
  1006  0044  1303               	bcf	3,6	;RP1=0, select bank0
  1007  0045  0081               	movwf	1	;volatile
  1008  0046                     l3539:	
  1009                           
  1010                           ;main.c: 145:     T1CON = 0x31;
  1011  0046  3031               	movlw	49
  1012  0047  0090               	movwf	16	;volatile
  1013  0048                     l3541:	
  1014                           
  1015                           ;main.c: 147:     TMR1H = 60;
  1016  0048  303C               	movlw	60
  1017  0049  008F               	movwf	15	;volatile
  1018  004A                     l3543:	
  1019                           
  1020                           ;main.c: 148:     TMR1L = 176;
  1021  004A  30B0               	movlw	176
  1022  004B  008E               	movwf	14	;volatile
  1023  004C                     l3545:	
  1024                           
  1025                           ;main.c: 151:     init_ADC();
  1026  004C  120A  158A  228F  120A  118A  	fcall	_init_ADC
  1027  0051                     l3547:	
  1028                           
  1029                           ;main.c: 152:     UART_Init(9600);
  1030  0051  3080               	movlw	128
  1031  0052  1283               	bcf	3,5	;RP0=0, select bank0
  1032  0053  1303               	bcf	3,6	;RP1=0, select bank0
  1033  0054  00B3               	movwf	UART_Init@baudrate
  1034  0055  3025               	movlw	37
  1035  0056  00B4               	movwf	UART_Init@baudrate+1
  1036  0057  120A  158A  237F  120A  118A  	fcall	_UART_Init
  1037  005C                     l3549:	
  1038                           
  1039                           ;main.c: 153:     SetDefaultTimers(6, 4, 2, Semafori);
  1040  005C  3006               	movlw	6
  1041  005D  1283               	bcf	3,5	;RP0=0, select bank0
  1042  005E  1303               	bcf	3,6	;RP1=0, select bank0
  1043  005F  00A4               	movwf	SetDefaultTimers@rosso
  1044  0060  3000               	movlw	0
  1045  0061  00A5               	movwf	SetDefaultTimers@rosso+1
  1046  0062  3004               	movlw	4
  1047  0063  00A6               	movwf	SetDefaultTimers@verde
  1048  0064  3000               	movlw	0
  1049  0065  00A7               	movwf	SetDefaultTimers@verde+1
  1050  0066  3002               	movlw	2
  1051  0067  00A8               	movwf	SetDefaultTimers@giallo
  1052  0068  3000               	movlw	0
  1053  0069  00A9               	movwf	SetDefaultTimers@giallo+1
  1054  006A  3064               	movlw	(low (_Semafori| 0))& (0+255)
  1055  006B  00C0               	movwf	??_main
  1056  006C  0840               	movf	??_main,w
  1057  006D  00AA               	movwf	SetDefaultTimers@_semafori
  1058  006E  120A  118A  262F  120A  118A  	fcall	_SetDefaultTimers
  1059  0073                     l3551:	
  1060                           
  1061                           ;main.c: 155:     PORTCbits.RC0 = 0;
  1062  0073  1283               	bcf	3,5	;RP0=0, select bank0
  1063  0074  1303               	bcf	3,6	;RP1=0, select bank0
  1064  0075  1007               	bcf	7,0	;volatile
  1065  0076                     l3553:	
  1066                           
  1067                           ;main.c: 156:     PORTBbits.RB7 = 0;
  1068  0076  1386               	bcf	6,7	;volatile
  1069  0077                     l3555:	
  1070                           
  1071                           ;main.c: 157:     PORTCbits.RC2 = 0;
  1072  0077  1107               	bcf	7,2	;volatile
  1073  0078                     l3557:	
  1074                           
  1075                           ;main.c: 158:     PORTBbits.RB6 = 0;
  1076  0078  1306               	bcf	6,6	;volatile
  1077  0079                     l3559:	
  1078                           
  1079                           ;main.c: 159:     PORTCbits.RC1 = 0;
  1080  0079  1087               	bcf	7,1	;volatile
  1081  007A                     l3561:	
  1082                           
  1083                           ;main.c: 160:     PORTBbits.RB1 = 0;
  1084  007A  1086               	bcf	6,1	;volatile
  1085  007B                     l3563:	
  1086                           
  1087                           ;main.c: 163:     {;main.c: 165:         if (readGateway.Bit)
  1088  007B  1C58               	btfss	_readGateway,0
  1089  007C  287E               	goto	u3031
  1090  007D  287F               	goto	u3030
  1091  007E                     u3031:	
  1092  007E  2B56               	goto	l223
  1093  007F                     u3030:	
  1094  007F  2B41               	goto	l3657
  1095  0080                     l225:	
  1096                           ;main.c: 168:             {;main.c: 169:             case 0x08:
  1097                           
  1098                           
  1099                           ;main.c: 170:                 readGatewayDone.Bit = 1;
  1100  0080  1459               	bsf	_readGatewayDone,0
  1101                           
  1102                           ;main.c: 171:                 readGateway.Bit = 0;
  1103  0081  1058               	bcf	_readGateway,0
  1104  0082                     l3567:	
  1105                           
  1106                           ;main.c: 173:                 for (unsigned char i = 0; i < 4; i++)
  1107  0082  1683               	bsf	3,5	;RP0=1, select bank1
  1108  0083  1303               	bcf	3,6	;RP1=0, select bank1
  1109  0084  01E6               	clrf	main@i^(0+128)
  1110  0085                     l3573:	
  1111                           
  1112                           ;main.c: 174:                 {;main.c: 176:                     unsigned char randomMot
      +                          o = (char)rand();
  1113  0085  120A  158A  23FF  120A  118A  	fcall	_rand
  1114  008A  1283               	bcf	3,5	;RP0=0, select bank0
  1115  008B  1303               	bcf	3,6	;RP1=0, select bank0
  1116  008C  0831               	movf	?_rand,w
  1117  008D  00C0               	movwf	??_main
  1118  008E  0840               	movf	??_main,w
  1119  008F  1683               	bsf	3,5	;RP0=1, select bank1
  1120  0090  1303               	bcf	3,6	;RP1=0, select bank1
  1121  0091  00DD               	movwf	main@randomMoto^(0+128)
  1122                           
  1123                           ;main.c: 177:                     unsigned char randomCar = (char)rand();
  1124  0092  120A  158A  23FF  120A  118A  	fcall	_rand
  1125  0097  1283               	bcf	3,5	;RP0=0, select bank0
  1126  0098  1303               	bcf	3,6	;RP1=0, select bank0
  1127  0099  0831               	movf	?_rand,w
  1128  009A  00C0               	movwf	??_main
  1129  009B  0840               	movf	??_main,w
  1130  009C  1683               	bsf	3,5	;RP0=1, select bank1
  1131  009D  1303               	bcf	3,6	;RP1=0, select bank1
  1132  009E  00DE               	movwf	main@randomCar^(0+128)
  1133                           
  1134                           ;main.c: 178:                     unsigned char randomTruck = (char)rand();
  1135  009F  120A  158A  23FF  120A  118A  	fcall	_rand
  1136  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1137  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1138  00A6  0831               	movf	?_rand,w
  1139  00A7  00C0               	movwf	??_main
  1140  00A8  0840               	movf	??_main,w
  1141  00A9  1683               	bsf	3,5	;RP0=1, select bank1
  1142  00AA  1303               	bcf	3,6	;RP1=0, select bank1
  1143  00AB  00DF               	movwf	main@randomTruck^(0+128)
  1144  00AC                     l3575:	
  1145                           
  1146                           ;main.c: 179:                     if (randomMoto < 255)
  1147  00AC  0A5D               	incf	main@randomMoto^(0+128),w
  1148  00AD  1903               	btfsc	3,2
  1149  00AE  28B0               	goto	u3041
  1150  00AF  28B1               	goto	u3040
  1151  00B0                     u3041:	
  1152  00B0  28BF               	goto	l3579
  1153  00B1                     u3040:	
  1154  00B1                     l3577:	
  1155                           
  1156                           ;main.c: 180:                     {;main.c: 181:                         motorcycle[i] =
      +                           randomMoto;
  1157  00B1  085D               	movf	main@randomMoto^(0+128),w
  1158  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1159  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  1160  00B4  00C0               	movwf	??_main
  1161  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  1162  00B6  1303               	bcf	3,6	;RP1=0, select bank1
  1163  00B7  0866               	movf	main@i^(0+128),w
  1164  00B8  3E5A               	addlw	(low (_motorcycle| 0))& (0+255)
  1165  00B9  0084               	movwf	4
  1166  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1167  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1168  00BC  0840               	movf	??_main,w
  1169  00BD  1383               	bcf	3,7	;select IRP bank0
  1170  00BE  0080               	movwf	0
  1171  00BF                     l3579:	
  1172                           
  1173                           ;main.c: 183:                     if (randomCar < 255)
  1174  00BF  1683               	bsf	3,5	;RP0=1, select bank1
  1175  00C0  1303               	bcf	3,6	;RP1=0, select bank1
  1176  00C1  0A5E               	incf	main@randomCar^(0+128),w
  1177  00C2  1903               	btfsc	3,2
  1178  00C3  28C5               	goto	u3051
  1179  00C4  28C6               	goto	u3050
  1180  00C5                     u3051:	
  1181  00C5  28D4               	goto	l3583
  1182  00C6                     u3050:	
  1183  00C6                     l3581:	
  1184                           
  1185                           ;main.c: 184:                     {;main.c: 185:                         car[i] = random
      +                          Car;
  1186  00C6  085E               	movf	main@randomCar^(0+128),w
  1187  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1188  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1189  00C9  00C0               	movwf	??_main
  1190  00CA  1683               	bsf	3,5	;RP0=1, select bank1
  1191  00CB  1303               	bcf	3,6	;RP1=0, select bank1
  1192  00CC  0866               	movf	main@i^(0+128),w
  1193  00CD  3ED3               	addlw	(low (_car| 0))& (0+255)
  1194  00CE  0084               	movwf	4
  1195  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1196  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1197  00D1  0840               	movf	??_main,w
  1198  00D2  1383               	bcf	3,7	;select IRP bank1
  1199  00D3  0080               	movwf	0
  1200  00D4                     l3583:	
  1201                           
  1202                           ;main.c: 187:                     if (randomTruck < 255)
  1203  00D4  1683               	bsf	3,5	;RP0=1, select bank1
  1204  00D5  1303               	bcf	3,6	;RP1=0, select bank1
  1205  00D6  0A5F               	incf	main@randomTruck^(0+128),w
  1206  00D7  1903               	btfsc	3,2
  1207  00D8  28DA               	goto	u3061
  1208  00D9  28DB               	goto	u3060
  1209  00DA                     u3061:	
  1210  00DA  29FE               	goto	l3597
  1211  00DB                     u3060:	
  1212  00DB                     l3585:	
  1213                           
  1214                           ;main.c: 188:                     {;main.c: 189:                         truck[i] = rand
      +                          omTruck;
  1215  00DB  085F               	movf	main@randomTruck^(0+128),w
  1216  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1217  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1218  00DE  00C0               	movwf	??_main
  1219  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  1220  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  1221  00E1  0866               	movf	main@i^(0+128),w
  1222  00E2  3ECF               	addlw	(low (_truck| 0))& (0+255)
  1223  00E3  0084               	movwf	4
  1224  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  1225  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  1226  00E6  0840               	movf	??_main,w
  1227  00E7  1383               	bcf	3,7	;select IRP bank1
  1228  00E8  0080               	movwf	0
  1229  00E9  29FE               	goto	l3597
  1230  00EA                     l3587:	
  1231                           
  1232                           ;main.c: 196:                         sendByte(0x03, 0x01, motorcycle[i]);
  1233  00EA  01B8               	clrf	sendByte@byte1
  1234  00EB  0AB8               	incf	sendByte@byte1,f
  1235  00EC  1683               	bsf	3,5	;RP0=1, select bank1
  1236  00ED  1303               	bcf	3,6	;RP1=0, select bank1
  1237  00EE  0866               	movf	main@i^(0+128),w
  1238  00EF  3E5A               	addlw	(low (_motorcycle| 0))& (0+255)
  1239  00F0  0084               	movwf	4
  1240  00F1  1383               	bcf	3,7	;select IRP bank0
  1241  00F2  0800               	movf	0,w
  1242  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1243  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1244  00F5  00C0               	movwf	??_main
  1245  00F6  0840               	movf	??_main,w
  1246  00F7  00B9               	movwf	sendByte@valore
  1247  00F8  3003               	movlw	3
  1248  00F9  120A  158A  2319  120A  118A  	fcall	_sendByte
  1249                           
  1250                           ;main.c: 197:                         sendByte(0x03, 0x02, car[i]);
  1251  00FE  3002               	movlw	2
  1252  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1253  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1254  0101  00C0               	movwf	??_main
  1255  0102  0840               	movf	??_main,w
  1256  0103  00B8               	movwf	sendByte@byte1
  1257  0104  1683               	bsf	3,5	;RP0=1, select bank1
  1258  0105  1303               	bcf	3,6	;RP1=0, select bank1
  1259  0106  0866               	movf	main@i^(0+128),w
  1260  0107  3ED3               	addlw	(low (_car| 0))& (0+255)
  1261  0108  0084               	movwf	4
  1262  0109  1383               	bcf	3,7	;select IRP bank1
  1263  010A  0800               	movf	0,w
  1264  010B  1283               	bcf	3,5	;RP0=0, select bank0
  1265  010C  1303               	bcf	3,6	;RP1=0, select bank0
  1266  010D  00C1               	movwf	??_main+1
  1267  010E  0841               	movf	??_main+1,w
  1268  010F  00B9               	movwf	sendByte@valore
  1269  0110  3003               	movlw	3
  1270  0111  120A  158A  2319  120A  118A  	fcall	_sendByte
  1271                           
  1272                           ;main.c: 198:                         sendByte(0x03, 0x03, truck[i]);
  1273  0116  3003               	movlw	3
  1274  0117  1283               	bcf	3,5	;RP0=0, select bank0
  1275  0118  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0119  00C0               	movwf	??_main
  1277  011A  0840               	movf	??_main,w
  1278  011B  00B8               	movwf	sendByte@byte1
  1279  011C  1683               	bsf	3,5	;RP0=1, select bank1
  1280  011D  1303               	bcf	3,6	;RP1=0, select bank1
  1281  011E  0866               	movf	main@i^(0+128),w
  1282  011F  3ECF               	addlw	(low (_truck| 0))& (0+255)
  1283  0120  0084               	movwf	4
  1284  0121  1383               	bcf	3,7	;select IRP bank1
  1285  0122  0800               	movf	0,w
  1286  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1287  0124  1303               	bcf	3,6	;RP1=0, select bank0
  1288  0125  00C1               	movwf	??_main+1
  1289  0126  0841               	movf	??_main+1,w
  1290  0127  00B9               	movwf	sendByte@valore
  1291  0128  3003               	movlw	3
  1292  0129  120A  158A  2319  120A  118A  	fcall	_sendByte
  1293                           
  1294                           ;main.c: 199:                         break;
  1295  012E  2A18               	goto	l3599
  1296  012F                     l3589:	
  1297                           
  1298                           ;main.c: 201:                         sendByte(0x05, 0x01, motorcycle[i]);
  1299  012F  01B8               	clrf	sendByte@byte1
  1300  0130  0AB8               	incf	sendByte@byte1,f
  1301  0131  1683               	bsf	3,5	;RP0=1, select bank1
  1302  0132  1303               	bcf	3,6	;RP1=0, select bank1
  1303  0133  0866               	movf	main@i^(0+128),w
  1304  0134  3E5A               	addlw	(low (_motorcycle| 0))& (0+255)
  1305  0135  0084               	movwf	4
  1306  0136  1383               	bcf	3,7	;select IRP bank0
  1307  0137  0800               	movf	0,w
  1308  0138  1283               	bcf	3,5	;RP0=0, select bank0
  1309  0139  1303               	bcf	3,6	;RP1=0, select bank0
  1310  013A  00C0               	movwf	??_main
  1311  013B  0840               	movf	??_main,w
  1312  013C  00B9               	movwf	sendByte@valore
  1313  013D  3005               	movlw	5
  1314  013E  120A  158A  2319  120A  118A  	fcall	_sendByte
  1315                           
  1316                           ;main.c: 202:                         sendByte(0x05, 0x02, car[i]);
  1317  0143  3002               	movlw	2
  1318  0144  1283               	bcf	3,5	;RP0=0, select bank0
  1319  0145  1303               	bcf	3,6	;RP1=0, select bank0
  1320  0146  00C0               	movwf	??_main
  1321  0147  0840               	movf	??_main,w
  1322  0148  00B8               	movwf	sendByte@byte1
  1323  0149  1683               	bsf	3,5	;RP0=1, select bank1
  1324  014A  1303               	bcf	3,6	;RP1=0, select bank1
  1325  014B  0866               	movf	main@i^(0+128),w
  1326  014C  3ED3               	addlw	(low (_car| 0))& (0+255)
  1327  014D  0084               	movwf	4
  1328  014E  1383               	bcf	3,7	;select IRP bank1
  1329  014F  0800               	movf	0,w
  1330  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1331  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1332  0152  00C1               	movwf	??_main+1
  1333  0153  0841               	movf	??_main+1,w
  1334  0154  00B9               	movwf	sendByte@valore
  1335  0155  3005               	movlw	5
  1336  0156  120A  158A  2319  120A  118A  	fcall	_sendByte
  1337                           
  1338                           ;main.c: 203:                         sendByte(0x05, 0x03, truck[i]);
  1339  015B  3003               	movlw	3
  1340  015C  1283               	bcf	3,5	;RP0=0, select bank0
  1341  015D  1303               	bcf	3,6	;RP1=0, select bank0
  1342  015E  00C0               	movwf	??_main
  1343  015F  0840               	movf	??_main,w
  1344  0160  00B8               	movwf	sendByte@byte1
  1345  0161  1683               	bsf	3,5	;RP0=1, select bank1
  1346  0162  1303               	bcf	3,6	;RP1=0, select bank1
  1347  0163  0866               	movf	main@i^(0+128),w
  1348  0164  3ECF               	addlw	(low (_truck| 0))& (0+255)
  1349  0165  0084               	movwf	4
  1350  0166  1383               	bcf	3,7	;select IRP bank1
  1351  0167  0800               	movf	0,w
  1352  0168  1283               	bcf	3,5	;RP0=0, select bank0
  1353  0169  1303               	bcf	3,6	;RP1=0, select bank0
  1354  016A  00C1               	movwf	??_main+1
  1355  016B  0841               	movf	??_main+1,w
  1356  016C  00B9               	movwf	sendByte@valore
  1357  016D  3005               	movlw	5
  1358  016E  120A  158A  2319  120A  118A  	fcall	_sendByte
  1359                           
  1360                           ;main.c: 204:                         break;
  1361  0173  2A18               	goto	l3599
  1362  0174                     l3591:	
  1363                           
  1364                           ;main.c: 206:                         sendByte(0x07, 0x01, motorcycle[i]);
  1365  0174  01B8               	clrf	sendByte@byte1
  1366  0175  0AB8               	incf	sendByte@byte1,f
  1367  0176  1683               	bsf	3,5	;RP0=1, select bank1
  1368  0177  1303               	bcf	3,6	;RP1=0, select bank1
  1369  0178  0866               	movf	main@i^(0+128),w
  1370  0179  3E5A               	addlw	(low (_motorcycle| 0))& (0+255)
  1371  017A  0084               	movwf	4
  1372  017B  1383               	bcf	3,7	;select IRP bank0
  1373  017C  0800               	movf	0,w
  1374  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1375  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1376  017F  00C0               	movwf	??_main
  1377  0180  0840               	movf	??_main,w
  1378  0181  00B9               	movwf	sendByte@valore
  1379  0182  3007               	movlw	7
  1380  0183  120A  158A  2319  120A  118A  	fcall	_sendByte
  1381                           
  1382                           ;main.c: 207:                         sendByte(0x07, 0x02, car[i]);
  1383  0188  3002               	movlw	2
  1384  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1385  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1386  018B  00C0               	movwf	??_main
  1387  018C  0840               	movf	??_main,w
  1388  018D  00B8               	movwf	sendByte@byte1
  1389  018E  1683               	bsf	3,5	;RP0=1, select bank1
  1390  018F  1303               	bcf	3,6	;RP1=0, select bank1
  1391  0190  0866               	movf	main@i^(0+128),w
  1392  0191  3ED3               	addlw	(low (_car| 0))& (0+255)
  1393  0192  0084               	movwf	4
  1394  0193  1383               	bcf	3,7	;select IRP bank1
  1395  0194  0800               	movf	0,w
  1396  0195  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0196  1303               	bcf	3,6	;RP1=0, select bank0
  1398  0197  00C1               	movwf	??_main+1
  1399  0198  0841               	movf	??_main+1,w
  1400  0199  00B9               	movwf	sendByte@valore
  1401  019A  3007               	movlw	7
  1402  019B  120A  158A  2319  120A  118A  	fcall	_sendByte
  1403                           
  1404                           ;main.c: 208:                         sendByte(0x07, 0x03, truck[i]);
  1405  01A0  3003               	movlw	3
  1406  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1407  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1408  01A3  00C0               	movwf	??_main
  1409  01A4  0840               	movf	??_main,w
  1410  01A5  00B8               	movwf	sendByte@byte1
  1411  01A6  1683               	bsf	3,5	;RP0=1, select bank1
  1412  01A7  1303               	bcf	3,6	;RP1=0, select bank1
  1413  01A8  0866               	movf	main@i^(0+128),w
  1414  01A9  3ECF               	addlw	(low (_truck| 0))& (0+255)
  1415  01AA  0084               	movwf	4
  1416  01AB  1383               	bcf	3,7	;select IRP bank1
  1417  01AC  0800               	movf	0,w
  1418  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1419  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1420  01AF  00C1               	movwf	??_main+1
  1421  01B0  0841               	movf	??_main+1,w
  1422  01B1  00B9               	movwf	sendByte@valore
  1423  01B2  3007               	movlw	7
  1424  01B3  120A  158A  2319  120A  118A  	fcall	_sendByte
  1425                           
  1426                           ;main.c: 209:                         break;
  1427  01B8  2A18               	goto	l3599
  1428  01B9                     l3593:	
  1429                           
  1430                           ;main.c: 211:                         sendByte(0x09, 0x01, motorcycle[i]);
  1431  01B9  01B8               	clrf	sendByte@byte1
  1432  01BA  0AB8               	incf	sendByte@byte1,f
  1433  01BB  1683               	bsf	3,5	;RP0=1, select bank1
  1434  01BC  1303               	bcf	3,6	;RP1=0, select bank1
  1435  01BD  0866               	movf	main@i^(0+128),w
  1436  01BE  3E5A               	addlw	(low (_motorcycle| 0))& (0+255)
  1437  01BF  0084               	movwf	4
  1438  01C0  1383               	bcf	3,7	;select IRP bank0
  1439  01C1  0800               	movf	0,w
  1440  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1441  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  1442  01C4  00C0               	movwf	??_main
  1443  01C5  0840               	movf	??_main,w
  1444  01C6  00B9               	movwf	sendByte@valore
  1445  01C7  3009               	movlw	9
  1446  01C8  120A  158A  2319  120A  118A  	fcall	_sendByte
  1447                           
  1448                           ;main.c: 212:                         sendByte(0x09, 0x02, car[i]);
  1449  01CD  3002               	movlw	2
  1450  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  1451  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  1452  01D0  00C0               	movwf	??_main
  1453  01D1  0840               	movf	??_main,w
  1454  01D2  00B8               	movwf	sendByte@byte1
  1455  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  1456  01D4  1303               	bcf	3,6	;RP1=0, select bank1
  1457  01D5  0866               	movf	main@i^(0+128),w
  1458  01D6  3ED3               	addlw	(low (_car| 0))& (0+255)
  1459  01D7  0084               	movwf	4
  1460  01D8  1383               	bcf	3,7	;select IRP bank1
  1461  01D9  0800               	movf	0,w
  1462  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  1463  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  1464  01DC  00C1               	movwf	??_main+1
  1465  01DD  0841               	movf	??_main+1,w
  1466  01DE  00B9               	movwf	sendByte@valore
  1467  01DF  3009               	movlw	9
  1468  01E0  120A  158A  2319  120A  118A  	fcall	_sendByte
  1469                           
  1470                           ;main.c: 213:                         sendByte(0x09, 0x03, truck[i]);
  1471  01E5  3003               	movlw	3
  1472  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  1473  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  1474  01E8  00C0               	movwf	??_main
  1475  01E9  0840               	movf	??_main,w
  1476  01EA  00B8               	movwf	sendByte@byte1
  1477  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1478  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1479  01ED  0866               	movf	main@i^(0+128),w
  1480  01EE  3ECF               	addlw	(low (_truck| 0))& (0+255)
  1481  01EF  0084               	movwf	4
  1482  01F0  1383               	bcf	3,7	;select IRP bank1
  1483  01F1  0800               	movf	0,w
  1484  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1485  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1486  01F4  00C1               	movwf	??_main+1
  1487  01F5  0841               	movf	??_main+1,w
  1488  01F6  00B9               	movwf	sendByte@valore
  1489  01F7  3009               	movlw	9
  1490  01F8  120A  158A  2319  120A  118A  	fcall	_sendByte
  1491                           
  1492                           ;main.c: 214:                         break;
  1493  01FD  2A18               	goto	l3599
  1494  01FE                     l3597:	
  1495  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  1496  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  1497  0200  0866               	movf	main@i^(0+128),w
  1498  0201  1283               	bcf	3,5	;RP0=0, select bank0
  1499  0202  1303               	bcf	3,6	;RP1=0, select bank0
  1500  0203  00C0               	movwf	??_main
  1501  0204  01C1               	clrf	??_main+1
  1502                           
  1503                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1504                           ; Switch size 1, requested type "simple"
  1505                           ; Number of cases is 1, Range of values is 0 to 0
  1506                           ; switch strategies available:
  1507                           ; Name         Instructions Cycles
  1508                           ; simple_byte            4     3 (average)
  1509                           ; direct_byte           11     8 (fixed)
  1510                           ; jumptable            260     6 (fixed)
  1511                           ;	Chosen strategy is simple_byte
  1512  0205  0841               	movf	??_main+1,w
  1513  0206  3A00               	xorlw	0	; case 0
  1514  0207  1903               	skipnz
  1515  0208  2A0A               	goto	l3965
  1516  0209  2A18               	goto	l3599
  1517  020A                     l3965:	
  1518                           
  1519                           ; Switch size 1, requested type "simple"
  1520                           ; Number of cases is 4, Range of values is 0 to 3
  1521                           ; switch strategies available:
  1522                           ; Name         Instructions Cycles
  1523                           ; simple_byte           13     7 (average)
  1524                           ; direct_byte           20     8 (fixed)
  1525                           ; jumptable            260     6 (fixed)
  1526                           ;	Chosen strategy is simple_byte
  1527  020A  0840               	movf	??_main,w
  1528  020B  3A00               	xorlw	0	; case 0
  1529  020C  1903               	skipnz
  1530  020D  28EA               	goto	l3587
  1531  020E  3A01               	xorlw	1	; case 1
  1532  020F  1903               	skipnz
  1533  0210  292F               	goto	l3589
  1534  0211  3A03               	xorlw	3	; case 2
  1535  0212  1903               	skipnz
  1536  0213  2974               	goto	l3591
  1537  0214  3A01               	xorlw	1	; case 3
  1538  0215  1903               	skipnz
  1539  0216  29B9               	goto	l3593
  1540  0217  2A18               	goto	l3599
  1541  0218                     l3599:	
  1542                           
  1543                           ;main.c: 216:                 }
  1544  0218  3001               	movlw	1
  1545  0219  1283               	bcf	3,5	;RP0=0, select bank0
  1546  021A  1303               	bcf	3,6	;RP1=0, select bank0
  1547  021B  00C0               	movwf	??_main
  1548  021C  0840               	movf	??_main,w
  1549  021D  1683               	bsf	3,5	;RP0=1, select bank1
  1550  021E  1303               	bcf	3,6	;RP1=0, select bank1
  1551  021F  07E6               	addwf	main@i^(0+128),f
  1552  0220                     l3601:	
  1553  0220  3004               	movlw	4
  1554  0221  0266               	subwf	main@i^(0+128),w
  1555  0222  1C03               	skipc
  1556  0223  2A25               	goto	u3071
  1557  0224  2A26               	goto	u3070
  1558  0225                     u3071:	
  1559  0225  2885               	goto	l3573
  1560  0226                     u3070:	
  1561  0226                     l3603:	
  1562                           
  1563                           ;main.c: 218:                 for (int i = 0; i < 4; i++)
  1564  0226  01E2               	clrf	main@i_480^(0+128)
  1565  0227  01E3               	clrf	(main@i_480+1)^(0+128)
  1566  0228                     l3609:	
  1567                           
  1568                           ;main.c: 219:                 {;main.c: 220:                     motorcycle[i] = 0;
  1569  0228  1683               	bsf	3,5	;RP0=1, select bank1
  1570  0229  1303               	bcf	3,6	;RP1=0, select bank1
  1571  022A  0862               	movf	main@i_480^(0+128),w
  1572  022B  3E5A               	addlw	(low (_motorcycle| 0))& (0+255)
  1573  022C  0084               	movwf	4
  1574  022D  1383               	bcf	3,7	;select IRP bank0
  1575  022E  0180               	clrf	0
  1576                           
  1577                           ;main.c: 221:                     car[i] = 0;
  1578  022F  0862               	movf	main@i_480^(0+128),w
  1579  0230  3ED3               	addlw	(low (_car| 0))& (0+255)
  1580  0231  0084               	movwf	4
  1581  0232  0180               	clrf	0
  1582                           
  1583                           ;main.c: 222:                     truck[i] = 0;
  1584  0233  0862               	movf	main@i_480^(0+128),w
  1585  0234  3ECF               	addlw	(low (_truck| 0))& (0+255)
  1586  0235  0084               	movwf	4
  1587  0236  0180               	clrf	0
  1588  0237                     l3611:	
  1589                           
  1590                           ;main.c: 223:                 }
  1591  0237  3001               	movlw	1
  1592  0238  07E2               	addwf	main@i_480^(0+128),f
  1593  0239  1803               	skipnc
  1594  023A  0AE3               	incf	(main@i_480+1)^(0+128),f
  1595  023B  3000               	movlw	0
  1596  023C  07E3               	addwf	(main@i_480+1)^(0+128),f
  1597  023D                     l3613:	
  1598  023D  0863               	movf	(main@i_480+1)^(0+128),w
  1599  023E  3A80               	xorlw	128
  1600  023F  00FF               	movwf	btemp+1
  1601  0240  3080               	movlw	128
  1602  0241  027F               	subwf	btemp+1,w
  1603  0242  1D03               	skipz
  1604  0243  2A46               	goto	u3085
  1605  0244  3004               	movlw	4
  1606  0245  0262               	subwf	main@i_480^(0+128),w
  1607  0246                     u3085:	
  1608  0246  1C03               	skipc
  1609  0247  2A49               	goto	u3081
  1610  0248  2A4A               	goto	u3080
  1611  0249                     u3081:	
  1612  0249  2A28               	goto	l3609
  1613  024A                     u3080:	
  1614  024A                     l3615:	
  1615                           
  1616                           ;main.c: 225:                 for (unsigned char i = 0; i < 5; i++)
  1617  024A  1683               	bsf	3,5	;RP0=1, select bank1
  1618  024B  1303               	bcf	3,6	;RP1=0, select bank1
  1619  024C  01E0               	clrf	main@i_481^(0+128)
  1620  024D                     l3621:	
  1621                           
  1622                           ;main.c: 226:                 {;main.c: 227:                     dataFromGateway[i] = 0;
  1623  024D  0860               	movf	main@i_481^(0+128),w
  1624  024E  3EA4               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1625  024F  0084               	movwf	4
  1626  0250  1383               	bcf	3,7	;select IRP bank1
  1627  0251  0180               	clrf	0
  1628  0252                     l3623:	
  1629                           
  1630                           ;main.c: 228:                 }
  1631  0252  3001               	movlw	1
  1632  0253  1283               	bcf	3,5	;RP0=0, select bank0
  1633  0254  1303               	bcf	3,6	;RP1=0, select bank0
  1634  0255  00C0               	movwf	??_main
  1635  0256  0840               	movf	??_main,w
  1636  0257  1683               	bsf	3,5	;RP0=1, select bank1
  1637  0258  1303               	bcf	3,6	;RP1=0, select bank1
  1638  0259  07E0               	addwf	main@i_481^(0+128),f
  1639  025A                     l3625:	
  1640  025A  3005               	movlw	5
  1641  025B  0260               	subwf	main@i_481^(0+128),w
  1642  025C  1C03               	skipc
  1643  025D  2A5F               	goto	u3091
  1644  025E  2A60               	goto	u3090
  1645  025F                     u3091:	
  1646  025F  2A4D               	goto	l3621
  1647  0260                     u3090:	
  1648  0260  2B56               	goto	l223
  1649  0261                     l242:	
  1650                           ;main.c: 230:             case 0x0A:
  1651                           
  1652                           
  1653                           ;main.c: 231:                 readGatewayDone.Bit = 1;
  1654  0261  1459               	bsf	_readGatewayDone,0
  1655                           
  1656                           ;main.c: 232:                 readGateway.Bit = 0;
  1657  0262  1058               	bcf	_readGateway,0
  1658  0263                     l3627:	
  1659                           
  1660                           ;main.c: 234:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1661  0263  3000               	movlw	0
  1662  0264  120A  158A  22CC  120A  118A  	fcall	_ADC_Read
  1663  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1664  026A  1303               	bcf	3,6	;RP1=0, select bank0
  1665  026B  0824               	movf	?_ADC_Read,w
  1666  026C  00C0               	movwf	??_main
  1667  026D  0825               	movf	?_ADC_Read+1,w
  1668  026E  00C1               	movwf	??_main+1
  1669  026F  0D41               	rlf	??_main+1,w
  1670  0270  0CC1               	rrf	??_main+1,f
  1671  0271  0CC0               	rrf	??_main,f
  1672  0272  0D41               	rlf	??_main+1,w
  1673  0273  0CC1               	rrf	??_main+1,f
  1674  0274  0CC0               	rrf	??_main,f
  1675  0275  0840               	movf	??_main,w
  1676  0276  00B4               	movwf	map@x
  1677  0277  0841               	movf	??_main+1,w
  1678  0278  00B5               	movwf	map@x+1
  1679  0279  3000               	movlw	0
  1680  027A  00B6               	movwf	map@in_min
  1681  027B  00B7               	movwf	map@in_min+1
  1682  027C  30FF               	movlw	255
  1683  027D  00B8               	movwf	map@in_max
  1684  027E  3000               	movlw	0
  1685  027F  00B9               	movwf	map@in_max+1
  1686  0280  30EC               	movlw	236
  1687  0281  00BA               	movwf	map@out_min
  1688  0282  30FF               	movlw	255
  1689  0283  00BB               	movwf	map@out_min+1
  1690  0284  303C               	movlw	60
  1691  0285  00BC               	movwf	map@out_max
  1692  0286  3000               	movlw	0
  1693  0287  00BD               	movwf	map@out_max+1
  1694  0288  120A  158A  234A  120A  118A  	fcall	_map
  1695  028D  1283               	bcf	3,5	;RP0=0, select bank0
  1696  028E  1303               	bcf	3,6	;RP1=0, select bank0
  1697  028F  0834               	movf	?_map,w
  1698  0290  00C2               	movwf	??_main+2
  1699  0291  0842               	movf	??_main+2,w
  1700  0292  00D1               	movwf	_temp
  1701                           
  1702                           ;main.c: 235:                 umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  1703  0293  3001               	movlw	1
  1704  0294  120A  158A  22CC  120A  118A  	fcall	_ADC_Read
  1705  0299  1283               	bcf	3,5	;RP0=0, select bank0
  1706  029A  1303               	bcf	3,6	;RP1=0, select bank0
  1707  029B  0824               	movf	?_ADC_Read,w
  1708  029C  00C0               	movwf	??_main
  1709  029D  0825               	movf	?_ADC_Read+1,w
  1710  029E  00C1               	movwf	??_main+1
  1711  029F  0D41               	rlf	??_main+1,w
  1712  02A0  0CC1               	rrf	??_main+1,f
  1713  02A1  0CC0               	rrf	??_main,f
  1714  02A2  0D41               	rlf	??_main+1,w
  1715  02A3  0CC1               	rrf	??_main+1,f
  1716  02A4  0CC0               	rrf	??_main,f
  1717  02A5  0840               	movf	??_main,w
  1718  02A6  00B4               	movwf	map@x
  1719  02A7  0841               	movf	??_main+1,w
  1720  02A8  00B5               	movwf	map@x+1
  1721  02A9  3000               	movlw	0
  1722  02AA  00B6               	movwf	map@in_min
  1723  02AB  00B7               	movwf	map@in_min+1
  1724  02AC  30FF               	movlw	255
  1725  02AD  00B8               	movwf	map@in_max
  1726  02AE  3000               	movlw	0
  1727  02AF  00B9               	movwf	map@in_max+1
  1728  02B0  3000               	movlw	0
  1729  02B1  00BA               	movwf	map@out_min
  1730  02B2  00BB               	movwf	map@out_min+1
  1731  02B3  3064               	movlw	100
  1732  02B4  00BC               	movwf	map@out_max
  1733  02B5  3000               	movlw	0
  1734  02B6  00BD               	movwf	map@out_max+1
  1735  02B7  120A  158A  234A  120A  118A  	fcall	_map
  1736  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  1737  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  1738  02BE  0834               	movf	?_map,w
  1739  02BF  00C2               	movwf	??_main+2
  1740  02C0  0842               	movf	??_main+2,w
  1741  02C1  00D0               	movwf	_umidita
  1742                           
  1743                           ;main.c: 236:                 pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  1744  02C2  3005               	movlw	5
  1745  02C3  120A  158A  22CC  120A  118A  	fcall	_ADC_Read
  1746  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  1747  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  1748  02CA  0824               	movf	?_ADC_Read,w
  1749  02CB  00C0               	movwf	??_main
  1750  02CC  0825               	movf	?_ADC_Read+1,w
  1751  02CD  00C1               	movwf	??_main+1
  1752  02CE  0D41               	rlf	??_main+1,w
  1753  02CF  0CC1               	rrf	??_main+1,f
  1754  02D0  0CC0               	rrf	??_main,f
  1755  02D1  0D41               	rlf	??_main+1,w
  1756  02D2  0CC1               	rrf	??_main+1,f
  1757  02D3  0CC0               	rrf	??_main,f
  1758  02D4  0840               	movf	??_main,w
  1759  02D5  00B4               	movwf	map@x
  1760  02D6  0841               	movf	??_main+1,w
  1761  02D7  00B5               	movwf	map@x+1
  1762  02D8  3000               	movlw	0
  1763  02D9  00B6               	movwf	map@in_min
  1764  02DA  00B7               	movwf	map@in_min+1
  1765  02DB  30FF               	movlw	255
  1766  02DC  00B8               	movwf	map@in_max
  1767  02DD  3000               	movlw	0
  1768  02DE  00B9               	movwf	map@in_max+1
  1769  02DF  3000               	movlw	0
  1770  02E0  00BA               	movwf	map@out_min
  1771  02E1  00BB               	movwf	map@out_min+1
  1772  02E2  3064               	movlw	100
  1773  02E3  00BC               	movwf	map@out_max
  1774  02E4  3000               	movlw	0
  1775  02E5  00BD               	movwf	map@out_max+1
  1776  02E6  120A  158A  234A  120A  118A  	fcall	_map
  1777  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  1778  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  1779  02ED  0834               	movf	?_map,w
  1780  02EE  00C2               	movwf	??_main+2
  1781  02EF  0842               	movf	??_main+2,w
  1782  02F0  00CF               	movwf	_pressione
  1783  02F1                     l3629:	
  1784                           
  1785                           ;main.c: 237:                 sendByte(0x02, 0x00, temp);
  1786  02F1  01B8               	clrf	sendByte@byte1
  1787  02F2  0851               	movf	_temp,w
  1788  02F3  00C0               	movwf	??_main
  1789  02F4  0840               	movf	??_main,w
  1790  02F5  00B9               	movwf	sendByte@valore
  1791  02F6  3002               	movlw	2
  1792  02F7  120A  158A  2319  120A  118A  	fcall	_sendByte
  1793  02FC                     l3631:	
  1794                           
  1795                           ;main.c: 238:                 sendByte(0x04, 0x00, umidita);
  1796  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  1797  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  1798  02FE  01B8               	clrf	sendByte@byte1
  1799  02FF  0850               	movf	_umidita,w
  1800  0300  00C0               	movwf	??_main
  1801  0301  0840               	movf	??_main,w
  1802  0302  00B9               	movwf	sendByte@valore
  1803  0303  3004               	movlw	4
  1804  0304  120A  158A  2319  120A  118A  	fcall	_sendByte
  1805  0309                     l3633:	
  1806                           
  1807                           ;main.c: 239:                 sendByte(0x06, 0x00, pressione);
  1808  0309  1283               	bcf	3,5	;RP0=0, select bank0
  1809  030A  1303               	bcf	3,6	;RP1=0, select bank0
  1810  030B  01B8               	clrf	sendByte@byte1
  1811  030C  084F               	movf	_pressione,w
  1812  030D  00C0               	movwf	??_main
  1813  030E  0840               	movf	??_main,w
  1814  030F  00B9               	movwf	sendByte@valore
  1815  0310  3006               	movlw	6
  1816  0311  120A  158A  2319  120A  118A  	fcall	_sendByte
  1817  0316                     l3635:	
  1818                           
  1819                           ;main.c: 241:                 for (unsigned char i = 0; i < 5; i++)
  1820  0316  1683               	bsf	3,5	;RP0=1, select bank1
  1821  0317  1303               	bcf	3,6	;RP1=0, select bank1
  1822  0318  01E1               	clrf	main@i_483^(0+128)
  1823  0319                     l3637:	
  1824  0319  3005               	movlw	5
  1825  031A  0261               	subwf	main@i_483^(0+128),w
  1826  031B  1C03               	skipc
  1827  031C  2B1E               	goto	u3101
  1828  031D  2B1F               	goto	u3100
  1829  031E                     u3101:	
  1830  031E  2B20               	goto	l3641
  1831  031F                     u3100:	
  1832  031F  2B56               	goto	l223
  1833  0320                     l3641:	
  1834                           
  1835                           ;main.c: 242:                 {;main.c: 243:                     dataFromGateway[i] = 0;
  1836  0320  0861               	movf	main@i_483^(0+128),w
  1837  0321  3EA4               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1838  0322  0084               	movwf	4
  1839  0323  1383               	bcf	3,7	;select IRP bank1
  1840  0324  0180               	clrf	0
  1841  0325                     l3643:	
  1842                           
  1843                           ;main.c: 244:                 }
  1844  0325  3001               	movlw	1
  1845  0326  1283               	bcf	3,5	;RP0=0, select bank0
  1846  0327  1303               	bcf	3,6	;RP1=0, select bank0
  1847  0328  00C0               	movwf	??_main
  1848  0329  0840               	movf	??_main,w
  1849  032A  1683               	bsf	3,5	;RP0=1, select bank1
  1850  032B  1303               	bcf	3,6	;RP1=0, select bank1
  1851  032C  07E1               	addwf	main@i_483^(0+128),f
  1852  032D  2B19               	goto	l3637
  1853  032E                     l3647:	
  1854                           
  1855                           ;main.c: 248:                 if (timerReadFromGateway >= 4)
  1856  032E  3004               	movlw	4
  1857  032F  0252               	subwf	_timerReadFromGateway,w
  1858  0330  1C03               	skipc
  1859  0331  2B33               	goto	u3111
  1860  0332  2B34               	goto	u3110
  1861  0333                     u3111:	
  1862  0333  2B37               	goto	l3651
  1863  0334                     u3110:	
  1864  0334                     l3649:	
  1865                           
  1866                           ;main.c: 249:                 {;main.c: 250:                     readGatewayDone.Bit = 1
      +                          ;
  1867  0334  1459               	bsf	_readGatewayDone,0
  1868                           
  1869                           ;main.c: 251:                     readGatewayDone.Timeout = 1;
  1870  0335  14D9               	bsf	_readGatewayDone,1
  1871                           
  1872                           ;main.c: 252:                     readGateway.Bit = 0;
  1873  0336  1058               	bcf	_readGateway,0
  1874  0337                     l3651:	
  1875                           
  1876                           ;main.c: 255:                 if (dataFromGatewayIndex >= 15)
  1877  0337  300F               	movlw	15
  1878  0338  0253               	subwf	_dataFromGatewayIndex,w
  1879  0339  1C03               	skipc
  1880  033A  2B3C               	goto	u3121
  1881  033B  2B3D               	goto	u3120
  1882  033C                     u3121:	
  1883  033C  2B56               	goto	l223
  1884  033D                     u3120:	
  1885  033D                     l3653:	
  1886                           
  1887                           ;main.c: 256:                 {;main.c: 257:                     readGatewayDone.Bit = 1
      +                          ;
  1888  033D  1459               	bsf	_readGatewayDone,0
  1889                           
  1890                           ;main.c: 258:                     readGatewayDone.Timeout = 0;
  1891  033E  10D9               	bcf	_readGatewayDone,1
  1892                           
  1893                           ;main.c: 259:                     readGateway.Bit = 0;
  1894  033F  1058               	bcf	_readGateway,0
  1895  0340  2B56               	goto	l223
  1896  0341                     l3657:	
  1897  0341  1683               	bsf	3,5	;RP0=1, select bank1
  1898  0342  1303               	bcf	3,6	;RP1=0, select bank1
  1899  0343  0824               	movf	_dataFromGateway^(0+128),w
  1900  0344  397F               	andlw	127
  1901  0345  1283               	bcf	3,5	;RP0=0, select bank0
  1902  0346  1303               	bcf	3,6	;RP1=0, select bank0
  1903  0347  00C0               	movwf	??_main
  1904  0348  01C1               	clrf	??_main+1
  1905                           
  1906                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1907                           ; Switch size 1, requested type "simple"
  1908                           ; Number of cases is 1, Range of values is 0 to 0
  1909                           ; switch strategies available:
  1910                           ; Name         Instructions Cycles
  1911                           ; simple_byte            4     3 (average)
  1912                           ; direct_byte           11     8 (fixed)
  1913                           ; jumptable            260     6 (fixed)
  1914                           ;	Chosen strategy is simple_byte
  1915  0349  0841               	movf	??_main+1,w
  1916  034A  3A00               	xorlw	0	; case 0
  1917  034B  1903               	skipnz
  1918  034C  2B4E               	goto	l3967
  1919  034D  2B2E               	goto	l3647
  1920  034E                     l3967:	
  1921                           
  1922                           ; Switch size 1, requested type "simple"
  1923                           ; Number of cases is 2, Range of values is 8 to 10
  1924                           ; switch strategies available:
  1925                           ; Name         Instructions Cycles
  1926                           ; simple_byte            7     4 (average)
  1927                           ; direct_byte           20    11 (fixed)
  1928                           ; jumptable            263     9 (fixed)
  1929                           ;	Chosen strategy is simple_byte
  1930  034E  0840               	movf	??_main,w
  1931  034F  3A08               	xorlw	8	; case 8
  1932  0350  1903               	skipnz
  1933  0351  2880               	goto	l225
  1934  0352  3A02               	xorlw	2	; case 10
  1935  0353  1903               	skipnz
  1936  0354  2A61               	goto	l242
  1937  0355  2B2E               	goto	l3647
  1938  0356                     l223:	
  1939                           ;main.c: 263:         }
  1940                           
  1941                           
  1942                           ;main.c: 266:         if (readGatewayDone.Bit)
  1943  0356  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0357  1C59               	btfss	_readGatewayDone,0
  1945  0358  2B5A               	goto	u3131
  1946  0359  2B5B               	goto	u3130
  1947  035A                     u3131:	
  1948  035A  2B6F               	goto	l3671
  1949  035B                     u3130:	
  1950  035B                     l3659:	
  1951                           
  1952                           ;main.c: 267:         {;main.c: 269:             readGateway.Bit = 0;
  1953  035B  1058               	bcf	_readGateway,0
  1954  035C                     l3661:	
  1955                           
  1956                           ;main.c: 270:             dataFromGatewayIndex = 0;
  1957  035C  01D3               	clrf	_dataFromGatewayIndex
  1958  035D                     l3663:	
  1959                           
  1960                           ;main.c: 271:             readGatewayDone.Bit = 0;
  1961  035D  1059               	bcf	_readGatewayDone,0
  1962                           
  1963                           ;main.c: 272:             timerReadFromGateway = 0;
  1964  035E  01D2               	clrf	_timerReadFromGateway
  1965  035F                     l3665:	
  1966                           
  1967                           ;main.c: 275:             if (readGatewayDone.Timeout)
  1968  035F  1CD9               	btfss	_readGatewayDone,1
  1969  0360  2B62               	goto	u3141
  1970  0361  2B63               	goto	u3140
  1971  0362                     u3141:	
  1972  0362  2B65               	goto	l3669
  1973  0363                     u3140:	
  1974  0363                     l3667:	
  1975                           
  1976                           ;main.c: 276:             {;main.c: 277:                 readGatewayDone.Timeout = 0;
  1977  0363  10D9               	bcf	_readGatewayDone,1
  1978                           
  1979                           ;main.c: 278:             }
  1980  0364  2B6F               	goto	l3671
  1981  0365                     l3669:	
  1982                           
  1983                           ;main.c: 281:             {;main.c: 283:                 SetReceivedTimes(dataFromGatewa
      +                          y, Semafori);
  1984  0365  3064               	movlw	(low (_Semafori| 0))& (0+255)
  1985  0366  00C0               	movwf	??_main
  1986  0367  0840               	movf	??_main,w
  1987  0368  00AC               	movwf	SetReceivedTimes@_semafori
  1988  0369  30A4               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1989  036A  120A  158A  2635  120A  118A  	fcall	_SetReceivedTimes
  1990  036F                     l3671:	
  1991                           
  1992                           ;main.c: 289:         if (secondPassed.Bit && cycled.Bit)
  1993  036F  1283               	bcf	3,5	;RP0=0, select bank0
  1994  0370  1303               	bcf	3,6	;RP1=0, select bank0
  1995  0371  1C57               	btfss	_secondPassed,0
  1996  0372  2B74               	goto	u3151
  1997  0373  2B75               	goto	u3150
  1998  0374                     u3151:	
  1999  0374  2C7C               	goto	l3713
  2000  0375                     u3150:	
  2001  0375                     l3673:	
  2002  0375  1C56               	btfss	_cycled,0
  2003  0376  2B78               	goto	u3161
  2004  0377  2B79               	goto	u3160
  2005  0378                     u3161:	
  2006  0378  2C7C               	goto	l3713
  2007  0379                     u3160:	
  2008  0379                     l3675:	
  2009                           
  2010                           ;main.c: 290:         {;main.c: 291:             for (unsigned char i = 0; i < n_semafor
      +                          i; i++)
  2011  0379  1683               	bsf	3,5	;RP0=1, select bank1
  2012  037A  1303               	bcf	3,6	;RP1=0, select bank1
  2013  037B  01E5               	clrf	main@i_485^(0+128)
  2014  037C                     l3677:	
  2015  037C  3002               	movlw	2
  2016  037D  0265               	subwf	main@i_485^(0+128),w
  2017  037E  1C03               	skipc
  2018  037F  2B81               	goto	u3171
  2019  0380  2B82               	goto	u3170
  2020  0381                     u3171:	
  2021  0381  2B83               	goto	l3681
  2022  0382                     u3170:	
  2023  0382  2C7C               	goto	l3713
  2024  0383                     l3681:	
  2025                           
  2026                           ;main.c: 292:             {;main.c: 293:                 if ((*Semafori[i]).times[0] != 
      +                          0)
  2027  0383  0865               	movf	main@i_485^(0+128),w
  2028  0384  3E64               	addlw	(low (_Semafori| 0))& (0+255)
  2029  0385  0084               	movwf	4
  2030  0386  1383               	bcf	3,7	;select IRP bank0
  2031  0387  0800               	movf	0,w
  2032  0388  0084               	movwf	4
  2033  0389  0800               	movf	0,w
  2034  038A  1283               	bcf	3,5	;RP0=0, select bank0
  2035  038B  1303               	bcf	3,6	;RP1=0, select bank0
  2036  038C  00C0               	movwf	??_main
  2037  038D  0A84               	incf	4,f
  2038  038E  0800               	movf	0,w
  2039  038F  00C1               	movwf	??_main+1
  2040  0390  0840               	movf	??_main,w
  2041  0391  0441               	iorwf	??_main+1,w
  2042  0392  1903               	btfsc	3,2
  2043  0393  2B95               	goto	u3181
  2044  0394  2B96               	goto	u3180
  2045  0395                     u3181:	
  2046  0395  2C73               	goto	l3709
  2047  0396                     u3180:	
  2048  0396                     l3683:	
  2049                           
  2050                           ;main.c: 294:                 {;main.c: 295:                     time[i]++;
  2051  0396  1683               	bsf	3,5	;RP0=1, select bank1
  2052  0397  1303               	bcf	3,6	;RP1=0, select bank1
  2053  0398  0865               	movf	main@i_485^(0+128),w
  2054  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2055  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2056  039B  00C0               	movwf	??_main
  2057  039C  0740               	addwf	??_main,w
  2058  039D  3E49               	addlw	(low (_time| 0))& (0+255)
  2059  039E  0084               	movwf	4
  2060  039F  3001               	movlw	1
  2061  03A0  0780               	addwf	0,f
  2062  03A1  0A84               	incf	4,f
  2063  03A2  1803               	skipnc
  2064  03A3  0A80               	incf	0,f
  2065                           
  2066                           ;main.c: 296:                     unsigned char lux_select = (*Semafori[i]).lux_select;
  2067  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  2068  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  2069  03A6  0865               	movf	main@i_485^(0+128),w
  2070  03A7  3E64               	addlw	(low (_Semafori| 0))& (0+255)
  2071  03A8  0084               	movwf	4
  2072  03A9  0800               	movf	0,w
  2073  03AA  3E0C               	addlw	12
  2074  03AB  0084               	movwf	4
  2075  03AC  0800               	movf	0,w
  2076  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2077  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  2078  03AF  00C0               	movwf	??_main
  2079  03B0  0840               	movf	??_main,w
  2080  03B1  1683               	bsf	3,5	;RP0=1, select bank1
  2081  03B2  1303               	bcf	3,6	;RP1=0, select bank1
  2082  03B3  00E4               	movwf	main@lux_select^(0+128)
  2083                           
  2084                           ;main.c: 298:                     if ((*Semafori[i]).times[lux_select] - time[i] < 0)
  2085  03B4  0865               	movf	main@i_485^(0+128),w
  2086  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  2087  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  2088  03B7  00C0               	movwf	??_main
  2089  03B8  0740               	addwf	??_main,w
  2090  03B9  3E49               	addlw	(low (_time| 0))& (0+255)
  2091  03BA  0084               	movwf	4
  2092  03BB  0800               	movf	0,w
  2093  03BC  00C1               	movwf	??_main+1
  2094  03BD  0A84               	incf	4,f
  2095  03BE  0800               	movf	0,w
  2096  03BF  00C2               	movwf	??_main+2
  2097  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  2098  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  2099  03C2  0865               	movf	main@i_485^(0+128),w
  2100  03C3  3E64               	addlw	(low (_Semafori| 0))& (0+255)
  2101  03C4  0084               	movwf	4
  2102  03C5  0864               	movf	main@lux_select^(0+128),w
  2103  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  2104  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  2105  03C8  00C3               	movwf	??_main+3
  2106  03C9  0743               	addwf	??_main+3,w
  2107  03CA  0700               	addwf	0,w
  2108  03CB  00C4               	movwf	??_main+4
  2109  03CC  0844               	movf	??_main+4,w
  2110  03CD  0084               	movwf	4
  2111  03CE  0800               	movf	0,w
  2112  03CF  00C5               	movwf	??_main+5
  2113  03D0  0A84               	incf	4,f
  2114  03D1  0800               	movf	0,w
  2115  03D2  00C6               	movwf	??_main+6
  2116  03D3  0841               	movf	??_main+1,w
  2117  03D4  0245               	subwf	??_main+5,w
  2118  03D5  00C7               	movwf	??_main+7
  2119  03D6  0842               	movf	??_main+2,w
  2120  03D7  1C03               	skipc
  2121  03D8  0A42               	incf	??_main+2,w
  2122  03D9  0246               	subwf	??_main+6,w
  2123  03DA  00C8               	movwf	??_main+8
  2124  03DB  1FC8               	btfss	??_main+8,7
  2125  03DC  2BDE               	goto	u3191
  2126  03DD  2BDF               	goto	u3190
  2127  03DE                     u3191:	
  2128  03DE  2C19               	goto	l255
  2129  03DF                     u3190:	
  2130  03DF                     l3685:	
  2131                           
  2132                           ;main.c: 299:                     {;main.c: 300:                         lux_select++;
  2133  03DF  3001               	movlw	1
  2134  03E0  00C0               	movwf	??_main
  2135  03E1  0840               	movf	??_main,w
  2136  03E2  1683               	bsf	3,5	;RP0=1, select bank1
  2137  03E3  1303               	bcf	3,6	;RP1=0, select bank1
  2138  03E4  07E4               	addwf	main@lux_select^(0+128),f
  2139  03E5                     l3687:	
  2140                           
  2141                           ;main.c: 301:                         time[i] = 1;
  2142  03E5  0865               	movf	main@i_485^(0+128),w
  2143  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  2144  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  2145  03E8  00C0               	movwf	??_main
  2146  03E9  0740               	addwf	??_main,w
  2147  03EA  3E49               	addlw	(low (_time| 0))& (0+255)
  2148  03EB  0084               	movwf	4
  2149  03EC  3001               	movlw	1
  2150  03ED  0080               	movwf	0
  2151  03EE  0A84               	incf	4,f
  2152  03EF  3000               	movlw	0
  2153  03F0  0080               	movwf	0
  2154  03F1                     l3689:	
  2155                           
  2156                           ;main.c: 303:                         if (lux_select >= 3)
  2157  03F1  3003               	movlw	3
  2158  03F2  1683               	bsf	3,5	;RP0=1, select bank1
  2159  03F3  1303               	bcf	3,6	;RP1=0, select bank1
  2160  03F4  0264               	subwf	main@lux_select^(0+128),w
  2161  03F5  1C03               	skipc
  2162  03F6  2BF8               	goto	u3201
  2163  03F7  2BF9               	goto	u3200
  2164  03F8                     u3201:	
  2165  03F8  2C19               	goto	l255
  2166  03F9                     u3200:	
  2167  03F9                     l3691:	
  2168                           
  2169                           ;main.c: 304:                         {;main.c: 305:                             lux_sel
      +                          ect = 0;
  2170  03F9  01E4               	clrf	main@lux_select^(0+128)
  2171  03FA                     l3693:	
  2172                           
  2173                           ;main.c: 307:                             if (i == 0)
  2174  03FA  0865               	movf	main@i_485^(0+128),w
  2175  03FB  1D03               	btfss	3,2
  2176  03FC  2BFE               	goto	u3211
  2177  03FD  2BFF               	goto	u3210
  2178  03FE                     u3211:	
  2179  03FE  2C19               	goto	l255
  2180  03FF                     u3210:	
  2181  03FF                     l3695:	
  2182                           
  2183                           ;main.c: 308:                             {;main.c: 309:                                
      +                           UpdateTimes(Semafori);
  2184  03FF  3064               	movlw	(low (_Semafori| 0))& (0+255)
  2185  0400  120A  118A  2793  120A  118A  	fcall	_UpdateTimes
  2186  0405                     l3697:	
  2187                           
  2188                           ;main.c: 311:                                 time[0]=1;
  2189  0405  3001               	movlw	1
  2190  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2191  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2192  0408  00C9               	movwf	_time
  2193  0409  3000               	movlw	0
  2194  040A  00CA               	movwf	_time+1
  2195  040B                     l3699:	
  2196                           
  2197                           ;main.c: 312:                                 time[1]=1;
  2198  040B  3001               	movlw	1
  2199  040C  00CB               	movwf	_time+2
  2200  040D  3000               	movlw	0
  2201  040E  00CC               	movwf	_time+3
  2202  040F                     l3701:	
  2203                           
  2204                           ;main.c: 314:                                 (*Semafori[0]).lux_select = 0;
  2205  040F  0864               	movf	_Semafori,w
  2206  0410  3E0C               	addlw	12
  2207  0411  0084               	movwf	4
  2208  0412  1383               	bcf	3,7	;select IRP bank0
  2209  0413  0180               	clrf	0
  2210  0414                     l3703:	
  2211                           
  2212                           ;main.c: 315:                                 (*Semafori[1]).lux_select = 1;
  2213  0414  0865               	movf	low ((_Semafori| 0+1)),w
  2214  0415  3E0C               	addlw	12
  2215  0416  0084               	movwf	4
  2216  0417  0180               	clrf	0
  2217  0418  0A80               	incf	0,f
  2218  0419                     l255:	
  2219                           ;main.c: 318:                     }
  2220                           
  2221                           
  2222                           ;main.c: 320:                     luciSemaforo(i, lux_select);
  2223  0419  1683               	bsf	3,5	;RP0=1, select bank1
  2224  041A  1303               	bcf	3,6	;RP1=0, select bank1
  2225  041B  0864               	movf	main@lux_select^(0+128),w
  2226  041C  1283               	bcf	3,5	;RP0=0, select bank0
  2227  041D  1303               	bcf	3,6	;RP1=0, select bank0
  2228  041E  00C0               	movwf	??_main
  2229  041F  0840               	movf	??_main,w
  2230  0420  00A4               	movwf	luciSemaforo@lux
  2231  0421  1683               	bsf	3,5	;RP0=1, select bank1
  2232  0422  1303               	bcf	3,6	;RP1=0, select bank1
  2233  0423  0865               	movf	main@i_485^(0+128),w
  2234  0424  120A  158A  24DA  120A  118A  	fcall	_luciSemaforo
  2235  0429                     l3705:	
  2236                           
  2237                           ;main.c: 321:                     (*Semafori[i]).lux_select = lux_select;
  2238  0429  1683               	bsf	3,5	;RP0=1, select bank1
  2239  042A  1303               	bcf	3,6	;RP1=0, select bank1
  2240  042B  0864               	movf	main@lux_select^(0+128),w
  2241  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2242  042D  1303               	bcf	3,6	;RP1=0, select bank0
  2243  042E  00C0               	movwf	??_main
  2244  042F  1683               	bsf	3,5	;RP0=1, select bank1
  2245  0430  1303               	bcf	3,6	;RP1=0, select bank1
  2246  0431  0865               	movf	main@i_485^(0+128),w
  2247  0432  3E64               	addlw	(low (_Semafori| 0))& (0+255)
  2248  0433  0084               	movwf	4
  2249  0434  1383               	bcf	3,7	;select IRP bank0
  2250  0435  0800               	movf	0,w
  2251  0436  3E0C               	addlw	12
  2252  0437  0084               	movwf	4
  2253  0438  1283               	bcf	3,5	;RP0=0, select bank0
  2254  0439  1303               	bcf	3,6	;RP1=0, select bank0
  2255  043A  0840               	movf	??_main,w
  2256  043B  0080               	movwf	0
  2257  043C                     l3707:	
  2258                           
  2259                           ;main.c: 322:                     GetDigits(DigitsArr, i, (*Semafori[i]).times[lux_selec
      +                          t] - time[i]);
  2260  043C  1683               	bsf	3,5	;RP0=1, select bank1
  2261  043D  1303               	bcf	3,6	;RP1=0, select bank1
  2262  043E  0865               	movf	main@i_485^(0+128),w
  2263  043F  1283               	bcf	3,5	;RP0=0, select bank0
  2264  0440  1303               	bcf	3,6	;RP1=0, select bank0
  2265  0441  00C0               	movwf	??_main
  2266  0442  0840               	movf	??_main,w
  2267  0443  00B4               	movwf	GetDigits@index
  2268  0444  1683               	bsf	3,5	;RP0=1, select bank1
  2269  0445  1303               	bcf	3,6	;RP1=0, select bank1
  2270  0446  0865               	movf	main@i_485^(0+128),w
  2271  0447  1283               	bcf	3,5	;RP0=0, select bank0
  2272  0448  1303               	bcf	3,6	;RP1=0, select bank0
  2273  0449  00C1               	movwf	??_main+1
  2274  044A  0741               	addwf	??_main+1,w
  2275  044B  3E49               	addlw	(low (_time| 0))& (0+255)
  2276  044C  0084               	movwf	4
  2277  044D  0800               	movf	0,w
  2278  044E  00C2               	movwf	??_main+2
  2279  044F  0A84               	incf	4,f
  2280  0450  0800               	movf	0,w
  2281  0451  00C3               	movwf	??_main+3
  2282  0452  1683               	bsf	3,5	;RP0=1, select bank1
  2283  0453  1303               	bcf	3,6	;RP1=0, select bank1
  2284  0454  0865               	movf	main@i_485^(0+128),w
  2285  0455  3E64               	addlw	(low (_Semafori| 0))& (0+255)
  2286  0456  0084               	movwf	4
  2287  0457  0864               	movf	main@lux_select^(0+128),w
  2288  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2289  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2290  045A  00C4               	movwf	??_main+4
  2291  045B  0744               	addwf	??_main+4,w
  2292  045C  0700               	addwf	0,w
  2293  045D  00C5               	movwf	??_main+5
  2294  045E  0845               	movf	??_main+5,w
  2295  045F  0084               	movwf	4
  2296  0460  0800               	movf	0,w
  2297  0461  00C6               	movwf	??_main+6
  2298  0462  0A84               	incf	4,f
  2299  0463  0800               	movf	0,w
  2300  0464  00C7               	movwf	??_main+7
  2301  0465  0842               	movf	??_main+2,w
  2302  0466  0246               	subwf	??_main+6,w
  2303  0467  00B5               	movwf	GetDigits@Time
  2304  0468  0843               	movf	??_main+3,w
  2305  0469  1C03               	skipc
  2306  046A  0A43               	incf	??_main+3,w
  2307  046B  0247               	subwf	??_main+7,w
  2308  046C  00B6               	movwf	GetDigits@Time+1
  2309  046D  3062               	movlw	(low (_DigitsArr| 0))& (0+255)
  2310  046E  120A  118A  249A  120A  118A  	fcall	_GetDigits
  2311  0473                     l3709:	
  2312                           
  2313                           ;main.c: 324:             }
  2314  0473  3001               	movlw	1
  2315  0474  1283               	bcf	3,5	;RP0=0, select bank0
  2316  0475  1303               	bcf	3,6	;RP1=0, select bank0
  2317  0476  00C0               	movwf	??_main
  2318  0477  0840               	movf	??_main,w
  2319  0478  1683               	bsf	3,5	;RP0=1, select bank1
  2320  0479  1303               	bcf	3,6	;RP1=0, select bank1
  2321  047A  07E5               	addwf	main@i_485^(0+128),f
  2322  047B  2B7C               	goto	l3677
  2323  047C                     l3713:	
  2324                           
  2325                           ;main.c: 327:         ShowDigitsOnDisplay();
  2326  047C  120A  118A  26E6  120A  118A  	fcall	_ShowDigitsOnDisplay
  2327  0481                     l3715:	
  2328                           
  2329                           ;main.c: 333:         if (secondPassed.Bit && cycled.Bit)
  2330  0481  1283               	bcf	3,5	;RP0=0, select bank0
  2331  0482  1303               	bcf	3,6	;RP1=0, select bank0
  2332  0483  1C57               	btfss	_secondPassed,0
  2333  0484  2C86               	goto	u3221
  2334  0485  2C87               	goto	u3220
  2335  0486                     u3221:	
  2336  0486  2C8D               	goto	l258
  2337  0487                     u3220:	
  2338  0487                     l3717:	
  2339  0487  1C56               	btfss	_cycled,0
  2340  0488  2C8A               	goto	u3231
  2341  0489  2C8B               	goto	u3230
  2342  048A                     u3231:	
  2343  048A  2C8D               	goto	l258
  2344  048B                     u3230:	
  2345  048B                     l3719:	
  2346                           
  2347                           ;main.c: 334:         {;main.c: 335:             secondPassed.Bit = 0;
  2348  048B  1057               	bcf	_secondPassed,0
  2349                           
  2350                           ;main.c: 336:             cycled.Bit = 0;
  2351  048C  1056               	bcf	_cycled,0
  2352  048D                     l258:	
  2353                           ;main.c: 337:         }
  2354                           
  2355                           
  2356                           ;main.c: 338:         if (secondPassed.Bit && !cycled.Bit)
  2357  048D  1C57               	btfss	_secondPassed,0
  2358  048E  2C90               	goto	u3241
  2359  048F  2C91               	goto	u3240
  2360  0490                     u3241:	
  2361  0490  287B               	goto	l3563
  2362  0491                     u3240:	
  2363  0491                     l3721:	
  2364  0491  1856               	btfsc	_cycled,0
  2365  0492  2C94               	goto	u3251
  2366  0493  2C95               	goto	u3250
  2367  0494                     u3251:	
  2368  0494  287B               	goto	l3563
  2369  0495                     u3250:	
  2370  0495                     l3723:	
  2371                           
  2372                           ;main.c: 339:         {;main.c: 340:             cycled.Bit = 1;
  2373  0495  1456               	bsf	_cycled,0
  2374  0496  287B               	goto	l3563
  2375  0497  120A  118A  2810   	ljmp	start
  2376  049A                     __end_of_main:	
  2377                           
  2378                           	psect	text1
  2379  0B19                     __ptext1:	
  2380 ;; *************** function _sendByte *****************
  2381 ;; Defined at:
  2382 ;;		line 402 in file "main.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;  byte0           1    wreg     unsigned char 
  2385 ;;  byte1           1   24[BANK0 ] unsigned char 
  2386 ;;  valore          1   25[BANK0 ] unsigned char 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  byte0           1   29[BANK0 ] unsigned char 
  2389 ;;  i               1   31[BANK0 ] unsigned char 
  2390 ;;  txByte          1   30[BANK0 ] PTR unsigned char 
  2391 ;;		 -> BuildByte@txByte(5), 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2401 ;;      Params:         0       2       0       0       0
  2402 ;;      Locals:         0       3       0       0       0
  2403 ;;      Temps:          0       3       0       0       0
  2404 ;;      Totals:         0       8       0       0       0
  2405 ;;Total ram usage:        8 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    4
  2408 ;; This function calls:
  2409 ;;		_BuildByte
  2410 ;;		_UART_TxChar
  2411 ;; This function is called by:
  2412 ;;		_main
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           
  2417                           ;psect for function _sendByte
  2418  0B19                     _sendByte:	
  2419                           
  2420                           ;incstack = 0
  2421                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2422                           ;sendByte@byte0 stored from wreg
  2423  0B19  1283               	bcf	3,5	;RP0=0, select bank0
  2424  0B1A  1303               	bcf	3,6	;RP1=0, select bank0
  2425  0B1B  00BD               	movwf	sendByte@byte0
  2426  0B1C                     l3431:	
  2427                           
  2428                           ;main.c: 402: void sendByte(char byte0, char byte1, char valore);main.c: 403: {;main.c: 
      +                          404:     char *txByte;;main.c: 405:     txByte = BuildByte(byte0, byte1, valore);
  2429  0B1C  0838               	movf	sendByte@byte1,w
  2430  0B1D  00BA               	movwf	??_sendByte
  2431  0B1E  083A               	movf	??_sendByte,w
  2432  0B1F  00A4               	movwf	BuildByte@byte1
  2433  0B20  0839               	movf	sendByte@valore,w
  2434  0B21  00BB               	movwf	??_sendByte+1
  2435  0B22  083B               	movf	??_sendByte+1,w
  2436  0B23  00A5               	movwf	BuildByte@valore
  2437  0B24  083D               	movf	sendByte@byte0,w
  2438  0B25  120A  118A  2567  120A  158A  	fcall	_BuildByte
  2439  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  2440  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  2441  0B2C  00BC               	movwf	??_sendByte+2
  2442  0B2D  083C               	movf	??_sendByte+2,w
  2443  0B2E  00BE               	movwf	sendByte@txByte
  2444  0B2F                     l3433:	
  2445                           
  2446                           ;main.c: 407:     for (unsigned char i = 0; i < 5; i++)
  2447  0B2F  01BF               	clrf	sendByte@i
  2448  0B30                     l3439:	
  2449                           
  2450                           ;main.c: 408:     {;main.c: 409:         UART_TxChar(*(txByte++));
  2451  0B30  083E               	movf	sendByte@txByte,w
  2452  0B31  0084               	movwf	4
  2453  0B32  1383               	bcf	3,7	;select IRP bank0
  2454  0B33  0800               	movf	0,w
  2455  0B34  120A  158A  2284  120A  158A  	fcall	_UART_TxChar
  2456  0B39                     l3441:	
  2457  0B39  3001               	movlw	1
  2458  0B3A  1283               	bcf	3,5	;RP0=0, select bank0
  2459  0B3B  1303               	bcf	3,6	;RP1=0, select bank0
  2460  0B3C  00BA               	movwf	??_sendByte
  2461  0B3D  083A               	movf	??_sendByte,w
  2462  0B3E  07BE               	addwf	sendByte@txByte,f
  2463  0B3F                     l3443:	
  2464                           
  2465                           ;main.c: 410:     }
  2466  0B3F  3001               	movlw	1
  2467  0B40  00BA               	movwf	??_sendByte
  2468  0B41  083A               	movf	??_sendByte,w
  2469  0B42  07BF               	addwf	sendByte@i,f
  2470  0B43                     l3445:	
  2471  0B43  3005               	movlw	5
  2472  0B44  023F               	subwf	sendByte@i,w
  2473  0B45  1C03               	skipc
  2474  0B46  2B48               	goto	u2941
  2475  0B47  2B49               	goto	u2940
  2476  0B48                     u2941:	
  2477  0B48  2B30               	goto	l3439
  2478  0B49                     u2940:	
  2479  0B49                     l297:	
  2480  0B49  0008               	return
  2481  0B4A                     __end_of_sendByte:	
  2482                           
  2483                           	psect	text2
  2484  0A84                     __ptext2:	
  2485 ;; *************** function _UART_TxChar *****************
  2486 ;; Defined at:
  2487 ;;		line 377 in file "main.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;  ch              1    wreg     unsigned char 
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  ch              1    4[BANK0 ] unsigned char 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2501 ;;      Params:         0       0       0       0       0
  2502 ;;      Locals:         0       1       0       0       0
  2503 ;;      Temps:          0       0       0       0       0
  2504 ;;      Totals:         0       1       0       0       0
  2505 ;;Total ram usage:        1 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    3
  2508 ;; This function calls:
  2509 ;;		Nothing
  2510 ;; This function is called by:
  2511 ;;		_sendByte
  2512 ;;		_UART_Write_Text
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           
  2517                           ;psect for function _UART_TxChar
  2518  0A84                     _UART_TxChar:	
  2519                           
  2520                           ;incstack = 0
  2521                           ; Regs used in _UART_TxChar: [wreg]
  2522                           ;UART_TxChar@ch stored from wreg
  2523  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  2524  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  2525  0A86  00A4               	movwf	UART_TxChar@ch
  2526  0A87                     l3123:	
  2527  0A87                     l277:	
  2528                           ;main.c: 380:         ;
  2529                           
  2530                           
  2531                           ;main.c: 379:     while (!TXIF)
  2532  0A87  1E0C               	btfss	12,4	;volatile
  2533  0A88  2A8A               	goto	u2431
  2534  0A89  2A8B               	goto	u2430
  2535  0A8A                     u2431:	
  2536  0A8A  2A87               	goto	l277
  2537  0A8B                     u2430:	
  2538  0A8B                     l279:	
  2539                           
  2540                           ;main.c: 381:     TXIF = 0;
  2541  0A8B  120C               	bcf	12,4	;volatile
  2542  0A8C                     l3125:	
  2543                           
  2544                           ;main.c: 382:     TXREG = ch;
  2545  0A8C  0824               	movf	UART_TxChar@ch,w
  2546  0A8D  0099               	movwf	25	;volatile
  2547  0A8E                     l280:	
  2548  0A8E  0008               	return
  2549  0A8F                     __end_of_UART_TxChar:	
  2550                           
  2551                           	psect	text3
  2552  0567                     __ptext3:	
  2553 ;; *************** function _BuildByte *****************
  2554 ;; Defined at:
  2555 ;;		line 2 in file "./CustomLib/Serial.h"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;  byte0           1    wreg     unsigned char 
  2558 ;;  byte1           1    4[BANK0 ] unsigned char 
  2559 ;;  valore          1    5[BANK0 ] unsigned char 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  byte0           1    8[BANK0 ] unsigned char 
  2562 ;;  y               2   18[BANK0 ] int 
  2563 ;;  y               2   16[BANK0 ] int 
  2564 ;;  i               2   22[BANK0 ] int 
  2565 ;;  i               2   20[BANK0 ] int 
  2566 ;;  txByte          5    9[BANK0 ] unsigned char [5]
  2567 ;;  sommaColumn     1   15[BANK0 ] unsigned char 
  2568 ;;  sommaRow        1   14[BANK0 ] unsigned char 
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  1    wreg      PTR unsigned char 
  2571 ;; Registers used:
  2572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2578 ;;      Params:         0       2       0       0       0
  2579 ;;      Locals:         0      16       0       0       0
  2580 ;;      Temps:          0       2       0       0       0
  2581 ;;      Totals:         0      20       0       0       0
  2582 ;;Total ram usage:       20 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; Hardware stack levels required when called:    3
  2585 ;; This function calls:
  2586 ;;		Nothing
  2587 ;; This function is called by:
  2588 ;;		_sendByte
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           
  2593                           ;psect for function _BuildByte
  2594  0567                     _BuildByte:	
  2595                           
  2596                           ;incstack = 0
  2597                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2598                           ;BuildByte@byte0 stored from wreg
  2599  0567  1283               	bcf	3,5	;RP0=0, select bank0
  2600  0568  1303               	bcf	3,6	;RP1=0, select bank0
  2601  0569  00A8               	movwf	BuildByte@byte0
  2602  056A                     l3041:	
  2603                           
  2604                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2605  056A  0828               	movf	BuildByte@byte0,w
  2606  056B  397F               	andlw	127
  2607  056C  00A6               	movwf	??_BuildByte
  2608  056D  0826               	movf	??_BuildByte,w
  2609  056E  00A9               	movwf	BuildByte@txByte
  2610                           
  2611                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2612  056F  0824               	movf	BuildByte@byte1,w
  2613  0570  397F               	andlw	127
  2614  0571  00A6               	movwf	??_BuildByte
  2615  0572  0826               	movf	??_BuildByte,w
  2616  0573  00AA               	movwf	BuildByte@txByte+1
  2617                           
  2618                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2619  0574  0825               	movf	BuildByte@valore,w
  2620  0575  397F               	andlw	127
  2621  0576  00A6               	movwf	??_BuildByte
  2622  0577  0826               	movf	??_BuildByte,w
  2623  0578  00AB               	movwf	BuildByte@txByte+2
  2624  0579                     l3043:	
  2625                           
  2626                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2627  0579  0825               	movf	BuildByte@valore,w
  2628  057A  00A6               	movwf	??_BuildByte
  2629  057B  3007               	movlw	7
  2630  057C                     u2325:	
  2631  057C  1003               	clrc
  2632  057D  0CA6               	rrf	??_BuildByte,f
  2633  057E  3EFF               	addlw	-1
  2634  057F  1D03               	skipz
  2635  0580  2D7C               	goto	u2325
  2636  0581  0826               	movf	??_BuildByte,w
  2637  0582  397F               	andlw	127
  2638  0583  00A7               	movwf	??_BuildByte+1
  2639  0584  0827               	movf	??_BuildByte+1,w
  2640  0585  00AC               	movwf	BuildByte@txByte+3
  2641  0586                     l3045:	
  2642                           
  2643                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2644  0586  01AE               	clrf	BuildByte@sommaRow
  2645  0587                     l3047:	
  2646                           
  2647                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2648  0587  01AF               	clrf	BuildByte@sommaColumn
  2649  0588                     l3049:	
  2650                           
  2651                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2652  0588  01B4               	clrf	BuildByte@i
  2653  0589  01B5               	clrf	BuildByte@i+1
  2654  058A                     l3055:	
  2655                           
  2656                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2657  058A  1283               	bcf	3,5	;RP0=0, select bank0
  2658  058B  1303               	bcf	3,6	;RP1=0, select bank0
  2659  058C  01B0               	clrf	BuildByte@y
  2660  058D  01B1               	clrf	BuildByte@y+1
  2661  058E                     l3061:	
  2662                           
  2663                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2664  058E  1283               	bcf	3,5	;RP0=0, select bank0
  2665  058F  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0590  0834               	movf	BuildByte@i,w
  2667  0591  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2668  0592  0084               	movwf	4
  2669  0593  1383               	bcf	3,7	;select IRP bank0
  2670  0594  0800               	movf	0,w
  2671  0595  00A6               	movwf	??_BuildByte
  2672  0596  0A30               	incf	BuildByte@y,w
  2673  0597  2D9A               	goto	u2334
  2674  0598                     u2335:	
  2675  0598  1003               	clrc
  2676  0599  0CA6               	rrf	??_BuildByte,f
  2677  059A                     u2334:	
  2678  059A  3EFF               	addlw	-1
  2679  059B  1D03               	skipz
  2680  059C  2D98               	goto	u2335
  2681  059D  0826               	movf	??_BuildByte,w
  2682  059E  3901               	andlw	1
  2683  059F  00A7               	movwf	??_BuildByte+1
  2684  05A0  0827               	movf	??_BuildByte+1,w
  2685  05A1  07AE               	addwf	BuildByte@sommaRow,f
  2686  05A2                     l3063:	
  2687                           
  2688                           ;./CustomLib/Serial.h: 18:         }
  2689  05A2  3001               	movlw	1
  2690  05A3  07B0               	addwf	BuildByte@y,f
  2691  05A4  1803               	skipnc
  2692  05A5  0AB1               	incf	BuildByte@y+1,f
  2693  05A6  3000               	movlw	0
  2694  05A7  07B1               	addwf	BuildByte@y+1,f
  2695  05A8                     l3065:	
  2696  05A8  0831               	movf	BuildByte@y+1,w
  2697  05A9  3A80               	xorlw	128
  2698  05AA  00FF               	movwf	btemp+1
  2699  05AB  3080               	movlw	128
  2700  05AC  027F               	subwf	btemp+1,w
  2701  05AD  1D03               	skipz
  2702  05AE  2DB1               	goto	u2345
  2703  05AF  3008               	movlw	8
  2704  05B0  0230               	subwf	BuildByte@y,w
  2705  05B1                     u2345:	
  2706  05B1  1C03               	skipc
  2707  05B2  2DB4               	goto	u2341
  2708  05B3  2DB5               	goto	u2340
  2709  05B4                     u2341:	
  2710  05B4  2D8E               	goto	l3061
  2711  05B5                     u2340:	
  2712  05B5                     l105:	
  2713                           
  2714                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  2715  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  2716  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  2717  05B7  1C2E               	btfss	BuildByte@sommaRow,0
  2718  05B8  2DBA               	goto	u2351
  2719  05B9  2DBB               	goto	u2350
  2720  05BA                     u2351:	
  2721  05BA  2DC3               	goto	l3069
  2722  05BB                     u2350:	
  2723  05BB                     l3067:	
  2724                           
  2725                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  2726  05BB  3080               	movlw	128
  2727  05BC  00A6               	movwf	??_BuildByte
  2728  05BD  0834               	movf	BuildByte@i,w
  2729  05BE  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2730  05BF  0084               	movwf	4
  2731  05C0  0826               	movf	??_BuildByte,w
  2732  05C1  1383               	bcf	3,7	;select IRP bank0
  2733  05C2  0780               	addwf	0,f
  2734  05C3                     l3069:	
  2735                           
  2736                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  2737  05C3  01AE               	clrf	BuildByte@sommaRow
  2738  05C4                     l3073:	
  2739                           ;./CustomLib/Serial.h: 23:         }
  2740                           
  2741                           
  2742                           ;./CustomLib/Serial.h: 28:     }
  2743  05C4  3001               	movlw	1
  2744  05C5  07B4               	addwf	BuildByte@i,f
  2745  05C6  1803               	skipnc
  2746  05C7  0AB5               	incf	BuildByte@i+1,f
  2747  05C8  3000               	movlw	0
  2748  05C9  07B5               	addwf	BuildByte@i+1,f
  2749  05CA                     l3075:	
  2750  05CA  0835               	movf	BuildByte@i+1,w
  2751  05CB  3A80               	xorlw	128
  2752  05CC  00FF               	movwf	btemp+1
  2753  05CD  3080               	movlw	128
  2754  05CE  027F               	subwf	btemp+1,w
  2755  05CF  1D03               	skipz
  2756  05D0  2DD3               	goto	u2365
  2757  05D1  3004               	movlw	4
  2758  05D2  0234               	subwf	BuildByte@i,w
  2759  05D3                     u2365:	
  2760  05D3  1C03               	skipc
  2761  05D4  2DD6               	goto	u2361
  2762  05D5  2DD7               	goto	u2360
  2763  05D6                     u2361:	
  2764  05D6  2D8A               	goto	l3055
  2765  05D7                     u2360:	
  2766  05D7                     l3077:	
  2767                           
  2768                           ;./CustomLib/Serial.h: 31:     for (int i = 0; i < 8; i++)
  2769  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  2770  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  2771  05D9  01B6               	clrf	BuildByte@i_341
  2772  05DA  01B7               	clrf	BuildByte@i_341+1
  2773  05DB                     l3083:	
  2774                           
  2775                           ;./CustomLib/Serial.h: 32:     {;./CustomLib/Serial.h: 33:         for (int y = 0; y < 4
      +                          ; y++)
  2776  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  2777  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  2778  05DD  01B2               	clrf	BuildByte@y_342
  2779  05DE  01B3               	clrf	BuildByte@y_342+1
  2780  05DF                     l3089:	
  2781                           
  2782                           ;./CustomLib/Serial.h: 35:         {;./CustomLib/Serial.h: 36:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  2783  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  2784  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  2785  05E1  0832               	movf	BuildByte@y_342,w
  2786  05E2  3E29               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2787  05E3  0084               	movwf	4
  2788  05E4  1383               	bcf	3,7	;select IRP bank0
  2789  05E5  0800               	movf	0,w
  2790  05E6  00A6               	movwf	??_BuildByte
  2791  05E7  0A36               	incf	BuildByte@i_341,w
  2792  05E8  2DEB               	goto	u2374
  2793  05E9                     u2375:	
  2794  05E9  1003               	clrc
  2795  05EA  0CA6               	rrf	??_BuildByte,f
  2796  05EB                     u2374:	
  2797  05EB  3EFF               	addlw	-1
  2798  05EC  1D03               	skipz
  2799  05ED  2DE9               	goto	u2375
  2800  05EE  0826               	movf	??_BuildByte,w
  2801  05EF  3901               	andlw	1
  2802  05F0  00A7               	movwf	??_BuildByte+1
  2803  05F1  0827               	movf	??_BuildByte+1,w
  2804  05F2  07AF               	addwf	BuildByte@sommaColumn,f
  2805  05F3                     l3091:	
  2806                           
  2807                           ;./CustomLib/Serial.h: 37:         }
  2808  05F3  3001               	movlw	1
  2809  05F4  07B2               	addwf	BuildByte@y_342,f
  2810  05F5  1803               	skipnc
  2811  05F6  0AB3               	incf	BuildByte@y_342+1,f
  2812  05F7  3000               	movlw	0
  2813  05F8  07B3               	addwf	BuildByte@y_342+1,f
  2814  05F9                     l3093:	
  2815  05F9  0833               	movf	BuildByte@y_342+1,w
  2816  05FA  3A80               	xorlw	128
  2817  05FB  00FF               	movwf	btemp+1
  2818  05FC  3080               	movlw	128
  2819  05FD  027F               	subwf	btemp+1,w
  2820  05FE  1D03               	skipz
  2821  05FF  2E02               	goto	u2385
  2822  0600  3004               	movlw	4
  2823  0601  0232               	subwf	BuildByte@y_342,w
  2824  0602                     u2385:	
  2825  0602  1C03               	skipc
  2826  0603  2E05               	goto	u2381
  2827  0604  2E06               	goto	u2380
  2828  0605                     u2381:	
  2829  0605  2DDF               	goto	l3089
  2830  0606                     u2380:	
  2831  0606                     l111:	
  2832                           
  2833                           ;./CustomLib/Serial.h: 38:         if (sommaColumn % 2 == 1)
  2834  0606  1283               	bcf	3,5	;RP0=0, select bank0
  2835  0607  1303               	bcf	3,6	;RP1=0, select bank0
  2836  0608  1C2F               	btfss	BuildByte@sommaColumn,0
  2837  0609  2E0B               	goto	u2391
  2838  060A  2E0C               	goto	u2390
  2839  060B                     u2391:	
  2840  060B  2E19               	goto	l3097
  2841  060C                     u2390:	
  2842  060C                     l3095:	
  2843                           
  2844                           ;./CustomLib/Serial.h: 39:         {;./CustomLib/Serial.h: 40:             txByte[4] += 
      +                          0x01 << i;
  2845  060C  3001               	movlw	1
  2846  060D  00A6               	movwf	??_BuildByte
  2847  060E  0A36               	incf	BuildByte@i_341,w
  2848  060F  2E12               	goto	u2404
  2849  0610                     u2405:	
  2850  0610  1003               	clrc
  2851  0611  0DA6               	rlf	??_BuildByte,f
  2852  0612                     u2404:	
  2853  0612  3EFF               	addlw	-1
  2854  0613  1D03               	skipz
  2855  0614  2E10               	goto	u2405
  2856  0615  0826               	movf	??_BuildByte,w
  2857  0616  00A7               	movwf	??_BuildByte+1
  2858  0617  0827               	movf	??_BuildByte+1,w
  2859  0618  07AD               	addwf	BuildByte@txByte+4,f
  2860  0619                     l3097:	
  2861                           
  2862                           ;./CustomLib/Serial.h: 41:             sommaColumn = 0;
  2863  0619  01AF               	clrf	BuildByte@sommaColumn
  2864  061A                     l3101:	
  2865                           ;./CustomLib/Serial.h: 42:         }
  2866                           
  2867                           
  2868                           ;./CustomLib/Serial.h: 47:     }
  2869  061A  3001               	movlw	1
  2870  061B  07B6               	addwf	BuildByte@i_341,f
  2871  061C  1803               	skipnc
  2872  061D  0AB7               	incf	BuildByte@i_341+1,f
  2873  061E  3000               	movlw	0
  2874  061F  07B7               	addwf	BuildByte@i_341+1,f
  2875  0620                     l3103:	
  2876  0620  0837               	movf	BuildByte@i_341+1,w
  2877  0621  3A80               	xorlw	128
  2878  0622  00FF               	movwf	btemp+1
  2879  0623  3080               	movlw	128
  2880  0624  027F               	subwf	btemp+1,w
  2881  0625  1D03               	skipz
  2882  0626  2E29               	goto	u2415
  2883  0627  3008               	movlw	8
  2884  0628  0236               	subwf	BuildByte@i_341,w
  2885  0629                     u2415:	
  2886  0629  1C03               	skipc
  2887  062A  2E2C               	goto	u2411
  2888  062B  2E2D               	goto	u2410
  2889  062C                     u2411:	
  2890  062C  2DDB               	goto	l3083
  2891  062D                     u2410:	
  2892  062D                     l3105:	
  2893                           
  2894                           ;./CustomLib/Serial.h: 49:     return txByte;
  2895  062D  3029               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  2896  062E                     l114:	
  2897  062E  0008               	return
  2898  062F                     __end_of_BuildByte:	
  2899                           
  2900                           	psect	text4
  2901  0BFF                     __ptext4:	
  2902 ;; *************** function _rand *****************
  2903 ;; Defined at:
  2904 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;		None
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;		None
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  2   17[BANK0 ] int 
  2911 ;; Registers used:
  2912 ;;		wreg, status,2, status,0, pclath, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2918 ;;      Params:         0       2       0       0       0
  2919 ;;      Locals:         0       0       0       0       0
  2920 ;;      Temps:          0       5       0       0       0
  2921 ;;      Totals:         0       7       0       0       0
  2922 ;;Total ram usage:        7 bytes
  2923 ;; Hardware stack levels used:    1
  2924 ;; Hardware stack levels required when called:    4
  2925 ;; This function calls:
  2926 ;;		___lmul
  2927 ;; This function is called by:
  2928 ;;		_main
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           
  2933                           ;psect for function _rand
  2934  0BFF                     _rand:	
  2935  0BFF                     l3423:	
  2936                           ;incstack = 0
  2937                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  2938                           
  2939  0BFF  1283               	bcf	3,5	;RP0=0, select bank0
  2940  0C00  1303               	bcf	3,6	;RP1=0, select bank0
  2941  0C01  0861               	movf	_randx+3,w
  2942  0C02  00A7               	movwf	___lmul@multiplier+3
  2943  0C03  0860               	movf	_randx+2,w
  2944  0C04  00A6               	movwf	___lmul@multiplier+2
  2945  0C05  085F               	movf	_randx+1,w
  2946  0C06  00A5               	movwf	___lmul@multiplier+1
  2947  0C07  085E               	movf	_randx,w
  2948  0C08  00A4               	movwf	___lmul@multiplier
  2949  0C09  3041               	movlw	65
  2950  0C0A  00AB               	movwf	___lmul@multiplicand+3
  2951  0C0B  30C6               	movlw	198
  2952  0C0C  00AA               	movwf	___lmul@multiplicand+2
  2953  0C0D  304E               	movlw	78
  2954  0C0E  00A9               	movwf	___lmul@multiplicand+1
  2955  0C0F  306D               	movlw	109
  2956  0C10  00A8               	movwf	___lmul@multiplicand
  2957  0C11  120A  158A  2446  120A  158A  	fcall	___lmul
  2958  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  2959  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  2960  0C18  0827               	movf	?___lmul+3,w
  2961  0C19  00E1               	movwf	_randx+3
  2962  0C1A  0826               	movf	?___lmul+2,w
  2963  0C1B  00E0               	movwf	_randx+2
  2964  0C1C  0825               	movf	?___lmul+1,w
  2965  0C1D  00DF               	movwf	_randx+1
  2966  0C1E  0824               	movf	?___lmul,w
  2967  0C1F  00DE               	movwf	_randx
  2968  0C20                     l3425:	
  2969  0C20  3039               	movlw	57
  2970  0C21  07DE               	addwf	_randx,f
  2971  0C22  3030               	movlw	48
  2972  0C23  1803               	skipnc
  2973  0C24  3031               	movlw	49
  2974  0C25  07DF               	addwf	_randx+1,f
  2975  0C26  3000               	movlw	0
  2976  0C27  1803               	skipnc
  2977  0C28  3001               	movlw	1
  2978  0C29  07E0               	addwf	_randx+2,f
  2979  0C2A  3000               	movlw	0
  2980  0C2B  1803               	skipnc
  2981  0C2C  3001               	movlw	1
  2982  0C2D  07E1               	addwf	_randx+3,f
  2983  0C2E                     l3427:	
  2984  0C2E  085E               	movf	_randx,w
  2985  0C2F  00B3               	movwf	??_rand
  2986  0C30  085F               	movf	_randx+1,w
  2987  0C31  00B4               	movwf	??_rand+1
  2988  0C32  0860               	movf	_randx+2,w
  2989  0C33  00B5               	movwf	??_rand+2
  2990  0C34  0861               	movf	_randx+3,w
  2991  0C35  00B6               	movwf	??_rand+3
  2992  0C36  3010               	movlw	16
  2993  0C37  00B7               	movwf	??_rand+4
  2994  0C38                     u2935:	
  2995  0C38  0D36               	rlf	??_rand+3,w
  2996  0C39  0CB6               	rrf	??_rand+3,f
  2997  0C3A  0CB5               	rrf	??_rand+2,f
  2998  0C3B  0CB4               	rrf	??_rand+1,f
  2999  0C3C  0CB3               	rrf	??_rand,f
  3000  0C3D                     u2930:	
  3001  0C3D  0BB7               	decfsz	??_rand+4,f
  3002  0C3E  2C38               	goto	u2935
  3003  0C3F  30FF               	movlw	255
  3004  0C40  0533               	andwf	??_rand,w
  3005  0C41  00B1               	movwf	?_rand
  3006  0C42  307F               	movlw	127
  3007  0C43  0534               	andwf	??_rand+1,w
  3008  0C44  00B2               	movwf	?_rand+1
  3009  0C45                     l889:	
  3010  0C45  0008               	return
  3011  0C46                     __end_of_rand:	
  3012                           
  3013                           	psect	text5
  3014  0C46                     __ptext5:	
  3015 ;; *************** function ___lmul *****************
  3016 ;; Defined at:
  3017 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  multiplier      4    4[BANK0 ] unsigned long 
  3020 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  product         4   13[BANK0 ] unsigned long 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  4    4[BANK0 ] unsigned long 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3032 ;;      Params:         0       8       0       0       0
  3033 ;;      Locals:         0       4       0       0       0
  3034 ;;      Temps:          0       1       0       0       0
  3035 ;;      Totals:         0      13       0       0       0
  3036 ;;Total ram usage:       13 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    3
  3039 ;; This function calls:
  3040 ;;		Nothing
  3041 ;; This function is called by:
  3042 ;;		_rand
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           
  3047                           ;psect for function ___lmul
  3048  0C46                     ___lmul:	
  3049  0C46                     l3159:	
  3050                           ;incstack = 0
  3051                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3052                           
  3053  0C46  3000               	movlw	0
  3054  0C47  1283               	bcf	3,5	;RP0=0, select bank0
  3055  0C48  1303               	bcf	3,6	;RP1=0, select bank0
  3056  0C49  00B0               	movwf	___lmul@product+3
  3057  0C4A  3000               	movlw	0
  3058  0C4B  00AF               	movwf	___lmul@product+2
  3059  0C4C  3000               	movlw	0
  3060  0C4D  00AE               	movwf	___lmul@product+1
  3061  0C4E  3000               	movlw	0
  3062  0C4F  00AD               	movwf	___lmul@product
  3063  0C50                     l3161:	
  3064  0C50  1C24               	btfss	___lmul@multiplier,0
  3065  0C51  2C53               	goto	u2481
  3066  0C52  2C54               	goto	u2480
  3067  0C53                     u2481:	
  3068  0C53  2C6B               	goto	l3165
  3069  0C54                     u2480:	
  3070  0C54                     l3163:	
  3071  0C54  0828               	movf	___lmul@multiplicand,w
  3072  0C55  07AD               	addwf	___lmul@product,f
  3073  0C56  0829               	movf	___lmul@multiplicand+1,w
  3074  0C57  1103               	clrz
  3075  0C58  1803               	skipnc
  3076  0C59  3E01               	addlw	1
  3077  0C5A  1903               	skipnz
  3078  0C5B  2C5D               	goto	u2491
  3079  0C5C  07AE               	addwf	___lmul@product+1,f
  3080  0C5D                     u2491:	
  3081  0C5D  082A               	movf	___lmul@multiplicand+2,w
  3082  0C5E  1103               	clrz
  3083  0C5F  1803               	skipnc
  3084  0C60  3E01               	addlw	1
  3085  0C61  1903               	skipnz
  3086  0C62  2C64               	goto	u2492
  3087  0C63  07AF               	addwf	___lmul@product+2,f
  3088  0C64                     u2492:	
  3089  0C64  082B               	movf	___lmul@multiplicand+3,w
  3090  0C65  1103               	clrz
  3091  0C66  1803               	skipnc
  3092  0C67  3E01               	addlw	1
  3093  0C68  1903               	skipnz
  3094  0C69  2C6B               	goto	u2493
  3095  0C6A  07B0               	addwf	___lmul@product+3,f
  3096  0C6B                     u2493:	
  3097  0C6B                     l3165:	
  3098  0C6B  3001               	movlw	1
  3099  0C6C  00AC               	movwf	??___lmul
  3100  0C6D                     u2505:	
  3101  0C6D  1003               	clrc
  3102  0C6E  0DA8               	rlf	___lmul@multiplicand,f
  3103  0C6F  0DA9               	rlf	___lmul@multiplicand+1,f
  3104  0C70  0DAA               	rlf	___lmul@multiplicand+2,f
  3105  0C71  0DAB               	rlf	___lmul@multiplicand+3,f
  3106  0C72  0BAC               	decfsz	??___lmul,f
  3107  0C73  2C6D               	goto	u2505
  3108  0C74                     l3167:	
  3109  0C74  3001               	movlw	1
  3110  0C75                     u2515:	
  3111  0C75  1003               	clrc
  3112  0C76  0CA7               	rrf	___lmul@multiplier+3,f
  3113  0C77  0CA6               	rrf	___lmul@multiplier+2,f
  3114  0C78  0CA5               	rrf	___lmul@multiplier+1,f
  3115  0C79  0CA4               	rrf	___lmul@multiplier,f
  3116  0C7A  3EFF               	addlw	-1
  3117  0C7B  1D03               	skipz
  3118  0C7C  2C75               	goto	u2515
  3119  0C7D  0827               	movf	___lmul@multiplier+3,w
  3120  0C7E  0426               	iorwf	___lmul@multiplier+2,w
  3121  0C7F  0425               	iorwf	___lmul@multiplier+1,w
  3122  0C80  0424               	iorwf	___lmul@multiplier,w
  3123  0C81  1D03               	skipz
  3124  0C82  2C84               	goto	u2521
  3125  0C83  2C85               	goto	u2520
  3126  0C84                     u2521:	
  3127  0C84  2C50               	goto	l3161
  3128  0C85                     u2520:	
  3129  0C85                     l3169:	
  3130  0C85  0830               	movf	___lmul@product+3,w
  3131  0C86  00A7               	movwf	?___lmul+3
  3132  0C87  082F               	movf	___lmul@product+2,w
  3133  0C88  00A6               	movwf	?___lmul+2
  3134  0C89  082E               	movf	___lmul@product+1,w
  3135  0C8A  00A5               	movwf	?___lmul+1
  3136  0C8B  082D               	movf	___lmul@product,w
  3137  0C8C  00A4               	movwf	?___lmul
  3138  0C8D                     l453:	
  3139  0C8D  0008               	return
  3140  0C8E                     __end_of___lmul:	
  3141                           
  3142                           	psect	text6
  3143  0B4A                     __ptext6:	
  3144 ;; *************** function _map *****************
  3145 ;; Defined at:
  3146 ;;		line 127 in file "./CustomLib/TrafficLight.h"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  x               2   20[BANK0 ] int 
  3149 ;;  in_min          2   22[BANK0 ] int 
  3150 ;;  in_max          2   24[BANK0 ] int 
  3151 ;;  out_min         2   26[BANK0 ] int 
  3152 ;;  out_max         2   28[BANK0 ] int 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;		None
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  2   20[BANK0 ] int 
  3157 ;; Registers used:
  3158 ;;		wreg, status,2, status,0, pclath, cstack
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3164 ;;      Params:         0      10       0       0       0
  3165 ;;      Locals:         0       0       0       0       0
  3166 ;;      Temps:          0       0       0       0       0
  3167 ;;      Totals:         0      10       0       0       0
  3168 ;;Total ram usage:       10 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    4
  3171 ;; This function calls:
  3172 ;;		___awdiv
  3173 ;;		___wmul
  3174 ;; This function is called by:
  3175 ;;		_main
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           
  3180                           ;psect for function _map
  3181  0B4A                     _map:	
  3182  0B4A                     l3401:	
  3183                           ;incstack = 0
  3184                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3185                           
  3186                           
  3187                           ;./CustomLib/TrafficLight.h: 127: int map(int x, int in_min, int in_max, int out_min, in
      +                          t out_max);./CustomLib/TrafficLight.h: 128: {;./CustomLib/TrafficLight.h: 129:     retur
      +                          n (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3188  0B4A  1283               	bcf	3,5	;RP0=0, select bank0
  3189  0B4B  1303               	bcf	3,6	;RP1=0, select bank0
  3190  0B4C  0836               	movf	map@in_min,w
  3191  0B4D  0238               	subwf	map@in_max,w
  3192  0B4E  00AB               	movwf	___awdiv@divisor
  3193  0B4F  0837               	movf	map@in_min+1,w
  3194  0B50  1C03               	skipc
  3195  0B51  0A37               	incf	map@in_min+1,w
  3196  0B52  0239               	subwf	map@in_max+1,w
  3197  0B53  00AC               	movwf	___awdiv@divisor+1
  3198  0B54  0836               	movf	map@in_min,w
  3199  0B55  0234               	subwf	map@x,w
  3200  0B56  00A4               	movwf	___wmul@multiplier
  3201  0B57  0837               	movf	map@in_min+1,w
  3202  0B58  1C03               	skipc
  3203  0B59  0A37               	incf	map@in_min+1,w
  3204  0B5A  0235               	subwf	map@x+1,w
  3205  0B5B  00A5               	movwf	___wmul@multiplier+1
  3206  0B5C  083A               	movf	map@out_min,w
  3207  0B5D  023C               	subwf	map@out_max,w
  3208  0B5E  00A6               	movwf	___wmul@multiplicand
  3209  0B5F  083B               	movf	map@out_min+1,w
  3210  0B60  1C03               	skipc
  3211  0B61  0A3B               	incf	map@out_min+1,w
  3212  0B62  023D               	subwf	map@out_max+1,w
  3213  0B63  00A7               	movwf	___wmul@multiplicand+1
  3214  0B64  120A  158A  22F2  120A  158A  	fcall	___wmul
  3215  0B69  1283               	bcf	3,5	;RP0=0, select bank0
  3216  0B6A  1303               	bcf	3,6	;RP1=0, select bank0
  3217  0B6B  0825               	movf	?___wmul+1,w
  3218  0B6C  00AE               	movwf	___awdiv@dividend+1
  3219  0B6D  0824               	movf	?___wmul,w
  3220  0B6E  00AD               	movwf	___awdiv@dividend
  3221  0B6F  120A  158A  26FA  120A  158A  	fcall	___awdiv
  3222  0B74  1283               	bcf	3,5	;RP0=0, select bank0
  3223  0B75  1303               	bcf	3,6	;RP1=0, select bank0
  3224  0B76  083A               	movf	map@out_min,w
  3225  0B77  072B               	addwf	?___awdiv,w
  3226  0B78  00B4               	movwf	?_map
  3227  0B79  083B               	movf	map@out_min+1,w
  3228  0B7A  1803               	skipnc
  3229  0B7B  0A3B               	incf	map@out_min+1,w
  3230  0B7C  072C               	addwf	?___awdiv+1,w
  3231  0B7D  00B5               	movwf	?_map+1
  3232  0B7E                     l169:	
  3233  0B7E  0008               	return
  3234  0B7F                     __end_of_map:	
  3235                           
  3236                           	psect	text7
  3237  0AF2                     __ptext7:	
  3238 ;; *************** function ___wmul *****************
  3239 ;; Defined at:
  3240 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  multiplier      2    4[BANK0 ] unsigned int 
  3243 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  product         2    8[BANK0 ] unsigned int 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  2    4[BANK0 ] unsigned int 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3255 ;;      Params:         0       4       0       0       0
  3256 ;;      Locals:         0       2       0       0       0
  3257 ;;      Temps:          0       0       0       0       0
  3258 ;;      Totals:         0       6       0       0       0
  3259 ;;Total ram usage:        6 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    3
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_map
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           
  3270                           ;psect for function ___wmul
  3271  0AF2                     ___wmul:	
  3272  0AF2                     l3145:	
  3273                           ;incstack = 0
  3274                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3275                           
  3276  0AF2  1283               	bcf	3,5	;RP0=0, select bank0
  3277  0AF3  1303               	bcf	3,6	;RP1=0, select bank0
  3278  0AF4  01A8               	clrf	___wmul@product
  3279  0AF5  01A9               	clrf	___wmul@product+1
  3280  0AF6                     l3147:	
  3281  0AF6  1C24               	btfss	___wmul@multiplier,0
  3282  0AF7  2AF9               	goto	u2441
  3283  0AF8  2AFA               	goto	u2440
  3284  0AF9                     u2441:	
  3285  0AF9  2B00               	goto	l439
  3286  0AFA                     u2440:	
  3287  0AFA                     l3149:	
  3288  0AFA  0826               	movf	___wmul@multiplicand,w
  3289  0AFB  07A8               	addwf	___wmul@product,f
  3290  0AFC  1803               	skipnc
  3291  0AFD  0AA9               	incf	___wmul@product+1,f
  3292  0AFE  0827               	movf	___wmul@multiplicand+1,w
  3293  0AFF  07A9               	addwf	___wmul@product+1,f
  3294  0B00                     l439:	
  3295  0B00  3001               	movlw	1
  3296  0B01                     u2455:	
  3297  0B01  1003               	clrc
  3298  0B02  0DA6               	rlf	___wmul@multiplicand,f
  3299  0B03  0DA7               	rlf	___wmul@multiplicand+1,f
  3300  0B04  3EFF               	addlw	-1
  3301  0B05  1D03               	skipz
  3302  0B06  2B01               	goto	u2455
  3303  0B07                     l3151:	
  3304  0B07  3001               	movlw	1
  3305  0B08                     u2465:	
  3306  0B08  1003               	clrc
  3307  0B09  0CA5               	rrf	___wmul@multiplier+1,f
  3308  0B0A  0CA4               	rrf	___wmul@multiplier,f
  3309  0B0B  3EFF               	addlw	-1
  3310  0B0C  1D03               	skipz
  3311  0B0D  2B08               	goto	u2465
  3312  0B0E                     l3153:	
  3313  0B0E  0824               	movf	___wmul@multiplier,w
  3314  0B0F  0425               	iorwf	___wmul@multiplier+1,w
  3315  0B10  1D03               	btfss	3,2
  3316  0B11  2B13               	goto	u2471
  3317  0B12  2B14               	goto	u2470
  3318  0B13                     u2471:	
  3319  0B13  2AF6               	goto	l3147
  3320  0B14                     u2470:	
  3321  0B14                     l3155:	
  3322  0B14  0829               	movf	___wmul@product+1,w
  3323  0B15  00A5               	movwf	?___wmul+1
  3324  0B16  0828               	movf	___wmul@product,w
  3325  0B17  00A4               	movwf	?___wmul
  3326  0B18                     l441:	
  3327  0B18  0008               	return
  3328  0B19                     __end_of___wmul:	
  3329                           
  3330                           	psect	text8
  3331  0CDA                     __ptext8:	
  3332 ;; *************** function _luciSemaforo *****************
  3333 ;; Defined at:
  3334 ;;		line 434 in file "main.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  index           1    wreg     unsigned char 
  3337 ;;  lux             1    4[BANK0 ] unsigned char 
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;  index           1    7[BANK0 ] unsigned char 
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3349 ;;      Params:         0       1       0       0       0
  3350 ;;      Locals:         0       1       0       0       0
  3351 ;;      Temps:          0       2       0       0       0
  3352 ;;      Totals:         0       4       0       0       0
  3353 ;;Total ram usage:        4 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    3
  3356 ;; This function calls:
  3357 ;;		Nothing
  3358 ;; This function is called by:
  3359 ;;		_main
  3360 ;; This function uses a non-reentrant model
  3361 ;;
  3362                           
  3363                           
  3364                           ;psect for function _luciSemaforo
  3365  0CDA                     _luciSemaforo:	
  3366                           
  3367                           ;incstack = 0
  3368                           ; Regs used in _luciSemaforo: [wreg-fsr0h+status,2+status,0]
  3369                           ;luciSemaforo@index stored from wreg
  3370  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  3371  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  3372  0CDC  00A7               	movwf	luciSemaforo@index
  3373  0CDD                     l3457:	
  3374                           
  3375                           ;main.c: 434: void luciSemaforo(unsigned char index, unsigned char lux);main.c: 435: {;m
      +                          ain.c: 436:     switch (index)
  3376  0CDD  2D1C               	goto	l3469
  3377  0CDE                     l311:	
  3378                           ;main.c: 440:         {;main.c: 441:         case 0:
  3379                           
  3380                           
  3381                           ;main.c: 442:             PORTCbits.RC1 = 0;
  3382  0CDE  1087               	bcf	7,1	;volatile
  3383                           
  3384                           ;main.c: 443:             PORTCbits.RC2 = 0;
  3385  0CDF  1107               	bcf	7,2	;volatile
  3386                           
  3387                           ;main.c: 444:             PORTCbits.RC0 = 1;
  3388  0CE0  1407               	bsf	7,0	;volatile
  3389                           
  3390                           ;main.c: 445:             break;
  3391  0CE1  2D2C               	goto	l322
  3392  0CE2                     l313:	
  3393                           ;main.c: 446:         case 1:
  3394                           
  3395                           
  3396                           ;main.c: 447:             PORTCbits.RC0 = 0;
  3397  0CE2  1007               	bcf	7,0	;volatile
  3398                           
  3399                           ;main.c: 448:             PORTCbits.RC2 = 0;
  3400  0CE3  1107               	bcf	7,2	;volatile
  3401                           
  3402                           ;main.c: 449:             PORTCbits.RC1 = 1;
  3403  0CE4  1487               	bsf	7,1	;volatile
  3404                           
  3405                           ;main.c: 450:             break;
  3406  0CE5  2D2C               	goto	l322
  3407  0CE6                     l314:	
  3408                           ;main.c: 451:         case 2:
  3409                           
  3410                           
  3411                           ;main.c: 452:             PORTCbits.RC0 = 0;
  3412  0CE6  1007               	bcf	7,0	;volatile
  3413                           
  3414                           ;main.c: 453:             PORTCbits.RC1 = 0;
  3415  0CE7  1087               	bcf	7,1	;volatile
  3416                           
  3417                           ;main.c: 454:             PORTCbits.RC2 = 1;
  3418  0CE8  1507               	bsf	7,2	;volatile
  3419                           
  3420                           ;main.c: 455:             break;
  3421  0CE9  2D2C               	goto	l322
  3422  0CEA                     l3461:	
  3423  0CEA  0824               	movf	luciSemaforo@lux,w
  3424  0CEB  00A5               	movwf	??_luciSemaforo
  3425  0CEC  01A6               	clrf	??_luciSemaforo+1
  3426                           
  3427                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3428                           ; Switch size 1, requested type "simple"
  3429                           ; Number of cases is 1, Range of values is 0 to 0
  3430                           ; switch strategies available:
  3431                           ; Name         Instructions Cycles
  3432                           ; simple_byte            4     3 (average)
  3433                           ; direct_byte           11     8 (fixed)
  3434                           ; jumptable            260     6 (fixed)
  3435                           ;	Chosen strategy is simple_byte
  3436  0CED  0826               	movf	??_luciSemaforo+1,w
  3437  0CEE  3A00               	xorlw	0	; case 0
  3438  0CEF  1903               	skipnz
  3439  0CF0  2CF2               	goto	l3969
  3440  0CF1  2D2C               	goto	l322
  3441  0CF2                     l3969:	
  3442                           
  3443                           ; Switch size 1, requested type "simple"
  3444                           ; Number of cases is 3, Range of values is 0 to 2
  3445                           ; switch strategies available:
  3446                           ; Name         Instructions Cycles
  3447                           ; simple_byte           10     6 (average)
  3448                           ; direct_byte           17     8 (fixed)
  3449                           ; jumptable            260     6 (fixed)
  3450                           ;	Chosen strategy is simple_byte
  3451  0CF2  0825               	movf	??_luciSemaforo,w
  3452  0CF3  3A00               	xorlw	0	; case 0
  3453  0CF4  1903               	skipnz
  3454  0CF5  2CDE               	goto	l311
  3455  0CF6  3A01               	xorlw	1	; case 1
  3456  0CF7  1903               	skipnz
  3457  0CF8  2CE2               	goto	l313
  3458  0CF9  3A03               	xorlw	3	; case 2
  3459  0CFA  1903               	skipnz
  3460  0CFB  2CE6               	goto	l314
  3461  0CFC  2D2C               	goto	l322
  3462  0CFD                     l318:	
  3463                           ;main.c: 461:         {;main.c: 462:         case 0:
  3464                           
  3465                           
  3466                           ;main.c: 463:             PORTBbits.RB1 = 0;
  3467  0CFD  1086               	bcf	6,1	;volatile
  3468                           
  3469                           ;main.c: 464:             PORTBbits.RB6 = 0;
  3470  0CFE  1306               	bcf	6,6	;volatile
  3471                           
  3472                           ;main.c: 465:             PORTBbits.RB7 = 1;
  3473  0CFF  1786               	bsf	6,7	;volatile
  3474                           
  3475                           ;main.c: 466:             break;
  3476  0D00  2D2C               	goto	l322
  3477  0D01                     l320:	
  3478                           ;main.c: 467:         case 1:
  3479                           
  3480                           
  3481                           ;main.c: 468:             PORTBbits.RB7 = 0;
  3482  0D01  1386               	bcf	6,7	;volatile
  3483                           
  3484                           ;main.c: 469:             PORTBbits.RB6 = 0;
  3485  0D02  1306               	bcf	6,6	;volatile
  3486                           
  3487                           ;main.c: 470:             PORTBbits.RB1 = 1;
  3488  0D03  1486               	bsf	6,1	;volatile
  3489                           
  3490                           ;main.c: 471:             break;
  3491  0D04  2D2C               	goto	l322
  3492  0D05                     l321:	
  3493                           ;main.c: 472:         case 2:
  3494                           
  3495                           
  3496                           ;main.c: 473:             PORTBbits.RB7 = 0;
  3497  0D05  1386               	bcf	6,7	;volatile
  3498                           
  3499                           ;main.c: 474:             PORTBbits.RB1 = 0;
  3500  0D06  1086               	bcf	6,1	;volatile
  3501                           
  3502                           ;main.c: 475:             PORTBbits.RB6 = 1;
  3503  0D07  1706               	bsf	6,6	;volatile
  3504                           
  3505                           ;main.c: 476:             break;
  3506  0D08  2D2C               	goto	l322
  3507  0D09                     l3465:	
  3508  0D09  0824               	movf	luciSemaforo@lux,w
  3509  0D0A  00A5               	movwf	??_luciSemaforo
  3510  0D0B  01A6               	clrf	??_luciSemaforo+1
  3511                           
  3512                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3513                           ; Switch size 1, requested type "simple"
  3514                           ; Number of cases is 1, Range of values is 0 to 0
  3515                           ; switch strategies available:
  3516                           ; Name         Instructions Cycles
  3517                           ; simple_byte            4     3 (average)
  3518                           ; direct_byte           11     8 (fixed)
  3519                           ; jumptable            260     6 (fixed)
  3520                           ;	Chosen strategy is simple_byte
  3521  0D0C  0826               	movf	??_luciSemaforo+1,w
  3522  0D0D  3A00               	xorlw	0	; case 0
  3523  0D0E  1903               	skipnz
  3524  0D0F  2D11               	goto	l3971
  3525  0D10  2D2C               	goto	l322
  3526  0D11                     l3971:	
  3527                           
  3528                           ; Switch size 1, requested type "simple"
  3529                           ; Number of cases is 3, Range of values is 0 to 2
  3530                           ; switch strategies available:
  3531                           ; Name         Instructions Cycles
  3532                           ; simple_byte           10     6 (average)
  3533                           ; direct_byte           17     8 (fixed)
  3534                           ; jumptable            260     6 (fixed)
  3535                           ;	Chosen strategy is simple_byte
  3536  0D11  0825               	movf	??_luciSemaforo,w
  3537  0D12  3A00               	xorlw	0	; case 0
  3538  0D13  1903               	skipnz
  3539  0D14  2CFD               	goto	l318
  3540  0D15  3A01               	xorlw	1	; case 1
  3541  0D16  1903               	skipnz
  3542  0D17  2D01               	goto	l320
  3543  0D18  3A03               	xorlw	3	; case 2
  3544  0D19  1903               	skipnz
  3545  0D1A  2D05               	goto	l321
  3546  0D1B  2D2C               	goto	l322
  3547  0D1C                     l3469:	
  3548  0D1C  0827               	movf	luciSemaforo@index,w
  3549  0D1D  00A5               	movwf	??_luciSemaforo
  3550  0D1E  01A6               	clrf	??_luciSemaforo+1
  3551                           
  3552                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3553                           ; Switch size 1, requested type "simple"
  3554                           ; Number of cases is 1, Range of values is 0 to 0
  3555                           ; switch strategies available:
  3556                           ; Name         Instructions Cycles
  3557                           ; simple_byte            4     3 (average)
  3558                           ; direct_byte           11     8 (fixed)
  3559                           ; jumptable            260     6 (fixed)
  3560                           ;	Chosen strategy is simple_byte
  3561  0D1F  0826               	movf	??_luciSemaforo+1,w
  3562  0D20  3A00               	xorlw	0	; case 0
  3563  0D21  1903               	skipnz
  3564  0D22  2D24               	goto	l3973
  3565  0D23  2D2C               	goto	l322
  3566  0D24                     l3973:	
  3567                           
  3568                           ; Switch size 1, requested type "simple"
  3569                           ; Number of cases is 2, Range of values is 0 to 1
  3570                           ; switch strategies available:
  3571                           ; Name         Instructions Cycles
  3572                           ; simple_byte            7     4 (average)
  3573                           ; direct_byte           14     8 (fixed)
  3574                           ; jumptable            260     6 (fixed)
  3575                           ;	Chosen strategy is simple_byte
  3576  0D24  0825               	movf	??_luciSemaforo,w
  3577  0D25  3A00               	xorlw	0	; case 0
  3578  0D26  1903               	skipnz
  3579  0D27  2CEA               	goto	l3461
  3580  0D28  3A01               	xorlw	1	; case 1
  3581  0D29  1903               	skipnz
  3582  0D2A  2D09               	goto	l3465
  3583  0D2B  2D2C               	goto	l322
  3584  0D2C                     l322:	
  3585  0D2C  0008               	return
  3586  0D2D                     __end_of_luciSemaforo:	
  3587                           
  3588                           	psect	text9
  3589  0A8F                     __ptext9:	
  3590 ;; *************** function _init_ADC *****************
  3591 ;; Defined at:
  3592 ;;		line 346 in file "main.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;		None
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;		None
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		wreg, status,2
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3606 ;;      Params:         0       0       0       0       0
  3607 ;;      Locals:         0       0       0       0       0
  3608 ;;      Temps:          0       1       0       0       0
  3609 ;;      Totals:         0       1       0       0       0
  3610 ;;Total ram usage:        1 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    3
  3613 ;; This function calls:
  3614 ;;		Nothing
  3615 ;; This function is called by:
  3616 ;;		_main
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           
  3621                           ;psect for function _init_ADC
  3622  0A8F                     _init_ADC:	
  3623  0A8F                     l3405:	
  3624                           ;incstack = 0
  3625                           ; Regs used in _init_ADC: [wreg+status,2]
  3626                           
  3627                           
  3628                           ;main.c: 348:     TRISA = 0xE3;
  3629  0A8F  30E3               	movlw	227
  3630  0A90  1683               	bsf	3,5	;RP0=1, select bank1
  3631  0A91  1303               	bcf	3,6	;RP1=0, select bank1
  3632  0A92  0085               	movwf	5	;volatile
  3633  0A93                     l3407:	
  3634                           
  3635                           ;main.c: 349:     ADCON0 = 0x00;
  3636  0A93  1283               	bcf	3,5	;RP0=0, select bank0
  3637  0A94  1303               	bcf	3,6	;RP1=0, select bank0
  3638  0A95  019F               	clrf	31	;volatile
  3639  0A96                     l3409:	
  3640                           
  3641                           ;main.c: 350:     ADCON1 = 0x80;
  3642  0A96  3080               	movlw	128
  3643  0A97  1683               	bsf	3,5	;RP0=1, select bank1
  3644  0A98  1303               	bcf	3,6	;RP1=0, select bank1
  3645  0A99  009F               	movwf	31	;volatile
  3646  0A9A                     l3411:	
  3647                           
  3648                           ;main.c: 351:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3649  0A9A  3019               	movlw	25
  3650  0A9B  1283               	bcf	3,5	;RP0=0, select bank0
  3651  0A9C  1303               	bcf	3,6	;RP1=0, select bank0
  3652  0A9D  00A4               	movwf	??_init_ADC
  3653  0A9E                     u3277:	
  3654  0A9E  0BA4               	decfsz	??_init_ADC,f
  3655  0A9F  2A9E               	goto	u3277
  3656  0AA0  2AA1               	nop2
  3657  0AA1                     l265:	
  3658  0AA1  0008               	return
  3659  0AA2                     __end_of_init_ADC:	
  3660                           
  3661                           	psect	text10
  3662  0793                     __ptext10:	
  3663 ;; *************** function _UpdateTimes *****************
  3664 ;; Defined at:
  3665 ;;		line 4 in file "./CustomLib/TrafficLight.h"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;  _semafori       1    wreg     PTR PTR struct .
  3668 ;;		 -> Semafori(2), 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  _semafori       1   14[BANK0 ] PTR PTR struct .
  3671 ;;		 -> Semafori(2), 
  3672 ;;  i               1   15[BANK0 ] unsigned char 
  3673 ;;  l               1   16[BANK0 ] unsigned char 
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      void 
  3676 ;; Registers used:
  3677 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3683 ;;      Params:         0       0       0       0       0
  3684 ;;      Locals:         0       3       0       0       0
  3685 ;;      Temps:          0      10       0       0       0
  3686 ;;      Totals:         0      13       0       0       0
  3687 ;;Total ram usage:       13 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; Hardware stack levels required when called:    3
  3690 ;; This function calls:
  3691 ;;		Nothing
  3692 ;; This function is called by:
  3693 ;;		_main
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           
  3698                           ;psect for function _UpdateTimes
  3699  0793                     _UpdateTimes:	
  3700                           
  3701                           ;incstack = 0
  3702                           ; Regs used in _UpdateTimes: [wreg-fsr0h+status,2+status,0]
  3703                           ;UpdateTimes@_semafori stored from wreg
  3704  0793  1283               	bcf	3,5	;RP0=0, select bank0
  3705  0794  1303               	bcf	3,6	;RP1=0, select bank0
  3706  0795  00AE               	movwf	UpdateTimes@_semafori
  3707  0796                     l3309:	
  3708                           
  3709                           ;./CustomLib/TrafficLight.h: 4: void UpdateTimes(_Semafori _semafori);./CustomLib/Traffi
      +                          cLight.h: 5: {;./CustomLib/TrafficLight.h: 7:     for (unsigned char l = 0; l < n_semafo
      +                          ri; l++)
  3710  0796  01B0               	clrf	UpdateTimes@l
  3711  0797                     l3315:	
  3712                           
  3713                           ;./CustomLib/TrafficLight.h: 8:     {;./CustomLib/TrafficLight.h: 9:         for (unsign
      +                          ed char i = 0; i < 3; i++)
  3714  0797  01AF               	clrf	UpdateTimes@i
  3715  0798                     l3321:	
  3716                           
  3717                           ;./CustomLib/TrafficLight.h: 10:         {;./CustomLib/TrafficLight.h: 11:             i
      +                          f ((*(_semafori)[l]).times[i] != (*(_semafori)[l]).new_times[i])
  3718  0798  0830               	movf	UpdateTimes@l,w
  3719  0799  072E               	addwf	UpdateTimes@_semafori,w
  3720  079A  00A4               	movwf	??_UpdateTimes
  3721  079B  0824               	movf	??_UpdateTimes,w
  3722  079C  0084               	movwf	4
  3723  079D  082F               	movf	UpdateTimes@i,w
  3724  079E  00A5               	movwf	??_UpdateTimes+1
  3725  079F  0725               	addwf	??_UpdateTimes+1,w
  3726  07A0  1383               	bcf	3,7	;select IRP bank0
  3727  07A1  0700               	addwf	0,w
  3728  07A2  00A6               	movwf	??_UpdateTimes+2
  3729  07A3  0826               	movf	??_UpdateTimes+2,w
  3730  07A4  3E06               	addlw	6
  3731  07A5  0084               	movwf	4
  3732  07A6  0800               	movf	0,w
  3733  07A7  00A7               	movwf	??_UpdateTimes+3
  3734  07A8  0A84               	incf	4,f
  3735  07A9  0800               	movf	0,w
  3736  07AA  00A8               	movwf	??_UpdateTimes+4
  3737  07AB  0830               	movf	UpdateTimes@l,w
  3738  07AC  072E               	addwf	UpdateTimes@_semafori,w
  3739  07AD  00A9               	movwf	??_UpdateTimes+5
  3740  07AE  0829               	movf	??_UpdateTimes+5,w
  3741  07AF  0084               	movwf	4
  3742  07B0  082F               	movf	UpdateTimes@i,w
  3743  07B1  00AA               	movwf	??_UpdateTimes+6
  3744  07B2  072A               	addwf	??_UpdateTimes+6,w
  3745  07B3  0700               	addwf	0,w
  3746  07B4  00AB               	movwf	??_UpdateTimes+7
  3747  07B5  082B               	movf	??_UpdateTimes+7,w
  3748  07B6  0084               	movwf	4
  3749  07B7  0800               	movf	0,w
  3750  07B8  00AC               	movwf	??_UpdateTimes+8
  3751  07B9  0A84               	incf	4,f
  3752  07BA  0800               	movf	0,w
  3753  07BB  00AD               	movwf	??_UpdateTimes+9
  3754  07BC  0828               	movf	??_UpdateTimes+4,w
  3755  07BD  062D               	xorwf	??_UpdateTimes+9,w
  3756  07BE  1D03               	skipz
  3757  07BF  2FC2               	goto	u2845
  3758  07C0  0827               	movf	??_UpdateTimes+3,w
  3759  07C1  062C               	xorwf	??_UpdateTimes+8,w
  3760  07C2                     u2845:	
  3761  07C2  1903               	skipnz
  3762  07C3  2FC5               	goto	u2841
  3763  07C4  2FC6               	goto	u2840
  3764  07C5                     u2841:	
  3765  07C5  2FE9               	goto	l3325
  3766  07C6                     u2840:	
  3767  07C6                     l3323:	
  3768                           
  3769                           ;./CustomLib/TrafficLight.h: 12:             {;./CustomLib/TrafficLight.h: 13:          
      +                                 (*(_semafori)[l]).times[i] = (*(_semafori)[l]).new_times[i];
  3770  07C6  0830               	movf	UpdateTimes@l,w
  3771  07C7  072E               	addwf	UpdateTimes@_semafori,w
  3772  07C8  00A4               	movwf	??_UpdateTimes
  3773  07C9  0824               	movf	??_UpdateTimes,w
  3774  07CA  0084               	movwf	4
  3775  07CB  082F               	movf	UpdateTimes@i,w
  3776  07CC  00A5               	movwf	??_UpdateTimes+1
  3777  07CD  0725               	addwf	??_UpdateTimes+1,w
  3778  07CE  0700               	addwf	0,w
  3779  07CF  00A6               	movwf	??_UpdateTimes+2
  3780  07D0  0826               	movf	??_UpdateTimes+2,w
  3781  07D1  3E06               	addlw	6
  3782  07D2  0084               	movwf	4
  3783  07D3  0800               	movf	0,w
  3784  07D4  00A7               	movwf	??_UpdateTimes+3
  3785  07D5  0A84               	incf	4,f
  3786  07D6  0800               	movf	0,w
  3787  07D7  00A8               	movwf	??_UpdateTimes+4
  3788  07D8  0830               	movf	UpdateTimes@l,w
  3789  07D9  072E               	addwf	UpdateTimes@_semafori,w
  3790  07DA  00A9               	movwf	??_UpdateTimes+5
  3791  07DB  0829               	movf	??_UpdateTimes+5,w
  3792  07DC  0084               	movwf	4
  3793  07DD  082F               	movf	UpdateTimes@i,w
  3794  07DE  00AA               	movwf	??_UpdateTimes+6
  3795  07DF  072A               	addwf	??_UpdateTimes+6,w
  3796  07E0  0700               	addwf	0,w
  3797  07E1  00AB               	movwf	??_UpdateTimes+7
  3798  07E2  082B               	movf	??_UpdateTimes+7,w
  3799  07E3  0084               	movwf	4
  3800  07E4  0827               	movf	??_UpdateTimes+3,w
  3801  07E5  0080               	movwf	0
  3802  07E6  0A84               	incf	4,f
  3803  07E7  0828               	movf	??_UpdateTimes+4,w
  3804  07E8  0080               	movwf	0
  3805  07E9                     l3325:	
  3806                           
  3807                           ;./CustomLib/TrafficLight.h: 15:         }
  3808  07E9  3001               	movlw	1
  3809  07EA  00A4               	movwf	??_UpdateTimes
  3810  07EB  0824               	movf	??_UpdateTimes,w
  3811  07EC  07AF               	addwf	UpdateTimes@i,f
  3812  07ED                     l3327:	
  3813  07ED  3003               	movlw	3
  3814  07EE  022F               	subwf	UpdateTimes@i,w
  3815  07EF  1C03               	skipc
  3816  07F0  2FF2               	goto	u2851
  3817  07F1  2FF3               	goto	u2850
  3818  07F2                     u2851:	
  3819  07F2  2F98               	goto	l3321
  3820  07F3                     u2850:	
  3821  07F3                     l3331:	
  3822                           
  3823                           ;./CustomLib/TrafficLight.h: 21:     }
  3824  07F3  3001               	movlw	1
  3825  07F4  00A4               	movwf	??_UpdateTimes
  3826  07F5  0824               	movf	??_UpdateTimes,w
  3827  07F6  07B0               	addwf	UpdateTimes@l,f
  3828  07F7                     l3333:	
  3829  07F7  3002               	movlw	2
  3830  07F8  0230               	subwf	UpdateTimes@l,w
  3831  07F9  1C03               	skipc
  3832  07FA  2FFC               	goto	u2861
  3833  07FB  2FFD               	goto	u2860
  3834  07FC                     u2861:	
  3835  07FC  2F97               	goto	l3315
  3836  07FD                     u2860:	
  3837  07FD                     l127:	
  3838  07FD  0008               	return
  3839  07FE                     __end_of_UpdateTimes:	
  3840                           
  3841                           	psect	text11
  3842  0B7F                     __ptext11:	
  3843 ;; *************** function _UART_Init *****************
  3844 ;; Defined at:
  3845 ;;		line 365 in file "main.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;  baudrate        2   19[BANK0 ] int 
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;		None
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  1    wreg      void 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2, status,0, pclath, cstack
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3859 ;;      Params:         0       2       0       0       0
  3860 ;;      Locals:         0       0       0       0       0
  3861 ;;      Temps:          0       4       0       0       0
  3862 ;;      Totals:         0       6       0       0       0
  3863 ;;Total ram usage:        6 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    4
  3866 ;; This function calls:
  3867 ;;		___aldiv
  3868 ;; This function is called by:
  3869 ;;		_main
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           
  3874                           ;psect for function _UART_Init
  3875  0B7F                     _UART_Init:	
  3876  0B7F                     l3413:	
  3877                           ;incstack = 0
  3878                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3879                           
  3880                           
  3881                           ;main.c: 365: void UART_Init(int baudrate);main.c: 366: {;main.c: 367:     TRISCbits.TRI
      +                          SC6 = 0;
  3882  0B7F  1683               	bsf	3,5	;RP0=1, select bank1
  3883  0B80  1303               	bcf	3,6	;RP1=0, select bank1
  3884  0B81  1307               	bcf	7,6	;volatile
  3885                           
  3886                           ;main.c: 368:     TXSTAbits.TXEN = 1;
  3887  0B82  1698               	bsf	24,5	;volatile
  3888                           
  3889                           ;main.c: 369:     RCSTAbits.SPEN = 1;
  3890  0B83  1283               	bcf	3,5	;RP0=0, select bank0
  3891  0B84  1303               	bcf	3,6	;RP1=0, select bank0
  3892  0B85  1798               	bsf	24,7	;volatile
  3893                           
  3894                           ;main.c: 370:     RCSTAbits.CREN = 1;
  3895  0B86  1618               	bsf	24,4	;volatile
  3896  0B87                     l3415:	
  3897                           
  3898                           ;main.c: 371:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  3899  0B87  0833               	movf	UART_Init@baudrate,w
  3900  0B88  00B5               	movwf	??_UART_Init
  3901  0B89  0834               	movf	UART_Init@baudrate+1,w
  3902  0B8A  00B6               	movwf	??_UART_Init+1
  3903  0B8B  3000               	movlw	0
  3904  0B8C  1BB6               	btfsc	??_UART_Init+1,7
  3905  0B8D  30FF               	movlw	255
  3906  0B8E  00B7               	movwf	??_UART_Init+2
  3907  0B8F  00B8               	movwf	??_UART_Init+3
  3908  0B90  3006               	movlw	6
  3909  0B91                     u2925:	
  3910  0B91  1003               	clrc
  3911  0B92  0DB5               	rlf	??_UART_Init,f
  3912  0B93  0DB6               	rlf	??_UART_Init+1,f
  3913  0B94  0DB7               	rlf	??_UART_Init+2,f
  3914  0B95  0DB8               	rlf	??_UART_Init+3,f
  3915  0B96                     u2920:	
  3916  0B96  3EFF               	addlw	-1
  3917  0B97  1D03               	skipz
  3918  0B98  2B91               	goto	u2925
  3919  0B99  0838               	movf	??_UART_Init+3,w
  3920  0B9A  00A7               	movwf	___aldiv@divisor+3
  3921  0B9B  0837               	movf	??_UART_Init+2,w
  3922  0B9C  00A6               	movwf	___aldiv@divisor+2
  3923  0B9D  0836               	movf	??_UART_Init+1,w
  3924  0B9E  00A5               	movwf	___aldiv@divisor+1
  3925  0B9F  0835               	movf	??_UART_Init,w
  3926  0BA0  00A4               	movwf	___aldiv@divisor
  3927  0BA1  3001               	movlw	1
  3928  0BA2  00AB               	movwf	___aldiv@dividend+3
  3929  0BA3  30E8               	movlw	232
  3930  0BA4  00AA               	movwf	___aldiv@dividend+2
  3931  0BA5  3048               	movlw	72
  3932  0BA6  00A9               	movwf	___aldiv@dividend+1
  3933  0BA7  3000               	movlw	0
  3934  0BA8  00A8               	movwf	___aldiv@dividend
  3935  0BA9  120A  158A  2763  120A  158A  	fcall	___aldiv
  3936  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  3937  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  3938  0BB0  0824               	movf	?___aldiv,w
  3939  0BB1  3EFF               	addlw	255
  3940  0BB2  1683               	bsf	3,5	;RP0=1, select bank1
  3941  0BB3  1303               	bcf	3,6	;RP1=0, select bank1
  3942  0BB4  0099               	movwf	25	;volatile
  3943  0BB5                     l3417:	
  3944                           
  3945                           ;main.c: 372:     INTCONbits.GIE = 1;
  3946  0BB5  178B               	bsf	11,7	;volatile
  3947  0BB6                     l3419:	
  3948                           
  3949                           ;main.c: 373:     INTCONbits.PEIE = 1;
  3950  0BB6  170B               	bsf	11,6	;volatile
  3951  0BB7                     l3421:	
  3952                           
  3953                           ;main.c: 374:     PIE1bits.RCIE = 1;
  3954  0BB7  168C               	bsf	12,5	;volatile
  3955  0BB8                     l274:	
  3956  0BB8  0008               	return
  3957  0BB9                     __end_of_UART_Init:	
  3958                           
  3959                           	psect	text12
  3960  0F63                     __ptext12:	
  3961 ;; *************** function ___aldiv *****************
  3962 ;; Defined at:
  3963 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  divisor         4    4[BANK0 ] long 
  3966 ;;  dividend        4    8[BANK0 ] long 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  quotient        4   15[BANK0 ] long 
  3969 ;;  sign            1   14[BANK0 ] unsigned char 
  3970 ;;  counter         1   13[BANK0 ] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  4    4[BANK0 ] long 
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, status,0
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3980 ;;      Params:         0       8       0       0       0
  3981 ;;      Locals:         0       6       0       0       0
  3982 ;;      Temps:          0       1       0       0       0
  3983 ;;      Totals:         0      15       0       0       0
  3984 ;;Total ram usage:       15 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    3
  3987 ;; This function calls:
  3988 ;;		Nothing
  3989 ;; This function is called by:
  3990 ;;		_UART_Init
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           
  3995                           ;psect for function ___aldiv
  3996  0F63                     ___aldiv:	
  3997  0F63                     l3187:	
  3998                           ;incstack = 0
  3999                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4000                           
  4001  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  4002  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  4003  0F65  01AE               	clrf	___aldiv@sign
  4004  0F66                     l3189:	
  4005  0F66  1FA7               	btfss	___aldiv@divisor+3,7
  4006  0F67  2F69               	goto	u2551
  4007  0F68  2F6A               	goto	u2550
  4008  0F69                     u2551:	
  4009  0F69  2F77               	goto	l504
  4010  0F6A                     u2550:	
  4011  0F6A                     l3191:	
  4012  0F6A  09A4               	comf	___aldiv@divisor,f
  4013  0F6B  09A5               	comf	___aldiv@divisor+1,f
  4014  0F6C  09A6               	comf	___aldiv@divisor+2,f
  4015  0F6D  09A7               	comf	___aldiv@divisor+3,f
  4016  0F6E  0AA4               	incf	___aldiv@divisor,f
  4017  0F6F  1903               	skipnz
  4018  0F70  0AA5               	incf	___aldiv@divisor+1,f
  4019  0F71  1903               	skipnz
  4020  0F72  0AA6               	incf	___aldiv@divisor+2,f
  4021  0F73  1903               	skipnz
  4022  0F74  0AA7               	incf	___aldiv@divisor+3,f
  4023  0F75  01AE               	clrf	___aldiv@sign
  4024  0F76  0AAE               	incf	___aldiv@sign,f
  4025  0F77                     l504:	
  4026  0F77  1FAB               	btfss	___aldiv@dividend+3,7
  4027  0F78  2F7A               	goto	u2561
  4028  0F79  2F7B               	goto	u2560
  4029  0F7A                     u2561:	
  4030  0F7A  2F8A               	goto	l3197
  4031  0F7B                     u2560:	
  4032  0F7B                     l3193:	
  4033  0F7B  09A8               	comf	___aldiv@dividend,f
  4034  0F7C  09A9               	comf	___aldiv@dividend+1,f
  4035  0F7D  09AA               	comf	___aldiv@dividend+2,f
  4036  0F7E  09AB               	comf	___aldiv@dividend+3,f
  4037  0F7F  0AA8               	incf	___aldiv@dividend,f
  4038  0F80  1903               	skipnz
  4039  0F81  0AA9               	incf	___aldiv@dividend+1,f
  4040  0F82  1903               	skipnz
  4041  0F83  0AAA               	incf	___aldiv@dividend+2,f
  4042  0F84  1903               	skipnz
  4043  0F85  0AAB               	incf	___aldiv@dividend+3,f
  4044  0F86                     l3195:	
  4045  0F86  3001               	movlw	1
  4046  0F87  00AC               	movwf	??___aldiv
  4047  0F88  082C               	movf	??___aldiv,w
  4048  0F89  06AE               	xorwf	___aldiv@sign,f
  4049  0F8A                     l3197:	
  4050  0F8A  3000               	movlw	0
  4051  0F8B  00B2               	movwf	___aldiv@quotient+3
  4052  0F8C  3000               	movlw	0
  4053  0F8D  00B1               	movwf	___aldiv@quotient+2
  4054  0F8E  3000               	movlw	0
  4055  0F8F  00B0               	movwf	___aldiv@quotient+1
  4056  0F90  3000               	movlw	0
  4057  0F91  00AF               	movwf	___aldiv@quotient
  4058  0F92                     l3199:	
  4059  0F92  0827               	movf	___aldiv@divisor+3,w
  4060  0F93  0426               	iorwf	___aldiv@divisor+2,w
  4061  0F94  0425               	iorwf	___aldiv@divisor+1,w
  4062  0F95  0424               	iorwf	___aldiv@divisor,w
  4063  0F96  1903               	skipnz
  4064  0F97  2F99               	goto	u2571
  4065  0F98  2F9A               	goto	u2570
  4066  0F99                     u2571:	
  4067  0F99  2FE7               	goto	l3219
  4068  0F9A                     u2570:	
  4069  0F9A                     l3201:	
  4070  0F9A  01AD               	clrf	___aldiv@counter
  4071  0F9B  0AAD               	incf	___aldiv@counter,f
  4072  0F9C  2FAA               	goto	l3205
  4073  0F9D                     l3203:	
  4074  0F9D  3001               	movlw	1
  4075  0F9E  00AC               	movwf	??___aldiv
  4076  0F9F                     u2585:	
  4077  0F9F  1003               	clrc
  4078  0FA0  0DA4               	rlf	___aldiv@divisor,f
  4079  0FA1  0DA5               	rlf	___aldiv@divisor+1,f
  4080  0FA2  0DA6               	rlf	___aldiv@divisor+2,f
  4081  0FA3  0DA7               	rlf	___aldiv@divisor+3,f
  4082  0FA4  0BAC               	decfsz	??___aldiv,f
  4083  0FA5  2F9F               	goto	u2585
  4084  0FA6  3001               	movlw	1
  4085  0FA7  00AC               	movwf	??___aldiv
  4086  0FA8  082C               	movf	??___aldiv,w
  4087  0FA9  07AD               	addwf	___aldiv@counter,f
  4088  0FAA                     l3205:	
  4089  0FAA  1FA7               	btfss	___aldiv@divisor+3,7
  4090  0FAB  2FAD               	goto	u2591
  4091  0FAC  2FAE               	goto	u2590
  4092  0FAD                     u2591:	
  4093  0FAD  2F9D               	goto	l3203
  4094  0FAE                     u2590:	
  4095  0FAE                     l3207:	
  4096  0FAE  3001               	movlw	1
  4097  0FAF  00AC               	movwf	??___aldiv
  4098  0FB0                     u2605:	
  4099  0FB0  1003               	clrc
  4100  0FB1  0DAF               	rlf	___aldiv@quotient,f
  4101  0FB2  0DB0               	rlf	___aldiv@quotient+1,f
  4102  0FB3  0DB1               	rlf	___aldiv@quotient+2,f
  4103  0FB4  0DB2               	rlf	___aldiv@quotient+3,f
  4104  0FB5  0BAC               	decfsz	??___aldiv,f
  4105  0FB6  2FB0               	goto	u2605
  4106  0FB7                     l3209:	
  4107  0FB7  0827               	movf	___aldiv@divisor+3,w
  4108  0FB8  022B               	subwf	___aldiv@dividend+3,w
  4109  0FB9  1D03               	skipz
  4110  0FBA  2FC5               	goto	u2615
  4111  0FBB  0826               	movf	___aldiv@divisor+2,w
  4112  0FBC  022A               	subwf	___aldiv@dividend+2,w
  4113  0FBD  1D03               	skipz
  4114  0FBE  2FC5               	goto	u2615
  4115  0FBF  0825               	movf	___aldiv@divisor+1,w
  4116  0FC0  0229               	subwf	___aldiv@dividend+1,w
  4117  0FC1  1D03               	skipz
  4118  0FC2  2FC5               	goto	u2615
  4119  0FC3  0824               	movf	___aldiv@divisor,w
  4120  0FC4  0228               	subwf	___aldiv@dividend,w
  4121  0FC5                     u2615:	
  4122  0FC5  1C03               	skipc
  4123  0FC6  2FC8               	goto	u2611
  4124  0FC7  2FC9               	goto	u2610
  4125  0FC8                     u2611:	
  4126  0FC8  2FD8               	goto	l3215
  4127  0FC9                     u2610:	
  4128  0FC9                     l3211:	
  4129  0FC9  0824               	movf	___aldiv@divisor,w
  4130  0FCA  02A8               	subwf	___aldiv@dividend,f
  4131  0FCB  0825               	movf	___aldiv@divisor+1,w
  4132  0FCC  1C03               	skipc
  4133  0FCD  0F25               	incfsz	___aldiv@divisor+1,w
  4134  0FCE  02A9               	subwf	___aldiv@dividend+1,f
  4135  0FCF  0826               	movf	___aldiv@divisor+2,w
  4136  0FD0  1C03               	skipc
  4137  0FD1  0F26               	incfsz	___aldiv@divisor+2,w
  4138  0FD2  02AA               	subwf	___aldiv@dividend+2,f
  4139  0FD3  0827               	movf	___aldiv@divisor+3,w
  4140  0FD4  1C03               	skipc
  4141  0FD5  0F27               	incfsz	___aldiv@divisor+3,w
  4142  0FD6  02AB               	subwf	___aldiv@dividend+3,f
  4143  0FD7                     l3213:	
  4144  0FD7  142F               	bsf	___aldiv@quotient,0
  4145  0FD8                     l3215:	
  4146  0FD8  3001               	movlw	1
  4147  0FD9                     u2625:	
  4148  0FD9  1003               	clrc
  4149  0FDA  0CA7               	rrf	___aldiv@divisor+3,f
  4150  0FDB  0CA6               	rrf	___aldiv@divisor+2,f
  4151  0FDC  0CA5               	rrf	___aldiv@divisor+1,f
  4152  0FDD  0CA4               	rrf	___aldiv@divisor,f
  4153  0FDE  3EFF               	addlw	-1
  4154  0FDF  1D03               	skipz
  4155  0FE0  2FD9               	goto	u2625
  4156  0FE1                     l3217:	
  4157  0FE1  3001               	movlw	1
  4158  0FE2  02AD               	subwf	___aldiv@counter,f
  4159  0FE3  1D03               	btfss	3,2
  4160  0FE4  2FE6               	goto	u2631
  4161  0FE5  2FE7               	goto	u2630
  4162  0FE6                     u2631:	
  4163  0FE6  2FAE               	goto	l3207
  4164  0FE7                     u2630:	
  4165  0FE7                     l3219:	
  4166  0FE7  082E               	movf	___aldiv@sign,w
  4167  0FE8  1903               	btfsc	3,2
  4168  0FE9  2FEB               	goto	u2641
  4169  0FEA  2FEC               	goto	u2640
  4170  0FEB                     u2641:	
  4171  0FEB  2FF7               	goto	l3223
  4172  0FEC                     u2640:	
  4173  0FEC                     l3221:	
  4174  0FEC  09AF               	comf	___aldiv@quotient,f
  4175  0FED  09B0               	comf	___aldiv@quotient+1,f
  4176  0FEE  09B1               	comf	___aldiv@quotient+2,f
  4177  0FEF  09B2               	comf	___aldiv@quotient+3,f
  4178  0FF0  0AAF               	incf	___aldiv@quotient,f
  4179  0FF1  1903               	skipnz
  4180  0FF2  0AB0               	incf	___aldiv@quotient+1,f
  4181  0FF3  1903               	skipnz
  4182  0FF4  0AB1               	incf	___aldiv@quotient+2,f
  4183  0FF5  1903               	skipnz
  4184  0FF6  0AB2               	incf	___aldiv@quotient+3,f
  4185  0FF7                     l3223:	
  4186  0FF7  0832               	movf	___aldiv@quotient+3,w
  4187  0FF8  00A7               	movwf	?___aldiv+3
  4188  0FF9  0831               	movf	___aldiv@quotient+2,w
  4189  0FFA  00A6               	movwf	?___aldiv+2
  4190  0FFB  0830               	movf	___aldiv@quotient+1,w
  4191  0FFC  00A5               	movwf	?___aldiv+1
  4192  0FFD  082F               	movf	___aldiv@quotient,w
  4193  0FFE  00A4               	movwf	?___aldiv
  4194  0FFF                     l514:	
  4195  0FFF  0008               	return
  4196  1000                     __end_of___aldiv:	
  4197                           
  4198                           	psect	text13
  4199  06E6                     __ptext13:	
  4200 ;; *************** function _ShowDigitsOnDisplay *****************
  4201 ;; Defined at:
  4202 ;;		line 507 in file "main.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  display_inde    1   13[BANK0 ] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4216 ;;      Params:         0       0       0       0       0
  4217 ;;      Locals:         0       1       0       0       0
  4218 ;;      Temps:          0       2       0       0       0
  4219 ;;      Totals:         0       3       0       0       0
  4220 ;;Total ram usage:        3 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    4
  4223 ;; This function calls:
  4224 ;;		_SetDisplay
  4225 ;;		___awmod
  4226 ;; This function is called by:
  4227 ;;		_main
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function _ShowDigitsOnDisplay
  4233  06E6                     _ShowDigitsOnDisplay:	
  4234  06E6                     l3489:	
  4235                           ;incstack = 0
  4236                           ; Regs used in _ShowDigitsOnDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4237                           
  4238                           
  4239                           ;main.c: 509:     for (unsigned char display_index = 0; display_index < n_semafori; disp
      +                          lay_index++)
  4240  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  4241  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  4242  06E8  01AD               	clrf	ShowDigitsOnDisplay@display_index
  4243  06E9  2F5D               	goto	l3509
  4244  06EA                     l3495:	
  4245                           
  4246                           ;main.c: 514:             if ((*DigitsArr[display_index]).centinaia > 0)
  4247  06EA  082D               	movf	ShowDigitsOnDisplay@display_index,w
  4248  06EB  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4249  06EC  0084               	movwf	4
  4250  06ED  1383               	bcf	3,7	;select IRP bank0
  4251  06EE  0800               	movf	0,w
  4252  06EF  0084               	movwf	4
  4253  06F0  0800               	movf	0,w
  4254  06F1  1903               	btfsc	3,2
  4255  06F2  2EF4               	goto	u2971
  4256  06F3  2EF5               	goto	u2970
  4257  06F4                     u2971:	
  4258  06F4  2F70               	goto	l3511
  4259  06F5                     u2970:	
  4260  06F5                     l3497:	
  4261                           
  4262                           ;main.c: 515:             {;main.c: 516:                 SetDisplay(display_index, 1, 0,
      +                           0, display[(*DigitsArr[display_index]).centinaia]);
  4263  06F5  01A4               	clrf	SetDisplay@d1
  4264  06F6  0AA4               	incf	SetDisplay@d1,f
  4265  06F7  01A5               	clrf	SetDisplay@d2
  4266  06F8  01A6               	clrf	SetDisplay@d3
  4267  06F9  082D               	movf	ShowDigitsOnDisplay@display_index,w
  4268  06FA  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4269  06FB  0084               	movwf	4
  4270  06FC  0800               	movf	0,w
  4271  06FD  0084               	movwf	4
  4272  06FE  0800               	movf	0,w
  4273  06FF  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4274  0700  0084               	movwf	4
  4275  0701  120A  158A  2000  120A  118A  	fcall	stringdir
  4276  0706  00AB               	movwf	??_ShowDigitsOnDisplay
  4277  0707  082B               	movf	??_ShowDigitsOnDisplay,w
  4278  0708  00A7               	movwf	SetDisplay@value
  4279  0709  082D               	movf	ShowDigitsOnDisplay@display_index,w
  4280  070A  120A  158A  252D  120A  118A  	fcall	_SetDisplay
  4281  070F  2F70               	goto	l3511
  4282  0710                     l3499:	
  4283                           
  4284                           ;main.c: 520:             if ((*DigitsArr[display_index]).decine > 0 || (*DigitsArr[disp
      +                          lay_index]).centinaia > 0)
  4285  0710  082D               	movf	ShowDigitsOnDisplay@display_index,w
  4286  0711  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4287  0712  0084               	movwf	4
  4288  0713  1383               	bcf	3,7	;select IRP bank0
  4289  0714  0A00               	incf	0,w
  4290  0715  0084               	movwf	4
  4291  0716  0800               	movf	0,w
  4292  0717  1D03               	btfss	3,2
  4293  0718  2F1A               	goto	u2981
  4294  0719  2F1B               	goto	u2980
  4295  071A                     u2981:	
  4296  071A  2F25               	goto	l3503
  4297  071B                     u2980:	
  4298  071B                     l3501:	
  4299  071B  082D               	movf	ShowDigitsOnDisplay@display_index,w
  4300  071C  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4301  071D  0084               	movwf	4
  4302  071E  0800               	movf	0,w
  4303  071F  0084               	movwf	4
  4304  0720  0800               	movf	0,w
  4305  0721  1903               	btfsc	3,2
  4306  0722  2F24               	goto	u2991
  4307  0723  2F25               	goto	u2990
  4308  0724                     u2991:	
  4309  0724  2F70               	goto	l3511
  4310  0725                     u2990:	
  4311  0725                     l3503:	
  4312                           
  4313                           ;main.c: 521:             {;main.c: 522:                 SetDisplay(display_index, 0, 1,
      +                           0, display[(*DigitsArr[display_index]).decine]);
  4314  0725  01A4               	clrf	SetDisplay@d1
  4315  0726  01A5               	clrf	SetDisplay@d2
  4316  0727  0AA5               	incf	SetDisplay@d2,f
  4317  0728  01A6               	clrf	SetDisplay@d3
  4318  0729  082D               	movf	ShowDigitsOnDisplay@display_index,w
  4319  072A  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4320  072B  0084               	movwf	4
  4321  072C  0A00               	incf	0,w
  4322  072D  0084               	movwf	4
  4323  072E  0800               	movf	0,w
  4324  072F  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4325  0730  0084               	movwf	4
  4326  0731  120A  158A  2000  120A  118A  	fcall	stringdir
  4327  0736  00AB               	movwf	??_ShowDigitsOnDisplay
  4328  0737  082B               	movf	??_ShowDigitsOnDisplay,w
  4329  0738  00A7               	movwf	SetDisplay@value
  4330  0739  082D               	movf	ShowDigitsOnDisplay@display_index,w
  4331  073A  120A  158A  252D  120A  118A  	fcall	_SetDisplay
  4332  073F  2F70               	goto	l3511
  4333  0740                     l3505:	
  4334                           
  4335                           ;main.c: 526:             SetDisplay(display_index, 0, 0, 1, display[(*DigitsArr[display
      +                          _index]).unita]);
  4336  0740  01A4               	clrf	SetDisplay@d1
  4337  0741  01A5               	clrf	SetDisplay@d2
  4338  0742  01A6               	clrf	SetDisplay@d3
  4339  0743  0AA6               	incf	SetDisplay@d3,f
  4340  0744  082D               	movf	ShowDigitsOnDisplay@display_index,w
  4341  0745  3E62               	addlw	(low (_DigitsArr| 0))& (0+255)
  4342  0746  0084               	movwf	4
  4343  0747  1383               	bcf	3,7	;select IRP bank0
  4344  0748  0800               	movf	0,w
  4345  0749  3E02               	addlw	2
  4346  074A  0084               	movwf	4
  4347  074B  0800               	movf	0,w
  4348  074C  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  4349  074D  0084               	movwf	4
  4350  074E  120A  158A  2000  120A  118A  	fcall	stringdir
  4351  0753  00AB               	movwf	??_ShowDigitsOnDisplay
  4352  0754  082B               	movf	??_ShowDigitsOnDisplay,w
  4353  0755  00A7               	movwf	SetDisplay@value
  4354  0756  082D               	movf	ShowDigitsOnDisplay@display_index,w
  4355  0757  120A  158A  252D  120A  118A  	fcall	_SetDisplay
  4356                           
  4357                           ;main.c: 527:             break;
  4358  075C  2F70               	goto	l3511
  4359  075D                     l3509:	
  4360  075D  0855               	movf	_disp,w
  4361  075E  00AB               	movwf	??_ShowDigitsOnDisplay
  4362  075F  01AC               	clrf	??_ShowDigitsOnDisplay+1
  4363                           
  4364                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4365                           ; Switch size 1, requested type "simple"
  4366                           ; Number of cases is 1, Range of values is 0 to 0
  4367                           ; switch strategies available:
  4368                           ; Name         Instructions Cycles
  4369                           ; simple_byte            4     3 (average)
  4370                           ; direct_byte           11     8 (fixed)
  4371                           ; jumptable            260     6 (fixed)
  4372                           ;	Chosen strategy is simple_byte
  4373  0760  082C               	movf	??_ShowDigitsOnDisplay+1,w
  4374  0761  3A00               	xorlw	0	; case 0
  4375  0762  1903               	skipnz
  4376  0763  2F65               	goto	l3975
  4377  0764  2F70               	goto	l3511
  4378  0765                     l3975:	
  4379                           
  4380                           ; Switch size 1, requested type "simple"
  4381                           ; Number of cases is 3, Range of values is 0 to 2
  4382                           ; switch strategies available:
  4383                           ; Name         Instructions Cycles
  4384                           ; simple_byte           10     6 (average)
  4385                           ; direct_byte           17     8 (fixed)
  4386                           ; jumptable            260     6 (fixed)
  4387                           ;	Chosen strategy is simple_byte
  4388  0765  082B               	movf	??_ShowDigitsOnDisplay,w
  4389  0766  3A00               	xorlw	0	; case 0
  4390  0767  1903               	skipnz
  4391  0768  2EEA               	goto	l3495
  4392  0769  3A01               	xorlw	1	; case 1
  4393  076A  1903               	skipnz
  4394  076B  2F10               	goto	l3499
  4395  076C  3A03               	xorlw	3	; case 2
  4396  076D  1903               	skipnz
  4397  076E  2F40               	goto	l3505
  4398  076F  2F70               	goto	l3511
  4399  0770                     l3511:	
  4400                           
  4401                           ;main.c: 529:     }
  4402  0770  3001               	movlw	1
  4403  0771  1283               	bcf	3,5	;RP0=0, select bank0
  4404  0772  1303               	bcf	3,6	;RP1=0, select bank0
  4405  0773  00AB               	movwf	??_ShowDigitsOnDisplay
  4406  0774  082B               	movf	??_ShowDigitsOnDisplay,w
  4407  0775  07AD               	addwf	ShowDigitsOnDisplay@display_index,f
  4408  0776                     l3513:	
  4409  0776  3002               	movlw	2
  4410  0777  022D               	subwf	ShowDigitsOnDisplay@display_index,w
  4411  0778  1C03               	skipc
  4412  0779  2F7B               	goto	u3001
  4413  077A  2F7C               	goto	u3000
  4414  077B                     u3001:	
  4415  077B  2F5D               	goto	l3509
  4416  077C                     u3000:	
  4417  077C                     l3515:	
  4418                           
  4419                           ;main.c: 530:     disp = (disp + 1) % 3;
  4420  077C  3003               	movlw	3
  4421  077D  00A4               	movwf	___awmod@divisor
  4422  077E  3000               	movlw	0
  4423  077F  00A5               	movwf	___awmod@divisor+1
  4424  0780  0855               	movf	_disp,w
  4425  0781  3E01               	addlw	1
  4426  0782  00A6               	movwf	___awmod@dividend
  4427  0783  3000               	movlw	0
  4428  0784  1803               	skipnc
  4429  0785  3001               	movlw	1
  4430  0786  00A7               	movwf	___awmod@dividend+1
  4431  0787  120A  158A  25DA  120A  118A  	fcall	___awmod
  4432  078C  1283               	bcf	3,5	;RP0=0, select bank0
  4433  078D  1303               	bcf	3,6	;RP1=0, select bank0
  4434  078E  0824               	movf	?___awmod,w
  4435  078F  00AB               	movwf	??_ShowDigitsOnDisplay
  4436  0790  082B               	movf	??_ShowDigitsOnDisplay,w
  4437  0791  00D5               	movwf	_disp
  4438  0792                     l343:	
  4439  0792  0008               	return
  4440  0793                     __end_of_ShowDigitsOnDisplay:	
  4441                           
  4442                           	psect	text14
  4443  0D2D                     __ptext14:	
  4444 ;; *************** function _SetDisplay *****************
  4445 ;; Defined at:
  4446 ;;		line 482 in file "main.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;  display_inde    1    wreg     unsigned char 
  4449 ;;  d1              1    4[BANK0 ] unsigned char 
  4450 ;;  d2              1    5[BANK0 ] unsigned char 
  4451 ;;  d3              1    6[BANK0 ] unsigned char 
  4452 ;;  value           1    7[BANK0 ] unsigned char 
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  display_inde    1   10[BANK0 ] unsigned char 
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      void 
  4457 ;; Registers used:
  4458 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4464 ;;      Params:         0       4       0       0       0
  4465 ;;      Locals:         0       1       0       0       0
  4466 ;;      Temps:          0       2       0       0       0
  4467 ;;      Totals:         0       7       0       0       0
  4468 ;;Total ram usage:        7 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    3
  4471 ;; This function calls:
  4472 ;;		Nothing
  4473 ;; This function is called by:
  4474 ;;		_ShowDigitsOnDisplay
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           
  4479                           ;psect for function _SetDisplay
  4480  0D2D                     _SetDisplay:	
  4481                           
  4482                           ;incstack = 0
  4483                           ; Regs used in _SetDisplay: [wreg-fsr0h+status,2+status,0]
  4484                           ;SetDisplay@display_index stored from wreg
  4485  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  4486  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  4487  0D2F  00AA               	movwf	SetDisplay@display_index
  4488  0D30                     l3127:	
  4489                           
  4490                           ;main.c: 482: void SetDisplay(unsigned char display_index, char d1, char d2, char d3, ch
      +                          ar value);main.c: 483: {;main.c: 484:     switch (display_index)
  4491  0D30  2D71               	goto	l3137
  4492  0D31                     l3129:	
  4493                           
  4494                           ;main.c: 487:         PORTAbits.RA2 = d1;
  4495  0D31  0C24               	rrf	SetDisplay@d1,w
  4496  0D32  1C03               	skipc
  4497  0D33  1105               	bcf	5,2	;volatile
  4498  0D34  1803               	skipnc
  4499  0D35  1505               	bsf	5,2	;volatile
  4500                           
  4501                           ;main.c: 488:         PORTAbits.RA3 = d2;
  4502  0D36  0C25               	rrf	SetDisplay@d2,w
  4503  0D37  1C03               	skipc
  4504  0D38  1185               	bcf	5,3	;volatile
  4505  0D39  1803               	skipnc
  4506  0D3A  1585               	bsf	5,3	;volatile
  4507                           
  4508                           ;main.c: 489:         PORTAbits.RA4 = d3;
  4509  0D3B  0C26               	rrf	SetDisplay@d3,w
  4510  0D3C  1C03               	skipc
  4511  0D3D  1205               	bcf	5,4	;volatile
  4512  0D3E  1803               	skipnc
  4513  0D3F  1605               	bsf	5,4	;volatile
  4514                           
  4515                           ;main.c: 490:         PORTBbits.RB0 = d1;
  4516  0D40  0C24               	rrf	SetDisplay@d1,w
  4517  0D41  1C03               	skipc
  4518  0D42  1006               	bcf	6,0	;volatile
  4519  0D43  1803               	skipnc
  4520  0D44  1406               	bsf	6,0	;volatile
  4521                           
  4522                           ;main.c: 491:         PORTBbits.RB0 = d2;
  4523  0D45  0C25               	rrf	SetDisplay@d2,w
  4524  0D46  1C03               	skipc
  4525  0D47  1006               	bcf	6,0	;volatile
  4526  0D48  1803               	skipnc
  4527  0D49  1406               	bsf	6,0	;volatile
  4528                           
  4529                           ;main.c: 492:         PORTBbits.RB0 = d3;
  4530  0D4A  0C26               	rrf	SetDisplay@d3,w
  4531  0D4B  1C03               	skipc
  4532  0D4C  1006               	bcf	6,0	;volatile
  4533  0D4D  1803               	skipnc
  4534  0D4E  1406               	bsf	6,0	;volatile
  4535  0D4F                     l3131:	
  4536                           
  4537                           ;main.c: 493:         PORTD = value;
  4538  0D4F  0827               	movf	SetDisplay@value,w
  4539  0D50  0088               	movwf	8	;volatile
  4540                           
  4541                           ;main.c: 494:         break;
  4542  0D51  2D81               	goto	l329
  4543  0D52                     l3133:	
  4544                           
  4545                           ;main.c: 496:         PORTAbits.RA5 = d1;
  4546  0D52  0C24               	rrf	SetDisplay@d1,w
  4547  0D53  1C03               	skipc
  4548  0D54  1285               	bcf	5,5	;volatile
  4549  0D55  1803               	skipnc
  4550  0D56  1685               	bsf	5,5	;volatile
  4551                           
  4552                           ;main.c: 497:         PORTBbits.RB0 = d2;
  4553  0D57  0C25               	rrf	SetDisplay@d2,w
  4554  0D58  1C03               	skipc
  4555  0D59  1006               	bcf	6,0	;volatile
  4556  0D5A  1803               	skipnc
  4557  0D5B  1406               	bsf	6,0	;volatile
  4558                           
  4559                           ;main.c: 498:         PORTBbits.RB0 = d3;
  4560  0D5C  0C26               	rrf	SetDisplay@d3,w
  4561  0D5D  1C03               	skipc
  4562  0D5E  1006               	bcf	6,0	;volatile
  4563  0D5F  1803               	skipnc
  4564  0D60  1406               	bsf	6,0	;volatile
  4565                           
  4566                           ;main.c: 499:         PORTBbits.RB0 = d1;
  4567  0D61  0C24               	rrf	SetDisplay@d1,w
  4568  0D62  1C03               	skipc
  4569  0D63  1006               	bcf	6,0	;volatile
  4570  0D64  1803               	skipnc
  4571  0D65  1406               	bsf	6,0	;volatile
  4572                           
  4573                           ;main.c: 500:         PORTBbits.RB0 = d2;
  4574  0D66  0C25               	rrf	SetDisplay@d2,w
  4575  0D67  1C03               	skipc
  4576  0D68  1006               	bcf	6,0	;volatile
  4577  0D69  1803               	skipnc
  4578  0D6A  1406               	bsf	6,0	;volatile
  4579                           
  4580                           ;main.c: 501:         PORTBbits.RB0 = d3;
  4581  0D6B  0C26               	rrf	SetDisplay@d3,w
  4582  0D6C  1C03               	skipc
  4583  0D6D  1006               	bcf	6,0	;volatile
  4584  0D6E  1803               	skipnc
  4585  0D6F  1406               	bsf	6,0	;volatile
  4586                           
  4587                           ;main.c: 503:         break;
  4588  0D70  2D81               	goto	l329
  4589  0D71                     l3137:	
  4590  0D71  082A               	movf	SetDisplay@display_index,w
  4591  0D72  00A8               	movwf	??_SetDisplay
  4592  0D73  01A9               	clrf	??_SetDisplay+1
  4593                           
  4594                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4595                           ; Switch size 1, requested type "simple"
  4596                           ; Number of cases is 1, Range of values is 0 to 0
  4597                           ; switch strategies available:
  4598                           ; Name         Instructions Cycles
  4599                           ; simple_byte            4     3 (average)
  4600                           ; direct_byte           11     8 (fixed)
  4601                           ; jumptable            260     6 (fixed)
  4602                           ;	Chosen strategy is simple_byte
  4603  0D74  0829               	movf	??_SetDisplay+1,w
  4604  0D75  3A00               	xorlw	0	; case 0
  4605  0D76  1903               	skipnz
  4606  0D77  2D79               	goto	l3977
  4607  0D78  2D81               	goto	l329
  4608  0D79                     l3977:	
  4609                           
  4610                           ; Switch size 1, requested type "simple"
  4611                           ; Number of cases is 2, Range of values is 0 to 1
  4612                           ; switch strategies available:
  4613                           ; Name         Instructions Cycles
  4614                           ; simple_byte            7     4 (average)
  4615                           ; direct_byte           14     8 (fixed)
  4616                           ; jumptable            260     6 (fixed)
  4617                           ;	Chosen strategy is simple_byte
  4618  0D79  0828               	movf	??_SetDisplay,w
  4619  0D7A  3A00               	xorlw	0	; case 0
  4620  0D7B  1903               	skipnz
  4621  0D7C  2D31               	goto	l3129
  4622  0D7D  3A01               	xorlw	1	; case 1
  4623  0D7E  1903               	skipnz
  4624  0D7F  2D52               	goto	l3133
  4625  0D80  2D81               	goto	l329
  4626  0D81                     l329:	
  4627  0D81  0008               	return
  4628  0D82                     __end_of_SetDisplay:	
  4629                           
  4630                           	psect	text15
  4631  0E35                     __ptext15:	
  4632 ;; *************** function _SetReceivedTimes *****************
  4633 ;; Defined at:
  4634 ;;		line 86 in file "./CustomLib/TrafficLight.h"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  _dataFromGat    1    wreg     PTR unsigned char 
  4637 ;;		 -> dataFromGateway(15), 
  4638 ;;  _semafori       1   12[BANK0 ] PTR PTR struct .
  4639 ;;		 -> Semafori(2), 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  _dataFromGat    1   19[BANK0 ] PTR unsigned char 
  4642 ;;		 -> dataFromGateway(15), 
  4643 ;;  index           1   20[BANK0 ] unsigned char 
  4644 ;;  colorId         1   18[BANK0 ] unsigned char 
  4645 ;;  semaforoId      1   17[BANK0 ] unsigned char 
  4646 ;;  i               1   21[BANK0 ] unsigned char 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      void 
  4649 ;; Registers used:
  4650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4656 ;;      Params:         0       1       0       0       0
  4657 ;;      Locals:         0       5       0       0       0
  4658 ;;      Temps:          0       4       0       0       0
  4659 ;;      Totals:         0      10       0       0       0
  4660 ;;Total ram usage:       10 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    4
  4663 ;; This function calls:
  4664 ;;		_GetTime
  4665 ;;		___bmul
  4666 ;; This function is called by:
  4667 ;;		_main
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           
  4672                           ;psect for function _SetReceivedTimes
  4673  0E35                     _SetReceivedTimes:	
  4674                           
  4675                           ;incstack = 0
  4676                           ; Regs used in _SetReceivedTimes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4677                           ;SetReceivedTimes@_dataFromGateway stored from wreg
  4678  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  4679  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  4680  0E37  00B3               	movwf	SetReceivedTimes@_dataFromGateway
  4681  0E38                     l3371:	
  4682                           
  4683                           ;./CustomLib/TrafficLight.h: 86: void SetReceivedTimes(ProtocolBytes _dataFromGateway, _
      +                          Semafori _semafori);./CustomLib/TrafficLight.h: 87: {;./CustomLib/TrafficLight.h: 88:   
      +                            for (unsigned char i = 0; i < 3; i++)
  4684  0E38  01B5               	clrf	SetReceivedTimes@i
  4685  0E39                     l3373:	
  4686  0E39  3003               	movlw	3
  4687  0E3A  0235               	subwf	SetReceivedTimes@i,w
  4688  0E3B  1C03               	skipc
  4689  0E3C  2E3E               	goto	u2891
  4690  0E3D  2E3F               	goto	u2890
  4691  0E3E                     u2891:	
  4692  0E3E  2E40               	goto	l3377
  4693  0E3F                     u2890:	
  4694  0E3F  2E94               	goto	l154
  4695  0E40                     l3377:	
  4696                           
  4697                           ;./CustomLib/TrafficLight.h: 89:     {;./CustomLib/TrafficLight.h: 90:         unsigned 
      +                          char index = i * 5;
  4698  0E40  3005               	movlw	5
  4699  0E41  00AD               	movwf	??_SetReceivedTimes
  4700  0E42  082D               	movf	??_SetReceivedTimes,w
  4701  0E43  00A4               	movwf	___bmul@multiplicand
  4702  0E44  0835               	movf	SetReceivedTimes@i,w
  4703  0E45  120A  158A  22B5  120A  158A  	fcall	___bmul
  4704  0E4A  1283               	bcf	3,5	;RP0=0, select bank0
  4705  0E4B  1303               	bcf	3,6	;RP1=0, select bank0
  4706  0E4C  00AE               	movwf	??_SetReceivedTimes+1
  4707  0E4D  082E               	movf	??_SetReceivedTimes+1,w
  4708  0E4E  00B4               	movwf	SetReceivedTimes@index
  4709  0E4F                     l3379:	
  4710                           
  4711                           ;./CustomLib/TrafficLight.h: 91:         unsigned char semaforoId = (_dataFromGateway[in
      +                          dex] >> 1) & 0x0F;
  4712  0E4F  0834               	movf	SetReceivedTimes@index,w
  4713  0E50  0733               	addwf	SetReceivedTimes@_dataFromGateway,w
  4714  0E51  00AD               	movwf	??_SetReceivedTimes
  4715  0E52  082D               	movf	??_SetReceivedTimes,w
  4716  0E53  0084               	movwf	4
  4717  0E54  1383               	bcf	3,7	;select IRP bank0
  4718  0E55  0800               	movf	0,w
  4719  0E56  00AE               	movwf	??_SetReceivedTimes+1
  4720  0E57  1003               	clrc
  4721  0E58  0C2E               	rrf	??_SetReceivedTimes+1,w
  4722  0E59  390F               	andlw	15
  4723  0E5A  00AF               	movwf	??_SetReceivedTimes+2
  4724  0E5B  082F               	movf	??_SetReceivedTimes+2,w
  4725  0E5C  00B1               	movwf	SetReceivedTimes@semaforoId
  4726  0E5D                     l3381:	
  4727                           
  4728                           ;./CustomLib/TrafficLight.h: 92:         unsigned char colorId = ((_dataFromGateway[inde
      +                          x] >> 5) & 0x03) - 1;
  4729  0E5D  0834               	movf	SetReceivedTimes@index,w
  4730  0E5E  0733               	addwf	SetReceivedTimes@_dataFromGateway,w
  4731  0E5F  00AD               	movwf	??_SetReceivedTimes
  4732  0E60  082D               	movf	??_SetReceivedTimes,w
  4733  0E61  0084               	movwf	4
  4734  0E62  0800               	movf	0,w
  4735  0E63  00AE               	movwf	??_SetReceivedTimes+1
  4736  0E64  3005               	movlw	5
  4737  0E65                     u2905:	
  4738  0E65  1003               	clrc
  4739  0E66  0CAE               	rrf	??_SetReceivedTimes+1,f
  4740  0E67  3EFF               	addlw	-1
  4741  0E68  1D03               	skipz
  4742  0E69  2E65               	goto	u2905
  4743  0E6A  082E               	movf	??_SetReceivedTimes+1,w
  4744  0E6B  3903               	andlw	3
  4745  0E6C  3EFF               	addlw	255
  4746  0E6D  00AF               	movwf	??_SetReceivedTimes+2
  4747  0E6E  082F               	movf	??_SetReceivedTimes+2,w
  4748  0E6F  00B2               	movwf	SetReceivedTimes@colorId
  4749  0E70                     l3383:	
  4750                           
  4751                           ;./CustomLib/TrafficLight.h: 94:         (*(_semafori)[semaforoId]).new_times[colorId] =
      +                           GetTime(index, _dataFromGateway);
  4752  0E70  0833               	movf	SetReceivedTimes@_dataFromGateway,w
  4753  0E71  00AD               	movwf	??_SetReceivedTimes
  4754  0E72  082D               	movf	??_SetReceivedTimes,w
  4755  0E73  00A4               	movwf	GetTime@_dataFromGateway
  4756  0E74  0834               	movf	SetReceivedTimes@index,w
  4757  0E75  120A  158A  23B9  120A  158A  	fcall	_GetTime
  4758  0E7A  1283               	bcf	3,5	;RP0=0, select bank0
  4759  0E7B  1303               	bcf	3,6	;RP1=0, select bank0
  4760  0E7C  0831               	movf	SetReceivedTimes@semaforoId,w
  4761  0E7D  072C               	addwf	SetReceivedTimes@_semafori,w
  4762  0E7E  00AE               	movwf	??_SetReceivedTimes+1
  4763  0E7F  082E               	movf	??_SetReceivedTimes+1,w
  4764  0E80  0084               	movwf	4
  4765  0E81  0832               	movf	SetReceivedTimes@colorId,w
  4766  0E82  00AF               	movwf	??_SetReceivedTimes+2
  4767  0E83  072F               	addwf	??_SetReceivedTimes+2,w
  4768  0E84  1383               	bcf	3,7	;select IRP bank0
  4769  0E85  0700               	addwf	0,w
  4770  0E86  00B0               	movwf	??_SetReceivedTimes+3
  4771  0E87  0830               	movf	??_SetReceivedTimes+3,w
  4772  0E88  3E06               	addlw	6
  4773  0E89  0084               	movwf	4
  4774  0E8A  0824               	movf	?_GetTime,w
  4775  0E8B  0080               	movwf	0
  4776  0E8C  0A84               	incf	4,f
  4777  0E8D  0825               	movf	?_GetTime+1,w
  4778  0E8E  0080               	movwf	0
  4779  0E8F                     l3385:	
  4780                           
  4781                           ;./CustomLib/TrafficLight.h: 95:     }
  4782  0E8F  3001               	movlw	1
  4783  0E90  00AD               	movwf	??_SetReceivedTimes
  4784  0E91  082D               	movf	??_SetReceivedTimes,w
  4785  0E92  07B5               	addwf	SetReceivedTimes@i,f
  4786  0E93  2E39               	goto	l3373
  4787  0E94                     l154:	
  4788  0E94  0008               	return
  4789  0E95                     __end_of_SetReceivedTimes:	
  4790                           
  4791                           	psect	text16
  4792  0BB9                     __ptext16:	
  4793 ;; *************** function _GetTime *****************
  4794 ;; Defined at:
  4795 ;;		line 37 in file "./CustomLib/TrafficLight.h"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;  index           1    wreg     unsigned char 
  4798 ;;  _dataFromGat    1    4[BANK0 ] PTR unsigned char 
  4799 ;;		 -> dataFromGateway(15), 
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;  index           1    8[BANK0 ] unsigned char 
  4802 ;;  tmp             2   10[BANK0 ] int 
  4803 ;;  shortInt        1    9[BANK0 ] struct .
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  2    4[BANK0 ] int 
  4806 ;; Registers used:
  4807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4813 ;;      Params:         0       2       0       0       0
  4814 ;;      Locals:         0       4       0       0       0
  4815 ;;      Temps:          0       2       0       0       0
  4816 ;;      Totals:         0       8       0       0       0
  4817 ;;Total ram usage:        8 bytes
  4818 ;; Hardware stack levels used:    1
  4819 ;; Hardware stack levels required when called:    3
  4820 ;; This function calls:
  4821 ;;		Nothing
  4822 ;; This function is called by:
  4823 ;;		_SetReceivedTimes
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           
  4828                           ;psect for function _GetTime
  4829  0BB9                     _GetTime:	
  4830                           
  4831                           ;incstack = 0
  4832                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4833                           ;GetTime@index stored from wreg
  4834  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
  4835  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
  4836  0BBB  00A8               	movwf	GetTime@index
  4837  0BBC                     l3109:	
  4838                           
  4839                           ;./CustomLib/TrafficLight.h: 37: int GetTime(unsigned char index, ProtocolBytes _dataFro
      +                          mGateway);./CustomLib/TrafficLight.h: 38: {;./CustomLib/TrafficLight.h: 39:     int tmp;
      +                          ;./CustomLib/TrafficLight.h: 43:     } shortInt;;./CustomLib/TrafficLight.h: 45:     sho
      +                          rtInt.Val = _dataFromGateway[index + 3] & 0x7F;
  4840  0BBC  0828               	movf	GetTime@index,w
  4841  0BBD  0724               	addwf	GetTime@_dataFromGateway,w
  4842  0BBE  00A6               	movwf	??_GetTime
  4843  0BBF  0826               	movf	??_GetTime,w
  4844  0BC0  3E03               	addlw	3
  4845  0BC1  0084               	movwf	4
  4846  0BC2  307F               	movlw	127
  4847  0BC3  1383               	bcf	3,7	;select IRP bank0
  4848  0BC4  0500               	andwf	0,w
  4849  0BC5  00A7               	movwf	??_GetTime+1
  4850  0BC6  0829               	movf	GetTime@shortInt,w
  4851  0BC7  0627               	xorwf	??_GetTime+1,w
  4852  0BC8  3980               	andlw	-128
  4853  0BC9  0627               	xorwf	??_GetTime+1,w
  4854  0BCA  00A9               	movwf	GetTime@shortInt
  4855  0BCB                     l3111:	
  4856                           
  4857                           ;./CustomLib/TrafficLight.h: 46:     tmp = shortInt.Val;
  4858  0BCB  0829               	movf	GetTime@shortInt,w
  4859  0BCC  397F               	andlw	127
  4860  0BCD  00A6               	movwf	??_GetTime
  4861  0BCE  01A7               	clrf	??_GetTime+1
  4862  0BCF  0826               	movf	??_GetTime,w
  4863  0BD0  00AA               	movwf	GetTime@tmp
  4864  0BD1  0827               	movf	??_GetTime+1,w
  4865  0BD2  00AB               	movwf	GetTime@tmp+1
  4866  0BD3                     l3113:	
  4867                           
  4868                           ;./CustomLib/TrafficLight.h: 47:     tmp = (tmp << 7) & 0x80;
  4869  0BD3  082B               	movf	GetTime@tmp+1,w
  4870  0BD4  00A7               	movwf	??_GetTime+1
  4871  0BD5  082A               	movf	GetTime@tmp,w
  4872  0BD6  00A6               	movwf	??_GetTime
  4873  0BD7  3007               	movlw	7
  4874  0BD8  00FF               	movwf	btemp+1
  4875  0BD9                     u2425:	
  4876  0BD9  1003               	clrc
  4877  0BDA  0DA6               	rlf	??_GetTime,f
  4878  0BDB  0DA7               	rlf	??_GetTime+1,f
  4879  0BDC  0BFF               	decfsz	btemp+1,f
  4880  0BDD  2BD9               	goto	u2425
  4881  0BDE  3080               	movlw	128
  4882  0BDF  0526               	andwf	??_GetTime,w
  4883  0BE0  00AA               	movwf	GetTime@tmp
  4884  0BE1  3000               	movlw	0
  4885  0BE2  0527               	andwf	??_GetTime+1,w
  4886  0BE3  00AB               	movwf	GetTime@tmp+1
  4887  0BE4                     l3115:	
  4888                           
  4889                           ;./CustomLib/TrafficLight.h: 49:     shortInt.Val = _dataFromGateway[index + 2] & 0x7F;
  4890  0BE4  0828               	movf	GetTime@index,w
  4891  0BE5  0724               	addwf	GetTime@_dataFromGateway,w
  4892  0BE6  00A6               	movwf	??_GetTime
  4893  0BE7  0826               	movf	??_GetTime,w
  4894  0BE8  3E02               	addlw	2
  4895  0BE9  0084               	movwf	4
  4896  0BEA  307F               	movlw	127
  4897  0BEB  0500               	andwf	0,w
  4898  0BEC  00A7               	movwf	??_GetTime+1
  4899  0BED  0829               	movf	GetTime@shortInt,w
  4900  0BEE  0627               	xorwf	??_GetTime+1,w
  4901  0BEF  3980               	andlw	-128
  4902  0BF0  0627               	xorwf	??_GetTime+1,w
  4903  0BF1  00A9               	movwf	GetTime@shortInt
  4904  0BF2                     l3117:	
  4905                           
  4906                           ;./CustomLib/TrafficLight.h: 50:     tmp = tmp | shortInt.Val;
  4907  0BF2  0829               	movf	GetTime@shortInt,w
  4908  0BF3  397F               	andlw	127
  4909  0BF4  00A6               	movwf	??_GetTime
  4910  0BF5  082A               	movf	GetTime@tmp,w
  4911  0BF6  0426               	iorwf	??_GetTime,w
  4912  0BF7  00AA               	movwf	GetTime@tmp
  4913  0BF8  082B               	movf	GetTime@tmp+1,w
  4914  0BF9  00AB               	movwf	GetTime@tmp+1
  4915  0BFA                     l3119:	
  4916                           
  4917                           ;./CustomLib/TrafficLight.h: 52:     return tmp;
  4918  0BFA  082B               	movf	GetTime@tmp+1,w
  4919  0BFB  00A5               	movwf	?_GetTime+1
  4920  0BFC  082A               	movf	GetTime@tmp,w
  4921  0BFD  00A4               	movwf	?_GetTime
  4922  0BFE                     l137:	
  4923  0BFE  0008               	return
  4924  0BFF                     __end_of_GetTime:	
  4925                           
  4926                           	psect	text17
  4927  062F                     __ptext17:	
  4928 ;; *************** function _SetDefaultTimers *****************
  4929 ;; Defined at:
  4930 ;;		line 56 in file "./CustomLib/TrafficLight.h"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  rosso           2    4[BANK0 ] int 
  4933 ;;  verde           2    6[BANK0 ] int 
  4934 ;;  giallo          2    8[BANK0 ] int 
  4935 ;;  _semafori       1   10[BANK0 ] PTR PTR struct .
  4936 ;;		 -> Semafori(2), 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  i               1   15[BANK0 ] unsigned char 
  4939 ;;  l               1   14[BANK0 ] unsigned char 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  1    wreg      void 
  4942 ;; Registers used:
  4943 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4949 ;;      Params:         0       7       0       0       0
  4950 ;;      Locals:         0       2       0       0       0
  4951 ;;      Temps:          0       3       0       0       0
  4952 ;;      Totals:         0      12       0       0       0
  4953 ;;Total ram usage:       12 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:    3
  4956 ;; This function calls:
  4957 ;;		Nothing
  4958 ;; This function is called by:
  4959 ;;		_main
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _SetDefaultTimers
  4965  062F                     _SetDefaultTimers:	
  4966  062F                     l3335:	
  4967                           ;incstack = 0
  4968                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4969                           
  4970                           
  4971                           ;./CustomLib/TrafficLight.h: 56: void SetDefaultTimers(int rosso, int verde, int giallo,
      +                           _Semafori _semafori);./CustomLib/TrafficLight.h: 57: {;./CustomLib/TrafficLight.h: 58: 
      +                              for (unsigned char l = 0; l < n_semafori; l++)
  4972  062F  1283               	bcf	3,5	;RP0=0, select bank0
  4973  0630  1303               	bcf	3,6	;RP1=0, select bank0
  4974  0631  01AE               	clrf	SetDefaultTimers@l
  4975  0632                     l3341:	
  4976                           
  4977                           ;./CustomLib/TrafficLight.h: 59:     {;./CustomLib/TrafficLight.h: 60:         for (unsi
      +                          gned char i = 0; i < 3; i++)
  4978  0632  01AF               	clrf	SetDefaultTimers@i
  4979  0633  2EA3               	goto	l3355
  4980  0634                     l3347:	
  4981                           
  4982                           ;./CustomLib/TrafficLight.h: 65:                 (*(_semafori)[l]).times[i] = rosso;
  4983  0634  082E               	movf	SetDefaultTimers@l,w
  4984  0635  072A               	addwf	SetDefaultTimers@_semafori,w
  4985  0636  00AB               	movwf	??_SetDefaultTimers
  4986  0637  082B               	movf	??_SetDefaultTimers,w
  4987  0638  0084               	movwf	4
  4988  0639  082F               	movf	SetDefaultTimers@i,w
  4989  063A  00AC               	movwf	??_SetDefaultTimers+1
  4990  063B  072C               	addwf	??_SetDefaultTimers+1,w
  4991  063C  1383               	bcf	3,7	;select IRP bank0
  4992  063D  0700               	addwf	0,w
  4993  063E  00AD               	movwf	??_SetDefaultTimers+2
  4994  063F  082D               	movf	??_SetDefaultTimers+2,w
  4995  0640  0084               	movwf	4
  4996  0641  0824               	movf	SetDefaultTimers@rosso,w
  4997  0642  0080               	movwf	0
  4998  0643  0A84               	incf	4,f
  4999  0644  0825               	movf	SetDefaultTimers@rosso+1,w
  5000  0645  0080               	movwf	0
  5001                           
  5002                           ;./CustomLib/TrafficLight.h: 66:                 (*(_semafori)[l]).new_times[i] = rosso;
  5003  0646  082E               	movf	SetDefaultTimers@l,w
  5004  0647  072A               	addwf	SetDefaultTimers@_semafori,w
  5005  0648  00AB               	movwf	??_SetDefaultTimers
  5006  0649  082B               	movf	??_SetDefaultTimers,w
  5007  064A  0084               	movwf	4
  5008  064B  082F               	movf	SetDefaultTimers@i,w
  5009  064C  00AC               	movwf	??_SetDefaultTimers+1
  5010  064D  072C               	addwf	??_SetDefaultTimers+1,w
  5011  064E  0700               	addwf	0,w
  5012  064F  00AD               	movwf	??_SetDefaultTimers+2
  5013  0650  082D               	movf	??_SetDefaultTimers+2,w
  5014  0651  3E06               	addlw	6
  5015  0652  0084               	movwf	4
  5016  0653  0824               	movf	SetDefaultTimers@rosso,w
  5017  0654  0080               	movwf	0
  5018  0655  0A84               	incf	4,f
  5019  0656  0825               	movf	SetDefaultTimers@rosso+1,w
  5020  0657  0080               	movwf	0
  5021                           
  5022                           ;./CustomLib/TrafficLight.h: 67:                 break;
  5023  0658  2EB6               	goto	l3357
  5024  0659                     l3349:	
  5025                           
  5026                           ;./CustomLib/TrafficLight.h: 69:                 (*(_semafori)[l]).times[i] = verde;
  5027  0659  082E               	movf	SetDefaultTimers@l,w
  5028  065A  072A               	addwf	SetDefaultTimers@_semafori,w
  5029  065B  00AB               	movwf	??_SetDefaultTimers
  5030  065C  082B               	movf	??_SetDefaultTimers,w
  5031  065D  0084               	movwf	4
  5032  065E  082F               	movf	SetDefaultTimers@i,w
  5033  065F  00AC               	movwf	??_SetDefaultTimers+1
  5034  0660  072C               	addwf	??_SetDefaultTimers+1,w
  5035  0661  1383               	bcf	3,7	;select IRP bank0
  5036  0662  0700               	addwf	0,w
  5037  0663  00AD               	movwf	??_SetDefaultTimers+2
  5038  0664  082D               	movf	??_SetDefaultTimers+2,w
  5039  0665  0084               	movwf	4
  5040  0666  0826               	movf	SetDefaultTimers@verde,w
  5041  0667  0080               	movwf	0
  5042  0668  0A84               	incf	4,f
  5043  0669  0827               	movf	SetDefaultTimers@verde+1,w
  5044  066A  0080               	movwf	0
  5045                           
  5046                           ;./CustomLib/TrafficLight.h: 70:                 (*(_semafori)[l]).new_times[i] = verde;
  5047  066B  082E               	movf	SetDefaultTimers@l,w
  5048  066C  072A               	addwf	SetDefaultTimers@_semafori,w
  5049  066D  00AB               	movwf	??_SetDefaultTimers
  5050  066E  082B               	movf	??_SetDefaultTimers,w
  5051  066F  0084               	movwf	4
  5052  0670  082F               	movf	SetDefaultTimers@i,w
  5053  0671  00AC               	movwf	??_SetDefaultTimers+1
  5054  0672  072C               	addwf	??_SetDefaultTimers+1,w
  5055  0673  0700               	addwf	0,w
  5056  0674  00AD               	movwf	??_SetDefaultTimers+2
  5057  0675  082D               	movf	??_SetDefaultTimers+2,w
  5058  0676  3E06               	addlw	6
  5059  0677  0084               	movwf	4
  5060  0678  0826               	movf	SetDefaultTimers@verde,w
  5061  0679  0080               	movwf	0
  5062  067A  0A84               	incf	4,f
  5063  067B  0827               	movf	SetDefaultTimers@verde+1,w
  5064  067C  0080               	movwf	0
  5065                           
  5066                           ;./CustomLib/TrafficLight.h: 71:                 break;
  5067  067D  2EB6               	goto	l3357
  5068  067E                     l3351:	
  5069                           
  5070                           ;./CustomLib/TrafficLight.h: 73:                 (*(_semafori)[l]).times[i] = giallo;
  5071  067E  082E               	movf	SetDefaultTimers@l,w
  5072  067F  072A               	addwf	SetDefaultTimers@_semafori,w
  5073  0680  00AB               	movwf	??_SetDefaultTimers
  5074  0681  082B               	movf	??_SetDefaultTimers,w
  5075  0682  0084               	movwf	4
  5076  0683  082F               	movf	SetDefaultTimers@i,w
  5077  0684  00AC               	movwf	??_SetDefaultTimers+1
  5078  0685  072C               	addwf	??_SetDefaultTimers+1,w
  5079  0686  1383               	bcf	3,7	;select IRP bank0
  5080  0687  0700               	addwf	0,w
  5081  0688  00AD               	movwf	??_SetDefaultTimers+2
  5082  0689  082D               	movf	??_SetDefaultTimers+2,w
  5083  068A  0084               	movwf	4
  5084  068B  0828               	movf	SetDefaultTimers@giallo,w
  5085  068C  0080               	movwf	0
  5086  068D  0A84               	incf	4,f
  5087  068E  0829               	movf	SetDefaultTimers@giallo+1,w
  5088  068F  0080               	movwf	0
  5089                           
  5090                           ;./CustomLib/TrafficLight.h: 74:                 (*(_semafori)[l]).new_times[i] = giallo
      +                          ;
  5091  0690  082E               	movf	SetDefaultTimers@l,w
  5092  0691  072A               	addwf	SetDefaultTimers@_semafori,w
  5093  0692  00AB               	movwf	??_SetDefaultTimers
  5094  0693  082B               	movf	??_SetDefaultTimers,w
  5095  0694  0084               	movwf	4
  5096  0695  082F               	movf	SetDefaultTimers@i,w
  5097  0696  00AC               	movwf	??_SetDefaultTimers+1
  5098  0697  072C               	addwf	??_SetDefaultTimers+1,w
  5099  0698  0700               	addwf	0,w
  5100  0699  00AD               	movwf	??_SetDefaultTimers+2
  5101  069A  082D               	movf	??_SetDefaultTimers+2,w
  5102  069B  3E06               	addlw	6
  5103  069C  0084               	movwf	4
  5104  069D  0828               	movf	SetDefaultTimers@giallo,w
  5105  069E  0080               	movwf	0
  5106  069F  0A84               	incf	4,f
  5107  06A0  0829               	movf	SetDefaultTimers@giallo+1,w
  5108  06A1  0080               	movwf	0
  5109                           
  5110                           ;./CustomLib/TrafficLight.h: 75:                 break;
  5111  06A2  2EB6               	goto	l3357
  5112  06A3                     l3355:	
  5113  06A3  082F               	movf	SetDefaultTimers@i,w
  5114  06A4  00AB               	movwf	??_SetDefaultTimers
  5115  06A5  01AC               	clrf	??_SetDefaultTimers+1
  5116                           
  5117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5118                           ; Switch size 1, requested type "simple"
  5119                           ; Number of cases is 1, Range of values is 0 to 0
  5120                           ; switch strategies available:
  5121                           ; Name         Instructions Cycles
  5122                           ; simple_byte            4     3 (average)
  5123                           ; direct_byte           11     8 (fixed)
  5124                           ; jumptable            260     6 (fixed)
  5125                           ;	Chosen strategy is simple_byte
  5126  06A6  082C               	movf	??_SetDefaultTimers+1,w
  5127  06A7  3A00               	xorlw	0	; case 0
  5128  06A8  1903               	skipnz
  5129  06A9  2EAB               	goto	l3979
  5130  06AA  2EB6               	goto	l3357
  5131  06AB                     l3979:	
  5132                           
  5133                           ; Switch size 1, requested type "simple"
  5134                           ; Number of cases is 3, Range of values is 0 to 2
  5135                           ; switch strategies available:
  5136                           ; Name         Instructions Cycles
  5137                           ; simple_byte           10     6 (average)
  5138                           ; direct_byte           17     8 (fixed)
  5139                           ; jumptable            260     6 (fixed)
  5140                           ;	Chosen strategy is simple_byte
  5141  06AB  082B               	movf	??_SetDefaultTimers,w
  5142  06AC  3A00               	xorlw	0	; case 0
  5143  06AD  1903               	skipnz
  5144  06AE  2E34               	goto	l3347
  5145  06AF  3A01               	xorlw	1	; case 1
  5146  06B0  1903               	skipnz
  5147  06B1  2E59               	goto	l3349
  5148  06B2  3A03               	xorlw	3	; case 2
  5149  06B3  1903               	skipnz
  5150  06B4  2E7E               	goto	l3351
  5151  06B5  2EB6               	goto	l3357
  5152  06B6                     l3357:	
  5153                           
  5154                           ;./CustomLib/TrafficLight.h: 77:         }
  5155  06B6  3001               	movlw	1
  5156  06B7  00AB               	movwf	??_SetDefaultTimers
  5157  06B8  082B               	movf	??_SetDefaultTimers,w
  5158  06B9  07AF               	addwf	SetDefaultTimers@i,f
  5159  06BA                     l3359:	
  5160  06BA  3003               	movlw	3
  5161  06BB  022F               	subwf	SetDefaultTimers@i,w
  5162  06BC  1C03               	skipc
  5163  06BD  2EBF               	goto	u2871
  5164  06BE  2EC0               	goto	u2870
  5165  06BF                     u2871:	
  5166  06BF  2EA3               	goto	l3355
  5167  06C0                     u2870:	
  5168  06C0                     l3361:	
  5169                           
  5170                           ;./CustomLib/TrafficLight.h: 78:     }
  5171  06C0  3001               	movlw	1
  5172  06C1  00AB               	movwf	??_SetDefaultTimers
  5173  06C2  082B               	movf	??_SetDefaultTimers,w
  5174  06C3  07AE               	addwf	SetDefaultTimers@l,f
  5175  06C4                     l3363:	
  5176  06C4  3002               	movlw	2
  5177  06C5  022E               	subwf	SetDefaultTimers@l,w
  5178  06C6  1C03               	skipc
  5179  06C7  2EC9               	goto	u2881
  5180  06C8  2ECA               	goto	u2880
  5181  06C9                     u2881:	
  5182  06C9  2E32               	goto	l3341
  5183  06CA                     u2880:	
  5184  06CA                     l3365:	
  5185                           
  5186                           ;./CustomLib/TrafficLight.h: 80:     (*(_semafori)[0]).lux_select = 0;
  5187  06CA  082A               	movf	SetDefaultTimers@_semafori,w
  5188  06CB  0084               	movwf	4
  5189  06CC  1383               	bcf	3,7	;select IRP bank0
  5190  06CD  0800               	movf	0,w
  5191  06CE  3E0C               	addlw	12
  5192  06CF  0084               	movwf	4
  5193  06D0  0180               	clrf	0
  5194                           
  5195                           ;./CustomLib/TrafficLight.h: 81:     (*(_semafori)[0]).new_lux_select = 0;
  5196  06D1  082A               	movf	SetDefaultTimers@_semafori,w
  5197  06D2  0084               	movwf	4
  5198  06D3  0800               	movf	0,w
  5199  06D4  3E0D               	addlw	13
  5200  06D5  0084               	movwf	4
  5201  06D6  0180               	clrf	0
  5202                           
  5203                           ;./CustomLib/TrafficLight.h: 82:     (*(_semafori)[1]).lux_select = 1;
  5204  06D7  0A2A               	incf	SetDefaultTimers@_semafori,w
  5205  06D8  0084               	movwf	4
  5206  06D9  0800               	movf	0,w
  5207  06DA  3E0C               	addlw	12
  5208  06DB  0084               	movwf	4
  5209  06DC  0180               	clrf	0
  5210  06DD  0A80               	incf	0,f
  5211                           
  5212                           ;./CustomLib/TrafficLight.h: 83:     (*(_semafori)[1]).new_lux_select = 1;
  5213  06DE  0A2A               	incf	SetDefaultTimers@_semafori,w
  5214  06DF  0084               	movwf	4
  5215  06E0  0800               	movf	0,w
  5216  06E1  3E0D               	addlw	13
  5217  06E2  0084               	movwf	4
  5218  06E3  0180               	clrf	0
  5219  06E4  0A80               	incf	0,f
  5220  06E5                     l149:	
  5221  06E5  0008               	return
  5222  06E6                     __end_of_SetDefaultTimers:	
  5223                           
  5224                           	psect	text18
  5225  049A                     __ptext18:	
  5226 ;; *************** function _GetDigits *****************
  5227 ;; Defined at:
  5228 ;;		line 98 in file "./CustomLib/TrafficLight.h"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  _digits         1    wreg     PTR PTR struct .
  5231 ;;		 -> DigitsArr(2), 
  5232 ;;  index           1   20[BANK0 ] unsigned char 
  5233 ;;  Time            2   21[BANK0 ] int 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  _digits         1   28[BANK0 ] PTR PTR struct .
  5236 ;;		 -> DigitsArr(2), 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  1    wreg      void 
  5239 ;; Registers used:
  5240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5246 ;;      Params:         0       3       0       0       0
  5247 ;;      Locals:         0       3       0       0       0
  5248 ;;      Temps:          0       3       0       0       0
  5249 ;;      Totals:         0       9       0       0       0
  5250 ;;Total ram usage:        9 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    4
  5253 ;; This function calls:
  5254 ;;		___awdiv
  5255 ;;		___awmod
  5256 ;;		___bmul
  5257 ;; This function is called by:
  5258 ;;		_main
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           
  5263                           ;psect for function _GetDigits
  5264  049A                     _GetDigits:	
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _GetDigits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5268                           ;GetDigits@_digits stored from wreg
  5269  049A  1283               	bcf	3,5	;RP0=0, select bank0
  5270  049B  1303               	bcf	3,6	;RP1=0, select bank0
  5271  049C  00BC               	movwf	GetDigits@_digits
  5272  049D                     l3389:	
  5273                           
  5274                           ;./CustomLib/TrafficLight.h: 98: void GetDigits(_Digits _digits, unsigned char index, in
      +                          t Time);./CustomLib/TrafficLight.h: 99: {;./CustomLib/TrafficLight.h: 100:     while (Ti
      +                          me / 1000 > 0)
  5275  049D  2CB3               	goto	l3393
  5276  049E                     l3391:	
  5277                           
  5278                           ;./CustomLib/TrafficLight.h: 101:     {;./CustomLib/TrafficLight.h: 102:         Time = 
      +                          Time / 10;
  5279  049E  300A               	movlw	10
  5280  049F  1283               	bcf	3,5	;RP0=0, select bank0
  5281  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  5282  04A1  00AB               	movwf	___awdiv@divisor
  5283  04A2  3000               	movlw	0
  5284  04A3  00AC               	movwf	___awdiv@divisor+1
  5285  04A4  0836               	movf	GetDigits@Time+1,w
  5286  04A5  00AE               	movwf	___awdiv@dividend+1
  5287  04A6  0835               	movf	GetDigits@Time,w
  5288  04A7  00AD               	movwf	___awdiv@dividend
  5289  04A8  120A  158A  26FA  120A  118A  	fcall	___awdiv
  5290  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  5291  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  5292  04AF  082C               	movf	?___awdiv+1,w
  5293  04B0  00B6               	movwf	GetDigits@Time+1
  5294  04B1  082B               	movf	?___awdiv,w
  5295  04B2  00B5               	movwf	GetDigits@Time
  5296  04B3                     l3393:	
  5297                           
  5298                           ;./CustomLib/TrafficLight.h: 100:     while (Time / 1000 > 0)
  5299  04B3  30E8               	movlw	232
  5300  04B4  00AB               	movwf	___awdiv@divisor
  5301  04B5  3003               	movlw	3
  5302  04B6  00AC               	movwf	___awdiv@divisor+1
  5303  04B7  0836               	movf	GetDigits@Time+1,w
  5304  04B8  00AE               	movwf	___awdiv@dividend+1
  5305  04B9  0835               	movf	GetDigits@Time,w
  5306  04BA  00AD               	movwf	___awdiv@dividend
  5307  04BB  120A  158A  26FA  120A  118A  	fcall	___awdiv
  5308  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  5309  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  5310  04C2  082C               	movf	?___awdiv+1,w
  5311  04C3  3A80               	xorlw	128
  5312  04C4  00FF               	movwf	btemp+1
  5313  04C5  3080               	movlw	128
  5314  04C6  027F               	subwf	btemp+1,w
  5315  04C7  1D03               	skipz
  5316  04C8  2CCB               	goto	u2915
  5317  04C9  3001               	movlw	1
  5318  04CA  022B               	subwf	?___awdiv,w
  5319  04CB                     u2915:	
  5320  04CB  1803               	skipnc
  5321  04CC  2CCE               	goto	u2911
  5322  04CD  2CCF               	goto	u2910
  5323  04CE                     u2911:	
  5324  04CE  2C9E               	goto	l3391
  5325  04CF                     u2910:	
  5326  04CF                     l3395:	
  5327                           
  5328                           ;./CustomLib/TrafficLight.h: 105:     (*_digits)[index].centinaia = Time / 100;
  5329  04CF  3064               	movlw	100
  5330  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  5331  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  5332  04D2  00AB               	movwf	___awdiv@divisor
  5333  04D3  3000               	movlw	0
  5334  04D4  00AC               	movwf	___awdiv@divisor+1
  5335  04D5  0836               	movf	GetDigits@Time+1,w
  5336  04D6  00AE               	movwf	___awdiv@dividend+1
  5337  04D7  0835               	movf	GetDigits@Time,w
  5338  04D8  00AD               	movwf	___awdiv@dividend
  5339  04D9  120A  158A  26FA  120A  118A  	fcall	___awdiv
  5340  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  5341  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  5342  04E0  082B               	movf	?___awdiv,w
  5343  04E1  00B7               	movwf	??_GetDigits
  5344  04E2  083C               	movf	GetDigits@_digits,w
  5345  04E3  0084               	movwf	4
  5346  04E4  3003               	movlw	3
  5347  04E5  00B8               	movwf	??_GetDigits+1
  5348  04E6  0838               	movf	??_GetDigits+1,w
  5349  04E7  00A4               	movwf	___bmul@multiplicand
  5350  04E8  0834               	movf	GetDigits@index,w
  5351  04E9  120A  158A  22B5  120A  118A  	fcall	___bmul
  5352  04EE  1383               	bcf	3,7	;select IRP bank0
  5353  04EF  0700               	addwf	0,w
  5354  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  5355  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  5356  04F2  00B9               	movwf	??_GetDigits+2
  5357  04F3  0839               	movf	??_GetDigits+2,w
  5358  04F4  0084               	movwf	4
  5359  04F5  0837               	movf	??_GetDigits,w
  5360  04F6  0080               	movwf	0
  5361                           
  5362                           ;./CustomLib/TrafficLight.h: 106:     (*_digits)[index].decine = (Time % 100) / 10;
  5363  04F7  300A               	movlw	10
  5364  04F8  00AB               	movwf	___awdiv@divisor
  5365  04F9  3000               	movlw	0
  5366  04FA  00AC               	movwf	___awdiv@divisor+1
  5367  04FB  0836               	movf	GetDigits@Time+1,w
  5368  04FC  00A7               	movwf	___awmod@dividend+1
  5369  04FD  0835               	movf	GetDigits@Time,w
  5370  04FE  00A6               	movwf	___awmod@dividend
  5371  04FF  3064               	movlw	100
  5372  0500  00A4               	movwf	___awmod@divisor
  5373  0501  3000               	movlw	0
  5374  0502  00A5               	movwf	___awmod@divisor+1
  5375  0503  120A  158A  25DA  120A  118A  	fcall	___awmod
  5376  0508  1283               	bcf	3,5	;RP0=0, select bank0
  5377  0509  1303               	bcf	3,6	;RP1=0, select bank0
  5378  050A  0825               	movf	?___awmod+1,w
  5379  050B  00AE               	movwf	___awdiv@dividend+1
  5380  050C  0824               	movf	?___awmod,w
  5381  050D  00AD               	movwf	___awdiv@dividend
  5382  050E  120A  158A  26FA  120A  118A  	fcall	___awdiv
  5383  0513  1283               	bcf	3,5	;RP0=0, select bank0
  5384  0514  1303               	bcf	3,6	;RP1=0, select bank0
  5385  0515  082B               	movf	?___awdiv,w
  5386  0516  00B7               	movwf	??_GetDigits
  5387  0517  083C               	movf	GetDigits@_digits,w
  5388  0518  0084               	movwf	4
  5389  0519  3003               	movlw	3
  5390  051A  00B8               	movwf	??_GetDigits+1
  5391  051B  0838               	movf	??_GetDigits+1,w
  5392  051C  00A4               	movwf	___bmul@multiplicand
  5393  051D  0834               	movf	GetDigits@index,w
  5394  051E  120A  158A  22B5  120A  118A  	fcall	___bmul
  5395  0523  1383               	bcf	3,7	;select IRP bank0
  5396  0524  0700               	addwf	0,w
  5397  0525  1283               	bcf	3,5	;RP0=0, select bank0
  5398  0526  1303               	bcf	3,6	;RP1=0, select bank0
  5399  0527  00B9               	movwf	??_GetDigits+2
  5400  0528  0A39               	incf	??_GetDigits+2,w
  5401  0529  0084               	movwf	4
  5402  052A  0837               	movf	??_GetDigits,w
  5403  052B  0080               	movwf	0
  5404  052C                     l3397:	
  5405                           
  5406                           ;./CustomLib/TrafficLight.h: 107:     (*_digits)[index].unita = (Time % 100) % 10;
  5407  052C  0836               	movf	GetDigits@Time+1,w
  5408  052D  00A7               	movwf	___awmod@dividend+1
  5409  052E  0835               	movf	GetDigits@Time,w
  5410  052F  00A6               	movwf	___awmod@dividend
  5411  0530  3064               	movlw	100
  5412  0531  00A4               	movwf	___awmod@divisor
  5413  0532  3000               	movlw	0
  5414  0533  00A5               	movwf	___awmod@divisor+1
  5415  0534  120A  158A  25DA  120A  118A  	fcall	___awmod
  5416  0539  1283               	bcf	3,5	;RP0=0, select bank0
  5417  053A  1303               	bcf	3,6	;RP1=0, select bank0
  5418  053B  0825               	movf	?___awmod+1,w
  5419  053C  00BB               	movwf	_GetDigits$1203+1
  5420  053D  0824               	movf	?___awmod,w
  5421  053E  00BA               	movwf	_GetDigits$1203
  5422  053F                     l3399:	
  5423                           
  5424                           ;./CustomLib/TrafficLight.h: 107:     (*_digits)[index].unita = (Time % 100) % 10;
  5425  053F  300A               	movlw	10
  5426  0540  00A4               	movwf	___awmod@divisor
  5427  0541  3000               	movlw	0
  5428  0542  00A5               	movwf	___awmod@divisor+1
  5429  0543  083B               	movf	_GetDigits$1203+1,w
  5430  0544  00A7               	movwf	___awmod@dividend+1
  5431  0545  083A               	movf	_GetDigits$1203,w
  5432  0546  00A6               	movwf	___awmod@dividend
  5433  0547  120A  158A  25DA  120A  118A  	fcall	___awmod
  5434  054C  1283               	bcf	3,5	;RP0=0, select bank0
  5435  054D  1303               	bcf	3,6	;RP1=0, select bank0
  5436  054E  0824               	movf	?___awmod,w
  5437  054F  00B7               	movwf	??_GetDigits
  5438  0550  083C               	movf	GetDigits@_digits,w
  5439  0551  0084               	movwf	4
  5440  0552  3003               	movlw	3
  5441  0553  00B8               	movwf	??_GetDigits+1
  5442  0554  0838               	movf	??_GetDigits+1,w
  5443  0555  00A4               	movwf	___bmul@multiplicand
  5444  0556  0834               	movf	GetDigits@index,w
  5445  0557  120A  158A  22B5  120A  118A  	fcall	___bmul
  5446  055C  1383               	bcf	3,7	;select IRP bank0
  5447  055D  0700               	addwf	0,w
  5448  055E  1283               	bcf	3,5	;RP0=0, select bank0
  5449  055F  1303               	bcf	3,6	;RP1=0, select bank0
  5450  0560  00B9               	movwf	??_GetDigits+2
  5451  0561  0839               	movf	??_GetDigits+2,w
  5452  0562  3E02               	addlw	2
  5453  0563  0084               	movwf	4
  5454  0564  0837               	movf	??_GetDigits,w
  5455  0565  0080               	movwf	0
  5456  0566                     l160:	
  5457  0566  0008               	return
  5458  0567                     __end_of_GetDigits:	
  5459                           
  5460                           	psect	text19
  5461  0AB5                     __ptext19:	
  5462 ;; *************** function ___bmul *****************
  5463 ;; Defined at:
  5464 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  multiplier      1    wreg     unsigned char 
  5467 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;  multiplier      1    7[BANK0 ] unsigned char 
  5470 ;;  product         1    6[BANK0 ] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      unsigned char 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5480 ;;      Params:         0       1       0       0       0
  5481 ;;      Locals:         0       2       0       0       0
  5482 ;;      Temps:          0       1       0       0       0
  5483 ;;      Totals:         0       4       0       0       0
  5484 ;;Total ram usage:        4 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    3
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_SetReceivedTimes
  5491 ;;		_GetDigits
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function ___bmul
  5497  0AB5                     ___bmul:	
  5498                           
  5499                           ;incstack = 0
  5500                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5501                           ;___bmul@multiplier stored from wreg
  5502  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  5503  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  5504  0AB7  00A7               	movwf	___bmul@multiplier
  5505  0AB8                     l3173:	
  5506  0AB8  01A6               	clrf	___bmul@product
  5507  0AB9                     l3175:	
  5508  0AB9  1C27               	btfss	___bmul@multiplier,0
  5509  0ABA  2ABC               	goto	u2531
  5510  0ABB  2ABD               	goto	u2530
  5511  0ABC                     u2531:	
  5512  0ABC  2AC1               	goto	l3179
  5513  0ABD                     u2530:	
  5514  0ABD                     l3177:	
  5515  0ABD  0824               	movf	___bmul@multiplicand,w
  5516  0ABE  00A5               	movwf	??___bmul
  5517  0ABF  0825               	movf	??___bmul,w
  5518  0AC0  07A6               	addwf	___bmul@product,f
  5519  0AC1                     l3179:	
  5520  0AC1  1003               	clrc
  5521  0AC2  0DA4               	rlf	___bmul@multiplicand,f
  5522  0AC3                     l3181:	
  5523  0AC3  1003               	clrc
  5524  0AC4  0CA7               	rrf	___bmul@multiplier,f
  5525  0AC5  0827               	movf	___bmul@multiplier,w
  5526  0AC6  1D03               	btfss	3,2
  5527  0AC7  2AC9               	goto	u2541
  5528  0AC8  2ACA               	goto	u2540
  5529  0AC9                     u2541:	
  5530  0AC9  2AB9               	goto	l3175
  5531  0ACA                     u2540:	
  5532  0ACA                     l3183:	
  5533  0ACA  0826               	movf	___bmul@product,w
  5534  0ACB                     l465:	
  5535  0ACB  0008               	return
  5536  0ACC                     __end_of___bmul:	
  5537                           
  5538                           	psect	text20
  5539  0DDA                     __ptext20:	
  5540 ;; *************** function ___awmod *****************
  5541 ;; Defined at:
  5542 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  divisor         2    4[BANK0 ] int 
  5545 ;;  dividend        2    6[BANK0 ] int 
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;  sign            1   10[BANK0 ] unsigned char 
  5548 ;;  counter         1    9[BANK0 ] unsigned char 
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  2    4[BANK0 ] int 
  5551 ;; Registers used:
  5552 ;;		wreg, status,2, status,0
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5558 ;;      Params:         0       4       0       0       0
  5559 ;;      Locals:         0       2       0       0       0
  5560 ;;      Temps:          0       1       0       0       0
  5561 ;;      Totals:         0       7       0       0       0
  5562 ;;Total ram usage:        7 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    3
  5565 ;; This function calls:
  5566 ;;		Nothing
  5567 ;; This function is called by:
  5568 ;;		_GetDigits
  5569 ;;		_ShowDigitsOnDisplay
  5570 ;;		_ChangeTrafficLight
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           
  5575                           ;psect for function ___awmod
  5576  0DDA                     ___awmod:	
  5577  0DDA                     l3271:	
  5578                           ;incstack = 0
  5579                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5580                           
  5581  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  5582  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  5583  0DDC  01AA               	clrf	___awmod@sign
  5584  0DDD                     l3273:	
  5585  0DDD  1FA7               	btfss	___awmod@dividend+1,7
  5586  0DDE  2DE0               	goto	u2751
  5587  0DDF  2DE1               	goto	u2750
  5588  0DE0                     u2751:	
  5589  0DE0  2DE8               	goto	l3279
  5590  0DE1                     u2750:	
  5591  0DE1                     l3275:	
  5592  0DE1  09A6               	comf	___awmod@dividend,f
  5593  0DE2  09A7               	comf	___awmod@dividend+1,f
  5594  0DE3  0AA6               	incf	___awmod@dividend,f
  5595  0DE4  1903               	skipnz
  5596  0DE5  0AA7               	incf	___awmod@dividend+1,f
  5597  0DE6                     l3277:	
  5598  0DE6  01AA               	clrf	___awmod@sign
  5599  0DE7  0AAA               	incf	___awmod@sign,f
  5600  0DE8                     l3279:	
  5601  0DE8  1FA5               	btfss	___awmod@divisor+1,7
  5602  0DE9  2DEB               	goto	u2761
  5603  0DEA  2DEC               	goto	u2760
  5604  0DEB                     u2761:	
  5605  0DEB  2DF1               	goto	l3283
  5606  0DEC                     u2760:	
  5607  0DEC                     l3281:	
  5608  0DEC  09A4               	comf	___awmod@divisor,f
  5609  0DED  09A5               	comf	___awmod@divisor+1,f
  5610  0DEE  0AA4               	incf	___awmod@divisor,f
  5611  0DEF  1903               	skipnz
  5612  0DF0  0AA5               	incf	___awmod@divisor+1,f
  5613  0DF1                     l3283:	
  5614  0DF1  0824               	movf	___awmod@divisor,w
  5615  0DF2  0425               	iorwf	___awmod@divisor+1,w
  5616  0DF3  1903               	btfsc	3,2
  5617  0DF4  2DF6               	goto	u2771
  5618  0DF5  2DF7               	goto	u2770
  5619  0DF6                     u2771:	
  5620  0DF6  2E26               	goto	l3301
  5621  0DF7                     u2770:	
  5622  0DF7                     l3285:	
  5623  0DF7  01A9               	clrf	___awmod@counter
  5624  0DF8  0AA9               	incf	___awmod@counter,f
  5625  0DF9  2E05               	goto	l3291
  5626  0DFA                     l3287:	
  5627  0DFA  3001               	movlw	1
  5628  0DFB                     u2785:	
  5629  0DFB  1003               	clrc
  5630  0DFC  0DA4               	rlf	___awmod@divisor,f
  5631  0DFD  0DA5               	rlf	___awmod@divisor+1,f
  5632  0DFE  3EFF               	addlw	-1
  5633  0DFF  1D03               	skipz
  5634  0E00  2DFB               	goto	u2785
  5635  0E01                     l3289:	
  5636  0E01  3001               	movlw	1
  5637  0E02  00A8               	movwf	??___awmod
  5638  0E03  0828               	movf	??___awmod,w
  5639  0E04  07A9               	addwf	___awmod@counter,f
  5640  0E05                     l3291:	
  5641  0E05  1FA5               	btfss	___awmod@divisor+1,7
  5642  0E06  2E08               	goto	u2791
  5643  0E07  2E09               	goto	u2790
  5644  0E08                     u2791:	
  5645  0E08  2DFA               	goto	l3287
  5646  0E09                     u2790:	
  5647  0E09                     l3293:	
  5648  0E09  0825               	movf	___awmod@divisor+1,w
  5649  0E0A  0227               	subwf	___awmod@dividend+1,w
  5650  0E0B  1D03               	skipz
  5651  0E0C  2E0F               	goto	u2805
  5652  0E0D  0824               	movf	___awmod@divisor,w
  5653  0E0E  0226               	subwf	___awmod@dividend,w
  5654  0E0F                     u2805:	
  5655  0E0F  1C03               	skipc
  5656  0E10  2E12               	goto	u2801
  5657  0E11  2E13               	goto	u2800
  5658  0E12                     u2801:	
  5659  0E12  2E19               	goto	l3297
  5660  0E13                     u2800:	
  5661  0E13                     l3295:	
  5662  0E13  0824               	movf	___awmod@divisor,w
  5663  0E14  02A6               	subwf	___awmod@dividend,f
  5664  0E15  0825               	movf	___awmod@divisor+1,w
  5665  0E16  1C03               	skipc
  5666  0E17  03A7               	decf	___awmod@dividend+1,f
  5667  0E18  02A7               	subwf	___awmod@dividend+1,f
  5668  0E19                     l3297:	
  5669  0E19  3001               	movlw	1
  5670  0E1A                     u2815:	
  5671  0E1A  1003               	clrc
  5672  0E1B  0CA5               	rrf	___awmod@divisor+1,f
  5673  0E1C  0CA4               	rrf	___awmod@divisor,f
  5674  0E1D  3EFF               	addlw	-1
  5675  0E1E  1D03               	skipz
  5676  0E1F  2E1A               	goto	u2815
  5677  0E20                     l3299:	
  5678  0E20  3001               	movlw	1
  5679  0E21  02A9               	subwf	___awmod@counter,f
  5680  0E22  1D03               	btfss	3,2
  5681  0E23  2E25               	goto	u2821
  5682  0E24  2E26               	goto	u2820
  5683  0E25                     u2821:	
  5684  0E25  2E09               	goto	l3293
  5685  0E26                     u2820:	
  5686  0E26                     l3301:	
  5687  0E26  082A               	movf	___awmod@sign,w
  5688  0E27  1903               	btfsc	3,2
  5689  0E28  2E2A               	goto	u2831
  5690  0E29  2E2B               	goto	u2830
  5691  0E2A                     u2831:	
  5692  0E2A  2E30               	goto	l3305
  5693  0E2B                     u2830:	
  5694  0E2B                     l3303:	
  5695  0E2B  09A6               	comf	___awmod@dividend,f
  5696  0E2C  09A7               	comf	___awmod@dividend+1,f
  5697  0E2D  0AA6               	incf	___awmod@dividend,f
  5698  0E2E  1903               	skipnz
  5699  0E2F  0AA7               	incf	___awmod@dividend+1,f
  5700  0E30                     l3305:	
  5701  0E30  0827               	movf	___awmod@dividend+1,w
  5702  0E31  00A5               	movwf	?___awmod+1
  5703  0E32  0826               	movf	___awmod@dividend,w
  5704  0E33  00A4               	movwf	?___awmod
  5705  0E34                     l605:	
  5706  0E34  0008               	return
  5707  0E35                     __end_of___awmod:	
  5708                           
  5709                           	psect	text21
  5710  0EFA                     __ptext21:	
  5711 ;; *************** function ___awdiv *****************
  5712 ;; Defined at:
  5713 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;  divisor         2   11[BANK0 ] int 
  5716 ;;  dividend        2   13[BANK0 ] int 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  quotient        2   18[BANK0 ] int 
  5719 ;;  sign            1   17[BANK0 ] unsigned char 
  5720 ;;  counter         1   16[BANK0 ] unsigned char 
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  2   11[BANK0 ] int 
  5723 ;; Registers used:
  5724 ;;		wreg, status,2, status,0
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5730 ;;      Params:         0       4       0       0       0
  5731 ;;      Locals:         0       4       0       0       0
  5732 ;;      Temps:          0       1       0       0       0
  5733 ;;      Totals:         0       9       0       0       0
  5734 ;;Total ram usage:        9 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    3
  5737 ;; This function calls:
  5738 ;;		Nothing
  5739 ;; This function is called by:
  5740 ;;		_GetDigits
  5741 ;;		_map
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           
  5746                           ;psect for function ___awdiv
  5747  0EFA                     ___awdiv:	
  5748  0EFA                     l3227:	
  5749                           ;incstack = 0
  5750                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5751                           
  5752  0EFA  1283               	bcf	3,5	;RP0=0, select bank0
  5753  0EFB  1303               	bcf	3,6	;RP1=0, select bank0
  5754  0EFC  01B1               	clrf	___awdiv@sign
  5755  0EFD                     l3229:	
  5756  0EFD  1FAC               	btfss	___awdiv@divisor+1,7
  5757  0EFE  2F00               	goto	u2651
  5758  0EFF  2F01               	goto	u2650
  5759  0F00                     u2651:	
  5760  0F00  2F08               	goto	l3235
  5761  0F01                     u2650:	
  5762  0F01                     l3231:	
  5763  0F01  09AB               	comf	___awdiv@divisor,f
  5764  0F02  09AC               	comf	___awdiv@divisor+1,f
  5765  0F03  0AAB               	incf	___awdiv@divisor,f
  5766  0F04  1903               	skipnz
  5767  0F05  0AAC               	incf	___awdiv@divisor+1,f
  5768  0F06                     l3233:	
  5769  0F06  01B1               	clrf	___awdiv@sign
  5770  0F07  0AB1               	incf	___awdiv@sign,f
  5771  0F08                     l3235:	
  5772  0F08  1FAE               	btfss	___awdiv@dividend+1,7
  5773  0F09  2F0B               	goto	u2661
  5774  0F0A  2F0C               	goto	u2660
  5775  0F0B                     u2661:	
  5776  0F0B  2F15               	goto	l3241
  5777  0F0C                     u2660:	
  5778  0F0C                     l3237:	
  5779  0F0C  09AD               	comf	___awdiv@dividend,f
  5780  0F0D  09AE               	comf	___awdiv@dividend+1,f
  5781  0F0E  0AAD               	incf	___awdiv@dividend,f
  5782  0F0F  1903               	skipnz
  5783  0F10  0AAE               	incf	___awdiv@dividend+1,f
  5784  0F11                     l3239:	
  5785  0F11  3001               	movlw	1
  5786  0F12  00AF               	movwf	??___awdiv
  5787  0F13  082F               	movf	??___awdiv,w
  5788  0F14  06B1               	xorwf	___awdiv@sign,f
  5789  0F15                     l3241:	
  5790  0F15  01B2               	clrf	___awdiv@quotient
  5791  0F16  01B3               	clrf	___awdiv@quotient+1
  5792  0F17                     l3243:	
  5793  0F17  082B               	movf	___awdiv@divisor,w
  5794  0F18  042C               	iorwf	___awdiv@divisor+1,w
  5795  0F19  1903               	btfsc	3,2
  5796  0F1A  2F1C               	goto	u2671
  5797  0F1B  2F1D               	goto	u2670
  5798  0F1C                     u2671:	
  5799  0F1C  2F54               	goto	l3263
  5800  0F1D                     u2670:	
  5801  0F1D                     l3245:	
  5802  0F1D  01B0               	clrf	___awdiv@counter
  5803  0F1E  0AB0               	incf	___awdiv@counter,f
  5804  0F1F  2F2B               	goto	l3251
  5805  0F20                     l3247:	
  5806  0F20  3001               	movlw	1
  5807  0F21                     u2685:	
  5808  0F21  1003               	clrc
  5809  0F22  0DAB               	rlf	___awdiv@divisor,f
  5810  0F23  0DAC               	rlf	___awdiv@divisor+1,f
  5811  0F24  3EFF               	addlw	-1
  5812  0F25  1D03               	skipz
  5813  0F26  2F21               	goto	u2685
  5814  0F27                     l3249:	
  5815  0F27  3001               	movlw	1
  5816  0F28  00AF               	movwf	??___awdiv
  5817  0F29  082F               	movf	??___awdiv,w
  5818  0F2A  07B0               	addwf	___awdiv@counter,f
  5819  0F2B                     l3251:	
  5820  0F2B  1FAC               	btfss	___awdiv@divisor+1,7
  5821  0F2C  2F2E               	goto	u2691
  5822  0F2D  2F2F               	goto	u2690
  5823  0F2E                     u2691:	
  5824  0F2E  2F20               	goto	l3247
  5825  0F2F                     u2690:	
  5826  0F2F                     l3253:	
  5827  0F2F  3001               	movlw	1
  5828  0F30                     u2705:	
  5829  0F30  1003               	clrc
  5830  0F31  0DB2               	rlf	___awdiv@quotient,f
  5831  0F32  0DB3               	rlf	___awdiv@quotient+1,f
  5832  0F33  3EFF               	addlw	-1
  5833  0F34  1D03               	skipz
  5834  0F35  2F30               	goto	u2705
  5835  0F36  082C               	movf	___awdiv@divisor+1,w
  5836  0F37  022E               	subwf	___awdiv@dividend+1,w
  5837  0F38  1D03               	skipz
  5838  0F39  2F3C               	goto	u2715
  5839  0F3A  082B               	movf	___awdiv@divisor,w
  5840  0F3B  022D               	subwf	___awdiv@dividend,w
  5841  0F3C                     u2715:	
  5842  0F3C  1C03               	skipc
  5843  0F3D  2F3F               	goto	u2711
  5844  0F3E  2F40               	goto	u2710
  5845  0F3F                     u2711:	
  5846  0F3F  2F47               	goto	l3259
  5847  0F40                     u2710:	
  5848  0F40                     l3255:	
  5849  0F40  082B               	movf	___awdiv@divisor,w
  5850  0F41  02AD               	subwf	___awdiv@dividend,f
  5851  0F42  082C               	movf	___awdiv@divisor+1,w
  5852  0F43  1C03               	skipc
  5853  0F44  03AE               	decf	___awdiv@dividend+1,f
  5854  0F45  02AE               	subwf	___awdiv@dividend+1,f
  5855  0F46                     l3257:	
  5856  0F46  1432               	bsf	___awdiv@quotient,0
  5857  0F47                     l3259:	
  5858  0F47  3001               	movlw	1
  5859  0F48                     u2725:	
  5860  0F48  1003               	clrc
  5861  0F49  0CAC               	rrf	___awdiv@divisor+1,f
  5862  0F4A  0CAB               	rrf	___awdiv@divisor,f
  5863  0F4B  3EFF               	addlw	-1
  5864  0F4C  1D03               	skipz
  5865  0F4D  2F48               	goto	u2725
  5866  0F4E                     l3261:	
  5867  0F4E  3001               	movlw	1
  5868  0F4F  02B0               	subwf	___awdiv@counter,f
  5869  0F50  1D03               	btfss	3,2
  5870  0F51  2F53               	goto	u2731
  5871  0F52  2F54               	goto	u2730
  5872  0F53                     u2731:	
  5873  0F53  2F2F               	goto	l3253
  5874  0F54                     u2730:	
  5875  0F54                     l3263:	
  5876  0F54  0831               	movf	___awdiv@sign,w
  5877  0F55  1903               	btfsc	3,2
  5878  0F56  2F58               	goto	u2741
  5879  0F57  2F59               	goto	u2740
  5880  0F58                     u2741:	
  5881  0F58  2F5E               	goto	l3267
  5882  0F59                     u2740:	
  5883  0F59                     l3265:	
  5884  0F59  09B2               	comf	___awdiv@quotient,f
  5885  0F5A  09B3               	comf	___awdiv@quotient+1,f
  5886  0F5B  0AB2               	incf	___awdiv@quotient,f
  5887  0F5C  1903               	skipnz
  5888  0F5D  0AB3               	incf	___awdiv@quotient+1,f
  5889  0F5E                     l3267:	
  5890  0F5E  0833               	movf	___awdiv@quotient+1,w
  5891  0F5F  00AC               	movwf	?___awdiv+1
  5892  0F60  0832               	movf	___awdiv@quotient,w
  5893  0F61  00AB               	movwf	?___awdiv
  5894  0F62                     l592:	
  5895  0F62  0008               	return
  5896  0F63                     __end_of___awdiv:	
  5897                           
  5898                           	psect	text22
  5899  0ACC                     __ptext22:	
  5900 ;; *************** function _ADC_Read *****************
  5901 ;; Defined at:
  5902 ;;		line 355 in file "main.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  canale          1    wreg     unsigned char 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  canale          1    7[BANK0 ] unsigned char 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  2    4[BANK0 ] int 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5916 ;;      Params:         0       2       0       0       0
  5917 ;;      Locals:         0       1       0       0       0
  5918 ;;      Temps:          0       1       0       0       0
  5919 ;;      Totals:         0       4       0       0       0
  5920 ;;Total ram usage:        4 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    3
  5923 ;; This function calls:
  5924 ;;		Nothing
  5925 ;; This function is called by:
  5926 ;;		_main
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           
  5931                           ;psect for function _ADC_Read
  5932  0ACC                     _ADC_Read:	
  5933                           
  5934                           ;incstack = 0
  5935                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5936                           ;ADC_Read@canale stored from wreg
  5937  0ACC  1283               	bcf	3,5	;RP0=0, select bank0
  5938  0ACD  1303               	bcf	3,6	;RP1=0, select bank0
  5939  0ACE  00A7               	movwf	ADC_Read@canale
  5940  0ACF                     l3447:	
  5941                           
  5942                           ;main.c: 355: int ADC_Read(char canale);main.c: 356: {;main.c: 357:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  5943  0ACF  0827               	movf	ADC_Read@canale,w
  5944  0AD0  00A6               	movwf	??_ADC_Read
  5945  0AD1  3002               	movlw	2
  5946  0AD2                     u2955:	
  5947  0AD2  1003               	clrc
  5948  0AD3  0DA6               	rlf	??_ADC_Read,f
  5949  0AD4  3EFF               	addlw	-1
  5950  0AD5  1D03               	skipz
  5951  0AD6  2AD2               	goto	u2955
  5952  0AD7  1003               	clrc
  5953  0AD8  0D26               	rlf	??_ADC_Read,w
  5954  0AD9  3801               	iorlw	1
  5955  0ADA  009F               	movwf	31	;volatile
  5956  0ADB                     l3449:	
  5957                           
  5958                           ;main.c: 358:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5959  0ADB  3004               	movlw	4
  5960  0ADC  1283               	bcf	3,5	;RP0=0, select bank0
  5961  0ADD  1303               	bcf	3,6	;RP1=0, select bank0
  5962  0ADE  00A6               	movwf	??_ADC_Read
  5963  0ADF                     u3287:	
  5964  0ADF  0BA6               	decfsz	??_ADC_Read,f
  5965  0AE0  2ADF               	goto	u3287
  5966  0AE1  0000               	nop
  5967  0AE2                     l3451:	
  5968                           
  5969                           ;main.c: 359:     GO_nDONE = 1;
  5970  0AE2  1283               	bcf	3,5	;RP0=0, select bank0
  5971  0AE3  1303               	bcf	3,6	;RP1=0, select bank0
  5972  0AE4  151F               	bsf	31,2	;volatile
  5973  0AE5                     l268:	
  5974                           ;main.c: 361:         ;
  5975                           
  5976                           
  5977                           ;main.c: 360:     while (GO_nDONE)
  5978  0AE5  191F               	btfsc	31,2	;volatile
  5979  0AE6  2AE8               	goto	u2961
  5980  0AE7  2AE9               	goto	u2960
  5981  0AE8                     u2961:	
  5982  0AE8  2AE5               	goto	l268
  5983  0AE9                     u2960:	
  5984  0AE9                     l3453:	
  5985                           
  5986                           ;main.c: 362:     return ADRESL + (ADRESH << 8);
  5987  0AE9  081E               	movf	30,w	;volatile
  5988  0AEA  00A5               	movwf	?_ADC_Read+1
  5989  0AEB  1683               	bsf	3,5	;RP0=1, select bank1
  5990  0AEC  1303               	bcf	3,6	;RP1=0, select bank1
  5991  0AED  081E               	movf	30,w	;volatile
  5992  0AEE  1283               	bcf	3,5	;RP0=0, select bank0
  5993  0AEF  1303               	bcf	3,6	;RP1=0, select bank0
  5994  0AF0  00A4               	movwf	?_ADC_Read
  5995  0AF1                     l271:	
  5996  0AF1  0008               	return
  5997  0AF2                     __end_of_ADC_Read:	
  5998                           
  5999                           	psect	text23
  6000  0D82                     __ptext23:	
  6001 ;; *************** function _ISR *****************
  6002 ;; Defined at:
  6003 ;;		line 533 in file "main.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;		None
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;		None
  6008 ;; Return value:  Size  Location     Type
  6009 ;;                  1    wreg      void 
  6010 ;; Registers used:
  6011 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6017 ;;      Params:         0       0       0       0       0
  6018 ;;      Locals:         0       0       0       0       0
  6019 ;;      Temps:          0       4       0       0       0
  6020 ;;      Totals:         0       4       0       0       0
  6021 ;;Total ram usage:        4 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    2
  6024 ;; This function calls:
  6025 ;;		_UART_Read
  6026 ;;		_conteggioVeicoli
  6027 ;; This function is called by:
  6028 ;;		Interrupt level 1
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           
  6033                           ;psect for function _ISR
  6034  0D82                     _ISR:	
  6035  0D82                     i1l2777:	
  6036                           
  6037                           ;main.c: 536:     if (RCIF && readGateway.Bit == 0)
  6038  0D82  1E8C               	btfss	12,5	;volatile
  6039  0D83  2D85               	goto	u225_21
  6040  0D84  2D86               	goto	u225_20
  6041  0D85                     u225_21:	
  6042  0D85  2D8F               	goto	i1l2785
  6043  0D86                     u225_20:	
  6044  0D86                     i1l2779:	
  6045  0D86  1858               	btfsc	_readGateway,0
  6046  0D87  2D89               	goto	u226_21
  6047  0D88  2D8A               	goto	u226_20
  6048  0D89                     u226_21:	
  6049  0D89  2D8F               	goto	i1l2785
  6050  0D8A                     u226_20:	
  6051  0D8A                     i1l2781:	
  6052                           
  6053                           ;main.c: 537:     {;main.c: 538:         readGateway.Bit = 1;
  6054  0D8A  1458               	bsf	_readGateway,0
  6055                           
  6056                           ;main.c: 539:         readGatewayDone.Bit = 0;
  6057  0D8B  1059               	bcf	_readGatewayDone,0
  6058                           
  6059                           ;main.c: 540:         readGatewayDone.Timeout = 0;
  6060  0D8C  10D9               	bcf	_readGatewayDone,1
  6061  0D8D                     i1l2783:	
  6062                           
  6063                           ;main.c: 541:         dataFromGatewayIndex = 0;
  6064  0D8D  01D3               	clrf	_dataFromGatewayIndex
  6065                           
  6066                           ;main.c: 542:         timerReadFromGateway = 0;
  6067  0D8E  01D2               	clrf	_timerReadFromGateway
  6068  0D8F                     i1l2785:	
  6069                           
  6070                           ;main.c: 544:     if (RCIF && readGateway.Bit == 1)
  6071  0D8F  1E8C               	btfss	12,5	;volatile
  6072  0D90  2D92               	goto	u227_21
  6073  0D91  2D93               	goto	u227_20
  6074  0D92                     u227_21:	
  6075  0D92  2DAA               	goto	i1l2795
  6076  0D93                     u227_20:	
  6077  0D93                     i1l2787:	
  6078  0D93  1C58               	btfss	_readGateway,0
  6079  0D94  2D96               	goto	u228_21
  6080  0D95  2D97               	goto	u228_20
  6081  0D96                     u228_21:	
  6082  0D96  2DAA               	goto	i1l2795
  6083  0D97                     u228_20:	
  6084  0D97                     i1l2789:	
  6085                           
  6086                           ;main.c: 545:     {;main.c: 546:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  6087  0D97  120A  158A  227B  120A  158A  	fcall	_UART_Read
  6088  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  6089  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  6090  0D9E  00A0               	movwf	??_ISR
  6091  0D9F  0853               	movf	_dataFromGatewayIndex,w
  6092  0DA0  3EA4               	addlw	(low (_dataFromGateway| 0))& (0+255)
  6093  0DA1  0084               	movwf	4
  6094  0DA2  0820               	movf	??_ISR,w
  6095  0DA3  1383               	bcf	3,7	;select IRP bank1
  6096  0DA4  0080               	movwf	0
  6097  0DA5                     i1l2791:	
  6098                           
  6099                           ;main.c: 547:         dataFromGatewayIndex++;
  6100  0DA5  3001               	movlw	1
  6101  0DA6  00A0               	movwf	??_ISR
  6102  0DA7  0820               	movf	??_ISR,w
  6103  0DA8  07D3               	addwf	_dataFromGatewayIndex,f
  6104  0DA9                     i1l2793:	
  6105                           
  6106                           ;main.c: 548:         timerReadFromGateway = 0;
  6107  0DA9  01D2               	clrf	_timerReadFromGateway
  6108  0DAA                     i1l2795:	
  6109                           
  6110                           ;main.c: 553:     if (TMR0IF)
  6111  0DAA  1D0B               	btfss	11,2	;volatile
  6112  0DAB  2DAD               	goto	u229_21
  6113  0DAC  2DAE               	goto	u229_20
  6114  0DAD                     u229_21:	
  6115  0DAD  2DB8               	goto	i1l2803
  6116  0DAE                     u229_20:	
  6117  0DAE                     i1l2797:	
  6118                           
  6119                           ;main.c: 554:     {;main.c: 555:         TMR0IF = 0;
  6120  0DAE  110B               	bcf	11,2	;volatile
  6121  0DAF                     i1l2799:	
  6122                           
  6123                           ;main.c: 556:         conteggioVeicoli();
  6124  0DAF  120A  158A  2695  120A  158A  	fcall	_conteggioVeicoli
  6125  0DB4                     i1l2801:	
  6126                           
  6127                           ;main.c: 557:         TMR0 = 6;
  6128  0DB4  3006               	movlw	6
  6129  0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  6130  0DB6  1303               	bcf	3,6	;RP1=0, select bank0
  6131  0DB7  0081               	movwf	1	;volatile
  6132  0DB8                     i1l2803:	
  6133                           
  6134                           ;main.c: 560:     if (TMR1IF)
  6135  0DB8  1C0C               	btfss	12,0	;volatile
  6136  0DB9  2DBB               	goto	u230_21
  6137  0DBA  2DBC               	goto	u230_20
  6138  0DBB                     u230_21:	
  6139  0DBB  2DD1               	goto	i1l353
  6140  0DBC                     u230_20:	
  6141  0DBC                     i1l2805:	
  6142                           
  6143                           ;main.c: 561:     {;main.c: 562:         TMR1IF = 0;
  6144  0DBC  100C               	bcf	12,0	;volatile
  6145  0DBD                     i1l2807:	
  6146                           
  6147                           ;main.c: 563:         count_lux++;
  6148  0DBD  3001               	movlw	1
  6149  0DBE  00A0               	movwf	??_ISR
  6150  0DBF  0820               	movf	??_ISR,w
  6151  0DC0  07D4               	addwf	_count_lux,f
  6152  0DC1                     i1l2809:	
  6153                           
  6154                           ;main.c: 565:         if (count_lux >= 20)
  6155  0DC1  3014               	movlw	20
  6156  0DC2  0254               	subwf	_count_lux,w
  6157  0DC3  1C03               	skipc
  6158  0DC4  2DC6               	goto	u231_21
  6159  0DC5  2DC7               	goto	u231_20
  6160  0DC6                     u231_21:	
  6161  0DC6  2DCD               	goto	i1l2817
  6162  0DC7                     u231_20:	
  6163  0DC7                     i1l2811:	
  6164                           
  6165                           ;main.c: 566:         {;main.c: 567:             secondPassed.Bit = 1;
  6166  0DC7  1457               	bsf	_secondPassed,0
  6167  0DC8                     i1l2813:	
  6168                           
  6169                           ;main.c: 568:             count_lux = 0;
  6170  0DC8  01D4               	clrf	_count_lux
  6171  0DC9                     i1l2815:	
  6172                           
  6173                           ;main.c: 569:             timerReadFromGateway++;
  6174  0DC9  3001               	movlw	1
  6175  0DCA  00A0               	movwf	??_ISR
  6176  0DCB  0820               	movf	??_ISR,w
  6177  0DCC  07D2               	addwf	_timerReadFromGateway,f
  6178  0DCD                     i1l2817:	
  6179                           
  6180                           ;main.c: 572:         TMR1H = 60;
  6181  0DCD  303C               	movlw	60
  6182  0DCE  008F               	movwf	15	;volatile
  6183  0DCF                     i1l2819:	
  6184                           
  6185                           ;main.c: 573:         TMR1L = 176;
  6186  0DCF  30B0               	movlw	176
  6187  0DD0  008E               	movwf	14	;volatile
  6188  0DD1                     i1l353:	
  6189  0DD1  0823               	movf	??_ISR+3,w
  6190  0DD2  008A               	movwf	10
  6191  0DD3  0822               	movf	??_ISR+2,w
  6192  0DD4  0084               	movwf	4
  6193  0DD5  0E21               	swapf	(??_ISR+1)^0,w
  6194  0DD6  0083               	movwf	3
  6195  0DD7  0EFE               	swapf	btemp,f
  6196  0DD8  0E7E               	swapf	btemp,w
  6197  0DD9  0009               	retfie
  6198  0DDA                     __end_of_ISR:	
  6199                           
  6200                           	psect	intentry
  6201  0004                     __pintentry:	
  6202                           ;incstack = 0
  6203                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6204                           
  6205  0004                     interrupt_function:	
  6206  007E                     saved_w	set	btemp
  6207  0004  00FE               	movwf	btemp
  6208  0005  0E03               	swapf	3,w
  6209  0006  1283               	bcf	3,5	;RP0=0, select bank0
  6210  0007  1303               	bcf	3,6	;RP1=0, select bank0
  6211  0008  00A1               	movwf	??_ISR+1
  6212  0009  0804               	movf	4,w
  6213  000A  00A2               	movwf	??_ISR+2
  6214  000B  080A               	movf	10,w
  6215  000C  00A3               	movwf	??_ISR+3
  6216  000D  120A  158A  2D82   	ljmp	_ISR
  6217                           
  6218                           	psect	text24
  6219  0E95                     __ptext24:	
  6220 ;; *************** function _conteggioVeicoli *****************
  6221 ;; Defined at:
  6222 ;;		line 413 in file "main.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;		None
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;  i               1   13[COMMON] unsigned char 
  6227 ;; Return value:  Size  Location     Type
  6228 ;;                  1    wreg      void 
  6229 ;; Registers used:
  6230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6231 ;; Tracked objects:
  6232 ;;		On entry : 0/0
  6233 ;;		On exit  : 0/0
  6234 ;;		Unchanged: 0/0
  6235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6236 ;;      Params:         0       0       0       0       0
  6237 ;;      Locals:         1       0       0       0       0
  6238 ;;      Temps:          4       0       0       0       0
  6239 ;;      Totals:         5       0       0       0       0
  6240 ;;Total ram usage:        5 bytes
  6241 ;; Hardware stack levels used:    1
  6242 ;; Hardware stack levels required when called:    1
  6243 ;; This function calls:
  6244 ;;		_Conteggio
  6245 ;; This function is called by:
  6246 ;;		_ISR
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           
  6251                           ;psect for function _conteggioVeicoli
  6252  0E95                     _conteggioVeicoli:	
  6253  0E95                     i1l2533:	
  6254                           ;incstack = 0
  6255                           ; Regs used in _conteggioVeicoli: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6256                           
  6257                           
  6258                           ;main.c: 415:     RoadsSensors[0] = PORTBbits.RB3;
  6259  0E95  3000               	movlw	0
  6260  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  6261  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  6262  0E98  1986               	btfsc	6,3	;volatile
  6263  0E99  3001               	movlw	1
  6264  0E9A  1683               	bsf	3,5	;RP0=1, select bank1
  6265  0E9B  1303               	bcf	3,6	;RP1=0, select bank1
  6266  0E9C  00A0               	movwf	_RoadsSensors^(0+128)
  6267                           
  6268                           ;main.c: 416:     RoadsSensors[1] = PORTBbits.RB4;
  6269  0E9D  3000               	movlw	0
  6270  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  6271  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  6272  0EA0  1A06               	btfsc	6,4	;volatile
  6273  0EA1  3001               	movlw	1
  6274  0EA2  1683               	bsf	3,5	;RP0=1, select bank1
  6275  0EA3  1303               	bcf	3,6	;RP1=0, select bank1
  6276  0EA4  00A1               	movwf	(_RoadsSensors^(0+128)+1)
  6277                           
  6278                           ;main.c: 417:     RoadsSensors[2] = PORTBbits.RB5;
  6279  0EA5  3000               	movlw	0
  6280  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  6281  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  6282  0EA8  1A86               	btfsc	6,5	;volatile
  6283  0EA9  3001               	movlw	1
  6284  0EAA  1683               	bsf	3,5	;RP0=1, select bank1
  6285  0EAB  1303               	bcf	3,6	;RP1=0, select bank1
  6286  0EAC  00A2               	movwf	(_RoadsSensors^(0+128)+2)
  6287                           
  6288                           ;main.c: 418:     RoadsSensors[3] = PORTAbits.RA5;
  6289  0EAD  3000               	movlw	0
  6290  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  6291  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  6292  0EB0  1A85               	btfsc	5,5	;volatile
  6293  0EB1  3001               	movlw	1
  6294  0EB2  1683               	bsf	3,5	;RP0=1, select bank1
  6295  0EB3  1303               	bcf	3,6	;RP1=0, select bank1
  6296  0EB4  00A3               	movwf	(_RoadsSensors^(0+128)+3)
  6297  0EB5                     i1l2535:	
  6298                           
  6299                           ;main.c: 420:     for (unsigned char i = 0; i < 4; i++)
  6300  0EB5  01FD               	clrf	conteggioVeicoli@i
  6301  0EB6                     i1l2539:	
  6302                           
  6303                           ;main.c: 421:     {;main.c: 422:         if (!RoadsSensors[i])
  6304  0EB6  087D               	movf	conteggioVeicoli@i,w
  6305  0EB7  3EA0               	addlw	(low (_RoadsSensors| 0))& (0+255)
  6306  0EB8  0084               	movwf	4
  6307  0EB9  1383               	bcf	3,7	;select IRP bank1
  6308  0EBA  0800               	movf	0,w
  6309  0EBB  1D03               	btfss	3,2
  6310  0EBC  2EBE               	goto	u196_21
  6311  0EBD  2EBF               	goto	u196_20
  6312  0EBE                     u196_21:	
  6313  0EBE  2EC8               	goto	i1l2543
  6314  0EBF                     u196_20:	
  6315  0EBF                     i1l2541:	
  6316                           
  6317                           ;main.c: 423:         {;main.c: 424:             count++;
  6318  0EBF  3001               	movlw	1
  6319  0EC0  1283               	bcf	3,5	;RP0=0, select bank0
  6320  0EC1  1303               	bcf	3,6	;RP1=0, select bank0
  6321  0EC2  07CD               	addwf	_count,f
  6322  0EC3  1803               	skipnc
  6323  0EC4  0ACE               	incf	_count+1,f
  6324  0EC5  3000               	movlw	0
  6325  0EC6  07CE               	addwf	_count+1,f
  6326                           
  6327                           ;main.c: 425:         }
  6328  0EC7  2EEF               	goto	i1l2549
  6329  0EC8                     i1l2543:	
  6330  0EC8  087D               	movf	conteggioVeicoli@i,w
  6331  0EC9  3EA0               	addlw	(low (_RoadsSensors| 0))& (0+255)
  6332  0ECA  0084               	movwf	4
  6333  0ECB  0800               	movf	0,w
  6334  0ECC  1903               	btfsc	3,2
  6335  0ECD  2ECF               	goto	u197_21
  6336  0ECE  2ED0               	goto	u197_20
  6337  0ECF                     u197_21:	
  6338  0ECF  2EEF               	goto	i1l2549
  6339  0ED0                     u197_20:	
  6340  0ED0                     i1l2545:	
  6341                           
  6342                           ;main.c: 427:         {;main.c: 428:             Conteggio(count, motorcycle, car, truck
      +                          , i);
  6343  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  6344  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  6345  0ED2  084E               	movf	_count+1,w
  6346  0ED3  00F1               	movwf	Conteggio@_count+1
  6347  0ED4  084D               	movf	_count,w
  6348  0ED5  00F0               	movwf	Conteggio@_count
  6349  0ED6  305A               	movlw	(low (_motorcycle| 0))& (0+255)
  6350  0ED7  00F9               	movwf	??_conteggioVeicoli
  6351  0ED8  0879               	movf	??_conteggioVeicoli,w
  6352  0ED9  00F2               	movwf	Conteggio@_motorcycle
  6353  0EDA  30D3               	movlw	(low (_car| 0))& (0+255)
  6354  0EDB  00FA               	movwf	??_conteggioVeicoli+1
  6355  0EDC  087A               	movf	??_conteggioVeicoli+1,w
  6356  0EDD  00F3               	movwf	Conteggio@_car
  6357  0EDE  30CF               	movlw	(low (_truck| 0))& (0+255)
  6358  0EDF  00FB               	movwf	??_conteggioVeicoli+2
  6359  0EE0  087B               	movf	??_conteggioVeicoli+2,w
  6360  0EE1  00F4               	movwf	Conteggio@_truck
  6361  0EE2  087D               	movf	conteggioVeicoli@i,w
  6362  0EE3  00FC               	movwf	??_conteggioVeicoli+3
  6363  0EE4  087C               	movf	??_conteggioVeicoli+3,w
  6364  0EE5  00F5               	movwf	Conteggio@index
  6365  0EE6  120A  158A  248E  120A  158A  	fcall	_Conteggio
  6366  0EEB                     i1l2547:	
  6367                           
  6368                           ;main.c: 429:             count = 0;
  6369  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  6370  0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  6371  0EED  01CD               	clrf	_count
  6372  0EEE  01CE               	clrf	_count+1
  6373  0EEF                     i1l2549:	
  6374                           
  6375                           ;main.c: 431:     }
  6376  0EEF  3001               	movlw	1
  6377  0EF0  00F9               	movwf	??_conteggioVeicoli
  6378  0EF1  0879               	movf	??_conteggioVeicoli,w
  6379  0EF2  07FD               	addwf	conteggioVeicoli@i,f
  6380  0EF3                     i1l2551:	
  6381  0EF3  3004               	movlw	4
  6382  0EF4  027D               	subwf	conteggioVeicoli@i,w
  6383  0EF5  1C03               	skipc
  6384  0EF6  2EF8               	goto	u198_21
  6385  0EF7  2EF9               	goto	u198_20
  6386  0EF8                     u198_21:	
  6387  0EF8  2EB6               	goto	i1l2539
  6388  0EF9                     u198_20:	
  6389  0EF9                     i1l305:	
  6390  0EF9  0008               	return
  6391  0EFA                     __end_of_conteggioVeicoli:	
  6392                           
  6393                           	psect	text25
  6394  0C8E                     __ptext25:	
  6395 ;; *************** function _Conteggio *****************
  6396 ;; Defined at:
  6397 ;;		line 111 in file "./CustomLib/TrafficLight.h"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;  _count          2    0[COMMON] unsigned int 
  6400 ;;  _motorcycle     1    2[COMMON] PTR unsigned char 
  6401 ;;		 -> motorcycle(4), 
  6402 ;;  _car            1    3[COMMON] PTR unsigned char 
  6403 ;;		 -> car(4), 
  6404 ;;  _truck          1    4[COMMON] PTR unsigned char 
  6405 ;;		 -> truck(4), 
  6406 ;;  index           1    5[COMMON] unsigned char 
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;		None
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  1    wreg      void 
  6411 ;; Registers used:
  6412 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6418 ;;      Params:         6       0       0       0       0
  6419 ;;      Locals:         0       0       0       0       0
  6420 ;;      Temps:          3       0       0       0       0
  6421 ;;      Totals:         9       0       0       0       0
  6422 ;;Total ram usage:        9 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; This function calls:
  6425 ;;		Nothing
  6426 ;; This function is called by:
  6427 ;;		_conteggioVeicoli
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           
  6432                           ;psect for function _Conteggio
  6433  0C8E                     _Conteggio:	
  6434  0C8E                     i1l2117:	
  6435                           ;incstack = 0
  6436                           ; Regs used in _Conteggio: [wreg-fsr0h+status,2+status,0]
  6437                           
  6438                           
  6439                           ;./CustomLib/TrafficLight.h: 111: void Conteggio(unsigned int _count, unsigned char _mot
      +                          orcycle[4], unsigned char _car[4], unsigned char _truck[4], unsigned char index);./Custo
      +                          mLib/TrafficLight.h: 112: {;./CustomLib/TrafficLight.h: 113:     if (_count >= 500)
  6440  0C8E  3001               	movlw	1
  6441  0C8F  0271               	subwf	Conteggio@_count+1,w
  6442  0C90  30F4               	movlw	244
  6443  0C91  1903               	skipnz
  6444  0C92  0270               	subwf	Conteggio@_count,w
  6445  0C93  1C03               	skipc
  6446  0C94  2C96               	goto	u134_21
  6447  0C95  2C97               	goto	u134_20
  6448  0C96                     u134_21:	
  6449  0C96  2CA7               	goto	i1l2121
  6450  0C97                     u134_20:	
  6451  0C97                     i1l2119:	
  6452                           
  6453                           ;./CustomLib/TrafficLight.h: 114:     {;./CustomLib/TrafficLight.h: 115:         _motorc
      +                          ycle[index] = _motorcycle[index] + 1;
  6454  0C97  0875               	movf	Conteggio@index,w
  6455  0C98  0772               	addwf	Conteggio@_motorcycle,w
  6456  0C99  00F6               	movwf	??_Conteggio
  6457  0C9A  0876               	movf	??_Conteggio,w
  6458  0C9B  0084               	movwf	4
  6459  0C9C  1383               	bcf	3,7	;select IRP bank0
  6460  0C9D  0800               	movf	0,w
  6461  0C9E  3E01               	addlw	1
  6462  0C9F  00F7               	movwf	??_Conteggio+1
  6463  0CA0  0875               	movf	Conteggio@index,w
  6464  0CA1  0772               	addwf	Conteggio@_motorcycle,w
  6465  0CA2  00F8               	movwf	??_Conteggio+2
  6466  0CA3  0878               	movf	??_Conteggio+2,w
  6467  0CA4  0084               	movwf	4
  6468  0CA5  0877               	movf	??_Conteggio+1,w
  6469  0CA6  0080               	movwf	0
  6470  0CA7                     i1l2121:	
  6471                           
  6472                           ;./CustomLib/TrafficLight.h: 117:     if (_count >= 1500)
  6473  0CA7  3005               	movlw	5
  6474  0CA8  0271               	subwf	Conteggio@_count+1,w
  6475  0CA9  30DC               	movlw	220
  6476  0CAA  1903               	skipnz
  6477  0CAB  0270               	subwf	Conteggio@_count,w
  6478  0CAC  1C03               	skipc
  6479  0CAD  2CAF               	goto	u135_21
  6480  0CAE  2CB0               	goto	u135_20
  6481  0CAF                     u135_21:	
  6482  0CAF  2CC0               	goto	i1l2125
  6483  0CB0                     u135_20:	
  6484  0CB0                     i1l2123:	
  6485                           
  6486                           ;./CustomLib/TrafficLight.h: 118:     {;./CustomLib/TrafficLight.h: 119:         _car[in
      +                          dex] = _car[index] + 1;
  6487  0CB0  0875               	movf	Conteggio@index,w
  6488  0CB1  0773               	addwf	Conteggio@_car,w
  6489  0CB2  00F6               	movwf	??_Conteggio
  6490  0CB3  0876               	movf	??_Conteggio,w
  6491  0CB4  0084               	movwf	4
  6492  0CB5  1383               	bcf	3,7	;select IRP bank0
  6493  0CB6  0800               	movf	0,w
  6494  0CB7  3E01               	addlw	1
  6495  0CB8  00F7               	movwf	??_Conteggio+1
  6496  0CB9  0875               	movf	Conteggio@index,w
  6497  0CBA  0773               	addwf	Conteggio@_car,w
  6498  0CBB  00F8               	movwf	??_Conteggio+2
  6499  0CBC  0878               	movf	??_Conteggio+2,w
  6500  0CBD  0084               	movwf	4
  6501  0CBE  0877               	movf	??_Conteggio+1,w
  6502  0CBF  0080               	movwf	0
  6503  0CC0                     i1l2125:	
  6504                           
  6505                           ;./CustomLib/TrafficLight.h: 121:     if (_count >= 3000)
  6506  0CC0  300B               	movlw	11
  6507  0CC1  0271               	subwf	Conteggio@_count+1,w
  6508  0CC2  30B8               	movlw	184
  6509  0CC3  1903               	skipnz
  6510  0CC4  0270               	subwf	Conteggio@_count,w
  6511  0CC5  1C03               	skipc
  6512  0CC6  2CC8               	goto	u136_21
  6513  0CC7  2CC9               	goto	u136_20
  6514  0CC8                     u136_21:	
  6515  0CC8  2CD9               	goto	i1l166
  6516  0CC9                     u136_20:	
  6517  0CC9                     i1l2127:	
  6518                           
  6519                           ;./CustomLib/TrafficLight.h: 122:     {;./CustomLib/TrafficLight.h: 123:         _truck[
      +                          index] = _truck[index] + 1;
  6520  0CC9  0875               	movf	Conteggio@index,w
  6521  0CCA  0774               	addwf	Conteggio@_truck,w
  6522  0CCB  00F6               	movwf	??_Conteggio
  6523  0CCC  0876               	movf	??_Conteggio,w
  6524  0CCD  0084               	movwf	4
  6525  0CCE  1383               	bcf	3,7	;select IRP bank0
  6526  0CCF  0800               	movf	0,w
  6527  0CD0  3E01               	addlw	1
  6528  0CD1  00F7               	movwf	??_Conteggio+1
  6529  0CD2  0875               	movf	Conteggio@index,w
  6530  0CD3  0774               	addwf	Conteggio@_truck,w
  6531  0CD4  00F8               	movwf	??_Conteggio+2
  6532  0CD5  0878               	movf	??_Conteggio+2,w
  6533  0CD6  0084               	movwf	4
  6534  0CD7  0877               	movf	??_Conteggio+1,w
  6535  0CD8  0080               	movwf	0
  6536  0CD9                     i1l166:	
  6537  0CD9  0008               	return
  6538  0CDA                     __end_of_Conteggio:	
  6539                           
  6540                           	psect	text26
  6541  0A7B                     __ptext26:	
  6542 ;; *************** function _UART_Read *****************
  6543 ;; Defined at:
  6544 ;;		line 394 in file "main.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;		None
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;		None
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  1    wreg      unsigned char 
  6551 ;; Registers used:
  6552 ;;		wreg
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6558 ;;      Params:         0       0       0       0       0
  6559 ;;      Locals:         0       0       0       0       0
  6560 ;;      Temps:          0       0       0       0       0
  6561 ;;      Totals:         0       0       0       0       0
  6562 ;;Total ram usage:        0 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; This function calls:
  6565 ;;		Nothing
  6566 ;; This function is called by:
  6567 ;;		_ISR
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           
  6572                           ;psect for function _UART_Read
  6573  0A7B                     _UART_Read:	
  6574  0A7B                     i1l2527:	
  6575                           ;incstack = 0
  6576                           ; Regs used in _UART_Read: [wreg]
  6577                           
  6578  0A7B                     i1l289:	
  6579                           ;main.c: 397:         ;
  6580                           
  6581                           
  6582                           ;main.c: 396:     while (!RCIF)
  6583  0A7B  1283               	bcf	3,5	;RP0=0, select bank0
  6584  0A7C  1303               	bcf	3,6	;RP1=0, select bank0
  6585  0A7D  1E8C               	btfss	12,5	;volatile
  6586  0A7E  2A80               	goto	u195_21
  6587  0A7F  2A81               	goto	u195_20
  6588  0A80                     u195_21:	
  6589  0A80  2A7B               	goto	i1l289
  6590  0A81                     u195_20:	
  6591  0A81                     i1l291:	
  6592                           
  6593                           ;main.c: 398:     RCIF = 0;
  6594  0A81  128C               	bcf	12,5	;volatile
  6595  0A82                     i1l2529:	
  6596                           
  6597                           ;main.c: 399:     return RCREG;
  6598  0A82  081A               	movf	26,w	;volatile
  6599  0A83                     i1l292:	
  6600  0A83  0008               	return
  6601  0A84                     __end_of_UART_Read:	
  6602  007E                     btemp	set	126	;btemp
  6603  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    12
    Data        8
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     41      70
    BANK1            80     10      71
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    DigitsArr	PTR struct .[2] size(1) Largest target is 3
		 -> digits1(BANK1[3]), digits0(BANK1[3]), 

    Semafori	PTR struct .[2] size(1) Largest target is 14
		 -> s1(BANK1[14]), s0(BANK1[14]), 

    Conteggio@_truck	PTR unsigned char  size(1) Largest target is 4
		 -> truck(BANK1[4]), 

    Conteggio@_car	PTR unsigned char  size(1) Largest target is 4
		 -> car(BANK1[4]), 

    Conteggio@_motorcycle	PTR unsigned char  size(1) Largest target is 4
		 -> motorcycle(BANK0[4]), 

    GetDigits@_digits	PTR PTR struct . size(1) Largest target is 2
		 -> DigitsArr(BANK0[2]), 

    SetReceivedTimes@_semafori	PTR PTR struct . size(1) Largest target is 2
		 -> Semafori(BANK0[2]), 

    SetReceivedTimes@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 

    SetDefaultTimers@_semafori	PTR PTR struct . size(1) Largest target is 2
		 -> Semafori(BANK0[2]), 

    GetTime@_dataFromGateway	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 

    UpdateTimes@_semafori	PTR PTR struct . size(1) Largest target is 2
		 -> Semafori(BANK0[2]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli
    _conteggioVeicoli->_Conteggio

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _rand->___lmul
    _map->___awdiv
    _UART_Init->___aldiv
    _ShowDigitsOnDisplay->_SetDisplay
    _ShowDigitsOnDisplay->___awmod
    _SetReceivedTimes->_GetTime
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   23461
                                             32 BANK0      9     9      0
                                              0 BANK1     10    10      0
                           _ADC_Read
                          _GetDigits
                   _SetDefaultTimers
                   _SetReceivedTimes
                _ShowDigitsOnDisplay
                          _UART_Init
                        _UpdateTimes
                           _init_ADC
                       _luciSemaforo
                                _map
                               _rand
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    4067
                                             24 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1138
                                              4 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _rand                                                 7     5      2     316
                                             17 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     316
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    5528
                                             20 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2616
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _luciSemaforo                                         4     3      1     183
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UpdateTimes                                         13    13      0     668
                                              4 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             19 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              4 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _ShowDigitsOnDisplay                                  3     3      0    3194
                                             11 BANK0      3     3      0
                         _SetDisplay
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _SetDisplay                                           7     3      4    1514
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _SetReceivedTimes                                    10     9      1    1618
                                             12 BANK0     10     9      1
                            _GetTime
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              8     6      2     384
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    12     5      7    1395
                                              4 BANK0     12     5      7
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            9     6      3    3993
                                             20 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     721
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1333
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1345
                                             11 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0     822
                                              0 BANK0      4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     5     5      0     822
                                              9 COMMON     5     5      0
                          _Conteggio
 ---------------------------------------------------------------------------------
 (5) _Conteggio                                            9     3      6     710
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
     ___bmul
   _SetDefaultTimers
   _SetReceivedTimes
     _GetTime
     ___bmul
   _ShowDigitsOnDisplay
     _SetDisplay
     ___awmod
   _UART_Init
     ___aldiv
   _UpdateTimes
   _init_ADC
   _luciSemaforo
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _rand
     ___lmul
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli
     _Conteggio

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      A      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     29      46       5       87.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9B      12        0.0%
ABS                  0      0      9B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Jul 13 22:33:19 2020

                 luciSemaforo@lux 0024                                 pc 0002                    ___bmul@product 0026  
                     __CFG_CP$OFF 0000                      ___awdiv@sign 0031                                _s0 00C1  
                              _s1 00B3                                fsr 0004               ___wmul@multiplicand 0026  
                  _GetDigits$1203 003A                 luciSemaforo@index 0027                       __CFG_LVP$ON 0000  
                             l111 0606                               l105 05B5                               l114 062E  
                             l127 07FD                               l311 0CDE                               l223 0356  
                             l160 0566                               l320 0D01                               l137 0BFE  
                             l321 0D05                               l313 0CE2                               l225 0080  
                             l154 0E94                               l314 0CE6                               l322 0D2C  
                             l242 0261                               l149 06E5                               l318 0CFD  
                             l271 0AF1                               l343 0792                               l255 0419  
                             l504 0F77                               l280 0A8E                               l329 0D81  
                             l265 0AA1                               l441 0B18                               l169 0B7E  
                             l514 0FFF                               l274 0BB8                               l258 048D  
                             l268 0AE5                               l605 0E34                               l453 0C8D  
                             l277 0A87                               l439 0B00                               l279 0A8B  
                             l465 0ACB                               l297 0B49                               l592 0F62  
                             l889 0C45                      __CFG_CPD$OFF 0000                               _ISR 0D82  
                             _car 00D3                               _map 0B4A                               fsr0 0004  
                             indf 0000                      ___awmod@sign 002A                      __CFG_FOSC$HS 0000  
                            ?_ISR 0070             ??_ShowDigitsOnDisplay 002B                              l3101 061A  
                            l3111 0BCB                              l3103 0620                              l3113 0BD3  
                            l3201 0F9A                              l3105 062D                              l3041 056A  
                            l3115 0BE4                              l3131 0D4F                              l3211 0FC9  
                            l3203 0F9D                              l3043 0579                              l3123 0A87  
                            l3301 0E26                              l3117 0BF2                              l3109 0BBC  
                            l3133 0D52                              l3221 0FEC                              l3213 0FD7  
                            l3205 0FAA                              l3061 058E                              l3045 0586  
                            l3125 0A8C                              l3231 0F01                              l3303 0E2B  
                            l3119 0BFA                              l3127 0D30                              l3223 0FF7  
                            l3215 0FD8                              l3207 0FAE                              l3151 0B07  
                            l3063 05A2                              l3055 058A                              l3047 0587  
                            l3241 0F15                              l3233 0F06                              l3305 0E30  
                            l3129 0D31                              l3137 0D71                              l3217 0FE1  
                            l3209 0FB7                              l3321 0798                              l3153 0B0E  
                            l3145 0AF2                              l3401 0B4A                              l3161 0C50  
                            l3073 05C4                              l3065 05A8                              l3049 0588  
                            l3251 0F2B                              l3243 0F17                              l3235 0F08  
                            l3227 0EFA                              l3219 0FE7                              l3331 07F3  
                            l3323 07C6                              l3315 0797                              l3411 0A9A  
                            l3155 0B14                              l3147 0AF6                              l3163 0C54  
                            l3091 05F3                              l3083 05DB                              l3075 05CA  
                            l3067 05BB                              l3261 0F4E                              l3253 0F2F  
                            l3245 0F1D                              l3237 0F0C                              l3229 0EFD  
                            l3181 0AC3                              l3173 0AB8                              l3341 0632  
                            l3501 071B                              l3421 0BB7                              l3413 0B7F  
                            l3333 07F7                              l3325 07E9                              l3309 0796  
                            l3405 0A8F                              l3149 0AFA                              l3165 0C6B  
                            l3093 05F9                              l3077 05D7                              l3069 05C3  
                            l3255 0F40                              l3247 0F20                              l3263 0F54  
                            l3239 0F11                              l3271 0DDA                              l3183 0ACA  
                            l3175 0AB9                              l3351 067E                              l3335 062F  
                            l3503 0725                              l3511 0770                              l3191 0F6A  
                            l3415 0B87                              l3327 07ED                              l3407 0A93  
                            l3167 0C74                              l3159 0C46                              l3423 0BFF  
                            l3095 060C                              l3431 0B1C                              l3265 0F59  
                            l3257 0F46                              l3249 0F27                              l3281 0DEC  
                            l3273 0DDD                              l3177 0ABD                              l3361 06C0  
                            l3513 0776                              l3505 0740                              l3193 0F7B  
                            l3417 0BB5                              l3409 0A96                              l3169 0C85  
                            l3425 0C20                              l3097 0619                              l3089 05DF  
                            l3441 0B39                              l3433 0B2F                              l3601 0220  
                            l3451 0AE2                              l3267 0F5E                              l3259 0F47  
                            l3291 0E05                              l3283 0DF1                              l3275 0DE1  
                            l3179 0AC1                              l3363 06C4                              l3347 0634  
                            l3355 06A3                              l3371 0E38                              l3515 077C  
                            l3195 0F86                              l3187 0F63                              l3419 0BB6  
                            l3427 0C2E                              l3443 0B3F                              l3611 0237  
                            l3603 0226                              l3531 003C                              l3453 0AE9  
                            l3293 0E09                              l3285 0DF7                              l3277 0DE6  
                            l3365 06CA                              l3349 0659                              l3357 06B6  
                            l3381 0E5D                              l3373 0E39                              l3509 075D  
                            l3197 0F8A                              l3189 0F66                              l3461 0CEA  
                            l3445 0B43                              l3701 040F                              l3621 024D  
                            l3613 023D                              l3541 0048                              l3533 003E  
                            l3447 0ACF                              l3295 0E13                              l3287 0DFA  
                            l3279 0DE8                              l3391 049E                              l3359 06BA  
                            l3383 0E70                              l3199 0F92                              l3439 0B30  
                            l3703 0414                              l3631 02FC                              l3623 0252  
                            l3615 024A                              l3551 0073                              l3543 004A  
                            l3535 0040                              l3527 0035                              l3449 0ADB  
                            l3297 0E19                              l3289 0E01                              l3393 04B3  
                            l3385 0E8F                              l3377 0E40                              l3465 0D09  
                            l3457 0CDD                              l3721 0491                              l3705 0429  
                            l3713 047C                              l3641 0320                              l3633 0309  
                            l3625 025A                              l3609 0228                              l3561 007A  
                            l3553 0076                              l3545 004C                              l3537 0042  
                            l3529 003B                              l3299 0E20                              l3395 04CF  
                            l3379 0E4F                              l3723 0495                              l3715 0481  
                            l3707 043C                              l3651 0337                              l3643 0325  
                            l3635 0316                              l3627 0263                              l3563 007B  
                            l3555 0077                              l3547 0051                              l3539 0046  
                            l3397 052C                              l3389 049D                              l3469 0D1C  
                            l3717 0487                              l3709 0473                              l3661 035C  
                            l3653 033D                              l3637 0319                              l3629 02F1  
                            l3581 00C6                              l3573 0085                              l3557 0078  
                            l3549 005C                              ?_map 0034                              l3399 053F  
                            l3495 06EA                              l3719 048B                              l3663 035D  
                            l3671 036F                              l3647 032E                              l3591 0174  
                            l3583 00D4                              l3575 00AC                              l3567 0082  
                            l3559 0079                              l3497 06F5                              l3489 06E6  
                            l3681 0383                              l3673 0375                              l3665 035F  
                            l3649 0334                              l3593 01B9                              l3585 00DB  
                            l3577 00B1                              l3657 0341                              l3499 0710  
                            l3691 03F9                              l3683 0396                              l3675 0379  
                            l3667 0363                              l3659 035B                              l3587 00EA  
                            l3579 00BF                              l3693 03FA                              l3685 03DF  
                            l3677 037C                              l3669 0365                              l3589 012F  
                            l3597 01FE                              l3695 03FF                              l3687 03E5  
                            l3599 0218                              l3697 0405                              l3689 03F1  
                            l3971 0D11                              l3699 040B                              l3973 0D24  
                            l3965 020A                              l3975 0765                              l3967 034E  
                            l3977 0D79                              l3969 0CF2                              l3979 06AB  
                            u3000 077C                              u3001 077B                              u3100 031F  
                            u3101 031E                              u3110 0334                              u3030 007F  
                            u3111 0333                              u3031 007E                              u3200 03F9  
                            u3120 033D                              u3040 00B1                              u3201 03F8  
                            u3121 033C                              u3041 00B0                              u2410 062D  
                            u3210 03FF                              u3130 035B                              u3050 00C6  
                            u2411 062C                              u3211 03FE                              u3131 035A  
                            u3051 00C5                              u2404 0612                              u2340 05B5  
                            u3220 0487                              u3140 0363                              u3060 00DB  
                            u2405 0610                              u2341 05B4                              u2325 057C  
                            u3221 0486                              u3141 0362                              u3061 00DA  
                            u2350 05BB                              u2334 059A                              u2430 0A8B  
                            u3230 048B                              u3150 0375                              u3070 0226  
                            u2415 0629                              u2351 05BA                              u2335 0598  
                            u2431 0A8A                              u3231 048A                              u3151 0374  
                            u3071 0225                              u2440 0AFA                              u2520 0C85  
                            u2360 05D7                              u3240 0491                              u3160 0379  
                            u3080 024A                              u2425 0BD9                              u2441 0AF9  
                            u2521 0C84                              u2505 0C6D                              u2361 05D6  
                            u2345 05B1                              u3241 0490                              u3161 0378  
                            u3081 0249                              u2530 0ABD                              u2610 0FC9  
                            u3250 0495                              u3170 0382                              u3090 0260  
                            u2531 0ABC                              u2611 0FC8                              u2515 0C75  
                            u3251 0494                              u3171 0381                              u3091 025F  
                            u2540 0ACA                              u2380 0606                              u3180 0396  
                            u2541 0AC9                              u2605 0FB0                              u2381 0605  
                            u2365 05D3                              u3181 0395                              u3085 0246  
                            u2710 0F40                              u2630 0FE7                              u2550 0F6A  
                            u2470 0B14                              u2390 060C                              u2374 05EB  
                            u3190 03DF                              u2711 0F3F                              u2631 0FE6  
                            u2615 0FC5                              u2551 0F69                              u2471 0B13  
                            u2455 0B01                              u2391 060B                              u2375 05E9  
                            u3191 03DE                              u2800 0E13                              u2640 0FEC  
                            u2560 0F7B                              u2480 0C54                              u2705 0F30  
                            u2801 0E12                              u2641 0FEB                              u2625 0FD9  
                            u2561 0F7A                              u2465 0B08                              u2481 0C53  
                            u2385 0602                              u2730 0F54                              u2650 0F01  
                            u2570 0F9A                              u2731 0F53                              u2715 0F3C  
                            u2651 0F00                              u2571 0F99                              u2491 0C5D  
                            u2740 0F59                              u2660 0F0C                              u2820 0E26  
                            u2492 0C64                              u2741 0F58                              u2725 0F48  
                            u2661 0F0B                              u2821 0E25                              u2805 0E0F  
                            u3277 0A9E                              u2493 0C6B                              u2670 0F1D  
                            u2830 0E2B                              u2750 0DE1                              u2910 04CF  
                            u2590 0FAE                              u3287 0ADF                              u2671 0F1C  
                            u2831 0E2A                              u2815 0E1A                              u2751 0DE0  
                            u2911 04CE                              u2591 0FAD                              u2760 0DEC  
                            u2920 0B96                              u2840 07C6                              u2761 0DEB  
                            u2905 0E65                              u2585 0F9F                              u2841 07C5  
                            u2690 0F2F                              u2770 0DF7                              u2850 07F3  
                            u2930 0C3D                              u2691 0F2E                              u2771 0DF6  
                            u2915 04CB                              u2851 07F2                              u2860 07FD  
                            u2940 0B49                              u2685 0F21                              u2925 0B91  
                            u2861 07FC                              u2845 07C2                              u2941 0B48  
                            u2790 0E09                              u2870 06C0                              u2791 0E08  
                            u2871 06BF                              u2935 0C38                              u2960 0AE9  
                            u2880 06CA                              u2961 0AE8                              u2785 0DFB  
                            u2881 06C9                              u2890 0E3F                              u2970 06F5  
                            u2955 0AD2                              u2891 0E3E                              u2971 06F4  
                            u2980 071B                              _RCIF 0065                              u2981 071A  
                            u2990 0725                              u2991 0724                              _TMR0 0001  
                            _TXIF 0064                      __CFG_WRT$OFF 0000                              _disp 0055  
                            _main 0035                              _rand 0BFF                              _temp 0051  
                            _time 0049                              map@x 0034                              btemp 007E  
                __end_of_ADC_Read 0AF2                     __CFG_BOREN$ON 0000                              start 0010  
                 __end_of_GetTime 0BFF                 ___bmul@multiplier 0027                             ??_ISR 0020  
       __size_of_conteggioVeicoli 0065                             ??_map 003E                   __end_of___aldiv 1000  
                           ?_main 0070                             ?_rand 0031                   __end_of___awdiv 0F63  
                   __CFG_WDTE$OFF 0000                   __end_of___awmod 0E35                   ___awdiv@divisor 002B  
                           _T1CON 0010                             i1l305 0EF9                             i1l166 0CD9  
                           i1l353 0DD1                             i1l291 0A81                             i1l292 0A83  
                           i1l289 0A7B                   ___awdiv@counter 0030                             _RCREG 001A  
            UpdateTimes@_semafori 002E                             _TMR1H 000F                             _TMR1L 000E  
                           _SPBRG 0099                             _PORTD 0008                             _TRISA 0085  
                           _TRISB 0086                             _TRISC 0087                             _TRISD 0088  
                           _TRISE 0089                             _TXREG 0019               ___lmul@multiplicand 0028  
                   __CFG_PWRTE$ON 0000                __size_of_UART_Init 003A                __size_of_UART_Read 0009  
                 __end_of_display 0811                             _count 004D                             _randx 005E  
                           main@i 00E6                             _truck 00CF                             pclath 000A  
                           status 0003                             wtemp0 007E                   __initialization 0013  
                    __end_of_main 049A                      __end_of_rand 0C46         __size_of_SetReceivedTimes 0060  
              __size_of_GetDigits 00CD                            ??_main 0040                            ??_rand 0033  
               SetDefaultTimers@i 002F                 SetDefaultTimers@l 002E                __size_of_BuildByte 00C8  
                      _SetDisplay 0D2D                            _ADCON0 001F                            _ADCON1 009F  
              __size_of_Conteggio 004C                            _ADRESH 001E                            _ADRESL 009E  
                ___awdiv@dividend 002D                            i1l2121 0CA7                            i1l2123 0CB0  
                          i1l2125 0CC0                            i1l2117 0C8E                            i1l2127 0CC9  
                          i1l2119 0C97                            i1l2541 0EBF                            i1l2533 0E95  
                          i1l2527 0A7B                            i1l2551 0EF3                            i1l2543 0EC8  
                          i1l2535 0EB5                            i1l2529 0A82                            i1l2545 0ED0  
                          i1l2801 0DB4                            i1l2547 0EEB                            i1l2539 0EB6  
                          i1l2811 0DC7                            i1l2803 0DB8                            i1l2549 0EEF  
                          i1l2813 0DC8                            i1l2805 0DBC                            i1l2815 0DC9  
                          i1l2807 0DBD                            i1l2817 0DCD                            i1l2809 0DC1  
                          i1l2819 0DCF                            i1l2781 0D8A                            i1l2791 0DA5  
                          i1l2783 0D8D                            i1l2793 0DA9                            i1l2785 0D8F  
                          i1l2777 0D82                            i1l2787 0D93                            i1l2795 0DAA  
                          i1l2779 0D86                            i1l2797 0DAE                            i1l2789 0D97  
                          i1l2799 0DAF                            u134_20 0C97                            u230_20 0DBC  
                          u134_21 0C96                            u230_21 0DBB                            u135_20 0CB0  
                          u231_20 0DC7                            u135_21 0CAF                            u231_21 0DC6  
                          u136_20 0CC9                            u136_21 0CC8                            u225_20 0D86  
                          _INTCON 000B                            u225_21 0D85                            u226_20 0D8A  
                          u226_21 0D89                            u227_20 0D93                            u227_21 0D92  
                          u228_20 0D97                            u228_21 0D96                            u229_20 0DAE  
                          u229_21 0DAD                            u195_20 0A81                            u195_21 0A80  
                          u196_20 0EBF                            u196_21 0EBE                            u197_20 0ED0  
                          u197_21 0ECF                            u198_20 0EF9                            u198_21 0EF8  
                          _TMR0IF 005A                            _TMR1IF 0060                         ??_GetTime 0026  
                    ?_UART_TxChar 0070                     main@randomCar 00DE                 __end_of_UART_Init 0BB9  
               __end_of_UART_Read 0A84                            ___bmul 0AB5                            ___lmul 0C46  
                       ??___aldiv 002C                   GetTime@shortInt 0029                            ___wmul 0AF2  
                       ??___awdiv 002F                         ??___awmod 0028                  __end_of_init_ADC 0AA2  
                          _cycled 0056                  ___awdiv@quotient 0032                   ___awmod@divisor 0024  
                 ___awmod@counter 0029                  __end_of_sendByte 0B4A                         ?_ADC_Read 0024  
                          saved_w 007E           __end_of__initialization 0031                 __end_of_GetDigits 0567  
                   ??_UpdateTimes 0024         __size_of_SetDefaultTimers 00B7               ___bmul@multiplicand 0024  
                  __pcstackCOMMON 0070                 __end_of_BuildByte 062F                      __pidataBANK0 0A73  
                _conteggioVeicoli 0E95                 __end_of_Conteggio 0CDA                     ?_luciSemaforo 0024  
                      ??_ADC_Read 0026            SetDefaultTimers@giallo 0028         SetReceivedTimes@_semafori 002C  
                     ?_SetDisplay 0024                     GetDigits@Time 0035              _dataFromGatewayIndex 0053  
            _timerReadFromGateway 0052                        __pbssBANK0 0049                        __pbssBANK1 00A0  
                      __pmaintext 0035                           ?___bmul 0024  ShowDigitsOnDisplay@display_index 002D  
                         ?___lmul 0024                           ?___wmul 0024                    ??_luciSemaforo 0025  
             __end_of_UpdateTimes 07FE                     sendByte@byte0 003D                     sendByte@byte1 0038  
                      __pintentry 0004                    ___lmul@product 002D                  _SetReceivedTimes 0E35  
     __end_of_ShowDigitsOnDisplay 0793                        __stringtab 0800                         ?_init_ADC 0070  
                         _GetTime 0BB9                   BuildByte@valore 0025                   BuildByte@txByte 0029  
         GetTime@_dataFromGateway 0024                         ?_sendByte 0038                    main@randomMoto 00DD  
                      _n_semafori 0811              __size_of_UART_TxChar 000B                           ___aldiv 0F63  
                 __size_of___bmul 0017                           ___awdiv 0EFA                   __size_of___lmul 0048  
                         ___awmod 0DDA               __size_of_SetDisplay 0055                   __size_of___wmul 0027  
               conteggioVeicoli@i 007D                           _digits0 00DA                           _digits1 00D7  
                         __ptext1 0B19                           __ptext2 0A84                           __ptext3 0567  
                         __ptext4 0BFF                           __ptext5 0C46                           __ptext6 0B4A  
                         __ptext7 0AF2                           __ptext8 0CDA                           __ptext9 0A8F  
                         _display 0806                      __size_of_ISR 0058                      __size_of_map 0035  
                ___awmod@dividend 0026                  ___aldiv@dividend 0028              BuildByte@sommaColumn 002F  
                         _umidita 0050                           clrloop0 0A6C                  GetDigits@_digits 003C  
            end_of_initialization 0031                        ??_init_ADC 0024                    main@lux_select 00E4  
                     _UpdateTimes 0793                        ??_sendByte 003A                  _SetDefaultTimers 062F  
                       _RCSTAbits 0018                  ___aldiv@quotient 002F                        _motorcycle 005A  
                       _UART_Init 0B7F                         _UART_Read 0A7B             SetReceivedTimes@index 0034  
                       _PORTAbits 0005                         _PORTBbits 0006                         _PORTCbits 0007  
                    SetDisplay@d1 0024                      SetDisplay@d2 0025                      SetDisplay@d3 0026  
                       _TRISCbits 0087                 __size_of_ADC_Read 0026          __end_of_conteggioVeicoli 0EFA  
            __end_of_luciSemaforo 0D2D                        map@out_max 003C                        map@out_min 003A  
SetReceivedTimes@_dataFromGateway 0033                         _TXSTAbits 0098                         _GetDigits 049A  
                       _DigitsArr 0062                    __end_of___bmul 0ACC                    __end_of___lmul 0C8E  
                  __end_of___wmul 0B19                        ?_UART_Init 0033                        ?_UART_Read 0070  
                       _BuildByte 0567                         _Conteggio 0C8E                 BuildByte@sommaRow 002E  
             start_initialization 0013                       __end_of_ISR 0DDA                      ??_SetDisplay 0028  
                     __end_of_map 0B7F          __end_of_SetReceivedTimes 0E95                        ?_GetDigits 0034  
                        ??___bmul 0025                          ??___lmul 002C                    ADC_Read@canale 0027  
                        ??___wmul 0028                        init_fetch0 0AA2                       __pdataBANK0 005E  
              __end_of_SetDisplay 0D82                    GetDigits@index 0034                        ?_BuildByte 0024  
                      ?_Conteggio 0070                         ___latbits 0002                     __pcstackBANK0 0020  
                   __pcstackBANK1 00DD                          ?_GetTime 0024             SetDefaultTimers@verde 0026  
           SetDefaultTimers@rosso 0024                 __size_of_init_ADC 0013                 __size_of_sendByte 0031  
                        ?___aldiv 0024                          ?___awdiv 002B                          ?___awmod 0024  
                     ??_UART_Init 0035                       ??_UART_Read 0070                    BuildByte@i_341 0036  
                       __pstrings 0800                    BuildByte@y_342 0032                    sendByte@valore 0039  
                  sendByte@txByte 003E                    BuildByte@byte0 0028                    BuildByte@byte1 0024  
        __end_of_SetDefaultTimers 06E6                          _ADC_Read 0ACC             __size_of_luciSemaforo 0053  
                       _count_lux 0054                     UART_TxChar@ch 0024      __size_of_ShowDigitsOnDisplay 00AD  
                 ___aldiv@divisor 0024                 SetReceivedTimes@i 0035                 interrupt_function 0004  
                 ___aldiv@counter 002D                    ___wmul@product 0028        SetReceivedTimes@semaforoId 0031  
                    ?_UpdateTimes 0070                         clear_ram0 0A6B                          _PIE1bits 008C  
                   ??_UART_TxChar 0024                       ??_GetDigits 0037                          _GO_nDONE 00FA  
                    _luciSemaforo 0CDA                         _pressione 004F                 UART_Init@baudrate 0033  
                     ??_BuildByte 0026                         map@in_max 0038                         map@in_min 0036  
                     __stringbase 0805                         main@i_480 00E2                         main@i_481 00E0  
                       main@i_483 00E1                         main@i_485 00E5                       ??_Conteggio 0076  
               ___wmul@multiplier 0024                      GetTime@index 0028                 ___lmul@multiplier 0024  
                    _RoadsSensors 00A0                 ?_conteggioVeicoli 0070                      _secondPassed 0057  
              ??_conteggioVeicoli 0079                  __size_of_GetTime 0046                          _Semafori 0064  
                 main@randomTruck 00DF                       _readGateway 0058                  __size_of___aldiv 009D  
             __end_of_UART_TxChar 0A8F                  __size_of___awdiv 0069                  __size_of___awmod 005B  
              __end_of__stringtab 0806                         sendByte@i 003F                          __ptext10 0793  
                        __ptext11 0B7F                          __ptext20 0DDA                          __ptext12 0F63  
                        __ptext21 0EFA                          __ptext13 06E6                          __ptext22 0ACC  
                        __ptext14 0D2D                          __ptext23 0D82                          __ptext15 0E35  
                        __ptext24 0E95                          __ptext16 0BB9                          __ptext25 0C8E  
                        __ptext17 062F                          __ptext26 0A7B                          __ptext18 049A  
                        __ptext19 0AB5                __end_of_n_semafori 0812           SetDisplay@display_index 002A  
                        _init_ADC 0A8F                 ?_SetReceivedTimes 002C                     __size_of_main 0465  
                 _dataFromGateway 00A4                     __size_of_rand 0047                          _sendByte 0B19  
              ??_SetReceivedTimes 002D                        _INTCONbits 000B                          init_ram0 0AA6  
            Conteggio@_motorcycle 0072                          intlevel1 0000                   _readGatewayDone 0059  
                       stringcode 0800                       _UART_TxChar 0A84           SetReceivedTimes@colorId 0032  
            __size_of_UpdateTimes 006B                        GetTime@tmp 002A               _ShowDigitsOnDisplay 06E6  
                      _OPTION_REG 0081                   SetDisplay@value 0027                          stringdir 0800  
                        stringtab 0800                      UpdateTimes@i 002F                      UpdateTimes@l 0030  
               ?_SetDefaultTimers 0024                      ___aldiv@sign 002E                ??_SetDefaultTimers 002B  
            ?_ShowDigitsOnDisplay 0070                        BuildByte@i 0034                        BuildByte@y 0030  
       SetDefaultTimers@_semafori 002A                   Conteggio@_count 0070                     Conteggio@_car 0073  
                 Conteggio@_truck 0074                    Conteggio@index 0075  
