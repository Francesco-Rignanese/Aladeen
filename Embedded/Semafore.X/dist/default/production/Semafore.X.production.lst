

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Jun 22 14:53:23 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  0003                     __pidataBANK0:	
   202                           
   203                           ;initializer for _n_semafori
   204  0003  340F               	retlw	15
   205                           
   206                           	psect	idataBANK1
   207  0B0A                     __pidataBANK1:	
   208                           
   209                           ;initializer for _Semafori
   210  0B0A  34BB               	retlw	low (_s0| 0)
   211  0B0B  3400               	retlw	high (_s0| 0)
   212  0B0C  34AF               	retlw	low (_s1| 0)
   213  0B0D  3400               	retlw	high (_s1| 0)
   214  0B0E  34E4               	retlw	low (_s2| (0+256))
   215  0B0F  3401               	retlw	high (_s2| (0+256))
   216  0B10  34D8               	retlw	low (_s3| (0+256))
   217  0B11  3401               	retlw	high (_s3| (0+256))
   218  0B12  34CC               	retlw	low (_s4| (0+256))
   219  0B13  3401               	retlw	high (_s4| (0+256))
   220  0B14  34C0               	retlw	low (_s5| (0+256))
   221  0B15  3401               	retlw	high (_s5| (0+256))
   222  0B16  34B4               	retlw	low (_s6| (0+256))
   223  0B17  3401               	retlw	high (_s6| (0+256))
   224  0B18  34A8               	retlw	low (_s7| (0+256))
   225  0B19  3401               	retlw	high (_s7| (0+256))
   226  0B1A  349C               	retlw	low (_s8| (0+256))
   227  0B1B  3401               	retlw	high (_s8| (0+256))
   228  0B1C  3490               	retlw	low (_s9| (0+256))
   229  0B1D  3401               	retlw	high (_s9| (0+256))
   230  0B1E  344C               	retlw	low (_s10| (0+256))
   231  0B1F  3401               	retlw	high (_s10| (0+256))
   232  0B20  3440               	retlw	low (_s11| (0+256))
   233  0B21  3401               	retlw	high (_s11| (0+256))
   234  0B22  3434               	retlw	low (_s12| (0+256))
   235  0B23  3401               	retlw	high (_s12| (0+256))
   236  0B24  3428               	retlw	low (_s13| (0+256))
   237  0B25  3401               	retlw	high (_s13| (0+256))
   238  0B26  341C               	retlw	low (_s14| (0+256))
   239  0B27  3401               	retlw	high (_s14| (0+256))
   240  0B28  3410               	retlw	low (_s15| (0+256))
   241  0B29  3401               	retlw	high (_s15| (0+256))
   242                           
   243                           	psect	strings
   244  0800                     __pstrings:	
   245  0800                     stringtab:	
   246  0800                     __stringtab:	
   247  0800                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250  0800                     stringdir:	
   251  0800  3008               	movlw	high stringdir
   252  0801  008A               	movwf	10
   253  0802  0804               	movf	4,w
   254  0803  0A84               	incf	4,f
   255  0804  0782               	addwf	2,f
   256  0805                     __stringbase:	
   257  0805  3400               	retlw	0
   258  0806                     __end_of__stringtab:	
   259  0806                     _display:	
   260  0806  343F               	retlw	63
   261  0807  3406               	retlw	6
   262  0808  345B               	retlw	91
   263  0809  344F               	retlw	79
   264  080A  3466               	retlw	102
   265  080B  346D               	retlw	109
   266  080C  347D               	retlw	125
   267  080D  3407               	retlw	7
   268  080E  347F               	retlw	127
   269  080F  346F               	retlw	111
   270  0810  3400               	retlw	0
   271  0811                     __end_of_display:	
   272  0006                     _PORTBbits	set	6
   273  0008                     _PORTD	set	8
   274  0005                     _PORTAbits	set	5
   275  001A                     _RCREG	set	26
   276  0019                     _TXREG	set	25
   277  000B                     _INTCONbits	set	11
   278  0018                     _RCSTAbits	set	24
   279  001E                     _ADRESH	set	30
   280  001F                     _ADCON0	set	31
   281  000E                     _TMR1L	set	14
   282  000F                     _TMR1H	set	15
   283  0010                     _T1CON	set	16
   284  0001                     _TMR0	set	1
   285  000B                     _INTCON	set	11
   286  0060                     _TMR1IF	set	96
   287  005A                     _TMR0IF	set	90
   288  0065                     _RCIF	set	101
   289  0064                     _TXIF	set	100
   290  00FA                     _GO_nDONE	set	250
   291  008C                     _PIE1bits	set	140
   292  0099                     _SPBRG	set	153
   293  0098                     _TXSTAbits	set	152
   294  0087                     _TRISCbits	set	135
   295  009E                     _ADRESL	set	158
   296  009F                     _ADCON1	set	159
   297  0085                     _TRISA	set	133
   298  0081                     _OPTION_REG	set	129
   299  0089                     _TRISE	set	137
   300  0088                     _TRISD	set	136
   301  0087                     _TRISC	set	135
   302  0086                     _TRISB	set	134
   303                           
   304                           ; #config settings
   305  0000                     
   306                           	psect	cinit
   307  0011                     start_initialization:	
   308  0011                     __initialization:	
   309                           
   310                           ; Initialize objects allocated to BANK1
   311  0011  1383               	bcf	3,7	;select IRP bank0
   312  0012  30E7               	movlw	low (__pdataBANK1+32)
   313  0013  00FD               	movwf	btemp+-1
   314  0014  300B               	movlw	high __pidataBANK1
   315  0015  00FE               	movwf	btemp
   316  0016  300A               	movlw	low __pidataBANK1
   317  0017  00FF               	movwf	btemp+1
   318  0018  30C7               	movlw	low __pdataBANK1
   319  0019  0084               	movwf	4
   320  001A  120A  118A  27F1  120A  118A  	fcall	init_ram0
   321                           
   322                           ; Initialize objects allocated to BANK0
   323  001F  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   324  0024  00E4               	movwf	__pdataBANK0& (0+127)
   325                           
   326                           ; Clear objects allocated to BANK3
   327  0025  1783               	bsf	3,7	;select IRP bank2
   328  0026  3090               	movlw	low __pbssBANK3
   329  0027  0084               	movwf	4
   330  0028  30F0               	movlw	low (__pbssBANK3+96)
   331  0029  120A  158A  22AF  120A  118A  	fcall	clear_ram0
   332                           
   333                           ; Clear objects allocated to BANK2
   334  002E  3010               	movlw	low __pbssBANK2
   335  002F  0084               	movwf	4
   336  0030  3058               	movlw	low (__pbssBANK2+72)
   337  0031  120A  158A  22AF  120A  118A  	fcall	clear_ram0
   338                           
   339                           ; Clear objects allocated to BANK1
   340  0036  1383               	bcf	3,7	;select IRP bank0
   341  0037  30A0               	movlw	low __pbssBANK1
   342  0038  0084               	movwf	4
   343  0039  30C7               	movlw	low (__pbssBANK1+39)
   344  003A  120A  158A  22AF  120A  118A  	fcall	clear_ram0
   345                           
   346                           ; Clear objects allocated to BANK0
   347  003F  304C               	movlw	low __pbssBANK0
   348  0040  0084               	movwf	4
   349  0041  3064               	movlw	low (__pbssBANK0+24)
   350  0042  120A  158A  22AF  120A  118A  	fcall	clear_ram0
   351                           
   352                           ; Clear objects allocated to COMMON
   353  0047  01F0               	clrf	__pbssCOMMON& (0+127)
   354  0048  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   355  0049  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   356  004A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   357  004B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   358  004C                     end_of_initialization:	
   359                           ;End of C runtime variable initialization code
   360                           
   361  004C                     __end_of__initialization:	
   362  004C  0183               	clrf	3
   363  004D  120A  118A  2850   	ljmp	_main	;jump to C main() function
   364                           
   365                           	psect	bssCOMMON
   366  0070                     __pbssCOMMON:	
   367  0070                     _count:	
   368  0070                     	ds	2
   369  0072                     _time:	
   370  0072                     	ds	1
   371  0073                     _comando:	
   372  0073                     	ds	1
   373  0074                     _count_lux:	
   374  0074                     	ds	1
   375                           
   376                           	psect	bssBANK0
   377  004C                     __pbssBANK0:	
   378  004C                     _truck:	
   379  004C                     	ds	4
   380  0050                     _car:	
   381  0050                     	ds	4
   382  0054                     _motorcycle:	
   383  0054                     	ds	4
   384  0058                     _timerReadFromGateway:	
   385  0058                     	ds	1
   386  0059                     _dataFromGatewayIndex:	
   387  0059                     	ds	1
   388  005A                     _countdown:	
   389  005A                     	ds	1
   390  005B                     _disp:	
   391  005B                     	ds	1
   392  005C                     _old_disp:	
   393  005C                     	ds	1
   394  005D                     _centinaia:	
   395  005D                     	ds	1
   396  005E                     _decine:	
   397  005E                     	ds	1
   398  005F                     _unita:	
   399  005F                     	ds	1
   400  0060                     _cycled:	
   401  0060                     	ds	1
   402  0061                     _secondPassed:	
   403  0061                     	ds	1
   404  0062                     _readGateway:	
   405  0062                     	ds	1
   406  0063                     _readGatewayDone:	
   407  0063                     	ds	1
   408                           
   409                           	psect	dataBANK0
   410  0064                     __pdataBANK0:	
   411  0064                     _n_semafori:	
   412  0064                     	ds	1
   413                           
   414                           	psect	bssBANK1
   415  00A0                     __pbssBANK1:	
   416  00A0                     _dataFromGateway:	
   417  00A0                     	ds	15
   418  00AF                     _s1:	
   419  00AF                     	ds	12
   420  00BB                     _s0:	
   421  00BB                     	ds	12
   422                           
   423                           	psect	dataBANK1
   424  00C7                     __pdataBANK1:	
   425  00C7                     _Semafori:	
   426  00C7                     	ds	32
   427                           
   428                           	psect	bssBANK3
   429  0190                     __pbssBANK3:	
   430  0190                     _s9:	
   431  0190                     	ds	12
   432  019C                     _s8:	
   433  019C                     	ds	12
   434  01A8                     _s7:	
   435  01A8                     	ds	12
   436  01B4                     _s6:	
   437  01B4                     	ds	12
   438  01C0                     _s5:	
   439  01C0                     	ds	12
   440  01CC                     _s4:	
   441  01CC                     	ds	12
   442  01D8                     _s3:	
   443  01D8                     	ds	12
   444  01E4                     _s2:	
   445  01E4                     	ds	12
   446                           
   447                           	psect	bssBANK2
   448  0110                     __pbssBANK2:	
   449  0110                     _s15:	
   450  0110                     	ds	12
   451  011C                     _s14:	
   452  011C                     	ds	12
   453  0128                     _s13:	
   454  0128                     	ds	12
   455  0134                     _s12:	
   456  0134                     	ds	12
   457  0140                     _s11:	
   458  0140                     	ds	12
   459  014C                     _s10:	
   460  014C                     	ds	12
   461                           
   462                           	psect	inittext
   463  07ED                     init_fetch0:	
   464                           ;	Called with low address in FSR and high address in W
   465                           
   466  07ED  087E               	movf	btemp,w
   467  07EE  008A               	movwf	10
   468  07EF  087F               	movf	btemp+1,w
   469  07F0  0082               	movwf	2
   470  07F1                     init_ram0:	
   471                           ;Called with:
   472                           ;	high address of idata address in btemp 
   473                           ;	low address of idata address in btemp+1 
   474                           ;	low address of data in FSR
   475                           ;	high address + 1 of data in btemp-1
   476                           
   477  07F1  120A  118A  27ED  120A  118A  	fcall	init_fetch0
   478  07F6  0080               	movwf	0
   479  07F7  0A84               	incf	4,f
   480  07F8  0804               	movf	4,w
   481  07F9  067D               	xorwf	btemp+-1,w
   482  07FA  1903               	btfsc	3,2
   483  07FB  3400               	retlw	0
   484  07FC  0AFF               	incf	btemp+1,f
   485  07FD  1903               	btfsc	3,2
   486  07FE  0AFE               	incf	btemp,f
   487  07FF  2FF1               	goto	init_ram0
   488                           
   489                           	psect	clrtext
   490  0AAF                     clear_ram0:	
   491                           ;	Called with FSR containing the base address, and
   492                           ;	W with the last address+1
   493                           
   494  0AAF  0064               	clrwdt	;clear the watchdog before getting into this loop
   495  0AB0                     clrloop0:	
   496  0AB0  0180               	clrf	0	;clear RAM location pointed to by FSR
   497  0AB1  0A84               	incf	4,f	;increment pointer
   498  0AB2  0604               	xorwf	4,w	;XOR with final address
   499  0AB3  1903               	btfsc	3,2	;have we reached the end yet?
   500  0AB4  3400               	retlw	0	;all done for this memory range, return
   501  0AB5  0604               	xorwf	4,w	;XOR again to restore value
   502  0AB6  2AB0               	goto	clrloop0	;do the next byte
   503                           
   504                           	psect	cstackBANK2
   505  0158                     __pcstackBANK2:	
   506  0158                     main@semaforoId:	
   507                           
   508                           ; 1 bytes @ 0x0
   509  0158                     	ds	1
   510  0159                     main@colorId:	
   511                           
   512                           ; 1 bytes @ 0x1
   513  0159                     	ds	1
   514  015A                     main@temp:	
   515                           
   516                           ; 1 bytes @ 0x2
   517  015A                     	ds	1
   518  015B                     main@umidita:	
   519                           
   520                           ; 1 bytes @ 0x3
   521  015B                     	ds	1
   522  015C                     main@pressione:	
   523                           
   524                           ; 1 bytes @ 0x4
   525  015C                     	ds	1
   526  015D                     main@endCiclo:	
   527                           
   528                           ; 1 bytes @ 0x5
   529  015D                     	ds	1
   530  015E                     main@tmp:	
   531                           
   532                           ; 1 bytes @ 0x6
   533  015E                     	ds	1
   534  015F                     main@lux_select:	
   535                           
   536                           ; 1 bytes @ 0x7
   537  015F                     	ds	1
   538  0160                     main@index:	
   539                           
   540                           ; 1 bytes @ 0x8
   541  0160                     	ds	1
   542  0161                     main@time:	
   543                           
   544                           ; 2 bytes @ 0x9
   545  0161                     	ds	2
   546  0163                     main@i_437:	
   547                           
   548                           ; 1 bytes @ 0xB
   549  0163                     	ds	1
   550  0164                     main@i_439:	
   551                           
   552                           ; 1 bytes @ 0xC
   553  0164                     	ds	1
   554  0165                     main@i_442:	
   555                           
   556                           ; 1 bytes @ 0xD
   557  0165                     	ds	1
   558  0166                     main@i_436:	
   559                           
   560                           ; 2 bytes @ 0xE
   561  0166                     	ds	2
   562  0168                     main@l:	
   563                           
   564                           ; 1 bytes @ 0x10
   565  0168                     	ds	1
   566  0169                     main@i_449:	
   567                           
   568                           ; 1 bytes @ 0x11
   569  0169                     	ds	1
   570  016A                     main@i:	
   571                           
   572                           ; 2 bytes @ 0x12
   573  016A                     	ds	2
   574                           
   575                           	psect	cstackCOMMON
   576  0075                     __pcstackCOMMON:	
   577  0075                     ?_init_ADC:	
   578  0075                     ?_bitParita:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0075                     ?_main:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0075                     ?_UART_TxChar:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0075                     ?_UART_Read:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0075                     ??_UART_Read:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0075                     ?_conteggioVeicoli:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0075                     ??_conteggioVeicoli:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0075                     ?_ISR:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 1 bytes @ 0x0
   604  0075                     	ds	1
   605  0076                     ??_ISR:	
   606                           
   607                           ; 1 bytes @ 0x1
   608  0076                     	ds	4
   609                           
   610                           	psect	cstackBANK0
   611  0020                     __pcstackBANK0:	
   612  0020                     ??_init_ADC:	
   613  0020                     ?_SetDefaultTimers:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0020                     ?_SetDisplay:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0020                     ?_BuildByte:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0020                     ?_bitChange:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0020                     ??_UART_TxChar:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0020                     ?___bmul:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0020                     ?_ADC_Read:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0020                     ?_GetTime:	
   635                           ; 2 bytes @ 0x0
   636                           
   637  0020                     ?___wmul:	
   638                           ; 2 bytes @ 0x0
   639                           
   640  0020                     ?___awmod:	
   641                           ; 2 bytes @ 0x0
   642                           
   643  0020                     ?___aldiv:	
   644                           ; 2 bytes @ 0x0
   645                           
   646  0020                     bitChange@n:	
   647                           ; 4 bytes @ 0x0
   648                           
   649  0020                     BuildByte@byte1:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0020                     UART_TxChar@ch:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0020                     SetDisplay@d2:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0020                     ___bmul@multiplicand:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0020                     SetDefaultTimers@rosso:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0020                     ___wmul@multiplier:	
   665                           ; 2 bytes @ 0x0
   666                           
   667  0020                     ___awmod@divisor:	
   668                           ; 2 bytes @ 0x0
   669                           
   670  0020                     ___aldiv@divisor:	
   671                           ; 2 bytes @ 0x0
   672                           
   673                           
   674                           ; 4 bytes @ 0x0
   675  0020                     	ds	1
   676  0021                     ??_bitChange:	
   677  0021                     ??___bmul:	
   678                           ; 1 bytes @ 0x1
   679                           
   680  0021                     BuildByte@valore:	
   681                           ; 1 bytes @ 0x1
   682                           
   683  0021                     SetDisplay@d3:	
   684                           ; 1 bytes @ 0x1
   685                           
   686                           
   687                           ; 1 bytes @ 0x1
   688  0021                     	ds	1
   689  0022                     ??_ADC_Read:	
   690  0022                     ??_GetTime:	
   691                           ; 1 bytes @ 0x2
   692                           
   693  0022                     ??_BuildByte:	
   694                           ; 1 bytes @ 0x2
   695                           
   696  0022                     SetDisplay@value:	
   697                           ; 1 bytes @ 0x2
   698                           
   699  0022                     ___bmul@product:	
   700                           ; 1 bytes @ 0x2
   701                           
   702  0022                     SetDefaultTimers@verde:	
   703                           ; 1 bytes @ 0x2
   704                           
   705  0022                     ___wmul@multiplicand:	
   706                           ; 2 bytes @ 0x2
   707                           
   708  0022                     ___awmod@dividend:	
   709                           ; 2 bytes @ 0x2
   710                           
   711                           
   712                           ; 2 bytes @ 0x2
   713  0022                     	ds	1
   714  0023                     ??_SetDisplay:	
   715  0023                     bitChange@dato:	
   716                           ; 1 bytes @ 0x3
   717                           
   718  0023                     ADC_Read@canale:	
   719                           ; 1 bytes @ 0x3
   720                           
   721  0023                     SetDisplay@d1:	
   722                           ; 1 bytes @ 0x3
   723                           
   724  0023                     ___bmul@multiplier:	
   725                           ; 1 bytes @ 0x3
   726                           
   727                           
   728                           ; 1 bytes @ 0x3
   729  0023                     	ds	1
   730  0024                     ??_bitParita:	
   731  0024                     ??___wmul:	
   732                           ; 1 bytes @ 0x4
   733                           
   734  0024                     ??___awmod:	
   735                           ; 1 bytes @ 0x4
   736                           
   737  0024                     BuildByte@byte0:	
   738                           ; 1 bytes @ 0x4
   739                           
   740  0024                     GetTime@index:	
   741                           ; 1 bytes @ 0x4
   742                           
   743  0024                     SetDefaultTimers@giallo:	
   744                           ; 1 bytes @ 0x4
   745                           
   746  0024                     ___wmul@product:	
   747                           ; 2 bytes @ 0x4
   748                           
   749  0024                     ___aldiv@dividend:	
   750                           ; 2 bytes @ 0x4
   751                           
   752                           
   753                           ; 4 bytes @ 0x4
   754  0024                     	ds	1
   755  0025                     GetTime@shortInt:	
   756  0025                     ___awmod@counter:	
   757                           ; 1 bytes @ 0x5
   758                           
   759  0025                     BuildByte@txByte:	
   760                           ; 1 bytes @ 0x5
   761                           
   762                           
   763                           ; 5 bytes @ 0x5
   764  0025                     	ds	1
   765  0026                     ??_SetDefaultTimers:	
   766  0026                     ___awmod@sign:	
   767                           ; 1 bytes @ 0x6
   768                           
   769  0026                     GetTime@time:	
   770                           ; 1 bytes @ 0x6
   771                           
   772                           
   773                           ; 2 bytes @ 0x6
   774  0026                     	ds	1
   775  0027                     ?___awdiv:	
   776  0027                     ___awdiv@divisor:	
   777                           ; 2 bytes @ 0x7
   778                           
   779                           
   780                           ; 2 bytes @ 0x7
   781  0027                     	ds	1
   782  0028                     ??___aldiv:	
   783  0028                     bitParita@sommaRow:	
   784                           ; 1 bytes @ 0x8
   785                           
   786                           
   787                           ; 1 bytes @ 0x8
   788  0028                     	ds	1
   789  0029                     bitParita@sommaColumn:	
   790  0029                     ___aldiv@counter:	
   791                           ; 1 bytes @ 0x9
   792                           
   793  0029                     ___awdiv@dividend:	
   794                           ; 1 bytes @ 0x9
   795                           
   796                           
   797                           ; 2 bytes @ 0x9
   798  0029                     	ds	1
   799  002A                     bitParita@errorColumn:	
   800  002A                     BuildByte@sommaRow:	
   801                           ; 1 bytes @ 0xA
   802                           
   803  002A                     ___aldiv@sign:	
   804                           ; 1 bytes @ 0xA
   805                           
   806                           
   807                           ; 1 bytes @ 0xA
   808  002A                     	ds	1
   809  002B                     ??___awdiv:	
   810  002B                     bitParita@error:	
   811                           ; 1 bytes @ 0xB
   812                           
   813  002B                     BuildByte@sommaColumn:	
   814                           ; 1 bytes @ 0xB
   815                           
   816  002B                     ___aldiv@quotient:	
   817                           ; 1 bytes @ 0xB
   818                           
   819                           
   820                           ; 4 bytes @ 0xB
   821  002B                     	ds	1
   822  002C                     bitParita@errorRow:	
   823  002C                     SetDefaultTimers@l:	
   824                           ; 1 bytes @ 0xC
   825                           
   826  002C                     ___awdiv@counter:	
   827                           ; 1 bytes @ 0xC
   828                           
   829  002C                     BuildByte@y:	
   830                           ; 1 bytes @ 0xC
   831                           
   832                           
   833                           ; 2 bytes @ 0xC
   834  002C                     	ds	1
   835  002D                     SetDefaultTimers@i:	
   836  002D                     ___awdiv@sign:	
   837                           ; 1 bytes @ 0xD
   838                           
   839  002D                     bitParita@y:	
   840                           ; 1 bytes @ 0xD
   841                           
   842                           
   843                           ; 2 bytes @ 0xD
   844  002D                     	ds	1
   845  002E                     BuildByte@y_343:	
   846  002E                     ___awdiv@quotient:	
   847                           ; 2 bytes @ 0xE
   848                           
   849                           
   850                           ; 2 bytes @ 0xE
   851  002E                     	ds	1
   852  002F                     ?_UART_Init:	
   853  002F                     bitParita@y_331:	
   854                           ; 1 bytes @ 0xF
   855                           
   856  002F                     UART_Init@baudrate:	
   857                           ; 2 bytes @ 0xF
   858                           
   859                           
   860                           ; 2 bytes @ 0xF
   861  002F                     	ds	1
   862  0030                     ?_GetDigits:	
   863  0030                     ?_map:	
   864                           ; 1 bytes @ 0x10
   865                           
   866  0030                     map@x:	
   867                           ; 2 bytes @ 0x10
   868                           
   869  0030                     BuildByte@i:	
   870                           ; 2 bytes @ 0x10
   871                           
   872  0030                     GetDigits@Time:	
   873                           ; 2 bytes @ 0x10
   874                           
   875                           
   876                           ; 2 bytes @ 0x10
   877  0030                     	ds	1
   878  0031                     ??_UART_Init:	
   879  0031                     bitParita@rx:	
   880                           ; 1 bytes @ 0x11
   881                           
   882                           
   883                           ; 1 bytes @ 0x11
   884  0031                     	ds	1
   885  0032                     ??_GetDigits:	
   886  0032                     map@in_min:	
   887                           ; 1 bytes @ 0x12
   888                           
   889  0032                     bitParita@i:	
   890                           ; 2 bytes @ 0x12
   891                           
   892  0032                     BuildByte@i_342:	
   893                           ; 2 bytes @ 0x12
   894                           
   895                           
   896                           ; 2 bytes @ 0x12
   897  0032                     	ds	2
   898  0034                     ?_sendByte:	
   899  0034                     sendByte@byte1:	
   900                           ; 1 bytes @ 0x14
   901                           
   902  0034                     map@in_max:	
   903                           ; 1 bytes @ 0x14
   904                           
   905  0034                     bitParita@i_330:	
   906                           ; 2 bytes @ 0x14
   907                           
   908                           
   909                           ; 2 bytes @ 0x14
   910  0034                     	ds	1
   911  0035                     sendByte@valore:	
   912  0035                     _GetDigits$1151:	
   913                           ; 1 bytes @ 0x15
   914                           
   915                           
   916                           ; 2 bytes @ 0x15
   917  0035                     	ds	1
   918  0036                     ??_sendByte:	
   919  0036                     map@out_min:	
   920                           ; 1 bytes @ 0x16
   921                           
   922                           
   923                           ; 2 bytes @ 0x16
   924  0036                     	ds	2
   925  0038                     map@out_max:	
   926                           
   927                           ; 2 bytes @ 0x18
   928  0038                     	ds	1
   929  0039                     sendByte@byte0:	
   930                           
   931                           ; 1 bytes @ 0x19
   932  0039                     	ds	1
   933  003A                     ??_map:	
   934  003A                     sendByte@txByte:	
   935                           ; 1 bytes @ 0x1A
   936                           
   937                           
   938                           ; 1 bytes @ 0x1A
   939  003A                     	ds	1
   940  003B                     sendByte@i:	
   941                           
   942                           ; 1 bytes @ 0x1B
   943  003B                     	ds	1
   944  003C                     ??_main:	
   945                           
   946                           ; 1 bytes @ 0x1C
   947  003C                     	ds	16
   948                           
   949                           	psect	maintext
   950  0050                     __pmaintext:	
   951 ;;
   952 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   953 ;;
   954 ;; *************** function _main *****************
   955 ;; Defined at:
   956 ;;		line 129 in file "main.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;		None
   959 ;; Auto vars:     Size  Location     Type
   960 ;;  i               1   17[BANK2 ] unsigned char 
   961 ;;  index           1    8[BANK2 ] unsigned char 
   962 ;;  colorId         1    1[BANK2 ] unsigned char 
   963 ;;  semaforoId      1    0[BANK2 ] unsigned char 
   964 ;;  i               1   13[BANK2 ] unsigned char 
   965 ;;  i               1   12[BANK2 ] unsigned char 
   966 ;;  i               1   11[BANK2 ] unsigned char 
   967 ;;  i               2   14[BANK2 ] int 
   968 ;;  i               2   18[BANK2 ] int 
   969 ;;  l               1   16[BANK2 ] unsigned char 
   970 ;;  tmp             1    6[BANK2 ] unsigned char 
   971 ;;  time            2    9[BANK2 ] int 
   972 ;;  lux_select      1    7[BANK2 ] unsigned char 
   973 ;;  endCiclo        1    5[BANK2 ] struct .
   974 ;;  pressione       1    4[BANK2 ] unsigned char 
   975 ;;  umidita         1    3[BANK2 ] unsigned char 
   976 ;;  temp            1    2[BANK2 ] unsigned char 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : B00/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   986 ;;      Params:         0       0       0       0       0
   987 ;;      Locals:         0       0       0       0      20
   988 ;;      Temps:          0      16       0       0       0
   989 ;;      Totals:         0      16       0       0      20
   990 ;;Total ram usage:       36 bytes
   991 ;; Hardware stack levels required when called:    4
   992 ;; This function calls:
   993 ;;		_ADC_Read
   994 ;;		_GetDigits
   995 ;;		_GetTime
   996 ;;		_SetDefaultTimers
   997 ;;		_SetDisplay
   998 ;;		_UART_Init
   999 ;;		___awmod
  1000 ;;		___bmul
  1001 ;;		_bitParita
  1002 ;;		_init_ADC
  1003 ;;		_map
  1004 ;;		_sendByte
  1005 ;; This function is called by:
  1006 ;;		Startup code after reset
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           
  1011                           ;psect for function _main
  1012  0050                     _main:	
  1013  0050                     l3178:	
  1014                           ;incstack = 0
  1015                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1016                           
  1017                           
  1018                           ;main.c: 131:     TRISB = 0x1F;
  1019  0050  301F               	movlw	31
  1020  0051  1683               	bsf	3,5	;RP0=1, select bank1
  1021  0052  1303               	bcf	3,6	;RP1=0, select bank1
  1022  0053  0086               	movwf	6	;volatile
  1023                           
  1024                           ;main.c: 132:     TRISC = 0x80;
  1025  0054  3080               	movlw	128
  1026  0055  0087               	movwf	7	;volatile
  1027  0056                     l3180:	
  1028                           
  1029                           ;main.c: 133:     TRISD = 0x00;
  1030  0056  0188               	clrf	8	;volatile
  1031  0057                     l3182:	
  1032                           
  1033                           ;main.c: 134:     TRISE = 0x01;
  1034  0057  3001               	movlw	1
  1035  0058  0089               	movwf	9	;volatile
  1036  0059                     l3184:	
  1037                           
  1038                           ;main.c: 135:     INTCON = 0xE0;
  1039  0059  30E0               	movlw	224
  1040  005A  008B               	movwf	11	;volatile
  1041  005B                     l3186:	
  1042                           
  1043                           ;main.c: 136:     OPTION_REG = 0x04;
  1044  005B  3004               	movlw	4
  1045  005C  0081               	movwf	1	;volatile
  1046  005D                     l3188:	
  1047                           
  1048                           ;main.c: 137:     TMR0 = 6;
  1049  005D  3006               	movlw	6
  1050  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1051  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1052  0060  0081               	movwf	1	;volatile
  1053  0061                     l3190:	
  1054                           
  1055                           ;main.c: 138:     T1CON = 0x31;
  1056  0061  3031               	movlw	49
  1057  0062  0090               	movwf	16	;volatile
  1058  0063                     l3192:	
  1059                           
  1060                           ;main.c: 144:     init_ADC();
  1061  0063  120A  158A  22CB  120A  118A  	fcall	_init_ADC
  1062  0068                     l3194:	
  1063                           
  1064                           ;main.c: 145:     UART_Init(9600);
  1065  0068  3080               	movlw	128
  1066  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1067  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1068  006B  00AF               	movwf	UART_Init@baudrate
  1069  006C  3025               	movlw	37
  1070  006D  00B0               	movwf	UART_Init@baudrate+1
  1071  006E  120A  158A  240E  120A  118A  	fcall	_UART_Init
  1072  0073                     l3196:	
  1073                           
  1074                           ;main.c: 146:     SetDefaultTimers(2, 2, 2);
  1075  0073  3002               	movlw	2
  1076  0074  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0075  1303               	bcf	3,6	;RP1=0, select bank0
  1078  0076  00A0               	movwf	SetDefaultTimers@rosso
  1079  0077  3000               	movlw	0
  1080  0078  00A1               	movwf	SetDefaultTimers@rosso+1
  1081  0079  3002               	movlw	2
  1082  007A  00A2               	movwf	SetDefaultTimers@verde
  1083  007B  3000               	movlw	0
  1084  007C  00A3               	movwf	SetDefaultTimers@verde+1
  1085  007D  3002               	movlw	2
  1086  007E  00A4               	movwf	SetDefaultTimers@giallo
  1087  007F  3000               	movlw	0
  1088  0080  00A5               	movwf	SetDefaultTimers@giallo+1
  1089  0081  120A  158A  2611  120A  118A  	fcall	_SetDefaultTimers
  1090  0086                     l3198:	
  1091                           
  1092                           ;main.c: 148:     TMR1H = 60;
  1093  0086  303C               	movlw	60
  1094  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1095  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1096  0089  008F               	movwf	15	;volatile
  1097  008A                     l3200:	
  1098                           
  1099                           ;main.c: 149:     TMR1L = 176;
  1100  008A  30B0               	movlw	176
  1101  008B  008E               	movwf	14	;volatile
  1102  008C                     l3202:	
  1103                           
  1104                           ;main.c: 151:     int time;;main.c: 152:     unsigned char lux_select = 0;
  1105  008C  1283               	bcf	3,5	;RP0=0, select bank2
  1106  008D  1703               	bsf	3,6	;RP1=1, select bank2
  1107  008E  01DF               	clrf	main@lux_select^(0+256)
  1108  008F                     l3204:	
  1109                           
  1110                           ;main.c: 153:     disp = 0;
  1111  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1112  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1113  0091  01DB               	clrf	_disp
  1114  0092                     l3206:	
  1115  0092                     l3208:	
  1116  0092                     l3210:	
  1117  0092                     l3212:	
  1118                           
  1119                           ;main.c: 157:     Bit endCiclo;;main.c: 158:     endCiclo.Bit = 1;
  1120  0092  1283               	bcf	3,5	;RP0=0, select bank2
  1121  0093  1703               	bsf	3,6	;RP1=1, select bank2
  1122  0094  145D               	bsf	main@endCiclo^(0+256),0
  1123  0095                     l3214:	
  1124                           
  1125                           ;main.c: 161:     {;main.c: 163:         if (readGateway.Bit)
  1126  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1127  0096  1C62               	btfss	_readGateway,0
  1128  0097  2899               	goto	u3211
  1129  0098  289A               	goto	u3210
  1130  0099                     u3211:	
  1131  0099  2B31               	goto	l212
  1132  009A                     u3210:	
  1133  009A  2B1C               	goto	l3294
  1134  009B                     l214:	
  1135                           ;main.c: 166:             {;main.c: 167:             case 0x08:
  1136                           
  1137                           
  1138                           ;main.c: 168:                 readGatewayDone.Bit = 1;
  1139  009B  1463               	bsf	_readGatewayDone,0
  1140                           
  1141                           ;main.c: 169:                 readGateway.Bit = 0;
  1142  009C  1062               	bcf	_readGateway,0
  1143  009D                     l3218:	
  1144                           
  1145                           ;main.c: 171:                 for (int i = 0; i < 4; i++)
  1146  009D  1283               	bcf	3,5	;RP0=0, select bank2
  1147  009E  1703               	bsf	3,6	;RP1=1, select bank2
  1148  009F  01EA               	clrf	main@i^(0+256)
  1149  00A0  01EB               	clrf	(main@i+1)^(0+256)
  1150  00A1  29BE               	goto	l3234
  1151  00A2                     l3224:	
  1152                           
  1153                           ;main.c: 176:                         sendByte(0x03, 0x01, motorcycle[i]);
  1154  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1155  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  1156  00A4  01B4               	clrf	sendByte@byte1
  1157  00A5  0AB4               	incf	sendByte@byte1,f
  1158  00A6  1283               	bcf	3,5	;RP0=0, select bank2
  1159  00A7  1703               	bsf	3,6	;RP1=1, select bank2
  1160  00A8  086A               	movf	main@i^(0+256),w
  1161  00A9  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1162  00AA  0084               	movwf	4
  1163  00AB  1383               	bcf	3,7	;select IRP bank0
  1164  00AC  0800               	movf	0,w
  1165  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1166  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1167  00AF  00BC               	movwf	??_main
  1168  00B0  083C               	movf	??_main,w
  1169  00B1  00B5               	movwf	sendByte@valore
  1170  00B2  3003               	movlw	3
  1171  00B3  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1172                           
  1173                           ;main.c: 177:                         sendByte(0x03, 0x10, car[i]);
  1174  00B8  3010               	movlw	16
  1175  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1176  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1177  00BB  00BC               	movwf	??_main
  1178  00BC  083C               	movf	??_main,w
  1179  00BD  00B4               	movwf	sendByte@byte1
  1180  00BE  1283               	bcf	3,5	;RP0=0, select bank2
  1181  00BF  1703               	bsf	3,6	;RP1=1, select bank2
  1182  00C0  086A               	movf	main@i^(0+256),w
  1183  00C1  3E50               	addlw	(low (_car| 0))& (0+255)
  1184  00C2  0084               	movwf	4
  1185  00C3  1383               	bcf	3,7	;select IRP bank0
  1186  00C4  0800               	movf	0,w
  1187  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1188  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  1189  00C7  00BD               	movwf	??_main+1
  1190  00C8  083D               	movf	??_main+1,w
  1191  00C9  00B5               	movwf	sendByte@valore
  1192  00CA  3003               	movlw	3
  1193  00CB  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1194                           
  1195                           ;main.c: 178:                         sendByte(0x03, 0x11, truck[i]);
  1196  00D0  3011               	movlw	17
  1197  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1198  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1199  00D3  00BC               	movwf	??_main
  1200  00D4  083C               	movf	??_main,w
  1201  00D5  00B4               	movwf	sendByte@byte1
  1202  00D6  1283               	bcf	3,5	;RP0=0, select bank2
  1203  00D7  1703               	bsf	3,6	;RP1=1, select bank2
  1204  00D8  086A               	movf	main@i^(0+256),w
  1205  00D9  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1206  00DA  0084               	movwf	4
  1207  00DB  1383               	bcf	3,7	;select IRP bank0
  1208  00DC  0800               	movf	0,w
  1209  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1210  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1211  00DF  00BD               	movwf	??_main+1
  1212  00E0  083D               	movf	??_main+1,w
  1213  00E1  00B5               	movwf	sendByte@valore
  1214  00E2  3003               	movlw	3
  1215  00E3  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1216                           
  1217                           ;main.c: 179:                         break;
  1218  00E8  29D3               	goto	l3236
  1219  00E9                     l3226:	
  1220                           
  1221                           ;main.c: 181:                         sendByte(0x05, 0x01, motorcycle[i]);
  1222  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1223  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  1224  00EB  01B4               	clrf	sendByte@byte1
  1225  00EC  0AB4               	incf	sendByte@byte1,f
  1226  00ED  1283               	bcf	3,5	;RP0=0, select bank2
  1227  00EE  1703               	bsf	3,6	;RP1=1, select bank2
  1228  00EF  086A               	movf	main@i^(0+256),w
  1229  00F0  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1230  00F1  0084               	movwf	4
  1231  00F2  1383               	bcf	3,7	;select IRP bank0
  1232  00F3  0800               	movf	0,w
  1233  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1234  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1235  00F6  00BC               	movwf	??_main
  1236  00F7  083C               	movf	??_main,w
  1237  00F8  00B5               	movwf	sendByte@valore
  1238  00F9  3005               	movlw	5
  1239  00FA  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1240                           
  1241                           ;main.c: 182:                         sendByte(0x05, 0x10, car[i]);
  1242  00FF  3010               	movlw	16
  1243  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1244  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1245  0102  00BC               	movwf	??_main
  1246  0103  083C               	movf	??_main,w
  1247  0104  00B4               	movwf	sendByte@byte1
  1248  0105  1283               	bcf	3,5	;RP0=0, select bank2
  1249  0106  1703               	bsf	3,6	;RP1=1, select bank2
  1250  0107  086A               	movf	main@i^(0+256),w
  1251  0108  3E50               	addlw	(low (_car| 0))& (0+255)
  1252  0109  0084               	movwf	4
  1253  010A  1383               	bcf	3,7	;select IRP bank0
  1254  010B  0800               	movf	0,w
  1255  010C  1283               	bcf	3,5	;RP0=0, select bank0
  1256  010D  1303               	bcf	3,6	;RP1=0, select bank0
  1257  010E  00BD               	movwf	??_main+1
  1258  010F  083D               	movf	??_main+1,w
  1259  0110  00B5               	movwf	sendByte@valore
  1260  0111  3005               	movlw	5
  1261  0112  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1262                           
  1263                           ;main.c: 183:                         sendByte(0x05, 0x11, truck[i]);
  1264  0117  3011               	movlw	17
  1265  0118  1283               	bcf	3,5	;RP0=0, select bank0
  1266  0119  1303               	bcf	3,6	;RP1=0, select bank0
  1267  011A  00BC               	movwf	??_main
  1268  011B  083C               	movf	??_main,w
  1269  011C  00B4               	movwf	sendByte@byte1
  1270  011D  1283               	bcf	3,5	;RP0=0, select bank2
  1271  011E  1703               	bsf	3,6	;RP1=1, select bank2
  1272  011F  086A               	movf	main@i^(0+256),w
  1273  0120  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1274  0121  0084               	movwf	4
  1275  0122  1383               	bcf	3,7	;select IRP bank0
  1276  0123  0800               	movf	0,w
  1277  0124  1283               	bcf	3,5	;RP0=0, select bank0
  1278  0125  1303               	bcf	3,6	;RP1=0, select bank0
  1279  0126  00BD               	movwf	??_main+1
  1280  0127  083D               	movf	??_main+1,w
  1281  0128  00B5               	movwf	sendByte@valore
  1282  0129  3005               	movlw	5
  1283  012A  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1284                           
  1285                           ;main.c: 184:                         break;
  1286  012F  29D3               	goto	l3236
  1287  0130                     l3228:	
  1288                           
  1289                           ;main.c: 186:                         sendByte(0x07, 0x01, motorcycle[i]);
  1290  0130  1283               	bcf	3,5	;RP0=0, select bank0
  1291  0131  1303               	bcf	3,6	;RP1=0, select bank0
  1292  0132  01B4               	clrf	sendByte@byte1
  1293  0133  0AB4               	incf	sendByte@byte1,f
  1294  0134  1283               	bcf	3,5	;RP0=0, select bank2
  1295  0135  1703               	bsf	3,6	;RP1=1, select bank2
  1296  0136  086A               	movf	main@i^(0+256),w
  1297  0137  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1298  0138  0084               	movwf	4
  1299  0139  1383               	bcf	3,7	;select IRP bank0
  1300  013A  0800               	movf	0,w
  1301  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1302  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1303  013D  00BC               	movwf	??_main
  1304  013E  083C               	movf	??_main,w
  1305  013F  00B5               	movwf	sendByte@valore
  1306  0140  3007               	movlw	7
  1307  0141  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1308                           
  1309                           ;main.c: 187:                         sendByte(0x07, 0x10, car[i]);
  1310  0146  3010               	movlw	16
  1311  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1312  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1313  0149  00BC               	movwf	??_main
  1314  014A  083C               	movf	??_main,w
  1315  014B  00B4               	movwf	sendByte@byte1
  1316  014C  1283               	bcf	3,5	;RP0=0, select bank2
  1317  014D  1703               	bsf	3,6	;RP1=1, select bank2
  1318  014E  086A               	movf	main@i^(0+256),w
  1319  014F  3E50               	addlw	(low (_car| 0))& (0+255)
  1320  0150  0084               	movwf	4
  1321  0151  1383               	bcf	3,7	;select IRP bank0
  1322  0152  0800               	movf	0,w
  1323  0153  1283               	bcf	3,5	;RP0=0, select bank0
  1324  0154  1303               	bcf	3,6	;RP1=0, select bank0
  1325  0155  00BD               	movwf	??_main+1
  1326  0156  083D               	movf	??_main+1,w
  1327  0157  00B5               	movwf	sendByte@valore
  1328  0158  3007               	movlw	7
  1329  0159  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1330                           
  1331                           ;main.c: 188:                         sendByte(0x07, 0x11, truck[i]);
  1332  015E  3011               	movlw	17
  1333  015F  1283               	bcf	3,5	;RP0=0, select bank0
  1334  0160  1303               	bcf	3,6	;RP1=0, select bank0
  1335  0161  00BC               	movwf	??_main
  1336  0162  083C               	movf	??_main,w
  1337  0163  00B4               	movwf	sendByte@byte1
  1338  0164  1283               	bcf	3,5	;RP0=0, select bank2
  1339  0165  1703               	bsf	3,6	;RP1=1, select bank2
  1340  0166  086A               	movf	main@i^(0+256),w
  1341  0167  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1342  0168  0084               	movwf	4
  1343  0169  1383               	bcf	3,7	;select IRP bank0
  1344  016A  0800               	movf	0,w
  1345  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1346  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1347  016D  00BD               	movwf	??_main+1
  1348  016E  083D               	movf	??_main+1,w
  1349  016F  00B5               	movwf	sendByte@valore
  1350  0170  3007               	movlw	7
  1351  0171  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1352                           
  1353                           ;main.c: 189:                         break;
  1354  0176  29D3               	goto	l3236
  1355  0177                     l3230:	
  1356                           
  1357                           ;main.c: 191:                         sendByte(0x09, 0x01, motorcycle[i]);
  1358  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1359  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1360  0179  01B4               	clrf	sendByte@byte1
  1361  017A  0AB4               	incf	sendByte@byte1,f
  1362  017B  1283               	bcf	3,5	;RP0=0, select bank2
  1363  017C  1703               	bsf	3,6	;RP1=1, select bank2
  1364  017D  086A               	movf	main@i^(0+256),w
  1365  017E  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1366  017F  0084               	movwf	4
  1367  0180  1383               	bcf	3,7	;select IRP bank0
  1368  0181  0800               	movf	0,w
  1369  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1370  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1371  0184  00BC               	movwf	??_main
  1372  0185  083C               	movf	??_main,w
  1373  0186  00B5               	movwf	sendByte@valore
  1374  0187  3009               	movlw	9
  1375  0188  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1376                           
  1377                           ;main.c: 192:                         sendByte(0x09, 0x10, car[i]);
  1378  018D  3010               	movlw	16
  1379  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1380  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1381  0190  00BC               	movwf	??_main
  1382  0191  083C               	movf	??_main,w
  1383  0192  00B4               	movwf	sendByte@byte1
  1384  0193  1283               	bcf	3,5	;RP0=0, select bank2
  1385  0194  1703               	bsf	3,6	;RP1=1, select bank2
  1386  0195  086A               	movf	main@i^(0+256),w
  1387  0196  3E50               	addlw	(low (_car| 0))& (0+255)
  1388  0197  0084               	movwf	4
  1389  0198  1383               	bcf	3,7	;select IRP bank0
  1390  0199  0800               	movf	0,w
  1391  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1392  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1393  019C  00BD               	movwf	??_main+1
  1394  019D  083D               	movf	??_main+1,w
  1395  019E  00B5               	movwf	sendByte@valore
  1396  019F  3009               	movlw	9
  1397  01A0  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1398                           
  1399                           ;main.c: 193:                         sendByte(0x09, 0x11, truck[i]);
  1400  01A5  3011               	movlw	17
  1401  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1402  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1403  01A8  00BC               	movwf	??_main
  1404  01A9  083C               	movf	??_main,w
  1405  01AA  00B4               	movwf	sendByte@byte1
  1406  01AB  1283               	bcf	3,5	;RP0=0, select bank2
  1407  01AC  1703               	bsf	3,6	;RP1=1, select bank2
  1408  01AD  086A               	movf	main@i^(0+256),w
  1409  01AE  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1410  01AF  0084               	movwf	4
  1411  01B0  1383               	bcf	3,7	;select IRP bank0
  1412  01B1  0800               	movf	0,w
  1413  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1414  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1415  01B4  00BD               	movwf	??_main+1
  1416  01B5  083D               	movf	??_main+1,w
  1417  01B6  00B5               	movwf	sendByte@valore
  1418  01B7  3009               	movlw	9
  1419  01B8  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1420                           
  1421                           ;main.c: 194:                         break;
  1422  01BD  29D3               	goto	l3236
  1423  01BE                     l3234:	
  1424                           
  1425                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1426                           ; Switch size 1, requested type "simple"
  1427                           ; Number of cases is 1, Range of values is 0 to 0
  1428                           ; switch strategies available:
  1429                           ; Name         Instructions Cycles
  1430                           ; simple_byte            4     3 (average)
  1431                           ; direct_byte           11     8 (fixed)
  1432                           ; jumptable            260     6 (fixed)
  1433                           ;	Chosen strategy is simple_byte
  1434  01BE  1283               	bcf	3,5	;RP0=0, select bank2
  1435  01BF  1703               	bsf	3,6	;RP1=1, select bank2
  1436  01C0  086B               	movf	(main@i+1)^(0+256),w
  1437  01C1  3A00               	xorlw	0	; case 0
  1438  01C2  1903               	skipnz
  1439  01C3  29C5               	goto	l3550
  1440  01C4  29D3               	goto	l3236
  1441  01C5                     l3550:	
  1442                           
  1443                           ; Switch size 1, requested type "simple"
  1444                           ; Number of cases is 4, Range of values is 0 to 3
  1445                           ; switch strategies available:
  1446                           ; Name         Instructions Cycles
  1447                           ; simple_byte           13     7 (average)
  1448                           ; direct_byte           20     8 (fixed)
  1449                           ; jumptable            260     6 (fixed)
  1450                           ;	Chosen strategy is simple_byte
  1451  01C5  086A               	movf	main@i^(0+256),w
  1452  01C6  3A00               	xorlw	0	; case 0
  1453  01C7  1903               	skipnz
  1454  01C8  28A2               	goto	l3224
  1455  01C9  3A01               	xorlw	1	; case 1
  1456  01CA  1903               	skipnz
  1457  01CB  28E9               	goto	l3226
  1458  01CC  3A03               	xorlw	3	; case 2
  1459  01CD  1903               	skipnz
  1460  01CE  2930               	goto	l3228
  1461  01CF  3A01               	xorlw	1	; case 3
  1462  01D0  1903               	skipnz
  1463  01D1  2977               	goto	l3230
  1464  01D2  29D3               	goto	l3236
  1465  01D3                     l3236:	
  1466                           
  1467                           ;main.c: 196:                 }
  1468  01D3  3001               	movlw	1
  1469  01D4  1283               	bcf	3,5	;RP0=0, select bank2
  1470  01D5  1703               	bsf	3,6	;RP1=1, select bank2
  1471  01D6  07EA               	addwf	main@i^(0+256),f
  1472  01D7  1803               	skipnc
  1473  01D8  0AEB               	incf	(main@i+1)^(0+256),f
  1474  01D9  3000               	movlw	0
  1475  01DA  07EB               	addwf	(main@i+1)^(0+256),f
  1476  01DB                     l3238:	
  1477  01DB  086B               	movf	(main@i+1)^(0+256),w
  1478  01DC  3A80               	xorlw	128
  1479  01DD  00FF               	movwf	btemp+1
  1480  01DE  3080               	movlw	128
  1481  01DF  027F               	subwf	btemp+1,w
  1482  01E0  1D03               	skipz
  1483  01E1  29E4               	goto	u3225
  1484  01E2  3004               	movlw	4
  1485  01E3  026A               	subwf	main@i^(0+256),w
  1486  01E4                     u3225:	
  1487  01E4  1C03               	skipc
  1488  01E5  29E7               	goto	u3221
  1489  01E6  29E8               	goto	u3220
  1490  01E7                     u3221:	
  1491  01E7  29BE               	goto	l3234
  1492  01E8                     u3220:	
  1493  01E8                     l3240:	
  1494                           
  1495                           ;main.c: 198:                 for (int i = 0; i < 4; i++)
  1496  01E8  1283               	bcf	3,5	;RP0=0, select bank2
  1497  01E9  1703               	bsf	3,6	;RP1=1, select bank2
  1498  01EA  01E6               	clrf	main@i_436^(0+256)
  1499  01EB  01E7               	clrf	(main@i_436+1)^(0+256)
  1500  01EC                     l3242:	
  1501  01EC  0867               	movf	(main@i_436+1)^(0+256),w
  1502  01ED  3A80               	xorlw	128
  1503  01EE  00FF               	movwf	btemp+1
  1504  01EF  3080               	movlw	128
  1505  01F0  027F               	subwf	btemp+1,w
  1506  01F1  1D03               	skipz
  1507  01F2  29F5               	goto	u3235
  1508  01F3  3004               	movlw	4
  1509  01F4  0266               	subwf	main@i_436^(0+256),w
  1510  01F5                     u3235:	
  1511  01F5  1C03               	skipc
  1512  01F6  29F8               	goto	u3231
  1513  01F7  29F9               	goto	u3230
  1514  01F8                     u3231:	
  1515  01F8  29FA               	goto	l3246
  1516  01F9                     u3230:	
  1517  01F9  2A10               	goto	l3252
  1518  01FA                     l3246:	
  1519                           
  1520                           ;main.c: 199:                 {;main.c: 200:                     motorcycle[i] = 0;
  1521  01FA  1283               	bcf	3,5	;RP0=0, select bank2
  1522  01FB  1703               	bsf	3,6	;RP1=1, select bank2
  1523  01FC  0866               	movf	main@i_436^(0+256),w
  1524  01FD  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1525  01FE  0084               	movwf	4
  1526  01FF  1383               	bcf	3,7	;select IRP bank0
  1527  0200  0180               	clrf	0
  1528                           
  1529                           ;main.c: 201:                     car[i] = 0;
  1530  0201  0866               	movf	main@i_436^(0+256),w
  1531  0202  3E50               	addlw	(low (_car| 0))& (0+255)
  1532  0203  0084               	movwf	4
  1533  0204  0180               	clrf	0
  1534                           
  1535                           ;main.c: 202:                     truck[i] = 0;
  1536  0205  0866               	movf	main@i_436^(0+256),w
  1537  0206  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1538  0207  0084               	movwf	4
  1539  0208  0180               	clrf	0
  1540  0209                     l3248:	
  1541                           
  1542                           ;main.c: 203:                 }
  1543  0209  3001               	movlw	1
  1544  020A  07E6               	addwf	main@i_436^(0+256),f
  1545  020B  1803               	skipnc
  1546  020C  0AE7               	incf	(main@i_436+1)^(0+256),f
  1547  020D  3000               	movlw	0
  1548  020E  07E7               	addwf	(main@i_436+1)^(0+256),f
  1549  020F  29EC               	goto	l3242
  1550  0210                     l3252:	
  1551                           
  1552                           ;main.c: 205:                 for (unsigned char i = 0; i < 5; i++)
  1553  0210  1283               	bcf	3,5	;RP0=0, select bank2
  1554  0211  1703               	bsf	3,6	;RP1=1, select bank2
  1555  0212  01E3               	clrf	main@i_437^(0+256)
  1556  0213                     l3254:	
  1557  0213  3005               	movlw	5
  1558  0214  0263               	subwf	main@i_437^(0+256),w
  1559  0215  1C03               	skipc
  1560  0216  2A18               	goto	u3241
  1561  0217  2A19               	goto	u3240
  1562  0218                     u3241:	
  1563  0218  2A1A               	goto	l3258
  1564  0219                     u3240:	
  1565  0219  2B31               	goto	l212
  1566  021A                     l3258:	
  1567                           
  1568                           ;main.c: 206:                 {;main.c: 207:                     dataFromGateway[i] = 0;
  1569  021A  0863               	movf	main@i_437^(0+256),w
  1570  021B  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1571  021C  0084               	movwf	4
  1572  021D  1383               	bcf	3,7	;select IRP bank1
  1573  021E  0180               	clrf	0
  1574  021F                     l3260:	
  1575                           
  1576                           ;main.c: 208:                 }
  1577  021F  3001               	movlw	1
  1578  0220  1283               	bcf	3,5	;RP0=0, select bank0
  1579  0221  1303               	bcf	3,6	;RP1=0, select bank0
  1580  0222  00BC               	movwf	??_main
  1581  0223  083C               	movf	??_main,w
  1582  0224  1283               	bcf	3,5	;RP0=0, select bank2
  1583  0225  1703               	bsf	3,6	;RP1=1, select bank2
  1584  0226  07E3               	addwf	main@i_437^(0+256),f
  1585  0227  2A13               	goto	l3254
  1586  0228                     l228:	
  1587                           ;main.c: 210:             case 0x0A:
  1588                           
  1589                           
  1590                           ;main.c: 211:                 readGatewayDone.Bit = 1;
  1591  0228  1463               	bsf	_readGatewayDone,0
  1592                           
  1593                           ;main.c: 212:                 readGateway.Bit = 0;
  1594  0229  1062               	bcf	_readGateway,0
  1595  022A                     l3264:	
  1596                           
  1597                           ;main.c: 214:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1598  022A  3000               	movlw	0
  1599  022B  120A  158A  232A  120A  118A  	fcall	_ADC_Read
  1600  0230  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0231  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0232  0820               	movf	?_ADC_Read,w
  1603  0233  00BC               	movwf	??_main
  1604  0234  0821               	movf	?_ADC_Read+1,w
  1605  0235  00BD               	movwf	??_main+1
  1606  0236  0D3D               	rlf	??_main+1,w
  1607  0237  0CBD               	rrf	??_main+1,f
  1608  0238  0CBC               	rrf	??_main,f
  1609  0239  0D3D               	rlf	??_main+1,w
  1610  023A  0CBD               	rrf	??_main+1,f
  1611  023B  0CBC               	rrf	??_main,f
  1612  023C  083C               	movf	??_main,w
  1613  023D  00B0               	movwf	map@x
  1614  023E  083D               	movf	??_main+1,w
  1615  023F  00B1               	movwf	map@x+1
  1616  0240  3000               	movlw	0
  1617  0241  00B2               	movwf	map@in_min
  1618  0242  00B3               	movwf	map@in_min+1
  1619  0243  30FF               	movlw	255
  1620  0244  00B4               	movwf	map@in_max
  1621  0245  3000               	movlw	0
  1622  0246  00B5               	movwf	map@in_max+1
  1623  0247  30EC               	movlw	236
  1624  0248  00B6               	movwf	map@out_min
  1625  0249  30FF               	movlw	255
  1626  024A  00B7               	movwf	map@out_min+1
  1627  024B  303C               	movlw	60
  1628  024C  00B8               	movwf	map@out_max
  1629  024D  3000               	movlw	0
  1630  024E  00B9               	movwf	map@out_max+1
  1631  024F  120A  158A  23D9  120A  118A  	fcall	_map
  1632  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1633  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1634  0256  0830               	movf	?_map,w
  1635  0257  00BE               	movwf	??_main+2
  1636  0258  083E               	movf	??_main+2,w
  1637  0259  1283               	bcf	3,5	;RP0=0, select bank2
  1638  025A  1703               	bsf	3,6	;RP1=1, select bank2
  1639  025B  00DA               	movwf	main@temp^(0+256)
  1640                           
  1641                           ;main.c: 215:                 umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  1642  025C  3001               	movlw	1
  1643  025D  120A  158A  232A  120A  118A  	fcall	_ADC_Read
  1644  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1645  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1646  0264  0820               	movf	?_ADC_Read,w
  1647  0265  00BC               	movwf	??_main
  1648  0266  0821               	movf	?_ADC_Read+1,w
  1649  0267  00BD               	movwf	??_main+1
  1650  0268  0D3D               	rlf	??_main+1,w
  1651  0269  0CBD               	rrf	??_main+1,f
  1652  026A  0CBC               	rrf	??_main,f
  1653  026B  0D3D               	rlf	??_main+1,w
  1654  026C  0CBD               	rrf	??_main+1,f
  1655  026D  0CBC               	rrf	??_main,f
  1656  026E  083C               	movf	??_main,w
  1657  026F  00B0               	movwf	map@x
  1658  0270  083D               	movf	??_main+1,w
  1659  0271  00B1               	movwf	map@x+1
  1660  0272  3000               	movlw	0
  1661  0273  00B2               	movwf	map@in_min
  1662  0274  00B3               	movwf	map@in_min+1
  1663  0275  30FF               	movlw	255
  1664  0276  00B4               	movwf	map@in_max
  1665  0277  3000               	movlw	0
  1666  0278  00B5               	movwf	map@in_max+1
  1667  0279  3000               	movlw	0
  1668  027A  00B6               	movwf	map@out_min
  1669  027B  00B7               	movwf	map@out_min+1
  1670  027C  3064               	movlw	100
  1671  027D  00B8               	movwf	map@out_max
  1672  027E  3000               	movlw	0
  1673  027F  00B9               	movwf	map@out_max+1
  1674  0280  120A  158A  23D9  120A  118A  	fcall	_map
  1675  0285  1283               	bcf	3,5	;RP0=0, select bank0
  1676  0286  1303               	bcf	3,6	;RP1=0, select bank0
  1677  0287  0830               	movf	?_map,w
  1678  0288  00BE               	movwf	??_main+2
  1679  0289  083E               	movf	??_main+2,w
  1680  028A  1283               	bcf	3,5	;RP0=0, select bank2
  1681  028B  1703               	bsf	3,6	;RP1=1, select bank2
  1682  028C  00DB               	movwf	main@umidita^(0+256)
  1683                           
  1684                           ;main.c: 216:                 pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  1685  028D  3005               	movlw	5
  1686  028E  120A  158A  232A  120A  118A  	fcall	_ADC_Read
  1687  0293  1283               	bcf	3,5	;RP0=0, select bank0
  1688  0294  1303               	bcf	3,6	;RP1=0, select bank0
  1689  0295  0820               	movf	?_ADC_Read,w
  1690  0296  00BC               	movwf	??_main
  1691  0297  0821               	movf	?_ADC_Read+1,w
  1692  0298  00BD               	movwf	??_main+1
  1693  0299  0D3D               	rlf	??_main+1,w
  1694  029A  0CBD               	rrf	??_main+1,f
  1695  029B  0CBC               	rrf	??_main,f
  1696  029C  0D3D               	rlf	??_main+1,w
  1697  029D  0CBD               	rrf	??_main+1,f
  1698  029E  0CBC               	rrf	??_main,f
  1699  029F  083C               	movf	??_main,w
  1700  02A0  00B0               	movwf	map@x
  1701  02A1  083D               	movf	??_main+1,w
  1702  02A2  00B1               	movwf	map@x+1
  1703  02A3  3000               	movlw	0
  1704  02A4  00B2               	movwf	map@in_min
  1705  02A5  00B3               	movwf	map@in_min+1
  1706  02A6  30FF               	movlw	255
  1707  02A7  00B4               	movwf	map@in_max
  1708  02A8  3000               	movlw	0
  1709  02A9  00B5               	movwf	map@in_max+1
  1710  02AA  3000               	movlw	0
  1711  02AB  00B6               	movwf	map@out_min
  1712  02AC  00B7               	movwf	map@out_min+1
  1713  02AD  3064               	movlw	100
  1714  02AE  00B8               	movwf	map@out_max
  1715  02AF  3000               	movlw	0
  1716  02B0  00B9               	movwf	map@out_max+1
  1717  02B1  120A  158A  23D9  120A  118A  	fcall	_map
  1718  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  1719  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  1720  02B8  0830               	movf	?_map,w
  1721  02B9  00BE               	movwf	??_main+2
  1722  02BA  083E               	movf	??_main+2,w
  1723  02BB  1283               	bcf	3,5	;RP0=0, select bank2
  1724  02BC  1703               	bsf	3,6	;RP1=1, select bank2
  1725  02BD  00DC               	movwf	main@pressione^(0+256)
  1726  02BE                     l3266:	
  1727                           
  1728                           ;main.c: 217:                 sendByte(0x02, 0x00, temp);
  1729  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  1730  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  1731  02C0  01B4               	clrf	sendByte@byte1
  1732  02C1  1283               	bcf	3,5	;RP0=0, select bank2
  1733  02C2  1703               	bsf	3,6	;RP1=1, select bank2
  1734  02C3  085A               	movf	main@temp^(0+256),w
  1735  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  1736  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  1737  02C6  00BC               	movwf	??_main
  1738  02C7  083C               	movf	??_main,w
  1739  02C8  00B5               	movwf	sendByte@valore
  1740  02C9  3002               	movlw	2
  1741  02CA  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1742  02CF                     l3268:	
  1743                           
  1744                           ;main.c: 218:                 sendByte(0x04, 0x00, umidita);
  1745  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  1746  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  1747  02D1  01B4               	clrf	sendByte@byte1
  1748  02D2  1283               	bcf	3,5	;RP0=0, select bank2
  1749  02D3  1703               	bsf	3,6	;RP1=1, select bank2
  1750  02D4  085B               	movf	main@umidita^(0+256),w
  1751  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  1752  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  1753  02D7  00BC               	movwf	??_main
  1754  02D8  083C               	movf	??_main,w
  1755  02D9  00B5               	movwf	sendByte@valore
  1756  02DA  3004               	movlw	4
  1757  02DB  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1758  02E0                     l3270:	
  1759                           
  1760                           ;main.c: 219:                 sendByte(0x06, 0x00, pressione);
  1761  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  1762  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  1763  02E2  01B4               	clrf	sendByte@byte1
  1764  02E3  1283               	bcf	3,5	;RP0=0, select bank2
  1765  02E4  1703               	bsf	3,6	;RP1=1, select bank2
  1766  02E5  085C               	movf	main@pressione^(0+256),w
  1767  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1768  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1769  02E8  00BC               	movwf	??_main
  1770  02E9  083C               	movf	??_main,w
  1771  02EA  00B5               	movwf	sendByte@valore
  1772  02EB  3006               	movlw	6
  1773  02EC  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1774  02F1                     l3272:	
  1775                           
  1776                           ;main.c: 221:                 for (unsigned char i = 0; i < 5; i++)
  1777  02F1  1283               	bcf	3,5	;RP0=0, select bank2
  1778  02F2  1703               	bsf	3,6	;RP1=1, select bank2
  1779  02F3  01E4               	clrf	main@i_439^(0+256)
  1780  02F4                     l3274:	
  1781  02F4  3005               	movlw	5
  1782  02F5  0264               	subwf	main@i_439^(0+256),w
  1783  02F6  1C03               	skipc
  1784  02F7  2AF9               	goto	u3251
  1785  02F8  2AFA               	goto	u3250
  1786  02F9                     u3251:	
  1787  02F9  2AFB               	goto	l3278
  1788  02FA                     u3250:	
  1789  02FA  2B31               	goto	l212
  1790  02FB                     l3278:	
  1791                           
  1792                           ;main.c: 222:                 {;main.c: 223:                     dataFromGateway[i] = 0;
  1793  02FB  0864               	movf	main@i_439^(0+256),w
  1794  02FC  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1795  02FD  0084               	movwf	4
  1796  02FE  1383               	bcf	3,7	;select IRP bank1
  1797  02FF  0180               	clrf	0
  1798  0300                     l3280:	
  1799                           
  1800                           ;main.c: 224:                 }
  1801  0300  3001               	movlw	1
  1802  0301  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0302  1303               	bcf	3,6	;RP1=0, select bank0
  1804  0303  00BC               	movwf	??_main
  1805  0304  083C               	movf	??_main,w
  1806  0305  1283               	bcf	3,5	;RP0=0, select bank2
  1807  0306  1703               	bsf	3,6	;RP1=1, select bank2
  1808  0307  07E4               	addwf	main@i_439^(0+256),f
  1809  0308  2AF4               	goto	l3274
  1810  0309                     l3284:	
  1811                           
  1812                           ;main.c: 228:                 if (timerReadFromGateway >= 4)
  1813  0309  3004               	movlw	4
  1814  030A  0258               	subwf	_timerReadFromGateway,w
  1815  030B  1C03               	skipc
  1816  030C  2B0E               	goto	u3261
  1817  030D  2B0F               	goto	u3260
  1818  030E                     u3261:	
  1819  030E  2B12               	goto	l3288
  1820  030F                     u3260:	
  1821  030F                     l3286:	
  1822                           
  1823                           ;main.c: 229:                 {;main.c: 230:                     readGatewayDone.Bit = 1
      +                          ;
  1824  030F  1463               	bsf	_readGatewayDone,0
  1825                           
  1826                           ;main.c: 231:                     readGatewayDone.Timeout = 1;
  1827  0310  14E3               	bsf	_readGatewayDone,1
  1828                           
  1829                           ;main.c: 232:                     readGateway.Bit = 0;
  1830  0311  1062               	bcf	_readGateway,0
  1831  0312                     l3288:	
  1832                           
  1833                           ;main.c: 235:                 if (dataFromGatewayIndex >= 15)
  1834  0312  300F               	movlw	15
  1835  0313  0259               	subwf	_dataFromGatewayIndex,w
  1836  0314  1C03               	skipc
  1837  0315  2B17               	goto	u3271
  1838  0316  2B18               	goto	u3270
  1839  0317                     u3271:	
  1840  0317  2B31               	goto	l212
  1841  0318                     u3270:	
  1842  0318                     l3290:	
  1843                           
  1844                           ;main.c: 236:                 {;main.c: 237:                     readGatewayDone.Bit = 1
      +                          ;
  1845  0318  1463               	bsf	_readGatewayDone,0
  1846                           
  1847                           ;main.c: 238:                     readGatewayDone.Timeout = 0;
  1848  0319  10E3               	bcf	_readGatewayDone,1
  1849                           
  1850                           ;main.c: 239:                     readGateway.Bit = 0;
  1851  031A  1062               	bcf	_readGateway,0
  1852  031B  2B31               	goto	l212
  1853  031C                     l3294:	
  1854  031C  1683               	bsf	3,5	;RP0=1, select bank1
  1855  031D  1303               	bcf	3,6	;RP1=0, select bank1
  1856  031E  0820               	movf	_dataFromGateway^(0+128),w
  1857  031F  397F               	andlw	127
  1858  0320  1283               	bcf	3,5	;RP0=0, select bank0
  1859  0321  1303               	bcf	3,6	;RP1=0, select bank0
  1860  0322  00BC               	movwf	??_main
  1861  0323  01BD               	clrf	??_main+1
  1862                           
  1863                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1864                           ; Switch size 1, requested type "simple"
  1865                           ; Number of cases is 1, Range of values is 0 to 0
  1866                           ; switch strategies available:
  1867                           ; Name         Instructions Cycles
  1868                           ; simple_byte            4     3 (average)
  1869                           ; direct_byte           11     8 (fixed)
  1870                           ; jumptable            260     6 (fixed)
  1871                           ;	Chosen strategy is simple_byte
  1872  0324  083D               	movf	??_main+1,w
  1873  0325  3A00               	xorlw	0	; case 0
  1874  0326  1903               	skipnz
  1875  0327  2B29               	goto	l3552
  1876  0328  2B09               	goto	l3284
  1877  0329                     l3552:	
  1878                           
  1879                           ; Switch size 1, requested type "simple"
  1880                           ; Number of cases is 2, Range of values is 8 to 10
  1881                           ; switch strategies available:
  1882                           ; Name         Instructions Cycles
  1883                           ; simple_byte            7     4 (average)
  1884                           ; direct_byte           20    11 (fixed)
  1885                           ; jumptable            263     9 (fixed)
  1886                           ;	Chosen strategy is simple_byte
  1887  0329  083C               	movf	??_main,w
  1888  032A  3A08               	xorlw	8	; case 8
  1889  032B  1903               	skipnz
  1890  032C  289B               	goto	l214
  1891  032D  3A02               	xorlw	2	; case 10
  1892  032E  1903               	skipnz
  1893  032F  2A28               	goto	l228
  1894  0330  2B09               	goto	l3284
  1895  0331                     l212:	
  1896                           ;main.c: 243:         }
  1897                           
  1898                           
  1899                           ;main.c: 246:         if (readGatewayDone.Bit)
  1900  0331  1303               	bcf	3,6	;RP1=0, select bank0
  1901  0332  1C63               	btfss	_readGatewayDone,0
  1902  0333  2B35               	goto	u3281
  1903  0334  2B36               	goto	u3280
  1904  0335                     u3281:	
  1905  0335  2BCD               	goto	l234
  1906  0336                     u3280:	
  1907  0336                     l3296:	
  1908                           
  1909                           ;main.c: 247:         {;main.c: 249:             readGateway.Bit = 0;
  1910  0336  1062               	bcf	_readGateway,0
  1911  0337                     l3298:	
  1912                           
  1913                           ;main.c: 250:             dataFromGatewayIndex = 0;
  1914  0337  01D9               	clrf	_dataFromGatewayIndex
  1915  0338                     l3300:	
  1916                           
  1917                           ;main.c: 251:             readGatewayDone.Bit = 0;
  1918  0338  1063               	bcf	_readGatewayDone,0
  1919                           
  1920                           ;main.c: 252:             timerReadFromGateway = 0;
  1921  0339  01D8               	clrf	_timerReadFromGateway
  1922  033A                     l3302:	
  1923                           
  1924                           ;main.c: 255:             if (readGatewayDone.Timeout)
  1925  033A  1CE3               	btfss	_readGatewayDone,1
  1926  033B  2B3D               	goto	u3291
  1927  033C  2B3E               	goto	u3290
  1928  033D                     u3291:	
  1929  033D  2B40               	goto	l3306
  1930  033E                     u3290:	
  1931  033E                     l3304:	
  1932                           
  1933                           ;main.c: 256:             {;main.c: 257:                 readGatewayDone.Timeout = 0;
  1934  033E  10E3               	bcf	_readGatewayDone,1
  1935                           
  1936                           ;main.c: 258:             }
  1937  033F  2BCD               	goto	l234
  1938  0340                     l3306:	
  1939                           
  1940                           ;main.c: 261:             {;main.c: 262:                 bitParita(dataFromGateway);
  1941  0340  30A0               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1942  0341  120A  118A  2724  120A  118A  	fcall	_bitParita
  1943  0346                     l3308:	
  1944                           
  1945                           ;main.c: 263:                 unsigned char tmp;;main.c: 264:                 for (unsig
      +                          ned char i = 0; i < 3; i++)
  1946  0346  1283               	bcf	3,5	;RP0=0, select bank2
  1947  0347  1703               	bsf	3,6	;RP1=1, select bank2
  1948  0348  01E5               	clrf	main@i_442^(0+256)
  1949  0349                     l3310:	
  1950  0349  3003               	movlw	3
  1951  034A  0265               	subwf	main@i_442^(0+256),w
  1952  034B  1C03               	skipc
  1953  034C  2B4E               	goto	u3301
  1954  034D  2B4F               	goto	u3300
  1955  034E                     u3301:	
  1956  034E  2B50               	goto	l3314
  1957  034F                     u3300:	
  1958  034F  2BCD               	goto	l234
  1959  0350                     l3314:	
  1960                           
  1961                           ;main.c: 265:                 {;main.c: 266:                     unsigned char index = i
      +                           * 5;
  1962  0350  3005               	movlw	5
  1963  0351  1283               	bcf	3,5	;RP0=0, select bank0
  1964  0352  1303               	bcf	3,6	;RP1=0, select bank0
  1965  0353  00BC               	movwf	??_main
  1966  0354  083C               	movf	??_main,w
  1967  0355  00A0               	movwf	___bmul@multiplicand
  1968  0356  1283               	bcf	3,5	;RP0=0, select bank2
  1969  0357  1703               	bsf	3,6	;RP1=1, select bank2
  1970  0358  0865               	movf	main@i_442^(0+256),w
  1971  0359  120A  158A  22F3  120A  118A  	fcall	___bmul
  1972  035E  1283               	bcf	3,5	;RP0=0, select bank0
  1973  035F  1303               	bcf	3,6	;RP1=0, select bank0
  1974  0360  00BD               	movwf	??_main+1
  1975  0361  083D               	movf	??_main+1,w
  1976  0362  1283               	bcf	3,5	;RP0=0, select bank2
  1977  0363  1703               	bsf	3,6	;RP1=1, select bank2
  1978  0364  00E0               	movwf	main@index^(0+256)
  1979  0365                     l3316:	
  1980                           
  1981                           ;main.c: 267:                     tmp = dataFromGateway[index];
  1982  0365  0860               	movf	main@index^(0+256),w
  1983  0366  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1984  0367  0084               	movwf	4
  1985  0368  1383               	bcf	3,7	;select IRP bank1
  1986  0369  0800               	movf	0,w
  1987  036A  1283               	bcf	3,5	;RP0=0, select bank0
  1988  036B  1303               	bcf	3,6	;RP1=0, select bank0
  1989  036C  00BC               	movwf	??_main
  1990  036D  083C               	movf	??_main,w
  1991  036E  1283               	bcf	3,5	;RP0=0, select bank2
  1992  036F  1703               	bsf	3,6	;RP1=1, select bank2
  1993  0370  00DE               	movwf	main@tmp^(0+256)
  1994  0371                     l3318:	
  1995                           
  1996                           ;main.c: 268:                     unsigned char semaforoId = (tmp >> 1) & 0x0F;
  1997  0371  085E               	movf	main@tmp^(0+256),w
  1998  0372  1283               	bcf	3,5	;RP0=0, select bank0
  1999  0373  1303               	bcf	3,6	;RP1=0, select bank0
  2000  0374  00BC               	movwf	??_main
  2001  0375  1003               	clrc
  2002  0376  0C3C               	rrf	??_main,w
  2003  0377  390F               	andlw	15
  2004  0378  00BD               	movwf	??_main+1
  2005  0379  083D               	movf	??_main+1,w
  2006  037A  1283               	bcf	3,5	;RP0=0, select bank2
  2007  037B  1703               	bsf	3,6	;RP1=1, select bank2
  2008  037C  00D8               	movwf	main@semaforoId^(0+256)
  2009  037D                     l3320:	
  2010                           
  2011                           ;main.c: 269:                     tmp = dataFromGateway[index];
  2012  037D  0860               	movf	main@index^(0+256),w
  2013  037E  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  2014  037F  0084               	movwf	4
  2015  0380  0800               	movf	0,w
  2016  0381  1283               	bcf	3,5	;RP0=0, select bank0
  2017  0382  1303               	bcf	3,6	;RP1=0, select bank0
  2018  0383  00BC               	movwf	??_main
  2019  0384  083C               	movf	??_main,w
  2020  0385  1283               	bcf	3,5	;RP0=0, select bank2
  2021  0386  1703               	bsf	3,6	;RP1=1, select bank2
  2022  0387  00DE               	movwf	main@tmp^(0+256)
  2023  0388                     l3322:	
  2024                           
  2025                           ;main.c: 270:                     unsigned char colorId = ((tmp >> 5) & 0x03) - 1;
  2026  0388  085E               	movf	main@tmp^(0+256),w
  2027  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2028  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2029  038B  00BC               	movwf	??_main
  2030  038C  3005               	movlw	5
  2031  038D                     u3315:	
  2032  038D  1003               	clrc
  2033  038E  0CBC               	rrf	??_main,f
  2034  038F  3EFF               	addlw	-1
  2035  0390  1D03               	skipz
  2036  0391  2B8D               	goto	u3315
  2037  0392  083C               	movf	??_main,w
  2038  0393  3903               	andlw	3
  2039  0394  3EFF               	addlw	255
  2040  0395  00BD               	movwf	??_main+1
  2041  0396  083D               	movf	??_main+1,w
  2042  0397  1283               	bcf	3,5	;RP0=0, select bank2
  2043  0398  1703               	bsf	3,6	;RP1=1, select bank2
  2044  0399  00D9               	movwf	main@colorId^(0+256)
  2045  039A                     l3324:	
  2046                           
  2047                           ;main.c: 272:                     (*(Semafori[semaforoId])).new_times[colorId] = GetTime
      +                          (index);
  2048  039A  0860               	movf	main@index^(0+256),w
  2049  039B  120A  158A  2448  120A  118A  	fcall	_GetTime
  2050  03A0  1283               	bcf	3,5	;RP0=0, select bank2
  2051  03A1  1703               	bsf	3,6	;RP1=1, select bank2
  2052  03A2  0858               	movf	main@semaforoId^(0+256),w
  2053  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2054  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  2055  03A5  00BC               	movwf	??_main
  2056  03A6  073C               	addwf	??_main,w
  2057  03A7  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2058  03A8  0084               	movwf	4
  2059  03A9  1383               	bcf	3,7	;select IRP bank1
  2060  03AA  0800               	movf	0,w
  2061  03AB  00BD               	movwf	??_main+1
  2062  03AC  0A84               	incf	4,f
  2063  03AD  0800               	movf	0,w
  2064  03AE  00BE               	movwf	??_main+2
  2065  03AF  1283               	bcf	3,5	;RP0=0, select bank2
  2066  03B0  1703               	bsf	3,6	;RP1=1, select bank2
  2067  03B1  0859               	movf	main@colorId^(0+256),w
  2068  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  2069  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  2070  03B4  00BF               	movwf	??_main+3
  2071  03B5  073F               	addwf	??_main+3,w
  2072  03B6  073D               	addwf	??_main+1,w
  2073  03B7  00C0               	movwf	??_main+4
  2074  03B8  083E               	movf	??_main+2,w
  2075  03B9  1803               	skipnc
  2076  03BA  3E01               	addlw	1
  2077  03BB  00C1               	movwf	??_main+5
  2078  03BC  0840               	movf	??_main+4,w
  2079  03BD  0084               	movwf	4
  2080  03BE  1783               	bsf	3,7
  2081  03BF  1C41               	btfss	??_main+5,0
  2082  03C0  1383               	bcf	3,7
  2083  03C1  0820               	movf	?_GetTime,w
  2084  03C2  0080               	movwf	0
  2085  03C3  0A84               	incf	4,f
  2086  03C4  0821               	movf	?_GetTime+1,w
  2087  03C5  0080               	movwf	0
  2088  03C6                     l3326:	
  2089                           
  2090                           ;main.c: 273:                 }
  2091  03C6  3001               	movlw	1
  2092  03C7  00BC               	movwf	??_main
  2093  03C8  083C               	movf	??_main,w
  2094  03C9  1283               	bcf	3,5	;RP0=0, select bank2
  2095  03CA  1703               	bsf	3,6	;RP1=1, select bank2
  2096  03CB  07E5               	addwf	main@i_442^(0+256),f
  2097  03CC  2B49               	goto	l3310
  2098  03CD                     l234:	
  2099                           ;main.c: 275:         }
  2100                           
  2101                           
  2102                           ;main.c: 279:         if (endCiclo.Bit)
  2103  03CD  1283               	bcf	3,5	;RP0=0, select bank2
  2104  03CE  1703               	bsf	3,6	;RP1=1, select bank2
  2105  03CF  1C5D               	btfss	main@endCiclo^(0+256),0
  2106  03D0  2BD2               	goto	u3321
  2107  03D1  2BD3               	goto	u3320
  2108  03D2                     u3321:	
  2109  03D2  2CC4               	goto	l239
  2110  03D3                     u3320:	
  2111  03D3                     l3330:	
  2112                           
  2113                           ;main.c: 280:         {;main.c: 282:             for (unsigned char l = 0; l < 16; l++)
  2114  03D3  01E8               	clrf	main@l^(0+256)
  2115  03D4                     l3332:	
  2116  03D4  3010               	movlw	16
  2117  03D5  0268               	subwf	main@l^(0+256),w
  2118  03D6  1C03               	skipc
  2119  03D7  2BD9               	goto	u3331
  2120  03D8  2BDA               	goto	u3330
  2121  03D9                     u3331:	
  2122  03D9  2BDB               	goto	l3336
  2123  03DA                     u3330:	
  2124  03DA  2C95               	goto	l3354
  2125  03DB                     l3336:	
  2126                           
  2127                           ;main.c: 283:             {;main.c: 284:                 for (unsigned char i = 0; i < 3
      +                          ; i++)
  2128  03DB  01E9               	clrf	main@i_449^(0+256)
  2129  03DC                     l3338:	
  2130  03DC  3003               	movlw	3
  2131  03DD  0269               	subwf	main@i_449^(0+256),w
  2132  03DE  1C03               	skipc
  2133  03DF  2BE1               	goto	u3341
  2134  03E0  2BE2               	goto	u3340
  2135  03E1                     u3341:	
  2136  03E1  2BE3               	goto	l3342
  2137  03E2                     u3340:	
  2138  03E2  2C8C               	goto	l3350
  2139  03E3                     l3342:	
  2140                           
  2141                           ;main.c: 285:                 {;main.c: 286:                     if ((*(Semafori[l])).ti
      +                          mes[i] != (*(Semafori[l])).new_times[i])
  2142  03E3  0868               	movf	main@l^(0+256),w
  2143  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  2144  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  2145  03E6  00BC               	movwf	??_main
  2146  03E7  073C               	addwf	??_main,w
  2147  03E8  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2148  03E9  0084               	movwf	4
  2149  03EA  1383               	bcf	3,7	;select IRP bank1
  2150  03EB  0800               	movf	0,w
  2151  03EC  00BD               	movwf	??_main+1
  2152  03ED  0A84               	incf	4,f
  2153  03EE  0800               	movf	0,w
  2154  03EF  00BE               	movwf	??_main+2
  2155  03F0  1283               	bcf	3,5	;RP0=0, select bank2
  2156  03F1  1703               	bsf	3,6	;RP1=1, select bank2
  2157  03F2  0869               	movf	main@i_449^(0+256),w
  2158  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2159  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  2160  03F5  00BF               	movwf	??_main+3
  2161  03F6  073F               	addwf	??_main+3,w
  2162  03F7  073D               	addwf	??_main+1,w
  2163  03F8  00C0               	movwf	??_main+4
  2164  03F9  083E               	movf	??_main+2,w
  2165  03FA  1803               	skipnc
  2166  03FB  3E01               	addlw	1
  2167  03FC  00C1               	movwf	??_main+5
  2168  03FD  0840               	movf	??_main+4,w
  2169  03FE  0084               	movwf	4
  2170  03FF  1783               	bsf	3,7
  2171  0400  1C41               	btfss	??_main+5,0
  2172  0401  1383               	bcf	3,7
  2173  0402  0800               	movf	0,w
  2174  0403  00C2               	movwf	??_main+6
  2175  0404  0A84               	incf	4,f
  2176  0405  0800               	movf	0,w
  2177  0406  00C3               	movwf	??_main+7
  2178  0407  1283               	bcf	3,5	;RP0=0, select bank2
  2179  0408  1703               	bsf	3,6	;RP1=1, select bank2
  2180  0409  0868               	movf	main@l^(0+256),w
  2181  040A  1283               	bcf	3,5	;RP0=0, select bank0
  2182  040B  1303               	bcf	3,6	;RP1=0, select bank0
  2183  040C  00C4               	movwf	??_main+8
  2184  040D  0744               	addwf	??_main+8,w
  2185  040E  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2186  040F  0084               	movwf	4
  2187  0410  1383               	bcf	3,7	;select IRP bank1
  2188  0411  0800               	movf	0,w
  2189  0412  00C5               	movwf	??_main+9
  2190  0413  0A84               	incf	4,f
  2191  0414  0800               	movf	0,w
  2192  0415  00C6               	movwf	??_main+10
  2193  0416  1283               	bcf	3,5	;RP0=0, select bank2
  2194  0417  1703               	bsf	3,6	;RP1=1, select bank2
  2195  0418  0869               	movf	main@i_449^(0+256),w
  2196  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2197  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2198  041B  00C7               	movwf	??_main+11
  2199  041C  0747               	addwf	??_main+11,w
  2200  041D  3E06               	addlw	6
  2201  041E  0745               	addwf	??_main+9,w
  2202  041F  00C8               	movwf	??_main+12
  2203  0420  0846               	movf	??_main+10,w
  2204  0421  1803               	skipnc
  2205  0422  3E01               	addlw	1
  2206  0423  00C9               	movwf	??_main+13
  2207  0424  0848               	movf	??_main+12,w
  2208  0425  0084               	movwf	4
  2209  0426  1783               	bsf	3,7
  2210  0427  1C49               	btfss	??_main+13,0
  2211  0428  1383               	bcf	3,7
  2212  0429  0800               	movf	0,w
  2213  042A  00CA               	movwf	??_main+14
  2214  042B  0A84               	incf	4,f
  2215  042C  0800               	movf	0,w
  2216  042D  00CB               	movwf	??_main+15
  2217  042E  0843               	movf	??_main+7,w
  2218  042F  064B               	xorwf	??_main+15,w
  2219  0430  1D03               	skipz
  2220  0431  2C34               	goto	u3355
  2221  0432  0842               	movf	??_main+6,w
  2222  0433  064A               	xorwf	??_main+14,w
  2223  0434                     u3355:	
  2224  0434  1903               	skipnz
  2225  0435  2C37               	goto	u3351
  2226  0436  2C38               	goto	u3350
  2227  0437                     u3351:	
  2228  0437  2C85               	goto	l3346
  2229  0438                     u3350:	
  2230  0438                     l3344:	
  2231                           
  2232                           ;main.c: 287:                     {;main.c: 288:                         (*(Semafori[l])
      +                          ).times[i] = (*(Semafori[l])).new_times[i];
  2233  0438  1283               	bcf	3,5	;RP0=0, select bank2
  2234  0439  1703               	bsf	3,6	;RP1=1, select bank2
  2235  043A  0868               	movf	main@l^(0+256),w
  2236  043B  1283               	bcf	3,5	;RP0=0, select bank0
  2237  043C  1303               	bcf	3,6	;RP1=0, select bank0
  2238  043D  00BC               	movwf	??_main
  2239  043E  073C               	addwf	??_main,w
  2240  043F  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2241  0440  0084               	movwf	4
  2242  0441  1383               	bcf	3,7	;select IRP bank1
  2243  0442  0800               	movf	0,w
  2244  0443  00BD               	movwf	??_main+1
  2245  0444  0A84               	incf	4,f
  2246  0445  0800               	movf	0,w
  2247  0446  00BE               	movwf	??_main+2
  2248  0447  1283               	bcf	3,5	;RP0=0, select bank2
  2249  0448  1703               	bsf	3,6	;RP1=1, select bank2
  2250  0449  0869               	movf	main@i_449^(0+256),w
  2251  044A  1283               	bcf	3,5	;RP0=0, select bank0
  2252  044B  1303               	bcf	3,6	;RP1=0, select bank0
  2253  044C  00BF               	movwf	??_main+3
  2254  044D  073F               	addwf	??_main+3,w
  2255  044E  073D               	addwf	??_main+1,w
  2256  044F  00C0               	movwf	??_main+4
  2257  0450  083E               	movf	??_main+2,w
  2258  0451  1803               	skipnc
  2259  0452  3E01               	addlw	1
  2260  0453  00C1               	movwf	??_main+5
  2261  0454  0840               	movf	??_main+4,w
  2262  0455  0084               	movwf	4
  2263  0456  1783               	bsf	3,7
  2264  0457  1C41               	btfss	??_main+5,0
  2265  0458  1383               	bcf	3,7
  2266  0459  0800               	movf	0,w
  2267  045A  00C2               	movwf	??_main+6
  2268  045B  0A84               	incf	4,f
  2269  045C  0800               	movf	0,w
  2270  045D  00C3               	movwf	??_main+7
  2271  045E  1283               	bcf	3,5	;RP0=0, select bank2
  2272  045F  1703               	bsf	3,6	;RP1=1, select bank2
  2273  0460  0868               	movf	main@l^(0+256),w
  2274  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0463  00C4               	movwf	??_main+8
  2277  0464  0744               	addwf	??_main+8,w
  2278  0465  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2279  0466  0084               	movwf	4
  2280  0467  1383               	bcf	3,7	;select IRP bank1
  2281  0468  0800               	movf	0,w
  2282  0469  00C5               	movwf	??_main+9
  2283  046A  0A84               	incf	4,f
  2284  046B  0800               	movf	0,w
  2285  046C  00C6               	movwf	??_main+10
  2286  046D  1283               	bcf	3,5	;RP0=0, select bank2
  2287  046E  1703               	bsf	3,6	;RP1=1, select bank2
  2288  046F  0869               	movf	main@i_449^(0+256),w
  2289  0470  1283               	bcf	3,5	;RP0=0, select bank0
  2290  0471  1303               	bcf	3,6	;RP1=0, select bank0
  2291  0472  00C7               	movwf	??_main+11
  2292  0473  0747               	addwf	??_main+11,w
  2293  0474  3E06               	addlw	6
  2294  0475  0745               	addwf	??_main+9,w
  2295  0476  00C8               	movwf	??_main+12
  2296  0477  0846               	movf	??_main+10,w
  2297  0478  1803               	skipnc
  2298  0479  3E01               	addlw	1
  2299  047A  00C9               	movwf	??_main+13
  2300  047B  0848               	movf	??_main+12,w
  2301  047C  0084               	movwf	4
  2302  047D  1783               	bsf	3,7
  2303  047E  1C49               	btfss	??_main+13,0
  2304  047F  1383               	bcf	3,7
  2305  0480  0842               	movf	??_main+6,w
  2306  0481  0080               	movwf	0
  2307  0482  0A84               	incf	4,f
  2308  0483  0843               	movf	??_main+7,w
  2309  0484  0080               	movwf	0
  2310  0485                     l3346:	
  2311                           
  2312                           ;main.c: 290:                 }
  2313  0485  3001               	movlw	1
  2314  0486  00BC               	movwf	??_main
  2315  0487  083C               	movf	??_main,w
  2316  0488  1283               	bcf	3,5	;RP0=0, select bank2
  2317  0489  1703               	bsf	3,6	;RP1=1, select bank2
  2318  048A  07E9               	addwf	main@i_449^(0+256),f
  2319  048B  2BDC               	goto	l3338
  2320  048C                     l3350:	
  2321                           
  2322                           ;main.c: 291:             }
  2323  048C  3001               	movlw	1
  2324  048D  1283               	bcf	3,5	;RP0=0, select bank0
  2325  048E  1303               	bcf	3,6	;RP1=0, select bank0
  2326  048F  00BC               	movwf	??_main
  2327  0490  083C               	movf	??_main,w
  2328  0491  1283               	bcf	3,5	;RP0=0, select bank2
  2329  0492  1703               	bsf	3,6	;RP1=1, select bank2
  2330  0493  07E8               	addwf	main@l^(0+256),f
  2331  0494  2BD4               	goto	l3332
  2332  0495                     l3354:	
  2333                           
  2334                           ;main.c: 295:             {;main.c: 296:                 n_semafori = (n_semafori + 1) %
      +                           16;
  2335  0495  1303               	bcf	3,6	;RP1=0, select bank0
  2336  0496  0864               	movf	_n_semafori,w
  2337  0497  3E01               	addlw	1
  2338  0498  390F               	andlw	15
  2339  0499  00BC               	movwf	??_main
  2340  049A  083C               	movf	??_main,w
  2341  049B  00E4               	movwf	_n_semafori
  2342  049C                     l3356:	
  2343                           
  2344                           ;main.c: 297:             } while ((*(Semafori[n_semafori])).times[0] == 0 && n_semafori
      +                           > 0);
  2345  049C  0864               	movf	_n_semafori,w
  2346  049D  00BC               	movwf	??_main
  2347  049E  073C               	addwf	??_main,w
  2348  049F  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2349  04A0  0084               	movwf	4
  2350  04A1  1383               	bcf	3,7	;select IRP bank1
  2351  04A2  0800               	movf	0,w
  2352  04A3  00BD               	movwf	??_main+1
  2353  04A4  0A84               	incf	4,f
  2354  04A5  0800               	movf	0,w
  2355  04A6  00BE               	movwf	??_main+2
  2356  04A7  083D               	movf	??_main+1,w
  2357  04A8  3E06               	addlw	6
  2358  04A9  00BF               	movwf	??_main+3
  2359  04AA  083E               	movf	??_main+2,w
  2360  04AB  1803               	skipnc
  2361  04AC  3E01               	addlw	1
  2362  04AD  3E00               	addlw	0
  2363  04AE  00C0               	movwf	??_main+4
  2364  04AF  083F               	movf	??_main+3,w
  2365  04B0  0084               	movwf	4
  2366  04B1  1783               	bsf	3,7
  2367  04B2  1C40               	btfss	??_main+4,0
  2368  04B3  1383               	bcf	3,7
  2369  04B4  0800               	movf	0,w
  2370  04B5  00C1               	movwf	??_main+5
  2371  04B6  0A84               	incf	4,f
  2372  04B7  0800               	movf	0,w
  2373  04B8  00C2               	movwf	??_main+6
  2374  04B9  0841               	movf	??_main+5,w
  2375  04BA  0442               	iorwf	??_main+6,w
  2376  04BB  1D03               	btfss	3,2
  2377  04BC  2CBE               	goto	u3361
  2378  04BD  2CBF               	goto	u3360
  2379  04BE                     u3361:	
  2380  04BE  2CC4               	goto	l239
  2381  04BF                     u3360:	
  2382  04BF                     l3358:	
  2383  04BF  0864               	movf	_n_semafori,w
  2384  04C0  1D03               	btfss	3,2
  2385  04C1  2CC3               	goto	u3371
  2386  04C2  2CC4               	goto	u3370
  2387  04C3                     u3371:	
  2388  04C3  2C95               	goto	l3354
  2389  04C4                     u3370:	
  2390  04C4                     l239:	
  2391                           ;main.c: 298:         }
  2392                           
  2393                           
  2394                           ;main.c: 302:         if (secondPassed.Bit && cycled.Bit)
  2395  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  2396  04C5  1C61               	btfss	_secondPassed,0
  2397  04C6  2CC8               	goto	u3381
  2398  04C7  2CC9               	goto	u3380
  2399  04C8                     u3381:	
  2400  04C8  2D8E               	goto	l3380
  2401  04C9                     u3380:	
  2402  04C9                     l3360:	
  2403  04C9  1C60               	btfss	_cycled,0
  2404  04CA  2CCC               	goto	u3391
  2405  04CB  2CCD               	goto	u3390
  2406  04CC                     u3391:	
  2407  04CC  2D8E               	goto	l3380
  2408  04CD                     u3390:	
  2409  04CD                     l3362:	
  2410                           
  2411                           ;main.c: 303:         {;main.c: 304:             time++;
  2412  04CD  3001               	movlw	1
  2413  04CE  1283               	bcf	3,5	;RP0=0, select bank2
  2414  04CF  1703               	bsf	3,6	;RP1=1, select bank2
  2415  04D0  07E1               	addwf	main@time^(0+256),f
  2416  04D1  1803               	skipnc
  2417  04D2  0AE2               	incf	(main@time+1)^(0+256),f
  2418  04D3  3000               	movlw	0
  2419  04D4  07E2               	addwf	(main@time+1)^(0+256),f
  2420  04D5                     l3364:	
  2421                           
  2422                           ;main.c: 305:             endCiclo.Bit = 0;
  2423  04D5  105D               	bcf	main@endCiclo^(0+256),0
  2424  04D6                     l3366:	
  2425                           
  2426                           ;main.c: 307:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  2427  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2428  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2429  04D8  0864               	movf	_n_semafori,w
  2430  04D9  00BC               	movwf	??_main
  2431  04DA  073C               	addwf	??_main,w
  2432  04DB  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2433  04DC  0084               	movwf	4
  2434  04DD  1383               	bcf	3,7	;select IRP bank1
  2435  04DE  0800               	movf	0,w
  2436  04DF  00BD               	movwf	??_main+1
  2437  04E0  0A84               	incf	4,f
  2438  04E1  0800               	movf	0,w
  2439  04E2  00BE               	movwf	??_main+2
  2440  04E3  1283               	bcf	3,5	;RP0=0, select bank2
  2441  04E4  1703               	bsf	3,6	;RP1=1, select bank2
  2442  04E5  085F               	movf	main@lux_select^(0+256),w
  2443  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  2444  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  2445  04E8  00BF               	movwf	??_main+3
  2446  04E9  073F               	addwf	??_main+3,w
  2447  04EA  3E06               	addlw	6
  2448  04EB  073D               	addwf	??_main+1,w
  2449  04EC  00C0               	movwf	??_main+4
  2450  04ED  083E               	movf	??_main+2,w
  2451  04EE  1803               	skipnc
  2452  04EF  3E01               	addlw	1
  2453  04F0  00C1               	movwf	??_main+5
  2454  04F1  0840               	movf	??_main+4,w
  2455  04F2  0084               	movwf	4
  2456  04F3  1783               	bsf	3,7
  2457  04F4  1C41               	btfss	??_main+5,0
  2458  04F5  1383               	bcf	3,7
  2459  04F6  0800               	movf	0,w
  2460  04F7  00C2               	movwf	??_main+6
  2461  04F8  0A84               	incf	4,f
  2462  04F9  0800               	movf	0,w
  2463  04FA  00C3               	movwf	??_main+7
  2464  04FB  1283               	bcf	3,5	;RP0=0, select bank2
  2465  04FC  1703               	bsf	3,6	;RP1=1, select bank2
  2466  04FD  0861               	movf	main@time^(0+256),w
  2467  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  2468  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  2469  0500  0242               	subwf	??_main+6,w
  2470  0501  00C4               	movwf	??_main+8
  2471  0502  1283               	bcf	3,5	;RP0=0, select bank2
  2472  0503  1703               	bsf	3,6	;RP1=1, select bank2
  2473  0504  0862               	movf	(main@time+1)^(0+256),w
  2474  0505  1C03               	skipc
  2475  0506  0A62               	incf	(main@time+1)^(0+256),w
  2476  0507  1283               	bcf	3,5	;RP0=0, select bank0
  2477  0508  1303               	bcf	3,6	;RP1=0, select bank0
  2478  0509  0243               	subwf	??_main+7,w
  2479  050A  00C5               	movwf	??_main+9
  2480  050B  1FC5               	btfss	??_main+9,7
  2481  050C  2D0E               	goto	u3401
  2482  050D  2D0F               	goto	u3400
  2483  050E                     u3401:	
  2484  050E  2D16               	goto	l3372
  2485  050F                     u3400:	
  2486  050F                     l3368:	
  2487                           
  2488                           ;main.c: 308:             {;main.c: 309:                 endCiclo.Bit = 1;
  2489  050F  1283               	bcf	3,5	;RP0=0, select bank2
  2490  0510  1703               	bsf	3,6	;RP1=1, select bank2
  2491  0511  145D               	bsf	main@endCiclo^(0+256),0
  2492  0512                     l3370:	
  2493                           
  2494                           ;main.c: 310:                 time = 1;
  2495  0512  3001               	movlw	1
  2496  0513  00E1               	movwf	main@time^(0+256)
  2497  0514  3000               	movlw	0
  2498  0515  00E2               	movwf	(main@time^(0+256)+1)
  2499  0516                     l3372:	
  2500                           
  2501                           ;main.c: 313:             if (lux_select == 2 && time >= (*Semafori[n_semafori]).times[2
      +                          ])
  2502  0516  3002               	movlw	2
  2503  0517  1283               	bcf	3,5	;RP0=0, select bank2
  2504  0518  1703               	bsf	3,6	;RP1=1, select bank2
  2505  0519  065F               	xorwf	main@lux_select^(0+256),w
  2506  051A  1D03               	btfss	3,2
  2507  051B  2D1D               	goto	u3411
  2508  051C  2D1E               	goto	u3410
  2509  051D                     u3411:	
  2510  051D  2D54               	goto	l3378
  2511  051E                     u3410:	
  2512  051E                     l3374:	
  2513  051E  1283               	bcf	3,5	;RP0=0, select bank0
  2514  051F  1303               	bcf	3,6	;RP1=0, select bank0
  2515  0520  0864               	movf	_n_semafori,w
  2516  0521  00BC               	movwf	??_main
  2517  0522  073C               	addwf	??_main,w
  2518  0523  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2519  0524  0084               	movwf	4
  2520  0525  1383               	bcf	3,7	;select IRP bank1
  2521  0526  0800               	movf	0,w
  2522  0527  00BD               	movwf	??_main+1
  2523  0528  0A84               	incf	4,f
  2524  0529  0800               	movf	0,w
  2525  052A  00BE               	movwf	??_main+2
  2526  052B  083D               	movf	??_main+1,w
  2527  052C  3E0A               	addlw	10
  2528  052D  00BF               	movwf	??_main+3
  2529  052E  083E               	movf	??_main+2,w
  2530  052F  1803               	skipnc
  2531  0530  3E01               	addlw	1
  2532  0531  3E00               	addlw	0
  2533  0532  00C0               	movwf	??_main+4
  2534  0533  083F               	movf	??_main+3,w
  2535  0534  0084               	movwf	4
  2536  0535  1783               	bsf	3,7
  2537  0536  1C40               	btfss	??_main+4,0
  2538  0537  1383               	bcf	3,7
  2539  0538  0800               	movf	0,w
  2540  0539  00C1               	movwf	??_main+5
  2541  053A  0A84               	incf	4,f
  2542  053B  0800               	movf	0,w
  2543  053C  00C2               	movwf	??_main+6
  2544  053D  1283               	bcf	3,5	;RP0=0, select bank2
  2545  053E  1703               	bsf	3,6	;RP1=1, select bank2
  2546  053F  0862               	movf	(main@time+1)^(0+256),w
  2547  0540  3A80               	xorlw	128
  2548  0541  1283               	bcf	3,5	;RP0=0, select bank0
  2549  0542  1303               	bcf	3,6	;RP1=0, select bank0
  2550  0543  00C3               	movwf	??_main+7
  2551  0544  0842               	movf	??_main+6,w
  2552  0545  3A80               	xorlw	128
  2553  0546  0243               	subwf	??_main+7,w
  2554  0547  1D03               	skipz
  2555  0548  2D4D               	goto	u3425
  2556  0549  0841               	movf	??_main+5,w
  2557  054A  1283               	bcf	3,5	;RP0=0, select bank2
  2558  054B  1703               	bsf	3,6	;RP1=1, select bank2
  2559  054C  0261               	subwf	main@time^(0+256),w
  2560  054D                     u3425:	
  2561  054D  1C03               	skipc
  2562  054E  2D50               	goto	u3421
  2563  054F  2D51               	goto	u3420
  2564  0550                     u3421:	
  2565  0550  2D54               	goto	l3378
  2566  0551                     u3420:	
  2567  0551                     l3376:	
  2568                           
  2569                           ;main.c: 314:             {;main.c: 315:                 endCiclo.Bit = 1;
  2570  0551  1283               	bcf	3,5	;RP0=0, select bank2
  2571  0552  1703               	bsf	3,6	;RP1=1, select bank2
  2572  0553  145D               	bsf	main@endCiclo^(0+256),0
  2573  0554                     l3378:	
  2574                           
  2575                           ;main.c: 318:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  2576  0554  1283               	bcf	3,5	;RP0=0, select bank0
  2577  0555  1303               	bcf	3,6	;RP1=0, select bank0
  2578  0556  0864               	movf	_n_semafori,w
  2579  0557  00BC               	movwf	??_main
  2580  0558  073C               	addwf	??_main,w
  2581  0559  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2582  055A  0084               	movwf	4
  2583  055B  1383               	bcf	3,7	;select IRP bank1
  2584  055C  0800               	movf	0,w
  2585  055D  00BD               	movwf	??_main+1
  2586  055E  0A84               	incf	4,f
  2587  055F  0800               	movf	0,w
  2588  0560  00BE               	movwf	??_main+2
  2589  0561  1283               	bcf	3,5	;RP0=0, select bank2
  2590  0562  1703               	bsf	3,6	;RP1=1, select bank2
  2591  0563  085F               	movf	main@lux_select^(0+256),w
  2592  0564  1283               	bcf	3,5	;RP0=0, select bank0
  2593  0565  1303               	bcf	3,6	;RP1=0, select bank0
  2594  0566  00BF               	movwf	??_main+3
  2595  0567  073F               	addwf	??_main+3,w
  2596  0568  3E06               	addlw	6
  2597  0569  073D               	addwf	??_main+1,w
  2598  056A  00C0               	movwf	??_main+4
  2599  056B  083E               	movf	??_main+2,w
  2600  056C  1803               	skipnc
  2601  056D  3E01               	addlw	1
  2602  056E  00C1               	movwf	??_main+5
  2603  056F  0840               	movf	??_main+4,w
  2604  0570  0084               	movwf	4
  2605  0571  1783               	bsf	3,7
  2606  0572  1C41               	btfss	??_main+5,0
  2607  0573  1383               	bcf	3,7
  2608  0574  0800               	movf	0,w
  2609  0575  00C2               	movwf	??_main+6
  2610  0576  0A84               	incf	4,f
  2611  0577  0800               	movf	0,w
  2612  0578  00C3               	movwf	??_main+7
  2613  0579  1283               	bcf	3,5	;RP0=0, select bank2
  2614  057A  1703               	bsf	3,6	;RP1=1, select bank2
  2615  057B  0861               	movf	main@time^(0+256),w
  2616  057C  1283               	bcf	3,5	;RP0=0, select bank0
  2617  057D  1303               	bcf	3,6	;RP1=0, select bank0
  2618  057E  0242               	subwf	??_main+6,w
  2619  057F  00B0               	movwf	GetDigits@Time
  2620  0580  1283               	bcf	3,5	;RP0=0, select bank2
  2621  0581  1703               	bsf	3,6	;RP1=1, select bank2
  2622  0582  0862               	movf	(main@time+1)^(0+256),w
  2623  0583  1C03               	skipc
  2624  0584  0A62               	incf	(main@time+1)^(0+256),w
  2625  0585  1283               	bcf	3,5	;RP0=0, select bank0
  2626  0586  1303               	bcf	3,6	;RP1=0, select bank0
  2627  0587  0243               	subwf	??_main+7,w
  2628  0588  00B1               	movwf	GetDigits@Time+1
  2629  0589  120A  158A  25A6  120A  118A  	fcall	_GetDigits
  2630  058E                     l3380:	
  2631                           
  2632                           ;main.c: 322:         if (disp != old_disp)
  2633  058E  1283               	bcf	3,5	;RP0=0, select bank0
  2634  058F  1303               	bcf	3,6	;RP1=0, select bank0
  2635  0590  085B               	movf	_disp,w
  2636  0591  065C               	xorwf	_old_disp,w
  2637  0592  1903               	skipnz
  2638  0593  2D95               	goto	u3431
  2639  0594  2D96               	goto	u3430
  2640  0595                     u3431:	
  2641  0595  2E12               	goto	l3402
  2642  0596                     u3430:	
  2643  0596                     l3382:	
  2644                           
  2645                           ;main.c: 323:         {;main.c: 324:             old_disp = disp;
  2646  0596  085B               	movf	_disp,w
  2647  0597  00BC               	movwf	??_main
  2648  0598  083C               	movf	??_main,w
  2649  0599  00DC               	movwf	_old_disp
  2650                           
  2651                           ;main.c: 325:             switch (disp)
  2652  059A  2DFC               	goto	l3400
  2653  059B                     l3384:	
  2654                           
  2655                           ;main.c: 328:                 if (centinaia > 0)
  2656  059B  085D               	movf	_centinaia,w
  2657  059C  1903               	btfsc	3,2
  2658  059D  2D9F               	goto	u3441
  2659  059E  2DA0               	goto	u3440
  2660  059F                     u3441:	
  2661  059F  2E12               	goto	l3402
  2662  05A0                     u3440:	
  2663  05A0                     l3386:	
  2664                           
  2665                           ;main.c: 329:                 {;main.c: 330:                     SetDisplay(1, 0, 0, dis
      +                          play[centinaia]);
  2666  05A0  01A0               	clrf	SetDisplay@d2
  2667  05A1  01A1               	clrf	SetDisplay@d3
  2668  05A2  085D               	movf	_centinaia,w
  2669  05A3  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2670  05A4  0084               	movwf	4
  2671  05A5  120A  158A  2000  120A  118A  	fcall	stringdir
  2672  05AA  00BC               	movwf	??_main
  2673  05AB  083C               	movf	??_main,w
  2674  05AC  00A2               	movwf	SetDisplay@value
  2675  05AD  3001               	movlw	1
  2676  05AE  120A  158A  22DE  120A  118A  	fcall	_SetDisplay
  2677  05B3  2E12               	goto	l3402
  2678  05B4                     l3388:	
  2679                           
  2680                           ;main.c: 334:                 if (decine > 0 || centinaia > 0)
  2681  05B4  085E               	movf	_decine,w
  2682  05B5  1D03               	btfss	3,2
  2683  05B6  2DB8               	goto	u3451
  2684  05B7  2DB9               	goto	u3450
  2685  05B8                     u3451:	
  2686  05B8  2DBE               	goto	l3392
  2687  05B9                     u3450:	
  2688  05B9                     l3390:	
  2689  05B9  085D               	movf	_centinaia,w
  2690  05BA  1903               	btfsc	3,2
  2691  05BB  2DBD               	goto	u3461
  2692  05BC  2DBE               	goto	u3460
  2693  05BD                     u3461:	
  2694  05BD  2E12               	goto	l3402
  2695  05BE                     u3460:	
  2696  05BE                     l3392:	
  2697                           
  2698                           ;main.c: 335:                 {;main.c: 336:                     SetDisplay(0, 1, 0, dis
      +                          play[decine]);
  2699  05BE  01A0               	clrf	SetDisplay@d2
  2700  05BF  0AA0               	incf	SetDisplay@d2,f
  2701  05C0  01A1               	clrf	SetDisplay@d3
  2702  05C1  085E               	movf	_decine,w
  2703  05C2  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2704  05C3  0084               	movwf	4
  2705  05C4  120A  158A  2000  120A  118A  	fcall	stringdir
  2706  05C9  00BC               	movwf	??_main
  2707  05CA  083C               	movf	??_main,w
  2708  05CB  00A2               	movwf	SetDisplay@value
  2709  05CC  3000               	movlw	0
  2710  05CD  120A  158A  22DE  120A  118A  	fcall	_SetDisplay
  2711  05D2  2E12               	goto	l3402
  2712  05D3                     l3394:	
  2713                           
  2714                           ;main.c: 340:                 SetDisplay(0, 0, 1, display[unita]);
  2715  05D3  01A0               	clrf	SetDisplay@d2
  2716  05D4  01A1               	clrf	SetDisplay@d3
  2717  05D5  0AA1               	incf	SetDisplay@d3,f
  2718  05D6  085F               	movf	_unita,w
  2719  05D7  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2720  05D8  0084               	movwf	4
  2721  05D9  120A  158A  2000  120A  118A  	fcall	stringdir
  2722  05DE  00BC               	movwf	??_main
  2723  05DF  083C               	movf	??_main,w
  2724  05E0  00A2               	movwf	SetDisplay@value
  2725  05E1  3000               	movlw	0
  2726  05E2  120A  158A  22DE  120A  118A  	fcall	_SetDisplay
  2727                           
  2728                           ;main.c: 341:                 break;
  2729  05E7  2E12               	goto	l3402
  2730  05E8                     l3396:	
  2731                           
  2732                           ;main.c: 343:                 SetDisplay(1, 0, 0, display[n_semafori]);
  2733  05E8  01A0               	clrf	SetDisplay@d2
  2734  05E9  01A1               	clrf	SetDisplay@d3
  2735  05EA  0864               	movf	_n_semafori,w
  2736  05EB  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2737  05EC  0084               	movwf	4
  2738  05ED  120A  158A  2000  120A  118A  	fcall	stringdir
  2739  05F2  00BC               	movwf	??_main
  2740  05F3  083C               	movf	??_main,w
  2741  05F4  00A2               	movwf	SetDisplay@value
  2742  05F5  3001               	movlw	1
  2743  05F6  120A  158A  22DE  120A  118A  	fcall	_SetDisplay
  2744                           
  2745                           ;main.c: 344:                 break;
  2746  05FB  2E12               	goto	l3402
  2747  05FC                     l3400:	
  2748  05FC  085B               	movf	_disp,w
  2749  05FD  00BC               	movwf	??_main
  2750  05FE  01BD               	clrf	??_main+1
  2751                           
  2752                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2753                           ; Switch size 1, requested type "simple"
  2754                           ; Number of cases is 1, Range of values is 0 to 0
  2755                           ; switch strategies available:
  2756                           ; Name         Instructions Cycles
  2757                           ; simple_byte            4     3 (average)
  2758                           ; direct_byte           11     8 (fixed)
  2759                           ; jumptable            260     6 (fixed)
  2760                           ;	Chosen strategy is simple_byte
  2761  05FF  083D               	movf	??_main+1,w
  2762  0600  3A00               	xorlw	0	; case 0
  2763  0601  1903               	skipnz
  2764  0602  2E04               	goto	l3554
  2765  0603  2E12               	goto	l3402
  2766  0604                     l3554:	
  2767                           
  2768                           ; Switch size 1, requested type "simple"
  2769                           ; Number of cases is 4, Range of values is 0 to 3
  2770                           ; switch strategies available:
  2771                           ; Name         Instructions Cycles
  2772                           ; simple_byte           13     7 (average)
  2773                           ; direct_byte           20     8 (fixed)
  2774                           ; jumptable            260     6 (fixed)
  2775                           ;	Chosen strategy is simple_byte
  2776  0604  083C               	movf	??_main,w
  2777  0605  3A00               	xorlw	0	; case 0
  2778  0606  1903               	skipnz
  2779  0607  2D9B               	goto	l3384
  2780  0608  3A01               	xorlw	1	; case 1
  2781  0609  1903               	skipnz
  2782  060A  2DB4               	goto	l3388
  2783  060B  3A03               	xorlw	3	; case 2
  2784  060C  1903               	skipnz
  2785  060D  2DD3               	goto	l3394
  2786  060E  3A01               	xorlw	1	; case 3
  2787  060F  1903               	skipnz
  2788  0610  2DE8               	goto	l3396
  2789  0611  2E12               	goto	l3402
  2790  0612                     l3402:	
  2791                           
  2792                           ;main.c: 347:         disp = (disp + 1) % 3;
  2793  0612  3003               	movlw	3
  2794  0613  1283               	bcf	3,5	;RP0=0, select bank0
  2795  0614  1303               	bcf	3,6	;RP1=0, select bank0
  2796  0615  00A0               	movwf	___awmod@divisor
  2797  0616  3000               	movlw	0
  2798  0617  00A1               	movwf	___awmod@divisor+1
  2799  0618  085B               	movf	_disp,w
  2800  0619  3E01               	addlw	1
  2801  061A  00A2               	movwf	___awmod@dividend
  2802  061B  3000               	movlw	0
  2803  061C  1803               	skipnc
  2804  061D  3001               	movlw	1
  2805  061E  00A3               	movwf	___awmod@dividend+1
  2806  061F  120A  158A  24E2  120A  118A  	fcall	___awmod
  2807  0624  1283               	bcf	3,5	;RP0=0, select bank0
  2808  0625  1303               	bcf	3,6	;RP1=0, select bank0
  2809  0626  0820               	movf	?___awmod,w
  2810  0627  00BC               	movwf	??_main
  2811  0628  083C               	movf	??_main,w
  2812  0629  00DB               	movwf	_disp
  2813  062A                     l3404:	
  2814                           
  2815                           ;main.c: 353:         if (secondPassed.Bit && cycled.Bit)
  2816  062A  1C61               	btfss	_secondPassed,0
  2817  062B  2E2D               	goto	u3471
  2818  062C  2E2E               	goto	u3470
  2819  062D                     u3471:	
  2820  062D  2E34               	goto	l263
  2821  062E                     u3470:	
  2822  062E                     l3406:	
  2823  062E  1C60               	btfss	_cycled,0
  2824  062F  2E31               	goto	u3481
  2825  0630  2E32               	goto	u3480
  2826  0631                     u3481:	
  2827  0631  2E34               	goto	l263
  2828  0632                     u3480:	
  2829  0632                     l3408:	
  2830                           
  2831                           ;main.c: 354:         {;main.c: 355:             secondPassed.Bit = 0;
  2832  0632  1061               	bcf	_secondPassed,0
  2833                           
  2834                           ;main.c: 356:             cycled.Bit = 0;
  2835  0633  1060               	bcf	_cycled,0
  2836  0634                     l263:	
  2837                           ;main.c: 357:         }
  2838                           
  2839                           
  2840                           ;main.c: 359:         if (secondPassed.Bit && !cycled.Bit)
  2841  0634  1C61               	btfss	_secondPassed,0
  2842  0635  2E37               	goto	u3491
  2843  0636  2E38               	goto	u3490
  2844  0637                     u3491:	
  2845  0637  2895               	goto	l3214
  2846  0638                     u3490:	
  2847  0638                     l3410:	
  2848  0638  1860               	btfsc	_cycled,0
  2849  0639  2E3B               	goto	u3501
  2850  063A  2E3C               	goto	u3500
  2851  063B                     u3501:	
  2852  063B  2895               	goto	l3214
  2853  063C                     u3500:	
  2854  063C                     l3412:	
  2855                           
  2856                           ;main.c: 360:         {;main.c: 361:             cycled.Bit = 1;
  2857  063C  1460               	bsf	_cycled,0
  2858  063D  2895               	goto	l3214
  2859  063E  120A  118A  280E   	ljmp	start
  2860  0641                     __end_of_main:	
  2861                           
  2862                           	psect	text1
  2863  0BA8                     __ptext1:	
  2864 ;; *************** function _sendByte *****************
  2865 ;; Defined at:
  2866 ;;		line 425 in file "main.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  byte0           1    wreg     unsigned char 
  2869 ;;  byte1           1   20[BANK0 ] unsigned char 
  2870 ;;  valore          1   21[BANK0 ] unsigned char 
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  byte0           1   25[BANK0 ] unsigned char 
  2873 ;;  i               1   27[BANK0 ] unsigned char 
  2874 ;;  txByte          1   26[BANK0 ] PTR unsigned char 
  2875 ;;		 -> BuildByte@txByte(5), 
  2876 ;; Return value:  Size  Location     Type
  2877 ;;                  1    wreg      void 
  2878 ;; Registers used:
  2879 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2885 ;;      Params:         0       2       0       0       0
  2886 ;;      Locals:         0       3       0       0       0
  2887 ;;      Temps:          0       3       0       0       0
  2888 ;;      Totals:         0       8       0       0       0
  2889 ;;Total ram usage:        8 bytes
  2890 ;; Hardware stack levels used:    1
  2891 ;; Hardware stack levels required when called:    3
  2892 ;; This function calls:
  2893 ;;		_BuildByte
  2894 ;;		_UART_TxChar
  2895 ;; This function is called by:
  2896 ;;		_main
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           
  2901                           ;psect for function _sendByte
  2902  0BA8                     _sendByte:	
  2903                           
  2904                           ;incstack = 0
  2905                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2906                           ;sendByte@byte0 stored from wreg
  2907  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  2908  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  2909  0BAA  00B9               	movwf	sendByte@byte0
  2910  0BAB                     l3098:	
  2911                           
  2912                           ;main.c: 425: void sendByte(char byte0, char byte1, char valore);main.c: 426: {;main.c: 
      +                          427:     char *txByte;;main.c: 428:     txByte = BuildByte(byte0, byte1, valore);
  2913  0BAB  0834               	movf	sendByte@byte1,w
  2914  0BAC  00B6               	movwf	??_sendByte
  2915  0BAD  0836               	movf	??_sendByte,w
  2916  0BAE  00A0               	movwf	BuildByte@byte1
  2917  0BAF  0835               	movf	sendByte@valore,w
  2918  0BB0  00B7               	movwf	??_sendByte+1
  2919  0BB1  0837               	movf	??_sendByte+1,w
  2920  0BB2  00A1               	movwf	BuildByte@valore
  2921  0BB3  0839               	movf	sendByte@byte0,w
  2922  0BB4  120A  158A  2738  120A  158A  	fcall	_BuildByte
  2923  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
  2924  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
  2925  0BBB  00B8               	movwf	??_sendByte+2
  2926  0BBC  0838               	movf	??_sendByte+2,w
  2927  0BBD  00BA               	movwf	sendByte@txByte
  2928  0BBE                     l3100:	
  2929                           
  2930                           ;main.c: 430:     for (unsigned char i = 0; i < 5; i++)
  2931  0BBE  01BB               	clrf	sendByte@i
  2932  0BBF                     l3106:	
  2933                           
  2934                           ;main.c: 431:     {;main.c: 432:         UART_TxChar(*(txByte++));
  2935  0BBF  083A               	movf	sendByte@txByte,w
  2936  0BC0  0084               	movwf	4
  2937  0BC1  1383               	bcf	3,7	;select IRP bank0
  2938  0BC2  0800               	movf	0,w
  2939  0BC3  120A  158A  22C0  120A  158A  	fcall	_UART_TxChar
  2940  0BC8                     l3108:	
  2941  0BC8  3001               	movlw	1
  2942  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  2943  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  2944  0BCB  00B6               	movwf	??_sendByte
  2945  0BCC  0836               	movf	??_sendByte,w
  2946  0BCD  07BA               	addwf	sendByte@txByte,f
  2947  0BCE                     l3110:	
  2948                           
  2949                           ;main.c: 433:     }
  2950  0BCE  3001               	movlw	1
  2951  0BCF  00B6               	movwf	??_sendByte
  2952  0BD0  0836               	movf	??_sendByte,w
  2953  0BD1  07BB               	addwf	sendByte@i,f
  2954  0BD2                     l3112:	
  2955  0BD2  3005               	movlw	5
  2956  0BD3  023B               	subwf	sendByte@i,w
  2957  0BD4  1C03               	skipc
  2958  0BD5  2BD7               	goto	u3141
  2959  0BD6  2BD8               	goto	u3140
  2960  0BD7                     u3141:	
  2961  0BD7  2BBF               	goto	l3106
  2962  0BD8                     u3140:	
  2963  0BD8                     l302:	
  2964  0BD8  0008               	return
  2965  0BD9                     __end_of_sendByte:	
  2966                           
  2967                           	psect	text2
  2968  0AC0                     __ptext2:	
  2969 ;; *************** function _UART_TxChar *****************
  2970 ;; Defined at:
  2971 ;;		line 400 in file "main.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  ch              1    wreg     unsigned char 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  ch              1    0[BANK0 ] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2985 ;;      Params:         0       0       0       0       0
  2986 ;;      Locals:         0       1       0       0       0
  2987 ;;      Temps:          0       0       0       0       0
  2988 ;;      Totals:         0       1       0       0       0
  2989 ;;Total ram usage:        1 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    2
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_sendByte
  2996 ;;		_UART_Write_Text
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           
  3001                           ;psect for function _UART_TxChar
  3002  0AC0                     _UART_TxChar:	
  3003                           
  3004                           ;incstack = 0
  3005                           ; Regs used in _UART_TxChar: [wreg]
  3006                           ;UART_TxChar@ch stored from wreg
  3007  0AC0  1283               	bcf	3,5	;RP0=0, select bank0
  3008  0AC1  1303               	bcf	3,6	;RP1=0, select bank0
  3009  0AC2  00A0               	movwf	UART_TxChar@ch
  3010  0AC3                     l2850:	
  3011  0AC3                     l282:	
  3012                           ;main.c: 403:         ;
  3013                           
  3014                           
  3015                           ;main.c: 402:     while (!TXIF)
  3016  0AC3  1E0C               	btfss	12,4	;volatile
  3017  0AC4  2AC6               	goto	u2681
  3018  0AC5  2AC7               	goto	u2680
  3019  0AC6                     u2681:	
  3020  0AC6  2AC3               	goto	l282
  3021  0AC7                     u2680:	
  3022  0AC7                     l284:	
  3023                           
  3024                           ;main.c: 404:     TXIF = 0;
  3025  0AC7  120C               	bcf	12,4	;volatile
  3026  0AC8                     l2852:	
  3027                           
  3028                           ;main.c: 405:     TXREG = ch;
  3029  0AC8  0820               	movf	UART_TxChar@ch,w
  3030  0AC9  0099               	movwf	25	;volatile
  3031  0ACA                     l285:	
  3032  0ACA  0008               	return
  3033  0ACB                     __end_of_UART_TxChar:	
  3034                           
  3035                           	psect	text3
  3036  0F38                     __ptext3:	
  3037 ;; *************** function _BuildByte *****************
  3038 ;; Defined at:
  3039 ;;		line 2 in file "./CustomLib/Serial.h"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  byte0           1    wreg     unsigned char 
  3042 ;;  byte1           1    0[BANK0 ] unsigned char 
  3043 ;;  valore          1    1[BANK0 ] unsigned char 
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  byte0           1    4[BANK0 ] unsigned char 
  3046 ;;  y               2   14[BANK0 ] int 
  3047 ;;  y               2   12[BANK0 ] int 
  3048 ;;  i               2   18[BANK0 ] int 
  3049 ;;  i               2   16[BANK0 ] int 
  3050 ;;  txByte          5    5[BANK0 ] unsigned char [5]
  3051 ;;  sommaColumn     1   11[BANK0 ] unsigned char 
  3052 ;;  sommaRow        1   10[BANK0 ] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      PTR unsigned char 
  3055 ;; Registers used:
  3056 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3062 ;;      Params:         0       2       0       0       0
  3063 ;;      Locals:         0      16       0       0       0
  3064 ;;      Temps:          0       2       0       0       0
  3065 ;;      Totals:         0      20       0       0       0
  3066 ;;Total ram usage:       20 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    2
  3069 ;; This function calls:
  3070 ;;		Nothing
  3071 ;; This function is called by:
  3072 ;;		_sendByte
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           
  3077                           ;psect for function _BuildByte
  3078  0F38                     _BuildByte:	
  3079                           
  3080                           ;incstack = 0
  3081                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  3082                           ;BuildByte@byte0 stored from wreg
  3083  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  3084  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  3085  0F3A  00A4               	movwf	BuildByte@byte0
  3086  0F3B                     l2782:	
  3087                           
  3088                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  3089  0F3B  0824               	movf	BuildByte@byte0,w
  3090  0F3C  397F               	andlw	127
  3091  0F3D  00A2               	movwf	??_BuildByte
  3092  0F3E  0822               	movf	??_BuildByte,w
  3093  0F3F  00A5               	movwf	BuildByte@txByte
  3094                           
  3095                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  3096  0F40  0820               	movf	BuildByte@byte1,w
  3097  0F41  397F               	andlw	127
  3098  0F42  00A2               	movwf	??_BuildByte
  3099  0F43  0822               	movf	??_BuildByte,w
  3100  0F44  00A6               	movwf	BuildByte@txByte+1
  3101                           
  3102                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  3103  0F45  0821               	movf	BuildByte@valore,w
  3104  0F46  397F               	andlw	127
  3105  0F47  00A2               	movwf	??_BuildByte
  3106  0F48  0822               	movf	??_BuildByte,w
  3107  0F49  00A7               	movwf	BuildByte@txByte+2
  3108  0F4A                     l2784:	
  3109                           
  3110                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  3111  0F4A  0821               	movf	BuildByte@valore,w
  3112  0F4B  00A2               	movwf	??_BuildByte
  3113  0F4C  3007               	movlw	7
  3114  0F4D                     u2585:	
  3115  0F4D  1003               	clrc
  3116  0F4E  0CA2               	rrf	??_BuildByte,f
  3117  0F4F  3EFF               	addlw	-1
  3118  0F50  1D03               	skipz
  3119  0F51  2F4D               	goto	u2585
  3120  0F52  0822               	movf	??_BuildByte,w
  3121  0F53  397F               	andlw	127
  3122  0F54  00A3               	movwf	??_BuildByte+1
  3123  0F55  0823               	movf	??_BuildByte+1,w
  3124  0F56  00A8               	movwf	BuildByte@txByte+3
  3125  0F57                     l2786:	
  3126                           
  3127                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  3128  0F57  01AA               	clrf	BuildByte@sommaRow
  3129  0F58                     l2788:	
  3130                           
  3131                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  3132  0F58  01AB               	clrf	BuildByte@sommaColumn
  3133  0F59                     l2790:	
  3134                           
  3135                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  3136  0F59  01B0               	clrf	BuildByte@i
  3137  0F5A  01B1               	clrf	BuildByte@i+1
  3138  0F5B                     l2796:	
  3139                           
  3140                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  3141  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  3142  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  3143  0F5D  01AC               	clrf	BuildByte@y
  3144  0F5E  01AD               	clrf	BuildByte@y+1
  3145  0F5F                     l2802:	
  3146                           
  3147                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  3148  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  3149  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  3150  0F61  0830               	movf	BuildByte@i,w
  3151  0F62  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3152  0F63  0084               	movwf	4
  3153  0F64  1383               	bcf	3,7	;select IRP bank0
  3154  0F65  0800               	movf	0,w
  3155  0F66  00A2               	movwf	??_BuildByte
  3156  0F67  0A2C               	incf	BuildByte@y,w
  3157  0F68  2F6B               	goto	u2594
  3158  0F69                     u2595:	
  3159  0F69  1003               	clrc
  3160  0F6A  0CA2               	rrf	??_BuildByte,f
  3161  0F6B                     u2594:	
  3162  0F6B  3EFF               	addlw	-1
  3163  0F6C  1D03               	skipz
  3164  0F6D  2F69               	goto	u2595
  3165  0F6E  0822               	movf	??_BuildByte,w
  3166  0F6F  3901               	andlw	1
  3167  0F70  00A3               	movwf	??_BuildByte+1
  3168  0F71  0823               	movf	??_BuildByte+1,w
  3169  0F72  07AA               	addwf	BuildByte@sommaRow,f
  3170  0F73                     l2804:	
  3171                           
  3172                           ;./CustomLib/Serial.h: 18:         }
  3173  0F73  3001               	movlw	1
  3174  0F74  07AC               	addwf	BuildByte@y,f
  3175  0F75  1803               	skipnc
  3176  0F76  0AAD               	incf	BuildByte@y+1,f
  3177  0F77  3000               	movlw	0
  3178  0F78  07AD               	addwf	BuildByte@y+1,f
  3179  0F79                     l2806:	
  3180  0F79  082D               	movf	BuildByte@y+1,w
  3181  0F7A  3A80               	xorlw	128
  3182  0F7B  00FF               	movwf	btemp+1
  3183  0F7C  3080               	movlw	128
  3184  0F7D  027F               	subwf	btemp+1,w
  3185  0F7E  1D03               	skipz
  3186  0F7F  2F82               	goto	u2605
  3187  0F80  3008               	movlw	8
  3188  0F81  022C               	subwf	BuildByte@y,w
  3189  0F82                     u2605:	
  3190  0F82  1C03               	skipc
  3191  0F83  2F85               	goto	u2601
  3192  0F84  2F86               	goto	u2600
  3193  0F85                     u2601:	
  3194  0F85  2F5F               	goto	l2802
  3195  0F86                     u2600:	
  3196  0F86                     l119:	
  3197                           
  3198                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  3199  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  3200  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  3201  0F88  1C2A               	btfss	BuildByte@sommaRow,0
  3202  0F89  2F8B               	goto	u2611
  3203  0F8A  2F8C               	goto	u2610
  3204  0F8B                     u2611:	
  3205  0F8B  2F94               	goto	l2810
  3206  0F8C                     u2610:	
  3207  0F8C                     l2808:	
  3208                           
  3209                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  3210  0F8C  3080               	movlw	128
  3211  0F8D  00A2               	movwf	??_BuildByte
  3212  0F8E  0830               	movf	BuildByte@i,w
  3213  0F8F  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3214  0F90  0084               	movwf	4
  3215  0F91  0822               	movf	??_BuildByte,w
  3216  0F92  1383               	bcf	3,7	;select IRP bank0
  3217  0F93  0780               	addwf	0,f
  3218  0F94                     l2810:	
  3219                           
  3220                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  3221  0F94  01AA               	clrf	BuildByte@sommaRow
  3222  0F95                     l2814:	
  3223                           ;./CustomLib/Serial.h: 23:         }
  3224                           
  3225                           
  3226                           ;./CustomLib/Serial.h: 28:     }
  3227  0F95  3001               	movlw	1
  3228  0F96  07B0               	addwf	BuildByte@i,f
  3229  0F97  1803               	skipnc
  3230  0F98  0AB1               	incf	BuildByte@i+1,f
  3231  0F99  3000               	movlw	0
  3232  0F9A  07B1               	addwf	BuildByte@i+1,f
  3233  0F9B                     l2816:	
  3234  0F9B  0831               	movf	BuildByte@i+1,w
  3235  0F9C  3A80               	xorlw	128
  3236  0F9D  00FF               	movwf	btemp+1
  3237  0F9E  3080               	movlw	128
  3238  0F9F  027F               	subwf	btemp+1,w
  3239  0FA0  1D03               	skipz
  3240  0FA1  2FA4               	goto	u2625
  3241  0FA2  3004               	movlw	4
  3242  0FA3  0230               	subwf	BuildByte@i,w
  3243  0FA4                     u2625:	
  3244  0FA4  1C03               	skipc
  3245  0FA5  2FA7               	goto	u2621
  3246  0FA6  2FA8               	goto	u2620
  3247  0FA7                     u2621:	
  3248  0FA7  2F5B               	goto	l2796
  3249  0FA8                     u2620:	
  3250  0FA8                     l2818:	
  3251                           
  3252                           ;./CustomLib/Serial.h: 31:     for (int i = 0; i < 8; i++)
  3253  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  3255  0FAA  01B2               	clrf	BuildByte@i_342
  3256  0FAB  01B3               	clrf	BuildByte@i_342+1
  3257  0FAC                     l2824:	
  3258                           
  3259                           ;./CustomLib/Serial.h: 32:     {;./CustomLib/Serial.h: 33:         for (int y = 0; y < 4
      +                          ; y++)
  3260  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0FAE  01AE               	clrf	BuildByte@y_343
  3263  0FAF  01AF               	clrf	BuildByte@y_343+1
  3264  0FB0                     l2830:	
  3265                           
  3266                           ;./CustomLib/Serial.h: 35:         {;./CustomLib/Serial.h: 36:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3267  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  3268  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  3269  0FB2  082E               	movf	BuildByte@y_343,w
  3270  0FB3  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3271  0FB4  0084               	movwf	4
  3272  0FB5  1383               	bcf	3,7	;select IRP bank0
  3273  0FB6  0800               	movf	0,w
  3274  0FB7  00A2               	movwf	??_BuildByte
  3275  0FB8  0A32               	incf	BuildByte@i_342,w
  3276  0FB9  2FBC               	goto	u2634
  3277  0FBA                     u2635:	
  3278  0FBA  1003               	clrc
  3279  0FBB  0CA2               	rrf	??_BuildByte,f
  3280  0FBC                     u2634:	
  3281  0FBC  3EFF               	addlw	-1
  3282  0FBD  1D03               	skipz
  3283  0FBE  2FBA               	goto	u2635
  3284  0FBF  0822               	movf	??_BuildByte,w
  3285  0FC0  3901               	andlw	1
  3286  0FC1  00A3               	movwf	??_BuildByte+1
  3287  0FC2  0823               	movf	??_BuildByte+1,w
  3288  0FC3  07AB               	addwf	BuildByte@sommaColumn,f
  3289  0FC4                     l2832:	
  3290                           
  3291                           ;./CustomLib/Serial.h: 37:         }
  3292  0FC4  3001               	movlw	1
  3293  0FC5  07AE               	addwf	BuildByte@y_343,f
  3294  0FC6  1803               	skipnc
  3295  0FC7  0AAF               	incf	BuildByte@y_343+1,f
  3296  0FC8  3000               	movlw	0
  3297  0FC9  07AF               	addwf	BuildByte@y_343+1,f
  3298  0FCA                     l2834:	
  3299  0FCA  082F               	movf	BuildByte@y_343+1,w
  3300  0FCB  3A80               	xorlw	128
  3301  0FCC  00FF               	movwf	btemp+1
  3302  0FCD  3080               	movlw	128
  3303  0FCE  027F               	subwf	btemp+1,w
  3304  0FCF  1D03               	skipz
  3305  0FD0  2FD3               	goto	u2645
  3306  0FD1  3004               	movlw	4
  3307  0FD2  022E               	subwf	BuildByte@y_343,w
  3308  0FD3                     u2645:	
  3309  0FD3  1C03               	skipc
  3310  0FD4  2FD6               	goto	u2641
  3311  0FD5  2FD7               	goto	u2640
  3312  0FD6                     u2641:	
  3313  0FD6  2FB0               	goto	l2830
  3314  0FD7                     u2640:	
  3315  0FD7                     l125:	
  3316                           
  3317                           ;./CustomLib/Serial.h: 38:         if (sommaColumn % 2 == 1)
  3318  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  3319  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  3320  0FD9  1C2B               	btfss	BuildByte@sommaColumn,0
  3321  0FDA  2FDC               	goto	u2651
  3322  0FDB  2FDD               	goto	u2650
  3323  0FDC                     u2651:	
  3324  0FDC  2FEA               	goto	l2838
  3325  0FDD                     u2650:	
  3326  0FDD                     l2836:	
  3327                           
  3328                           ;./CustomLib/Serial.h: 39:         {;./CustomLib/Serial.h: 40:             txByte[4] += 
      +                          0x01 << i;
  3329  0FDD  3001               	movlw	1
  3330  0FDE  00A2               	movwf	??_BuildByte
  3331  0FDF  0A32               	incf	BuildByte@i_342,w
  3332  0FE0  2FE3               	goto	u2664
  3333  0FE1                     u2665:	
  3334  0FE1  1003               	clrc
  3335  0FE2  0DA2               	rlf	??_BuildByte,f
  3336  0FE3                     u2664:	
  3337  0FE3  3EFF               	addlw	-1
  3338  0FE4  1D03               	skipz
  3339  0FE5  2FE1               	goto	u2665
  3340  0FE6  0822               	movf	??_BuildByte,w
  3341  0FE7  00A3               	movwf	??_BuildByte+1
  3342  0FE8  0823               	movf	??_BuildByte+1,w
  3343  0FE9  07A9               	addwf	BuildByte@txByte+4,f
  3344  0FEA                     l2838:	
  3345                           
  3346                           ;./CustomLib/Serial.h: 41:             sommaColumn = 0;
  3347  0FEA  01AB               	clrf	BuildByte@sommaColumn
  3348  0FEB                     l2842:	
  3349                           ;./CustomLib/Serial.h: 42:         }
  3350                           
  3351                           
  3352                           ;./CustomLib/Serial.h: 47:     }
  3353  0FEB  3001               	movlw	1
  3354  0FEC  07B2               	addwf	BuildByte@i_342,f
  3355  0FED  1803               	skipnc
  3356  0FEE  0AB3               	incf	BuildByte@i_342+1,f
  3357  0FEF  3000               	movlw	0
  3358  0FF0  07B3               	addwf	BuildByte@i_342+1,f
  3359  0FF1                     l2844:	
  3360  0FF1  0833               	movf	BuildByte@i_342+1,w
  3361  0FF2  3A80               	xorlw	128
  3362  0FF3  00FF               	movwf	btemp+1
  3363  0FF4  3080               	movlw	128
  3364  0FF5  027F               	subwf	btemp+1,w
  3365  0FF6  1D03               	skipz
  3366  0FF7  2FFA               	goto	u2675
  3367  0FF8  3008               	movlw	8
  3368  0FF9  0232               	subwf	BuildByte@i_342,w
  3369  0FFA                     u2675:	
  3370  0FFA  1C03               	skipc
  3371  0FFB  2FFD               	goto	u2671
  3372  0FFC  2FFE               	goto	u2670
  3373  0FFD                     u2671:	
  3374  0FFD  2FAC               	goto	l2824
  3375  0FFE                     u2670:	
  3376  0FFE                     l2846:	
  3377                           
  3378                           ;./CustomLib/Serial.h: 49:     return txByte;
  3379  0FFE  3025               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3380  0FFF                     l128:	
  3381  0FFF  0008               	return
  3382  1000                     __end_of_BuildByte:	
  3383                           
  3384                           	psect	text4
  3385  0BD9                     __ptext4:	
  3386 ;; *************** function _map *****************
  3387 ;; Defined at:
  3388 ;;		line 1 in file "./CustomLib/Conversions.h"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  x               2   16[BANK0 ] int 
  3391 ;;  in_min          2   18[BANK0 ] int 
  3392 ;;  in_max          2   20[BANK0 ] int 
  3393 ;;  out_min         2   22[BANK0 ] int 
  3394 ;;  out_max         2   24[BANK0 ] int 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;		None
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  2   16[BANK0 ] int 
  3399 ;; Registers used:
  3400 ;;		wreg, status,2, status,0, pclath, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3406 ;;      Params:         0      10       0       0       0
  3407 ;;      Locals:         0       0       0       0       0
  3408 ;;      Temps:          0       0       0       0       0
  3409 ;;      Totals:         0      10       0       0       0
  3410 ;;Total ram usage:       10 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    3
  3413 ;; This function calls:
  3414 ;;		___awdiv
  3415 ;;		___wmul
  3416 ;; This function is called by:
  3417 ;;		_main
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           
  3422                           ;psect for function _map
  3423  0BD9                     _map:	
  3424  0BD9                     l2990:	
  3425                           ;incstack = 0
  3426                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3427                           
  3428                           
  3429                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3430  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  3431  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  3432  0BDB  0832               	movf	map@in_min,w
  3433  0BDC  0234               	subwf	map@in_max,w
  3434  0BDD  00A7               	movwf	___awdiv@divisor
  3435  0BDE  0833               	movf	map@in_min+1,w
  3436  0BDF  1C03               	skipc
  3437  0BE0  0A33               	incf	map@in_min+1,w
  3438  0BE1  0235               	subwf	map@in_max+1,w
  3439  0BE2  00A8               	movwf	___awdiv@divisor+1
  3440  0BE3  0832               	movf	map@in_min,w
  3441  0BE4  0230               	subwf	map@x,w
  3442  0BE5  00A0               	movwf	___wmul@multiplier
  3443  0BE6  0833               	movf	map@in_min+1,w
  3444  0BE7  1C03               	skipc
  3445  0BE8  0A33               	incf	map@in_min+1,w
  3446  0BE9  0231               	subwf	map@x+1,w
  3447  0BEA  00A1               	movwf	___wmul@multiplier+1
  3448  0BEB  0836               	movf	map@out_min,w
  3449  0BEC  0238               	subwf	map@out_max,w
  3450  0BED  00A2               	movwf	___wmul@multiplicand
  3451  0BEE  0837               	movf	map@out_min+1,w
  3452  0BEF  1C03               	skipc
  3453  0BF0  0A37               	incf	map@out_min+1,w
  3454  0BF1  0239               	subwf	map@out_max+1,w
  3455  0BF2  00A3               	movwf	___wmul@multiplicand+1
  3456  0BF3  120A  158A  2350  120A  158A  	fcall	___wmul
  3457  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  3458  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  3459  0BFA  0821               	movf	?___wmul+1,w
  3460  0BFB  00AA               	movwf	___awdiv@dividend+1
  3461  0BFC  0820               	movf	?___wmul,w
  3462  0BFD  00A9               	movwf	___awdiv@dividend
  3463  0BFE  120A  158A  253D  120A  158A  	fcall	___awdiv
  3464  0C03  1283               	bcf	3,5	;RP0=0, select bank0
  3465  0C04  1303               	bcf	3,6	;RP1=0, select bank0
  3466  0C05  0836               	movf	map@out_min,w
  3467  0C06  0727               	addwf	?___awdiv,w
  3468  0C07  00B0               	movwf	?_map
  3469  0C08  0837               	movf	map@out_min+1,w
  3470  0C09  1803               	skipnc
  3471  0C0A  0A37               	incf	map@out_min+1,w
  3472  0C0B  0728               	addwf	?___awdiv+1,w
  3473  0C0C  00B1               	movwf	?_map+1
  3474  0C0D                     l83:	
  3475  0C0D  0008               	return
  3476  0C0E                     __end_of_map:	
  3477                           
  3478                           	psect	text5
  3479  0B50                     __ptext5:	
  3480 ;; *************** function ___wmul *****************
  3481 ;; Defined at:
  3482 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3485 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  product         2    4[BANK0 ] unsigned int 
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  2    0[BANK0 ] unsigned int 
  3490 ;; Registers used:
  3491 ;;		wreg, status,2, status,0
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3497 ;;      Params:         0       4       0       0       0
  3498 ;;      Locals:         0       2       0       0       0
  3499 ;;      Temps:          0       0       0       0       0
  3500 ;;      Totals:         0       6       0       0       0
  3501 ;;Total ram usage:        6 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    2
  3504 ;; This function calls:
  3505 ;;		Nothing
  3506 ;; This function is called by:
  3507 ;;		_map
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           
  3512                           ;psect for function ___wmul
  3513  0B50                     ___wmul:	
  3514  0B50                     l2854:	
  3515                           ;incstack = 0
  3516                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3517                           
  3518  0B50  1283               	bcf	3,5	;RP0=0, select bank0
  3519  0B51  1303               	bcf	3,6	;RP1=0, select bank0
  3520  0B52  01A4               	clrf	___wmul@product
  3521  0B53  01A5               	clrf	___wmul@product+1
  3522  0B54                     l2856:	
  3523  0B54  1C20               	btfss	___wmul@multiplier,0
  3524  0B55  2B57               	goto	u2691
  3525  0B56  2B58               	goto	u2690
  3526  0B57                     u2691:	
  3527  0B57  2B5E               	goto	l446
  3528  0B58                     u2690:	
  3529  0B58                     l2858:	
  3530  0B58  0822               	movf	___wmul@multiplicand,w
  3531  0B59  07A4               	addwf	___wmul@product,f
  3532  0B5A  1803               	skipnc
  3533  0B5B  0AA5               	incf	___wmul@product+1,f
  3534  0B5C  0823               	movf	___wmul@multiplicand+1,w
  3535  0B5D  07A5               	addwf	___wmul@product+1,f
  3536  0B5E                     l446:	
  3537  0B5E  3001               	movlw	1
  3538  0B5F                     u2705:	
  3539  0B5F  1003               	clrc
  3540  0B60  0DA2               	rlf	___wmul@multiplicand,f
  3541  0B61  0DA3               	rlf	___wmul@multiplicand+1,f
  3542  0B62  3EFF               	addlw	-1
  3543  0B63  1D03               	skipz
  3544  0B64  2B5F               	goto	u2705
  3545  0B65                     l2860:	
  3546  0B65  3001               	movlw	1
  3547  0B66                     u2715:	
  3548  0B66  1003               	clrc
  3549  0B67  0CA1               	rrf	___wmul@multiplier+1,f
  3550  0B68  0CA0               	rrf	___wmul@multiplier,f
  3551  0B69  3EFF               	addlw	-1
  3552  0B6A  1D03               	skipz
  3553  0B6B  2B66               	goto	u2715
  3554  0B6C                     l2862:	
  3555  0B6C  0820               	movf	___wmul@multiplier,w
  3556  0B6D  0421               	iorwf	___wmul@multiplier+1,w
  3557  0B6E  1D03               	btfss	3,2
  3558  0B6F  2B71               	goto	u2721
  3559  0B70  2B72               	goto	u2720
  3560  0B71                     u2721:	
  3561  0B71  2B54               	goto	l2856
  3562  0B72                     u2720:	
  3563  0B72                     l2864:	
  3564  0B72  0825               	movf	___wmul@product+1,w
  3565  0B73  00A1               	movwf	?___wmul+1
  3566  0B74  0824               	movf	___wmul@product,w
  3567  0B75  00A0               	movwf	?___wmul
  3568  0B76                     l448:	
  3569  0B76  0008               	return
  3570  0B77                     __end_of___wmul:	
  3571                           
  3572                           	psect	text6
  3573  0ACB                     __ptext6:	
  3574 ;; *************** function _init_ADC *****************
  3575 ;; Defined at:
  3576 ;;		line 369 in file "main.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;		None
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;		None
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3590 ;;      Params:         0       0       0       0       0
  3591 ;;      Locals:         0       0       0       0       0
  3592 ;;      Temps:          0       1       0       0       0
  3593 ;;      Totals:         0       1       0       0       0
  3594 ;;Total ram usage:        1 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    2
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_main
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           
  3605                           ;psect for function _init_ADC
  3606  0ACB                     _init_ADC:	
  3607  0ACB                     l3046:	
  3608                           ;incstack = 0
  3609                           ; Regs used in _init_ADC: [wreg+status,2]
  3610                           
  3611                           
  3612                           ;main.c: 371:     TRISA = 0xE3;
  3613  0ACB  30E3               	movlw	227
  3614  0ACC  1683               	bsf	3,5	;RP0=1, select bank1
  3615  0ACD  1303               	bcf	3,6	;RP1=0, select bank1
  3616  0ACE  0085               	movwf	5	;volatile
  3617  0ACF                     l3048:	
  3618                           
  3619                           ;main.c: 372:     ADCON0 = 0x00;
  3620  0ACF  1283               	bcf	3,5	;RP0=0, select bank0
  3621  0AD0  1303               	bcf	3,6	;RP1=0, select bank0
  3622  0AD1  019F               	clrf	31	;volatile
  3623  0AD2                     l3050:	
  3624                           
  3625                           ;main.c: 373:     ADCON1 = 0x80;
  3626  0AD2  3080               	movlw	128
  3627  0AD3  1683               	bsf	3,5	;RP0=1, select bank1
  3628  0AD4  1303               	bcf	3,6	;RP1=0, select bank1
  3629  0AD5  009F               	movwf	31	;volatile
  3630  0AD6                     l3052:	
  3631                           
  3632                           ;main.c: 374:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3633  0AD6  3019               	movlw	25
  3634  0AD7  1283               	bcf	3,5	;RP0=0, select bank0
  3635  0AD8  1303               	bcf	3,6	;RP1=0, select bank0
  3636  0AD9  00A0               	movwf	??_init_ADC
  3637  0ADA                     u3527:	
  3638  0ADA  0BA0               	decfsz	??_init_ADC,f
  3639  0ADB  2ADA               	goto	u3527
  3640  0ADC  2ADD               	nop2
  3641  0ADD                     l270:	
  3642  0ADD  0008               	return
  3643  0ADE                     __end_of_init_ADC:	
  3644                           
  3645                           	psect	text7
  3646  0724                     __ptext7:	
  3647 ;; *************** function _bitParita *****************
  3648 ;; Defined at:
  3649 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;  rx              1    wreg     PTR unsigned char 
  3652 ;;		 -> dataFromGateway(15), 
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;  rx              1   17[BANK0 ] PTR unsigned char 
  3655 ;;		 -> dataFromGateway(15), 
  3656 ;;  y               2   15[BANK0 ] int 
  3657 ;;  y               2   13[BANK0 ] int 
  3658 ;;  i               2   20[BANK0 ] int 
  3659 ;;  i               2   18[BANK0 ] int 
  3660 ;;  errorRow        1   12[BANK0 ] unsigned char 
  3661 ;;  error           1   11[BANK0 ] unsigned char 
  3662 ;;  errorColumn     1   10[BANK0 ] unsigned char 
  3663 ;;  sommaColumn     1    9[BANK0 ] unsigned char 
  3664 ;;  sommaRow        1    8[BANK0 ] unsigned char 
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      void 
  3667 ;; Registers used:
  3668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3674 ;;      Params:         0       0       0       0       0
  3675 ;;      Locals:         0      14       0       0       0
  3676 ;;      Temps:          0       4       0       0       0
  3677 ;;      Totals:         0      18       0       0       0
  3678 ;;Total ram usage:       18 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    3
  3681 ;; This function calls:
  3682 ;;		_bitChange
  3683 ;; This function is called by:
  3684 ;;		_main
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function _bitParita
  3690  0724                     _bitParita:	
  3691                           
  3692                           ;incstack = 0
  3693                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3694                           ;bitParita@rx stored from wreg
  3695  0724  1283               	bcf	3,5	;RP0=0, select bank0
  3696  0725  1303               	bcf	3,6	;RP1=0, select bank0
  3697  0726  00B1               	movwf	bitParita@rx
  3698  0727                     l2994:	
  3699                           
  3700                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3701  0727  01AB               	clrf	bitParita@error
  3702                           
  3703                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3704  0728  01A8               	clrf	bitParita@sommaRow
  3705                           
  3706                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3707  0729  01AC               	clrf	bitParita@errorRow
  3708                           
  3709                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  3710  072A  01A9               	clrf	bitParita@sommaColumn
  3711                           
  3712                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  3713  072B  01AA               	clrf	bitParita@errorColumn
  3714                           
  3715                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  3716  072C  01B2               	clrf	bitParita@i
  3717  072D  01B3               	clrf	bitParita@i+1
  3718  072E                     l3000:	
  3719                           
  3720                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  3721  072E  1283               	bcf	3,5	;RP0=0, select bank0
  3722  072F  1303               	bcf	3,6	;RP1=0, select bank0
  3723  0730  01AD               	clrf	bitParita@y
  3724  0731  01AE               	clrf	bitParita@y+1
  3725  0732                     l3006:	
  3726                           
  3727                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  3728  0732  1283               	bcf	3,5	;RP0=0, select bank0
  3729  0733  1303               	bcf	3,6	;RP1=0, select bank0
  3730  0734  0832               	movf	bitParita@i,w
  3731  0735  0731               	addwf	bitParita@rx,w
  3732  0736  00A4               	movwf	??_bitParita
  3733  0737  0824               	movf	??_bitParita,w
  3734  0738  0084               	movwf	4
  3735  0739  1383               	bcf	3,7	;select IRP bank0
  3736  073A  0800               	movf	0,w
  3737  073B  00A5               	movwf	??_bitParita+1
  3738  073C  0A2D               	incf	bitParita@y,w
  3739  073D  2F40               	goto	u3024
  3740  073E                     u3025:	
  3741  073E  1003               	clrc
  3742  073F  0CA5               	rrf	??_bitParita+1,f
  3743  0740                     u3024:	
  3744  0740  3EFF               	addlw	-1
  3745  0741  1D03               	skipz
  3746  0742  2F3E               	goto	u3025
  3747  0743  0825               	movf	??_bitParita+1,w
  3748  0744  3901               	andlw	1
  3749  0745  00A6               	movwf	??_bitParita+2
  3750  0746  0826               	movf	??_bitParita+2,w
  3751  0747  07A8               	addwf	bitParita@sommaRow,f
  3752  0748                     l3008:	
  3753                           
  3754                           ;./CustomLib/BitsFlow.h: 26:         }
  3755  0748  3001               	movlw	1
  3756  0749  07AD               	addwf	bitParita@y,f
  3757  074A  1803               	skipnc
  3758  074B  0AAE               	incf	bitParita@y+1,f
  3759  074C  3000               	movlw	0
  3760  074D  07AE               	addwf	bitParita@y+1,f
  3761  074E                     l3010:	
  3762  074E  082E               	movf	bitParita@y+1,w
  3763  074F  3A80               	xorlw	128
  3764  0750  00FF               	movwf	btemp+1
  3765  0751  3080               	movlw	128
  3766  0752  027F               	subwf	btemp+1,w
  3767  0753  1D03               	skipz
  3768  0754  2F57               	goto	u3035
  3769  0755  3008               	movlw	8
  3770  0756  022D               	subwf	bitParita@y,w
  3771  0757                     u3035:	
  3772  0757  1C03               	skipc
  3773  0758  2F5A               	goto	u3031
  3774  0759  2F5B               	goto	u3030
  3775  075A                     u3031:	
  3776  075A  2F32               	goto	l3006
  3777  075B                     u3030:	
  3778  075B                     l105:	
  3779                           
  3780                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  3781  075B  1283               	bcf	3,5	;RP0=0, select bank0
  3782  075C  1303               	bcf	3,6	;RP1=0, select bank0
  3783  075D  1C28               	btfss	bitParita@sommaRow,0
  3784  075E  2F60               	goto	u3041
  3785  075F  2F61               	goto	u3040
  3786  0760                     u3041:	
  3787  0760  2F67               	goto	l106
  3788  0761                     u3040:	
  3789  0761                     l3012:	
  3790                           
  3791                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  3792  0761  01AB               	clrf	bitParita@error
  3793  0762  0AAB               	incf	bitParita@error,f
  3794  0763                     l3014:	
  3795                           
  3796                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  3797  0763  0832               	movf	bitParita@i,w
  3798  0764  00A4               	movwf	??_bitParita
  3799  0765  0824               	movf	??_bitParita,w
  3800  0766  00AC               	movwf	bitParita@errorRow
  3801  0767                     l106:	
  3802                           ;./CustomLib/BitsFlow.h: 31:         }
  3803                           
  3804                           
  3805                           ;./CustomLib/BitsFlow.h: 32:     }
  3806  0767  3001               	movlw	1
  3807  0768  07B2               	addwf	bitParita@i,f
  3808  0769  1803               	skipnc
  3809  076A  0AB3               	incf	bitParita@i+1,f
  3810  076B  3000               	movlw	0
  3811  076C  07B3               	addwf	bitParita@i+1,f
  3812  076D                     l3016:	
  3813  076D  0833               	movf	bitParita@i+1,w
  3814  076E  3A80               	xorlw	128
  3815  076F  00FF               	movwf	btemp+1
  3816  0770  3080               	movlw	128
  3817  0771  027F               	subwf	btemp+1,w
  3818  0772  1D03               	skipz
  3819  0773  2F76               	goto	u3055
  3820  0774  3005               	movlw	5
  3821  0775  0232               	subwf	bitParita@i,w
  3822  0776                     u3055:	
  3823  0776  1C03               	skipc
  3824  0777  2F79               	goto	u3051
  3825  0778  2F7A               	goto	u3050
  3826  0779                     u3051:	
  3827  0779  2F2E               	goto	l3000
  3828  077A                     u3050:	
  3829  077A                     l3018:	
  3830                           
  3831                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  3832  077A  1283               	bcf	3,5	;RP0=0, select bank0
  3833  077B  1303               	bcf	3,6	;RP1=0, select bank0
  3834  077C  01B4               	clrf	bitParita@i_330
  3835  077D  01B5               	clrf	bitParita@i_330+1
  3836  077E                     l3024:	
  3837                           
  3838                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  3839  077E  1283               	bcf	3,5	;RP0=0, select bank0
  3840  077F  1303               	bcf	3,6	;RP1=0, select bank0
  3841  0780  01AF               	clrf	bitParita@y_331
  3842  0781  01B0               	clrf	bitParita@y_331+1
  3843  0782                     l3030:	
  3844                           
  3845                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  3846  0782  1283               	bcf	3,5	;RP0=0, select bank0
  3847  0783  1303               	bcf	3,6	;RP1=0, select bank0
  3848  0784  082F               	movf	bitParita@y_331,w
  3849  0785  0731               	addwf	bitParita@rx,w
  3850  0786  00A4               	movwf	??_bitParita
  3851  0787  0824               	movf	??_bitParita,w
  3852  0788  0084               	movwf	4
  3853  0789  1383               	bcf	3,7	;select IRP bank0
  3854  078A  0800               	movf	0,w
  3855  078B  00A5               	movwf	??_bitParita+1
  3856  078C  0A34               	incf	bitParita@i_330,w
  3857  078D  2F90               	goto	u3064
  3858  078E                     u3065:	
  3859  078E  1003               	clrc
  3860  078F  0CA5               	rrf	??_bitParita+1,f
  3861  0790                     u3064:	
  3862  0790  3EFF               	addlw	-1
  3863  0791  1D03               	skipz
  3864  0792  2F8E               	goto	u3065
  3865  0793  0825               	movf	??_bitParita+1,w
  3866  0794  3901               	andlw	1
  3867  0795  00A6               	movwf	??_bitParita+2
  3868  0796  0826               	movf	??_bitParita+2,w
  3869  0797  07A9               	addwf	bitParita@sommaColumn,f
  3870  0798                     l3032:	
  3871                           
  3872                           ;./CustomLib/BitsFlow.h: 39:         }
  3873  0798  3001               	movlw	1
  3874  0799  07AF               	addwf	bitParita@y_331,f
  3875  079A  1803               	skipnc
  3876  079B  0AB0               	incf	bitParita@y_331+1,f
  3877  079C  3000               	movlw	0
  3878  079D  07B0               	addwf	bitParita@y_331+1,f
  3879  079E                     l3034:	
  3880  079E  0830               	movf	bitParita@y_331+1,w
  3881  079F  3A80               	xorlw	128
  3882  07A0  00FF               	movwf	btemp+1
  3883  07A1  3080               	movlw	128
  3884  07A2  027F               	subwf	btemp+1,w
  3885  07A3  1D03               	skipz
  3886  07A4  2FA7               	goto	u3075
  3887  07A5  3004               	movlw	4
  3888  07A6  022F               	subwf	bitParita@y_331,w
  3889  07A7                     u3075:	
  3890  07A7  1C03               	skipc
  3891  07A8  2FAA               	goto	u3071
  3892  07A9  2FAB               	goto	u3070
  3893  07AA                     u3071:	
  3894  07AA  2F82               	goto	l3030
  3895  07AB                     u3070:	
  3896  07AB                     l110:	
  3897                           
  3898                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  3899  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  3900  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  3901  07AD  1C29               	btfss	bitParita@sommaColumn,0
  3902  07AE  2FB0               	goto	u3081
  3903  07AF  2FB1               	goto	u3080
  3904  07B0                     u3081:	
  3905  07B0  2FB7               	goto	l111
  3906  07B1                     u3080:	
  3907  07B1                     l3036:	
  3908                           
  3909                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  3910  07B1  01AB               	clrf	bitParita@error
  3911  07B2  0AAB               	incf	bitParita@error,f
  3912  07B3                     l3038:	
  3913                           
  3914                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  3915  07B3  0834               	movf	bitParita@i_330,w
  3916  07B4  00A4               	movwf	??_bitParita
  3917  07B5  0824               	movf	??_bitParita,w
  3918  07B6  00AA               	movwf	bitParita@errorColumn
  3919  07B7                     l111:	
  3920                           ;./CustomLib/BitsFlow.h: 44:         }
  3921                           
  3922                           
  3923                           ;./CustomLib/BitsFlow.h: 45:     }
  3924  07B7  3001               	movlw	1
  3925  07B8  07B4               	addwf	bitParita@i_330,f
  3926  07B9  1803               	skipnc
  3927  07BA  0AB5               	incf	bitParita@i_330+1,f
  3928  07BB  3000               	movlw	0
  3929  07BC  07B5               	addwf	bitParita@i_330+1,f
  3930  07BD                     l3040:	
  3931  07BD  0835               	movf	bitParita@i_330+1,w
  3932  07BE  3A80               	xorlw	128
  3933  07BF  00FF               	movwf	btemp+1
  3934  07C0  3080               	movlw	128
  3935  07C1  027F               	subwf	btemp+1,w
  3936  07C2  1D03               	skipz
  3937  07C3  2FC6               	goto	u3095
  3938  07C4  3008               	movlw	8
  3939  07C5  0234               	subwf	bitParita@i_330,w
  3940  07C6                     u3095:	
  3941  07C6  1C03               	skipc
  3942  07C7  2FC9               	goto	u3091
  3943  07C8  2FCA               	goto	u3090
  3944  07C9                     u3091:	
  3945  07C9  2F7E               	goto	l3024
  3946  07CA                     u3090:	
  3947  07CA                     l3042:	
  3948                           
  3949                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  3950  07CA  1283               	bcf	3,5	;RP0=0, select bank0
  3951  07CB  1303               	bcf	3,6	;RP1=0, select bank0
  3952  07CC  082B               	movf	bitParita@error,w
  3953  07CD  1903               	btfsc	3,2
  3954  07CE  2FD0               	goto	u3101
  3955  07CF  2FD1               	goto	u3100
  3956  07D0                     u3101:	
  3957  07D0  2FEC               	goto	l113
  3958  07D1                     u3100:	
  3959  07D1                     l3044:	
  3960                           
  3961                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  3962  07D1  082A               	movf	bitParita@errorColumn,w
  3963  07D2  00A4               	movwf	??_bitParita
  3964  07D3  0824               	movf	??_bitParita,w
  3965  07D4  00A0               	movwf	bitChange@n
  3966  07D5  082C               	movf	bitParita@errorRow,w
  3967  07D6  0731               	addwf	bitParita@rx,w
  3968  07D7  00A5               	movwf	??_bitParita+1
  3969  07D8  0825               	movf	??_bitParita+1,w
  3970  07D9  0084               	movwf	4
  3971  07DA  1383               	bcf	3,7	;select IRP bank0
  3972  07DB  0800               	movf	0,w
  3973  07DC  120A  158A  2377  120A  118A  	fcall	_bitChange
  3974  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  3975  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  3976  07E3  00A6               	movwf	??_bitParita+2
  3977  07E4  082C               	movf	bitParita@errorRow,w
  3978  07E5  0731               	addwf	bitParita@rx,w
  3979  07E6  00A7               	movwf	??_bitParita+3
  3980  07E7  0827               	movf	??_bitParita+3,w
  3981  07E8  0084               	movwf	4
  3982  07E9  0826               	movf	??_bitParita+2,w
  3983  07EA  1383               	bcf	3,7	;select IRP bank0
  3984  07EB  0080               	movwf	0
  3985  07EC                     l113:	
  3986  07EC  0008               	return
  3987  07ED                     __end_of_bitParita:	
  3988                           
  3989                           	psect	text8
  3990  0B77                     __ptext8:	
  3991 ;; *************** function _bitChange *****************
  3992 ;; Defined at:
  3993 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  dato            1    wreg     unsigned char 
  3996 ;;  n               1    0[BANK0 ] unsigned char 
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;  dato            1    3[BANK0 ] unsigned char 
  3999 ;; Return value:  Size  Location     Type
  4000 ;;                  1    wreg      unsigned char 
  4001 ;; Registers used:
  4002 ;;		wreg, status,2, status,0
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4008 ;;      Params:         0       1       0       0       0
  4009 ;;      Locals:         0       1       0       0       0
  4010 ;;      Temps:          0       2       0       0       0
  4011 ;;      Totals:         0       4       0       0       0
  4012 ;;Total ram usage:        4 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    2
  4015 ;; This function calls:
  4016 ;;		Nothing
  4017 ;; This function is called by:
  4018 ;;		_bitParita
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function _bitChange
  4024  0B77                     _bitChange:	
  4025                           
  4026                           ;incstack = 0
  4027                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  4028                           ;bitChange@dato stored from wreg
  4029  0B77  1283               	bcf	3,5	;RP0=0, select bank0
  4030  0B78  1303               	bcf	3,6	;RP1=0, select bank0
  4031  0B79  00A3               	movwf	bitChange@dato
  4032  0B7A                     l2770:	
  4033                           
  4034                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  4035  0B7A  3001               	movlw	1
  4036  0B7B  00A1               	movwf	??_bitChange
  4037  0B7C  0A20               	incf	bitChange@n,w
  4038  0B7D  2B80               	goto	u2544
  4039  0B7E                     u2545:	
  4040  0B7E  1003               	clrc
  4041  0B7F  0DA1               	rlf	??_bitChange,f
  4042  0B80                     u2544:	
  4043  0B80  3EFF               	addlw	-1
  4044  0B81  1D03               	skipz
  4045  0B82  2B7E               	goto	u2545
  4046  0B83  0821               	movf	??_bitChange,w
  4047  0B84  0523               	andwf	bitChange@dato,w
  4048  0B85  1903               	btfsc	3,2
  4049  0B86  2B88               	goto	u2551
  4050  0B87  2B89               	goto	u2550
  4051  0B88                     u2551:	
  4052  0B88  2B98               	goto	l2778
  4053  0B89                     u2550:	
  4054  0B89                     l2772:	
  4055                           
  4056                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  4057  0B89  3001               	movlw	1
  4058  0B8A  00A1               	movwf	??_bitChange
  4059  0B8B  0A20               	incf	bitChange@n,w
  4060  0B8C  2B8F               	goto	u2564
  4061  0B8D                     u2565:	
  4062  0B8D  1003               	clrc
  4063  0B8E  0DA1               	rlf	??_bitChange,f
  4064  0B8F                     u2564:	
  4065  0B8F  3EFF               	addlw	-1
  4066  0B90  1D03               	skipz
  4067  0B91  2B8D               	goto	u2565
  4068  0B92  0821               	movf	??_bitChange,w
  4069  0B93  00A2               	movwf	??_bitChange+1
  4070  0B94  0822               	movf	??_bitChange+1,w
  4071  0B95  04A3               	iorwf	bitChange@dato,f
  4072  0B96  0823               	movf	bitChange@dato,w
  4073  0B97  2BA7               	goto	l98
  4074  0B98                     l2778:	
  4075                           
  4076                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  4077  0B98  3001               	movlw	1
  4078  0B99  00A1               	movwf	??_bitChange
  4079  0B9A  0A20               	incf	bitChange@n,w
  4080  0B9B  2B9E               	goto	u2574
  4081  0B9C                     u2575:	
  4082  0B9C  1003               	clrc
  4083  0B9D  0DA1               	rlf	??_bitChange,f
  4084  0B9E                     u2574:	
  4085  0B9E  3EFF               	addlw	-1
  4086  0B9F  1D03               	skipz
  4087  0BA0  2B9C               	goto	u2575
  4088  0BA1  0821               	movf	??_bitChange,w
  4089  0BA2  3AFF               	xorlw	255
  4090  0BA3  00A2               	movwf	??_bitChange+1
  4091  0BA4  0822               	movf	??_bitChange+1,w
  4092  0BA5  05A3               	andwf	bitChange@dato,f
  4093  0BA6  0823               	movf	bitChange@dato,w
  4094  0BA7                     l98:	
  4095  0BA7  0008               	return
  4096  0BA8                     __end_of_bitChange:	
  4097                           
  4098                           	psect	text9
  4099  0AF3                     __ptext9:	
  4100 ;; *************** function ___bmul *****************
  4101 ;; Defined at:
  4102 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;  multiplier      1    wreg     unsigned char 
  4105 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4108 ;;  product         1    2[BANK0 ] unsigned char 
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  1    wreg      unsigned char 
  4111 ;; Registers used:
  4112 ;;		wreg, status,2, status,0
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4118 ;;      Params:         0       1       0       0       0
  4119 ;;      Locals:         0       2       0       0       0
  4120 ;;      Temps:          0       1       0       0       0
  4121 ;;      Totals:         0       4       0       0       0
  4122 ;;Total ram usage:        4 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    2
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_main
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           
  4133                           ;psect for function ___bmul
  4134  0AF3                     ___bmul:	
  4135                           
  4136                           ;incstack = 0
  4137                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4138                           ;___bmul@multiplier stored from wreg
  4139  0AF3  1283               	bcf	3,5	;RP0=0, select bank0
  4140  0AF4  1303               	bcf	3,6	;RP1=0, select bank0
  4141  0AF5  00A3               	movwf	___bmul@multiplier
  4142  0AF6                     l3152:	
  4143  0AF6  01A2               	clrf	___bmul@product
  4144  0AF7                     l3154:	
  4145  0AF7  1C23               	btfss	___bmul@multiplier,0
  4146  0AF8  2AFA               	goto	u3181
  4147  0AF9  2AFB               	goto	u3180
  4148  0AFA                     u3181:	
  4149  0AFA  2AFF               	goto	l3158
  4150  0AFB                     u3180:	
  4151  0AFB                     l3156:	
  4152  0AFB  0820               	movf	___bmul@multiplicand,w
  4153  0AFC  00A1               	movwf	??___bmul
  4154  0AFD  0821               	movf	??___bmul,w
  4155  0AFE  07A2               	addwf	___bmul@product,f
  4156  0AFF                     l3158:	
  4157  0AFF  1003               	clrc
  4158  0B00  0DA0               	rlf	___bmul@multiplicand,f
  4159  0B01                     l3160:	
  4160  0B01  1003               	clrc
  4161  0B02  0CA3               	rrf	___bmul@multiplier,f
  4162  0B03  0823               	movf	___bmul@multiplier,w
  4163  0B04  1D03               	btfss	3,2
  4164  0B05  2B07               	goto	u3191
  4165  0B06  2B08               	goto	u3190
  4166  0B07                     u3191:	
  4167  0B07  2AF7               	goto	l3154
  4168  0B08                     u3190:	
  4169  0B08                     l3162:	
  4170  0B08  0822               	movf	___bmul@product,w
  4171  0B09                     l472:	
  4172  0B09  0008               	return
  4173  0B0A                     __end_of___bmul:	
  4174                           
  4175                           	psect	text10
  4176  0C0E                     __ptext10:	
  4177 ;; *************** function _UART_Init *****************
  4178 ;; Defined at:
  4179 ;;		line 388 in file "main.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  baudrate        2   15[BANK0 ] int 
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;		None
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  1    wreg      void 
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0, pclath, cstack
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4193 ;;      Params:         0       2       0       0       0
  4194 ;;      Locals:         0       0       0       0       0
  4195 ;;      Temps:          0       4       0       0       0
  4196 ;;      Totals:         0       6       0       0       0
  4197 ;;Total ram usage:        6 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    3
  4200 ;; This function calls:
  4201 ;;		___aldiv
  4202 ;; This function is called by:
  4203 ;;		_main
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           
  4208                           ;psect for function _UART_Init
  4209  0C0E                     _UART_Init:	
  4210  0C0E                     l3054:	
  4211                           ;incstack = 0
  4212                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4213                           
  4214                           
  4215                           ;main.c: 388: void UART_Init(int baudrate);main.c: 389: {;main.c: 390:     TRISCbits.TRI
      +                          SC6 = 0;
  4216  0C0E  1683               	bsf	3,5	;RP0=1, select bank1
  4217  0C0F  1303               	bcf	3,6	;RP1=0, select bank1
  4218  0C10  1307               	bcf	7,6	;volatile
  4219                           
  4220                           ;main.c: 391:     TXSTAbits.TXEN = 1;
  4221  0C11  1698               	bsf	24,5	;volatile
  4222                           
  4223                           ;main.c: 392:     RCSTAbits.SPEN = 1;
  4224  0C12  1283               	bcf	3,5	;RP0=0, select bank0
  4225  0C13  1303               	bcf	3,6	;RP1=0, select bank0
  4226  0C14  1798               	bsf	24,7	;volatile
  4227                           
  4228                           ;main.c: 393:     RCSTAbits.CREN = 1;
  4229  0C15  1618               	bsf	24,4	;volatile
  4230  0C16                     l3056:	
  4231                           
  4232                           ;main.c: 394:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4233  0C16  082F               	movf	UART_Init@baudrate,w
  4234  0C17  00B1               	movwf	??_UART_Init
  4235  0C18  0830               	movf	UART_Init@baudrate+1,w
  4236  0C19  00B2               	movwf	??_UART_Init+1
  4237  0C1A  3000               	movlw	0
  4238  0C1B  1BB2               	btfsc	??_UART_Init+1,7
  4239  0C1C  30FF               	movlw	255
  4240  0C1D  00B3               	movwf	??_UART_Init+2
  4241  0C1E  00B4               	movwf	??_UART_Init+3
  4242  0C1F  3006               	movlw	6
  4243  0C20                     u3115:	
  4244  0C20  1003               	clrc
  4245  0C21  0DB1               	rlf	??_UART_Init,f
  4246  0C22  0DB2               	rlf	??_UART_Init+1,f
  4247  0C23  0DB3               	rlf	??_UART_Init+2,f
  4248  0C24  0DB4               	rlf	??_UART_Init+3,f
  4249  0C25                     u3110:	
  4250  0C25  3EFF               	addlw	-1
  4251  0C26  1D03               	skipz
  4252  0C27  2C20               	goto	u3115
  4253  0C28  0834               	movf	??_UART_Init+3,w
  4254  0C29  00A3               	movwf	___aldiv@divisor+3
  4255  0C2A  0833               	movf	??_UART_Init+2,w
  4256  0C2B  00A2               	movwf	___aldiv@divisor+2
  4257  0C2C  0832               	movf	??_UART_Init+1,w
  4258  0C2D  00A1               	movwf	___aldiv@divisor+1
  4259  0C2E  0831               	movf	??_UART_Init,w
  4260  0C2F  00A0               	movwf	___aldiv@divisor
  4261  0C30  3001               	movlw	1
  4262  0C31  00A7               	movwf	___aldiv@dividend+3
  4263  0C32  30E8               	movlw	232
  4264  0C33  00A6               	movwf	___aldiv@dividend+2
  4265  0C34  3048               	movlw	72
  4266  0C35  00A5               	movwf	___aldiv@dividend+1
  4267  0C36  3000               	movlw	0
  4268  0C37  00A4               	movwf	___aldiv@dividend
  4269  0C38  120A  158A  269B  120A  158A  	fcall	___aldiv
  4270  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  4271  0C3E  1303               	bcf	3,6	;RP1=0, select bank0
  4272  0C3F  0820               	movf	?___aldiv,w
  4273  0C40  3EFF               	addlw	255
  4274  0C41  1683               	bsf	3,5	;RP0=1, select bank1
  4275  0C42  1303               	bcf	3,6	;RP1=0, select bank1
  4276  0C43  0099               	movwf	25	;volatile
  4277  0C44                     l3058:	
  4278                           
  4279                           ;main.c: 395:     INTCONbits.GIE = 1;
  4280  0C44  178B               	bsf	11,7	;volatile
  4281  0C45                     l3060:	
  4282                           
  4283                           ;main.c: 396:     INTCONbits.PEIE = 1;
  4284  0C45  170B               	bsf	11,6	;volatile
  4285  0C46                     l3062:	
  4286                           
  4287                           ;main.c: 397:     PIE1bits.RCIE = 1;
  4288  0C46  168C               	bsf	12,5	;volatile
  4289  0C47                     l279:	
  4290  0C47  0008               	return
  4291  0C48                     __end_of_UART_Init:	
  4292                           
  4293                           	psect	text11
  4294  0E9B                     __ptext11:	
  4295 ;; *************** function ___aldiv *****************
  4296 ;; Defined at:
  4297 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  divisor         4    0[BANK0 ] long 
  4300 ;;  dividend        4    4[BANK0 ] long 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  quotient        4   11[BANK0 ] long 
  4303 ;;  sign            1   10[BANK0 ] unsigned char 
  4304 ;;  counter         1    9[BANK0 ] unsigned char 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  4    0[BANK0 ] long 
  4307 ;; Registers used:
  4308 ;;		wreg, status,2, status,0
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4314 ;;      Params:         0       8       0       0       0
  4315 ;;      Locals:         0       6       0       0       0
  4316 ;;      Temps:          0       1       0       0       0
  4317 ;;      Totals:         0      15       0       0       0
  4318 ;;Total ram usage:       15 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    2
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_UART_Init
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           
  4329                           ;psect for function ___aldiv
  4330  0E9B                     ___aldiv:	
  4331  0E9B                     l2868:	
  4332                           ;incstack = 0
  4333                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4334                           
  4335  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  4336  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  4337  0E9D  01AA               	clrf	___aldiv@sign
  4338  0E9E                     l2870:	
  4339  0E9E  1FA3               	btfss	___aldiv@divisor+3,7
  4340  0E9F  2EA1               	goto	u2731
  4341  0EA0  2EA2               	goto	u2730
  4342  0EA1                     u2731:	
  4343  0EA1  2EAF               	goto	l511
  4344  0EA2                     u2730:	
  4345  0EA2                     l2872:	
  4346  0EA2  09A0               	comf	___aldiv@divisor,f
  4347  0EA3  09A1               	comf	___aldiv@divisor+1,f
  4348  0EA4  09A2               	comf	___aldiv@divisor+2,f
  4349  0EA5  09A3               	comf	___aldiv@divisor+3,f
  4350  0EA6  0AA0               	incf	___aldiv@divisor,f
  4351  0EA7  1903               	skipnz
  4352  0EA8  0AA1               	incf	___aldiv@divisor+1,f
  4353  0EA9  1903               	skipnz
  4354  0EAA  0AA2               	incf	___aldiv@divisor+2,f
  4355  0EAB  1903               	skipnz
  4356  0EAC  0AA3               	incf	___aldiv@divisor+3,f
  4357  0EAD  01AA               	clrf	___aldiv@sign
  4358  0EAE  0AAA               	incf	___aldiv@sign,f
  4359  0EAF                     l511:	
  4360  0EAF  1FA7               	btfss	___aldiv@dividend+3,7
  4361  0EB0  2EB2               	goto	u2741
  4362  0EB1  2EB3               	goto	u2740
  4363  0EB2                     u2741:	
  4364  0EB2  2EC2               	goto	l2878
  4365  0EB3                     u2740:	
  4366  0EB3                     l2874:	
  4367  0EB3  09A4               	comf	___aldiv@dividend,f
  4368  0EB4  09A5               	comf	___aldiv@dividend+1,f
  4369  0EB5  09A6               	comf	___aldiv@dividend+2,f
  4370  0EB6  09A7               	comf	___aldiv@dividend+3,f
  4371  0EB7  0AA4               	incf	___aldiv@dividend,f
  4372  0EB8  1903               	skipnz
  4373  0EB9  0AA5               	incf	___aldiv@dividend+1,f
  4374  0EBA  1903               	skipnz
  4375  0EBB  0AA6               	incf	___aldiv@dividend+2,f
  4376  0EBC  1903               	skipnz
  4377  0EBD  0AA7               	incf	___aldiv@dividend+3,f
  4378  0EBE                     l2876:	
  4379  0EBE  3001               	movlw	1
  4380  0EBF  00A8               	movwf	??___aldiv
  4381  0EC0  0828               	movf	??___aldiv,w
  4382  0EC1  06AA               	xorwf	___aldiv@sign,f
  4383  0EC2                     l2878:	
  4384  0EC2  3000               	movlw	0
  4385  0EC3  00AE               	movwf	___aldiv@quotient+3
  4386  0EC4  3000               	movlw	0
  4387  0EC5  00AD               	movwf	___aldiv@quotient+2
  4388  0EC6  3000               	movlw	0
  4389  0EC7  00AC               	movwf	___aldiv@quotient+1
  4390  0EC8  3000               	movlw	0
  4391  0EC9  00AB               	movwf	___aldiv@quotient
  4392  0ECA                     l2880:	
  4393  0ECA  0823               	movf	___aldiv@divisor+3,w
  4394  0ECB  0422               	iorwf	___aldiv@divisor+2,w
  4395  0ECC  0421               	iorwf	___aldiv@divisor+1,w
  4396  0ECD  0420               	iorwf	___aldiv@divisor,w
  4397  0ECE  1903               	skipnz
  4398  0ECF  2ED1               	goto	u2751
  4399  0ED0  2ED2               	goto	u2750
  4400  0ED1                     u2751:	
  4401  0ED1  2F1F               	goto	l2900
  4402  0ED2                     u2750:	
  4403  0ED2                     l2882:	
  4404  0ED2  01A9               	clrf	___aldiv@counter
  4405  0ED3  0AA9               	incf	___aldiv@counter,f
  4406  0ED4  2EE2               	goto	l2886
  4407  0ED5                     l2884:	
  4408  0ED5  3001               	movlw	1
  4409  0ED6  00A8               	movwf	??___aldiv
  4410  0ED7                     u2765:	
  4411  0ED7  1003               	clrc
  4412  0ED8  0DA0               	rlf	___aldiv@divisor,f
  4413  0ED9  0DA1               	rlf	___aldiv@divisor+1,f
  4414  0EDA  0DA2               	rlf	___aldiv@divisor+2,f
  4415  0EDB  0DA3               	rlf	___aldiv@divisor+3,f
  4416  0EDC  0BA8               	decfsz	??___aldiv,f
  4417  0EDD  2ED7               	goto	u2765
  4418  0EDE  3001               	movlw	1
  4419  0EDF  00A8               	movwf	??___aldiv
  4420  0EE0  0828               	movf	??___aldiv,w
  4421  0EE1  07A9               	addwf	___aldiv@counter,f
  4422  0EE2                     l2886:	
  4423  0EE2  1FA3               	btfss	___aldiv@divisor+3,7
  4424  0EE3  2EE5               	goto	u2771
  4425  0EE4  2EE6               	goto	u2770
  4426  0EE5                     u2771:	
  4427  0EE5  2ED5               	goto	l2884
  4428  0EE6                     u2770:	
  4429  0EE6                     l2888:	
  4430  0EE6  3001               	movlw	1
  4431  0EE7  00A8               	movwf	??___aldiv
  4432  0EE8                     u2785:	
  4433  0EE8  1003               	clrc
  4434  0EE9  0DAB               	rlf	___aldiv@quotient,f
  4435  0EEA  0DAC               	rlf	___aldiv@quotient+1,f
  4436  0EEB  0DAD               	rlf	___aldiv@quotient+2,f
  4437  0EEC  0DAE               	rlf	___aldiv@quotient+3,f
  4438  0EED  0BA8               	decfsz	??___aldiv,f
  4439  0EEE  2EE8               	goto	u2785
  4440  0EEF                     l2890:	
  4441  0EEF  0823               	movf	___aldiv@divisor+3,w
  4442  0EF0  0227               	subwf	___aldiv@dividend+3,w
  4443  0EF1  1D03               	skipz
  4444  0EF2  2EFD               	goto	u2795
  4445  0EF3  0822               	movf	___aldiv@divisor+2,w
  4446  0EF4  0226               	subwf	___aldiv@dividend+2,w
  4447  0EF5  1D03               	skipz
  4448  0EF6  2EFD               	goto	u2795
  4449  0EF7  0821               	movf	___aldiv@divisor+1,w
  4450  0EF8  0225               	subwf	___aldiv@dividend+1,w
  4451  0EF9  1D03               	skipz
  4452  0EFA  2EFD               	goto	u2795
  4453  0EFB  0820               	movf	___aldiv@divisor,w
  4454  0EFC  0224               	subwf	___aldiv@dividend,w
  4455  0EFD                     u2795:	
  4456  0EFD  1C03               	skipc
  4457  0EFE  2F00               	goto	u2791
  4458  0EFF  2F01               	goto	u2790
  4459  0F00                     u2791:	
  4460  0F00  2F10               	goto	l2896
  4461  0F01                     u2790:	
  4462  0F01                     l2892:	
  4463  0F01  0820               	movf	___aldiv@divisor,w
  4464  0F02  02A4               	subwf	___aldiv@dividend,f
  4465  0F03  0821               	movf	___aldiv@divisor+1,w
  4466  0F04  1C03               	skipc
  4467  0F05  0F21               	incfsz	___aldiv@divisor+1,w
  4468  0F06  02A5               	subwf	___aldiv@dividend+1,f
  4469  0F07  0822               	movf	___aldiv@divisor+2,w
  4470  0F08  1C03               	skipc
  4471  0F09  0F22               	incfsz	___aldiv@divisor+2,w
  4472  0F0A  02A6               	subwf	___aldiv@dividend+2,f
  4473  0F0B  0823               	movf	___aldiv@divisor+3,w
  4474  0F0C  1C03               	skipc
  4475  0F0D  0F23               	incfsz	___aldiv@divisor+3,w
  4476  0F0E  02A7               	subwf	___aldiv@dividend+3,f
  4477  0F0F                     l2894:	
  4478  0F0F  142B               	bsf	___aldiv@quotient,0
  4479  0F10                     l2896:	
  4480  0F10  3001               	movlw	1
  4481  0F11                     u2805:	
  4482  0F11  1003               	clrc
  4483  0F12  0CA3               	rrf	___aldiv@divisor+3,f
  4484  0F13  0CA2               	rrf	___aldiv@divisor+2,f
  4485  0F14  0CA1               	rrf	___aldiv@divisor+1,f
  4486  0F15  0CA0               	rrf	___aldiv@divisor,f
  4487  0F16  3EFF               	addlw	-1
  4488  0F17  1D03               	skipz
  4489  0F18  2F11               	goto	u2805
  4490  0F19                     l2898:	
  4491  0F19  3001               	movlw	1
  4492  0F1A  02A9               	subwf	___aldiv@counter,f
  4493  0F1B  1D03               	btfss	3,2
  4494  0F1C  2F1E               	goto	u2811
  4495  0F1D  2F1F               	goto	u2810
  4496  0F1E                     u2811:	
  4497  0F1E  2EE6               	goto	l2888
  4498  0F1F                     u2810:	
  4499  0F1F                     l2900:	
  4500  0F1F  082A               	movf	___aldiv@sign,w
  4501  0F20  1903               	btfsc	3,2
  4502  0F21  2F23               	goto	u2821
  4503  0F22  2F24               	goto	u2820
  4504  0F23                     u2821:	
  4505  0F23  2F2F               	goto	l2904
  4506  0F24                     u2820:	
  4507  0F24                     l2902:	
  4508  0F24  09AB               	comf	___aldiv@quotient,f
  4509  0F25  09AC               	comf	___aldiv@quotient+1,f
  4510  0F26  09AD               	comf	___aldiv@quotient+2,f
  4511  0F27  09AE               	comf	___aldiv@quotient+3,f
  4512  0F28  0AAB               	incf	___aldiv@quotient,f
  4513  0F29  1903               	skipnz
  4514  0F2A  0AAC               	incf	___aldiv@quotient+1,f
  4515  0F2B  1903               	skipnz
  4516  0F2C  0AAD               	incf	___aldiv@quotient+2,f
  4517  0F2D  1903               	skipnz
  4518  0F2E  0AAE               	incf	___aldiv@quotient+3,f
  4519  0F2F                     l2904:	
  4520  0F2F  082E               	movf	___aldiv@quotient+3,w
  4521  0F30  00A3               	movwf	?___aldiv+3
  4522  0F31  082D               	movf	___aldiv@quotient+2,w
  4523  0F32  00A2               	movwf	?___aldiv+2
  4524  0F33  082C               	movf	___aldiv@quotient+1,w
  4525  0F34  00A1               	movwf	?___aldiv+1
  4526  0F35  082B               	movf	___aldiv@quotient,w
  4527  0F36  00A0               	movwf	?___aldiv
  4528  0F37                     l521:	
  4529  0F37  0008               	return
  4530  0F38                     __end_of___aldiv:	
  4531                           
  4532                           	psect	text12
  4533  0ADE                     __ptext12:	
  4534 ;; *************** function _SetDisplay *****************
  4535 ;; Defined at:
  4536 ;;		line 462 in file "main.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  d1              1    wreg     unsigned char 
  4539 ;;  d2              1    0[BANK0 ] unsigned char 
  4540 ;;  d3              1    1[BANK0 ] unsigned char 
  4541 ;;  value           1    2[BANK0 ] unsigned char 
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;  d1              1    3[BANK0 ] unsigned char 
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  1    wreg      void 
  4546 ;; Registers used:
  4547 ;;		wreg, status,0
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4553 ;;      Params:         0       3       0       0       0
  4554 ;;      Locals:         0       1       0       0       0
  4555 ;;      Temps:          0       0       0       0       0
  4556 ;;      Totals:         0       4       0       0       0
  4557 ;;Total ram usage:        4 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; Hardware stack levels required when called:    2
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_main
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _SetDisplay
  4569  0ADE                     _SetDisplay:	
  4570                           
  4571                           ;incstack = 0
  4572                           ; Regs used in _SetDisplay: [wreg+status,0]
  4573                           ;SetDisplay@d1 stored from wreg
  4574  0ADE  1283               	bcf	3,5	;RP0=0, select bank0
  4575  0ADF  1303               	bcf	3,6	;RP1=0, select bank0
  4576  0AE0  00A3               	movwf	SetDisplay@d1
  4577  0AE1                     l3148:	
  4578                           
  4579                           ;main.c: 462: void SetDisplay(char d1, char d2, char d3, char value);main.c: 463: {;main
      +                          .c: 464:     PORTAbits.RA2 = d1;
  4580  0AE1  0C23               	rrf	SetDisplay@d1,w
  4581  0AE2  1C03               	skipc
  4582  0AE3  1105               	bcf	5,2	;volatile
  4583  0AE4  1803               	skipnc
  4584  0AE5  1505               	bsf	5,2	;volatile
  4585                           
  4586                           ;main.c: 465:     PORTAbits.RA3 = d2;
  4587  0AE6  0C20               	rrf	SetDisplay@d2,w
  4588  0AE7  1C03               	skipc
  4589  0AE8  1185               	bcf	5,3	;volatile
  4590  0AE9  1803               	skipnc
  4591  0AEA  1585               	bsf	5,3	;volatile
  4592                           
  4593                           ;main.c: 466:     PORTAbits.RA4 = d3;
  4594  0AEB  0C21               	rrf	SetDisplay@d3,w
  4595  0AEC  1C03               	skipc
  4596  0AED  1205               	bcf	5,4	;volatile
  4597  0AEE  1803               	skipnc
  4598  0AEF  1605               	bsf	5,4	;volatile
  4599  0AF0                     l3150:	
  4600                           
  4601                           ;main.c: 467:     PORTD = value;
  4602  0AF0  0822               	movf	SetDisplay@value,w
  4603  0AF1  0088               	movwf	8	;volatile
  4604  0AF2                     l311:	
  4605  0AF2  0008               	return
  4606  0AF3                     __end_of_SetDisplay:	
  4607                           
  4608                           	psect	text13
  4609  0E11                     __ptext13:	
  4610 ;; *************** function _SetDefaultTimers *****************
  4611 ;; Defined at:
  4612 ;;		line 470 in file "main.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;  rosso           2    0[BANK0 ] int 
  4615 ;;  verde           2    2[BANK0 ] int 
  4616 ;;  giallo          2    4[BANK0 ] int 
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;  i               1   13[BANK0 ] unsigned char 
  4619 ;;  l               1   12[BANK0 ] unsigned char 
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  1    wreg      void 
  4622 ;; Registers used:
  4623 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4629 ;;      Params:         0       6       0       0       0
  4630 ;;      Locals:         0       2       0       0       0
  4631 ;;      Temps:          0       6       0       0       0
  4632 ;;      Totals:         0      14       0       0       0
  4633 ;;Total ram usage:       14 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    2
  4636 ;; This function calls:
  4637 ;;		Nothing
  4638 ;; This function is called by:
  4639 ;;		_main
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           
  4644                           ;psect for function _SetDefaultTimers
  4645  0E11                     _SetDefaultTimers:	
  4646  0E11                     l3064:	
  4647                           ;incstack = 0
  4648                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4649                           
  4650                           
  4651                           ;main.c: 470: void SetDefaultTimers(int rosso, int verde, int giallo);main.c: 471: {;mai
      +                          n.c: 472:     for (unsigned char l = 0; l < 16; l++)
  4652  0E11  1283               	bcf	3,5	;RP0=0, select bank0
  4653  0E12  1303               	bcf	3,6	;RP1=0, select bank0
  4654  0E13  01AC               	clrf	SetDefaultTimers@l
  4655  0E14                     l3070:	
  4656                           
  4657                           ;main.c: 473:     {;main.c: 474:         for (unsigned char i = 0; i < 3; i++)
  4658  0E14  01AD               	clrf	SetDefaultTimers@i
  4659  0E15  2E73               	goto	l3084
  4660  0E16                     l3076:	
  4661                           
  4662                           ;main.c: 479:                 (*(Semafori[l])).new_times[i] = rosso;
  4663  0E16  082C               	movf	SetDefaultTimers@l,w
  4664  0E17  00A6               	movwf	??_SetDefaultTimers
  4665  0E18  0726               	addwf	??_SetDefaultTimers,w
  4666  0E19  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4667  0E1A  0084               	movwf	4
  4668  0E1B  1383               	bcf	3,7	;select IRP bank1
  4669  0E1C  0800               	movf	0,w
  4670  0E1D  00A7               	movwf	??_SetDefaultTimers+1
  4671  0E1E  0A84               	incf	4,f
  4672  0E1F  0800               	movf	0,w
  4673  0E20  00A8               	movwf	??_SetDefaultTimers+2
  4674  0E21  082D               	movf	SetDefaultTimers@i,w
  4675  0E22  00A9               	movwf	??_SetDefaultTimers+3
  4676  0E23  0729               	addwf	??_SetDefaultTimers+3,w
  4677  0E24  0727               	addwf	??_SetDefaultTimers+1,w
  4678  0E25  00AA               	movwf	??_SetDefaultTimers+4
  4679  0E26  0828               	movf	??_SetDefaultTimers+2,w
  4680  0E27  1803               	skipnc
  4681  0E28  3E01               	addlw	1
  4682  0E29  00AB               	movwf	??_SetDefaultTimers+5
  4683  0E2A  082A               	movf	??_SetDefaultTimers+4,w
  4684  0E2B  0084               	movwf	4
  4685  0E2C  1783               	bsf	3,7
  4686  0E2D  1C2B               	btfss	??_SetDefaultTimers+5,0
  4687  0E2E  1383               	bcf	3,7
  4688  0E2F  0820               	movf	SetDefaultTimers@rosso,w
  4689  0E30  0080               	movwf	0
  4690  0E31  0A84               	incf	4,f
  4691  0E32  0821               	movf	SetDefaultTimers@rosso+1,w
  4692  0E33  0080               	movwf	0
  4693                           
  4694                           ;main.c: 480:                 break;
  4695  0E34  2E86               	goto	l3086
  4696  0E35                     l3078:	
  4697                           
  4698                           ;main.c: 482:                 (*(Semafori[l])).new_times[i] = verde;
  4699  0E35  082C               	movf	SetDefaultTimers@l,w
  4700  0E36  00A6               	movwf	??_SetDefaultTimers
  4701  0E37  0726               	addwf	??_SetDefaultTimers,w
  4702  0E38  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4703  0E39  0084               	movwf	4
  4704  0E3A  1383               	bcf	3,7	;select IRP bank1
  4705  0E3B  0800               	movf	0,w
  4706  0E3C  00A7               	movwf	??_SetDefaultTimers+1
  4707  0E3D  0A84               	incf	4,f
  4708  0E3E  0800               	movf	0,w
  4709  0E3F  00A8               	movwf	??_SetDefaultTimers+2
  4710  0E40  082D               	movf	SetDefaultTimers@i,w
  4711  0E41  00A9               	movwf	??_SetDefaultTimers+3
  4712  0E42  0729               	addwf	??_SetDefaultTimers+3,w
  4713  0E43  0727               	addwf	??_SetDefaultTimers+1,w
  4714  0E44  00AA               	movwf	??_SetDefaultTimers+4
  4715  0E45  0828               	movf	??_SetDefaultTimers+2,w
  4716  0E46  1803               	skipnc
  4717  0E47  3E01               	addlw	1
  4718  0E48  00AB               	movwf	??_SetDefaultTimers+5
  4719  0E49  082A               	movf	??_SetDefaultTimers+4,w
  4720  0E4A  0084               	movwf	4
  4721  0E4B  1783               	bsf	3,7
  4722  0E4C  1C2B               	btfss	??_SetDefaultTimers+5,0
  4723  0E4D  1383               	bcf	3,7
  4724  0E4E  0822               	movf	SetDefaultTimers@verde,w
  4725  0E4F  0080               	movwf	0
  4726  0E50  0A84               	incf	4,f
  4727  0E51  0823               	movf	SetDefaultTimers@verde+1,w
  4728  0E52  0080               	movwf	0
  4729                           
  4730                           ;main.c: 483:                 break;
  4731  0E53  2E86               	goto	l3086
  4732  0E54                     l3080:	
  4733                           
  4734                           ;main.c: 485:                 (*(Semafori[l])).new_times[i] = giallo;
  4735  0E54  082C               	movf	SetDefaultTimers@l,w
  4736  0E55  00A6               	movwf	??_SetDefaultTimers
  4737  0E56  0726               	addwf	??_SetDefaultTimers,w
  4738  0E57  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4739  0E58  0084               	movwf	4
  4740  0E59  1383               	bcf	3,7	;select IRP bank1
  4741  0E5A  0800               	movf	0,w
  4742  0E5B  00A7               	movwf	??_SetDefaultTimers+1
  4743  0E5C  0A84               	incf	4,f
  4744  0E5D  0800               	movf	0,w
  4745  0E5E  00A8               	movwf	??_SetDefaultTimers+2
  4746  0E5F  082D               	movf	SetDefaultTimers@i,w
  4747  0E60  00A9               	movwf	??_SetDefaultTimers+3
  4748  0E61  0729               	addwf	??_SetDefaultTimers+3,w
  4749  0E62  0727               	addwf	??_SetDefaultTimers+1,w
  4750  0E63  00AA               	movwf	??_SetDefaultTimers+4
  4751  0E64  0828               	movf	??_SetDefaultTimers+2,w
  4752  0E65  1803               	skipnc
  4753  0E66  3E01               	addlw	1
  4754  0E67  00AB               	movwf	??_SetDefaultTimers+5
  4755  0E68  082A               	movf	??_SetDefaultTimers+4,w
  4756  0E69  0084               	movwf	4
  4757  0E6A  1783               	bsf	3,7
  4758  0E6B  1C2B               	btfss	??_SetDefaultTimers+5,0
  4759  0E6C  1383               	bcf	3,7
  4760  0E6D  0824               	movf	SetDefaultTimers@giallo,w
  4761  0E6E  0080               	movwf	0
  4762  0E6F  0A84               	incf	4,f
  4763  0E70  0825               	movf	SetDefaultTimers@giallo+1,w
  4764  0E71  0080               	movwf	0
  4765                           
  4766                           ;main.c: 486:                 break;
  4767  0E72  2E86               	goto	l3086
  4768  0E73                     l3084:	
  4769  0E73  082D               	movf	SetDefaultTimers@i,w
  4770  0E74  00A6               	movwf	??_SetDefaultTimers
  4771  0E75  01A7               	clrf	??_SetDefaultTimers+1
  4772                           
  4773                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4774                           ; Switch size 1, requested type "simple"
  4775                           ; Number of cases is 1, Range of values is 0 to 0
  4776                           ; switch strategies available:
  4777                           ; Name         Instructions Cycles
  4778                           ; simple_byte            4     3 (average)
  4779                           ; direct_byte           11     8 (fixed)
  4780                           ; jumptable            260     6 (fixed)
  4781                           ;	Chosen strategy is simple_byte
  4782  0E76  0827               	movf	??_SetDefaultTimers+1,w
  4783  0E77  3A00               	xorlw	0	; case 0
  4784  0E78  1903               	skipnz
  4785  0E79  2E7B               	goto	l3556
  4786  0E7A  2E86               	goto	l3086
  4787  0E7B                     l3556:	
  4788                           
  4789                           ; Switch size 1, requested type "simple"
  4790                           ; Number of cases is 3, Range of values is 0 to 2
  4791                           ; switch strategies available:
  4792                           ; Name         Instructions Cycles
  4793                           ; simple_byte           10     6 (average)
  4794                           ; direct_byte           17     8 (fixed)
  4795                           ; jumptable            260     6 (fixed)
  4796                           ;	Chosen strategy is simple_byte
  4797  0E7B  0826               	movf	??_SetDefaultTimers,w
  4798  0E7C  3A00               	xorlw	0	; case 0
  4799  0E7D  1903               	skipnz
  4800  0E7E  2E16               	goto	l3076
  4801  0E7F  3A01               	xorlw	1	; case 1
  4802  0E80  1903               	skipnz
  4803  0E81  2E35               	goto	l3078
  4804  0E82  3A03               	xorlw	3	; case 2
  4805  0E83  1903               	skipnz
  4806  0E84  2E54               	goto	l3080
  4807  0E85  2E86               	goto	l3086
  4808  0E86                     l3086:	
  4809                           
  4810                           ;main.c: 488:         }
  4811  0E86  3001               	movlw	1
  4812  0E87  00A6               	movwf	??_SetDefaultTimers
  4813  0E88  0826               	movf	??_SetDefaultTimers,w
  4814  0E89  07AD               	addwf	SetDefaultTimers@i,f
  4815  0E8A                     l3088:	
  4816  0E8A  3003               	movlw	3
  4817  0E8B  022D               	subwf	SetDefaultTimers@i,w
  4818  0E8C  1C03               	skipc
  4819  0E8D  2E8F               	goto	u3121
  4820  0E8E  2E90               	goto	u3120
  4821  0E8F                     u3121:	
  4822  0E8F  2E73               	goto	l3084
  4823  0E90                     u3120:	
  4824  0E90                     l3090:	
  4825                           
  4826                           ;main.c: 489:     }
  4827  0E90  3001               	movlw	1
  4828  0E91  00A6               	movwf	??_SetDefaultTimers
  4829  0E92  0826               	movf	??_SetDefaultTimers,w
  4830  0E93  07AC               	addwf	SetDefaultTimers@l,f
  4831  0E94                     l3092:	
  4832  0E94  3010               	movlw	16
  4833  0E95  022C               	subwf	SetDefaultTimers@l,w
  4834  0E96  1C03               	skipc
  4835  0E97  2E99               	goto	u3131
  4836  0E98  2E9A               	goto	u3130
  4837  0E99                     u3131:	
  4838  0E99  2E14               	goto	l3070
  4839  0E9A                     u3130:	
  4840  0E9A                     l323:	
  4841  0E9A  0008               	return
  4842  0E9B                     __end_of_SetDefaultTimers:	
  4843                           
  4844                           	psect	text14
  4845  0C48                     __ptext14:	
  4846 ;; *************** function _GetTime *****************
  4847 ;; Defined at:
  4848 ;;		line 436 in file "main.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;  index           1    wreg     unsigned char 
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  index           1    4[BANK0 ] unsigned char 
  4853 ;;  time            2    6[BANK0 ] int 
  4854 ;;  shortInt        1    5[BANK0 ] struct .
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  2    0[BANK0 ] int 
  4857 ;; Registers used:
  4858 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4864 ;;      Params:         0       2       0       0       0
  4865 ;;      Locals:         0       4       0       0       0
  4866 ;;      Temps:          0       2       0       0       0
  4867 ;;      Totals:         0       8       0       0       0
  4868 ;;Total ram usage:        8 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:    2
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_main
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           
  4879                           ;psect for function _GetTime
  4880  0C48                     _GetTime:	
  4881                           
  4882                           ;incstack = 0
  4883                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4884                           ;GetTime@index stored from wreg
  4885  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  4886  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  4887  0C4A  00A4               	movwf	GetTime@index
  4888  0C4B                     l3124:	
  4889                           
  4890                           ;main.c: 436: int GetTime(unsigned char index);main.c: 437: {;main.c: 438:     int time;
      +                          ;main.c: 442:     } shortInt;;main.c: 444:     shortInt.Val = dataFromGateway[index + 3]
      +                           & 0x7F;
  4891  0C4B  0824               	movf	GetTime@index,w
  4892  0C4C  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4893  0C4D  0084               	movwf	4
  4894  0C4E  307F               	movlw	127
  4895  0C4F  1383               	bcf	3,7	;select IRP bank1
  4896  0C50  0500               	andwf	0,w
  4897  0C51  00A2               	movwf	??_GetTime
  4898  0C52  0825               	movf	GetTime@shortInt,w
  4899  0C53  0622               	xorwf	??_GetTime,w
  4900  0C54  3980               	andlw	-128
  4901  0C55  0622               	xorwf	??_GetTime,w
  4902  0C56  00A5               	movwf	GetTime@shortInt
  4903  0C57                     l3126:	
  4904                           
  4905                           ;main.c: 445:     time = shortInt.Val;
  4906  0C57  0825               	movf	GetTime@shortInt,w
  4907  0C58  397F               	andlw	127
  4908  0C59  00A2               	movwf	??_GetTime
  4909  0C5A  01A3               	clrf	??_GetTime+1
  4910  0C5B  0822               	movf	??_GetTime,w
  4911  0C5C  00A6               	movwf	GetTime@time
  4912  0C5D  0823               	movf	??_GetTime+1,w
  4913  0C5E  00A7               	movwf	GetTime@time+1
  4914  0C5F                     l3128:	
  4915                           
  4916                           ;main.c: 446:     time = (time << 7) & 0x80;
  4917  0C5F  0827               	movf	GetTime@time+1,w
  4918  0C60  00A3               	movwf	??_GetTime+1
  4919  0C61  0826               	movf	GetTime@time,w
  4920  0C62  00A2               	movwf	??_GetTime
  4921  0C63  3007               	movlw	7
  4922  0C64  00FF               	movwf	btemp+1
  4923  0C65                     u3175:	
  4924  0C65  1003               	clrc
  4925  0C66  0DA2               	rlf	??_GetTime,f
  4926  0C67  0DA3               	rlf	??_GetTime+1,f
  4927  0C68  0BFF               	decfsz	btemp+1,f
  4928  0C69  2C65               	goto	u3175
  4929  0C6A  3080               	movlw	128
  4930  0C6B  0522               	andwf	??_GetTime,w
  4931  0C6C  00A6               	movwf	GetTime@time
  4932  0C6D  3000               	movlw	0
  4933  0C6E  0523               	andwf	??_GetTime+1,w
  4934  0C6F  00A7               	movwf	GetTime@time+1
  4935  0C70                     l3130:	
  4936                           
  4937                           ;main.c: 448:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4938  0C70  0824               	movf	GetTime@index,w
  4939  0C71  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4940  0C72  0084               	movwf	4
  4941  0C73  307F               	movlw	127
  4942  0C74  0500               	andwf	0,w
  4943  0C75  00A2               	movwf	??_GetTime
  4944  0C76  0825               	movf	GetTime@shortInt,w
  4945  0C77  0622               	xorwf	??_GetTime,w
  4946  0C78  3980               	andlw	-128
  4947  0C79  0622               	xorwf	??_GetTime,w
  4948  0C7A  00A5               	movwf	GetTime@shortInt
  4949  0C7B                     l3132:	
  4950                           
  4951                           ;main.c: 449:     time = time | shortInt.Val;
  4952  0C7B  0825               	movf	GetTime@shortInt,w
  4953  0C7C  397F               	andlw	127
  4954  0C7D  00A2               	movwf	??_GetTime
  4955  0C7E  0826               	movf	GetTime@time,w
  4956  0C7F  0422               	iorwf	??_GetTime,w
  4957  0C80  00A6               	movwf	GetTime@time
  4958  0C81  0827               	movf	GetTime@time+1,w
  4959  0C82  00A7               	movwf	GetTime@time+1
  4960  0C83                     l3134:	
  4961                           
  4962                           ;main.c: 451:     return time;
  4963  0C83  0827               	movf	GetTime@time+1,w
  4964  0C84  00A1               	movwf	?_GetTime+1
  4965  0C85  0826               	movf	GetTime@time,w
  4966  0C86  00A0               	movwf	?_GetTime
  4967  0C87                     l305:	
  4968  0C87  0008               	return
  4969  0C88                     __end_of_GetTime:	
  4970                           
  4971                           	psect	text15
  4972  0DA6                     __ptext15:	
  4973 ;; *************** function _GetDigits *****************
  4974 ;; Defined at:
  4975 ;;		line 454 in file "main.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;  Time            2   16[BANK0 ] int 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;		None
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  1    wreg      void 
  4982 ;; Registers used:
  4983 ;;		wreg, status,2, status,0, pclath, cstack
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4989 ;;      Params:         0       2       0       0       0
  4990 ;;      Locals:         0       2       0       0       0
  4991 ;;      Temps:          0       3       0       0       0
  4992 ;;      Totals:         0       7       0       0       0
  4993 ;;Total ram usage:        7 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    3
  4996 ;; This function calls:
  4997 ;;		___awdiv
  4998 ;;		___awmod
  4999 ;; This function is called by:
  5000 ;;		_main
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function _GetDigits
  5006  0DA6                     _GetDigits:	
  5007  0DA6                     l3138:	
  5008                           ;incstack = 0
  5009                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  5010                           
  5011                           
  5012                           ;main.c: 454: void GetDigits(int Time);main.c: 455: {;main.c: 456:     countdown = Time;
  5013  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  5014  0DA7  1303               	bcf	3,6	;RP1=0, select bank0
  5015  0DA8  0830               	movf	GetDigits@Time,w
  5016  0DA9  00B2               	movwf	??_GetDigits
  5017  0DAA  0832               	movf	??_GetDigits,w
  5018  0DAB  00DA               	movwf	_countdown
  5019  0DAC                     l3140:	
  5020                           
  5021                           ;main.c: 457:     centinaia = countdown / 100;
  5022  0DAC  3064               	movlw	100
  5023  0DAD  00A7               	movwf	___awdiv@divisor
  5024  0DAE  3000               	movlw	0
  5025  0DAF  00A8               	movwf	___awdiv@divisor+1
  5026  0DB0  085A               	movf	_countdown,w
  5027  0DB1  00B2               	movwf	??_GetDigits
  5028  0DB2  01B3               	clrf	??_GetDigits+1
  5029  0DB3  0832               	movf	??_GetDigits,w
  5030  0DB4  00A9               	movwf	___awdiv@dividend
  5031  0DB5  0833               	movf	??_GetDigits+1,w
  5032  0DB6  00AA               	movwf	___awdiv@dividend+1
  5033  0DB7  120A  158A  253D  120A  158A  	fcall	___awdiv
  5034  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  5035  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  5036  0DBE  0827               	movf	?___awdiv,w
  5037  0DBF  00B4               	movwf	??_GetDigits+2
  5038  0DC0  0834               	movf	??_GetDigits+2,w
  5039  0DC1  00DD               	movwf	_centinaia
  5040  0DC2                     l3142:	
  5041                           
  5042                           ;main.c: 458:     decine = (countdown % 100) / 10;
  5043  0DC2  300A               	movlw	10
  5044  0DC3  00A7               	movwf	___awdiv@divisor
  5045  0DC4  3000               	movlw	0
  5046  0DC5  00A8               	movwf	___awdiv@divisor+1
  5047  0DC6  085A               	movf	_countdown,w
  5048  0DC7  00B2               	movwf	??_GetDigits
  5049  0DC8  01B3               	clrf	??_GetDigits+1
  5050  0DC9  0832               	movf	??_GetDigits,w
  5051  0DCA  00A2               	movwf	___awmod@dividend
  5052  0DCB  0833               	movf	??_GetDigits+1,w
  5053  0DCC  00A3               	movwf	___awmod@dividend+1
  5054  0DCD  3064               	movlw	100
  5055  0DCE  00A0               	movwf	___awmod@divisor
  5056  0DCF  3000               	movlw	0
  5057  0DD0  00A1               	movwf	___awmod@divisor+1
  5058  0DD1  120A  158A  24E2  120A  158A  	fcall	___awmod
  5059  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  5060  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  5061  0DD8  0821               	movf	?___awmod+1,w
  5062  0DD9  00AA               	movwf	___awdiv@dividend+1
  5063  0DDA  0820               	movf	?___awmod,w
  5064  0DDB  00A9               	movwf	___awdiv@dividend
  5065  0DDC  120A  158A  253D  120A  158A  	fcall	___awdiv
  5066  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  5067  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  5068  0DE3  0827               	movf	?___awdiv,w
  5069  0DE4  00B4               	movwf	??_GetDigits+2
  5070  0DE5  0834               	movf	??_GetDigits+2,w
  5071  0DE6  00DE               	movwf	_decine
  5072  0DE7                     l3144:	
  5073                           
  5074                           ;main.c: 459:     unita = (countdown % 100) % 10;
  5075  0DE7  085A               	movf	_countdown,w
  5076  0DE8  00B2               	movwf	??_GetDigits
  5077  0DE9  01B3               	clrf	??_GetDigits+1
  5078  0DEA  0832               	movf	??_GetDigits,w
  5079  0DEB  00A2               	movwf	___awmod@dividend
  5080  0DEC  0833               	movf	??_GetDigits+1,w
  5081  0DED  00A3               	movwf	___awmod@dividend+1
  5082  0DEE  3064               	movlw	100
  5083  0DEF  00A0               	movwf	___awmod@divisor
  5084  0DF0  3000               	movlw	0
  5085  0DF1  00A1               	movwf	___awmod@divisor+1
  5086  0DF2  120A  158A  24E2  120A  158A  	fcall	___awmod
  5087  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  5088  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  5089  0DF9  0821               	movf	?___awmod+1,w
  5090  0DFA  00B6               	movwf	_GetDigits$1151+1
  5091  0DFB  0820               	movf	?___awmod,w
  5092  0DFC  00B5               	movwf	_GetDigits$1151
  5093  0DFD                     l3146:	
  5094                           
  5095                           ;main.c: 459:     unita = (countdown % 100) % 10;
  5096  0DFD  300A               	movlw	10
  5097  0DFE  00A0               	movwf	___awmod@divisor
  5098  0DFF  3000               	movlw	0
  5099  0E00  00A1               	movwf	___awmod@divisor+1
  5100  0E01  0836               	movf	_GetDigits$1151+1,w
  5101  0E02  00A3               	movwf	___awmod@dividend+1
  5102  0E03  0835               	movf	_GetDigits$1151,w
  5103  0E04  00A2               	movwf	___awmod@dividend
  5104  0E05  120A  158A  24E2  120A  158A  	fcall	___awmod
  5105  0E0A  1283               	bcf	3,5	;RP0=0, select bank0
  5106  0E0B  1303               	bcf	3,6	;RP1=0, select bank0
  5107  0E0C  0820               	movf	?___awmod,w
  5108  0E0D  00B2               	movwf	??_GetDigits
  5109  0E0E  0832               	movf	??_GetDigits,w
  5110  0E0F  00DF               	movwf	_unita
  5111  0E10                     l308:	
  5112  0E10  0008               	return
  5113  0E11                     __end_of_GetDigits:	
  5114                           
  5115                           	psect	text16
  5116  0CE2                     __ptext16:	
  5117 ;; *************** function ___awmod *****************
  5118 ;; Defined at:
  5119 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  divisor         2    0[BANK0 ] int 
  5122 ;;  dividend        2    2[BANK0 ] int 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  sign            1    6[BANK0 ] unsigned char 
  5125 ;;  counter         1    5[BANK0 ] unsigned char 
  5126 ;; Return value:  Size  Location     Type
  5127 ;;                  2    0[BANK0 ] int 
  5128 ;; Registers used:
  5129 ;;		wreg, status,2, status,0
  5130 ;; Tracked objects:
  5131 ;;		On entry : 0/0
  5132 ;;		On exit  : 0/0
  5133 ;;		Unchanged: 0/0
  5134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5135 ;;      Params:         0       4       0       0       0
  5136 ;;      Locals:         0       2       0       0       0
  5137 ;;      Temps:          0       1       0       0       0
  5138 ;;      Totals:         0       7       0       0       0
  5139 ;;Total ram usage:        7 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; Hardware stack levels required when called:    2
  5142 ;; This function calls:
  5143 ;;		Nothing
  5144 ;; This function is called by:
  5145 ;;		_main
  5146 ;;		_GetDigits
  5147 ;;		_intToString
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           
  5152                           ;psect for function ___awmod
  5153  0CE2                     ___awmod:	
  5154  0CE2                     l2952:	
  5155                           ;incstack = 0
  5156                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5157                           
  5158  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
  5159  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  5160  0CE4  01A6               	clrf	___awmod@sign
  5161  0CE5                     l2954:	
  5162  0CE5  1FA3               	btfss	___awmod@dividend+1,7
  5163  0CE6  2CE8               	goto	u2931
  5164  0CE7  2CE9               	goto	u2930
  5165  0CE8                     u2931:	
  5166  0CE8  2CF0               	goto	l2960
  5167  0CE9                     u2930:	
  5168  0CE9                     l2956:	
  5169  0CE9  09A2               	comf	___awmod@dividend,f
  5170  0CEA  09A3               	comf	___awmod@dividend+1,f
  5171  0CEB  0AA2               	incf	___awmod@dividend,f
  5172  0CEC  1903               	skipnz
  5173  0CED  0AA3               	incf	___awmod@dividend+1,f
  5174  0CEE                     l2958:	
  5175  0CEE  01A6               	clrf	___awmod@sign
  5176  0CEF  0AA6               	incf	___awmod@sign,f
  5177  0CF0                     l2960:	
  5178  0CF0  1FA1               	btfss	___awmod@divisor+1,7
  5179  0CF1  2CF3               	goto	u2941
  5180  0CF2  2CF4               	goto	u2940
  5181  0CF3                     u2941:	
  5182  0CF3  2CF9               	goto	l2964
  5183  0CF4                     u2940:	
  5184  0CF4                     l2962:	
  5185  0CF4  09A0               	comf	___awmod@divisor,f
  5186  0CF5  09A1               	comf	___awmod@divisor+1,f
  5187  0CF6  0AA0               	incf	___awmod@divisor,f
  5188  0CF7  1903               	skipnz
  5189  0CF8  0AA1               	incf	___awmod@divisor+1,f
  5190  0CF9                     l2964:	
  5191  0CF9  0820               	movf	___awmod@divisor,w
  5192  0CFA  0421               	iorwf	___awmod@divisor+1,w
  5193  0CFB  1903               	btfsc	3,2
  5194  0CFC  2CFE               	goto	u2951
  5195  0CFD  2CFF               	goto	u2950
  5196  0CFE                     u2951:	
  5197  0CFE  2D2E               	goto	l2982
  5198  0CFF                     u2950:	
  5199  0CFF                     l2966:	
  5200  0CFF  01A5               	clrf	___awmod@counter
  5201  0D00  0AA5               	incf	___awmod@counter,f
  5202  0D01  2D0D               	goto	l2972
  5203  0D02                     l2968:	
  5204  0D02  3001               	movlw	1
  5205  0D03                     u2965:	
  5206  0D03  1003               	clrc
  5207  0D04  0DA0               	rlf	___awmod@divisor,f
  5208  0D05  0DA1               	rlf	___awmod@divisor+1,f
  5209  0D06  3EFF               	addlw	-1
  5210  0D07  1D03               	skipz
  5211  0D08  2D03               	goto	u2965
  5212  0D09                     l2970:	
  5213  0D09  3001               	movlw	1
  5214  0D0A  00A4               	movwf	??___awmod
  5215  0D0B  0824               	movf	??___awmod,w
  5216  0D0C  07A5               	addwf	___awmod@counter,f
  5217  0D0D                     l2972:	
  5218  0D0D  1FA1               	btfss	___awmod@divisor+1,7
  5219  0D0E  2D10               	goto	u2971
  5220  0D0F  2D11               	goto	u2970
  5221  0D10                     u2971:	
  5222  0D10  2D02               	goto	l2968
  5223  0D11                     u2970:	
  5224  0D11                     l2974:	
  5225  0D11  0821               	movf	___awmod@divisor+1,w
  5226  0D12  0223               	subwf	___awmod@dividend+1,w
  5227  0D13  1D03               	skipz
  5228  0D14  2D17               	goto	u2985
  5229  0D15  0820               	movf	___awmod@divisor,w
  5230  0D16  0222               	subwf	___awmod@dividend,w
  5231  0D17                     u2985:	
  5232  0D17  1C03               	skipc
  5233  0D18  2D1A               	goto	u2981
  5234  0D19  2D1B               	goto	u2980
  5235  0D1A                     u2981:	
  5236  0D1A  2D21               	goto	l2978
  5237  0D1B                     u2980:	
  5238  0D1B                     l2976:	
  5239  0D1B  0820               	movf	___awmod@divisor,w
  5240  0D1C  02A2               	subwf	___awmod@dividend,f
  5241  0D1D  0821               	movf	___awmod@divisor+1,w
  5242  0D1E  1C03               	skipc
  5243  0D1F  03A3               	decf	___awmod@dividend+1,f
  5244  0D20  02A3               	subwf	___awmod@dividend+1,f
  5245  0D21                     l2978:	
  5246  0D21  3001               	movlw	1
  5247  0D22                     u2995:	
  5248  0D22  1003               	clrc
  5249  0D23  0CA1               	rrf	___awmod@divisor+1,f
  5250  0D24  0CA0               	rrf	___awmod@divisor,f
  5251  0D25  3EFF               	addlw	-1
  5252  0D26  1D03               	skipz
  5253  0D27  2D22               	goto	u2995
  5254  0D28                     l2980:	
  5255  0D28  3001               	movlw	1
  5256  0D29  02A5               	subwf	___awmod@counter,f
  5257  0D2A  1D03               	btfss	3,2
  5258  0D2B  2D2D               	goto	u3001
  5259  0D2C  2D2E               	goto	u3000
  5260  0D2D                     u3001:	
  5261  0D2D  2D11               	goto	l2974
  5262  0D2E                     u3000:	
  5263  0D2E                     l2982:	
  5264  0D2E  0826               	movf	___awmod@sign,w
  5265  0D2F  1903               	btfsc	3,2
  5266  0D30  2D32               	goto	u3011
  5267  0D31  2D33               	goto	u3010
  5268  0D32                     u3011:	
  5269  0D32  2D38               	goto	l2986
  5270  0D33                     u3010:	
  5271  0D33                     l2984:	
  5272  0D33  09A2               	comf	___awmod@dividend,f
  5273  0D34  09A3               	comf	___awmod@dividend+1,f
  5274  0D35  0AA2               	incf	___awmod@dividend,f
  5275  0D36  1903               	skipnz
  5276  0D37  0AA3               	incf	___awmod@dividend+1,f
  5277  0D38                     l2986:	
  5278  0D38  0823               	movf	___awmod@dividend+1,w
  5279  0D39  00A1               	movwf	?___awmod+1
  5280  0D3A  0822               	movf	___awmod@dividend,w
  5281  0D3B  00A0               	movwf	?___awmod
  5282  0D3C                     l612:	
  5283  0D3C  0008               	return
  5284  0D3D                     __end_of___awmod:	
  5285                           
  5286                           	psect	text17
  5287  0D3D                     __ptext17:	
  5288 ;; *************** function ___awdiv *****************
  5289 ;; Defined at:
  5290 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;  divisor         2    7[BANK0 ] int 
  5293 ;;  dividend        2    9[BANK0 ] int 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  quotient        2   14[BANK0 ] int 
  5296 ;;  sign            1   13[BANK0 ] unsigned char 
  5297 ;;  counter         1   12[BANK0 ] unsigned char 
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  2    7[BANK0 ] int 
  5300 ;; Registers used:
  5301 ;;		wreg, status,2, status,0
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5307 ;;      Params:         0       4       0       0       0
  5308 ;;      Locals:         0       4       0       0       0
  5309 ;;      Temps:          0       1       0       0       0
  5310 ;;      Totals:         0       9       0       0       0
  5311 ;;Total ram usage:        9 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    2
  5314 ;; This function calls:
  5315 ;;		Nothing
  5316 ;; This function is called by:
  5317 ;;		_map
  5318 ;;		_GetDigits
  5319 ;;		_intToString
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           
  5324                           ;psect for function ___awdiv
  5325  0D3D                     ___awdiv:	
  5326  0D3D                     l2908:	
  5327                           ;incstack = 0
  5328                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5329                           
  5330  0D3D  1283               	bcf	3,5	;RP0=0, select bank0
  5331  0D3E  1303               	bcf	3,6	;RP1=0, select bank0
  5332  0D3F  01AD               	clrf	___awdiv@sign
  5333  0D40                     l2910:	
  5334  0D40  1FA8               	btfss	___awdiv@divisor+1,7
  5335  0D41  2D43               	goto	u2831
  5336  0D42  2D44               	goto	u2830
  5337  0D43                     u2831:	
  5338  0D43  2D4B               	goto	l2916
  5339  0D44                     u2830:	
  5340  0D44                     l2912:	
  5341  0D44  09A7               	comf	___awdiv@divisor,f
  5342  0D45  09A8               	comf	___awdiv@divisor+1,f
  5343  0D46  0AA7               	incf	___awdiv@divisor,f
  5344  0D47  1903               	skipnz
  5345  0D48  0AA8               	incf	___awdiv@divisor+1,f
  5346  0D49                     l2914:	
  5347  0D49  01AD               	clrf	___awdiv@sign
  5348  0D4A  0AAD               	incf	___awdiv@sign,f
  5349  0D4B                     l2916:	
  5350  0D4B  1FAA               	btfss	___awdiv@dividend+1,7
  5351  0D4C  2D4E               	goto	u2841
  5352  0D4D  2D4F               	goto	u2840
  5353  0D4E                     u2841:	
  5354  0D4E  2D58               	goto	l2922
  5355  0D4F                     u2840:	
  5356  0D4F                     l2918:	
  5357  0D4F  09A9               	comf	___awdiv@dividend,f
  5358  0D50  09AA               	comf	___awdiv@dividend+1,f
  5359  0D51  0AA9               	incf	___awdiv@dividend,f
  5360  0D52  1903               	skipnz
  5361  0D53  0AAA               	incf	___awdiv@dividend+1,f
  5362  0D54                     l2920:	
  5363  0D54  3001               	movlw	1
  5364  0D55  00AB               	movwf	??___awdiv
  5365  0D56  082B               	movf	??___awdiv,w
  5366  0D57  06AD               	xorwf	___awdiv@sign,f
  5367  0D58                     l2922:	
  5368  0D58  01AE               	clrf	___awdiv@quotient
  5369  0D59  01AF               	clrf	___awdiv@quotient+1
  5370  0D5A                     l2924:	
  5371  0D5A  0827               	movf	___awdiv@divisor,w
  5372  0D5B  0428               	iorwf	___awdiv@divisor+1,w
  5373  0D5C  1903               	btfsc	3,2
  5374  0D5D  2D5F               	goto	u2851
  5375  0D5E  2D60               	goto	u2850
  5376  0D5F                     u2851:	
  5377  0D5F  2D97               	goto	l2944
  5378  0D60                     u2850:	
  5379  0D60                     l2926:	
  5380  0D60  01AC               	clrf	___awdiv@counter
  5381  0D61  0AAC               	incf	___awdiv@counter,f
  5382  0D62  2D6E               	goto	l2932
  5383  0D63                     l2928:	
  5384  0D63  3001               	movlw	1
  5385  0D64                     u2865:	
  5386  0D64  1003               	clrc
  5387  0D65  0DA7               	rlf	___awdiv@divisor,f
  5388  0D66  0DA8               	rlf	___awdiv@divisor+1,f
  5389  0D67  3EFF               	addlw	-1
  5390  0D68  1D03               	skipz
  5391  0D69  2D64               	goto	u2865
  5392  0D6A                     l2930:	
  5393  0D6A  3001               	movlw	1
  5394  0D6B  00AB               	movwf	??___awdiv
  5395  0D6C  082B               	movf	??___awdiv,w
  5396  0D6D  07AC               	addwf	___awdiv@counter,f
  5397  0D6E                     l2932:	
  5398  0D6E  1FA8               	btfss	___awdiv@divisor+1,7
  5399  0D6F  2D71               	goto	u2871
  5400  0D70  2D72               	goto	u2870
  5401  0D71                     u2871:	
  5402  0D71  2D63               	goto	l2928
  5403  0D72                     u2870:	
  5404  0D72                     l2934:	
  5405  0D72  3001               	movlw	1
  5406  0D73                     u2885:	
  5407  0D73  1003               	clrc
  5408  0D74  0DAE               	rlf	___awdiv@quotient,f
  5409  0D75  0DAF               	rlf	___awdiv@quotient+1,f
  5410  0D76  3EFF               	addlw	-1
  5411  0D77  1D03               	skipz
  5412  0D78  2D73               	goto	u2885
  5413  0D79  0828               	movf	___awdiv@divisor+1,w
  5414  0D7A  022A               	subwf	___awdiv@dividend+1,w
  5415  0D7B  1D03               	skipz
  5416  0D7C  2D7F               	goto	u2895
  5417  0D7D  0827               	movf	___awdiv@divisor,w
  5418  0D7E  0229               	subwf	___awdiv@dividend,w
  5419  0D7F                     u2895:	
  5420  0D7F  1C03               	skipc
  5421  0D80  2D82               	goto	u2891
  5422  0D81  2D83               	goto	u2890
  5423  0D82                     u2891:	
  5424  0D82  2D8A               	goto	l2940
  5425  0D83                     u2890:	
  5426  0D83                     l2936:	
  5427  0D83  0827               	movf	___awdiv@divisor,w
  5428  0D84  02A9               	subwf	___awdiv@dividend,f
  5429  0D85  0828               	movf	___awdiv@divisor+1,w
  5430  0D86  1C03               	skipc
  5431  0D87  03AA               	decf	___awdiv@dividend+1,f
  5432  0D88  02AA               	subwf	___awdiv@dividend+1,f
  5433  0D89                     l2938:	
  5434  0D89  142E               	bsf	___awdiv@quotient,0
  5435  0D8A                     l2940:	
  5436  0D8A  3001               	movlw	1
  5437  0D8B                     u2905:	
  5438  0D8B  1003               	clrc
  5439  0D8C  0CA8               	rrf	___awdiv@divisor+1,f
  5440  0D8D  0CA7               	rrf	___awdiv@divisor,f
  5441  0D8E  3EFF               	addlw	-1
  5442  0D8F  1D03               	skipz
  5443  0D90  2D8B               	goto	u2905
  5444  0D91                     l2942:	
  5445  0D91  3001               	movlw	1
  5446  0D92  02AC               	subwf	___awdiv@counter,f
  5447  0D93  1D03               	btfss	3,2
  5448  0D94  2D96               	goto	u2911
  5449  0D95  2D97               	goto	u2910
  5450  0D96                     u2911:	
  5451  0D96  2D72               	goto	l2934
  5452  0D97                     u2910:	
  5453  0D97                     l2944:	
  5454  0D97  082D               	movf	___awdiv@sign,w
  5455  0D98  1903               	btfsc	3,2
  5456  0D99  2D9B               	goto	u2921
  5457  0D9A  2D9C               	goto	u2920
  5458  0D9B                     u2921:	
  5459  0D9B  2DA1               	goto	l2948
  5460  0D9C                     u2920:	
  5461  0D9C                     l2946:	
  5462  0D9C  09AE               	comf	___awdiv@quotient,f
  5463  0D9D  09AF               	comf	___awdiv@quotient+1,f
  5464  0D9E  0AAE               	incf	___awdiv@quotient,f
  5465  0D9F  1903               	skipnz
  5466  0DA0  0AAF               	incf	___awdiv@quotient+1,f
  5467  0DA1                     l2948:	
  5468  0DA1  082F               	movf	___awdiv@quotient+1,w
  5469  0DA2  00A8               	movwf	?___awdiv+1
  5470  0DA3  082E               	movf	___awdiv@quotient,w
  5471  0DA4  00A7               	movwf	?___awdiv
  5472  0DA5                     l599:	
  5473  0DA5  0008               	return
  5474  0DA6                     __end_of___awdiv:	
  5475                           
  5476                           	psect	text18
  5477  0B2A                     __ptext18:	
  5478 ;; *************** function _ADC_Read *****************
  5479 ;; Defined at:
  5480 ;;		line 378 in file "main.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  canale          1    wreg     unsigned char 
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;  canale          1    3[BANK0 ] unsigned char 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  2    0[BANK0 ] int 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5494 ;;      Params:         0       2       0       0       0
  5495 ;;      Locals:         0       1       0       0       0
  5496 ;;      Temps:          0       1       0       0       0
  5497 ;;      Totals:         0       4       0       0       0
  5498 ;;Total ram usage:        4 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    2
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_main
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           
  5509                           ;psect for function _ADC_Read
  5510  0B2A                     _ADC_Read:	
  5511                           
  5512                           ;incstack = 0
  5513                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5514                           ;ADC_Read@canale stored from wreg
  5515  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  5516  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  5517  0B2C  00A3               	movwf	ADC_Read@canale
  5518  0B2D                     l3114:	
  5519                           
  5520                           ;main.c: 378: int ADC_Read(char canale);main.c: 379: {;main.c: 380:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  5521  0B2D  0823               	movf	ADC_Read@canale,w
  5522  0B2E  00A2               	movwf	??_ADC_Read
  5523  0B2F  3002               	movlw	2
  5524  0B30                     u3155:	
  5525  0B30  1003               	clrc
  5526  0B31  0DA2               	rlf	??_ADC_Read,f
  5527  0B32  3EFF               	addlw	-1
  5528  0B33  1D03               	skipz
  5529  0B34  2B30               	goto	u3155
  5530  0B35  1003               	clrc
  5531  0B36  0D22               	rlf	??_ADC_Read,w
  5532  0B37  3801               	iorlw	1
  5533  0B38  009F               	movwf	31	;volatile
  5534  0B39                     l3116:	
  5535                           
  5536                           ;main.c: 381:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5537  0B39  3004               	movlw	4
  5538  0B3A  1283               	bcf	3,5	;RP0=0, select bank0
  5539  0B3B  1303               	bcf	3,6	;RP1=0, select bank0
  5540  0B3C  00A2               	movwf	??_ADC_Read
  5541  0B3D                     u3537:	
  5542  0B3D  0BA2               	decfsz	??_ADC_Read,f
  5543  0B3E  2B3D               	goto	u3537
  5544  0B3F  0000               	nop
  5545  0B40                     l3118:	
  5546                           
  5547                           ;main.c: 382:     GO_nDONE = 1;
  5548  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  5549  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  5550  0B42  151F               	bsf	31,2	;volatile
  5551  0B43                     l273:	
  5552                           ;main.c: 384:         ;
  5553                           
  5554                           
  5555                           ;main.c: 383:     while (GO_nDONE)
  5556  0B43  191F               	btfsc	31,2	;volatile
  5557  0B44  2B46               	goto	u3161
  5558  0B45  2B47               	goto	u3160
  5559  0B46                     u3161:	
  5560  0B46  2B43               	goto	l273
  5561  0B47                     u3160:	
  5562  0B47                     l3120:	
  5563                           
  5564                           ;main.c: 385:     return ADRESL + (ADRESH << 8);
  5565  0B47  081E               	movf	30,w	;volatile
  5566  0B48  00A1               	movwf	?_ADC_Read+1
  5567  0B49  1683               	bsf	3,5	;RP0=1, select bank1
  5568  0B4A  1303               	bcf	3,6	;RP1=0, select bank1
  5569  0B4B  081E               	movf	30,w	;volatile
  5570  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  5571  0B4D  1303               	bcf	3,6	;RP1=0, select bank0
  5572  0B4E  00A0               	movwf	?_ADC_Read
  5573  0B4F                     l276:	
  5574  0B4F  0008               	return
  5575  0B50                     __end_of_ADC_Read:	
  5576                           
  5577                           	psect	text19
  5578  0C88                     __ptext19:	
  5579 ;; *************** function _ISR *****************
  5580 ;; Defined at:
  5581 ;;		line 580 in file "main.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;		None
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;		None
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  1    wreg      void 
  5588 ;; Registers used:
  5589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5595 ;;      Params:         0       0       0       0       0
  5596 ;;      Locals:         0       0       0       0       0
  5597 ;;      Temps:          4       0       0       0       0
  5598 ;;      Totals:         4       0       0       0       0
  5599 ;;Total ram usage:        4 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; Hardware stack levels required when called:    1
  5602 ;; This function calls:
  5603 ;;		_UART_Read
  5604 ;;		_conteggioVeicoli
  5605 ;; This function is called by:
  5606 ;;		Interrupt level 1
  5607 ;; This function uses a non-reentrant model
  5608 ;;
  5609                           
  5610                           
  5611                           ;psect for function _ISR
  5612  0C88                     _ISR:	
  5613  0C88                     i1l2616:	
  5614                           
  5615                           ;main.c: 583:     if (RCIF && readGateway.Bit == 0)
  5616  0C88  1283               	bcf	3,5	;RP0=0, select bank0
  5617  0C89  1303               	bcf	3,6	;RP1=0, select bank0
  5618  0C8A  1E8C               	btfss	12,5	;volatile
  5619  0C8B  2C8D               	goto	u247_21
  5620  0C8C  2C8E               	goto	u247_20
  5621  0C8D                     u247_21:	
  5622  0C8D  2C97               	goto	i1l2624
  5623  0C8E                     u247_20:	
  5624  0C8E                     i1l2618:	
  5625  0C8E  1862               	btfsc	_readGateway,0
  5626  0C8F  2C91               	goto	u248_21
  5627  0C90  2C92               	goto	u248_20
  5628  0C91                     u248_21:	
  5629  0C91  2C97               	goto	i1l2624
  5630  0C92                     u248_20:	
  5631  0C92                     i1l2620:	
  5632                           
  5633                           ;main.c: 584:     {;main.c: 585:         readGateway.Bit = 1;
  5634  0C92  1462               	bsf	_readGateway,0
  5635                           
  5636                           ;main.c: 586:         readGatewayDone.Bit = 0;
  5637  0C93  1063               	bcf	_readGatewayDone,0
  5638                           
  5639                           ;main.c: 587:         readGatewayDone.Timeout = 0;
  5640  0C94  10E3               	bcf	_readGatewayDone,1
  5641  0C95                     i1l2622:	
  5642                           
  5643                           ;main.c: 588:         dataFromGatewayIndex = 0;
  5644  0C95  01D9               	clrf	_dataFromGatewayIndex
  5645                           
  5646                           ;main.c: 589:         timerReadFromGateway = 0;
  5647  0C96  01D8               	clrf	_timerReadFromGateway
  5648  0C97                     i1l2624:	
  5649                           
  5650                           ;main.c: 591:     if (RCIF && readGateway.Bit == 1)
  5651  0C97  1E8C               	btfss	12,5	;volatile
  5652  0C98  2C9A               	goto	u249_21
  5653  0C99  2C9B               	goto	u249_20
  5654  0C9A                     u249_21:	
  5655  0C9A  2CB2               	goto	i1l2634
  5656  0C9B                     u249_20:	
  5657  0C9B                     i1l2626:	
  5658  0C9B  1C62               	btfss	_readGateway,0
  5659  0C9C  2C9E               	goto	u250_21
  5660  0C9D  2C9F               	goto	u250_20
  5661  0C9E                     u250_21:	
  5662  0C9E  2CB2               	goto	i1l2634
  5663  0C9F                     u250_20:	
  5664  0C9F                     i1l2628:	
  5665                           
  5666                           ;main.c: 592:     {;main.c: 593:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  5667  0C9F  120A  158A  22B7  120A  158A  	fcall	_UART_Read
  5668  0CA4  00F6               	movwf	??_ISR
  5669  0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  5670  0CA6  1303               	bcf	3,6	;RP1=0, select bank0
  5671  0CA7  0859               	movf	_dataFromGatewayIndex,w
  5672  0CA8  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  5673  0CA9  0084               	movwf	4
  5674  0CAA  0876               	movf	??_ISR,w
  5675  0CAB  1383               	bcf	3,7	;select IRP bank1
  5676  0CAC  0080               	movwf	0
  5677  0CAD                     i1l2630:	
  5678                           
  5679                           ;main.c: 594:         dataFromGatewayIndex++;
  5680  0CAD  3001               	movlw	1
  5681  0CAE  00F6               	movwf	??_ISR
  5682  0CAF  0876               	movf	??_ISR,w
  5683  0CB0  07D9               	addwf	_dataFromGatewayIndex,f
  5684  0CB1                     i1l2632:	
  5685                           
  5686                           ;main.c: 595:         timerReadFromGateway = 0;
  5687  0CB1  01D8               	clrf	_timerReadFromGateway
  5688  0CB2                     i1l2634:	
  5689                           
  5690                           ;main.c: 600:     if (TMR0IF)
  5691  0CB2  1D0B               	btfss	11,2	;volatile
  5692  0CB3  2CB5               	goto	u251_21
  5693  0CB4  2CB6               	goto	u251_20
  5694  0CB5                     u251_21:	
  5695  0CB5  2CC0               	goto	i1l2642
  5696  0CB6                     u251_20:	
  5697  0CB6                     i1l2636:	
  5698                           
  5699                           ;main.c: 601:     {;main.c: 602:         TMR0IF = 0;
  5700  0CB6  110B               	bcf	11,2	;volatile
  5701  0CB7                     i1l2638:	
  5702                           
  5703                           ;main.c: 603:         conteggioVeicoli();
  5704  0CB7  120A  118A  2641  120A  158A  	fcall	_conteggioVeicoli
  5705  0CBC                     i1l2640:	
  5706                           
  5707                           ;main.c: 604:         TMR0 = 6;
  5708  0CBC  3006               	movlw	6
  5709  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  5710  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  5711  0CBF  0081               	movwf	1	;volatile
  5712  0CC0                     i1l2642:	
  5713                           
  5714                           ;main.c: 607:     if (TMR1IF)
  5715  0CC0  1C0C               	btfss	12,0	;volatile
  5716  0CC1  2CC3               	goto	u252_21
  5717  0CC2  2CC4               	goto	u252_20
  5718  0CC3                     u252_21:	
  5719  0CC3  2CD9               	goto	i1l360
  5720  0CC4                     u252_20:	
  5721  0CC4                     i1l2644:	
  5722                           
  5723                           ;main.c: 608:     {;main.c: 609:         TMR1IF = 0;
  5724  0CC4  100C               	bcf	12,0	;volatile
  5725  0CC5                     i1l2646:	
  5726                           
  5727                           ;main.c: 610:         count_lux++;
  5728  0CC5  3001               	movlw	1
  5729  0CC6  00F6               	movwf	??_ISR
  5730  0CC7  0876               	movf	??_ISR,w
  5731  0CC8  07F4               	addwf	_count_lux,f
  5732  0CC9                     i1l2648:	
  5733                           
  5734                           ;main.c: 612:         if (count_lux >= 20)
  5735  0CC9  3014               	movlw	20
  5736  0CCA  0274               	subwf	_count_lux,w
  5737  0CCB  1C03               	skipc
  5738  0CCC  2CCE               	goto	u253_21
  5739  0CCD  2CCF               	goto	u253_20
  5740  0CCE                     u253_21:	
  5741  0CCE  2CD5               	goto	i1l2656
  5742  0CCF                     u253_20:	
  5743  0CCF                     i1l2650:	
  5744                           
  5745                           ;main.c: 613:         {;main.c: 614:             secondPassed.Bit = 1;
  5746  0CCF  1461               	bsf	_secondPassed,0
  5747  0CD0                     i1l2652:	
  5748                           
  5749                           ;main.c: 615:             count_lux = 0;
  5750  0CD0  01F4               	clrf	_count_lux
  5751  0CD1                     i1l2654:	
  5752                           
  5753                           ;main.c: 616:             timerReadFromGateway++;
  5754  0CD1  3001               	movlw	1
  5755  0CD2  00F6               	movwf	??_ISR
  5756  0CD3  0876               	movf	??_ISR,w
  5757  0CD4  07D8               	addwf	_timerReadFromGateway,f
  5758  0CD5                     i1l2656:	
  5759                           
  5760                           ;main.c: 619:         TMR1H = 60;
  5761  0CD5  303C               	movlw	60
  5762  0CD6  008F               	movwf	15	;volatile
  5763  0CD7                     i1l2658:	
  5764                           
  5765                           ;main.c: 620:         TMR1L = 176;
  5766  0CD7  30B0               	movlw	176
  5767  0CD8  008E               	movwf	14	;volatile
  5768  0CD9                     i1l360:	
  5769  0CD9  0879               	movf	??_ISR+3,w
  5770  0CDA  008A               	movwf	10
  5771  0CDB  0878               	movf	??_ISR+2,w
  5772  0CDC  0084               	movwf	4
  5773  0CDD  0E77               	swapf	(??_ISR+1)^(0+4294967168),w
  5774  0CDE  0083               	movwf	3
  5775  0CDF  0EFE               	swapf	btemp,f
  5776  0CE0  0E7E               	swapf	btemp,w
  5777  0CE1  0009               	retfie
  5778  0CE2                     __end_of_ISR:	
  5779                           
  5780                           	psect	intentry
  5781  0004                     __pintentry:	
  5782                           ;incstack = 0
  5783                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5784                           
  5785  0004                     interrupt_function:	
  5786  007E                     saved_w	set	btemp
  5787  0004  00FE               	movwf	btemp
  5788  0005  0E03               	swapf	3,w
  5789  0006  00F7               	movwf	??_ISR+1
  5790  0007  0804               	movf	4,w
  5791  0008  00F8               	movwf	??_ISR+2
  5792  0009  080A               	movf	10,w
  5793  000A  00F9               	movwf	??_ISR+3
  5794  000B  120A  158A  2C88   	ljmp	_ISR
  5795                           
  5796                           	psect	text20
  5797  0641                     __ptext20:	
  5798 ;; *************** function _conteggioVeicoli *****************
  5799 ;; Defined at:
  5800 ;;		line 492 in file "main.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;		None
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      void 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5814 ;;      Params:         0       0       0       0       0
  5815 ;;      Locals:         0       0       0       0       0
  5816 ;;      Temps:          1       0       0       0       0
  5817 ;;      Totals:         1       0       0       0       0
  5818 ;;Total ram usage:        1 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; This function calls:
  5821 ;;		Nothing
  5822 ;; This function is called by:
  5823 ;;		_ISR
  5824 ;; This function uses a non-reentrant model
  5825 ;;
  5826                           
  5827                           
  5828                           ;psect for function _conteggioVeicoli
  5829  0641                     _conteggioVeicoli:	
  5830  0641                     i1l2256:	
  5831                           ;incstack = 0
  5832                           ; Regs used in _conteggioVeicoli: [wreg+status,2+status,0]
  5833                           
  5834                           
  5835                           ;main.c: 495:     if (!PORTBbits.RB3)
  5836  0641  1283               	bcf	3,5	;RP0=0, select bank0
  5837  0642  1303               	bcf	3,6	;RP1=0, select bank0
  5838  0643  1986               	btfsc	6,3	;volatile
  5839  0644  2E46               	goto	u193_21
  5840  0645  2E47               	goto	u193_20
  5841  0646                     u193_21:	
  5842  0646  2E4E               	goto	i1l326
  5843  0647                     u193_20:	
  5844  0647                     i1l2258:	
  5845                           
  5846                           ;main.c: 496:     {;main.c: 497:         count++;
  5847  0647  3001               	movlw	1
  5848  0648  07F0               	addwf	_count,f
  5849  0649  1803               	skipnc
  5850  064A  0AF1               	incf	_count+1,f
  5851  064B  3000               	movlw	0
  5852  064C  07F1               	addwf	_count+1,f
  5853                           
  5854                           ;main.c: 498:     }
  5855  064D  2E7B               	goto	i1l2274
  5856  064E                     i1l326:	
  5857                           ;main.c: 499:     else if (PORTBbits.RB3)
  5858                           
  5859  064E  1D86               	btfss	6,3	;volatile
  5860  064F  2E51               	goto	u194_21
  5861  0650  2E52               	goto	u194_20
  5862  0651                     u194_21:	
  5863  0651  2E7B               	goto	i1l2274
  5864  0652                     u194_20:	
  5865  0652                     i1l2260:	
  5866                           
  5867                           ;main.c: 500:     {;main.c: 501:         if (count >= 500)
  5868  0652  3001               	movlw	1
  5869  0653  0271               	subwf	_count+1,w
  5870  0654  30F4               	movlw	244
  5871  0655  1903               	skipnz
  5872  0656  0270               	subwf	_count,w
  5873  0657  1C03               	skipc
  5874  0658  2E5A               	goto	u195_21
  5875  0659  2E5B               	goto	u195_20
  5876  065A                     u195_21:	
  5877  065A  2E5F               	goto	i1l2264
  5878  065B                     u195_20:	
  5879  065B                     i1l2262:	
  5880                           
  5881                           ;main.c: 502:         {;main.c: 503:             motorcycle[0]++;
  5882  065B  3001               	movlw	1
  5883  065C  00F5               	movwf	??_conteggioVeicoli
  5884  065D  0875               	movf	??_conteggioVeicoli,w
  5885  065E  07D4               	addwf	_motorcycle,f
  5886  065F                     i1l2264:	
  5887                           
  5888                           ;main.c: 505:         if (count >= 1500)
  5889  065F  3005               	movlw	5
  5890  0660  0271               	subwf	_count+1,w
  5891  0661  30DC               	movlw	220
  5892  0662  1903               	skipnz
  5893  0663  0270               	subwf	_count,w
  5894  0664  1C03               	skipc
  5895  0665  2E67               	goto	u196_21
  5896  0666  2E68               	goto	u196_20
  5897  0667                     u196_21:	
  5898  0667  2E6C               	goto	i1l2268
  5899  0668                     u196_20:	
  5900  0668                     i1l2266:	
  5901                           
  5902                           ;main.c: 506:         {;main.c: 507:             car[0]++;
  5903  0668  3001               	movlw	1
  5904  0669  00F5               	movwf	??_conteggioVeicoli
  5905  066A  0875               	movf	??_conteggioVeicoli,w
  5906  066B  07D0               	addwf	_car,f
  5907  066C                     i1l2268:	
  5908                           
  5909                           ;main.c: 509:         if (count >= 3000)
  5910  066C  300B               	movlw	11
  5911  066D  0271               	subwf	_count+1,w
  5912  066E  30B8               	movlw	184
  5913  066F  1903               	skipnz
  5914  0670  0270               	subwf	_count,w
  5915  0671  1C03               	skipc
  5916  0672  2E74               	goto	u197_21
  5917  0673  2E75               	goto	u197_20
  5918  0674                     u197_21:	
  5919  0674  2E79               	goto	i1l2272
  5920  0675                     u197_20:	
  5921  0675                     i1l2270:	
  5922                           
  5923                           ;main.c: 510:         {;main.c: 511:             truck[0]++;
  5924  0675  3001               	movlw	1
  5925  0676  00F5               	movwf	??_conteggioVeicoli
  5926  0677  0875               	movf	??_conteggioVeicoli,w
  5927  0678  07CC               	addwf	_truck,f
  5928  0679                     i1l2272:	
  5929                           
  5930                           ;main.c: 513:         count = 0;
  5931  0679  01F0               	clrf	_count
  5932  067A  01F1               	clrf	_count+1
  5933  067B                     i1l2274:	
  5934                           
  5935                           ;main.c: 516:     if (!PORTBbits.RB4)
  5936  067B  1A06               	btfsc	6,4	;volatile
  5937  067C  2E7E               	goto	u198_21
  5938  067D  2E7F               	goto	u198_20
  5939  067E                     u198_21:	
  5940  067E  2E86               	goto	i1l332
  5941  067F                     u198_20:	
  5942  067F                     i1l2276:	
  5943                           
  5944                           ;main.c: 517:     {;main.c: 518:         count++;
  5945  067F  3001               	movlw	1
  5946  0680  07F0               	addwf	_count,f
  5947  0681  1803               	skipnc
  5948  0682  0AF1               	incf	_count+1,f
  5949  0683  3000               	movlw	0
  5950  0684  07F1               	addwf	_count+1,f
  5951                           
  5952                           ;main.c: 519:     }
  5953  0685  2EB3               	goto	i1l2292
  5954  0686                     i1l332:	
  5955                           ;main.c: 520:     else if (PORTBbits.RB4)
  5956                           
  5957  0686  1E06               	btfss	6,4	;volatile
  5958  0687  2E89               	goto	u199_21
  5959  0688  2E8A               	goto	u199_20
  5960  0689                     u199_21:	
  5961  0689  2EB3               	goto	i1l2292
  5962  068A                     u199_20:	
  5963  068A                     i1l2278:	
  5964                           
  5965                           ;main.c: 521:     {;main.c: 522:         if (count >= 500)
  5966  068A  3001               	movlw	1
  5967  068B  0271               	subwf	_count+1,w
  5968  068C  30F4               	movlw	244
  5969  068D  1903               	skipnz
  5970  068E  0270               	subwf	_count,w
  5971  068F  1C03               	skipc
  5972  0690  2E92               	goto	u200_21
  5973  0691  2E93               	goto	u200_20
  5974  0692                     u200_21:	
  5975  0692  2E97               	goto	i1l2282
  5976  0693                     u200_20:	
  5977  0693                     i1l2280:	
  5978                           
  5979                           ;main.c: 523:         {;main.c: 524:             motorcycle[1]++;
  5980  0693  3001               	movlw	1
  5981  0694  00F5               	movwf	??_conteggioVeicoli
  5982  0695  0875               	movf	??_conteggioVeicoli,w
  5983  0696  07D5               	addwf	_motorcycle+1,f
  5984  0697                     i1l2282:	
  5985                           
  5986                           ;main.c: 526:         if (count >= 1500)
  5987  0697  3005               	movlw	5
  5988  0698  0271               	subwf	_count+1,w
  5989  0699  30DC               	movlw	220
  5990  069A  1903               	skipnz
  5991  069B  0270               	subwf	_count,w
  5992  069C  1C03               	skipc
  5993  069D  2E9F               	goto	u201_21
  5994  069E  2EA0               	goto	u201_20
  5995  069F                     u201_21:	
  5996  069F  2EA4               	goto	i1l2286
  5997  06A0                     u201_20:	
  5998  06A0                     i1l2284:	
  5999                           
  6000                           ;main.c: 527:         {;main.c: 528:             car[1]++;
  6001  06A0  3001               	movlw	1
  6002  06A1  00F5               	movwf	??_conteggioVeicoli
  6003  06A2  0875               	movf	??_conteggioVeicoli,w
  6004  06A3  07D1               	addwf	_car+1,f
  6005  06A4                     i1l2286:	
  6006                           
  6007                           ;main.c: 530:         if (count >= 3000)
  6008  06A4  300B               	movlw	11
  6009  06A5  0271               	subwf	_count+1,w
  6010  06A6  30B8               	movlw	184
  6011  06A7  1903               	skipnz
  6012  06A8  0270               	subwf	_count,w
  6013  06A9  1C03               	skipc
  6014  06AA  2EAC               	goto	u202_21
  6015  06AB  2EAD               	goto	u202_20
  6016  06AC                     u202_21:	
  6017  06AC  2EB1               	goto	i1l2290
  6018  06AD                     u202_20:	
  6019  06AD                     i1l2288:	
  6020                           
  6021                           ;main.c: 531:         {;main.c: 532:             truck[1]++;
  6022  06AD  3001               	movlw	1
  6023  06AE  00F5               	movwf	??_conteggioVeicoli
  6024  06AF  0875               	movf	??_conteggioVeicoli,w
  6025  06B0  07CD               	addwf	_truck+1,f
  6026  06B1                     i1l2290:	
  6027                           
  6028                           ;main.c: 534:         count = 0;
  6029  06B1  01F0               	clrf	_count
  6030  06B2  01F1               	clrf	_count+1
  6031  06B3                     i1l2292:	
  6032                           
  6033                           ;main.c: 537:     if (!PORTBbits.RB5)
  6034  06B3  1A86               	btfsc	6,5	;volatile
  6035  06B4  2EB6               	goto	u203_21
  6036  06B5  2EB7               	goto	u203_20
  6037  06B6                     u203_21:	
  6038  06B6  2EBE               	goto	i1l338
  6039  06B7                     u203_20:	
  6040  06B7                     i1l2294:	
  6041                           
  6042                           ;main.c: 538:     {;main.c: 539:         count++;
  6043  06B7  3001               	movlw	1
  6044  06B8  07F0               	addwf	_count,f
  6045  06B9  1803               	skipnc
  6046  06BA  0AF1               	incf	_count+1,f
  6047  06BB  3000               	movlw	0
  6048  06BC  07F1               	addwf	_count+1,f
  6049                           
  6050                           ;main.c: 540:     }
  6051  06BD  2EEB               	goto	i1l2310
  6052  06BE                     i1l338:	
  6053                           ;main.c: 541:     else if (PORTBbits.RB5)
  6054                           
  6055  06BE  1E86               	btfss	6,5	;volatile
  6056  06BF  2EC1               	goto	u204_21
  6057  06C0  2EC2               	goto	u204_20
  6058  06C1                     u204_21:	
  6059  06C1  2EEB               	goto	i1l2310
  6060  06C2                     u204_20:	
  6061  06C2                     i1l2296:	
  6062                           
  6063                           ;main.c: 542:     {;main.c: 543:         if (count >= 500)
  6064  06C2  3001               	movlw	1
  6065  06C3  0271               	subwf	_count+1,w
  6066  06C4  30F4               	movlw	244
  6067  06C5  1903               	skipnz
  6068  06C6  0270               	subwf	_count,w
  6069  06C7  1C03               	skipc
  6070  06C8  2ECA               	goto	u205_21
  6071  06C9  2ECB               	goto	u205_20
  6072  06CA                     u205_21:	
  6073  06CA  2ECF               	goto	i1l2300
  6074  06CB                     u205_20:	
  6075  06CB                     i1l2298:	
  6076                           
  6077                           ;main.c: 544:         {;main.c: 545:             motorcycle[2]++;
  6078  06CB  3001               	movlw	1
  6079  06CC  00F5               	movwf	??_conteggioVeicoli
  6080  06CD  0875               	movf	??_conteggioVeicoli,w
  6081  06CE  07D6               	addwf	_motorcycle+2,f
  6082  06CF                     i1l2300:	
  6083                           
  6084                           ;main.c: 547:         if (count >= 1500)
  6085  06CF  3005               	movlw	5
  6086  06D0  0271               	subwf	_count+1,w
  6087  06D1  30DC               	movlw	220
  6088  06D2  1903               	skipnz
  6089  06D3  0270               	subwf	_count,w
  6090  06D4  1C03               	skipc
  6091  06D5  2ED7               	goto	u206_21
  6092  06D6  2ED8               	goto	u206_20
  6093  06D7                     u206_21:	
  6094  06D7  2EDC               	goto	i1l2304
  6095  06D8                     u206_20:	
  6096  06D8                     i1l2302:	
  6097                           
  6098                           ;main.c: 548:         {;main.c: 549:             car[2]++;
  6099  06D8  3001               	movlw	1
  6100  06D9  00F5               	movwf	??_conteggioVeicoli
  6101  06DA  0875               	movf	??_conteggioVeicoli,w
  6102  06DB  07D2               	addwf	_car+2,f
  6103  06DC                     i1l2304:	
  6104                           
  6105                           ;main.c: 551:         if (count >= 3000)
  6106  06DC  300B               	movlw	11
  6107  06DD  0271               	subwf	_count+1,w
  6108  06DE  30B8               	movlw	184
  6109  06DF  1903               	skipnz
  6110  06E0  0270               	subwf	_count,w
  6111  06E1  1C03               	skipc
  6112  06E2  2EE4               	goto	u207_21
  6113  06E3  2EE5               	goto	u207_20
  6114  06E4                     u207_21:	
  6115  06E4  2EE9               	goto	i1l2308
  6116  06E5                     u207_20:	
  6117  06E5                     i1l2306:	
  6118                           
  6119                           ;main.c: 552:         {;main.c: 553:             truck[2]++;
  6120  06E5  3001               	movlw	1
  6121  06E6  00F5               	movwf	??_conteggioVeicoli
  6122  06E7  0875               	movf	??_conteggioVeicoli,w
  6123  06E8  07CE               	addwf	_truck+2,f
  6124  06E9                     i1l2308:	
  6125                           
  6126                           ;main.c: 555:         count = 0;
  6127  06E9  01F0               	clrf	_count
  6128  06EA  01F1               	clrf	_count+1
  6129  06EB                     i1l2310:	
  6130                           
  6131                           ;main.c: 558:     if (!PORTAbits.RA5)
  6132  06EB  1A85               	btfsc	5,5	;volatile
  6133  06EC  2EEE               	goto	u208_21
  6134  06ED  2EEF               	goto	u208_20
  6135  06EE                     u208_21:	
  6136  06EE  2EF6               	goto	i1l344
  6137  06EF                     u208_20:	
  6138  06EF                     i1l2312:	
  6139                           
  6140                           ;main.c: 559:     {;main.c: 560:         count++;
  6141  06EF  3001               	movlw	1
  6142  06F0  07F0               	addwf	_count,f
  6143  06F1  1803               	skipnc
  6144  06F2  0AF1               	incf	_count+1,f
  6145  06F3  3000               	movlw	0
  6146  06F4  07F1               	addwf	_count+1,f
  6147                           
  6148                           ;main.c: 561:     }
  6149  06F5  2F23               	goto	i1l350
  6150  06F6                     i1l344:	
  6151                           ;main.c: 562:     else if (PORTAbits.RA5)
  6152                           
  6153  06F6  1E85               	btfss	5,5	;volatile
  6154  06F7  2EF9               	goto	u209_21
  6155  06F8  2EFA               	goto	u209_20
  6156  06F9                     u209_21:	
  6157  06F9  2F23               	goto	i1l350
  6158  06FA                     u209_20:	
  6159  06FA                     i1l2314:	
  6160                           
  6161                           ;main.c: 563:     {;main.c: 564:         if (count >= 500)
  6162  06FA  3001               	movlw	1
  6163  06FB  0271               	subwf	_count+1,w
  6164  06FC  30F4               	movlw	244
  6165  06FD  1903               	skipnz
  6166  06FE  0270               	subwf	_count,w
  6167  06FF  1C03               	skipc
  6168  0700  2F02               	goto	u210_21
  6169  0701  2F03               	goto	u210_20
  6170  0702                     u210_21:	
  6171  0702  2F07               	goto	i1l2318
  6172  0703                     u210_20:	
  6173  0703                     i1l2316:	
  6174                           
  6175                           ;main.c: 565:         {;main.c: 566:             motorcycle[3]++;
  6176  0703  3001               	movlw	1
  6177  0704  00F5               	movwf	??_conteggioVeicoli
  6178  0705  0875               	movf	??_conteggioVeicoli,w
  6179  0706  07D7               	addwf	_motorcycle+3,f
  6180  0707                     i1l2318:	
  6181                           
  6182                           ;main.c: 568:         if (count >= 1500)
  6183  0707  3005               	movlw	5
  6184  0708  0271               	subwf	_count+1,w
  6185  0709  30DC               	movlw	220
  6186  070A  1903               	skipnz
  6187  070B  0270               	subwf	_count,w
  6188  070C  1C03               	skipc
  6189  070D  2F0F               	goto	u211_21
  6190  070E  2F10               	goto	u211_20
  6191  070F                     u211_21:	
  6192  070F  2F14               	goto	i1l2322
  6193  0710                     u211_20:	
  6194  0710                     i1l2320:	
  6195                           
  6196                           ;main.c: 569:         {;main.c: 570:             car[3]++;
  6197  0710  3001               	movlw	1
  6198  0711  00F5               	movwf	??_conteggioVeicoli
  6199  0712  0875               	movf	??_conteggioVeicoli,w
  6200  0713  07D3               	addwf	_car+3,f
  6201  0714                     i1l2322:	
  6202                           
  6203                           ;main.c: 572:         if (count >= 3000)
  6204  0714  300B               	movlw	11
  6205  0715  0271               	subwf	_count+1,w
  6206  0716  30B8               	movlw	184
  6207  0717  1903               	skipnz
  6208  0718  0270               	subwf	_count,w
  6209  0719  1C03               	skipc
  6210  071A  2F1C               	goto	u212_21
  6211  071B  2F1D               	goto	u212_20
  6212  071C                     u212_21:	
  6213  071C  2F21               	goto	i1l2326
  6214  071D                     u212_20:	
  6215  071D                     i1l2324:	
  6216                           
  6217                           ;main.c: 573:         {;main.c: 574:             truck[3]++;
  6218  071D  3001               	movlw	1
  6219  071E  00F5               	movwf	??_conteggioVeicoli
  6220  071F  0875               	movf	??_conteggioVeicoli,w
  6221  0720  07CF               	addwf	_truck+3,f
  6222  0721                     i1l2326:	
  6223                           
  6224                           ;main.c: 576:         count = 0;
  6225  0721  01F0               	clrf	_count
  6226  0722  01F1               	clrf	_count+1
  6227  0723                     i1l350:	
  6228  0723  0008               	return
  6229  0724                     __end_of_conteggioVeicoli:	
  6230                           
  6231                           	psect	text21
  6232  0AB7                     __ptext21:	
  6233 ;; *************** function _UART_Read *****************
  6234 ;; Defined at:
  6235 ;;		line 417 in file "main.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;		None
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;		None
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  1    wreg      unsigned char 
  6242 ;; Registers used:
  6243 ;;		wreg
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6249 ;;      Params:         0       0       0       0       0
  6250 ;;      Locals:         0       0       0       0       0
  6251 ;;      Temps:          0       0       0       0       0
  6252 ;;      Totals:         0       0       0       0       0
  6253 ;;Total ram usage:        0 bytes
  6254 ;; Hardware stack levels used:    1
  6255 ;; This function calls:
  6256 ;;		Nothing
  6257 ;; This function is called by:
  6258 ;;		_ISR
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           
  6263                           ;psect for function _UART_Read
  6264  0AB7                     _UART_Read:	
  6265  0AB7                     i1l2250:	
  6266                           ;incstack = 0
  6267                           ; Regs used in _UART_Read: [wreg]
  6268                           
  6269  0AB7                     i1l294:	
  6270                           ;main.c: 420:         ;
  6271                           
  6272                           
  6273                           ;main.c: 419:     while (!RCIF)
  6274  0AB7  1283               	bcf	3,5	;RP0=0, select bank0
  6275  0AB8  1303               	bcf	3,6	;RP1=0, select bank0
  6276  0AB9  1E8C               	btfss	12,5	;volatile
  6277  0ABA  2ABC               	goto	u192_21
  6278  0ABB  2ABD               	goto	u192_20
  6279  0ABC                     u192_21:	
  6280  0ABC  2AB7               	goto	i1l294
  6281  0ABD                     u192_20:	
  6282  0ABD                     i1l296:	
  6283                           
  6284                           ;main.c: 421:     RCIF = 0;
  6285  0ABD  128C               	bcf	12,5	;volatile
  6286  0ABE                     i1l2252:	
  6287                           
  6288                           ;main.c: 422:     return RCREG;
  6289  0ABE  081A               	movf	26,w	;volatile
  6290  0ABF                     i1l297:	
  6291  0ABF  0008               	return
  6292  0AC0                     __end_of_UART_Read:	
  6293  007E                     btemp	set	126	;btemp
  6294  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        33
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     44      69
    BANK1            80      0      71
    BANK3            96      0      96
    BANK2            96     20      92

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   18583
                                             28 BANK0     16    16      0
                                              0 BANK2     20    20      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                          _bitParita
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    4067
                                             20 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1138
                                              0 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4368
                                             16 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1636
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1113
                                              4 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     276
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             15 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3    1204
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    14     8      6     716
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              8     6      2     232
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             16 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              1 COMMON     4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   _bitParita
     _bitChange
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     14      5C      11       95.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     152      12        0.0%
ABS                  0      0     152       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Jun 22 14:53:23 2020

                        pc 0002             ___bmul@product 0022                __CFG_CP$OFF 0000  
                       l83 0C0D                         l98 0BA7               ___awdiv@sign 002D  
                       _s0 00BB                         _s1 00AF                         _s2 01E4  
                       _s3 01D8                         _s4 01CC                         _s5 01C0  
                       _s6 01B4                         _s7 01A8                         _s8 019C  
                       _s9 0190                         fsr 0004        ___wmul@multiplicand 0022  
           _GetDigits$1151 0035                __CFG_LVP$ON 0000                        l110 07AB  
                      l111 07B7                        l113 07EC                        l105 075B  
                      l106 0767                        l212 0331                        l125 0FD7  
                      l302 0BD8                        l214 009B                        l311 0AF2  
                      l119 0F86                        l128 0FFF                        l305 0C87  
                      l234 03CD                        l323 0E9A                        l308 0E10  
                      l228 0228                        l270 0ADD                        l511 0EAF  
                      l263 0634                        l239 04C4                        l273 0B43  
                      l521 0F37                        l282 0AC3                        l276 0B4F  
                      l612 0D3C                        l284 0AC7                        l285 0ACA  
                      l446 0B5E                        l279 0C47                        l472 0B09  
                      l448 0B76                        l599 0DA5               __CFG_CPD$OFF 0000  
                      _ISR 0C88                        _s10 014C                        _s11 0140  
                      _s12 0134                        _s13 0128                        _s14 011C  
                      _s15 0110                        _car 0050                        _map 0BD9  
                      fsr0 0004                        indf 0000               ___awmod@sign 0026  
             __CFG_FOSC$HS 0000                       ?_ISR 0075                main@colorId 0159  
                     l3000 072E                       l3010 074E                       l3012 0761  
                     l3100 0BBE                       l3030 0782                       l3014 0763  
                     l3006 0732                       l3110 0BCE                       l3120 0B47  
                     l3040 07BD                       l3032 0798                       l3024 077E  
                     l3016 076D                       l3008 0748                       l3112 0BD2  
                     l3200 008A                       l3114 0B2D                       l3130 0C70  
                     l3042 07CA                       l3034 079E                       l3018 077A  
                     l3050 0AD2                       l3106 0BBF                       l3210 0092  
                     l3202 008C                       l3116 0B39                       l3140 0DAC  
                     l3132 0C7B                       l3124 0C4B                       l3060 0C45  
                     l3044 07D1                       l3036 07B1                       l3052 0AD6  
                     l3108 0BC8                       l3300 0338                       l3212 0092  
                     l3204 008F                       l3118 0B40                       l3142 0DC2  
                     l3134 0C83                       l3126 0C57                       l3070 0E14  
                     l3150 0AF0                       l3062 0C46                       l3054 0C0E  
                     l3038 07B3                       l3046 0ACB                       l3310 0349  
                     l3302 033A                       l3230 0177                       l3214 0095  
                     l3206 0092                       l3144 0DE7                       l3128 0C5F  
                     l3080 0E54                       l3064 0E11                       l3056 0C16  
                     l3160 0B01                       l3152 0AF6                       l3048 0ACF  
                     l3400 05FC                       l3320 037D                       l3304 033E  
                     l3240 01E8                       l3224 00A2                       l3208 0092  
                     l3146 0DFD                       l3138 0DA6                       l3090 0E90  
                     l3058 0C44                       l3162 0B08                       l3154 0AF7  
                     l3410 0638                       l3402 0612                       l3330 03D3  
                     l3322 0388                       l3314 0350                       l3306 0340  
                     l3242 01EC                       l3226 00E9                       l3234 01BE  
                     l3218 009D                       l3092 0E94                       l3076 0E16  
                     l3084 0E73                       l3148 0AE1                       l3156 0AFB  
                     l3412 063C                       l3404 062A                       l3332 03D4  
                     l3324 039A                       l3316 0365                       l3308 0346  
                     l3260 021F                       l3252 0210                       l3228 0130  
                     l3236 01D3                       l3180 0056                       l3078 0E35  
                     l3086 0E86                       l3158 0AFF                       l3406 062E  
                     l3350 048C                       l3342 03E3                       l3326 03C6  
                     l3318 0371                       l3270 02E0                       l3254 0213  
                     l3246 01FA                       l3238 01DB                       l3190 0061  
                     l3182 0057                       l3088 0E8A                       l3408 0632  
                     l3360 04C9                       l3344 0438                       l3336 03DB  
                     l3280 0300                       l3272 02F1                       l3264 022A  
                     l3248 0209                       l3192 0063                       l3184 0059  
                     l2810 0F94                       l2802 0F5F                       l3098 0BAB  
                     l3370 0512                       l3362 04CD                       l3346 0485  
                     l3338 03DC                       l3354 0495                       l3290 0318  
                     l3274 02F4                       l3266 02BE                       l3258 021A  
                     l3194 0068                       l3186 005B                       l3178 0050  
                     l2900 0F1F                       l2804 0F73                       l3372 0516  
                     l3364 04D5                       l3380 058E                       l3356 049C  
                     l3284 0309                       l3268 02CF                       l3196 0073  
                     l3188 005D                       l2910 0D40                       l2902 0F24  
                     l2830 0FB0                       l2814 0F95                       l2806 0F79  
                     l3390 05B9                       l3382 0596                       l3374 051E  
                     l3366 04D6                       l3358 04BF                       l3286 030F  
                     l3278 02FB                       l3550 01C5                       l3294 031C  
                     l3198 0086                       l2920 0D54                       l2912 0D44  
                     l2904 0F2F                       l2832 0FC4                       l2824 0FAC  
                     l2816 0F9B                       l2808 0F8C                       l3392 05BE  
                     l3384 059B                       l3376 0551                       l3368 050F  
                     l3296 0336                       l3552 0329                       l3288 0312  
                     l2930 0D6A                       l2922 0D58                       l2914 0D49  
                     l2770 0B7A                       l2842 0FEB                       l2834 0FCA  
                     l2818 0FA8                       l2850 0AC3                       l3554 0604  
                     l3394 05D3                       l3386 05A0                       l3378 0554  
                     l3298 0337                       l2940 0D8A                       l2932 0D6E  
                     l2924 0D5A                       l2916 0D4B                       l2908 0D3D  
                     l3556 0E7B                       l2772 0B89                       l2860 0B65  
                     l2844 0FF1                       l2836 0FDD                       l2852 0AC8  
                     l3396 05E8                       l3388 05B4                       l2942 0D91  
                     l2934 0D72                       l2926 0D60                       l2918 0D4F  
                     l2870 0E9E                       l2862 0B6C                       l2854 0B50  
                     l2846 0FFE                       l2838 0FEA                       l2790 0F59  
                     l2782 0F3B                       ?_map 0030                       l2936 0D83  
                     l2928 0D63                       l2944 0D97                       l2960 0CF0  
                     l2952 0CE2                       l2880 0ECA                       l2872 0EA2  
                     l2864 0B72                       l2856 0B54                       l2784 0F4A  
                     l2946 0D9C                       l2938 0D89                       l2970 0D09  
                     l2962 0CF4                       l2954 0CE5                       l2890 0EEF  
                     l2882 0ED2                       l2874 0EB3                       l2778 0B98  
                     l2858 0B58                       l2786 0F57                       l2948 0DA1  
                     l2980 0D28                       l2972 0D0D                       l2964 0CF9  
                     l2956 0CE9                       l2892 0F01                       l2884 0ED5  
                     l2876 0EBE                       l2868 0E9B                       l2796 0F5B  
                     l2788 0F58                       l2974 0D11                       l2966 0CFF  
                     l2982 0D2E                       l2958 0CEE                       l2894 0F0F  
                     l2886 0EE2                       l2878 0EC2                       l2990 0BD9  
                     l2984 0D33                       l2976 0D1B                       l2968 0D02  
                     l2896 0F10                       l2888 0EE6                       l2986 0D38  
                     l2978 0D21                       l2898 0F19                       l2994 0727  
                     u3000 0D2E                       u3001 0D2D                       u3010 0D33  
                     u3011 0D32                       u3100 07D1                       u3101 07D0  
                     u3110 0C25                       u3030 075B                       u3031 075A  
                     u3120 0E90                       u3040 0761                       u3024 0740  
                     u3121 0E8F                       u3041 0760                       u3025 073E  
                     u3130 0E9A                       u3050 077A                       u3210 009A  
                     u3131 0E99                       u3115 0C20                       u3051 0779  
                     u3035 0757                       u3211 0099                       u3140 0BD8  
                     u3300 034F                       u3220 01E8                       u3141 0BD7  
                     u3301 034E                       u3221 01E7                       u3070 07AB  
                     u3230 01F9                       u3071 07AA                       u3055 0776  
                     u3231 01F8                       u3160 0B47                       u3080 07B1  
                     u3064 0790                       u2600 0F86                       u3400 050F  
                     u3320 03D3                       u3240 0219                       u3161 0B46  
                     u3081 07B0                       u3065 078E                       u2601 0F85  
                     u3401 050E                       u3321 03D2                       u3241 0218  
                     u3225 01E4                       u3090 07CA                       u2610 0F8C  
                     u3410 051E                       u3330 03DA                       u3250 02FA  
                     u3155 0B30                       u3091 07C9                       u3075 07A7  
                     u2611 0F8B                       u3411 051D                       u3331 03D9  
                     u3315 038D                       u3251 02F9                       u3235 01F5  
                     u3180 0AFB                       u2620 0FA8                       u3500 063C  
                     u3420 0551                       u3340 03E2                       u3260 030F  
                     u3181 0AFA                       u2621 0FA7                       u2605 0F82  
                     u3501 063B                       u3421 0550                       u3341 03E1  
                     u3261 030E                       u3190 0B08                       u2550 0B89  
                     u3430 0596                       u3350 0438                       u3270 0318  
                     u3175 0C65                       u3191 0B07                       u2551 0B88  
                     u3095 07C6                       u3431 0595                       u3351 0437  
                     u3271 0317                       u2544 0B80                       u2720 0B72  
                     u2640 0FD7                       u3440 05A0                       u3360 04BF  
                     u3280 0336                       u2545 0B7E                       u2721 0B71  
                     u2705 0B5F                       u2641 0FD6                       u2625 0FA4  
                     u3441 059F                       u3425 054D                       u3361 04BE  
                     u3281 0335                       u2810 0F1F                       u2730 0EA2  
                     u2650 0FDD                       u2634 0FBC                       u3450 05B9  
                     u3370 04C4                       u3290 033E                       u2811 0F1E  
                     u2731 0EA1                       u2715 0B66                       u2651 0FDC  
                     u2635 0FBA                       u3451 05B8                       u3371 04C3  
                     u3355 0434                       u3291 033D                       u2820 0F24  
                     u2740 0EB3                       u2564 0B8F                       u3460 05BE  
                     u3380 04C9                       u2821 0F23                       u2805 0F11  
                     u2741 0EB2                       u2565 0B8D                       u2645 0FD3  
                     u3461 05BD                       u3381 04C8                       u2910 0D97  
                     u2830 0D44                       u2750 0ED2                       u2574 0B9E  
                     u2670 0FFE                       u3470 062E                       u3390 04CD  
                     u2911 0D96                       u2831 0D43                       u2751 0ED1  
                     u2575 0B9C                       u3527 0ADA                       u2671 0FFD  
                     u3471 062D                       u3391 04CC                       u2920 0D9C  
                     u2840 0D4F                       u2664 0FE3                       u2680 0AC7  
                     u3480 0632                       u3537 0B3D                       u2921 0D9B  
                     u2905 0D8B                       u2841 0D4E                       u2665 0FE1  
                     u2585 0F4D                       u2681 0AC6                       u3481 0631  
                     u2850 0D60                       u2930 0CE9                       u2770 0EE6  
                     u2690 0B58                       u2594 0F6B                       u3490 0638  
                     u2851 0D5F                       u2931 0CE8                       u2771 0EE5  
                     u2691 0B57                       u2675 0FFA                       u2595 0F69  
                     u3491 0637                       u2940 0CF4                       u2941 0CF3  
                     u2765 0ED7                       u2870 0D72                       u2950 0CFF  
                     u2790 0F01                       u2871 0D71                       u2951 0CFE  
                     u2791 0F00                       u2865 0D64                       u2785 0EE8  
                     u2890 0D83                       u2970 0D11                       u2891 0D82  
                     u2971 0D10                       u2795 0EFD                       u2980 0D1B  
                     _RCIF 0065                       u2885 0D73                       u2981 0D1A  
                     u2965 0D03                       u2895 0D7F                       u2985 0D17  
                     u2995 0D22                       _TMR0 0001                       _TXIF 0064  
             __CFG_WRT$OFF 0000                       _disp 005B                       _main 0050  
                     _time 0072                       map@x 0030                       btemp 007E  
         __end_of_ADC_Read 0B50              __CFG_BOREN$ON 0000                main@umidita 015B  
                     start 000E            __end_of_GetTime 0C88          ___bmul@multiplier 0023  
             main@endCiclo 015D                      ??_ISR 0076  __size_of_conteggioVeicoli 00E3  
                    ??_map 003A            __end_of___aldiv 0F38                      ?_main 0075  
          __end_of___awdiv 0DA6              __CFG_WDTE$OFF 0000            __end_of___awmod 0D3D  
          ___awdiv@divisor 0027                      _T1CON 0010       bitParita@errorColumn 002A  
                    i1l332 0686                      i1l350 0723                      i1l326 064E  
                    i1l344 06F6                      i1l360 0CD9                      i1l338 06BE  
                    i1l294 0AB7                      i1l296 0ABD                      i1l297 0ABF  
          ___awdiv@counter 002C                      _RCREG 001A                      _TMR1H 000F  
                    _TMR1L 000E                      _SPBRG 0099                      _PORTD 0008  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _TRISE 0089                      _TXREG 0019  
            __CFG_PWRTE$ON 0000         __size_of_UART_Init 003A         __size_of_UART_Read 0009  
          __end_of_display 0811                      _count 0070                      _unita 005F  
                    main@i 016A                      main@l 0168                      _truck 004C  
                    pclath 000A                      status 0003                      wtemp0 007E  
          __initialization 0011               __end_of_main 0641         __size_of_GetDigits 006B  
                   ??_main 003C          SetDefaultTimers@i 002D          SetDefaultTimers@l 002C  
       __size_of_BuildByte 00C8                 _SetDisplay 0ADE              bitChange@dato 0023  
                   _ADCON0 001F                     _ADCON1 009F                     _ADRESH 001E  
                   _ADRESL 009E           ___awdiv@dividend 0029                     i1l2300 06CF  
                   i1l2302 06D8                     i1l2310 06EB                     i1l2320 0710  
                   i1l2312 06EF                     i1l2304 06DC                     u200_20 0693  
                   u200_21 0692                     i1l2250 0AB7                     i1l2322 0714  
                   i1l2314 06FA                     i1l2306 06E5                     i1l2252 0ABE  
                   i1l2324 071D                     i1l2316 0703                     i1l2308 06E9  
                   i1l2260 0652                     i1l2326 0721                     i1l2318 0707  
                   i1l2270 0675                     i1l2262 065B                     u201_20 06A0  
                   i1l2280 0693                     i1l2272 0679                     i1l2264 065F  
                   i1l2256 0641                     u201_21 069F                     i1l2290 06B1  
                   i1l2282 0697                     i1l2266 0668                     i1l2274 067B  
                   i1l2258 0647                     i1l2284 06A0                     i1l2292 06B3  
                   i1l2276 067F                     i1l2268 066C                     i1l2620 0C92  
                   i1l2294 06B7                     i1l2286 06A4                     i1l2278 068A  
                   i1l2630 0CAD                     i1l2622 0C95                     u210_20 0703  
                   i1l2296 06C2                     i1l2288 06AD                     u202_20 06AD  
                   i1l2640 0CBC                     i1l2632 0CB1                     i1l2624 0C97  
                   i1l2616 0C88                     u210_21 0702                     u202_21 06AC  
                   i1l2298 06CB                     i1l2650 0CCF                     i1l2642 0CC0  
                   i1l2626 0C9B                     i1l2634 0CB2                     i1l2618 0C8E  
                   i1l2652 0CD0                     i1l2644 0CC4                     i1l2636 0CB6  
                   i1l2628 0C9F                     i1l2654 0CD1                     i1l2646 0CC5  
                   i1l2638 0CB7                     u211_20 0710                     u203_20 06B7  
                   i1l2656 0CD5                     i1l2648 0CC9                     u211_21 070F  
                   u203_21 06B6                     i1l2658 0CD7                     u212_20 071D  
                   u204_20 06C2                     u212_21 071C                     u204_21 06C1  
                   u205_20 06CB                     u205_21 06CA                     u206_20 06D8  
                   u206_21 06D7                     u207_20 06E5                     u207_21 06E4  
                   u208_20 06EF                     u208_21 06EE                     u209_20 06FA  
                   _INTCON 000B                     u209_21 06F9                     u250_20 0C9F  
                   u250_21 0C9E                     u251_20 0CB6                     u251_21 0CB5  
                   u252_20 0CC4                     u252_21 0CC3                     u253_20 0CCF  
                   u253_21 0CCE                     u247_20 0C8E                     u247_21 0C8D  
                   u192_20 0ABD                     u248_20 0C92                     u192_21 0ABC  
                   u248_21 0C91                     u193_20 0647                     u249_20 0C9B  
                   u193_21 0646                     u249_21 0C9A                     u194_20 0652  
                   u194_21 0651                     u195_20 065B                     u195_21 065A  
                   u196_20 0668                     u196_21 0667                     u197_20 0675  
                   u197_21 0674                     u198_20 067F                     u198_21 067E  
                   u199_20 068A                     u199_21 0689                     _TMR0IF 005A  
                   _TMR1IF 0060                  ??_GetTime 0022               ?_UART_TxChar 0075  
        __end_of_UART_Init 0C48          __end_of_UART_Read 0AC0                     ___bmul 0AF3  
                ??___aldiv 0028            GetTime@shortInt 0025                     ___wmul 0B50  
                ??___awdiv 002B                     _decine 005E                  ??___awmod 0024  
         __end_of_init_ADC 0ADE                     _cycled 0060           ___awdiv@quotient 002E  
          ___awmod@divisor 0020            ___awmod@counter 0025           __end_of_sendByte 0BD9  
            main@pressione 015C                  ?_ADC_Read 0020                     saved_w 007E  
  __end_of__initialization 004C          __end_of_GetDigits 0E11       bitParita@sommaColumn 0029  
__size_of_SetDefaultTimers 008A        ___bmul@multiplicand 0020             __pcstackCOMMON 0075  
        __end_of_BuildByte 1000               __pidataBANK0 0003               __pidataBANK1 0B0A  
       __size_of_bitChange 0031           _conteggioVeicoli 0641         __size_of_bitParita 00C9  
               ??_ADC_Read 0022     SetDefaultTimers@giallo 0024                ?_SetDisplay 0020  
            GetDigits@Time 0030       _dataFromGatewayIndex 0059       _timerReadFromGateway 0058  
               __pbssBANK0 004C                 __pbssBANK1 00A0                 __pbssBANK2 0110  
               __pbssBANK3 0190                 __pmaintext 0050                    ?___bmul 0020  
                  ?___wmul 0020              sendByte@byte0 0039              sendByte@byte1 0034  
               __pintentry 0004          __end_of_bitChange 0BA8                 __stringtab 0800  
        __end_of_bitParita 07ED                  ?_init_ADC 0075                    _GetTime 0C48  
          BuildByte@valore 0021            BuildByte@txByte 0025                  ?_sendByte 0034  
               bitChange@n 0020                 _n_semafori 0064       __size_of_UART_TxChar 000B  
                  ___aldiv 0E9B            __size_of___bmul 0017                    ___awdiv 0D3D  
                  ___awmod 0CE2        __size_of_SetDisplay 0015            __size_of___wmul 0027  
                  __ptext1 0BA8                    __ptext2 0AC0                    __ptext3 0F38  
                  __ptext4 0BD9                    __ptext5 0B50                    __ptext6 0ACB  
                  __ptext7 0724                    __ptext8 0B77                    __ptext9 0AF3  
           main@semaforoId 0158                    _comando 0073                    _display 0806  
             __size_of_ISR 005A                 bitParita@i 0032                 bitParita@y 002D  
             __size_of_map 0035           ___awmod@dividend 0022           ___aldiv@dividend 0024  
     BuildByte@sommaColumn 002B                    clrloop0 0AB0                    main@tmp 015E  
     end_of_initialization 004C                 ??_init_ADC 0020             main@lux_select 015F  
               ??_sendByte 0036           _SetDefaultTimers 0E11                  _RCSTAbits 0018  
         ___aldiv@quotient 002B                 _motorcycle 0054                  _UART_Init 0C0E  
                _UART_Read 0AB7                  _PORTAbits 0005                  _PORTBbits 0006  
             SetDisplay@d1 0023               SetDisplay@d2 0020               SetDisplay@d3 0021  
                _TRISCbits 0087          __size_of_ADC_Read 0026   __end_of_conteggioVeicoli 0724  
               map@out_max 0038          bitParita@errorRow 002C                 map@out_min 0036  
                _TXSTAbits 0098                  _GetDigits 0DA6          bitParita@sommaRow 0028  
           __end_of___bmul 0B0A             __end_of___wmul 0B77                 ?_UART_Init 002F  
               ?_UART_Read 0075                  _BuildByte 0F38          BuildByte@sommaRow 002A  
      start_initialization 0011                __end_of_ISR 0CE2               ??_SetDisplay 0023  
              __end_of_map 0C0E                 ?_GetDigits 0030                   ??___bmul 0021  
           ADC_Read@canale 0023                   ??___wmul 0024                 init_fetch0 07ED  
              __pdataBANK0 0064                __pdataBANK1 00C7         __end_of_SetDisplay 0AF3  
               ?_BuildByte 0020                __pbssCOMMON 0070                  ___latbits 0002  
            __pcstackBANK0 0020              __pcstackBANK2 0158                   ?_GetTime 0020  
                _bitChange 0B77      SetDefaultTimers@verde 0022      SetDefaultTimers@rosso 0020  
        __size_of_init_ADC 0013                  _bitParita 0724                  _centinaia 005D  
        __size_of_sendByte 0031                   ?___aldiv 0020                   ?___awdiv 0027  
                 ?___awmod 0020                ??_UART_Init 0031                ??_UART_Read 0075  
           BuildByte@i_342 0032                  __pstrings 0800             BuildByte@y_343 002E  
           sendByte@valore 0035             sendByte@txByte 003A             BuildByte@byte0 0024  
           BuildByte@byte1 0020   __end_of_SetDefaultTimers 0E9B                   _ADC_Read 0B2A  
                _count_lux 0074                  _countdown 005A              UART_TxChar@ch 0020  
          ___aldiv@divisor 0020          interrupt_function 0004            ___aldiv@counter 0029  
               ?_bitChange 0020             ___wmul@product 0024                  clear_ram0 0AAF  
                 _PIE1bits 008C              ??_UART_TxChar 0020                 ?_bitParita 0075  
              ??_GetDigits 0032                   _GO_nDONE 00FA          UART_Init@baudrate 002F  
              ??_BuildByte 0022                  map@in_max 0034                  map@in_min 0032  
              __stringbase 0805                  main@i_442 0165                  main@i_436 0166  
                main@i_437 0163                  main@i_439 0164                  main@i_449 0169  
        ___wmul@multiplier 0020                  main@index 0160               GetTime@index 0024  
        ?_conteggioVeicoli 0075               _secondPassed 0061         ??_conteggioVeicoli 0075  
         __size_of_GetTime 0040                   _Semafori 00C7             bitParita@i_330 0034  
              _readGateway 0062             bitParita@y_331 002F           __size_of___aldiv 009D  
      __end_of_UART_TxChar 0ACB           __size_of___awdiv 0069           __size_of___awmod 005B  
           bitParita@error 002B         __end_of__stringtab 0806                  sendByte@i 003B  
                 __ptext10 0C0E                   __ptext11 0E9B                   __ptext20 0641  
                 __ptext12 0ADE                   __ptext21 0AB7                   __ptext13 0E11  
                 __ptext14 0C48                   __ptext15 0DA6                   __ptext16 0CE2  
                 __ptext17 0D3D                   __ptext18 0B2A                   __ptext19 0C88  
                 _init_ADC 0ACB                bitParita@rx 0031                ??_bitChange 0021  
            __size_of_main 05F1            _dataFromGateway 00A0                   _old_disp 005C  
              ??_bitParita 0024                   _sendByte 0BA8                   main@temp 015A  
                 main@time 0161                GetTime@time 0026                 _INTCONbits 000B  
                 init_ram0 07F1                   intlevel1 0000            _readGatewayDone 0063  
                stringcode 0800                _UART_TxChar 0AC0                 _OPTION_REG 0081  
          SetDisplay@value 0022                   stringdir 0800                   stringtab 0800  
        ?_SetDefaultTimers 0020               ___aldiv@sign 002A         ??_SetDefaultTimers 0026  
               BuildByte@i 0030                 BuildByte@y 002C  
