

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Jun 22 14:48:32 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  0003                     __pidataBANK0:	
   202                           
   203                           ;initializer for _n_semafori
   204  0003  340F               	retlw	15
   205                           
   206                           	psect	idataBANK1
   207  0B0C                     __pidataBANK1:	
   208                           
   209                           ;initializer for _Semafori
   210  0B0C  34BB               	retlw	low (_s0| 0)
   211  0B0D  3400               	retlw	high (_s0| 0)
   212  0B0E  34AF               	retlw	low (_s1| 0)
   213  0B0F  3400               	retlw	high (_s1| 0)
   214  0B10  34E4               	retlw	low (_s2| (0+256))
   215  0B11  3401               	retlw	high (_s2| (0+256))
   216  0B12  34D8               	retlw	low (_s3| (0+256))
   217  0B13  3401               	retlw	high (_s3| (0+256))
   218  0B14  34CC               	retlw	low (_s4| (0+256))
   219  0B15  3401               	retlw	high (_s4| (0+256))
   220  0B16  34C0               	retlw	low (_s5| (0+256))
   221  0B17  3401               	retlw	high (_s5| (0+256))
   222  0B18  34B4               	retlw	low (_s6| (0+256))
   223  0B19  3401               	retlw	high (_s6| (0+256))
   224  0B1A  34A8               	retlw	low (_s7| (0+256))
   225  0B1B  3401               	retlw	high (_s7| (0+256))
   226  0B1C  349C               	retlw	low (_s8| (0+256))
   227  0B1D  3401               	retlw	high (_s8| (0+256))
   228  0B1E  3490               	retlw	low (_s9| (0+256))
   229  0B1F  3401               	retlw	high (_s9| (0+256))
   230  0B20  344C               	retlw	low (_s10| (0+256))
   231  0B21  3401               	retlw	high (_s10| (0+256))
   232  0B22  3440               	retlw	low (_s11| (0+256))
   233  0B23  3401               	retlw	high (_s11| (0+256))
   234  0B24  3434               	retlw	low (_s12| (0+256))
   235  0B25  3401               	retlw	high (_s12| (0+256))
   236  0B26  3428               	retlw	low (_s13| (0+256))
   237  0B27  3401               	retlw	high (_s13| (0+256))
   238  0B28  341C               	retlw	low (_s14| (0+256))
   239  0B29  3401               	retlw	high (_s14| (0+256))
   240  0B2A  3410               	retlw	low (_s15| (0+256))
   241  0B2B  3401               	retlw	high (_s15| (0+256))
   242                           
   243                           	psect	strings
   244  0800                     __pstrings:	
   245  0800                     stringtab:	
   246  0800                     __stringtab:	
   247  0800                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250  0800                     stringdir:	
   251  0800  3008               	movlw	high stringdir
   252  0801  008A               	movwf	10
   253  0802  0804               	movf	4,w
   254  0803  0A84               	incf	4,f
   255  0804  0782               	addwf	2,f
   256  0805                     __stringbase:	
   257  0805  3400               	retlw	0
   258  0806                     __end_of__stringtab:	
   259  0806                     _display:	
   260  0806  343F               	retlw	63
   261  0807  3406               	retlw	6
   262  0808  345B               	retlw	91
   263  0809  344F               	retlw	79
   264  080A  3466               	retlw	102
   265  080B  346D               	retlw	109
   266  080C  347D               	retlw	125
   267  080D  3407               	retlw	7
   268  080E  347F               	retlw	127
   269  080F  346F               	retlw	111
   270  0810  3400               	retlw	0
   271  0811                     __end_of_display:	
   272  0006                     _PORTBbits	set	6
   273  0008                     _PORTD	set	8
   274  0005                     _PORTAbits	set	5
   275  001A                     _RCREG	set	26
   276  0019                     _TXREG	set	25
   277  000B                     _INTCONbits	set	11
   278  0018                     _RCSTAbits	set	24
   279  001E                     _ADRESH	set	30
   280  001F                     _ADCON0	set	31
   281  000E                     _TMR1L	set	14
   282  000F                     _TMR1H	set	15
   283  0010                     _T1CON	set	16
   284  0001                     _TMR0	set	1
   285  000B                     _INTCON	set	11
   286  0060                     _TMR1IF	set	96
   287  005A                     _TMR0IF	set	90
   288  0065                     _RCIF	set	101
   289  0064                     _TXIF	set	100
   290  00FA                     _GO_nDONE	set	250
   291  008C                     _PIE1bits	set	140
   292  0099                     _SPBRG	set	153
   293  0098                     _TXSTAbits	set	152
   294  0087                     _TRISCbits	set	135
   295  009E                     _ADRESL	set	158
   296  009F                     _ADCON1	set	159
   297  0085                     _TRISA	set	133
   298  0081                     _OPTION_REG	set	129
   299  0089                     _TRISE	set	137
   300  0088                     _TRISD	set	136
   301  0087                     _TRISC	set	135
   302  0086                     _TRISB	set	134
   303                           
   304                           ; #config settings
   305  0000                     
   306                           	psect	cinit
   307  0011                     start_initialization:	
   308  0011                     __initialization:	
   309                           
   310                           ; Initialize objects allocated to BANK1
   311  0011  1383               	bcf	3,7	;select IRP bank0
   312  0012  30E7               	movlw	low (__pdataBANK1+32)
   313  0013  00FD               	movwf	btemp+-1
   314  0014  300B               	movlw	high __pidataBANK1
   315  0015  00FE               	movwf	btemp
   316  0016  300C               	movlw	low __pidataBANK1
   317  0017  00FF               	movwf	btemp+1
   318  0018  30C7               	movlw	low __pdataBANK1
   319  0019  0084               	movwf	4
   320  001A  120A  158A  22D1  120A  118A  	fcall	init_ram0
   321                           
   322                           ; Initialize objects allocated to BANK0
   323  001F  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   324  0024  00E4               	movwf	__pdataBANK0& (0+127)
   325                           
   326                           ; Clear objects allocated to BANK3
   327  0025  1783               	bsf	3,7	;select IRP bank2
   328  0026  3090               	movlw	low __pbssBANK3
   329  0027  0084               	movwf	4
   330  0028  30F0               	movlw	low (__pbssBANK3+96)
   331  0029  120A  158A  229E  120A  118A  	fcall	clear_ram0
   332                           
   333                           ; Clear objects allocated to BANK2
   334  002E  3010               	movlw	low __pbssBANK2
   335  002F  0084               	movwf	4
   336  0030  3058               	movlw	low (__pbssBANK2+72)
   337  0031  120A  158A  229E  120A  118A  	fcall	clear_ram0
   338                           
   339                           ; Clear objects allocated to BANK1
   340  0036  1383               	bcf	3,7	;select IRP bank0
   341  0037  30A0               	movlw	low __pbssBANK1
   342  0038  0084               	movwf	4
   343  0039  30C7               	movlw	low (__pbssBANK1+39)
   344  003A  120A  158A  229E  120A  118A  	fcall	clear_ram0
   345                           
   346                           ; Clear objects allocated to BANK0
   347  003F  304C               	movlw	low __pbssBANK0
   348  0040  0084               	movwf	4
   349  0041  3064               	movlw	low (__pbssBANK0+24)
   350  0042  120A  158A  229E  120A  118A  	fcall	clear_ram0
   351                           
   352                           ; Clear objects allocated to COMMON
   353  0047  01F0               	clrf	__pbssCOMMON& (0+127)
   354  0048  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   355  0049  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   356  004A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   357  004B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   358  004C                     end_of_initialization:	
   359                           ;End of C runtime variable initialization code
   360                           
   361  004C                     __end_of__initialization:	
   362  004C  0183               	clrf	3
   363  004D  120A  118A  2850   	ljmp	_main	;jump to C main() function
   364                           
   365                           	psect	bssCOMMON
   366  0070                     __pbssCOMMON:	
   367  0070                     _count:	
   368  0070                     	ds	2
   369  0072                     _time:	
   370  0072                     	ds	1
   371  0073                     _comando:	
   372  0073                     	ds	1
   373  0074                     _count_lux:	
   374  0074                     	ds	1
   375                           
   376                           	psect	bssBANK0
   377  004C                     __pbssBANK0:	
   378  004C                     _truck:	
   379  004C                     	ds	4
   380  0050                     _car:	
   381  0050                     	ds	4
   382  0054                     _motorcycle:	
   383  0054                     	ds	4
   384  0058                     _timerReadFromGateway:	
   385  0058                     	ds	1
   386  0059                     _dataFromGatewayIndex:	
   387  0059                     	ds	1
   388  005A                     _countdown:	
   389  005A                     	ds	1
   390  005B                     _disp:	
   391  005B                     	ds	1
   392  005C                     _old_disp:	
   393  005C                     	ds	1
   394  005D                     _centinaia:	
   395  005D                     	ds	1
   396  005E                     _decine:	
   397  005E                     	ds	1
   398  005F                     _unita:	
   399  005F                     	ds	1
   400  0060                     _cycled:	
   401  0060                     	ds	1
   402  0061                     _secondPassed:	
   403  0061                     	ds	1
   404  0062                     _readGateway:	
   405  0062                     	ds	1
   406  0063                     _readGatewayDone:	
   407  0063                     	ds	1
   408                           
   409                           	psect	dataBANK0
   410  0064                     __pdataBANK0:	
   411  0064                     _n_semafori:	
   412  0064                     	ds	1
   413                           
   414                           	psect	bssBANK1
   415  00A0                     __pbssBANK1:	
   416  00A0                     _dataFromGateway:	
   417  00A0                     	ds	15
   418  00AF                     _s1:	
   419  00AF                     	ds	12
   420  00BB                     _s0:	
   421  00BB                     	ds	12
   422                           
   423                           	psect	dataBANK1
   424  00C7                     __pdataBANK1:	
   425  00C7                     _Semafori:	
   426  00C7                     	ds	32
   427                           
   428                           	psect	bssBANK3
   429  0190                     __pbssBANK3:	
   430  0190                     _s9:	
   431  0190                     	ds	12
   432  019C                     _s8:	
   433  019C                     	ds	12
   434  01A8                     _s7:	
   435  01A8                     	ds	12
   436  01B4                     _s6:	
   437  01B4                     	ds	12
   438  01C0                     _s5:	
   439  01C0                     	ds	12
   440  01CC                     _s4:	
   441  01CC                     	ds	12
   442  01D8                     _s3:	
   443  01D8                     	ds	12
   444  01E4                     _s2:	
   445  01E4                     	ds	12
   446                           
   447                           	psect	bssBANK2
   448  0110                     __pbssBANK2:	
   449  0110                     _s15:	
   450  0110                     	ds	12
   451  011C                     _s14:	
   452  011C                     	ds	12
   453  0128                     _s13:	
   454  0128                     	ds	12
   455  0134                     _s12:	
   456  0134                     	ds	12
   457  0140                     _s11:	
   458  0140                     	ds	12
   459  014C                     _s10:	
   460  014C                     	ds	12
   461                           
   462                           	psect	inittext
   463  0ACD                     init_fetch0:	
   464                           ;	Called with low address in FSR and high address in W
   465                           
   466  0ACD  087E               	movf	btemp,w
   467  0ACE  008A               	movwf	10
   468  0ACF  087F               	movf	btemp+1,w
   469  0AD0  0082               	movwf	2
   470  0AD1                     init_ram0:	
   471                           ;Called with:
   472                           ;	high address of idata address in btemp 
   473                           ;	low address of idata address in btemp+1 
   474                           ;	low address of data in FSR
   475                           ;	high address + 1 of data in btemp-1
   476                           
   477  0AD1  120A  158A  22CD  120A  158A  	fcall	init_fetch0
   478  0AD6  0080               	movwf	0
   479  0AD7  0A84               	incf	4,f
   480  0AD8  0804               	movf	4,w
   481  0AD9  067D               	xorwf	btemp+-1,w
   482  0ADA  1903               	btfsc	3,2
   483  0ADB  3400               	retlw	0
   484  0ADC  0AFF               	incf	btemp+1,f
   485  0ADD  1903               	btfsc	3,2
   486  0ADE  0AFE               	incf	btemp,f
   487  0ADF  2AD1               	goto	init_ram0
   488                           
   489                           	psect	clrtext
   490  0A9E                     clear_ram0:	
   491                           ;	Called with FSR containing the base address, and
   492                           ;	W with the last address+1
   493                           
   494  0A9E  0064               	clrwdt	;clear the watchdog before getting into this loop
   495  0A9F                     clrloop0:	
   496  0A9F  0180               	clrf	0	;clear RAM location pointed to by FSR
   497  0AA0  0A84               	incf	4,f	;increment pointer
   498  0AA1  0604               	xorwf	4,w	;XOR with final address
   499  0AA2  1903               	btfsc	3,2	;have we reached the end yet?
   500  0AA3  3400               	retlw	0	;all done for this memory range, return
   501  0AA4  0604               	xorwf	4,w	;XOR again to restore value
   502  0AA5  2A9F               	goto	clrloop0	;do the next byte
   503                           
   504                           	psect	cstackBANK2
   505  0158                     __pcstackBANK2:	
   506  0158                     main@semaforoId:	
   507                           
   508                           ; 1 bytes @ 0x0
   509  0158                     	ds	1
   510  0159                     main@colorId:	
   511                           
   512                           ; 1 bytes @ 0x1
   513  0159                     	ds	1
   514  015A                     main@temp:	
   515                           
   516                           ; 1 bytes @ 0x2
   517  015A                     	ds	1
   518  015B                     main@umidita:	
   519                           
   520                           ; 1 bytes @ 0x3
   521  015B                     	ds	1
   522  015C                     main@pressione:	
   523                           
   524                           ; 1 bytes @ 0x4
   525  015C                     	ds	1
   526  015D                     main@endCiclo:	
   527                           
   528                           ; 1 bytes @ 0x5
   529  015D                     	ds	1
   530  015E                     main@tmp:	
   531                           
   532                           ; 1 bytes @ 0x6
   533  015E                     	ds	1
   534  015F                     main@time:	
   535                           
   536                           ; 2 bytes @ 0x7
   537  015F                     	ds	2
   538  0161                     main@lux_select:	
   539                           
   540                           ; 1 bytes @ 0x9
   541  0161                     	ds	1
   542  0162                     main@index:	
   543                           
   544                           ; 1 bytes @ 0xA
   545  0162                     	ds	1
   546  0163                     main@i:	
   547                           
   548                           ; 1 bytes @ 0xB
   549  0163                     	ds	1
   550  0164                     main@i_447:	
   551                           
   552                           ; 1 bytes @ 0xC
   553  0164                     	ds	1
   554  0165                     main@i_449:	
   555                           
   556                           ; 1 bytes @ 0xD
   557  0165                     	ds	1
   558  0166                     main@i_446:	
   559                           
   560                           ; 2 bytes @ 0xE
   561  0166                     	ds	2
   562  0168                     main@l:	
   563                           
   564                           ; 1 bytes @ 0x10
   565  0168                     	ds	1
   566  0169                     main@i_444:	
   567                           
   568                           ; 1 bytes @ 0x11
   569  0169                     	ds	1
   570  016A                     main@i_445:	
   571                           
   572                           ; 2 bytes @ 0x12
   573  016A                     	ds	2
   574                           
   575                           	psect	cstackCOMMON
   576  0075                     __pcstackCOMMON:	
   577  0075                     ?_init_ADC:	
   578  0075                     ?_bitParita:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0075                     ?_main:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0075                     ?_UART_TxChar:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0075                     ?_UART_Read:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0075                     ??_UART_Read:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0075                     ?_conteggioVeicoli:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0075                     ??_conteggioVeicoli:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0075                     ?_ISR:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 1 bytes @ 0x0
   604  0075                     	ds	1
   605  0076                     ??_ISR:	
   606                           
   607                           ; 1 bytes @ 0x1
   608  0076                     	ds	4
   609                           
   610                           	psect	cstackBANK0
   611  0020                     __pcstackBANK0:	
   612  0020                     ??_init_ADC:	
   613  0020                     ?_SetDefaultTimers:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0020                     ?_SetDisplay:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0020                     ?_BuildByte:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0020                     ?_bitChange:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0020                     ??_UART_TxChar:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0020                     ?___bmul:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0020                     ?_GetTime:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0020                     ?_ADC_Read:	
   635                           ; 2 bytes @ 0x0
   636                           
   637  0020                     ?___wmul:	
   638                           ; 2 bytes @ 0x0
   639                           
   640  0020                     ?___awmod:	
   641                           ; 2 bytes @ 0x0
   642                           
   643  0020                     ?___aldiv:	
   644                           ; 2 bytes @ 0x0
   645                           
   646  0020                     bitChange@n:	
   647                           ; 4 bytes @ 0x0
   648                           
   649  0020                     BuildByte@byte1:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0020                     UART_TxChar@ch:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0020                     SetDisplay@d2:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0020                     ___bmul@multiplicand:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0020                     SetDefaultTimers@rosso:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0020                     ___wmul@multiplier:	
   665                           ; 2 bytes @ 0x0
   666                           
   667  0020                     ___awmod@divisor:	
   668                           ; 2 bytes @ 0x0
   669                           
   670  0020                     ___aldiv@divisor:	
   671                           ; 2 bytes @ 0x0
   672                           
   673                           
   674                           ; 4 bytes @ 0x0
   675  0020                     	ds	1
   676  0021                     ??_bitChange:	
   677  0021                     ??___bmul:	
   678                           ; 1 bytes @ 0x1
   679                           
   680  0021                     BuildByte@valore:	
   681                           ; 1 bytes @ 0x1
   682                           
   683  0021                     SetDisplay@d3:	
   684                           ; 1 bytes @ 0x1
   685                           
   686                           
   687                           ; 1 bytes @ 0x1
   688  0021                     	ds	1
   689  0022                     ??_GetTime:	
   690  0022                     ??_ADC_Read:	
   691                           ; 1 bytes @ 0x2
   692                           
   693  0022                     ??_BuildByte:	
   694                           ; 1 bytes @ 0x2
   695                           
   696  0022                     SetDisplay@value:	
   697                           ; 1 bytes @ 0x2
   698                           
   699  0022                     ___bmul@product:	
   700                           ; 1 bytes @ 0x2
   701                           
   702  0022                     SetDefaultTimers@verde:	
   703                           ; 1 bytes @ 0x2
   704                           
   705  0022                     ___wmul@multiplicand:	
   706                           ; 2 bytes @ 0x2
   707                           
   708  0022                     ___awmod@dividend:	
   709                           ; 2 bytes @ 0x2
   710                           
   711                           
   712                           ; 2 bytes @ 0x2
   713  0022                     	ds	1
   714  0023                     ??_SetDisplay:	
   715  0023                     bitChange@dato:	
   716                           ; 1 bytes @ 0x3
   717                           
   718  0023                     ADC_Read@canale:	
   719                           ; 1 bytes @ 0x3
   720                           
   721  0023                     SetDisplay@d1:	
   722                           ; 1 bytes @ 0x3
   723                           
   724  0023                     ___bmul@multiplier:	
   725                           ; 1 bytes @ 0x3
   726                           
   727                           
   728                           ; 1 bytes @ 0x3
   729  0023                     	ds	1
   730  0024                     ??_bitParita:	
   731  0024                     ??___wmul:	
   732                           ; 1 bytes @ 0x4
   733                           
   734  0024                     ??___awmod:	
   735                           ; 1 bytes @ 0x4
   736                           
   737  0024                     BuildByte@byte0:	
   738                           ; 1 bytes @ 0x4
   739                           
   740  0024                     GetTime@index:	
   741                           ; 1 bytes @ 0x4
   742                           
   743  0024                     SetDefaultTimers@giallo:	
   744                           ; 1 bytes @ 0x4
   745                           
   746  0024                     ___wmul@product:	
   747                           ; 2 bytes @ 0x4
   748                           
   749  0024                     ___aldiv@dividend:	
   750                           ; 2 bytes @ 0x4
   751                           
   752                           
   753                           ; 4 bytes @ 0x4
   754  0024                     	ds	1
   755  0025                     GetTime@shortInt:	
   756  0025                     ___awmod@counter:	
   757                           ; 1 bytes @ 0x5
   758                           
   759  0025                     BuildByte@txByte:	
   760                           ; 1 bytes @ 0x5
   761                           
   762                           
   763                           ; 5 bytes @ 0x5
   764  0025                     	ds	1
   765  0026                     ??_SetDefaultTimers:	
   766  0026                     ___awmod@sign:	
   767                           ; 1 bytes @ 0x6
   768                           
   769  0026                     GetTime@time:	
   770                           ; 1 bytes @ 0x6
   771                           
   772                           
   773                           ; 2 bytes @ 0x6
   774  0026                     	ds	1
   775  0027                     ?___awdiv:	
   776  0027                     ___awdiv@divisor:	
   777                           ; 2 bytes @ 0x7
   778                           
   779                           
   780                           ; 2 bytes @ 0x7
   781  0027                     	ds	1
   782  0028                     ??___aldiv:	
   783  0028                     bitParita@sommaRow:	
   784                           ; 1 bytes @ 0x8
   785                           
   786                           
   787                           ; 1 bytes @ 0x8
   788  0028                     	ds	1
   789  0029                     bitParita@sommaColumn:	
   790  0029                     ___aldiv@counter:	
   791                           ; 1 bytes @ 0x9
   792                           
   793  0029                     ___awdiv@dividend:	
   794                           ; 1 bytes @ 0x9
   795                           
   796                           
   797                           ; 2 bytes @ 0x9
   798  0029                     	ds	1
   799  002A                     bitParita@errorColumn:	
   800  002A                     BuildByte@sommaRow:	
   801                           ; 1 bytes @ 0xA
   802                           
   803  002A                     ___aldiv@sign:	
   804                           ; 1 bytes @ 0xA
   805                           
   806                           
   807                           ; 1 bytes @ 0xA
   808  002A                     	ds	1
   809  002B                     ??___awdiv:	
   810  002B                     bitParita@error:	
   811                           ; 1 bytes @ 0xB
   812                           
   813  002B                     BuildByte@sommaColumn:	
   814                           ; 1 bytes @ 0xB
   815                           
   816  002B                     ___aldiv@quotient:	
   817                           ; 1 bytes @ 0xB
   818                           
   819                           
   820                           ; 4 bytes @ 0xB
   821  002B                     	ds	1
   822  002C                     bitParita@errorRow:	
   823  002C                     SetDefaultTimers@l:	
   824                           ; 1 bytes @ 0xC
   825                           
   826  002C                     ___awdiv@counter:	
   827                           ; 1 bytes @ 0xC
   828                           
   829  002C                     BuildByte@y:	
   830                           ; 1 bytes @ 0xC
   831                           
   832                           
   833                           ; 2 bytes @ 0xC
   834  002C                     	ds	1
   835  002D                     SetDefaultTimers@i:	
   836  002D                     ___awdiv@sign:	
   837                           ; 1 bytes @ 0xD
   838                           
   839  002D                     bitParita@y:	
   840                           ; 1 bytes @ 0xD
   841                           
   842                           
   843                           ; 2 bytes @ 0xD
   844  002D                     	ds	1
   845  002E                     BuildByte@y_343:	
   846  002E                     ___awdiv@quotient:	
   847                           ; 2 bytes @ 0xE
   848                           
   849                           
   850                           ; 2 bytes @ 0xE
   851  002E                     	ds	1
   852  002F                     ?_UART_Init:	
   853  002F                     bitParita@y_331:	
   854                           ; 1 bytes @ 0xF
   855                           
   856  002F                     UART_Init@baudrate:	
   857                           ; 2 bytes @ 0xF
   858                           
   859                           
   860                           ; 2 bytes @ 0xF
   861  002F                     	ds	1
   862  0030                     ?_GetDigits:	
   863  0030                     ?_map:	
   864                           ; 1 bytes @ 0x10
   865                           
   866  0030                     map@x:	
   867                           ; 2 bytes @ 0x10
   868                           
   869  0030                     BuildByte@i:	
   870                           ; 2 bytes @ 0x10
   871                           
   872  0030                     GetDigits@Time:	
   873                           ; 2 bytes @ 0x10
   874                           
   875                           
   876                           ; 2 bytes @ 0x10
   877  0030                     	ds	1
   878  0031                     ??_UART_Init:	
   879  0031                     bitParita@rx:	
   880                           ; 1 bytes @ 0x11
   881                           
   882                           
   883                           ; 1 bytes @ 0x11
   884  0031                     	ds	1
   885  0032                     ??_GetDigits:	
   886  0032                     map@in_min:	
   887                           ; 1 bytes @ 0x12
   888                           
   889  0032                     bitParita@i:	
   890                           ; 2 bytes @ 0x12
   891                           
   892  0032                     BuildByte@i_342:	
   893                           ; 2 bytes @ 0x12
   894                           
   895                           
   896                           ; 2 bytes @ 0x12
   897  0032                     	ds	2
   898  0034                     ?_sendByte:	
   899  0034                     sendByte@byte1:	
   900                           ; 1 bytes @ 0x14
   901                           
   902  0034                     map@in_max:	
   903                           ; 1 bytes @ 0x14
   904                           
   905  0034                     bitParita@i_330:	
   906                           ; 2 bytes @ 0x14
   907                           
   908                           
   909                           ; 2 bytes @ 0x14
   910  0034                     	ds	1
   911  0035                     sendByte@valore:	
   912  0035                     _GetDigits$1151:	
   913                           ; 1 bytes @ 0x15
   914                           
   915                           
   916                           ; 2 bytes @ 0x15
   917  0035                     	ds	1
   918  0036                     ??_sendByte:	
   919  0036                     map@out_min:	
   920                           ; 1 bytes @ 0x16
   921                           
   922                           
   923                           ; 2 bytes @ 0x16
   924  0036                     	ds	2
   925  0038                     map@out_max:	
   926                           
   927                           ; 2 bytes @ 0x18
   928  0038                     	ds	1
   929  0039                     sendByte@byte0:	
   930                           
   931                           ; 1 bytes @ 0x19
   932  0039                     	ds	1
   933  003A                     ??_map:	
   934  003A                     sendByte@txByte:	
   935                           ; 1 bytes @ 0x1A
   936                           
   937                           
   938                           ; 1 bytes @ 0x1A
   939  003A                     	ds	1
   940  003B                     sendByte@i:	
   941                           
   942                           ; 1 bytes @ 0x1B
   943  003B                     	ds	1
   944  003C                     ??_main:	
   945                           
   946                           ; 1 bytes @ 0x1C
   947  003C                     	ds	16
   948                           
   949                           	psect	maintext
   950  0050                     __pmaintext:	
   951 ;;
   952 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   953 ;;
   954 ;; *************** function _main *****************
   955 ;; Defined at:
   956 ;;		line 129 in file "main.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;		None
   959 ;; Auto vars:     Size  Location     Type
   960 ;;  i               1   17[BANK2 ] unsigned char 
   961 ;;  index           1   10[BANK2 ] unsigned char 
   962 ;;  colorId         1    1[BANK2 ] unsigned char 
   963 ;;  semaforoId      1    0[BANK2 ] unsigned char 
   964 ;;  i               1   11[BANK2 ] unsigned char 
   965 ;;  i               1   13[BANK2 ] unsigned char 
   966 ;;  i               1   12[BANK2 ] unsigned char 
   967 ;;  i               2   14[BANK2 ] int 
   968 ;;  i               2   18[BANK2 ] int 
   969 ;;  l               1   16[BANK2 ] unsigned char 
   970 ;;  tmp             1    6[BANK2 ] unsigned char 
   971 ;;  time            2    7[BANK2 ] int 
   972 ;;  lux_select      1    9[BANK2 ] unsigned char 
   973 ;;  endCiclo        1    5[BANK2 ] struct .
   974 ;;  pressione       1    4[BANK2 ] unsigned char 
   975 ;;  umidita         1    3[BANK2 ] unsigned char 
   976 ;;  temp            1    2[BANK2 ] unsigned char 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : B00/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   986 ;;      Params:         0       0       0       0       0
   987 ;;      Locals:         0       0       0       0      20
   988 ;;      Temps:          0      16       0       0       0
   989 ;;      Totals:         0      16       0       0      20
   990 ;;Total ram usage:       36 bytes
   991 ;; Hardware stack levels required when called:    4
   992 ;; This function calls:
   993 ;;		_ADC_Read
   994 ;;		_GetDigits
   995 ;;		_GetTime
   996 ;;		_SetDefaultTimers
   997 ;;		_SetDisplay
   998 ;;		_UART_Init
   999 ;;		___awmod
  1000 ;;		___bmul
  1001 ;;		_bitParita
  1002 ;;		_init_ADC
  1003 ;;		_map
  1004 ;;		_sendByte
  1005 ;; This function is called by:
  1006 ;;		Startup code after reset
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           
  1011                           ;psect for function _main
  1012  0050                     _main:	
  1013  0050                     l3184:	
  1014                           ;incstack = 0
  1015                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1016                           
  1017                           
  1018                           ;main.c: 131:     TRISB = 0x1F;
  1019  0050  301F               	movlw	31
  1020  0051  1683               	bsf	3,5	;RP0=1, select bank1
  1021  0052  1303               	bcf	3,6	;RP1=0, select bank1
  1022  0053  0086               	movwf	6	;volatile
  1023                           
  1024                           ;main.c: 132:     TRISC = 0x80;
  1025  0054  3080               	movlw	128
  1026  0055  0087               	movwf	7	;volatile
  1027  0056                     l3186:	
  1028                           
  1029                           ;main.c: 133:     TRISD = 0x00;
  1030  0056  0188               	clrf	8	;volatile
  1031  0057                     l3188:	
  1032                           
  1033                           ;main.c: 134:     TRISE = 0x01;
  1034  0057  3001               	movlw	1
  1035  0058  0089               	movwf	9	;volatile
  1036  0059                     l3190:	
  1037                           
  1038                           ;main.c: 135:     INTCON = 0xE0;
  1039  0059  30E0               	movlw	224
  1040  005A  008B               	movwf	11	;volatile
  1041  005B                     l3192:	
  1042                           
  1043                           ;main.c: 136:     OPTION_REG = 0x04;
  1044  005B  3004               	movlw	4
  1045  005C  0081               	movwf	1	;volatile
  1046  005D                     l3194:	
  1047                           
  1048                           ;main.c: 137:     TMR0 = 6;
  1049  005D  3006               	movlw	6
  1050  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1051  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1052  0060  0081               	movwf	1	;volatile
  1053  0061                     l3196:	
  1054                           
  1055                           ;main.c: 138:     T1CON = 0x31;
  1056  0061  3031               	movlw	49
  1057  0062  0090               	movwf	16	;volatile
  1058  0063                     l3198:	
  1059                           
  1060                           ;main.c: 144:     init_ADC();
  1061  0063  120A  158A  22BA  120A  118A  	fcall	_init_ADC
  1062  0068                     l3200:	
  1063                           
  1064                           ;main.c: 145:     UART_Init(9600);
  1065  0068  3080               	movlw	128
  1066  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1067  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1068  006B  00AF               	movwf	UART_Init@baudrate
  1069  006C  3025               	movlw	37
  1070  006D  00B0               	movwf	UART_Init@baudrate+1
  1071  006E  120A  158A  240D  120A  118A  	fcall	_UART_Init
  1072  0073                     l3202:	
  1073                           
  1074                           ;main.c: 146:     SetDefaultTimers(2, 2, 2);
  1075  0073  3002               	movlw	2
  1076  0074  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0075  1303               	bcf	3,6	;RP1=0, select bank0
  1078  0076  00A0               	movwf	SetDefaultTimers@rosso
  1079  0077  3000               	movlw	0
  1080  0078  00A1               	movwf	SetDefaultTimers@rosso+1
  1081  0079  3002               	movlw	2
  1082  007A  00A2               	movwf	SetDefaultTimers@verde
  1083  007B  3000               	movlw	0
  1084  007C  00A3               	movwf	SetDefaultTimers@verde+1
  1085  007D  3002               	movlw	2
  1086  007E  00A4               	movwf	SetDefaultTimers@giallo
  1087  007F  3000               	movlw	0
  1088  0080  00A5               	movwf	SetDefaultTimers@giallo+1
  1089  0081  120A  158A  2610  120A  118A  	fcall	_SetDefaultTimers
  1090  0086                     l3204:	
  1091                           
  1092                           ;main.c: 148:     TMR1H = 60;
  1093  0086  303C               	movlw	60
  1094  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1095  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1096  0089  008F               	movwf	15	;volatile
  1097  008A                     l3206:	
  1098                           
  1099                           ;main.c: 149:     TMR1L = 176;
  1100  008A  30B0               	movlw	176
  1101  008B  008E               	movwf	14	;volatile
  1102  008C                     l3208:	
  1103                           
  1104                           ;main.c: 151:     int time;;main.c: 152:     unsigned char lux_select = 0;
  1105  008C  1283               	bcf	3,5	;RP0=0, select bank2
  1106  008D  1703               	bsf	3,6	;RP1=1, select bank2
  1107  008E  01E1               	clrf	main@lux_select^(0+256)
  1108  008F                     l3210:	
  1109                           
  1110                           ;main.c: 153:     disp = 0;
  1111  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1112  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1113  0091  01DB               	clrf	_disp
  1114  0092                     l3212:	
  1115  0092                     l3214:	
  1116  0092                     l3216:	
  1117  0092                     l3218:	
  1118                           
  1119                           ;main.c: 157:     Bit endCiclo;;main.c: 158:     endCiclo.Bit = 1;
  1120  0092  1283               	bcf	3,5	;RP0=0, select bank2
  1121  0093  1703               	bsf	3,6	;RP1=1, select bank2
  1122  0094  145D               	bsf	main@endCiclo^(0+256),0
  1123  0095                     l3220:	
  1124                           
  1125                           ;main.c: 161:     {;main.c: 163:         if (readGateway.Bit)
  1126  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1127  0096  1C62               	btfss	_readGateway,0
  1128  0097  2899               	goto	u3251
  1129  0098  289A               	goto	u3250
  1130  0099                     u3251:	
  1131  0099  28C6               	goto	l212
  1132  009A                     u3250:	
  1133  009A  28B1               	goto	l3234
  1134  009B                     l214:	
  1135                           ;main.c: 166:             {;main.c: 167:             case 0x08:
  1136                           
  1137                           
  1138                           ;main.c: 168:                 readGatewayDone.Bit = 1;
  1139  009B  1463               	bsf	_readGatewayDone,0
  1140                           
  1141                           ;main.c: 169:                 readGateway.Bit = 0;
  1142  009C  1062               	bcf	_readGateway,0
  1143                           
  1144                           ;main.c: 170:                 break;
  1145  009D  28C6               	goto	l212
  1146  009E                     l3224:	
  1147                           
  1148                           ;main.c: 177:                 if (timerReadFromGateway >= 4)
  1149  009E  3004               	movlw	4
  1150  009F  0258               	subwf	_timerReadFromGateway,w
  1151  00A0  1C03               	skipc
  1152  00A1  28A3               	goto	u3261
  1153  00A2  28A4               	goto	u3260
  1154  00A3                     u3261:	
  1155  00A3  28A7               	goto	l3228
  1156  00A4                     u3260:	
  1157  00A4                     l3226:	
  1158                           
  1159                           ;main.c: 178:                 {;main.c: 179:                     readGatewayDone.Bit = 1
      +                          ;
  1160  00A4  1463               	bsf	_readGatewayDone,0
  1161                           
  1162                           ;main.c: 180:                     readGatewayDone.Timeout = 1;
  1163  00A5  14E3               	bsf	_readGatewayDone,1
  1164                           
  1165                           ;main.c: 181:                     readGateway.Bit = 0;
  1166  00A6  1062               	bcf	_readGateway,0
  1167  00A7                     l3228:	
  1168                           
  1169                           ;main.c: 184:                 if (dataFromGatewayIndex >= 15)
  1170  00A7  300F               	movlw	15
  1171  00A8  0259               	subwf	_dataFromGatewayIndex,w
  1172  00A9  1C03               	skipc
  1173  00AA  28AC               	goto	u3271
  1174  00AB  28AD               	goto	u3270
  1175  00AC                     u3271:	
  1176  00AC  28C6               	goto	l212
  1177  00AD                     u3270:	
  1178  00AD                     l3230:	
  1179                           
  1180                           ;main.c: 185:                 {;main.c: 186:                     readGatewayDone.Bit = 1
      +                          ;
  1181  00AD  1463               	bsf	_readGatewayDone,0
  1182                           
  1183                           ;main.c: 187:                     readGatewayDone.Timeout = 0;
  1184  00AE  10E3               	bcf	_readGatewayDone,1
  1185                           
  1186                           ;main.c: 188:                     readGateway.Bit = 0;
  1187  00AF  1062               	bcf	_readGateway,0
  1188  00B0  28C6               	goto	l212
  1189  00B1                     l3234:	
  1190  00B1  1683               	bsf	3,5	;RP0=1, select bank1
  1191  00B2  1303               	bcf	3,6	;RP1=0, select bank1
  1192  00B3  0820               	movf	_dataFromGateway^(0+128),w
  1193  00B4  397F               	andlw	127
  1194  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  1195  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  1196  00B7  00BC               	movwf	??_main
  1197  00B8  01BD               	clrf	??_main+1
  1198                           
  1199                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1200                           ; Switch size 1, requested type "simple"
  1201                           ; Number of cases is 1, Range of values is 0 to 0
  1202                           ; switch strategies available:
  1203                           ; Name         Instructions Cycles
  1204                           ; simple_byte            4     3 (average)
  1205                           ; direct_byte           11     8 (fixed)
  1206                           ; jumptable            260     6 (fixed)
  1207                           ;	Chosen strategy is simple_byte
  1208  00B9  083D               	movf	??_main+1,w
  1209  00BA  3A00               	xorlw	0	; case 0
  1210  00BB  1903               	skipnz
  1211  00BC  28BE               	goto	l3558
  1212  00BD  289E               	goto	l3224
  1213  00BE                     l3558:	
  1214                           
  1215                           ; Switch size 1, requested type "simple"
  1216                           ; Number of cases is 2, Range of values is 8 to 10
  1217                           ; switch strategies available:
  1218                           ; Name         Instructions Cycles
  1219                           ; simple_byte            7     4 (average)
  1220                           ; direct_byte           20    11 (fixed)
  1221                           ; jumptable            263     9 (fixed)
  1222                           ;	Chosen strategy is simple_byte
  1223  00BE  083C               	movf	??_main,w
  1224  00BF  3A08               	xorlw	8	; case 8
  1225  00C0  1903               	skipnz
  1226  00C1  289B               	goto	l214
  1227  00C2  3A02               	xorlw	2	; case 10
  1228  00C3  1903               	skipnz
  1229  00C4  289B               	goto	l214
  1230  00C5  289E               	goto	l3224
  1231  00C6                     l212:	
  1232                           ;main.c: 192:         }
  1233                           
  1234                           
  1235                           ;main.c: 195:         if (readGatewayDone.Bit)
  1236  00C6  1C63               	btfss	_readGatewayDone,0
  1237  00C7  28C9               	goto	u3281
  1238  00C8  28CA               	goto	u3280
  1239  00C9                     u3281:	
  1240  00C9  2961               	goto	l220
  1241  00CA                     u3280:	
  1242  00CA                     l3236:	
  1243                           
  1244                           ;main.c: 196:         {;main.c: 198:             readGateway.Bit = 0;
  1245  00CA  1062               	bcf	_readGateway,0
  1246  00CB                     l3238:	
  1247                           
  1248                           ;main.c: 199:             dataFromGatewayIndex = 0;
  1249  00CB  01D9               	clrf	_dataFromGatewayIndex
  1250  00CC                     l3240:	
  1251                           
  1252                           ;main.c: 200:             readGatewayDone.Bit = 0;
  1253  00CC  1063               	bcf	_readGatewayDone,0
  1254                           
  1255                           ;main.c: 201:             timerReadFromGateway = 0;
  1256  00CD  01D8               	clrf	_timerReadFromGateway
  1257  00CE                     l3242:	
  1258                           
  1259                           ;main.c: 204:             if (readGatewayDone.Timeout)
  1260  00CE  1CE3               	btfss	_readGatewayDone,1
  1261  00CF  28D1               	goto	u3291
  1262  00D0  28D2               	goto	u3290
  1263  00D1                     u3291:	
  1264  00D1  28D4               	goto	l3246
  1265  00D2                     u3290:	
  1266  00D2                     l3244:	
  1267                           
  1268                           ;main.c: 205:             {;main.c: 206:                 readGatewayDone.Timeout = 0;
  1269  00D2  10E3               	bcf	_readGatewayDone,1
  1270                           
  1271                           ;main.c: 207:             }
  1272  00D3  2961               	goto	l220
  1273  00D4                     l3246:	
  1274                           
  1275                           ;main.c: 210:             {;main.c: 211:                 bitParita(dataFromGateway);
  1276  00D4  30A0               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1277  00D5  120A  158A  2737  120A  118A  	fcall	_bitParita
  1278  00DA                     l3248:	
  1279                           
  1280                           ;main.c: 212:                 unsigned char tmp;;main.c: 213:                 for (unsig
      +                          ned char i = 0; i < 3; i++)
  1281  00DA  1283               	bcf	3,5	;RP0=0, select bank2
  1282  00DB  1703               	bsf	3,6	;RP1=1, select bank2
  1283  00DC  01E3               	clrf	main@i^(0+256)
  1284  00DD                     l3250:	
  1285  00DD  3003               	movlw	3
  1286  00DE  0263               	subwf	main@i^(0+256),w
  1287  00DF  1C03               	skipc
  1288  00E0  28E2               	goto	u3301
  1289  00E1  28E3               	goto	u3300
  1290  00E2                     u3301:	
  1291  00E2  28E4               	goto	l3254
  1292  00E3                     u3300:	
  1293  00E3  2961               	goto	l220
  1294  00E4                     l3254:	
  1295                           
  1296                           ;main.c: 214:                 {;main.c: 215:                     unsigned char index = i
      +                           * 5;
  1297  00E4  3005               	movlw	5
  1298  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1299  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  1300  00E7  00BC               	movwf	??_main
  1301  00E8  083C               	movf	??_main,w
  1302  00E9  00A0               	movwf	___bmul@multiplicand
  1303  00EA  1283               	bcf	3,5	;RP0=0, select bank2
  1304  00EB  1703               	bsf	3,6	;RP1=1, select bank2
  1305  00EC  0863               	movf	main@i^(0+256),w
  1306  00ED  120A  158A  22F5  120A  118A  	fcall	___bmul
  1307  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1308  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1309  00F4  00BD               	movwf	??_main+1
  1310  00F5  083D               	movf	??_main+1,w
  1311  00F6  1283               	bcf	3,5	;RP0=0, select bank2
  1312  00F7  1703               	bsf	3,6	;RP1=1, select bank2
  1313  00F8  00E2               	movwf	main@index^(0+256)
  1314  00F9                     l3256:	
  1315                           
  1316                           ;main.c: 216:                     tmp = dataFromGateway[index];
  1317  00F9  0862               	movf	main@index^(0+256),w
  1318  00FA  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1319  00FB  0084               	movwf	4
  1320  00FC  1383               	bcf	3,7	;select IRP bank1
  1321  00FD  0800               	movf	0,w
  1322  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1323  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0100  00BC               	movwf	??_main
  1325  0101  083C               	movf	??_main,w
  1326  0102  1283               	bcf	3,5	;RP0=0, select bank2
  1327  0103  1703               	bsf	3,6	;RP1=1, select bank2
  1328  0104  00DE               	movwf	main@tmp^(0+256)
  1329  0105                     l3258:	
  1330                           
  1331                           ;main.c: 217:                     unsigned char semaforoId = (tmp >> 1) & 0x0F;
  1332  0105  085E               	movf	main@tmp^(0+256),w
  1333  0106  1283               	bcf	3,5	;RP0=0, select bank0
  1334  0107  1303               	bcf	3,6	;RP1=0, select bank0
  1335  0108  00BC               	movwf	??_main
  1336  0109  1003               	clrc
  1337  010A  0C3C               	rrf	??_main,w
  1338  010B  390F               	andlw	15
  1339  010C  00BD               	movwf	??_main+1
  1340  010D  083D               	movf	??_main+1,w
  1341  010E  1283               	bcf	3,5	;RP0=0, select bank2
  1342  010F  1703               	bsf	3,6	;RP1=1, select bank2
  1343  0110  00D8               	movwf	main@semaforoId^(0+256)
  1344  0111                     l3260:	
  1345                           
  1346                           ;main.c: 218:                     tmp = dataFromGateway[index];
  1347  0111  0862               	movf	main@index^(0+256),w
  1348  0112  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1349  0113  0084               	movwf	4
  1350  0114  0800               	movf	0,w
  1351  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1352  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1353  0117  00BC               	movwf	??_main
  1354  0118  083C               	movf	??_main,w
  1355  0119  1283               	bcf	3,5	;RP0=0, select bank2
  1356  011A  1703               	bsf	3,6	;RP1=1, select bank2
  1357  011B  00DE               	movwf	main@tmp^(0+256)
  1358  011C                     l3262:	
  1359                           
  1360                           ;main.c: 219:                     unsigned char colorId = ((tmp >> 5) & 0x03) - 1;
  1361  011C  085E               	movf	main@tmp^(0+256),w
  1362  011D  1283               	bcf	3,5	;RP0=0, select bank0
  1363  011E  1303               	bcf	3,6	;RP1=0, select bank0
  1364  011F  00BC               	movwf	??_main
  1365  0120  3005               	movlw	5
  1366  0121                     u3315:	
  1367  0121  1003               	clrc
  1368  0122  0CBC               	rrf	??_main,f
  1369  0123  3EFF               	addlw	-1
  1370  0124  1D03               	skipz
  1371  0125  2921               	goto	u3315
  1372  0126  083C               	movf	??_main,w
  1373  0127  3903               	andlw	3
  1374  0128  3EFF               	addlw	255
  1375  0129  00BD               	movwf	??_main+1
  1376  012A  083D               	movf	??_main+1,w
  1377  012B  1283               	bcf	3,5	;RP0=0, select bank2
  1378  012C  1703               	bsf	3,6	;RP1=1, select bank2
  1379  012D  00D9               	movwf	main@colorId^(0+256)
  1380  012E                     l3264:	
  1381                           
  1382                           ;main.c: 221:                     (*(Semafori[semaforoId])).new_times[colorId] = GetTime
      +                          (index);
  1383  012E  0862               	movf	main@index^(0+256),w
  1384  012F  120A  158A  2447  120A  118A  	fcall	_GetTime
  1385  0134  1283               	bcf	3,5	;RP0=0, select bank2
  1386  0135  1703               	bsf	3,6	;RP1=1, select bank2
  1387  0136  0858               	movf	main@semaforoId^(0+256),w
  1388  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1389  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1390  0139  00BC               	movwf	??_main
  1391  013A  073C               	addwf	??_main,w
  1392  013B  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1393  013C  0084               	movwf	4
  1394  013D  1383               	bcf	3,7	;select IRP bank1
  1395  013E  0800               	movf	0,w
  1396  013F  00BD               	movwf	??_main+1
  1397  0140  0A84               	incf	4,f
  1398  0141  0800               	movf	0,w
  1399  0142  00BE               	movwf	??_main+2
  1400  0143  1283               	bcf	3,5	;RP0=0, select bank2
  1401  0144  1703               	bsf	3,6	;RP1=1, select bank2
  1402  0145  0859               	movf	main@colorId^(0+256),w
  1403  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1404  0147  1303               	bcf	3,6	;RP1=0, select bank0
  1405  0148  00BF               	movwf	??_main+3
  1406  0149  073F               	addwf	??_main+3,w
  1407  014A  073D               	addwf	??_main+1,w
  1408  014B  00C0               	movwf	??_main+4
  1409  014C  083E               	movf	??_main+2,w
  1410  014D  1803               	skipnc
  1411  014E  3E01               	addlw	1
  1412  014F  00C1               	movwf	??_main+5
  1413  0150  0840               	movf	??_main+4,w
  1414  0151  0084               	movwf	4
  1415  0152  1783               	bsf	3,7
  1416  0153  1C41               	btfss	??_main+5,0
  1417  0154  1383               	bcf	3,7
  1418  0155  0820               	movf	?_GetTime,w
  1419  0156  0080               	movwf	0
  1420  0157  0A84               	incf	4,f
  1421  0158  0821               	movf	?_GetTime+1,w
  1422  0159  0080               	movwf	0
  1423  015A                     l3266:	
  1424                           
  1425                           ;main.c: 222:                 }
  1426  015A  3001               	movlw	1
  1427  015B  00BC               	movwf	??_main
  1428  015C  083C               	movf	??_main,w
  1429  015D  1283               	bcf	3,5	;RP0=0, select bank2
  1430  015E  1703               	bsf	3,6	;RP1=1, select bank2
  1431  015F  07E3               	addwf	main@i^(0+256),f
  1432  0160  28DD               	goto	l3250
  1433  0161                     l220:	
  1434                           ;main.c: 224:         }
  1435                           
  1436                           
  1437                           ;main.c: 228:         if (endCiclo.Bit)
  1438  0161  1283               	bcf	3,5	;RP0=0, select bank2
  1439  0162  1703               	bsf	3,6	;RP1=1, select bank2
  1440  0163  1C5D               	btfss	main@endCiclo^(0+256),0
  1441  0164  2966               	goto	u3321
  1442  0165  2967               	goto	u3320
  1443  0166                     u3321:	
  1444  0166  2A58               	goto	l225
  1445  0167                     u3320:	
  1446  0167                     l3270:	
  1447                           
  1448                           ;main.c: 229:         {;main.c: 231:             for (unsigned char l = 0; l < 16; l++)
  1449  0167  01E8               	clrf	main@l^(0+256)
  1450  0168                     l3272:	
  1451  0168  3010               	movlw	16
  1452  0169  0268               	subwf	main@l^(0+256),w
  1453  016A  1C03               	skipc
  1454  016B  296D               	goto	u3331
  1455  016C  296E               	goto	u3330
  1456  016D                     u3331:	
  1457  016D  296F               	goto	l3276
  1458  016E                     u3330:	
  1459  016E  2A29               	goto	l3294
  1460  016F                     l3276:	
  1461                           
  1462                           ;main.c: 232:             {;main.c: 233:                 for (unsigned char i = 0; i < 3
      +                          ; i++)
  1463  016F  01E9               	clrf	main@i_444^(0+256)
  1464  0170                     l3278:	
  1465  0170  3003               	movlw	3
  1466  0171  0269               	subwf	main@i_444^(0+256),w
  1467  0172  1C03               	skipc
  1468  0173  2975               	goto	u3341
  1469  0174  2976               	goto	u3340
  1470  0175                     u3341:	
  1471  0175  2977               	goto	l3282
  1472  0176                     u3340:	
  1473  0176  2A20               	goto	l3290
  1474  0177                     l3282:	
  1475                           
  1476                           ;main.c: 234:                 {;main.c: 235:                     if ((*(Semafori[l])).ti
      +                          mes[i] != (*(Semafori[l])).new_times[i])
  1477  0177  0868               	movf	main@l^(0+256),w
  1478  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1479  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1480  017A  00BC               	movwf	??_main
  1481  017B  073C               	addwf	??_main,w
  1482  017C  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1483  017D  0084               	movwf	4
  1484  017E  1383               	bcf	3,7	;select IRP bank1
  1485  017F  0800               	movf	0,w
  1486  0180  00BD               	movwf	??_main+1
  1487  0181  0A84               	incf	4,f
  1488  0182  0800               	movf	0,w
  1489  0183  00BE               	movwf	??_main+2
  1490  0184  1283               	bcf	3,5	;RP0=0, select bank2
  1491  0185  1703               	bsf	3,6	;RP1=1, select bank2
  1492  0186  0869               	movf	main@i_444^(0+256),w
  1493  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1494  0188  1303               	bcf	3,6	;RP1=0, select bank0
  1495  0189  00BF               	movwf	??_main+3
  1496  018A  073F               	addwf	??_main+3,w
  1497  018B  073D               	addwf	??_main+1,w
  1498  018C  00C0               	movwf	??_main+4
  1499  018D  083E               	movf	??_main+2,w
  1500  018E  1803               	skipnc
  1501  018F  3E01               	addlw	1
  1502  0190  00C1               	movwf	??_main+5
  1503  0191  0840               	movf	??_main+4,w
  1504  0192  0084               	movwf	4
  1505  0193  1783               	bsf	3,7
  1506  0194  1C41               	btfss	??_main+5,0
  1507  0195  1383               	bcf	3,7
  1508  0196  0800               	movf	0,w
  1509  0197  00C2               	movwf	??_main+6
  1510  0198  0A84               	incf	4,f
  1511  0199  0800               	movf	0,w
  1512  019A  00C3               	movwf	??_main+7
  1513  019B  1283               	bcf	3,5	;RP0=0, select bank2
  1514  019C  1703               	bsf	3,6	;RP1=1, select bank2
  1515  019D  0868               	movf	main@l^(0+256),w
  1516  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1517  019F  1303               	bcf	3,6	;RP1=0, select bank0
  1518  01A0  00C4               	movwf	??_main+8
  1519  01A1  0744               	addwf	??_main+8,w
  1520  01A2  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1521  01A3  0084               	movwf	4
  1522  01A4  1383               	bcf	3,7	;select IRP bank1
  1523  01A5  0800               	movf	0,w
  1524  01A6  00C5               	movwf	??_main+9
  1525  01A7  0A84               	incf	4,f
  1526  01A8  0800               	movf	0,w
  1527  01A9  00C6               	movwf	??_main+10
  1528  01AA  1283               	bcf	3,5	;RP0=0, select bank2
  1529  01AB  1703               	bsf	3,6	;RP1=1, select bank2
  1530  01AC  0869               	movf	main@i_444^(0+256),w
  1531  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1532  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1533  01AF  00C7               	movwf	??_main+11
  1534  01B0  0747               	addwf	??_main+11,w
  1535  01B1  3E06               	addlw	6
  1536  01B2  0745               	addwf	??_main+9,w
  1537  01B3  00C8               	movwf	??_main+12
  1538  01B4  0846               	movf	??_main+10,w
  1539  01B5  1803               	skipnc
  1540  01B6  3E01               	addlw	1
  1541  01B7  00C9               	movwf	??_main+13
  1542  01B8  0848               	movf	??_main+12,w
  1543  01B9  0084               	movwf	4
  1544  01BA  1783               	bsf	3,7
  1545  01BB  1C49               	btfss	??_main+13,0
  1546  01BC  1383               	bcf	3,7
  1547  01BD  0800               	movf	0,w
  1548  01BE  00CA               	movwf	??_main+14
  1549  01BF  0A84               	incf	4,f
  1550  01C0  0800               	movf	0,w
  1551  01C1  00CB               	movwf	??_main+15
  1552  01C2  0843               	movf	??_main+7,w
  1553  01C3  064B               	xorwf	??_main+15,w
  1554  01C4  1D03               	skipz
  1555  01C5  29C8               	goto	u3355
  1556  01C6  0842               	movf	??_main+6,w
  1557  01C7  064A               	xorwf	??_main+14,w
  1558  01C8                     u3355:	
  1559  01C8  1903               	skipnz
  1560  01C9  29CB               	goto	u3351
  1561  01CA  29CC               	goto	u3350
  1562  01CB                     u3351:	
  1563  01CB  2A19               	goto	l3286
  1564  01CC                     u3350:	
  1565  01CC                     l3284:	
  1566                           
  1567                           ;main.c: 236:                     {;main.c: 237:                         (*(Semafori[l])
      +                          ).times[i] = (*(Semafori[l])).new_times[i];
  1568  01CC  1283               	bcf	3,5	;RP0=0, select bank2
  1569  01CD  1703               	bsf	3,6	;RP1=1, select bank2
  1570  01CE  0868               	movf	main@l^(0+256),w
  1571  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  1572  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  1573  01D1  00BC               	movwf	??_main
  1574  01D2  073C               	addwf	??_main,w
  1575  01D3  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1576  01D4  0084               	movwf	4
  1577  01D5  1383               	bcf	3,7	;select IRP bank1
  1578  01D6  0800               	movf	0,w
  1579  01D7  00BD               	movwf	??_main+1
  1580  01D8  0A84               	incf	4,f
  1581  01D9  0800               	movf	0,w
  1582  01DA  00BE               	movwf	??_main+2
  1583  01DB  1283               	bcf	3,5	;RP0=0, select bank2
  1584  01DC  1703               	bsf	3,6	;RP1=1, select bank2
  1585  01DD  0869               	movf	main@i_444^(0+256),w
  1586  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1587  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1588  01E0  00BF               	movwf	??_main+3
  1589  01E1  073F               	addwf	??_main+3,w
  1590  01E2  073D               	addwf	??_main+1,w
  1591  01E3  00C0               	movwf	??_main+4
  1592  01E4  083E               	movf	??_main+2,w
  1593  01E5  1803               	skipnc
  1594  01E6  3E01               	addlw	1
  1595  01E7  00C1               	movwf	??_main+5
  1596  01E8  0840               	movf	??_main+4,w
  1597  01E9  0084               	movwf	4
  1598  01EA  1783               	bsf	3,7
  1599  01EB  1C41               	btfss	??_main+5,0
  1600  01EC  1383               	bcf	3,7
  1601  01ED  0800               	movf	0,w
  1602  01EE  00C2               	movwf	??_main+6
  1603  01EF  0A84               	incf	4,f
  1604  01F0  0800               	movf	0,w
  1605  01F1  00C3               	movwf	??_main+7
  1606  01F2  1283               	bcf	3,5	;RP0=0, select bank2
  1607  01F3  1703               	bsf	3,6	;RP1=1, select bank2
  1608  01F4  0868               	movf	main@l^(0+256),w
  1609  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  1610  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  1611  01F7  00C4               	movwf	??_main+8
  1612  01F8  0744               	addwf	??_main+8,w
  1613  01F9  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1614  01FA  0084               	movwf	4
  1615  01FB  1383               	bcf	3,7	;select IRP bank1
  1616  01FC  0800               	movf	0,w
  1617  01FD  00C5               	movwf	??_main+9
  1618  01FE  0A84               	incf	4,f
  1619  01FF  0800               	movf	0,w
  1620  0200  00C6               	movwf	??_main+10
  1621  0201  1283               	bcf	3,5	;RP0=0, select bank2
  1622  0202  1703               	bsf	3,6	;RP1=1, select bank2
  1623  0203  0869               	movf	main@i_444^(0+256),w
  1624  0204  1283               	bcf	3,5	;RP0=0, select bank0
  1625  0205  1303               	bcf	3,6	;RP1=0, select bank0
  1626  0206  00C7               	movwf	??_main+11
  1627  0207  0747               	addwf	??_main+11,w
  1628  0208  3E06               	addlw	6
  1629  0209  0745               	addwf	??_main+9,w
  1630  020A  00C8               	movwf	??_main+12
  1631  020B  0846               	movf	??_main+10,w
  1632  020C  1803               	skipnc
  1633  020D  3E01               	addlw	1
  1634  020E  00C9               	movwf	??_main+13
  1635  020F  0848               	movf	??_main+12,w
  1636  0210  0084               	movwf	4
  1637  0211  1783               	bsf	3,7
  1638  0212  1C49               	btfss	??_main+13,0
  1639  0213  1383               	bcf	3,7
  1640  0214  0842               	movf	??_main+6,w
  1641  0215  0080               	movwf	0
  1642  0216  0A84               	incf	4,f
  1643  0217  0843               	movf	??_main+7,w
  1644  0218  0080               	movwf	0
  1645  0219                     l3286:	
  1646                           
  1647                           ;main.c: 239:                 }
  1648  0219  3001               	movlw	1
  1649  021A  00BC               	movwf	??_main
  1650  021B  083C               	movf	??_main,w
  1651  021C  1283               	bcf	3,5	;RP0=0, select bank2
  1652  021D  1703               	bsf	3,6	;RP1=1, select bank2
  1653  021E  07E9               	addwf	main@i_444^(0+256),f
  1654  021F  2970               	goto	l3278
  1655  0220                     l3290:	
  1656                           
  1657                           ;main.c: 240:             }
  1658  0220  3001               	movlw	1
  1659  0221  1283               	bcf	3,5	;RP0=0, select bank0
  1660  0222  1303               	bcf	3,6	;RP1=0, select bank0
  1661  0223  00BC               	movwf	??_main
  1662  0224  083C               	movf	??_main,w
  1663  0225  1283               	bcf	3,5	;RP0=0, select bank2
  1664  0226  1703               	bsf	3,6	;RP1=1, select bank2
  1665  0227  07E8               	addwf	main@l^(0+256),f
  1666  0228  2968               	goto	l3272
  1667  0229                     l3294:	
  1668                           
  1669                           ;main.c: 244:             {;main.c: 245:                 n_semafori = (n_semafori + 1) %
      +                           16;
  1670  0229  1303               	bcf	3,6	;RP1=0, select bank0
  1671  022A  0864               	movf	_n_semafori,w
  1672  022B  3E01               	addlw	1
  1673  022C  390F               	andlw	15
  1674  022D  00BC               	movwf	??_main
  1675  022E  083C               	movf	??_main,w
  1676  022F  00E4               	movwf	_n_semafori
  1677  0230                     l3296:	
  1678                           
  1679                           ;main.c: 246:             } while ((*(Semafori[n_semafori])).times[0] == 0 && n_semafori
      +                           > 0);
  1680  0230  0864               	movf	_n_semafori,w
  1681  0231  00BC               	movwf	??_main
  1682  0232  073C               	addwf	??_main,w
  1683  0233  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1684  0234  0084               	movwf	4
  1685  0235  1383               	bcf	3,7	;select IRP bank1
  1686  0236  0800               	movf	0,w
  1687  0237  00BD               	movwf	??_main+1
  1688  0238  0A84               	incf	4,f
  1689  0239  0800               	movf	0,w
  1690  023A  00BE               	movwf	??_main+2
  1691  023B  083D               	movf	??_main+1,w
  1692  023C  3E06               	addlw	6
  1693  023D  00BF               	movwf	??_main+3
  1694  023E  083E               	movf	??_main+2,w
  1695  023F  1803               	skipnc
  1696  0240  3E01               	addlw	1
  1697  0241  3E00               	addlw	0
  1698  0242  00C0               	movwf	??_main+4
  1699  0243  083F               	movf	??_main+3,w
  1700  0244  0084               	movwf	4
  1701  0245  1783               	bsf	3,7
  1702  0246  1C40               	btfss	??_main+4,0
  1703  0247  1383               	bcf	3,7
  1704  0248  0800               	movf	0,w
  1705  0249  00C1               	movwf	??_main+5
  1706  024A  0A84               	incf	4,f
  1707  024B  0800               	movf	0,w
  1708  024C  00C2               	movwf	??_main+6
  1709  024D  0841               	movf	??_main+5,w
  1710  024E  0442               	iorwf	??_main+6,w
  1711  024F  1D03               	btfss	3,2
  1712  0250  2A52               	goto	u3361
  1713  0251  2A53               	goto	u3360
  1714  0252                     u3361:	
  1715  0252  2A58               	goto	l225
  1716  0253                     u3360:	
  1717  0253                     l3298:	
  1718  0253  0864               	movf	_n_semafori,w
  1719  0254  1D03               	btfss	3,2
  1720  0255  2A57               	goto	u3371
  1721  0256  2A58               	goto	u3370
  1722  0257                     u3371:	
  1723  0257  2A29               	goto	l3294
  1724  0258                     u3370:	
  1725  0258                     l225:	
  1726                           ;main.c: 247:         }
  1727                           
  1728                           
  1729                           ;main.c: 251:         if (secondPassed.Bit && cycled.Bit)
  1730  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1731  0259  1C61               	btfss	_secondPassed,0
  1732  025A  2A5C               	goto	u3381
  1733  025B  2A5D               	goto	u3380
  1734  025C                     u3381:	
  1735  025C  2B1E               	goto	l3318
  1736  025D                     u3380:	
  1737  025D                     l3300:	
  1738  025D  1C60               	btfss	_cycled,0
  1739  025E  2A60               	goto	u3391
  1740  025F  2A61               	goto	u3390
  1741  0260                     u3391:	
  1742  0260  2B1E               	goto	l3318
  1743  0261                     u3390:	
  1744  0261                     l3302:	
  1745                           
  1746                           ;main.c: 252:         {;main.c: 253:             time++;
  1747  0261  3001               	movlw	1
  1748  0262  1283               	bcf	3,5	;RP0=0, select bank2
  1749  0263  1703               	bsf	3,6	;RP1=1, select bank2
  1750  0264  07DF               	addwf	main@time^(0+256),f
  1751  0265  1803               	skipnc
  1752  0266  0AE0               	incf	(main@time+1)^(0+256),f
  1753  0267  3000               	movlw	0
  1754  0268  07E0               	addwf	(main@time+1)^(0+256),f
  1755  0269                     l3304:	
  1756                           
  1757                           ;main.c: 254:             endCiclo.Bit = 0;
  1758  0269  105D               	bcf	main@endCiclo^(0+256),0
  1759  026A                     l3306:	
  1760                           
  1761                           ;main.c: 256:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  1762  026A  1283               	bcf	3,5	;RP0=0, select bank0
  1763  026B  1303               	bcf	3,6	;RP1=0, select bank0
  1764  026C  0864               	movf	_n_semafori,w
  1765  026D  00BC               	movwf	??_main
  1766  026E  073C               	addwf	??_main,w
  1767  026F  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1768  0270  0084               	movwf	4
  1769  0271  1383               	bcf	3,7	;select IRP bank1
  1770  0272  0800               	movf	0,w
  1771  0273  00BD               	movwf	??_main+1
  1772  0274  0A84               	incf	4,f
  1773  0275  0800               	movf	0,w
  1774  0276  00BE               	movwf	??_main+2
  1775  0277  1283               	bcf	3,5	;RP0=0, select bank2
  1776  0278  1703               	bsf	3,6	;RP1=1, select bank2
  1777  0279  0861               	movf	main@lux_select^(0+256),w
  1778  027A  1283               	bcf	3,5	;RP0=0, select bank0
  1779  027B  1303               	bcf	3,6	;RP1=0, select bank0
  1780  027C  00BF               	movwf	??_main+3
  1781  027D  073F               	addwf	??_main+3,w
  1782  027E  3E06               	addlw	6
  1783  027F  073D               	addwf	??_main+1,w
  1784  0280  00C0               	movwf	??_main+4
  1785  0281  083E               	movf	??_main+2,w
  1786  0282  1803               	skipnc
  1787  0283  3E01               	addlw	1
  1788  0284  00C1               	movwf	??_main+5
  1789  0285  0840               	movf	??_main+4,w
  1790  0286  0084               	movwf	4
  1791  0287  1783               	bsf	3,7
  1792  0288  1C41               	btfss	??_main+5,0
  1793  0289  1383               	bcf	3,7
  1794  028A  0800               	movf	0,w
  1795  028B  00C2               	movwf	??_main+6
  1796  028C  0A84               	incf	4,f
  1797  028D  0800               	movf	0,w
  1798  028E  00C3               	movwf	??_main+7
  1799  028F  1283               	bcf	3,5	;RP0=0, select bank2
  1800  0290  1703               	bsf	3,6	;RP1=1, select bank2
  1801  0291  085F               	movf	main@time^(0+256),w
  1802  0292  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0293  1303               	bcf	3,6	;RP1=0, select bank0
  1804  0294  0242               	subwf	??_main+6,w
  1805  0295  00C4               	movwf	??_main+8
  1806  0296  1283               	bcf	3,5	;RP0=0, select bank2
  1807  0297  1703               	bsf	3,6	;RP1=1, select bank2
  1808  0298  0860               	movf	(main@time+1)^(0+256),w
  1809  0299  1C03               	skipc
  1810  029A  0A60               	incf	(main@time+1)^(0+256),w
  1811  029B  1283               	bcf	3,5	;RP0=0, select bank0
  1812  029C  1303               	bcf	3,6	;RP1=0, select bank0
  1813  029D  0243               	subwf	??_main+7,w
  1814  029E  00C5               	movwf	??_main+9
  1815  029F  1FC5               	btfss	??_main+9,7
  1816  02A0  2AA2               	goto	u3401
  1817  02A1  2AA3               	goto	u3400
  1818  02A2                     u3401:	
  1819  02A2  2AA6               	goto	l3310
  1820  02A3                     u3400:	
  1821  02A3                     l3308:	
  1822                           
  1823                           ;main.c: 257:             {;main.c: 258:                 endCiclo.Bit = 1;
  1824  02A3  1283               	bcf	3,5	;RP0=0, select bank2
  1825  02A4  1703               	bsf	3,6	;RP1=1, select bank2
  1826  02A5  145D               	bsf	main@endCiclo^(0+256),0
  1827  02A6                     l3310:	
  1828                           
  1829                           ;main.c: 261:             if (lux_select == 2 && time >= (*Semafori[n_semafori]).times[2
      +                          ])
  1830  02A6  3002               	movlw	2
  1831  02A7  1283               	bcf	3,5	;RP0=0, select bank2
  1832  02A8  1703               	bsf	3,6	;RP1=1, select bank2
  1833  02A9  0661               	xorwf	main@lux_select^(0+256),w
  1834  02AA  1D03               	btfss	3,2
  1835  02AB  2AAD               	goto	u3411
  1836  02AC  2AAE               	goto	u3410
  1837  02AD                     u3411:	
  1838  02AD  2AE4               	goto	l3316
  1839  02AE                     u3410:	
  1840  02AE                     l3312:	
  1841  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  1842  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  1843  02B0  0864               	movf	_n_semafori,w
  1844  02B1  00BC               	movwf	??_main
  1845  02B2  073C               	addwf	??_main,w
  1846  02B3  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1847  02B4  0084               	movwf	4
  1848  02B5  1383               	bcf	3,7	;select IRP bank1
  1849  02B6  0800               	movf	0,w
  1850  02B7  00BD               	movwf	??_main+1
  1851  02B8  0A84               	incf	4,f
  1852  02B9  0800               	movf	0,w
  1853  02BA  00BE               	movwf	??_main+2
  1854  02BB  083D               	movf	??_main+1,w
  1855  02BC  3E0A               	addlw	10
  1856  02BD  00BF               	movwf	??_main+3
  1857  02BE  083E               	movf	??_main+2,w
  1858  02BF  1803               	skipnc
  1859  02C0  3E01               	addlw	1
  1860  02C1  3E00               	addlw	0
  1861  02C2  00C0               	movwf	??_main+4
  1862  02C3  083F               	movf	??_main+3,w
  1863  02C4  0084               	movwf	4
  1864  02C5  1783               	bsf	3,7
  1865  02C6  1C40               	btfss	??_main+4,0
  1866  02C7  1383               	bcf	3,7
  1867  02C8  0800               	movf	0,w
  1868  02C9  00C1               	movwf	??_main+5
  1869  02CA  0A84               	incf	4,f
  1870  02CB  0800               	movf	0,w
  1871  02CC  00C2               	movwf	??_main+6
  1872  02CD  1283               	bcf	3,5	;RP0=0, select bank2
  1873  02CE  1703               	bsf	3,6	;RP1=1, select bank2
  1874  02CF  0860               	movf	(main@time+1)^(0+256),w
  1875  02D0  3A80               	xorlw	128
  1876  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  1877  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  1878  02D3  00C3               	movwf	??_main+7
  1879  02D4  0842               	movf	??_main+6,w
  1880  02D5  3A80               	xorlw	128
  1881  02D6  0243               	subwf	??_main+7,w
  1882  02D7  1D03               	skipz
  1883  02D8  2ADD               	goto	u3425
  1884  02D9  0841               	movf	??_main+5,w
  1885  02DA  1283               	bcf	3,5	;RP0=0, select bank2
  1886  02DB  1703               	bsf	3,6	;RP1=1, select bank2
  1887  02DC  025F               	subwf	main@time^(0+256),w
  1888  02DD                     u3425:	
  1889  02DD  1C03               	skipc
  1890  02DE  2AE0               	goto	u3421
  1891  02DF  2AE1               	goto	u3420
  1892  02E0                     u3421:	
  1893  02E0  2AE4               	goto	l3316
  1894  02E1                     u3420:	
  1895  02E1                     l3314:	
  1896                           
  1897                           ;main.c: 262:             {;main.c: 263:                 endCiclo.Bit = 1;
  1898  02E1  1283               	bcf	3,5	;RP0=0, select bank2
  1899  02E2  1703               	bsf	3,6	;RP1=1, select bank2
  1900  02E3  145D               	bsf	main@endCiclo^(0+256),0
  1901  02E4                     l3316:	
  1902                           
  1903                           ;main.c: 266:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  1904  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  1905  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  1906  02E6  0864               	movf	_n_semafori,w
  1907  02E7  00BC               	movwf	??_main
  1908  02E8  073C               	addwf	??_main,w
  1909  02E9  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1910  02EA  0084               	movwf	4
  1911  02EB  1383               	bcf	3,7	;select IRP bank1
  1912  02EC  0800               	movf	0,w
  1913  02ED  00BD               	movwf	??_main+1
  1914  02EE  0A84               	incf	4,f
  1915  02EF  0800               	movf	0,w
  1916  02F0  00BE               	movwf	??_main+2
  1917  02F1  1283               	bcf	3,5	;RP0=0, select bank2
  1918  02F2  1703               	bsf	3,6	;RP1=1, select bank2
  1919  02F3  0861               	movf	main@lux_select^(0+256),w
  1920  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  1921  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  1922  02F6  00BF               	movwf	??_main+3
  1923  02F7  073F               	addwf	??_main+3,w
  1924  02F8  3E06               	addlw	6
  1925  02F9  073D               	addwf	??_main+1,w
  1926  02FA  00C0               	movwf	??_main+4
  1927  02FB  083E               	movf	??_main+2,w
  1928  02FC  1803               	skipnc
  1929  02FD  3E01               	addlw	1
  1930  02FE  00C1               	movwf	??_main+5
  1931  02FF  0840               	movf	??_main+4,w
  1932  0300  0084               	movwf	4
  1933  0301  1783               	bsf	3,7
  1934  0302  1C41               	btfss	??_main+5,0
  1935  0303  1383               	bcf	3,7
  1936  0304  0800               	movf	0,w
  1937  0305  00C2               	movwf	??_main+6
  1938  0306  0A84               	incf	4,f
  1939  0307  0800               	movf	0,w
  1940  0308  00C3               	movwf	??_main+7
  1941  0309  1283               	bcf	3,5	;RP0=0, select bank2
  1942  030A  1703               	bsf	3,6	;RP1=1, select bank2
  1943  030B  085F               	movf	main@time^(0+256),w
  1944  030C  1283               	bcf	3,5	;RP0=0, select bank0
  1945  030D  1303               	bcf	3,6	;RP1=0, select bank0
  1946  030E  0242               	subwf	??_main+6,w
  1947  030F  00B0               	movwf	GetDigits@Time
  1948  0310  1283               	bcf	3,5	;RP0=0, select bank2
  1949  0311  1703               	bsf	3,6	;RP1=1, select bank2
  1950  0312  0860               	movf	(main@time+1)^(0+256),w
  1951  0313  1C03               	skipc
  1952  0314  0A60               	incf	(main@time+1)^(0+256),w
  1953  0315  1283               	bcf	3,5	;RP0=0, select bank0
  1954  0316  1303               	bcf	3,6	;RP1=0, select bank0
  1955  0317  0243               	subwf	??_main+7,w
  1956  0318  00B1               	movwf	GetDigits@Time+1
  1957  0319  120A  158A  25A5  120A  118A  	fcall	_GetDigits
  1958  031E                     l3318:	
  1959                           
  1960                           ;main.c: 270:         if (disp != old_disp)
  1961  031E  1283               	bcf	3,5	;RP0=0, select bank0
  1962  031F  1303               	bcf	3,6	;RP1=0, select bank0
  1963  0320  085B               	movf	_disp,w
  1964  0321  065C               	xorwf	_old_disp,w
  1965  0322  1903               	skipnz
  1966  0323  2B25               	goto	u3431
  1967  0324  2B26               	goto	u3430
  1968  0325                     u3431:	
  1969  0325  2BA2               	goto	l3340
  1970  0326                     u3430:	
  1971  0326                     l3320:	
  1972                           
  1973                           ;main.c: 271:         {;main.c: 272:             old_disp = disp;
  1974  0326  085B               	movf	_disp,w
  1975  0327  00BC               	movwf	??_main
  1976  0328  083C               	movf	??_main,w
  1977  0329  00DC               	movwf	_old_disp
  1978                           
  1979                           ;main.c: 273:             switch (disp)
  1980  032A  2B8C               	goto	l3338
  1981  032B                     l3322:	
  1982                           
  1983                           ;main.c: 276:                 if (centinaia > 0)
  1984  032B  085D               	movf	_centinaia,w
  1985  032C  1903               	btfsc	3,2
  1986  032D  2B2F               	goto	u3441
  1987  032E  2B30               	goto	u3440
  1988  032F                     u3441:	
  1989  032F  2BA2               	goto	l3340
  1990  0330                     u3440:	
  1991  0330                     l3324:	
  1992                           
  1993                           ;main.c: 277:                 {;main.c: 278:                     SetDisplay(1, 0, 0, dis
      +                          play[centinaia]);
  1994  0330  01A0               	clrf	SetDisplay@d2
  1995  0331  01A1               	clrf	SetDisplay@d3
  1996  0332  085D               	movf	_centinaia,w
  1997  0333  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  1998  0334  0084               	movwf	4
  1999  0335  120A  158A  2000  120A  118A  	fcall	stringdir
  2000  033A  00BC               	movwf	??_main
  2001  033B  083C               	movf	??_main,w
  2002  033C  00A2               	movwf	SetDisplay@value
  2003  033D  3001               	movlw	1
  2004  033E  120A  158A  22E0  120A  118A  	fcall	_SetDisplay
  2005  0343  2BA2               	goto	l3340
  2006  0344                     l3326:	
  2007                           
  2008                           ;main.c: 282:                 if (decine > 0 || centinaia > 0)
  2009  0344  085E               	movf	_decine,w
  2010  0345  1D03               	btfss	3,2
  2011  0346  2B48               	goto	u3451
  2012  0347  2B49               	goto	u3450
  2013  0348                     u3451:	
  2014  0348  2B4E               	goto	l3330
  2015  0349                     u3450:	
  2016  0349                     l3328:	
  2017  0349  085D               	movf	_centinaia,w
  2018  034A  1903               	btfsc	3,2
  2019  034B  2B4D               	goto	u3461
  2020  034C  2B4E               	goto	u3460
  2021  034D                     u3461:	
  2022  034D  2BA2               	goto	l3340
  2023  034E                     u3460:	
  2024  034E                     l3330:	
  2025                           
  2026                           ;main.c: 283:                 {;main.c: 284:                     SetDisplay(0, 1, 0, dis
      +                          play[decine]);
  2027  034E  01A0               	clrf	SetDisplay@d2
  2028  034F  0AA0               	incf	SetDisplay@d2,f
  2029  0350  01A1               	clrf	SetDisplay@d3
  2030  0351  085E               	movf	_decine,w
  2031  0352  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2032  0353  0084               	movwf	4
  2033  0354  120A  158A  2000  120A  118A  	fcall	stringdir
  2034  0359  00BC               	movwf	??_main
  2035  035A  083C               	movf	??_main,w
  2036  035B  00A2               	movwf	SetDisplay@value
  2037  035C  3000               	movlw	0
  2038  035D  120A  158A  22E0  120A  118A  	fcall	_SetDisplay
  2039  0362  2BA2               	goto	l3340
  2040  0363                     l3332:	
  2041                           
  2042                           ;main.c: 288:                 SetDisplay(0, 0, 1, display[unita]);
  2043  0363  01A0               	clrf	SetDisplay@d2
  2044  0364  01A1               	clrf	SetDisplay@d3
  2045  0365  0AA1               	incf	SetDisplay@d3,f
  2046  0366  085F               	movf	_unita,w
  2047  0367  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2048  0368  0084               	movwf	4
  2049  0369  120A  158A  2000  120A  118A  	fcall	stringdir
  2050  036E  00BC               	movwf	??_main
  2051  036F  083C               	movf	??_main,w
  2052  0370  00A2               	movwf	SetDisplay@value
  2053  0371  3000               	movlw	0
  2054  0372  120A  158A  22E0  120A  118A  	fcall	_SetDisplay
  2055                           
  2056                           ;main.c: 289:                 break;
  2057  0377  2BA2               	goto	l3340
  2058  0378                     l3334:	
  2059                           
  2060                           ;main.c: 291:                 SetDisplay(1, 0, 0, display[n_semafori]);
  2061  0378  01A0               	clrf	SetDisplay@d2
  2062  0379  01A1               	clrf	SetDisplay@d3
  2063  037A  0864               	movf	_n_semafori,w
  2064  037B  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2065  037C  0084               	movwf	4
  2066  037D  120A  158A  2000  120A  118A  	fcall	stringdir
  2067  0382  00BC               	movwf	??_main
  2068  0383  083C               	movf	??_main,w
  2069  0384  00A2               	movwf	SetDisplay@value
  2070  0385  3001               	movlw	1
  2071  0386  120A  158A  22E0  120A  118A  	fcall	_SetDisplay
  2072                           
  2073                           ;main.c: 292:                 break;
  2074  038B  2BA2               	goto	l3340
  2075  038C                     l3338:	
  2076  038C  085B               	movf	_disp,w
  2077  038D  00BC               	movwf	??_main
  2078  038E  01BD               	clrf	??_main+1
  2079                           
  2080                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2081                           ; Switch size 1, requested type "simple"
  2082                           ; Number of cases is 1, Range of values is 0 to 0
  2083                           ; switch strategies available:
  2084                           ; Name         Instructions Cycles
  2085                           ; simple_byte            4     3 (average)
  2086                           ; direct_byte           11     8 (fixed)
  2087                           ; jumptable            260     6 (fixed)
  2088                           ;	Chosen strategy is simple_byte
  2089  038F  083D               	movf	??_main+1,w
  2090  0390  3A00               	xorlw	0	; case 0
  2091  0391  1903               	skipnz
  2092  0392  2B94               	goto	l3560
  2093  0393  2BA2               	goto	l3340
  2094  0394                     l3560:	
  2095                           
  2096                           ; Switch size 1, requested type "simple"
  2097                           ; Number of cases is 4, Range of values is 0 to 3
  2098                           ; switch strategies available:
  2099                           ; Name         Instructions Cycles
  2100                           ; simple_byte           13     7 (average)
  2101                           ; direct_byte           20     8 (fixed)
  2102                           ; jumptable            260     6 (fixed)
  2103                           ;	Chosen strategy is simple_byte
  2104  0394  083C               	movf	??_main,w
  2105  0395  3A00               	xorlw	0	; case 0
  2106  0396  1903               	skipnz
  2107  0397  2B2B               	goto	l3322
  2108  0398  3A01               	xorlw	1	; case 1
  2109  0399  1903               	skipnz
  2110  039A  2B44               	goto	l3326
  2111  039B  3A03               	xorlw	3	; case 2
  2112  039C  1903               	skipnz
  2113  039D  2B63               	goto	l3332
  2114  039E  3A01               	xorlw	1	; case 3
  2115  039F  1903               	skipnz
  2116  03A0  2B78               	goto	l3334
  2117  03A1  2BA2               	goto	l3340
  2118  03A2                     l3340:	
  2119                           
  2120                           ;main.c: 295:         disp = (disp + 1) % 3;
  2121  03A2  3003               	movlw	3
  2122  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2123  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  2124  03A5  00A0               	movwf	___awmod@divisor
  2125  03A6  3000               	movlw	0
  2126  03A7  00A1               	movwf	___awmod@divisor+1
  2127  03A8  085B               	movf	_disp,w
  2128  03A9  3E01               	addlw	1
  2129  03AA  00A2               	movwf	___awmod@dividend
  2130  03AB  3000               	movlw	0
  2131  03AC  1803               	skipnc
  2132  03AD  3001               	movlw	1
  2133  03AE  00A3               	movwf	___awmod@dividend+1
  2134  03AF  120A  158A  24E1  120A  118A  	fcall	___awmod
  2135  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  2136  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  2137  03B6  0820               	movf	?___awmod,w
  2138  03B7  00BC               	movwf	??_main
  2139  03B8  083C               	movf	??_main,w
  2140  03B9  00DB               	movwf	_disp
  2141  03BA                     l3342:	
  2142                           
  2143                           ;main.c: 301:         if (secondPassed.Bit && cycled.Bit)
  2144  03BA  1C61               	btfss	_secondPassed,0
  2145  03BB  2BBD               	goto	u3471
  2146  03BC  2BBE               	goto	u3470
  2147  03BD                     u3471:	
  2148  03BD  2BC4               	goto	l249
  2149  03BE                     u3470:	
  2150  03BE                     l3344:	
  2151  03BE  1C60               	btfss	_cycled,0
  2152  03BF  2BC1               	goto	u3481
  2153  03C0  2BC2               	goto	u3480
  2154  03C1                     u3481:	
  2155  03C1  2BC4               	goto	l249
  2156  03C2                     u3480:	
  2157  03C2                     l3346:	
  2158                           
  2159                           ;main.c: 302:         {;main.c: 303:             secondPassed.Bit = 0;
  2160  03C2  1061               	bcf	_secondPassed,0
  2161                           
  2162                           ;main.c: 304:             cycled.Bit = 0;
  2163  03C3  1060               	bcf	_cycled,0
  2164  03C4                     l249:	
  2165                           ;main.c: 305:         }
  2166                           
  2167                           
  2168                           ;main.c: 307:         if (secondPassed.Bit && !cycled.Bit)
  2169  03C4  1C61               	btfss	_secondPassed,0
  2170  03C5  2BC7               	goto	u3491
  2171  03C6  2BC8               	goto	u3490
  2172  03C7                     u3491:	
  2173  03C7  2BCD               	goto	l3352
  2174  03C8                     u3490:	
  2175  03C8                     l3348:	
  2176  03C8  1860               	btfsc	_cycled,0
  2177  03C9  2BCB               	goto	u3501
  2178  03CA  2BCC               	goto	u3500
  2179  03CB                     u3501:	
  2180  03CB  2BCD               	goto	l3352
  2181  03CC                     u3500:	
  2182  03CC                     l3350:	
  2183                           
  2184                           ;main.c: 308:         {;main.c: 309:             cycled.Bit = 1;
  2185  03CC  1460               	bsf	_cycled,0
  2186  03CD                     l3352:	
  2187                           
  2188                           ;main.c: 313:         if ((dataFromGateway[0] & 0x7F) == 0x08)
  2189  03CD  307F               	movlw	127
  2190  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  2191  03CF  1303               	bcf	3,6	;RP1=0, select bank1
  2192  03D0  0520               	andwf	_dataFromGateway^(0+128),w
  2193  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  2194  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  2195  03D3  00BC               	movwf	??_main
  2196  03D4  3008               	movlw	8
  2197  03D5  063C               	xorwf	??_main,w
  2198  03D6  1D03               	btfss	3,2
  2199  03D7  2BD9               	goto	u3511
  2200  03D8  2BDA               	goto	u3510
  2201  03D9                     u3511:	
  2202  03D9  2D66               	goto	l3400
  2203  03DA                     u3510:	
  2204  03DA                     l3354:	
  2205                           
  2206                           ;main.c: 314:         {;main.c: 315:             for (int i = 0; i < 4; i++)
  2207  03DA  1283               	bcf	3,5	;RP0=0, select bank2
  2208  03DB  1703               	bsf	3,6	;RP1=1, select bank2
  2209  03DC  01EA               	clrf	main@i_445^(0+256)
  2210  03DD  01EB               	clrf	(main@i_445+1)^(0+256)
  2211  03DE                     l3356:	
  2212  03DE  086B               	movf	(main@i_445+1)^(0+256),w
  2213  03DF  3A80               	xorlw	128
  2214  03E0  00FF               	movwf	btemp+1
  2215  03E1  3080               	movlw	128
  2216  03E2  027F               	subwf	btemp+1,w
  2217  03E3  1D03               	skipz
  2218  03E4  2BE7               	goto	u3525
  2219  03E5  3004               	movlw	4
  2220  03E6  026A               	subwf	main@i_445^(0+256),w
  2221  03E7                     u3525:	
  2222  03E7  1C03               	skipc
  2223  03E8  2BEA               	goto	u3521
  2224  03E9  2BEB               	goto	u3520
  2225  03EA                     u3521:	
  2226  03EA  2D08               	goto	l3370
  2227  03EB                     u3520:	
  2228  03EB  2D26               	goto	l3376
  2229  03EC                     l3360:	
  2230                           
  2231                           ;main.c: 320:                     sendByte(0x03, 0x01, motorcycle[i]);
  2232  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2233  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  2234  03EE  01B4               	clrf	sendByte@byte1
  2235  03EF  0AB4               	incf	sendByte@byte1,f
  2236  03F0  1283               	bcf	3,5	;RP0=0, select bank2
  2237  03F1  1703               	bsf	3,6	;RP1=1, select bank2
  2238  03F2  086A               	movf	main@i_445^(0+256),w
  2239  03F3  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  2240  03F4  0084               	movwf	4
  2241  03F5  1383               	bcf	3,7	;select IRP bank0
  2242  03F6  0800               	movf	0,w
  2243  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2244  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2245  03F9  00BC               	movwf	??_main
  2246  03FA  083C               	movf	??_main,w
  2247  03FB  00B5               	movwf	sendByte@valore
  2248  03FC  3003               	movlw	3
  2249  03FD  120A  158A  2379  120A  118A  	fcall	_sendByte
  2250                           
  2251                           ;main.c: 321:                     sendByte(0x03, 0x10, car[i]);
  2252  0402  3010               	movlw	16
  2253  0403  1283               	bcf	3,5	;RP0=0, select bank0
  2254  0404  1303               	bcf	3,6	;RP1=0, select bank0
  2255  0405  00BC               	movwf	??_main
  2256  0406  083C               	movf	??_main,w
  2257  0407  00B4               	movwf	sendByte@byte1
  2258  0408  1283               	bcf	3,5	;RP0=0, select bank2
  2259  0409  1703               	bsf	3,6	;RP1=1, select bank2
  2260  040A  086A               	movf	main@i_445^(0+256),w
  2261  040B  3E50               	addlw	(low (_car| 0))& (0+255)
  2262  040C  0084               	movwf	4
  2263  040D  1383               	bcf	3,7	;select IRP bank0
  2264  040E  0800               	movf	0,w
  2265  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2266  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2267  0411  00BD               	movwf	??_main+1
  2268  0412  083D               	movf	??_main+1,w
  2269  0413  00B5               	movwf	sendByte@valore
  2270  0414  3003               	movlw	3
  2271  0415  120A  158A  2379  120A  118A  	fcall	_sendByte
  2272                           
  2273                           ;main.c: 322:                     sendByte(0x03, 0x11, truck[i]);
  2274  041A  3011               	movlw	17
  2275  041B  1283               	bcf	3,5	;RP0=0, select bank0
  2276  041C  1303               	bcf	3,6	;RP1=0, select bank0
  2277  041D  00BC               	movwf	??_main
  2278  041E  083C               	movf	??_main,w
  2279  041F  00B4               	movwf	sendByte@byte1
  2280  0420  1283               	bcf	3,5	;RP0=0, select bank2
  2281  0421  1703               	bsf	3,6	;RP1=1, select bank2
  2282  0422  086A               	movf	main@i_445^(0+256),w
  2283  0423  3E4C               	addlw	(low (_truck| 0))& (0+255)
  2284  0424  0084               	movwf	4
  2285  0425  1383               	bcf	3,7	;select IRP bank0
  2286  0426  0800               	movf	0,w
  2287  0427  1283               	bcf	3,5	;RP0=0, select bank0
  2288  0428  1303               	bcf	3,6	;RP1=0, select bank0
  2289  0429  00BD               	movwf	??_main+1
  2290  042A  083D               	movf	??_main+1,w
  2291  042B  00B5               	movwf	sendByte@valore
  2292  042C  3003               	movlw	3
  2293  042D  120A  158A  2379  120A  118A  	fcall	_sendByte
  2294                           
  2295                           ;main.c: 323:                     break;
  2296  0432  2D1D               	goto	l3372
  2297  0433                     l3362:	
  2298                           
  2299                           ;main.c: 325:                     sendByte(0x05, 0x01, motorcycle[i]);
  2300  0433  1283               	bcf	3,5	;RP0=0, select bank0
  2301  0434  1303               	bcf	3,6	;RP1=0, select bank0
  2302  0435  01B4               	clrf	sendByte@byte1
  2303  0436  0AB4               	incf	sendByte@byte1,f
  2304  0437  1283               	bcf	3,5	;RP0=0, select bank2
  2305  0438  1703               	bsf	3,6	;RP1=1, select bank2
  2306  0439  086A               	movf	main@i_445^(0+256),w
  2307  043A  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  2308  043B  0084               	movwf	4
  2309  043C  1383               	bcf	3,7	;select IRP bank0
  2310  043D  0800               	movf	0,w
  2311  043E  1283               	bcf	3,5	;RP0=0, select bank0
  2312  043F  1303               	bcf	3,6	;RP1=0, select bank0
  2313  0440  00BC               	movwf	??_main
  2314  0441  083C               	movf	??_main,w
  2315  0442  00B5               	movwf	sendByte@valore
  2316  0443  3005               	movlw	5
  2317  0444  120A  158A  2379  120A  118A  	fcall	_sendByte
  2318                           
  2319                           ;main.c: 326:                     sendByte(0x05, 0x10, car[i]);
  2320  0449  3010               	movlw	16
  2321  044A  1283               	bcf	3,5	;RP0=0, select bank0
  2322  044B  1303               	bcf	3,6	;RP1=0, select bank0
  2323  044C  00BC               	movwf	??_main
  2324  044D  083C               	movf	??_main,w
  2325  044E  00B4               	movwf	sendByte@byte1
  2326  044F  1283               	bcf	3,5	;RP0=0, select bank2
  2327  0450  1703               	bsf	3,6	;RP1=1, select bank2
  2328  0451  086A               	movf	main@i_445^(0+256),w
  2329  0452  3E50               	addlw	(low (_car| 0))& (0+255)
  2330  0453  0084               	movwf	4
  2331  0454  1383               	bcf	3,7	;select IRP bank0
  2332  0455  0800               	movf	0,w
  2333  0456  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0457  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0458  00BD               	movwf	??_main+1
  2336  0459  083D               	movf	??_main+1,w
  2337  045A  00B5               	movwf	sendByte@valore
  2338  045B  3005               	movlw	5
  2339  045C  120A  158A  2379  120A  118A  	fcall	_sendByte
  2340                           
  2341                           ;main.c: 327:                     sendByte(0x05, 0x11, truck[i]);
  2342  0461  3011               	movlw	17
  2343  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2344  0463  1303               	bcf	3,6	;RP1=0, select bank0
  2345  0464  00BC               	movwf	??_main
  2346  0465  083C               	movf	??_main,w
  2347  0466  00B4               	movwf	sendByte@byte1
  2348  0467  1283               	bcf	3,5	;RP0=0, select bank2
  2349  0468  1703               	bsf	3,6	;RP1=1, select bank2
  2350  0469  086A               	movf	main@i_445^(0+256),w
  2351  046A  3E4C               	addlw	(low (_truck| 0))& (0+255)
  2352  046B  0084               	movwf	4
  2353  046C  1383               	bcf	3,7	;select IRP bank0
  2354  046D  0800               	movf	0,w
  2355  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2356  046F  1303               	bcf	3,6	;RP1=0, select bank0
  2357  0470  00BD               	movwf	??_main+1
  2358  0471  083D               	movf	??_main+1,w
  2359  0472  00B5               	movwf	sendByte@valore
  2360  0473  3005               	movlw	5
  2361  0474  120A  158A  2379  120A  118A  	fcall	_sendByte
  2362                           
  2363                           ;main.c: 328:                     break;
  2364  0479  2D1D               	goto	l3372
  2365  047A                     l3364:	
  2366                           
  2367                           ;main.c: 330:                     sendByte(0x07, 0x01, motorcycle[i]);
  2368  047A  1283               	bcf	3,5	;RP0=0, select bank0
  2369  047B  1303               	bcf	3,6	;RP1=0, select bank0
  2370  047C  01B4               	clrf	sendByte@byte1
  2371  047D  0AB4               	incf	sendByte@byte1,f
  2372  047E  1283               	bcf	3,5	;RP0=0, select bank2
  2373  047F  1703               	bsf	3,6	;RP1=1, select bank2
  2374  0480  086A               	movf	main@i_445^(0+256),w
  2375  0481  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  2376  0482  0084               	movwf	4
  2377  0483  1383               	bcf	3,7	;select IRP bank0
  2378  0484  0800               	movf	0,w
  2379  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0487  00BC               	movwf	??_main
  2382  0488  083C               	movf	??_main,w
  2383  0489  00B5               	movwf	sendByte@valore
  2384  048A  3007               	movlw	7
  2385  048B  120A  158A  2379  120A  118A  	fcall	_sendByte
  2386                           
  2387                           ;main.c: 331:                     sendByte(0x07, 0x10, car[i]);
  2388  0490  3010               	movlw	16
  2389  0491  1283               	bcf	3,5	;RP0=0, select bank0
  2390  0492  1303               	bcf	3,6	;RP1=0, select bank0
  2391  0493  00BC               	movwf	??_main
  2392  0494  083C               	movf	??_main,w
  2393  0495  00B4               	movwf	sendByte@byte1
  2394  0496  1283               	bcf	3,5	;RP0=0, select bank2
  2395  0497  1703               	bsf	3,6	;RP1=1, select bank2
  2396  0498  086A               	movf	main@i_445^(0+256),w
  2397  0499  3E50               	addlw	(low (_car| 0))& (0+255)
  2398  049A  0084               	movwf	4
  2399  049B  1383               	bcf	3,7	;select IRP bank0
  2400  049C  0800               	movf	0,w
  2401  049D  1283               	bcf	3,5	;RP0=0, select bank0
  2402  049E  1303               	bcf	3,6	;RP1=0, select bank0
  2403  049F  00BD               	movwf	??_main+1
  2404  04A0  083D               	movf	??_main+1,w
  2405  04A1  00B5               	movwf	sendByte@valore
  2406  04A2  3007               	movlw	7
  2407  04A3  120A  158A  2379  120A  118A  	fcall	_sendByte
  2408                           
  2409                           ;main.c: 332:                     sendByte(0x07, 0x11, truck[i]);
  2410  04A8  3011               	movlw	17
  2411  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  2412  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  2413  04AB  00BC               	movwf	??_main
  2414  04AC  083C               	movf	??_main,w
  2415  04AD  00B4               	movwf	sendByte@byte1
  2416  04AE  1283               	bcf	3,5	;RP0=0, select bank2
  2417  04AF  1703               	bsf	3,6	;RP1=1, select bank2
  2418  04B0  086A               	movf	main@i_445^(0+256),w
  2419  04B1  3E4C               	addlw	(low (_truck| 0))& (0+255)
  2420  04B2  0084               	movwf	4
  2421  04B3  1383               	bcf	3,7	;select IRP bank0
  2422  04B4  0800               	movf	0,w
  2423  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  2424  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  2425  04B7  00BD               	movwf	??_main+1
  2426  04B8  083D               	movf	??_main+1,w
  2427  04B9  00B5               	movwf	sendByte@valore
  2428  04BA  3007               	movlw	7
  2429  04BB  120A  158A  2379  120A  118A  	fcall	_sendByte
  2430                           
  2431                           ;main.c: 333:                     break;
  2432  04C0  2D1D               	goto	l3372
  2433  04C1                     l3366:	
  2434                           
  2435                           ;main.c: 335:                     sendByte(0x09, 0x01, motorcycle[i]);
  2436  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  2437  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  2438  04C3  01B4               	clrf	sendByte@byte1
  2439  04C4  0AB4               	incf	sendByte@byte1,f
  2440  04C5  1283               	bcf	3,5	;RP0=0, select bank2
  2441  04C6  1703               	bsf	3,6	;RP1=1, select bank2
  2442  04C7  086A               	movf	main@i_445^(0+256),w
  2443  04C8  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  2444  04C9  0084               	movwf	4
  2445  04CA  1383               	bcf	3,7	;select IRP bank0
  2446  04CB  0800               	movf	0,w
  2447  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  2448  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  2449  04CE  00BC               	movwf	??_main
  2450  04CF  083C               	movf	??_main,w
  2451  04D0  00B5               	movwf	sendByte@valore
  2452  04D1  3009               	movlw	9
  2453  04D2  120A  158A  2379  120A  118A  	fcall	_sendByte
  2454                           
  2455                           ;main.c: 336:                     sendByte(0x09, 0x10, car[i]);
  2456  04D7  3010               	movlw	16
  2457  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2458  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2459  04DA  00BC               	movwf	??_main
  2460  04DB  083C               	movf	??_main,w
  2461  04DC  00B4               	movwf	sendByte@byte1
  2462  04DD  1283               	bcf	3,5	;RP0=0, select bank2
  2463  04DE  1703               	bsf	3,6	;RP1=1, select bank2
  2464  04DF  086A               	movf	main@i_445^(0+256),w
  2465  04E0  3E50               	addlw	(low (_car| 0))& (0+255)
  2466  04E1  0084               	movwf	4
  2467  04E2  1383               	bcf	3,7	;select IRP bank0
  2468  04E3  0800               	movf	0,w
  2469  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  2470  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  2471  04E6  00BD               	movwf	??_main+1
  2472  04E7  083D               	movf	??_main+1,w
  2473  04E8  00B5               	movwf	sendByte@valore
  2474  04E9  3009               	movlw	9
  2475  04EA  120A  158A  2379  120A  118A  	fcall	_sendByte
  2476                           
  2477                           ;main.c: 337:                     sendByte(0x09, 0x11, truck[i]);
  2478  04EF  3011               	movlw	17
  2479  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  2480  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  2481  04F2  00BC               	movwf	??_main
  2482  04F3  083C               	movf	??_main,w
  2483  04F4  00B4               	movwf	sendByte@byte1
  2484  04F5  1283               	bcf	3,5	;RP0=0, select bank2
  2485  04F6  1703               	bsf	3,6	;RP1=1, select bank2
  2486  04F7  086A               	movf	main@i_445^(0+256),w
  2487  04F8  3E4C               	addlw	(low (_truck| 0))& (0+255)
  2488  04F9  0084               	movwf	4
  2489  04FA  1383               	bcf	3,7	;select IRP bank0
  2490  04FB  0800               	movf	0,w
  2491  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2492  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2493  04FE  00BD               	movwf	??_main+1
  2494  04FF  083D               	movf	??_main+1,w
  2495  0500  00B5               	movwf	sendByte@valore
  2496  0501  3009               	movlw	9
  2497  0502  120A  158A  2379  120A  118A  	fcall	_sendByte
  2498                           
  2499                           ;main.c: 338:                     break;
  2500  0507  2D1D               	goto	l3372
  2501  0508                     l3370:	
  2502                           
  2503                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2504                           ; Switch size 1, requested type "simple"
  2505                           ; Number of cases is 1, Range of values is 0 to 0
  2506                           ; switch strategies available:
  2507                           ; Name         Instructions Cycles
  2508                           ; simple_byte            4     3 (average)
  2509                           ; direct_byte           11     8 (fixed)
  2510                           ; jumptable            260     6 (fixed)
  2511                           ;	Chosen strategy is simple_byte
  2512  0508  1283               	bcf	3,5	;RP0=0, select bank2
  2513  0509  1703               	bsf	3,6	;RP1=1, select bank2
  2514  050A  086B               	movf	(main@i_445+1)^(0+256),w
  2515  050B  3A00               	xorlw	0	; case 0
  2516  050C  1903               	skipnz
  2517  050D  2D0F               	goto	l3562
  2518  050E  2D1D               	goto	l3372
  2519  050F                     l3562:	
  2520                           
  2521                           ; Switch size 1, requested type "simple"
  2522                           ; Number of cases is 4, Range of values is 0 to 3
  2523                           ; switch strategies available:
  2524                           ; Name         Instructions Cycles
  2525                           ; simple_byte           13     7 (average)
  2526                           ; direct_byte           20     8 (fixed)
  2527                           ; jumptable            260     6 (fixed)
  2528                           ;	Chosen strategy is simple_byte
  2529  050F  086A               	movf	main@i_445^(0+256),w
  2530  0510  3A00               	xorlw	0	; case 0
  2531  0511  1903               	skipnz
  2532  0512  2BEC               	goto	l3360
  2533  0513  3A01               	xorlw	1	; case 1
  2534  0514  1903               	skipnz
  2535  0515  2C33               	goto	l3362
  2536  0516  3A03               	xorlw	3	; case 2
  2537  0517  1903               	skipnz
  2538  0518  2C7A               	goto	l3364
  2539  0519  3A01               	xorlw	1	; case 3
  2540  051A  1903               	skipnz
  2541  051B  2CC1               	goto	l3366
  2542  051C  2D1D               	goto	l3372
  2543  051D                     l3372:	
  2544                           
  2545                           ;main.c: 340:             }
  2546  051D  3001               	movlw	1
  2547  051E  1283               	bcf	3,5	;RP0=0, select bank2
  2548  051F  1703               	bsf	3,6	;RP1=1, select bank2
  2549  0520  07EA               	addwf	main@i_445^(0+256),f
  2550  0521  1803               	skipnc
  2551  0522  0AEB               	incf	(main@i_445+1)^(0+256),f
  2552  0523  3000               	movlw	0
  2553  0524  07EB               	addwf	(main@i_445+1)^(0+256),f
  2554  0525  2BDE               	goto	l3356
  2555  0526                     l3376:	
  2556                           
  2557                           ;main.c: 341:             for (int i = 0; i < 4; i++)
  2558  0526  1283               	bcf	3,5	;RP0=0, select bank2
  2559  0527  1703               	bsf	3,6	;RP1=1, select bank2
  2560  0528  01E6               	clrf	main@i_446^(0+256)
  2561  0529  01E7               	clrf	(main@i_446+1)^(0+256)
  2562  052A                     l3378:	
  2563  052A  0867               	movf	(main@i_446+1)^(0+256),w
  2564  052B  3A80               	xorlw	128
  2565  052C  00FF               	movwf	btemp+1
  2566  052D  3080               	movlw	128
  2567  052E  027F               	subwf	btemp+1,w
  2568  052F  1D03               	skipz
  2569  0530  2D33               	goto	u3535
  2570  0531  3004               	movlw	4
  2571  0532  0266               	subwf	main@i_446^(0+256),w
  2572  0533                     u3535:	
  2573  0533  1C03               	skipc
  2574  0534  2D36               	goto	u3531
  2575  0535  2D37               	goto	u3530
  2576  0536                     u3531:	
  2577  0536  2D38               	goto	l3382
  2578  0537                     u3530:	
  2579  0537  2D4E               	goto	l3388
  2580  0538                     l3382:	
  2581                           
  2582                           ;main.c: 342:             {;main.c: 343:                 motorcycle[i] = 0;
  2583  0538  1283               	bcf	3,5	;RP0=0, select bank2
  2584  0539  1703               	bsf	3,6	;RP1=1, select bank2
  2585  053A  0866               	movf	main@i_446^(0+256),w
  2586  053B  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  2587  053C  0084               	movwf	4
  2588  053D  1383               	bcf	3,7	;select IRP bank0
  2589  053E  0180               	clrf	0
  2590                           
  2591                           ;main.c: 344:                 car[i] = 0;
  2592  053F  0866               	movf	main@i_446^(0+256),w
  2593  0540  3E50               	addlw	(low (_car| 0))& (0+255)
  2594  0541  0084               	movwf	4
  2595  0542  0180               	clrf	0
  2596                           
  2597                           ;main.c: 345:                 truck[i] = 0;
  2598  0543  0866               	movf	main@i_446^(0+256),w
  2599  0544  3E4C               	addlw	(low (_truck| 0))& (0+255)
  2600  0545  0084               	movwf	4
  2601  0546  0180               	clrf	0
  2602  0547                     l3384:	
  2603                           
  2604                           ;main.c: 346:             }
  2605  0547  3001               	movlw	1
  2606  0548  07E6               	addwf	main@i_446^(0+256),f
  2607  0549  1803               	skipnc
  2608  054A  0AE7               	incf	(main@i_446+1)^(0+256),f
  2609  054B  3000               	movlw	0
  2610  054C  07E7               	addwf	(main@i_446+1)^(0+256),f
  2611  054D  2D2A               	goto	l3378
  2612  054E                     l3388:	
  2613                           
  2614                           ;main.c: 347:             for (unsigned char i = 0; i < 5; i++)
  2615  054E  1283               	bcf	3,5	;RP0=0, select bank2
  2616  054F  1703               	bsf	3,6	;RP1=1, select bank2
  2617  0550  01E4               	clrf	main@i_447^(0+256)
  2618  0551                     l3390:	
  2619  0551  3005               	movlw	5
  2620  0552  0264               	subwf	main@i_447^(0+256),w
  2621  0553  1C03               	skipc
  2622  0554  2D56               	goto	u3541
  2623  0555  2D57               	goto	u3540
  2624  0556                     u3541:	
  2625  0556  2D58               	goto	l3394
  2626  0557                     u3540:	
  2627  0557  2D66               	goto	l3400
  2628  0558                     l3394:	
  2629                           
  2630                           ;main.c: 348:             {;main.c: 349:                 dataFromGateway[i] = 0;
  2631  0558  0864               	movf	main@i_447^(0+256),w
  2632  0559  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  2633  055A  0084               	movwf	4
  2634  055B  1383               	bcf	3,7	;select IRP bank1
  2635  055C  0180               	clrf	0
  2636  055D                     l3396:	
  2637                           
  2638                           ;main.c: 350:             }
  2639  055D  3001               	movlw	1
  2640  055E  1283               	bcf	3,5	;RP0=0, select bank0
  2641  055F  1303               	bcf	3,6	;RP1=0, select bank0
  2642  0560  00BC               	movwf	??_main
  2643  0561  083C               	movf	??_main,w
  2644  0562  1283               	bcf	3,5	;RP0=0, select bank2
  2645  0563  1703               	bsf	3,6	;RP1=1, select bank2
  2646  0564  07E4               	addwf	main@i_447^(0+256),f
  2647  0565  2D51               	goto	l3390
  2648  0566                     l3400:	
  2649                           
  2650                           ;main.c: 355:         if ((dataFromGateway[0] & 0x7F) == 0x0A)
  2651  0566  307F               	movlw	127
  2652  0567  1683               	bsf	3,5	;RP0=1, select bank1
  2653  0568  1303               	bcf	3,6	;RP1=0, select bank1
  2654  0569  0520               	andwf	_dataFromGateway^(0+128),w
  2655  056A  1283               	bcf	3,5	;RP0=0, select bank0
  2656  056B  1303               	bcf	3,6	;RP1=0, select bank0
  2657  056C  00BC               	movwf	??_main
  2658  056D  300A               	movlw	10
  2659  056E  063C               	xorwf	??_main,w
  2660  056F  1D03               	btfss	3,2
  2661  0570  2D72               	goto	u3551
  2662  0571  2D73               	goto	u3550
  2663  0572                     u3551:	
  2664  0572  2895               	goto	l3220
  2665  0573                     u3550:	
  2666  0573                     l3402:	
  2667                           
  2668                           ;main.c: 356:         {;main.c: 357:             temp = (char)map((ADC_Read(0) >> 2), 0,
      +                           255, -20, 60);
  2669  0573  3000               	movlw	0
  2670  0574  120A  158A  232C  120A  118A  	fcall	_ADC_Read
  2671  0579  1283               	bcf	3,5	;RP0=0, select bank0
  2672  057A  1303               	bcf	3,6	;RP1=0, select bank0
  2673  057B  0820               	movf	?_ADC_Read,w
  2674  057C  00BC               	movwf	??_main
  2675  057D  0821               	movf	?_ADC_Read+1,w
  2676  057E  00BD               	movwf	??_main+1
  2677  057F  0D3D               	rlf	??_main+1,w
  2678  0580  0CBD               	rrf	??_main+1,f
  2679  0581  0CBC               	rrf	??_main,f
  2680  0582  0D3D               	rlf	??_main+1,w
  2681  0583  0CBD               	rrf	??_main+1,f
  2682  0584  0CBC               	rrf	??_main,f
  2683  0585  083C               	movf	??_main,w
  2684  0586  00B0               	movwf	map@x
  2685  0587  083D               	movf	??_main+1,w
  2686  0588  00B1               	movwf	map@x+1
  2687  0589  3000               	movlw	0
  2688  058A  00B2               	movwf	map@in_min
  2689  058B  00B3               	movwf	map@in_min+1
  2690  058C  30FF               	movlw	255
  2691  058D  00B4               	movwf	map@in_max
  2692  058E  3000               	movlw	0
  2693  058F  00B5               	movwf	map@in_max+1
  2694  0590  30EC               	movlw	236
  2695  0591  00B6               	movwf	map@out_min
  2696  0592  30FF               	movlw	255
  2697  0593  00B7               	movwf	map@out_min+1
  2698  0594  303C               	movlw	60
  2699  0595  00B8               	movwf	map@out_max
  2700  0596  3000               	movlw	0
  2701  0597  00B9               	movwf	map@out_max+1
  2702  0598  120A  158A  23D8  120A  118A  	fcall	_map
  2703  059D  1283               	bcf	3,5	;RP0=0, select bank0
  2704  059E  1303               	bcf	3,6	;RP1=0, select bank0
  2705  059F  0830               	movf	?_map,w
  2706  05A0  00BE               	movwf	??_main+2
  2707  05A1  083E               	movf	??_main+2,w
  2708  05A2  1283               	bcf	3,5	;RP0=0, select bank2
  2709  05A3  1703               	bsf	3,6	;RP1=1, select bank2
  2710  05A4  00DA               	movwf	main@temp^(0+256)
  2711                           
  2712                           ;main.c: 358:             umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  2713  05A5  3001               	movlw	1
  2714  05A6  120A  158A  232C  120A  118A  	fcall	_ADC_Read
  2715  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  2716  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  2717  05AD  0820               	movf	?_ADC_Read,w
  2718  05AE  00BC               	movwf	??_main
  2719  05AF  0821               	movf	?_ADC_Read+1,w
  2720  05B0  00BD               	movwf	??_main+1
  2721  05B1  0D3D               	rlf	??_main+1,w
  2722  05B2  0CBD               	rrf	??_main+1,f
  2723  05B3  0CBC               	rrf	??_main,f
  2724  05B4  0D3D               	rlf	??_main+1,w
  2725  05B5  0CBD               	rrf	??_main+1,f
  2726  05B6  0CBC               	rrf	??_main,f
  2727  05B7  083C               	movf	??_main,w
  2728  05B8  00B0               	movwf	map@x
  2729  05B9  083D               	movf	??_main+1,w
  2730  05BA  00B1               	movwf	map@x+1
  2731  05BB  3000               	movlw	0
  2732  05BC  00B2               	movwf	map@in_min
  2733  05BD  00B3               	movwf	map@in_min+1
  2734  05BE  30FF               	movlw	255
  2735  05BF  00B4               	movwf	map@in_max
  2736  05C0  3000               	movlw	0
  2737  05C1  00B5               	movwf	map@in_max+1
  2738  05C2  3000               	movlw	0
  2739  05C3  00B6               	movwf	map@out_min
  2740  05C4  00B7               	movwf	map@out_min+1
  2741  05C5  3064               	movlw	100
  2742  05C6  00B8               	movwf	map@out_max
  2743  05C7  3000               	movlw	0
  2744  05C8  00B9               	movwf	map@out_max+1
  2745  05C9  120A  158A  23D8  120A  118A  	fcall	_map
  2746  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  2747  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  2748  05D0  0830               	movf	?_map,w
  2749  05D1  00BE               	movwf	??_main+2
  2750  05D2  083E               	movf	??_main+2,w
  2751  05D3  1283               	bcf	3,5	;RP0=0, select bank2
  2752  05D4  1703               	bsf	3,6	;RP1=1, select bank2
  2753  05D5  00DB               	movwf	main@umidita^(0+256)
  2754                           
  2755                           ;main.c: 359:             pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  2756  05D6  3005               	movlw	5
  2757  05D7  120A  158A  232C  120A  118A  	fcall	_ADC_Read
  2758  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  2759  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  2760  05DE  0820               	movf	?_ADC_Read,w
  2761  05DF  00BC               	movwf	??_main
  2762  05E0  0821               	movf	?_ADC_Read+1,w
  2763  05E1  00BD               	movwf	??_main+1
  2764  05E2  0D3D               	rlf	??_main+1,w
  2765  05E3  0CBD               	rrf	??_main+1,f
  2766  05E4  0CBC               	rrf	??_main,f
  2767  05E5  0D3D               	rlf	??_main+1,w
  2768  05E6  0CBD               	rrf	??_main+1,f
  2769  05E7  0CBC               	rrf	??_main,f
  2770  05E8  083C               	movf	??_main,w
  2771  05E9  00B0               	movwf	map@x
  2772  05EA  083D               	movf	??_main+1,w
  2773  05EB  00B1               	movwf	map@x+1
  2774  05EC  3000               	movlw	0
  2775  05ED  00B2               	movwf	map@in_min
  2776  05EE  00B3               	movwf	map@in_min+1
  2777  05EF  30FF               	movlw	255
  2778  05F0  00B4               	movwf	map@in_max
  2779  05F1  3000               	movlw	0
  2780  05F2  00B5               	movwf	map@in_max+1
  2781  05F3  3000               	movlw	0
  2782  05F4  00B6               	movwf	map@out_min
  2783  05F5  00B7               	movwf	map@out_min+1
  2784  05F6  3064               	movlw	100
  2785  05F7  00B8               	movwf	map@out_max
  2786  05F8  3000               	movlw	0
  2787  05F9  00B9               	movwf	map@out_max+1
  2788  05FA  120A  158A  23D8  120A  118A  	fcall	_map
  2789  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  2790  0600  1303               	bcf	3,6	;RP1=0, select bank0
  2791  0601  0830               	movf	?_map,w
  2792  0602  00BE               	movwf	??_main+2
  2793  0603  083E               	movf	??_main+2,w
  2794  0604  1283               	bcf	3,5	;RP0=0, select bank2
  2795  0605  1703               	bsf	3,6	;RP1=1, select bank2
  2796  0606  00DC               	movwf	main@pressione^(0+256)
  2797  0607                     l3404:	
  2798                           
  2799                           ;main.c: 360:             sendByte(0x02, 0x00, temp);
  2800  0607  1283               	bcf	3,5	;RP0=0, select bank0
  2801  0608  1303               	bcf	3,6	;RP1=0, select bank0
  2802  0609  01B4               	clrf	sendByte@byte1
  2803  060A  1283               	bcf	3,5	;RP0=0, select bank2
  2804  060B  1703               	bsf	3,6	;RP1=1, select bank2
  2805  060C  085A               	movf	main@temp^(0+256),w
  2806  060D  1283               	bcf	3,5	;RP0=0, select bank0
  2807  060E  1303               	bcf	3,6	;RP1=0, select bank0
  2808  060F  00BC               	movwf	??_main
  2809  0610  083C               	movf	??_main,w
  2810  0611  00B5               	movwf	sendByte@valore
  2811  0612  3002               	movlw	2
  2812  0613  120A  158A  2379  120A  118A  	fcall	_sendByte
  2813  0618                     l3406:	
  2814                           
  2815                           ;main.c: 361:             sendByte(0x04, 0x00, umidita);
  2816  0618  1283               	bcf	3,5	;RP0=0, select bank0
  2817  0619  1303               	bcf	3,6	;RP1=0, select bank0
  2818  061A  01B4               	clrf	sendByte@byte1
  2819  061B  1283               	bcf	3,5	;RP0=0, select bank2
  2820  061C  1703               	bsf	3,6	;RP1=1, select bank2
  2821  061D  085B               	movf	main@umidita^(0+256),w
  2822  061E  1283               	bcf	3,5	;RP0=0, select bank0
  2823  061F  1303               	bcf	3,6	;RP1=0, select bank0
  2824  0620  00BC               	movwf	??_main
  2825  0621  083C               	movf	??_main,w
  2826  0622  00B5               	movwf	sendByte@valore
  2827  0623  3004               	movlw	4
  2828  0624  120A  158A  2379  120A  118A  	fcall	_sendByte
  2829  0629                     l3408:	
  2830                           
  2831                           ;main.c: 362:             sendByte(0x06, 0x00, pressione);
  2832  0629  1283               	bcf	3,5	;RP0=0, select bank0
  2833  062A  1303               	bcf	3,6	;RP1=0, select bank0
  2834  062B  01B4               	clrf	sendByte@byte1
  2835  062C  1283               	bcf	3,5	;RP0=0, select bank2
  2836  062D  1703               	bsf	3,6	;RP1=1, select bank2
  2837  062E  085C               	movf	main@pressione^(0+256),w
  2838  062F  1283               	bcf	3,5	;RP0=0, select bank0
  2839  0630  1303               	bcf	3,6	;RP1=0, select bank0
  2840  0631  00BC               	movwf	??_main
  2841  0632  083C               	movf	??_main,w
  2842  0633  00B5               	movwf	sendByte@valore
  2843  0634  3006               	movlw	6
  2844  0635  120A  158A  2379  120A  118A  	fcall	_sendByte
  2845  063A                     l3410:	
  2846                           
  2847                           ;main.c: 363:             for (unsigned char i = 0; i < 5; i++)
  2848  063A  1283               	bcf	3,5	;RP0=0, select bank2
  2849  063B  1703               	bsf	3,6	;RP1=1, select bank2
  2850  063C  01E5               	clrf	main@i_449^(0+256)
  2851  063D                     l3412:	
  2852  063D  3005               	movlw	5
  2853  063E  0265               	subwf	main@i_449^(0+256),w
  2854  063F  1C03               	skipc
  2855  0640  2E42               	goto	u3561
  2856  0641  2E43               	goto	u3560
  2857  0642                     u3561:	
  2858  0642  2E44               	goto	l3416
  2859  0643                     u3560:	
  2860  0643  2895               	goto	l3220
  2861  0644                     l3416:	
  2862                           
  2863                           ;main.c: 364:             {;main.c: 365:                 dataFromGateway[i] = 0;
  2864  0644  0865               	movf	main@i_449^(0+256),w
  2865  0645  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  2866  0646  0084               	movwf	4
  2867  0647  1383               	bcf	3,7	;select IRP bank1
  2868  0648  0180               	clrf	0
  2869  0649                     l3418:	
  2870                           
  2871                           ;main.c: 366:             }
  2872  0649  3001               	movlw	1
  2873  064A  1283               	bcf	3,5	;RP0=0, select bank0
  2874  064B  1303               	bcf	3,6	;RP1=0, select bank0
  2875  064C  00BC               	movwf	??_main
  2876  064D  083C               	movf	??_main,w
  2877  064E  1283               	bcf	3,5	;RP0=0, select bank2
  2878  064F  1703               	bsf	3,6	;RP1=1, select bank2
  2879  0650  07E5               	addwf	main@i_449^(0+256),f
  2880  0651  2E3D               	goto	l3412
  2881  0652  120A  118A  280E   	ljmp	start
  2882  0655                     __end_of_main:	
  2883                           
  2884                           	psect	text1
  2885  0B79                     __ptext1:	
  2886 ;; *************** function _sendByte *****************
  2887 ;; Defined at:
  2888 ;;		line 431 in file "main.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  byte0           1    wreg     unsigned char 
  2891 ;;  byte1           1   20[BANK0 ] unsigned char 
  2892 ;;  valore          1   21[BANK0 ] unsigned char 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  byte0           1   25[BANK0 ] unsigned char 
  2895 ;;  i               1   27[BANK0 ] unsigned char 
  2896 ;;  txByte          1   26[BANK0 ] PTR unsigned char 
  2897 ;;		 -> BuildByte@txByte(5), 
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      void 
  2900 ;; Registers used:
  2901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2907 ;;      Params:         0       2       0       0       0
  2908 ;;      Locals:         0       3       0       0       0
  2909 ;;      Temps:          0       3       0       0       0
  2910 ;;      Totals:         0       8       0       0       0
  2911 ;;Total ram usage:        8 bytes
  2912 ;; Hardware stack levels used:    1
  2913 ;; Hardware stack levels required when called:    3
  2914 ;; This function calls:
  2915 ;;		_BuildByte
  2916 ;;		_UART_TxChar
  2917 ;; This function is called by:
  2918 ;;		_main
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _sendByte
  2924  0B79                     _sendByte:	
  2925                           
  2926                           ;incstack = 0
  2927                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2928                           ;sendByte@byte0 stored from wreg
  2929  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0B7B  00B9               	movwf	sendByte@byte0
  2932  0B7C                     l3132:	
  2933                           
  2934                           ;main.c: 431: void sendByte(char byte0, char byte1, char valore);main.c: 432: {;main.c: 
      +                          433:     char *txByte;;main.c: 434:     txByte = BuildByte(byte0, byte1, valore);
  2935  0B7C  0834               	movf	sendByte@byte1,w
  2936  0B7D  00B6               	movwf	??_sendByte
  2937  0B7E  0836               	movf	??_sendByte,w
  2938  0B7F  00A0               	movwf	BuildByte@byte1
  2939  0B80  0835               	movf	sendByte@valore,w
  2940  0B81  00B7               	movwf	??_sendByte+1
  2941  0B82  0837               	movf	??_sendByte+1,w
  2942  0B83  00A1               	movwf	BuildByte@valore
  2943  0B84  0839               	movf	sendByte@byte0,w
  2944  0B85  120A  118A  2738  120A  158A  	fcall	_BuildByte
  2945  0B8A  1283               	bcf	3,5	;RP0=0, select bank0
  2946  0B8B  1303               	bcf	3,6	;RP1=0, select bank0
  2947  0B8C  00B8               	movwf	??_sendByte+2
  2948  0B8D  0838               	movf	??_sendByte+2,w
  2949  0B8E  00BA               	movwf	sendByte@txByte
  2950  0B8F                     l3134:	
  2951                           
  2952                           ;main.c: 436:     for (unsigned char i = 0; i < 5; i++)
  2953  0B8F  01BB               	clrf	sendByte@i
  2954  0B90                     l3140:	
  2955                           
  2956                           ;main.c: 437:     {;main.c: 438:         UART_TxChar(txByte++);
  2957  0B90  083A               	movf	sendByte@txByte,w
  2958  0B91  120A  158A  22AF  120A  158A  	fcall	_UART_TxChar
  2959  0B96                     l3142:	
  2960  0B96  3001               	movlw	1
  2961  0B97  1283               	bcf	3,5	;RP0=0, select bank0
  2962  0B98  1303               	bcf	3,6	;RP1=0, select bank0
  2963  0B99  00B6               	movwf	??_sendByte
  2964  0B9A  0836               	movf	??_sendByte,w
  2965  0B9B  07BA               	addwf	sendByte@txByte,f
  2966  0B9C                     l3144:	
  2967                           
  2968                           ;main.c: 439:     }
  2969  0B9C  3001               	movlw	1
  2970  0B9D  00B6               	movwf	??_sendByte
  2971  0B9E  0836               	movf	??_sendByte,w
  2972  0B9F  07BB               	addwf	sendByte@i,f
  2973  0BA0                     l3146:	
  2974  0BA0  3005               	movlw	5
  2975  0BA1  023B               	subwf	sendByte@i,w
  2976  0BA2  1C03               	skipc
  2977  0BA3  2BA5               	goto	u3191
  2978  0BA4  2BA6               	goto	u3190
  2979  0BA5                     u3191:	
  2980  0BA5  2B90               	goto	l3140
  2981  0BA6                     u3190:	
  2982  0BA6                     l304:	
  2983  0BA6  0008               	return
  2984  0BA7                     __end_of_sendByte:	
  2985                           
  2986                           	psect	text2
  2987  0AAF                     __ptext2:	
  2988 ;; *************** function _UART_TxChar *****************
  2989 ;; Defined at:
  2990 ;;		line 406 in file "main.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  ch              1    wreg     unsigned char 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  ch              1    0[BANK0 ] unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3004 ;;      Params:         0       0       0       0       0
  3005 ;;      Locals:         0       1       0       0       0
  3006 ;;      Temps:          0       0       0       0       0
  3007 ;;      Totals:         0       1       0       0       0
  3008 ;;Total ram usage:        1 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    2
  3011 ;; This function calls:
  3012 ;;		Nothing
  3013 ;; This function is called by:
  3014 ;;		_sendByte
  3015 ;;		_UART_Write_Text
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           
  3020                           ;psect for function _UART_TxChar
  3021  0AAF                     _UART_TxChar:	
  3022                           
  3023                           ;incstack = 0
  3024                           ; Regs used in _UART_TxChar: [wreg]
  3025                           ;UART_TxChar@ch stored from wreg
  3026  0AAF  1283               	bcf	3,5	;RP0=0, select bank0
  3027  0AB0  1303               	bcf	3,6	;RP1=0, select bank0
  3028  0AB1  00A0               	movwf	UART_TxChar@ch
  3029  0AB2                     l2856:	
  3030  0AB2                     l284:	
  3031                           ;main.c: 409:         ;
  3032                           
  3033                           
  3034                           ;main.c: 408:     while (!TXIF)
  3035  0AB2  1E0C               	btfss	12,4	;volatile
  3036  0AB3  2AB5               	goto	u2721
  3037  0AB4  2AB6               	goto	u2720
  3038  0AB5                     u2721:	
  3039  0AB5  2AB2               	goto	l284
  3040  0AB6                     u2720:	
  3041  0AB6                     l286:	
  3042                           
  3043                           ;main.c: 410:     TXIF = 0;
  3044  0AB6  120C               	bcf	12,4	;volatile
  3045  0AB7                     l2858:	
  3046                           
  3047                           ;main.c: 411:     TXREG = ch;
  3048  0AB7  0820               	movf	UART_TxChar@ch,w
  3049  0AB8  0099               	movwf	25	;volatile
  3050  0AB9                     l287:	
  3051  0AB9  0008               	return
  3052  0ABA                     __end_of_UART_TxChar:	
  3053                           
  3054                           	psect	text3
  3055  0738                     __ptext3:	
  3056 ;; *************** function _BuildByte *****************
  3057 ;; Defined at:
  3058 ;;		line 2 in file "./CustomLib/Serial.h"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;  byte0           1    wreg     unsigned char 
  3061 ;;  byte1           1    0[BANK0 ] unsigned char 
  3062 ;;  valore          1    1[BANK0 ] unsigned char 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  byte0           1    4[BANK0 ] unsigned char 
  3065 ;;  y               2   14[BANK0 ] int 
  3066 ;;  y               2   12[BANK0 ] int 
  3067 ;;  i               2   18[BANK0 ] int 
  3068 ;;  i               2   16[BANK0 ] int 
  3069 ;;  txByte          5    5[BANK0 ] unsigned char [5]
  3070 ;;  sommaColumn     1   11[BANK0 ] unsigned char 
  3071 ;;  sommaRow        1   10[BANK0 ] unsigned char 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      PTR unsigned char 
  3074 ;; Registers used:
  3075 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3081 ;;      Params:         0       2       0       0       0
  3082 ;;      Locals:         0      16       0       0       0
  3083 ;;      Temps:          0       2       0       0       0
  3084 ;;      Totals:         0      20       0       0       0
  3085 ;;Total ram usage:       20 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    2
  3088 ;; This function calls:
  3089 ;;		Nothing
  3090 ;; This function is called by:
  3091 ;;		_sendByte
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           
  3096                           ;psect for function _BuildByte
  3097  0738                     _BuildByte:	
  3098                           
  3099                           ;incstack = 0
  3100                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  3101                           ;BuildByte@byte0 stored from wreg
  3102  0738  1283               	bcf	3,5	;RP0=0, select bank0
  3103  0739  1303               	bcf	3,6	;RP1=0, select bank0
  3104  073A  00A4               	movwf	BuildByte@byte0
  3105  073B                     l2788:	
  3106                           
  3107                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  3108  073B  0824               	movf	BuildByte@byte0,w
  3109  073C  397F               	andlw	127
  3110  073D  00A2               	movwf	??_BuildByte
  3111  073E  0822               	movf	??_BuildByte,w
  3112  073F  00A5               	movwf	BuildByte@txByte
  3113                           
  3114                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  3115  0740  0820               	movf	BuildByte@byte1,w
  3116  0741  397F               	andlw	127
  3117  0742  00A2               	movwf	??_BuildByte
  3118  0743  0822               	movf	??_BuildByte,w
  3119  0744  00A6               	movwf	BuildByte@txByte+1
  3120                           
  3121                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  3122  0745  0821               	movf	BuildByte@valore,w
  3123  0746  397F               	andlw	127
  3124  0747  00A2               	movwf	??_BuildByte
  3125  0748  0822               	movf	??_BuildByte,w
  3126  0749  00A7               	movwf	BuildByte@txByte+2
  3127  074A                     l2790:	
  3128                           
  3129                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  3130  074A  0821               	movf	BuildByte@valore,w
  3131  074B  00A2               	movwf	??_BuildByte
  3132  074C  3007               	movlw	7
  3133  074D                     u2625:	
  3134  074D  1003               	clrc
  3135  074E  0CA2               	rrf	??_BuildByte,f
  3136  074F  3EFF               	addlw	-1
  3137  0750  1D03               	skipz
  3138  0751  2F4D               	goto	u2625
  3139  0752  0822               	movf	??_BuildByte,w
  3140  0753  397F               	andlw	127
  3141  0754  00A3               	movwf	??_BuildByte+1
  3142  0755  0823               	movf	??_BuildByte+1,w
  3143  0756  00A8               	movwf	BuildByte@txByte+3
  3144  0757                     l2792:	
  3145                           
  3146                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  3147  0757  01AA               	clrf	BuildByte@sommaRow
  3148  0758                     l2794:	
  3149                           
  3150                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  3151  0758  01AB               	clrf	BuildByte@sommaColumn
  3152  0759                     l2796:	
  3153                           
  3154                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  3155  0759  01B0               	clrf	BuildByte@i
  3156  075A  01B1               	clrf	BuildByte@i+1
  3157  075B                     l2802:	
  3158                           
  3159                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  3160  075B  1283               	bcf	3,5	;RP0=0, select bank0
  3161  075C  1303               	bcf	3,6	;RP1=0, select bank0
  3162  075D  01AC               	clrf	BuildByte@y
  3163  075E  01AD               	clrf	BuildByte@y+1
  3164  075F                     l2808:	
  3165                           
  3166                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  3167  075F  1283               	bcf	3,5	;RP0=0, select bank0
  3168  0760  1303               	bcf	3,6	;RP1=0, select bank0
  3169  0761  0830               	movf	BuildByte@i,w
  3170  0762  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3171  0763  0084               	movwf	4
  3172  0764  1383               	bcf	3,7	;select IRP bank0
  3173  0765  0800               	movf	0,w
  3174  0766  00A2               	movwf	??_BuildByte
  3175  0767  0A2C               	incf	BuildByte@y,w
  3176  0768  2F6B               	goto	u2634
  3177  0769                     u2635:	
  3178  0769  1003               	clrc
  3179  076A  0CA2               	rrf	??_BuildByte,f
  3180  076B                     u2634:	
  3181  076B  3EFF               	addlw	-1
  3182  076C  1D03               	skipz
  3183  076D  2F69               	goto	u2635
  3184  076E  0822               	movf	??_BuildByte,w
  3185  076F  3901               	andlw	1
  3186  0770  00A3               	movwf	??_BuildByte+1
  3187  0771  0823               	movf	??_BuildByte+1,w
  3188  0772  07AA               	addwf	BuildByte@sommaRow,f
  3189  0773                     l2810:	
  3190                           
  3191                           ;./CustomLib/Serial.h: 18:         }
  3192  0773  3001               	movlw	1
  3193  0774  07AC               	addwf	BuildByte@y,f
  3194  0775  1803               	skipnc
  3195  0776  0AAD               	incf	BuildByte@y+1,f
  3196  0777  3000               	movlw	0
  3197  0778  07AD               	addwf	BuildByte@y+1,f
  3198  0779                     l2812:	
  3199  0779  082D               	movf	BuildByte@y+1,w
  3200  077A  3A80               	xorlw	128
  3201  077B  00FF               	movwf	btemp+1
  3202  077C  3080               	movlw	128
  3203  077D  027F               	subwf	btemp+1,w
  3204  077E  1D03               	skipz
  3205  077F  2F82               	goto	u2645
  3206  0780  3008               	movlw	8
  3207  0781  022C               	subwf	BuildByte@y,w
  3208  0782                     u2645:	
  3209  0782  1C03               	skipc
  3210  0783  2F85               	goto	u2641
  3211  0784  2F86               	goto	u2640
  3212  0785                     u2641:	
  3213  0785  2F5F               	goto	l2808
  3214  0786                     u2640:	
  3215  0786                     l119:	
  3216                           
  3217                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  3218  0786  1283               	bcf	3,5	;RP0=0, select bank0
  3219  0787  1303               	bcf	3,6	;RP1=0, select bank0
  3220  0788  1C2A               	btfss	BuildByte@sommaRow,0
  3221  0789  2F8B               	goto	u2651
  3222  078A  2F8C               	goto	u2650
  3223  078B                     u2651:	
  3224  078B  2F94               	goto	l2816
  3225  078C                     u2650:	
  3226  078C                     l2814:	
  3227                           
  3228                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  3229  078C  3080               	movlw	128
  3230  078D  00A2               	movwf	??_BuildByte
  3231  078E  0830               	movf	BuildByte@i,w
  3232  078F  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3233  0790  0084               	movwf	4
  3234  0791  0822               	movf	??_BuildByte,w
  3235  0792  1383               	bcf	3,7	;select IRP bank0
  3236  0793  0780               	addwf	0,f
  3237  0794                     l2816:	
  3238                           
  3239                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  3240  0794  01AA               	clrf	BuildByte@sommaRow
  3241  0795                     l2820:	
  3242                           ;./CustomLib/Serial.h: 23:         }
  3243                           
  3244                           
  3245                           ;./CustomLib/Serial.h: 28:     }
  3246  0795  3001               	movlw	1
  3247  0796  07B0               	addwf	BuildByte@i,f
  3248  0797  1803               	skipnc
  3249  0798  0AB1               	incf	BuildByte@i+1,f
  3250  0799  3000               	movlw	0
  3251  079A  07B1               	addwf	BuildByte@i+1,f
  3252  079B                     l2822:	
  3253  079B  0831               	movf	BuildByte@i+1,w
  3254  079C  3A80               	xorlw	128
  3255  079D  00FF               	movwf	btemp+1
  3256  079E  3080               	movlw	128
  3257  079F  027F               	subwf	btemp+1,w
  3258  07A0  1D03               	skipz
  3259  07A1  2FA4               	goto	u2665
  3260  07A2  3004               	movlw	4
  3261  07A3  0230               	subwf	BuildByte@i,w
  3262  07A4                     u2665:	
  3263  07A4  1C03               	skipc
  3264  07A5  2FA7               	goto	u2661
  3265  07A6  2FA8               	goto	u2660
  3266  07A7                     u2661:	
  3267  07A7  2F5B               	goto	l2802
  3268  07A8                     u2660:	
  3269  07A8                     l2824:	
  3270                           
  3271                           ;./CustomLib/Serial.h: 30:     for (int i = 0; i < 8; i++)
  3272  07A8  1283               	bcf	3,5	;RP0=0, select bank0
  3273  07A9  1303               	bcf	3,6	;RP1=0, select bank0
  3274  07AA  01B2               	clrf	BuildByte@i_342
  3275  07AB  01B3               	clrf	BuildByte@i_342+1
  3276  07AC                     l2830:	
  3277                           
  3278                           ;./CustomLib/Serial.h: 31:     {;./CustomLib/Serial.h: 32:         for (int y = 0; y < 4
      +                          ; y++)
  3279  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  3280  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  3281  07AE  01AE               	clrf	BuildByte@y_343
  3282  07AF  01AF               	clrf	BuildByte@y_343+1
  3283  07B0                     l2836:	
  3284                           
  3285                           ;./CustomLib/Serial.h: 34:         {;./CustomLib/Serial.h: 35:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3286  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  3287  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  3288  07B2  082E               	movf	BuildByte@y_343,w
  3289  07B3  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3290  07B4  0084               	movwf	4
  3291  07B5  1383               	bcf	3,7	;select IRP bank0
  3292  07B6  0800               	movf	0,w
  3293  07B7  00A2               	movwf	??_BuildByte
  3294  07B8  0A32               	incf	BuildByte@i_342,w
  3295  07B9  2FBC               	goto	u2674
  3296  07BA                     u2675:	
  3297  07BA  1003               	clrc
  3298  07BB  0CA2               	rrf	??_BuildByte,f
  3299  07BC                     u2674:	
  3300  07BC  3EFF               	addlw	-1
  3301  07BD  1D03               	skipz
  3302  07BE  2FBA               	goto	u2675
  3303  07BF  0822               	movf	??_BuildByte,w
  3304  07C0  3901               	andlw	1
  3305  07C1  00A3               	movwf	??_BuildByte+1
  3306  07C2  0823               	movf	??_BuildByte+1,w
  3307  07C3  07AB               	addwf	BuildByte@sommaColumn,f
  3308  07C4                     l2838:	
  3309                           
  3310                           ;./CustomLib/Serial.h: 36:         }
  3311  07C4  3001               	movlw	1
  3312  07C5  07AE               	addwf	BuildByte@y_343,f
  3313  07C6  1803               	skipnc
  3314  07C7  0AAF               	incf	BuildByte@y_343+1,f
  3315  07C8  3000               	movlw	0
  3316  07C9  07AF               	addwf	BuildByte@y_343+1,f
  3317  07CA                     l2840:	
  3318  07CA  082F               	movf	BuildByte@y_343+1,w
  3319  07CB  3A80               	xorlw	128
  3320  07CC  00FF               	movwf	btemp+1
  3321  07CD  3080               	movlw	128
  3322  07CE  027F               	subwf	btemp+1,w
  3323  07CF  1D03               	skipz
  3324  07D0  2FD3               	goto	u2685
  3325  07D1  3004               	movlw	4
  3326  07D2  022E               	subwf	BuildByte@y_343,w
  3327  07D3                     u2685:	
  3328  07D3  1C03               	skipc
  3329  07D4  2FD6               	goto	u2681
  3330  07D5  2FD7               	goto	u2680
  3331  07D6                     u2681:	
  3332  07D6  2FB0               	goto	l2836
  3333  07D7                     u2680:	
  3334  07D7                     l125:	
  3335                           
  3336                           ;./CustomLib/Serial.h: 37:         if (sommaColumn % 2 == 1)
  3337  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  3338  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  3339  07D9  1C2B               	btfss	BuildByte@sommaColumn,0
  3340  07DA  2FDC               	goto	u2691
  3341  07DB  2FDD               	goto	u2690
  3342  07DC                     u2691:	
  3343  07DC  2FEA               	goto	l2844
  3344  07DD                     u2690:	
  3345  07DD                     l2842:	
  3346                           
  3347                           ;./CustomLib/Serial.h: 38:         {;./CustomLib/Serial.h: 39:             txByte[4] += 
      +                          0x01 << i;
  3348  07DD  3001               	movlw	1
  3349  07DE  00A2               	movwf	??_BuildByte
  3350  07DF  0A32               	incf	BuildByte@i_342,w
  3351  07E0  2FE3               	goto	u2704
  3352  07E1                     u2705:	
  3353  07E1  1003               	clrc
  3354  07E2  0DA2               	rlf	??_BuildByte,f
  3355  07E3                     u2704:	
  3356  07E3  3EFF               	addlw	-1
  3357  07E4  1D03               	skipz
  3358  07E5  2FE1               	goto	u2705
  3359  07E6  0822               	movf	??_BuildByte,w
  3360  07E7  00A3               	movwf	??_BuildByte+1
  3361  07E8  0823               	movf	??_BuildByte+1,w
  3362  07E9  07A9               	addwf	BuildByte@txByte+4,f
  3363  07EA                     l2844:	
  3364                           
  3365                           ;./CustomLib/Serial.h: 40:             sommaColumn = 0;
  3366  07EA  01AB               	clrf	BuildByte@sommaColumn
  3367  07EB                     l2848:	
  3368                           ;./CustomLib/Serial.h: 41:         }
  3369                           
  3370                           
  3371                           ;./CustomLib/Serial.h: 46:     }
  3372  07EB  3001               	movlw	1
  3373  07EC  07B2               	addwf	BuildByte@i_342,f
  3374  07ED  1803               	skipnc
  3375  07EE  0AB3               	incf	BuildByte@i_342+1,f
  3376  07EF  3000               	movlw	0
  3377  07F0  07B3               	addwf	BuildByte@i_342+1,f
  3378  07F1                     l2850:	
  3379  07F1  0833               	movf	BuildByte@i_342+1,w
  3380  07F2  3A80               	xorlw	128
  3381  07F3  00FF               	movwf	btemp+1
  3382  07F4  3080               	movlw	128
  3383  07F5  027F               	subwf	btemp+1,w
  3384  07F6  1D03               	skipz
  3385  07F7  2FFA               	goto	u2715
  3386  07F8  3008               	movlw	8
  3387  07F9  0232               	subwf	BuildByte@i_342,w
  3388  07FA                     u2715:	
  3389  07FA  1C03               	skipc
  3390  07FB  2FFD               	goto	u2711
  3391  07FC  2FFE               	goto	u2710
  3392  07FD                     u2711:	
  3393  07FD  2FAC               	goto	l2830
  3394  07FE                     u2710:	
  3395  07FE                     l2852:	
  3396                           
  3397                           ;./CustomLib/Serial.h: 48:     return txByte;
  3398  07FE  3025               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3399  07FF                     l128:	
  3400  07FF  0008               	return
  3401  0800                     __end_of_BuildByte:	
  3402                           
  3403                           	psect	text4
  3404  0BD8                     __ptext4:	
  3405 ;; *************** function _map *****************
  3406 ;; Defined at:
  3407 ;;		line 1 in file "./CustomLib/Conversions.h"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  x               2   16[BANK0 ] int 
  3410 ;;  in_min          2   18[BANK0 ] int 
  3411 ;;  in_max          2   20[BANK0 ] int 
  3412 ;;  out_min         2   22[BANK0 ] int 
  3413 ;;  out_max         2   24[BANK0 ] int 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  2   16[BANK0 ] int 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0, pclath, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3425 ;;      Params:         0      10       0       0       0
  3426 ;;      Locals:         0       0       0       0       0
  3427 ;;      Temps:          0       0       0       0       0
  3428 ;;      Totals:         0      10       0       0       0
  3429 ;;Total ram usage:       10 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    3
  3432 ;; This function calls:
  3433 ;;		___awdiv
  3434 ;;		___wmul
  3435 ;; This function is called by:
  3436 ;;		_main
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           
  3441                           ;psect for function _map
  3442  0BD8                     _map:	
  3443  0BD8                     l2996:	
  3444                           ;incstack = 0
  3445                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3446                           
  3447                           
  3448                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3449  0BD8  1283               	bcf	3,5	;RP0=0, select bank0
  3450  0BD9  1303               	bcf	3,6	;RP1=0, select bank0
  3451  0BDA  0832               	movf	map@in_min,w
  3452  0BDB  0234               	subwf	map@in_max,w
  3453  0BDC  00A7               	movwf	___awdiv@divisor
  3454  0BDD  0833               	movf	map@in_min+1,w
  3455  0BDE  1C03               	skipc
  3456  0BDF  0A33               	incf	map@in_min+1,w
  3457  0BE0  0235               	subwf	map@in_max+1,w
  3458  0BE1  00A8               	movwf	___awdiv@divisor+1
  3459  0BE2  0832               	movf	map@in_min,w
  3460  0BE3  0230               	subwf	map@x,w
  3461  0BE4  00A0               	movwf	___wmul@multiplier
  3462  0BE5  0833               	movf	map@in_min+1,w
  3463  0BE6  1C03               	skipc
  3464  0BE7  0A33               	incf	map@in_min+1,w
  3465  0BE8  0231               	subwf	map@x+1,w
  3466  0BE9  00A1               	movwf	___wmul@multiplier+1
  3467  0BEA  0836               	movf	map@out_min,w
  3468  0BEB  0238               	subwf	map@out_max,w
  3469  0BEC  00A2               	movwf	___wmul@multiplicand
  3470  0BED  0837               	movf	map@out_min+1,w
  3471  0BEE  1C03               	skipc
  3472  0BEF  0A37               	incf	map@out_min+1,w
  3473  0BF0  0239               	subwf	map@out_max+1,w
  3474  0BF1  00A3               	movwf	___wmul@multiplicand+1
  3475  0BF2  120A  158A  2352  120A  158A  	fcall	___wmul
  3476  0BF7  1283               	bcf	3,5	;RP0=0, select bank0
  3477  0BF8  1303               	bcf	3,6	;RP1=0, select bank0
  3478  0BF9  0821               	movf	?___wmul+1,w
  3479  0BFA  00AA               	movwf	___awdiv@dividend+1
  3480  0BFB  0820               	movf	?___wmul,w
  3481  0BFC  00A9               	movwf	___awdiv@dividend
  3482  0BFD  120A  158A  253C  120A  158A  	fcall	___awdiv
  3483  0C02  1283               	bcf	3,5	;RP0=0, select bank0
  3484  0C03  1303               	bcf	3,6	;RP1=0, select bank0
  3485  0C04  0836               	movf	map@out_min,w
  3486  0C05  0727               	addwf	?___awdiv,w
  3487  0C06  00B0               	movwf	?_map
  3488  0C07  0837               	movf	map@out_min+1,w
  3489  0C08  1803               	skipnc
  3490  0C09  0A37               	incf	map@out_min+1,w
  3491  0C0A  0728               	addwf	?___awdiv+1,w
  3492  0C0B  00B1               	movwf	?_map+1
  3493  0C0C                     l83:	
  3494  0C0C  0008               	return
  3495  0C0D                     __end_of_map:	
  3496                           
  3497                           	psect	text5
  3498  0B52                     __ptext5:	
  3499 ;; *************** function ___wmul *****************
  3500 ;; Defined at:
  3501 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3504 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  product         2    4[BANK0 ] unsigned int 
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  2    0[BANK0 ] unsigned int 
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3516 ;;      Params:         0       4       0       0       0
  3517 ;;      Locals:         0       2       0       0       0
  3518 ;;      Temps:          0       0       0       0       0
  3519 ;;      Totals:         0       6       0       0       0
  3520 ;;Total ram usage:        6 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    2
  3523 ;; This function calls:
  3524 ;;		Nothing
  3525 ;; This function is called by:
  3526 ;;		_map
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           
  3531                           ;psect for function ___wmul
  3532  0B52                     ___wmul:	
  3533  0B52                     l2860:	
  3534                           ;incstack = 0
  3535                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3536                           
  3537  0B52  1283               	bcf	3,5	;RP0=0, select bank0
  3538  0B53  1303               	bcf	3,6	;RP1=0, select bank0
  3539  0B54  01A4               	clrf	___wmul@product
  3540  0B55  01A5               	clrf	___wmul@product+1
  3541  0B56                     l2862:	
  3542  0B56  1C20               	btfss	___wmul@multiplier,0
  3543  0B57  2B59               	goto	u2731
  3544  0B58  2B5A               	goto	u2730
  3545  0B59                     u2731:	
  3546  0B59  2B60               	goto	l448
  3547  0B5A                     u2730:	
  3548  0B5A                     l2864:	
  3549  0B5A  0822               	movf	___wmul@multiplicand,w
  3550  0B5B  07A4               	addwf	___wmul@product,f
  3551  0B5C  1803               	skipnc
  3552  0B5D  0AA5               	incf	___wmul@product+1,f
  3553  0B5E  0823               	movf	___wmul@multiplicand+1,w
  3554  0B5F  07A5               	addwf	___wmul@product+1,f
  3555  0B60                     l448:	
  3556  0B60  3001               	movlw	1
  3557  0B61                     u2745:	
  3558  0B61  1003               	clrc
  3559  0B62  0DA2               	rlf	___wmul@multiplicand,f
  3560  0B63  0DA3               	rlf	___wmul@multiplicand+1,f
  3561  0B64  3EFF               	addlw	-1
  3562  0B65  1D03               	skipz
  3563  0B66  2B61               	goto	u2745
  3564  0B67                     l2866:	
  3565  0B67  3001               	movlw	1
  3566  0B68                     u2755:	
  3567  0B68  1003               	clrc
  3568  0B69  0CA1               	rrf	___wmul@multiplier+1,f
  3569  0B6A  0CA0               	rrf	___wmul@multiplier,f
  3570  0B6B  3EFF               	addlw	-1
  3571  0B6C  1D03               	skipz
  3572  0B6D  2B68               	goto	u2755
  3573  0B6E                     l2868:	
  3574  0B6E  0820               	movf	___wmul@multiplier,w
  3575  0B6F  0421               	iorwf	___wmul@multiplier+1,w
  3576  0B70  1D03               	btfss	3,2
  3577  0B71  2B73               	goto	u2761
  3578  0B72  2B74               	goto	u2760
  3579  0B73                     u2761:	
  3580  0B73  2B56               	goto	l2862
  3581  0B74                     u2760:	
  3582  0B74                     l2870:	
  3583  0B74  0825               	movf	___wmul@product+1,w
  3584  0B75  00A1               	movwf	?___wmul+1
  3585  0B76  0824               	movf	___wmul@product,w
  3586  0B77  00A0               	movwf	?___wmul
  3587  0B78                     l450:	
  3588  0B78  0008               	return
  3589  0B79                     __end_of___wmul:	
  3590                           
  3591                           	psect	text6
  3592  0ABA                     __ptext6:	
  3593 ;; *************** function _init_ADC *****************
  3594 ;; Defined at:
  3595 ;;		line 375 in file "main.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;		None
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;		None
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  1    wreg      void 
  3602 ;; Registers used:
  3603 ;;		wreg, status,2
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3609 ;;      Params:         0       0       0       0       0
  3610 ;;      Locals:         0       0       0       0       0
  3611 ;;      Temps:          0       1       0       0       0
  3612 ;;      Totals:         0       1       0       0       0
  3613 ;;Total ram usage:        1 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    2
  3616 ;; This function calls:
  3617 ;;		Nothing
  3618 ;; This function is called by:
  3619 ;;		_main
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           
  3624                           ;psect for function _init_ADC
  3625  0ABA                     _init_ADC:	
  3626  0ABA                     l3052:	
  3627                           ;incstack = 0
  3628                           ; Regs used in _init_ADC: [wreg+status,2]
  3629                           
  3630                           
  3631                           ;main.c: 377:     TRISA = 0xE3;
  3632  0ABA  30E3               	movlw	227
  3633  0ABB  1683               	bsf	3,5	;RP0=1, select bank1
  3634  0ABC  1303               	bcf	3,6	;RP1=0, select bank1
  3635  0ABD  0085               	movwf	5	;volatile
  3636  0ABE                     l3054:	
  3637                           
  3638                           ;main.c: 378:     ADCON0 = 0x00;
  3639  0ABE  1283               	bcf	3,5	;RP0=0, select bank0
  3640  0ABF  1303               	bcf	3,6	;RP1=0, select bank0
  3641  0AC0  019F               	clrf	31	;volatile
  3642  0AC1                     l3056:	
  3643                           
  3644                           ;main.c: 379:     ADCON1 = 0x80;
  3645  0AC1  3080               	movlw	128
  3646  0AC2  1683               	bsf	3,5	;RP0=1, select bank1
  3647  0AC3  1303               	bcf	3,6	;RP1=0, select bank1
  3648  0AC4  009F               	movwf	31	;volatile
  3649  0AC5                     l3058:	
  3650                           
  3651                           ;main.c: 380:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3652  0AC5  3019               	movlw	25
  3653  0AC6  1283               	bcf	3,5	;RP0=0, select bank0
  3654  0AC7  1303               	bcf	3,6	;RP1=0, select bank0
  3655  0AC8  00A0               	movwf	??_init_ADC
  3656  0AC9                     u3587:	
  3657  0AC9  0BA0               	decfsz	??_init_ADC,f
  3658  0ACA  2AC9               	goto	u3587
  3659  0ACB  2ACC               	nop2
  3660  0ACC                     l272:	
  3661  0ACC  0008               	return
  3662  0ACD                     __end_of_init_ADC:	
  3663                           
  3664                           	psect	text7
  3665  0F37                     __ptext7:	
  3666 ;; *************** function _bitParita *****************
  3667 ;; Defined at:
  3668 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;  rx              1    wreg     PTR unsigned char 
  3671 ;;		 -> dataFromGateway(15), 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;  rx              1   17[BANK0 ] PTR unsigned char 
  3674 ;;		 -> dataFromGateway(15), 
  3675 ;;  y               2   15[BANK0 ] int 
  3676 ;;  y               2   13[BANK0 ] int 
  3677 ;;  i               2   20[BANK0 ] int 
  3678 ;;  i               2   18[BANK0 ] int 
  3679 ;;  errorRow        1   12[BANK0 ] unsigned char 
  3680 ;;  error           1   11[BANK0 ] unsigned char 
  3681 ;;  errorColumn     1   10[BANK0 ] unsigned char 
  3682 ;;  sommaColumn     1    9[BANK0 ] unsigned char 
  3683 ;;  sommaRow        1    8[BANK0 ] unsigned char 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3693 ;;      Params:         0       0       0       0       0
  3694 ;;      Locals:         0      14       0       0       0
  3695 ;;      Temps:          0       4       0       0       0
  3696 ;;      Totals:         0      18       0       0       0
  3697 ;;Total ram usage:       18 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    3
  3700 ;; This function calls:
  3701 ;;		_bitChange
  3702 ;; This function is called by:
  3703 ;;		_main
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           
  3708                           ;psect for function _bitParita
  3709  0F37                     _bitParita:	
  3710                           
  3711                           ;incstack = 0
  3712                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3713                           ;bitParita@rx stored from wreg
  3714  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  3715  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  3716  0F39  00B1               	movwf	bitParita@rx
  3717  0F3A                     l3000:	
  3718                           
  3719                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3720  0F3A  01AB               	clrf	bitParita@error
  3721                           
  3722                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3723  0F3B  01A8               	clrf	bitParita@sommaRow
  3724                           
  3725                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3726  0F3C  01AC               	clrf	bitParita@errorRow
  3727                           
  3728                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  3729  0F3D  01A9               	clrf	bitParita@sommaColumn
  3730                           
  3731                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  3732  0F3E  01AA               	clrf	bitParita@errorColumn
  3733                           
  3734                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  3735  0F3F  01B2               	clrf	bitParita@i
  3736  0F40  01B3               	clrf	bitParita@i+1
  3737  0F41                     l3006:	
  3738                           
  3739                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  3740  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  3741  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  3742  0F43  01AD               	clrf	bitParita@y
  3743  0F44  01AE               	clrf	bitParita@y+1
  3744  0F45                     l3012:	
  3745                           
  3746                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  3747  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  3748  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  3749  0F47  0832               	movf	bitParita@i,w
  3750  0F48  0731               	addwf	bitParita@rx,w
  3751  0F49  00A4               	movwf	??_bitParita
  3752  0F4A  0824               	movf	??_bitParita,w
  3753  0F4B  0084               	movwf	4
  3754  0F4C  1383               	bcf	3,7	;select IRP bank0
  3755  0F4D  0800               	movf	0,w
  3756  0F4E  00A5               	movwf	??_bitParita+1
  3757  0F4F  0A2D               	incf	bitParita@y,w
  3758  0F50  2F53               	goto	u3064
  3759  0F51                     u3065:	
  3760  0F51  1003               	clrc
  3761  0F52  0CA5               	rrf	??_bitParita+1,f
  3762  0F53                     u3064:	
  3763  0F53  3EFF               	addlw	-1
  3764  0F54  1D03               	skipz
  3765  0F55  2F51               	goto	u3065
  3766  0F56  0825               	movf	??_bitParita+1,w
  3767  0F57  3901               	andlw	1
  3768  0F58  00A6               	movwf	??_bitParita+2
  3769  0F59  0826               	movf	??_bitParita+2,w
  3770  0F5A  07A8               	addwf	bitParita@sommaRow,f
  3771  0F5B                     l3014:	
  3772                           
  3773                           ;./CustomLib/BitsFlow.h: 26:         }
  3774  0F5B  3001               	movlw	1
  3775  0F5C  07AD               	addwf	bitParita@y,f
  3776  0F5D  1803               	skipnc
  3777  0F5E  0AAE               	incf	bitParita@y+1,f
  3778  0F5F  3000               	movlw	0
  3779  0F60  07AE               	addwf	bitParita@y+1,f
  3780  0F61                     l3016:	
  3781  0F61  082E               	movf	bitParita@y+1,w
  3782  0F62  3A80               	xorlw	128
  3783  0F63  00FF               	movwf	btemp+1
  3784  0F64  3080               	movlw	128
  3785  0F65  027F               	subwf	btemp+1,w
  3786  0F66  1D03               	skipz
  3787  0F67  2F6A               	goto	u3075
  3788  0F68  3008               	movlw	8
  3789  0F69  022D               	subwf	bitParita@y,w
  3790  0F6A                     u3075:	
  3791  0F6A  1C03               	skipc
  3792  0F6B  2F6D               	goto	u3071
  3793  0F6C  2F6E               	goto	u3070
  3794  0F6D                     u3071:	
  3795  0F6D  2F45               	goto	l3012
  3796  0F6E                     u3070:	
  3797  0F6E                     l105:	
  3798                           
  3799                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  3800  0F6E  1283               	bcf	3,5	;RP0=0, select bank0
  3801  0F6F  1303               	bcf	3,6	;RP1=0, select bank0
  3802  0F70  1C28               	btfss	bitParita@sommaRow,0
  3803  0F71  2F73               	goto	u3081
  3804  0F72  2F74               	goto	u3080
  3805  0F73                     u3081:	
  3806  0F73  2F7A               	goto	l106
  3807  0F74                     u3080:	
  3808  0F74                     l3018:	
  3809                           
  3810                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  3811  0F74  01AB               	clrf	bitParita@error
  3812  0F75  0AAB               	incf	bitParita@error,f
  3813  0F76                     l3020:	
  3814                           
  3815                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  3816  0F76  0832               	movf	bitParita@i,w
  3817  0F77  00A4               	movwf	??_bitParita
  3818  0F78  0824               	movf	??_bitParita,w
  3819  0F79  00AC               	movwf	bitParita@errorRow
  3820  0F7A                     l106:	
  3821                           ;./CustomLib/BitsFlow.h: 31:         }
  3822                           
  3823                           
  3824                           ;./CustomLib/BitsFlow.h: 32:     }
  3825  0F7A  3001               	movlw	1
  3826  0F7B  07B2               	addwf	bitParita@i,f
  3827  0F7C  1803               	skipnc
  3828  0F7D  0AB3               	incf	bitParita@i+1,f
  3829  0F7E  3000               	movlw	0
  3830  0F7F  07B3               	addwf	bitParita@i+1,f
  3831  0F80                     l3022:	
  3832  0F80  0833               	movf	bitParita@i+1,w
  3833  0F81  3A80               	xorlw	128
  3834  0F82  00FF               	movwf	btemp+1
  3835  0F83  3080               	movlw	128
  3836  0F84  027F               	subwf	btemp+1,w
  3837  0F85  1D03               	skipz
  3838  0F86  2F89               	goto	u3095
  3839  0F87  3005               	movlw	5
  3840  0F88  0232               	subwf	bitParita@i,w
  3841  0F89                     u3095:	
  3842  0F89  1C03               	skipc
  3843  0F8A  2F8C               	goto	u3091
  3844  0F8B  2F8D               	goto	u3090
  3845  0F8C                     u3091:	
  3846  0F8C  2F41               	goto	l3006
  3847  0F8D                     u3090:	
  3848  0F8D                     l3024:	
  3849                           
  3850                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  3851  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  3852  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  3853  0F8F  01B4               	clrf	bitParita@i_330
  3854  0F90  01B5               	clrf	bitParita@i_330+1
  3855  0F91                     l3030:	
  3856                           
  3857                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  3858  0F91  1283               	bcf	3,5	;RP0=0, select bank0
  3859  0F92  1303               	bcf	3,6	;RP1=0, select bank0
  3860  0F93  01AF               	clrf	bitParita@y_331
  3861  0F94  01B0               	clrf	bitParita@y_331+1
  3862  0F95                     l3036:	
  3863                           
  3864                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  3865  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0F97  082F               	movf	bitParita@y_331,w
  3868  0F98  0731               	addwf	bitParita@rx,w
  3869  0F99  00A4               	movwf	??_bitParita
  3870  0F9A  0824               	movf	??_bitParita,w
  3871  0F9B  0084               	movwf	4
  3872  0F9C  1383               	bcf	3,7	;select IRP bank0
  3873  0F9D  0800               	movf	0,w
  3874  0F9E  00A5               	movwf	??_bitParita+1
  3875  0F9F  0A34               	incf	bitParita@i_330,w
  3876  0FA0  2FA3               	goto	u3104
  3877  0FA1                     u3105:	
  3878  0FA1  1003               	clrc
  3879  0FA2  0CA5               	rrf	??_bitParita+1,f
  3880  0FA3                     u3104:	
  3881  0FA3  3EFF               	addlw	-1
  3882  0FA4  1D03               	skipz
  3883  0FA5  2FA1               	goto	u3105
  3884  0FA6  0825               	movf	??_bitParita+1,w
  3885  0FA7  3901               	andlw	1
  3886  0FA8  00A6               	movwf	??_bitParita+2
  3887  0FA9  0826               	movf	??_bitParita+2,w
  3888  0FAA  07A9               	addwf	bitParita@sommaColumn,f
  3889  0FAB                     l3038:	
  3890                           
  3891                           ;./CustomLib/BitsFlow.h: 39:         }
  3892  0FAB  3001               	movlw	1
  3893  0FAC  07AF               	addwf	bitParita@y_331,f
  3894  0FAD  1803               	skipnc
  3895  0FAE  0AB0               	incf	bitParita@y_331+1,f
  3896  0FAF  3000               	movlw	0
  3897  0FB0  07B0               	addwf	bitParita@y_331+1,f
  3898  0FB1                     l3040:	
  3899  0FB1  0830               	movf	bitParita@y_331+1,w
  3900  0FB2  3A80               	xorlw	128
  3901  0FB3  00FF               	movwf	btemp+1
  3902  0FB4  3080               	movlw	128
  3903  0FB5  027F               	subwf	btemp+1,w
  3904  0FB6  1D03               	skipz
  3905  0FB7  2FBA               	goto	u3115
  3906  0FB8  3004               	movlw	4
  3907  0FB9  022F               	subwf	bitParita@y_331,w
  3908  0FBA                     u3115:	
  3909  0FBA  1C03               	skipc
  3910  0FBB  2FBD               	goto	u3111
  3911  0FBC  2FBE               	goto	u3110
  3912  0FBD                     u3111:	
  3913  0FBD  2F95               	goto	l3036
  3914  0FBE                     u3110:	
  3915  0FBE                     l110:	
  3916                           
  3917                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  3918  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  3919  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  3920  0FC0  1C29               	btfss	bitParita@sommaColumn,0
  3921  0FC1  2FC3               	goto	u3121
  3922  0FC2  2FC4               	goto	u3120
  3923  0FC3                     u3121:	
  3924  0FC3  2FCA               	goto	l111
  3925  0FC4                     u3120:	
  3926  0FC4                     l3042:	
  3927                           
  3928                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  3929  0FC4  01AB               	clrf	bitParita@error
  3930  0FC5  0AAB               	incf	bitParita@error,f
  3931  0FC6                     l3044:	
  3932                           
  3933                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  3934  0FC6  0834               	movf	bitParita@i_330,w
  3935  0FC7  00A4               	movwf	??_bitParita
  3936  0FC8  0824               	movf	??_bitParita,w
  3937  0FC9  00AA               	movwf	bitParita@errorColumn
  3938  0FCA                     l111:	
  3939                           ;./CustomLib/BitsFlow.h: 44:         }
  3940                           
  3941                           
  3942                           ;./CustomLib/BitsFlow.h: 45:     }
  3943  0FCA  3001               	movlw	1
  3944  0FCB  07B4               	addwf	bitParita@i_330,f
  3945  0FCC  1803               	skipnc
  3946  0FCD  0AB5               	incf	bitParita@i_330+1,f
  3947  0FCE  3000               	movlw	0
  3948  0FCF  07B5               	addwf	bitParita@i_330+1,f
  3949  0FD0                     l3046:	
  3950  0FD0  0835               	movf	bitParita@i_330+1,w
  3951  0FD1  3A80               	xorlw	128
  3952  0FD2  00FF               	movwf	btemp+1
  3953  0FD3  3080               	movlw	128
  3954  0FD4  027F               	subwf	btemp+1,w
  3955  0FD5  1D03               	skipz
  3956  0FD6  2FD9               	goto	u3135
  3957  0FD7  3008               	movlw	8
  3958  0FD8  0234               	subwf	bitParita@i_330,w
  3959  0FD9                     u3135:	
  3960  0FD9  1C03               	skipc
  3961  0FDA  2FDC               	goto	u3131
  3962  0FDB  2FDD               	goto	u3130
  3963  0FDC                     u3131:	
  3964  0FDC  2F91               	goto	l3030
  3965  0FDD                     u3130:	
  3966  0FDD                     l3048:	
  3967                           
  3968                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  3969  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  3970  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  3971  0FDF  082B               	movf	bitParita@error,w
  3972  0FE0  1903               	btfsc	3,2
  3973  0FE1  2FE3               	goto	u3141
  3974  0FE2  2FE4               	goto	u3140
  3975  0FE3                     u3141:	
  3976  0FE3  2FFF               	goto	l113
  3977  0FE4                     u3140:	
  3978  0FE4                     l3050:	
  3979                           
  3980                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  3981  0FE4  082A               	movf	bitParita@errorColumn,w
  3982  0FE5  00A4               	movwf	??_bitParita
  3983  0FE6  0824               	movf	??_bitParita,w
  3984  0FE7  00A0               	movwf	bitChange@n
  3985  0FE8  082C               	movf	bitParita@errorRow,w
  3986  0FE9  0731               	addwf	bitParita@rx,w
  3987  0FEA  00A5               	movwf	??_bitParita+1
  3988  0FEB  0825               	movf	??_bitParita+1,w
  3989  0FEC  0084               	movwf	4
  3990  0FED  1383               	bcf	3,7	;select IRP bank0
  3991  0FEE  0800               	movf	0,w
  3992  0FEF  120A  158A  23A7  120A  158A  	fcall	_bitChange
  3993  0FF4  1283               	bcf	3,5	;RP0=0, select bank0
  3994  0FF5  1303               	bcf	3,6	;RP1=0, select bank0
  3995  0FF6  00A6               	movwf	??_bitParita+2
  3996  0FF7  082C               	movf	bitParita@errorRow,w
  3997  0FF8  0731               	addwf	bitParita@rx,w
  3998  0FF9  00A7               	movwf	??_bitParita+3
  3999  0FFA  0827               	movf	??_bitParita+3,w
  4000  0FFB  0084               	movwf	4
  4001  0FFC  0826               	movf	??_bitParita+2,w
  4002  0FFD  1383               	bcf	3,7	;select IRP bank0
  4003  0FFE  0080               	movwf	0
  4004  0FFF                     l113:	
  4005  0FFF  0008               	return
  4006  1000                     __end_of_bitParita:	
  4007                           
  4008                           	psect	text8
  4009  0BA7                     __ptext8:	
  4010 ;; *************** function _bitChange *****************
  4011 ;; Defined at:
  4012 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  dato            1    wreg     unsigned char 
  4015 ;;  n               1    0[BANK0 ] unsigned char 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  dato            1    3[BANK0 ] unsigned char 
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      unsigned char 
  4020 ;; Registers used:
  4021 ;;		wreg, status,2, status,0
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4027 ;;      Params:         0       1       0       0       0
  4028 ;;      Locals:         0       1       0       0       0
  4029 ;;      Temps:          0       2       0       0       0
  4030 ;;      Totals:         0       4       0       0       0
  4031 ;;Total ram usage:        4 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; Hardware stack levels required when called:    2
  4034 ;; This function calls:
  4035 ;;		Nothing
  4036 ;; This function is called by:
  4037 ;;		_bitParita
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           
  4042                           ;psect for function _bitChange
  4043  0BA7                     _bitChange:	
  4044                           
  4045                           ;incstack = 0
  4046                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  4047                           ;bitChange@dato stored from wreg
  4048  0BA7  1283               	bcf	3,5	;RP0=0, select bank0
  4049  0BA8  1303               	bcf	3,6	;RP1=0, select bank0
  4050  0BA9  00A3               	movwf	bitChange@dato
  4051  0BAA                     l2776:	
  4052                           
  4053                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  4054  0BAA  3001               	movlw	1
  4055  0BAB  00A1               	movwf	??_bitChange
  4056  0BAC  0A20               	incf	bitChange@n,w
  4057  0BAD  2BB0               	goto	u2584
  4058  0BAE                     u2585:	
  4059  0BAE  1003               	clrc
  4060  0BAF  0DA1               	rlf	??_bitChange,f
  4061  0BB0                     u2584:	
  4062  0BB0  3EFF               	addlw	-1
  4063  0BB1  1D03               	skipz
  4064  0BB2  2BAE               	goto	u2585
  4065  0BB3  0821               	movf	??_bitChange,w
  4066  0BB4  0523               	andwf	bitChange@dato,w
  4067  0BB5  1903               	btfsc	3,2
  4068  0BB6  2BB8               	goto	u2591
  4069  0BB7  2BB9               	goto	u2590
  4070  0BB8                     u2591:	
  4071  0BB8  2BC8               	goto	l2784
  4072  0BB9                     u2590:	
  4073  0BB9                     l2778:	
  4074                           
  4075                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  4076  0BB9  3001               	movlw	1
  4077  0BBA  00A1               	movwf	??_bitChange
  4078  0BBB  0A20               	incf	bitChange@n,w
  4079  0BBC  2BBF               	goto	u2604
  4080  0BBD                     u2605:	
  4081  0BBD  1003               	clrc
  4082  0BBE  0DA1               	rlf	??_bitChange,f
  4083  0BBF                     u2604:	
  4084  0BBF  3EFF               	addlw	-1
  4085  0BC0  1D03               	skipz
  4086  0BC1  2BBD               	goto	u2605
  4087  0BC2  0821               	movf	??_bitChange,w
  4088  0BC3  00A2               	movwf	??_bitChange+1
  4089  0BC4  0822               	movf	??_bitChange+1,w
  4090  0BC5  04A3               	iorwf	bitChange@dato,f
  4091  0BC6  0823               	movf	bitChange@dato,w
  4092  0BC7  2BD7               	goto	l98
  4093  0BC8                     l2784:	
  4094                           
  4095                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  4096  0BC8  3001               	movlw	1
  4097  0BC9  00A1               	movwf	??_bitChange
  4098  0BCA  0A20               	incf	bitChange@n,w
  4099  0BCB  2BCE               	goto	u2614
  4100  0BCC                     u2615:	
  4101  0BCC  1003               	clrc
  4102  0BCD  0DA1               	rlf	??_bitChange,f
  4103  0BCE                     u2614:	
  4104  0BCE  3EFF               	addlw	-1
  4105  0BCF  1D03               	skipz
  4106  0BD0  2BCC               	goto	u2615
  4107  0BD1  0821               	movf	??_bitChange,w
  4108  0BD2  3AFF               	xorlw	255
  4109  0BD3  00A2               	movwf	??_bitChange+1
  4110  0BD4  0822               	movf	??_bitChange+1,w
  4111  0BD5  05A3               	andwf	bitChange@dato,f
  4112  0BD6  0823               	movf	bitChange@dato,w
  4113  0BD7                     l98:	
  4114  0BD7  0008               	return
  4115  0BD8                     __end_of_bitChange:	
  4116                           
  4117                           	psect	text9
  4118  0AF5                     __ptext9:	
  4119 ;; *************** function ___bmul *****************
  4120 ;; Defined at:
  4121 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  multiplier      1    wreg     unsigned char 
  4124 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4127 ;;  product         1    2[BANK0 ] unsigned char 
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  1    wreg      unsigned char 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4137 ;;      Params:         0       1       0       0       0
  4138 ;;      Locals:         0       2       0       0       0
  4139 ;;      Temps:          0       1       0       0       0
  4140 ;;      Totals:         0       4       0       0       0
  4141 ;;Total ram usage:        4 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; Hardware stack levels required when called:    2
  4144 ;; This function calls:
  4145 ;;		Nothing
  4146 ;; This function is called by:
  4147 ;;		_main
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           
  4152                           ;psect for function ___bmul
  4153  0AF5                     ___bmul:	
  4154                           
  4155                           ;incstack = 0
  4156                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4157                           ;___bmul@multiplier stored from wreg
  4158  0AF5  1283               	bcf	3,5	;RP0=0, select bank0
  4159  0AF6  1303               	bcf	3,6	;RP1=0, select bank0
  4160  0AF7  00A3               	movwf	___bmul@multiplier
  4161  0AF8                     l3158:	
  4162  0AF8  01A2               	clrf	___bmul@product
  4163  0AF9                     l3160:	
  4164  0AF9  1C23               	btfss	___bmul@multiplier,0
  4165  0AFA  2AFC               	goto	u3221
  4166  0AFB  2AFD               	goto	u3220
  4167  0AFC                     u3221:	
  4168  0AFC  2B01               	goto	l3164
  4169  0AFD                     u3220:	
  4170  0AFD                     l3162:	
  4171  0AFD  0820               	movf	___bmul@multiplicand,w
  4172  0AFE  00A1               	movwf	??___bmul
  4173  0AFF  0821               	movf	??___bmul,w
  4174  0B00  07A2               	addwf	___bmul@product,f
  4175  0B01                     l3164:	
  4176  0B01  1003               	clrc
  4177  0B02  0DA0               	rlf	___bmul@multiplicand,f
  4178  0B03                     l3166:	
  4179  0B03  1003               	clrc
  4180  0B04  0CA3               	rrf	___bmul@multiplier,f
  4181  0B05  0823               	movf	___bmul@multiplier,w
  4182  0B06  1D03               	btfss	3,2
  4183  0B07  2B09               	goto	u3231
  4184  0B08  2B0A               	goto	u3230
  4185  0B09                     u3231:	
  4186  0B09  2AF9               	goto	l3160
  4187  0B0A                     u3230:	
  4188  0B0A                     l3168:	
  4189  0B0A  0822               	movf	___bmul@product,w
  4190  0B0B                     l474:	
  4191  0B0B  0008               	return
  4192  0B0C                     __end_of___bmul:	
  4193                           
  4194                           	psect	text10
  4195  0C0D                     __ptext10:	
  4196 ;; *************** function _UART_Init *****************
  4197 ;; Defined at:
  4198 ;;		line 394 in file "main.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;  baudrate        2   15[BANK0 ] int 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      void 
  4205 ;; Registers used:
  4206 ;;		wreg, status,2, status,0, pclath, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4212 ;;      Params:         0       2       0       0       0
  4213 ;;      Locals:         0       0       0       0       0
  4214 ;;      Temps:          0       4       0       0       0
  4215 ;;      Totals:         0       6       0       0       0
  4216 ;;Total ram usage:        6 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    3
  4219 ;; This function calls:
  4220 ;;		___aldiv
  4221 ;; This function is called by:
  4222 ;;		_main
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           
  4227                           ;psect for function _UART_Init
  4228  0C0D                     _UART_Init:	
  4229  0C0D                     l3060:	
  4230                           ;incstack = 0
  4231                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4232                           
  4233                           
  4234                           ;main.c: 394: void UART_Init(int baudrate);main.c: 395: {;main.c: 396:     TRISCbits.TRI
      +                          SC6 = 0;
  4235  0C0D  1683               	bsf	3,5	;RP0=1, select bank1
  4236  0C0E  1303               	bcf	3,6	;RP1=0, select bank1
  4237  0C0F  1307               	bcf	7,6	;volatile
  4238                           
  4239                           ;main.c: 397:     TXSTAbits.TXEN = 1;
  4240  0C10  1698               	bsf	24,5	;volatile
  4241                           
  4242                           ;main.c: 398:     RCSTAbits.SPEN = 1;
  4243  0C11  1283               	bcf	3,5	;RP0=0, select bank0
  4244  0C12  1303               	bcf	3,6	;RP1=0, select bank0
  4245  0C13  1798               	bsf	24,7	;volatile
  4246                           
  4247                           ;main.c: 399:     RCSTAbits.CREN = 1;
  4248  0C14  1618               	bsf	24,4	;volatile
  4249  0C15                     l3062:	
  4250                           
  4251                           ;main.c: 400:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4252  0C15  082F               	movf	UART_Init@baudrate,w
  4253  0C16  00B1               	movwf	??_UART_Init
  4254  0C17  0830               	movf	UART_Init@baudrate+1,w
  4255  0C18  00B2               	movwf	??_UART_Init+1
  4256  0C19  3000               	movlw	0
  4257  0C1A  1BB2               	btfsc	??_UART_Init+1,7
  4258  0C1B  30FF               	movlw	255
  4259  0C1C  00B3               	movwf	??_UART_Init+2
  4260  0C1D  00B4               	movwf	??_UART_Init+3
  4261  0C1E  3006               	movlw	6
  4262  0C1F                     u3155:	
  4263  0C1F  1003               	clrc
  4264  0C20  0DB1               	rlf	??_UART_Init,f
  4265  0C21  0DB2               	rlf	??_UART_Init+1,f
  4266  0C22  0DB3               	rlf	??_UART_Init+2,f
  4267  0C23  0DB4               	rlf	??_UART_Init+3,f
  4268  0C24                     u3150:	
  4269  0C24  3EFF               	addlw	-1
  4270  0C25  1D03               	skipz
  4271  0C26  2C1F               	goto	u3155
  4272  0C27  0834               	movf	??_UART_Init+3,w
  4273  0C28  00A3               	movwf	___aldiv@divisor+3
  4274  0C29  0833               	movf	??_UART_Init+2,w
  4275  0C2A  00A2               	movwf	___aldiv@divisor+2
  4276  0C2B  0832               	movf	??_UART_Init+1,w
  4277  0C2C  00A1               	movwf	___aldiv@divisor+1
  4278  0C2D  0831               	movf	??_UART_Init,w
  4279  0C2E  00A0               	movwf	___aldiv@divisor
  4280  0C2F  3001               	movlw	1
  4281  0C30  00A7               	movwf	___aldiv@dividend+3
  4282  0C31  30E8               	movlw	232
  4283  0C32  00A6               	movwf	___aldiv@dividend+2
  4284  0C33  3048               	movlw	72
  4285  0C34  00A5               	movwf	___aldiv@dividend+1
  4286  0C35  3000               	movlw	0
  4287  0C36  00A4               	movwf	___aldiv@dividend
  4288  0C37  120A  158A  269A  120A  158A  	fcall	___aldiv
  4289  0C3C  1283               	bcf	3,5	;RP0=0, select bank0
  4290  0C3D  1303               	bcf	3,6	;RP1=0, select bank0
  4291  0C3E  0820               	movf	?___aldiv,w
  4292  0C3F  3EFF               	addlw	255
  4293  0C40  1683               	bsf	3,5	;RP0=1, select bank1
  4294  0C41  1303               	bcf	3,6	;RP1=0, select bank1
  4295  0C42  0099               	movwf	25	;volatile
  4296  0C43                     l3064:	
  4297                           
  4298                           ;main.c: 401:     INTCONbits.GIE = 1;
  4299  0C43  178B               	bsf	11,7	;volatile
  4300  0C44                     l3066:	
  4301                           
  4302                           ;main.c: 402:     INTCONbits.PEIE = 1;
  4303  0C44  170B               	bsf	11,6	;volatile
  4304  0C45                     l3068:	
  4305                           
  4306                           ;main.c: 403:     PIE1bits.RCIE = 1;
  4307  0C45  168C               	bsf	12,5	;volatile
  4308  0C46                     l281:	
  4309  0C46  0008               	return
  4310  0C47                     __end_of_UART_Init:	
  4311                           
  4312                           	psect	text11
  4313  0E9A                     __ptext11:	
  4314 ;; *************** function ___aldiv *****************
  4315 ;; Defined at:
  4316 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  divisor         4    0[BANK0 ] long 
  4319 ;;  dividend        4    4[BANK0 ] long 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  quotient        4   11[BANK0 ] long 
  4322 ;;  sign            1   10[BANK0 ] unsigned char 
  4323 ;;  counter         1    9[BANK0 ] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  4    0[BANK0 ] long 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4333 ;;      Params:         0       8       0       0       0
  4334 ;;      Locals:         0       6       0       0       0
  4335 ;;      Temps:          0       1       0       0       0
  4336 ;;      Totals:         0      15       0       0       0
  4337 ;;Total ram usage:       15 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    2
  4340 ;; This function calls:
  4341 ;;		Nothing
  4342 ;; This function is called by:
  4343 ;;		_UART_Init
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           
  4348                           ;psect for function ___aldiv
  4349  0E9A                     ___aldiv:	
  4350  0E9A                     l2874:	
  4351                           ;incstack = 0
  4352                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4353                           
  4354  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  4355  0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  4356  0E9C  01AA               	clrf	___aldiv@sign
  4357  0E9D                     l2876:	
  4358  0E9D  1FA3               	btfss	___aldiv@divisor+3,7
  4359  0E9E  2EA0               	goto	u2771
  4360  0E9F  2EA1               	goto	u2770
  4361  0EA0                     u2771:	
  4362  0EA0  2EAE               	goto	l513
  4363  0EA1                     u2770:	
  4364  0EA1                     l2878:	
  4365  0EA1  09A0               	comf	___aldiv@divisor,f
  4366  0EA2  09A1               	comf	___aldiv@divisor+1,f
  4367  0EA3  09A2               	comf	___aldiv@divisor+2,f
  4368  0EA4  09A3               	comf	___aldiv@divisor+3,f
  4369  0EA5  0AA0               	incf	___aldiv@divisor,f
  4370  0EA6  1903               	skipnz
  4371  0EA7  0AA1               	incf	___aldiv@divisor+1,f
  4372  0EA8  1903               	skipnz
  4373  0EA9  0AA2               	incf	___aldiv@divisor+2,f
  4374  0EAA  1903               	skipnz
  4375  0EAB  0AA3               	incf	___aldiv@divisor+3,f
  4376  0EAC  01AA               	clrf	___aldiv@sign
  4377  0EAD  0AAA               	incf	___aldiv@sign,f
  4378  0EAE                     l513:	
  4379  0EAE  1FA7               	btfss	___aldiv@dividend+3,7
  4380  0EAF  2EB1               	goto	u2781
  4381  0EB0  2EB2               	goto	u2780
  4382  0EB1                     u2781:	
  4383  0EB1  2EC1               	goto	l2884
  4384  0EB2                     u2780:	
  4385  0EB2                     l2880:	
  4386  0EB2  09A4               	comf	___aldiv@dividend,f
  4387  0EB3  09A5               	comf	___aldiv@dividend+1,f
  4388  0EB4  09A6               	comf	___aldiv@dividend+2,f
  4389  0EB5  09A7               	comf	___aldiv@dividend+3,f
  4390  0EB6  0AA4               	incf	___aldiv@dividend,f
  4391  0EB7  1903               	skipnz
  4392  0EB8  0AA5               	incf	___aldiv@dividend+1,f
  4393  0EB9  1903               	skipnz
  4394  0EBA  0AA6               	incf	___aldiv@dividend+2,f
  4395  0EBB  1903               	skipnz
  4396  0EBC  0AA7               	incf	___aldiv@dividend+3,f
  4397  0EBD                     l2882:	
  4398  0EBD  3001               	movlw	1
  4399  0EBE  00A8               	movwf	??___aldiv
  4400  0EBF  0828               	movf	??___aldiv,w
  4401  0EC0  06AA               	xorwf	___aldiv@sign,f
  4402  0EC1                     l2884:	
  4403  0EC1  3000               	movlw	0
  4404  0EC2  00AE               	movwf	___aldiv@quotient+3
  4405  0EC3  3000               	movlw	0
  4406  0EC4  00AD               	movwf	___aldiv@quotient+2
  4407  0EC5  3000               	movlw	0
  4408  0EC6  00AC               	movwf	___aldiv@quotient+1
  4409  0EC7  3000               	movlw	0
  4410  0EC8  00AB               	movwf	___aldiv@quotient
  4411  0EC9                     l2886:	
  4412  0EC9  0823               	movf	___aldiv@divisor+3,w
  4413  0ECA  0422               	iorwf	___aldiv@divisor+2,w
  4414  0ECB  0421               	iorwf	___aldiv@divisor+1,w
  4415  0ECC  0420               	iorwf	___aldiv@divisor,w
  4416  0ECD  1903               	skipnz
  4417  0ECE  2ED0               	goto	u2791
  4418  0ECF  2ED1               	goto	u2790
  4419  0ED0                     u2791:	
  4420  0ED0  2F1E               	goto	l2906
  4421  0ED1                     u2790:	
  4422  0ED1                     l2888:	
  4423  0ED1  01A9               	clrf	___aldiv@counter
  4424  0ED2  0AA9               	incf	___aldiv@counter,f
  4425  0ED3  2EE1               	goto	l2892
  4426  0ED4                     l2890:	
  4427  0ED4  3001               	movlw	1
  4428  0ED5  00A8               	movwf	??___aldiv
  4429  0ED6                     u2805:	
  4430  0ED6  1003               	clrc
  4431  0ED7  0DA0               	rlf	___aldiv@divisor,f
  4432  0ED8  0DA1               	rlf	___aldiv@divisor+1,f
  4433  0ED9  0DA2               	rlf	___aldiv@divisor+2,f
  4434  0EDA  0DA3               	rlf	___aldiv@divisor+3,f
  4435  0EDB  0BA8               	decfsz	??___aldiv,f
  4436  0EDC  2ED6               	goto	u2805
  4437  0EDD  3001               	movlw	1
  4438  0EDE  00A8               	movwf	??___aldiv
  4439  0EDF  0828               	movf	??___aldiv,w
  4440  0EE0  07A9               	addwf	___aldiv@counter,f
  4441  0EE1                     l2892:	
  4442  0EE1  1FA3               	btfss	___aldiv@divisor+3,7
  4443  0EE2  2EE4               	goto	u2811
  4444  0EE3  2EE5               	goto	u2810
  4445  0EE4                     u2811:	
  4446  0EE4  2ED4               	goto	l2890
  4447  0EE5                     u2810:	
  4448  0EE5                     l2894:	
  4449  0EE5  3001               	movlw	1
  4450  0EE6  00A8               	movwf	??___aldiv
  4451  0EE7                     u2825:	
  4452  0EE7  1003               	clrc
  4453  0EE8  0DAB               	rlf	___aldiv@quotient,f
  4454  0EE9  0DAC               	rlf	___aldiv@quotient+1,f
  4455  0EEA  0DAD               	rlf	___aldiv@quotient+2,f
  4456  0EEB  0DAE               	rlf	___aldiv@quotient+3,f
  4457  0EEC  0BA8               	decfsz	??___aldiv,f
  4458  0EED  2EE7               	goto	u2825
  4459  0EEE                     l2896:	
  4460  0EEE  0823               	movf	___aldiv@divisor+3,w
  4461  0EEF  0227               	subwf	___aldiv@dividend+3,w
  4462  0EF0  1D03               	skipz
  4463  0EF1  2EFC               	goto	u2835
  4464  0EF2  0822               	movf	___aldiv@divisor+2,w
  4465  0EF3  0226               	subwf	___aldiv@dividend+2,w
  4466  0EF4  1D03               	skipz
  4467  0EF5  2EFC               	goto	u2835
  4468  0EF6  0821               	movf	___aldiv@divisor+1,w
  4469  0EF7  0225               	subwf	___aldiv@dividend+1,w
  4470  0EF8  1D03               	skipz
  4471  0EF9  2EFC               	goto	u2835
  4472  0EFA  0820               	movf	___aldiv@divisor,w
  4473  0EFB  0224               	subwf	___aldiv@dividend,w
  4474  0EFC                     u2835:	
  4475  0EFC  1C03               	skipc
  4476  0EFD  2EFF               	goto	u2831
  4477  0EFE  2F00               	goto	u2830
  4478  0EFF                     u2831:	
  4479  0EFF  2F0F               	goto	l2902
  4480  0F00                     u2830:	
  4481  0F00                     l2898:	
  4482  0F00  0820               	movf	___aldiv@divisor,w
  4483  0F01  02A4               	subwf	___aldiv@dividend,f
  4484  0F02  0821               	movf	___aldiv@divisor+1,w
  4485  0F03  1C03               	skipc
  4486  0F04  0F21               	incfsz	___aldiv@divisor+1,w
  4487  0F05  02A5               	subwf	___aldiv@dividend+1,f
  4488  0F06  0822               	movf	___aldiv@divisor+2,w
  4489  0F07  1C03               	skipc
  4490  0F08  0F22               	incfsz	___aldiv@divisor+2,w
  4491  0F09  02A6               	subwf	___aldiv@dividend+2,f
  4492  0F0A  0823               	movf	___aldiv@divisor+3,w
  4493  0F0B  1C03               	skipc
  4494  0F0C  0F23               	incfsz	___aldiv@divisor+3,w
  4495  0F0D  02A7               	subwf	___aldiv@dividend+3,f
  4496  0F0E                     l2900:	
  4497  0F0E  142B               	bsf	___aldiv@quotient,0
  4498  0F0F                     l2902:	
  4499  0F0F  3001               	movlw	1
  4500  0F10                     u2845:	
  4501  0F10  1003               	clrc
  4502  0F11  0CA3               	rrf	___aldiv@divisor+3,f
  4503  0F12  0CA2               	rrf	___aldiv@divisor+2,f
  4504  0F13  0CA1               	rrf	___aldiv@divisor+1,f
  4505  0F14  0CA0               	rrf	___aldiv@divisor,f
  4506  0F15  3EFF               	addlw	-1
  4507  0F16  1D03               	skipz
  4508  0F17  2F10               	goto	u2845
  4509  0F18                     l2904:	
  4510  0F18  3001               	movlw	1
  4511  0F19  02A9               	subwf	___aldiv@counter,f
  4512  0F1A  1D03               	btfss	3,2
  4513  0F1B  2F1D               	goto	u2851
  4514  0F1C  2F1E               	goto	u2850
  4515  0F1D                     u2851:	
  4516  0F1D  2EE5               	goto	l2894
  4517  0F1E                     u2850:	
  4518  0F1E                     l2906:	
  4519  0F1E  082A               	movf	___aldiv@sign,w
  4520  0F1F  1903               	btfsc	3,2
  4521  0F20  2F22               	goto	u2861
  4522  0F21  2F23               	goto	u2860
  4523  0F22                     u2861:	
  4524  0F22  2F2E               	goto	l2910
  4525  0F23                     u2860:	
  4526  0F23                     l2908:	
  4527  0F23  09AB               	comf	___aldiv@quotient,f
  4528  0F24  09AC               	comf	___aldiv@quotient+1,f
  4529  0F25  09AD               	comf	___aldiv@quotient+2,f
  4530  0F26  09AE               	comf	___aldiv@quotient+3,f
  4531  0F27  0AAB               	incf	___aldiv@quotient,f
  4532  0F28  1903               	skipnz
  4533  0F29  0AAC               	incf	___aldiv@quotient+1,f
  4534  0F2A  1903               	skipnz
  4535  0F2B  0AAD               	incf	___aldiv@quotient+2,f
  4536  0F2C  1903               	skipnz
  4537  0F2D  0AAE               	incf	___aldiv@quotient+3,f
  4538  0F2E                     l2910:	
  4539  0F2E  082E               	movf	___aldiv@quotient+3,w
  4540  0F2F  00A3               	movwf	?___aldiv+3
  4541  0F30  082D               	movf	___aldiv@quotient+2,w
  4542  0F31  00A2               	movwf	?___aldiv+2
  4543  0F32  082C               	movf	___aldiv@quotient+1,w
  4544  0F33  00A1               	movwf	?___aldiv+1
  4545  0F34  082B               	movf	___aldiv@quotient,w
  4546  0F35  00A0               	movwf	?___aldiv
  4547  0F36                     l523:	
  4548  0F36  0008               	return
  4549  0F37                     __end_of___aldiv:	
  4550                           
  4551                           	psect	text12
  4552  0AE0                     __ptext12:	
  4553 ;; *************** function _SetDisplay *****************
  4554 ;; Defined at:
  4555 ;;		line 468 in file "main.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  d1              1    wreg     unsigned char 
  4558 ;;  d2              1    0[BANK0 ] unsigned char 
  4559 ;;  d3              1    1[BANK0 ] unsigned char 
  4560 ;;  value           1    2[BANK0 ] unsigned char 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  d1              1    3[BANK0 ] unsigned char 
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg, status,0
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4572 ;;      Params:         0       3       0       0       0
  4573 ;;      Locals:         0       1       0       0       0
  4574 ;;      Temps:          0       0       0       0       0
  4575 ;;      Totals:         0       4       0       0       0
  4576 ;;Total ram usage:        4 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; Hardware stack levels required when called:    2
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		_main
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           
  4587                           ;psect for function _SetDisplay
  4588  0AE0                     _SetDisplay:	
  4589                           
  4590                           ;incstack = 0
  4591                           ; Regs used in _SetDisplay: [wreg+status,0]
  4592                           ;SetDisplay@d1 stored from wreg
  4593  0AE0  1283               	bcf	3,5	;RP0=0, select bank0
  4594  0AE1  1303               	bcf	3,6	;RP1=0, select bank0
  4595  0AE2  00A3               	movwf	SetDisplay@d1
  4596  0AE3                     l3128:	
  4597                           
  4598                           ;main.c: 468: void SetDisplay(char d1, char d2, char d3, char value);main.c: 469: {;main
      +                          .c: 470:     PORTAbits.RA2 = d1;
  4599  0AE3  0C23               	rrf	SetDisplay@d1,w
  4600  0AE4  1C03               	skipc
  4601  0AE5  1105               	bcf	5,2	;volatile
  4602  0AE6  1803               	skipnc
  4603  0AE7  1505               	bsf	5,2	;volatile
  4604                           
  4605                           ;main.c: 471:     PORTAbits.RA3 = d2;
  4606  0AE8  0C20               	rrf	SetDisplay@d2,w
  4607  0AE9  1C03               	skipc
  4608  0AEA  1185               	bcf	5,3	;volatile
  4609  0AEB  1803               	skipnc
  4610  0AEC  1585               	bsf	5,3	;volatile
  4611                           
  4612                           ;main.c: 472:     PORTAbits.RA4 = d3;
  4613  0AED  0C21               	rrf	SetDisplay@d3,w
  4614  0AEE  1C03               	skipc
  4615  0AEF  1205               	bcf	5,4	;volatile
  4616  0AF0  1803               	skipnc
  4617  0AF1  1605               	bsf	5,4	;volatile
  4618  0AF2                     l3130:	
  4619                           
  4620                           ;main.c: 473:     PORTD = value;
  4621  0AF2  0822               	movf	SetDisplay@value,w
  4622  0AF3  0088               	movwf	8	;volatile
  4623  0AF4                     l313:	
  4624  0AF4  0008               	return
  4625  0AF5                     __end_of_SetDisplay:	
  4626                           
  4627                           	psect	text13
  4628  0E10                     __ptext13:	
  4629 ;; *************** function _SetDefaultTimers *****************
  4630 ;; Defined at:
  4631 ;;		line 476 in file "main.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;  rosso           2    0[BANK0 ] int 
  4634 ;;  verde           2    2[BANK0 ] int 
  4635 ;;  giallo          2    4[BANK0 ] int 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  i               1   13[BANK0 ] unsigned char 
  4638 ;;  l               1   12[BANK0 ] unsigned char 
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  1    wreg      void 
  4641 ;; Registers used:
  4642 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 0/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4648 ;;      Params:         0       6       0       0       0
  4649 ;;      Locals:         0       2       0       0       0
  4650 ;;      Temps:          0       6       0       0       0
  4651 ;;      Totals:         0      14       0       0       0
  4652 ;;Total ram usage:       14 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; Hardware stack levels required when called:    2
  4655 ;; This function calls:
  4656 ;;		Nothing
  4657 ;; This function is called by:
  4658 ;;		_main
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           
  4663                           ;psect for function _SetDefaultTimers
  4664  0E10                     _SetDefaultTimers:	
  4665  0E10                     l3070:	
  4666                           ;incstack = 0
  4667                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4668                           
  4669                           
  4670                           ;main.c: 476: void SetDefaultTimers(int rosso, int verde, int giallo);main.c: 477: {;mai
      +                          n.c: 478:     for (unsigned char l = 0; l < 16; l++)
  4671  0E10  1283               	bcf	3,5	;RP0=0, select bank0
  4672  0E11  1303               	bcf	3,6	;RP1=0, select bank0
  4673  0E12  01AC               	clrf	SetDefaultTimers@l
  4674  0E13                     l3076:	
  4675                           
  4676                           ;main.c: 479:     {;main.c: 480:         for (unsigned char i = 0; i < 3; i++)
  4677  0E13  01AD               	clrf	SetDefaultTimers@i
  4678  0E14  2E72               	goto	l3090
  4679  0E15                     l3082:	
  4680                           
  4681                           ;main.c: 485:                 (*(Semafori[l])).new_times[i] = rosso;
  4682  0E15  082C               	movf	SetDefaultTimers@l,w
  4683  0E16  00A6               	movwf	??_SetDefaultTimers
  4684  0E17  0726               	addwf	??_SetDefaultTimers,w
  4685  0E18  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4686  0E19  0084               	movwf	4
  4687  0E1A  1383               	bcf	3,7	;select IRP bank1
  4688  0E1B  0800               	movf	0,w
  4689  0E1C  00A7               	movwf	??_SetDefaultTimers+1
  4690  0E1D  0A84               	incf	4,f
  4691  0E1E  0800               	movf	0,w
  4692  0E1F  00A8               	movwf	??_SetDefaultTimers+2
  4693  0E20  082D               	movf	SetDefaultTimers@i,w
  4694  0E21  00A9               	movwf	??_SetDefaultTimers+3
  4695  0E22  0729               	addwf	??_SetDefaultTimers+3,w
  4696  0E23  0727               	addwf	??_SetDefaultTimers+1,w
  4697  0E24  00AA               	movwf	??_SetDefaultTimers+4
  4698  0E25  0828               	movf	??_SetDefaultTimers+2,w
  4699  0E26  1803               	skipnc
  4700  0E27  3E01               	addlw	1
  4701  0E28  00AB               	movwf	??_SetDefaultTimers+5
  4702  0E29  082A               	movf	??_SetDefaultTimers+4,w
  4703  0E2A  0084               	movwf	4
  4704  0E2B  1783               	bsf	3,7
  4705  0E2C  1C2B               	btfss	??_SetDefaultTimers+5,0
  4706  0E2D  1383               	bcf	3,7
  4707  0E2E  0820               	movf	SetDefaultTimers@rosso,w
  4708  0E2F  0080               	movwf	0
  4709  0E30  0A84               	incf	4,f
  4710  0E31  0821               	movf	SetDefaultTimers@rosso+1,w
  4711  0E32  0080               	movwf	0
  4712                           
  4713                           ;main.c: 486:                 break;
  4714  0E33  2E85               	goto	l3092
  4715  0E34                     l3084:	
  4716                           
  4717                           ;main.c: 488:                 (*(Semafori[l])).new_times[i] = verde;
  4718  0E34  082C               	movf	SetDefaultTimers@l,w
  4719  0E35  00A6               	movwf	??_SetDefaultTimers
  4720  0E36  0726               	addwf	??_SetDefaultTimers,w
  4721  0E37  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4722  0E38  0084               	movwf	4
  4723  0E39  1383               	bcf	3,7	;select IRP bank1
  4724  0E3A  0800               	movf	0,w
  4725  0E3B  00A7               	movwf	??_SetDefaultTimers+1
  4726  0E3C  0A84               	incf	4,f
  4727  0E3D  0800               	movf	0,w
  4728  0E3E  00A8               	movwf	??_SetDefaultTimers+2
  4729  0E3F  082D               	movf	SetDefaultTimers@i,w
  4730  0E40  00A9               	movwf	??_SetDefaultTimers+3
  4731  0E41  0729               	addwf	??_SetDefaultTimers+3,w
  4732  0E42  0727               	addwf	??_SetDefaultTimers+1,w
  4733  0E43  00AA               	movwf	??_SetDefaultTimers+4
  4734  0E44  0828               	movf	??_SetDefaultTimers+2,w
  4735  0E45  1803               	skipnc
  4736  0E46  3E01               	addlw	1
  4737  0E47  00AB               	movwf	??_SetDefaultTimers+5
  4738  0E48  082A               	movf	??_SetDefaultTimers+4,w
  4739  0E49  0084               	movwf	4
  4740  0E4A  1783               	bsf	3,7
  4741  0E4B  1C2B               	btfss	??_SetDefaultTimers+5,0
  4742  0E4C  1383               	bcf	3,7
  4743  0E4D  0822               	movf	SetDefaultTimers@verde,w
  4744  0E4E  0080               	movwf	0
  4745  0E4F  0A84               	incf	4,f
  4746  0E50  0823               	movf	SetDefaultTimers@verde+1,w
  4747  0E51  0080               	movwf	0
  4748                           
  4749                           ;main.c: 489:                 break;
  4750  0E52  2E85               	goto	l3092
  4751  0E53                     l3086:	
  4752                           
  4753                           ;main.c: 491:                 (*(Semafori[l])).new_times[i] = giallo;
  4754  0E53  082C               	movf	SetDefaultTimers@l,w
  4755  0E54  00A6               	movwf	??_SetDefaultTimers
  4756  0E55  0726               	addwf	??_SetDefaultTimers,w
  4757  0E56  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4758  0E57  0084               	movwf	4
  4759  0E58  1383               	bcf	3,7	;select IRP bank1
  4760  0E59  0800               	movf	0,w
  4761  0E5A  00A7               	movwf	??_SetDefaultTimers+1
  4762  0E5B  0A84               	incf	4,f
  4763  0E5C  0800               	movf	0,w
  4764  0E5D  00A8               	movwf	??_SetDefaultTimers+2
  4765  0E5E  082D               	movf	SetDefaultTimers@i,w
  4766  0E5F  00A9               	movwf	??_SetDefaultTimers+3
  4767  0E60  0729               	addwf	??_SetDefaultTimers+3,w
  4768  0E61  0727               	addwf	??_SetDefaultTimers+1,w
  4769  0E62  00AA               	movwf	??_SetDefaultTimers+4
  4770  0E63  0828               	movf	??_SetDefaultTimers+2,w
  4771  0E64  1803               	skipnc
  4772  0E65  3E01               	addlw	1
  4773  0E66  00AB               	movwf	??_SetDefaultTimers+5
  4774  0E67  082A               	movf	??_SetDefaultTimers+4,w
  4775  0E68  0084               	movwf	4
  4776  0E69  1783               	bsf	3,7
  4777  0E6A  1C2B               	btfss	??_SetDefaultTimers+5,0
  4778  0E6B  1383               	bcf	3,7
  4779  0E6C  0824               	movf	SetDefaultTimers@giallo,w
  4780  0E6D  0080               	movwf	0
  4781  0E6E  0A84               	incf	4,f
  4782  0E6F  0825               	movf	SetDefaultTimers@giallo+1,w
  4783  0E70  0080               	movwf	0
  4784                           
  4785                           ;main.c: 492:                 break;
  4786  0E71  2E85               	goto	l3092
  4787  0E72                     l3090:	
  4788  0E72  082D               	movf	SetDefaultTimers@i,w
  4789  0E73  00A6               	movwf	??_SetDefaultTimers
  4790  0E74  01A7               	clrf	??_SetDefaultTimers+1
  4791                           
  4792                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4793                           ; Switch size 1, requested type "simple"
  4794                           ; Number of cases is 1, Range of values is 0 to 0
  4795                           ; switch strategies available:
  4796                           ; Name         Instructions Cycles
  4797                           ; simple_byte            4     3 (average)
  4798                           ; direct_byte           11     8 (fixed)
  4799                           ; jumptable            260     6 (fixed)
  4800                           ;	Chosen strategy is simple_byte
  4801  0E75  0827               	movf	??_SetDefaultTimers+1,w
  4802  0E76  3A00               	xorlw	0	; case 0
  4803  0E77  1903               	skipnz
  4804  0E78  2E7A               	goto	l3564
  4805  0E79  2E85               	goto	l3092
  4806  0E7A                     l3564:	
  4807                           
  4808                           ; Switch size 1, requested type "simple"
  4809                           ; Number of cases is 3, Range of values is 0 to 2
  4810                           ; switch strategies available:
  4811                           ; Name         Instructions Cycles
  4812                           ; simple_byte           10     6 (average)
  4813                           ; direct_byte           17     8 (fixed)
  4814                           ; jumptable            260     6 (fixed)
  4815                           ;	Chosen strategy is simple_byte
  4816  0E7A  0826               	movf	??_SetDefaultTimers,w
  4817  0E7B  3A00               	xorlw	0	; case 0
  4818  0E7C  1903               	skipnz
  4819  0E7D  2E15               	goto	l3082
  4820  0E7E  3A01               	xorlw	1	; case 1
  4821  0E7F  1903               	skipnz
  4822  0E80  2E34               	goto	l3084
  4823  0E81  3A03               	xorlw	3	; case 2
  4824  0E82  1903               	skipnz
  4825  0E83  2E53               	goto	l3086
  4826  0E84  2E85               	goto	l3092
  4827  0E85                     l3092:	
  4828                           
  4829                           ;main.c: 494:         }
  4830  0E85  3001               	movlw	1
  4831  0E86  00A6               	movwf	??_SetDefaultTimers
  4832  0E87  0826               	movf	??_SetDefaultTimers,w
  4833  0E88  07AD               	addwf	SetDefaultTimers@i,f
  4834  0E89                     l3094:	
  4835  0E89  3003               	movlw	3
  4836  0E8A  022D               	subwf	SetDefaultTimers@i,w
  4837  0E8B  1C03               	skipc
  4838  0E8C  2E8E               	goto	u3161
  4839  0E8D  2E8F               	goto	u3160
  4840  0E8E                     u3161:	
  4841  0E8E  2E72               	goto	l3090
  4842  0E8F                     u3160:	
  4843  0E8F                     l3096:	
  4844                           
  4845                           ;main.c: 495:     }
  4846  0E8F  3001               	movlw	1
  4847  0E90  00A6               	movwf	??_SetDefaultTimers
  4848  0E91  0826               	movf	??_SetDefaultTimers,w
  4849  0E92  07AC               	addwf	SetDefaultTimers@l,f
  4850  0E93                     l3098:	
  4851  0E93  3010               	movlw	16
  4852  0E94  022C               	subwf	SetDefaultTimers@l,w
  4853  0E95  1C03               	skipc
  4854  0E96  2E98               	goto	u3171
  4855  0E97  2E99               	goto	u3170
  4856  0E98                     u3171:	
  4857  0E98  2E13               	goto	l3076
  4858  0E99                     u3170:	
  4859  0E99                     l325:	
  4860  0E99  0008               	return
  4861  0E9A                     __end_of_SetDefaultTimers:	
  4862                           
  4863                           	psect	text14
  4864  0C47                     __ptext14:	
  4865 ;; *************** function _GetTime *****************
  4866 ;; Defined at:
  4867 ;;		line 442 in file "main.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  index           1    wreg     unsigned char 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  index           1    4[BANK0 ] unsigned char 
  4872 ;;  time            2    6[BANK0 ] int 
  4873 ;;  shortInt        1    5[BANK0 ] struct .
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  2    0[BANK0 ] int 
  4876 ;; Registers used:
  4877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4883 ;;      Params:         0       2       0       0       0
  4884 ;;      Locals:         0       4       0       0       0
  4885 ;;      Temps:          0       2       0       0       0
  4886 ;;      Totals:         0       8       0       0       0
  4887 ;;Total ram usage:        8 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    2
  4890 ;; This function calls:
  4891 ;;		Nothing
  4892 ;; This function is called by:
  4893 ;;		_main
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           
  4898                           ;psect for function _GetTime
  4899  0C47                     _GetTime:	
  4900                           
  4901                           ;incstack = 0
  4902                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4903                           ;GetTime@index stored from wreg
  4904  0C47  1283               	bcf	3,5	;RP0=0, select bank0
  4905  0C48  1303               	bcf	3,6	;RP1=0, select bank0
  4906  0C49  00A4               	movwf	GetTime@index
  4907  0C4A                     l3104:	
  4908                           
  4909                           ;main.c: 442: int GetTime(unsigned char index);main.c: 443: {;main.c: 444:     int time;
      +                          ;main.c: 448:     } shortInt;;main.c: 450:     shortInt.Val = dataFromGateway[index + 3]
      +                           & 0x7F;
  4910  0C4A  0824               	movf	GetTime@index,w
  4911  0C4B  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4912  0C4C  0084               	movwf	4
  4913  0C4D  307F               	movlw	127
  4914  0C4E  1383               	bcf	3,7	;select IRP bank1
  4915  0C4F  0500               	andwf	0,w
  4916  0C50  00A2               	movwf	??_GetTime
  4917  0C51  0825               	movf	GetTime@shortInt,w
  4918  0C52  0622               	xorwf	??_GetTime,w
  4919  0C53  3980               	andlw	-128
  4920  0C54  0622               	xorwf	??_GetTime,w
  4921  0C55  00A5               	movwf	GetTime@shortInt
  4922  0C56                     l3106:	
  4923                           
  4924                           ;main.c: 451:     time = shortInt.Val;
  4925  0C56  0825               	movf	GetTime@shortInt,w
  4926  0C57  397F               	andlw	127
  4927  0C58  00A2               	movwf	??_GetTime
  4928  0C59  01A3               	clrf	??_GetTime+1
  4929  0C5A  0822               	movf	??_GetTime,w
  4930  0C5B  00A6               	movwf	GetTime@time
  4931  0C5C  0823               	movf	??_GetTime+1,w
  4932  0C5D  00A7               	movwf	GetTime@time+1
  4933  0C5E                     l3108:	
  4934                           
  4935                           ;main.c: 452:     time = (time << 7) & 0x80;
  4936  0C5E  0827               	movf	GetTime@time+1,w
  4937  0C5F  00A3               	movwf	??_GetTime+1
  4938  0C60  0826               	movf	GetTime@time,w
  4939  0C61  00A2               	movwf	??_GetTime
  4940  0C62  3007               	movlw	7
  4941  0C63  00FF               	movwf	btemp+1
  4942  0C64                     u3185:	
  4943  0C64  1003               	clrc
  4944  0C65  0DA2               	rlf	??_GetTime,f
  4945  0C66  0DA3               	rlf	??_GetTime+1,f
  4946  0C67  0BFF               	decfsz	btemp+1,f
  4947  0C68  2C64               	goto	u3185
  4948  0C69  3080               	movlw	128
  4949  0C6A  0522               	andwf	??_GetTime,w
  4950  0C6B  00A6               	movwf	GetTime@time
  4951  0C6C  3000               	movlw	0
  4952  0C6D  0523               	andwf	??_GetTime+1,w
  4953  0C6E  00A7               	movwf	GetTime@time+1
  4954  0C6F                     l3110:	
  4955                           
  4956                           ;main.c: 454:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4957  0C6F  0824               	movf	GetTime@index,w
  4958  0C70  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4959  0C71  0084               	movwf	4
  4960  0C72  307F               	movlw	127
  4961  0C73  0500               	andwf	0,w
  4962  0C74  00A2               	movwf	??_GetTime
  4963  0C75  0825               	movf	GetTime@shortInt,w
  4964  0C76  0622               	xorwf	??_GetTime,w
  4965  0C77  3980               	andlw	-128
  4966  0C78  0622               	xorwf	??_GetTime,w
  4967  0C79  00A5               	movwf	GetTime@shortInt
  4968  0C7A                     l3112:	
  4969                           
  4970                           ;main.c: 455:     time = time | shortInt.Val;
  4971  0C7A  0825               	movf	GetTime@shortInt,w
  4972  0C7B  397F               	andlw	127
  4973  0C7C  00A2               	movwf	??_GetTime
  4974  0C7D  0826               	movf	GetTime@time,w
  4975  0C7E  0422               	iorwf	??_GetTime,w
  4976  0C7F  00A6               	movwf	GetTime@time
  4977  0C80  0827               	movf	GetTime@time+1,w
  4978  0C81  00A7               	movwf	GetTime@time+1
  4979  0C82                     l3114:	
  4980                           
  4981                           ;main.c: 457:     return time;
  4982  0C82  0827               	movf	GetTime@time+1,w
  4983  0C83  00A1               	movwf	?_GetTime+1
  4984  0C84  0826               	movf	GetTime@time,w
  4985  0C85  00A0               	movwf	?_GetTime
  4986  0C86                     l307:	
  4987  0C86  0008               	return
  4988  0C87                     __end_of_GetTime:	
  4989                           
  4990                           	psect	text15
  4991  0DA5                     __ptext15:	
  4992 ;; *************** function _GetDigits *****************
  4993 ;; Defined at:
  4994 ;;		line 460 in file "main.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  Time            2   16[BANK0 ] int 
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  1    wreg      void 
  5001 ;; Registers used:
  5002 ;;		wreg, status,2, status,0, pclath, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5008 ;;      Params:         0       2       0       0       0
  5009 ;;      Locals:         0       2       0       0       0
  5010 ;;      Temps:          0       3       0       0       0
  5011 ;;      Totals:         0       7       0       0       0
  5012 ;;Total ram usage:        7 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    3
  5015 ;; This function calls:
  5016 ;;		___awdiv
  5017 ;;		___awmod
  5018 ;; This function is called by:
  5019 ;;		_main
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           
  5024                           ;psect for function _GetDigits
  5025  0DA5                     _GetDigits:	
  5026  0DA5                     l3118:	
  5027                           ;incstack = 0
  5028                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  5029                           
  5030                           
  5031                           ;main.c: 460: void GetDigits(int Time);main.c: 461: {;main.c: 462:     countdown = Time;
  5032  0DA5  1283               	bcf	3,5	;RP0=0, select bank0
  5033  0DA6  1303               	bcf	3,6	;RP1=0, select bank0
  5034  0DA7  0830               	movf	GetDigits@Time,w
  5035  0DA8  00B2               	movwf	??_GetDigits
  5036  0DA9  0832               	movf	??_GetDigits,w
  5037  0DAA  00DA               	movwf	_countdown
  5038  0DAB                     l3120:	
  5039                           
  5040                           ;main.c: 463:     centinaia = countdown / 100;
  5041  0DAB  3064               	movlw	100
  5042  0DAC  00A7               	movwf	___awdiv@divisor
  5043  0DAD  3000               	movlw	0
  5044  0DAE  00A8               	movwf	___awdiv@divisor+1
  5045  0DAF  085A               	movf	_countdown,w
  5046  0DB0  00B2               	movwf	??_GetDigits
  5047  0DB1  01B3               	clrf	??_GetDigits+1
  5048  0DB2  0832               	movf	??_GetDigits,w
  5049  0DB3  00A9               	movwf	___awdiv@dividend
  5050  0DB4  0833               	movf	??_GetDigits+1,w
  5051  0DB5  00AA               	movwf	___awdiv@dividend+1
  5052  0DB6  120A  158A  253C  120A  158A  	fcall	___awdiv
  5053  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  5054  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  5055  0DBD  0827               	movf	?___awdiv,w
  5056  0DBE  00B4               	movwf	??_GetDigits+2
  5057  0DBF  0834               	movf	??_GetDigits+2,w
  5058  0DC0  00DD               	movwf	_centinaia
  5059  0DC1                     l3122:	
  5060                           
  5061                           ;main.c: 464:     decine = (countdown % 100) / 10;
  5062  0DC1  300A               	movlw	10
  5063  0DC2  00A7               	movwf	___awdiv@divisor
  5064  0DC3  3000               	movlw	0
  5065  0DC4  00A8               	movwf	___awdiv@divisor+1
  5066  0DC5  085A               	movf	_countdown,w
  5067  0DC6  00B2               	movwf	??_GetDigits
  5068  0DC7  01B3               	clrf	??_GetDigits+1
  5069  0DC8  0832               	movf	??_GetDigits,w
  5070  0DC9  00A2               	movwf	___awmod@dividend
  5071  0DCA  0833               	movf	??_GetDigits+1,w
  5072  0DCB  00A3               	movwf	___awmod@dividend+1
  5073  0DCC  3064               	movlw	100
  5074  0DCD  00A0               	movwf	___awmod@divisor
  5075  0DCE  3000               	movlw	0
  5076  0DCF  00A1               	movwf	___awmod@divisor+1
  5077  0DD0  120A  158A  24E1  120A  158A  	fcall	___awmod
  5078  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  5079  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  5080  0DD7  0821               	movf	?___awmod+1,w
  5081  0DD8  00AA               	movwf	___awdiv@dividend+1
  5082  0DD9  0820               	movf	?___awmod,w
  5083  0DDA  00A9               	movwf	___awdiv@dividend
  5084  0DDB  120A  158A  253C  120A  158A  	fcall	___awdiv
  5085  0DE0  1283               	bcf	3,5	;RP0=0, select bank0
  5086  0DE1  1303               	bcf	3,6	;RP1=0, select bank0
  5087  0DE2  0827               	movf	?___awdiv,w
  5088  0DE3  00B4               	movwf	??_GetDigits+2
  5089  0DE4  0834               	movf	??_GetDigits+2,w
  5090  0DE5  00DE               	movwf	_decine
  5091  0DE6                     l3124:	
  5092                           
  5093                           ;main.c: 465:     unita = (countdown % 100) % 10;
  5094  0DE6  085A               	movf	_countdown,w
  5095  0DE7  00B2               	movwf	??_GetDigits
  5096  0DE8  01B3               	clrf	??_GetDigits+1
  5097  0DE9  0832               	movf	??_GetDigits,w
  5098  0DEA  00A2               	movwf	___awmod@dividend
  5099  0DEB  0833               	movf	??_GetDigits+1,w
  5100  0DEC  00A3               	movwf	___awmod@dividend+1
  5101  0DED  3064               	movlw	100
  5102  0DEE  00A0               	movwf	___awmod@divisor
  5103  0DEF  3000               	movlw	0
  5104  0DF0  00A1               	movwf	___awmod@divisor+1
  5105  0DF1  120A  158A  24E1  120A  158A  	fcall	___awmod
  5106  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  5107  0DF7  1303               	bcf	3,6	;RP1=0, select bank0
  5108  0DF8  0821               	movf	?___awmod+1,w
  5109  0DF9  00B6               	movwf	_GetDigits$1151+1
  5110  0DFA  0820               	movf	?___awmod,w
  5111  0DFB  00B5               	movwf	_GetDigits$1151
  5112  0DFC                     l3126:	
  5113                           
  5114                           ;main.c: 465:     unita = (countdown % 100) % 10;
  5115  0DFC  300A               	movlw	10
  5116  0DFD  00A0               	movwf	___awmod@divisor
  5117  0DFE  3000               	movlw	0
  5118  0DFF  00A1               	movwf	___awmod@divisor+1
  5119  0E00  0836               	movf	_GetDigits$1151+1,w
  5120  0E01  00A3               	movwf	___awmod@dividend+1
  5121  0E02  0835               	movf	_GetDigits$1151,w
  5122  0E03  00A2               	movwf	___awmod@dividend
  5123  0E04  120A  158A  24E1  120A  158A  	fcall	___awmod
  5124  0E09  1283               	bcf	3,5	;RP0=0, select bank0
  5125  0E0A  1303               	bcf	3,6	;RP1=0, select bank0
  5126  0E0B  0820               	movf	?___awmod,w
  5127  0E0C  00B2               	movwf	??_GetDigits
  5128  0E0D  0832               	movf	??_GetDigits,w
  5129  0E0E  00DF               	movwf	_unita
  5130  0E0F                     l310:	
  5131  0E0F  0008               	return
  5132  0E10                     __end_of_GetDigits:	
  5133                           
  5134                           	psect	text16
  5135  0CE1                     __ptext16:	
  5136 ;; *************** function ___awmod *****************
  5137 ;; Defined at:
  5138 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;  divisor         2    0[BANK0 ] int 
  5141 ;;  dividend        2    2[BANK0 ] int 
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;  sign            1    6[BANK0 ] unsigned char 
  5144 ;;  counter         1    5[BANK0 ] unsigned char 
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  2    0[BANK0 ] int 
  5147 ;; Registers used:
  5148 ;;		wreg, status,2, status,0
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5154 ;;      Params:         0       4       0       0       0
  5155 ;;      Locals:         0       2       0       0       0
  5156 ;;      Temps:          0       1       0       0       0
  5157 ;;      Totals:         0       7       0       0       0
  5158 ;;Total ram usage:        7 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:    2
  5161 ;; This function calls:
  5162 ;;		Nothing
  5163 ;; This function is called by:
  5164 ;;		_main
  5165 ;;		_GetDigits
  5166 ;;		_intToString
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           
  5171                           ;psect for function ___awmod
  5172  0CE1                     ___awmod:	
  5173  0CE1                     l2958:	
  5174                           ;incstack = 0
  5175                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5176                           
  5177  0CE1  1283               	bcf	3,5	;RP0=0, select bank0
  5178  0CE2  1303               	bcf	3,6	;RP1=0, select bank0
  5179  0CE3  01A6               	clrf	___awmod@sign
  5180  0CE4                     l2960:	
  5181  0CE4  1FA3               	btfss	___awmod@dividend+1,7
  5182  0CE5  2CE7               	goto	u2971
  5183  0CE6  2CE8               	goto	u2970
  5184  0CE7                     u2971:	
  5185  0CE7  2CEF               	goto	l2966
  5186  0CE8                     u2970:	
  5187  0CE8                     l2962:	
  5188  0CE8  09A2               	comf	___awmod@dividend,f
  5189  0CE9  09A3               	comf	___awmod@dividend+1,f
  5190  0CEA  0AA2               	incf	___awmod@dividend,f
  5191  0CEB  1903               	skipnz
  5192  0CEC  0AA3               	incf	___awmod@dividend+1,f
  5193  0CED                     l2964:	
  5194  0CED  01A6               	clrf	___awmod@sign
  5195  0CEE  0AA6               	incf	___awmod@sign,f
  5196  0CEF                     l2966:	
  5197  0CEF  1FA1               	btfss	___awmod@divisor+1,7
  5198  0CF0  2CF2               	goto	u2981
  5199  0CF1  2CF3               	goto	u2980
  5200  0CF2                     u2981:	
  5201  0CF2  2CF8               	goto	l2970
  5202  0CF3                     u2980:	
  5203  0CF3                     l2968:	
  5204  0CF3  09A0               	comf	___awmod@divisor,f
  5205  0CF4  09A1               	comf	___awmod@divisor+1,f
  5206  0CF5  0AA0               	incf	___awmod@divisor,f
  5207  0CF6  1903               	skipnz
  5208  0CF7  0AA1               	incf	___awmod@divisor+1,f
  5209  0CF8                     l2970:	
  5210  0CF8  0820               	movf	___awmod@divisor,w
  5211  0CF9  0421               	iorwf	___awmod@divisor+1,w
  5212  0CFA  1903               	btfsc	3,2
  5213  0CFB  2CFD               	goto	u2991
  5214  0CFC  2CFE               	goto	u2990
  5215  0CFD                     u2991:	
  5216  0CFD  2D2D               	goto	l2988
  5217  0CFE                     u2990:	
  5218  0CFE                     l2972:	
  5219  0CFE  01A5               	clrf	___awmod@counter
  5220  0CFF  0AA5               	incf	___awmod@counter,f
  5221  0D00  2D0C               	goto	l2978
  5222  0D01                     l2974:	
  5223  0D01  3001               	movlw	1
  5224  0D02                     u3005:	
  5225  0D02  1003               	clrc
  5226  0D03  0DA0               	rlf	___awmod@divisor,f
  5227  0D04  0DA1               	rlf	___awmod@divisor+1,f
  5228  0D05  3EFF               	addlw	-1
  5229  0D06  1D03               	skipz
  5230  0D07  2D02               	goto	u3005
  5231  0D08                     l2976:	
  5232  0D08  3001               	movlw	1
  5233  0D09  00A4               	movwf	??___awmod
  5234  0D0A  0824               	movf	??___awmod,w
  5235  0D0B  07A5               	addwf	___awmod@counter,f
  5236  0D0C                     l2978:	
  5237  0D0C  1FA1               	btfss	___awmod@divisor+1,7
  5238  0D0D  2D0F               	goto	u3011
  5239  0D0E  2D10               	goto	u3010
  5240  0D0F                     u3011:	
  5241  0D0F  2D01               	goto	l2974
  5242  0D10                     u3010:	
  5243  0D10                     l2980:	
  5244  0D10  0821               	movf	___awmod@divisor+1,w
  5245  0D11  0223               	subwf	___awmod@dividend+1,w
  5246  0D12  1D03               	skipz
  5247  0D13  2D16               	goto	u3025
  5248  0D14  0820               	movf	___awmod@divisor,w
  5249  0D15  0222               	subwf	___awmod@dividend,w
  5250  0D16                     u3025:	
  5251  0D16  1C03               	skipc
  5252  0D17  2D19               	goto	u3021
  5253  0D18  2D1A               	goto	u3020
  5254  0D19                     u3021:	
  5255  0D19  2D20               	goto	l2984
  5256  0D1A                     u3020:	
  5257  0D1A                     l2982:	
  5258  0D1A  0820               	movf	___awmod@divisor,w
  5259  0D1B  02A2               	subwf	___awmod@dividend,f
  5260  0D1C  0821               	movf	___awmod@divisor+1,w
  5261  0D1D  1C03               	skipc
  5262  0D1E  03A3               	decf	___awmod@dividend+1,f
  5263  0D1F  02A3               	subwf	___awmod@dividend+1,f
  5264  0D20                     l2984:	
  5265  0D20  3001               	movlw	1
  5266  0D21                     u3035:	
  5267  0D21  1003               	clrc
  5268  0D22  0CA1               	rrf	___awmod@divisor+1,f
  5269  0D23  0CA0               	rrf	___awmod@divisor,f
  5270  0D24  3EFF               	addlw	-1
  5271  0D25  1D03               	skipz
  5272  0D26  2D21               	goto	u3035
  5273  0D27                     l2986:	
  5274  0D27  3001               	movlw	1
  5275  0D28  02A5               	subwf	___awmod@counter,f
  5276  0D29  1D03               	btfss	3,2
  5277  0D2A  2D2C               	goto	u3041
  5278  0D2B  2D2D               	goto	u3040
  5279  0D2C                     u3041:	
  5280  0D2C  2D10               	goto	l2980
  5281  0D2D                     u3040:	
  5282  0D2D                     l2988:	
  5283  0D2D  0826               	movf	___awmod@sign,w
  5284  0D2E  1903               	btfsc	3,2
  5285  0D2F  2D31               	goto	u3051
  5286  0D30  2D32               	goto	u3050
  5287  0D31                     u3051:	
  5288  0D31  2D37               	goto	l2992
  5289  0D32                     u3050:	
  5290  0D32                     l2990:	
  5291  0D32  09A2               	comf	___awmod@dividend,f
  5292  0D33  09A3               	comf	___awmod@dividend+1,f
  5293  0D34  0AA2               	incf	___awmod@dividend,f
  5294  0D35  1903               	skipnz
  5295  0D36  0AA3               	incf	___awmod@dividend+1,f
  5296  0D37                     l2992:	
  5297  0D37  0823               	movf	___awmod@dividend+1,w
  5298  0D38  00A1               	movwf	?___awmod+1
  5299  0D39  0822               	movf	___awmod@dividend,w
  5300  0D3A  00A0               	movwf	?___awmod
  5301  0D3B                     l614:	
  5302  0D3B  0008               	return
  5303  0D3C                     __end_of___awmod:	
  5304                           
  5305                           	psect	text17
  5306  0D3C                     __ptext17:	
  5307 ;; *************** function ___awdiv *****************
  5308 ;; Defined at:
  5309 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;  divisor         2    7[BANK0 ] int 
  5312 ;;  dividend        2    9[BANK0 ] int 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  quotient        2   14[BANK0 ] int 
  5315 ;;  sign            1   13[BANK0 ] unsigned char 
  5316 ;;  counter         1   12[BANK0 ] unsigned char 
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  2    7[BANK0 ] int 
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5326 ;;      Params:         0       4       0       0       0
  5327 ;;      Locals:         0       4       0       0       0
  5328 ;;      Temps:          0       1       0       0       0
  5329 ;;      Totals:         0       9       0       0       0
  5330 ;;Total ram usage:        9 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    2
  5333 ;; This function calls:
  5334 ;;		Nothing
  5335 ;; This function is called by:
  5336 ;;		_map
  5337 ;;		_GetDigits
  5338 ;;		_intToString
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function ___awdiv
  5344  0D3C                     ___awdiv:	
  5345  0D3C                     l2914:	
  5346                           ;incstack = 0
  5347                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5348                           
  5349  0D3C  1283               	bcf	3,5	;RP0=0, select bank0
  5350  0D3D  1303               	bcf	3,6	;RP1=0, select bank0
  5351  0D3E  01AD               	clrf	___awdiv@sign
  5352  0D3F                     l2916:	
  5353  0D3F  1FA8               	btfss	___awdiv@divisor+1,7
  5354  0D40  2D42               	goto	u2871
  5355  0D41  2D43               	goto	u2870
  5356  0D42                     u2871:	
  5357  0D42  2D4A               	goto	l2922
  5358  0D43                     u2870:	
  5359  0D43                     l2918:	
  5360  0D43  09A7               	comf	___awdiv@divisor,f
  5361  0D44  09A8               	comf	___awdiv@divisor+1,f
  5362  0D45  0AA7               	incf	___awdiv@divisor,f
  5363  0D46  1903               	skipnz
  5364  0D47  0AA8               	incf	___awdiv@divisor+1,f
  5365  0D48                     l2920:	
  5366  0D48  01AD               	clrf	___awdiv@sign
  5367  0D49  0AAD               	incf	___awdiv@sign,f
  5368  0D4A                     l2922:	
  5369  0D4A  1FAA               	btfss	___awdiv@dividend+1,7
  5370  0D4B  2D4D               	goto	u2881
  5371  0D4C  2D4E               	goto	u2880
  5372  0D4D                     u2881:	
  5373  0D4D  2D57               	goto	l2928
  5374  0D4E                     u2880:	
  5375  0D4E                     l2924:	
  5376  0D4E  09A9               	comf	___awdiv@dividend,f
  5377  0D4F  09AA               	comf	___awdiv@dividend+1,f
  5378  0D50  0AA9               	incf	___awdiv@dividend,f
  5379  0D51  1903               	skipnz
  5380  0D52  0AAA               	incf	___awdiv@dividend+1,f
  5381  0D53                     l2926:	
  5382  0D53  3001               	movlw	1
  5383  0D54  00AB               	movwf	??___awdiv
  5384  0D55  082B               	movf	??___awdiv,w
  5385  0D56  06AD               	xorwf	___awdiv@sign,f
  5386  0D57                     l2928:	
  5387  0D57  01AE               	clrf	___awdiv@quotient
  5388  0D58  01AF               	clrf	___awdiv@quotient+1
  5389  0D59                     l2930:	
  5390  0D59  0827               	movf	___awdiv@divisor,w
  5391  0D5A  0428               	iorwf	___awdiv@divisor+1,w
  5392  0D5B  1903               	btfsc	3,2
  5393  0D5C  2D5E               	goto	u2891
  5394  0D5D  2D5F               	goto	u2890
  5395  0D5E                     u2891:	
  5396  0D5E  2D96               	goto	l2950
  5397  0D5F                     u2890:	
  5398  0D5F                     l2932:	
  5399  0D5F  01AC               	clrf	___awdiv@counter
  5400  0D60  0AAC               	incf	___awdiv@counter,f
  5401  0D61  2D6D               	goto	l2938
  5402  0D62                     l2934:	
  5403  0D62  3001               	movlw	1
  5404  0D63                     u2905:	
  5405  0D63  1003               	clrc
  5406  0D64  0DA7               	rlf	___awdiv@divisor,f
  5407  0D65  0DA8               	rlf	___awdiv@divisor+1,f
  5408  0D66  3EFF               	addlw	-1
  5409  0D67  1D03               	skipz
  5410  0D68  2D63               	goto	u2905
  5411  0D69                     l2936:	
  5412  0D69  3001               	movlw	1
  5413  0D6A  00AB               	movwf	??___awdiv
  5414  0D6B  082B               	movf	??___awdiv,w
  5415  0D6C  07AC               	addwf	___awdiv@counter,f
  5416  0D6D                     l2938:	
  5417  0D6D  1FA8               	btfss	___awdiv@divisor+1,7
  5418  0D6E  2D70               	goto	u2911
  5419  0D6F  2D71               	goto	u2910
  5420  0D70                     u2911:	
  5421  0D70  2D62               	goto	l2934
  5422  0D71                     u2910:	
  5423  0D71                     l2940:	
  5424  0D71  3001               	movlw	1
  5425  0D72                     u2925:	
  5426  0D72  1003               	clrc
  5427  0D73  0DAE               	rlf	___awdiv@quotient,f
  5428  0D74  0DAF               	rlf	___awdiv@quotient+1,f
  5429  0D75  3EFF               	addlw	-1
  5430  0D76  1D03               	skipz
  5431  0D77  2D72               	goto	u2925
  5432  0D78  0828               	movf	___awdiv@divisor+1,w
  5433  0D79  022A               	subwf	___awdiv@dividend+1,w
  5434  0D7A  1D03               	skipz
  5435  0D7B  2D7E               	goto	u2935
  5436  0D7C  0827               	movf	___awdiv@divisor,w
  5437  0D7D  0229               	subwf	___awdiv@dividend,w
  5438  0D7E                     u2935:	
  5439  0D7E  1C03               	skipc
  5440  0D7F  2D81               	goto	u2931
  5441  0D80  2D82               	goto	u2930
  5442  0D81                     u2931:	
  5443  0D81  2D89               	goto	l2946
  5444  0D82                     u2930:	
  5445  0D82                     l2942:	
  5446  0D82  0827               	movf	___awdiv@divisor,w
  5447  0D83  02A9               	subwf	___awdiv@dividend,f
  5448  0D84  0828               	movf	___awdiv@divisor+1,w
  5449  0D85  1C03               	skipc
  5450  0D86  03AA               	decf	___awdiv@dividend+1,f
  5451  0D87  02AA               	subwf	___awdiv@dividend+1,f
  5452  0D88                     l2944:	
  5453  0D88  142E               	bsf	___awdiv@quotient,0
  5454  0D89                     l2946:	
  5455  0D89  3001               	movlw	1
  5456  0D8A                     u2945:	
  5457  0D8A  1003               	clrc
  5458  0D8B  0CA8               	rrf	___awdiv@divisor+1,f
  5459  0D8C  0CA7               	rrf	___awdiv@divisor,f
  5460  0D8D  3EFF               	addlw	-1
  5461  0D8E  1D03               	skipz
  5462  0D8F  2D8A               	goto	u2945
  5463  0D90                     l2948:	
  5464  0D90  3001               	movlw	1
  5465  0D91  02AC               	subwf	___awdiv@counter,f
  5466  0D92  1D03               	btfss	3,2
  5467  0D93  2D95               	goto	u2951
  5468  0D94  2D96               	goto	u2950
  5469  0D95                     u2951:	
  5470  0D95  2D71               	goto	l2940
  5471  0D96                     u2950:	
  5472  0D96                     l2950:	
  5473  0D96  082D               	movf	___awdiv@sign,w
  5474  0D97  1903               	btfsc	3,2
  5475  0D98  2D9A               	goto	u2961
  5476  0D99  2D9B               	goto	u2960
  5477  0D9A                     u2961:	
  5478  0D9A  2DA0               	goto	l2954
  5479  0D9B                     u2960:	
  5480  0D9B                     l2952:	
  5481  0D9B  09AE               	comf	___awdiv@quotient,f
  5482  0D9C  09AF               	comf	___awdiv@quotient+1,f
  5483  0D9D  0AAE               	incf	___awdiv@quotient,f
  5484  0D9E  1903               	skipnz
  5485  0D9F  0AAF               	incf	___awdiv@quotient+1,f
  5486  0DA0                     l2954:	
  5487  0DA0  082F               	movf	___awdiv@quotient+1,w
  5488  0DA1  00A8               	movwf	?___awdiv+1
  5489  0DA2  082E               	movf	___awdiv@quotient,w
  5490  0DA3  00A7               	movwf	?___awdiv
  5491  0DA4                     l601:	
  5492  0DA4  0008               	return
  5493  0DA5                     __end_of___awdiv:	
  5494                           
  5495                           	psect	text18
  5496  0B2C                     __ptext18:	
  5497 ;; *************** function _ADC_Read *****************
  5498 ;; Defined at:
  5499 ;;		line 384 in file "main.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;  canale          1    wreg     unsigned char 
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;  canale          1    3[BANK0 ] unsigned char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  2    0[BANK0 ] int 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5513 ;;      Params:         0       2       0       0       0
  5514 ;;      Locals:         0       1       0       0       0
  5515 ;;      Temps:          0       1       0       0       0
  5516 ;;      Totals:         0       4       0       0       0
  5517 ;;Total ram usage:        4 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    2
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_main
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _ADC_Read
  5529  0B2C                     _ADC_Read:	
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5533                           ;ADC_Read@canale stored from wreg
  5534  0B2C  1283               	bcf	3,5	;RP0=0, select bank0
  5535  0B2D  1303               	bcf	3,6	;RP1=0, select bank0
  5536  0B2E  00A3               	movwf	ADC_Read@canale
  5537  0B2F                     l3148:	
  5538                           
  5539                           ;main.c: 384: int ADC_Read(char canale);main.c: 385: {;main.c: 386:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  5540  0B2F  0823               	movf	ADC_Read@canale,w
  5541  0B30  00A2               	movwf	??_ADC_Read
  5542  0B31  3002               	movlw	2
  5543  0B32                     u3205:	
  5544  0B32  1003               	clrc
  5545  0B33  0DA2               	rlf	??_ADC_Read,f
  5546  0B34  3EFF               	addlw	-1
  5547  0B35  1D03               	skipz
  5548  0B36  2B32               	goto	u3205
  5549  0B37  1003               	clrc
  5550  0B38  0D22               	rlf	??_ADC_Read,w
  5551  0B39  3801               	iorlw	1
  5552  0B3A  009F               	movwf	31	;volatile
  5553  0B3B                     l3150:	
  5554                           
  5555                           ;main.c: 387:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5556  0B3B  3004               	movlw	4
  5557  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  5558  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  5559  0B3E  00A2               	movwf	??_ADC_Read
  5560  0B3F                     u3597:	
  5561  0B3F  0BA2               	decfsz	??_ADC_Read,f
  5562  0B40  2B3F               	goto	u3597
  5563  0B41  0000               	nop
  5564  0B42                     l3152:	
  5565                           
  5566                           ;main.c: 388:     GO_nDONE = 1;
  5567  0B42  1283               	bcf	3,5	;RP0=0, select bank0
  5568  0B43  1303               	bcf	3,6	;RP1=0, select bank0
  5569  0B44  151F               	bsf	31,2	;volatile
  5570  0B45                     l275:	
  5571                           ;main.c: 390:         ;
  5572                           
  5573                           
  5574                           ;main.c: 389:     while (GO_nDONE)
  5575  0B45  191F               	btfsc	31,2	;volatile
  5576  0B46  2B48               	goto	u3211
  5577  0B47  2B49               	goto	u3210
  5578  0B48                     u3211:	
  5579  0B48  2B45               	goto	l275
  5580  0B49                     u3210:	
  5581  0B49                     l3154:	
  5582                           
  5583                           ;main.c: 391:     return ADRESL + (ADRESH << 8);
  5584  0B49  081E               	movf	30,w	;volatile
  5585  0B4A  00A1               	movwf	?_ADC_Read+1
  5586  0B4B  1683               	bsf	3,5	;RP0=1, select bank1
  5587  0B4C  1303               	bcf	3,6	;RP1=0, select bank1
  5588  0B4D  081E               	movf	30,w	;volatile
  5589  0B4E  1283               	bcf	3,5	;RP0=0, select bank0
  5590  0B4F  1303               	bcf	3,6	;RP1=0, select bank0
  5591  0B50  00A0               	movwf	?_ADC_Read
  5592  0B51                     l278:	
  5593  0B51  0008               	return
  5594  0B52                     __end_of_ADC_Read:	
  5595                           
  5596                           	psect	text19
  5597  0C87                     __ptext19:	
  5598 ;; *************** function _ISR *****************
  5599 ;; Defined at:
  5600 ;;		line 586 in file "main.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;		None
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;		None
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  1    wreg      void 
  5607 ;; Registers used:
  5608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5614 ;;      Params:         0       0       0       0       0
  5615 ;;      Locals:         0       0       0       0       0
  5616 ;;      Temps:          4       0       0       0       0
  5617 ;;      Totals:         4       0       0       0       0
  5618 ;;Total ram usage:        4 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; Hardware stack levels required when called:    1
  5621 ;; This function calls:
  5622 ;;		_UART_Read
  5623 ;;		_conteggioVeicoli
  5624 ;; This function is called by:
  5625 ;;		Interrupt level 1
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           
  5630                           ;psect for function _ISR
  5631  0C87                     _ISR:	
  5632  0C87                     i1l2622:	
  5633                           
  5634                           ;main.c: 589:     if (RCIF && readGateway.Bit == 0)
  5635  0C87  1283               	bcf	3,5	;RP0=0, select bank0
  5636  0C88  1303               	bcf	3,6	;RP1=0, select bank0
  5637  0C89  1E8C               	btfss	12,5	;volatile
  5638  0C8A  2C8C               	goto	u251_21
  5639  0C8B  2C8D               	goto	u251_20
  5640  0C8C                     u251_21:	
  5641  0C8C  2C96               	goto	i1l2630
  5642  0C8D                     u251_20:	
  5643  0C8D                     i1l2624:	
  5644  0C8D  1862               	btfsc	_readGateway,0
  5645  0C8E  2C90               	goto	u252_21
  5646  0C8F  2C91               	goto	u252_20
  5647  0C90                     u252_21:	
  5648  0C90  2C96               	goto	i1l2630
  5649  0C91                     u252_20:	
  5650  0C91                     i1l2626:	
  5651                           
  5652                           ;main.c: 590:     {;main.c: 591:         readGateway.Bit = 1;
  5653  0C91  1462               	bsf	_readGateway,0
  5654                           
  5655                           ;main.c: 592:         readGatewayDone.Bit = 0;
  5656  0C92  1063               	bcf	_readGatewayDone,0
  5657                           
  5658                           ;main.c: 593:         readGatewayDone.Timeout = 0;
  5659  0C93  10E3               	bcf	_readGatewayDone,1
  5660  0C94                     i1l2628:	
  5661                           
  5662                           ;main.c: 594:         dataFromGatewayIndex = 0;
  5663  0C94  01D9               	clrf	_dataFromGatewayIndex
  5664                           
  5665                           ;main.c: 595:         timerReadFromGateway = 0;
  5666  0C95  01D8               	clrf	_timerReadFromGateway
  5667  0C96                     i1l2630:	
  5668                           
  5669                           ;main.c: 597:     if (RCIF && readGateway.Bit == 1)
  5670  0C96  1E8C               	btfss	12,5	;volatile
  5671  0C97  2C99               	goto	u253_21
  5672  0C98  2C9A               	goto	u253_20
  5673  0C99                     u253_21:	
  5674  0C99  2CB1               	goto	i1l2640
  5675  0C9A                     u253_20:	
  5676  0C9A                     i1l2632:	
  5677  0C9A  1C62               	btfss	_readGateway,0
  5678  0C9B  2C9D               	goto	u254_21
  5679  0C9C  2C9E               	goto	u254_20
  5680  0C9D                     u254_21:	
  5681  0C9D  2CB1               	goto	i1l2640
  5682  0C9E                     u254_20:	
  5683  0C9E                     i1l2634:	
  5684                           
  5685                           ;main.c: 598:     {;main.c: 599:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  5686  0C9E  120A  158A  22A6  120A  158A  	fcall	_UART_Read
  5687  0CA3  00F6               	movwf	??_ISR
  5688  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  5689  0CA5  1303               	bcf	3,6	;RP1=0, select bank0
  5690  0CA6  0859               	movf	_dataFromGatewayIndex,w
  5691  0CA7  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  5692  0CA8  0084               	movwf	4
  5693  0CA9  0876               	movf	??_ISR,w
  5694  0CAA  1383               	bcf	3,7	;select IRP bank1
  5695  0CAB  0080               	movwf	0
  5696  0CAC                     i1l2636:	
  5697                           
  5698                           ;main.c: 600:         dataFromGatewayIndex++;
  5699  0CAC  3001               	movlw	1
  5700  0CAD  00F6               	movwf	??_ISR
  5701  0CAE  0876               	movf	??_ISR,w
  5702  0CAF  07D9               	addwf	_dataFromGatewayIndex,f
  5703  0CB0                     i1l2638:	
  5704                           
  5705                           ;main.c: 601:         timerReadFromGateway = 0;
  5706  0CB0  01D8               	clrf	_timerReadFromGateway
  5707  0CB1                     i1l2640:	
  5708                           
  5709                           ;main.c: 606:     if (TMR0IF)
  5710  0CB1  1D0B               	btfss	11,2	;volatile
  5711  0CB2  2CB4               	goto	u255_21
  5712  0CB3  2CB5               	goto	u255_20
  5713  0CB4                     u255_21:	
  5714  0CB4  2CBF               	goto	i1l2648
  5715  0CB5                     u255_20:	
  5716  0CB5                     i1l2642:	
  5717                           
  5718                           ;main.c: 607:     {;main.c: 608:         TMR0IF = 0;
  5719  0CB5  110B               	bcf	11,2	;volatile
  5720  0CB6                     i1l2644:	
  5721                           
  5722                           ;main.c: 609:         conteggioVeicoli();
  5723  0CB6  120A  118A  2655  120A  158A  	fcall	_conteggioVeicoli
  5724  0CBB                     i1l2646:	
  5725                           
  5726                           ;main.c: 610:         TMR0 = 6;
  5727  0CBB  3006               	movlw	6
  5728  0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  5729  0CBD  1303               	bcf	3,6	;RP1=0, select bank0
  5730  0CBE  0081               	movwf	1	;volatile
  5731  0CBF                     i1l2648:	
  5732                           
  5733                           ;main.c: 613:     if (TMR1IF)
  5734  0CBF  1C0C               	btfss	12,0	;volatile
  5735  0CC0  2CC2               	goto	u256_21
  5736  0CC1  2CC3               	goto	u256_20
  5737  0CC2                     u256_21:	
  5738  0CC2  2CD8               	goto	i1l362
  5739  0CC3                     u256_20:	
  5740  0CC3                     i1l2650:	
  5741                           
  5742                           ;main.c: 614:     {;main.c: 615:         TMR1IF = 0;
  5743  0CC3  100C               	bcf	12,0	;volatile
  5744  0CC4                     i1l2652:	
  5745                           
  5746                           ;main.c: 616:         count_lux++;
  5747  0CC4  3001               	movlw	1
  5748  0CC5  00F6               	movwf	??_ISR
  5749  0CC6  0876               	movf	??_ISR,w
  5750  0CC7  07F4               	addwf	_count_lux,f
  5751  0CC8                     i1l2654:	
  5752                           
  5753                           ;main.c: 618:         if (count_lux >= 20)
  5754  0CC8  3014               	movlw	20
  5755  0CC9  0274               	subwf	_count_lux,w
  5756  0CCA  1C03               	skipc
  5757  0CCB  2CCD               	goto	u257_21
  5758  0CCC  2CCE               	goto	u257_20
  5759  0CCD                     u257_21:	
  5760  0CCD  2CD4               	goto	i1l2662
  5761  0CCE                     u257_20:	
  5762  0CCE                     i1l2656:	
  5763                           
  5764                           ;main.c: 619:         {;main.c: 620:             secondPassed.Bit = 1;
  5765  0CCE  1461               	bsf	_secondPassed,0
  5766  0CCF                     i1l2658:	
  5767                           
  5768                           ;main.c: 621:             count_lux = 0;
  5769  0CCF  01F4               	clrf	_count_lux
  5770  0CD0                     i1l2660:	
  5771                           
  5772                           ;main.c: 622:             timerReadFromGateway++;
  5773  0CD0  3001               	movlw	1
  5774  0CD1  00F6               	movwf	??_ISR
  5775  0CD2  0876               	movf	??_ISR,w
  5776  0CD3  07D8               	addwf	_timerReadFromGateway,f
  5777  0CD4                     i1l2662:	
  5778                           
  5779                           ;main.c: 625:         TMR1H = 60;
  5780  0CD4  303C               	movlw	60
  5781  0CD5  008F               	movwf	15	;volatile
  5782  0CD6                     i1l2664:	
  5783                           
  5784                           ;main.c: 626:         TMR1L = 176;
  5785  0CD6  30B0               	movlw	176
  5786  0CD7  008E               	movwf	14	;volatile
  5787  0CD8                     i1l362:	
  5788  0CD8  0879               	movf	??_ISR+3,w
  5789  0CD9  008A               	movwf	10
  5790  0CDA  0878               	movf	??_ISR+2,w
  5791  0CDB  0084               	movwf	4
  5792  0CDC  0E77               	swapf	(??_ISR+1)^(0+4294967168),w
  5793  0CDD  0083               	movwf	3
  5794  0CDE  0EFE               	swapf	btemp,f
  5795  0CDF  0E7E               	swapf	btemp,w
  5796  0CE0  0009               	retfie
  5797  0CE1                     __end_of_ISR:	
  5798                           
  5799                           	psect	intentry
  5800  0004                     __pintentry:	
  5801                           ;incstack = 0
  5802                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5803                           
  5804  0004                     interrupt_function:	
  5805  007E                     saved_w	set	btemp
  5806  0004  00FE               	movwf	btemp
  5807  0005  0E03               	swapf	3,w
  5808  0006  00F7               	movwf	??_ISR+1
  5809  0007  0804               	movf	4,w
  5810  0008  00F8               	movwf	??_ISR+2
  5811  0009  080A               	movf	10,w
  5812  000A  00F9               	movwf	??_ISR+3
  5813  000B  120A  158A  2C87   	ljmp	_ISR
  5814                           
  5815                           	psect	text20
  5816  0655                     __ptext20:	
  5817 ;; *************** function _conteggioVeicoli *****************
  5818 ;; Defined at:
  5819 ;;		line 498 in file "main.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;		None
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;		None
  5824 ;; Return value:  Size  Location     Type
  5825 ;;                  1    wreg      void 
  5826 ;; Registers used:
  5827 ;;		wreg, status,2, status,0
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5833 ;;      Params:         0       0       0       0       0
  5834 ;;      Locals:         0       0       0       0       0
  5835 ;;      Temps:          1       0       0       0       0
  5836 ;;      Totals:         1       0       0       0       0
  5837 ;;Total ram usage:        1 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; This function calls:
  5840 ;;		Nothing
  5841 ;; This function is called by:
  5842 ;;		_ISR
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           
  5847                           ;psect for function _conteggioVeicoli
  5848  0655                     _conteggioVeicoli:	
  5849  0655                     i1l2260:	
  5850                           ;incstack = 0
  5851                           ; Regs used in _conteggioVeicoli: [wreg+status,2+status,0]
  5852                           
  5853                           
  5854                           ;main.c: 501:     if (!PORTBbits.RB3)
  5855  0655  1283               	bcf	3,5	;RP0=0, select bank0
  5856  0656  1303               	bcf	3,6	;RP1=0, select bank0
  5857  0657  1986               	btfsc	6,3	;volatile
  5858  0658  2E5A               	goto	u195_21
  5859  0659  2E5B               	goto	u195_20
  5860  065A                     u195_21:	
  5861  065A  2E62               	goto	i1l328
  5862  065B                     u195_20:	
  5863  065B                     i1l2262:	
  5864                           
  5865                           ;main.c: 502:     {;main.c: 503:         count++;
  5866  065B  3001               	movlw	1
  5867  065C  07F0               	addwf	_count,f
  5868  065D  1803               	skipnc
  5869  065E  0AF1               	incf	_count+1,f
  5870  065F  3000               	movlw	0
  5871  0660  07F1               	addwf	_count+1,f
  5872                           
  5873                           ;main.c: 504:     }
  5874  0661  2E8F               	goto	i1l2278
  5875  0662                     i1l328:	
  5876                           ;main.c: 505:     else if (PORTBbits.RB3)
  5877                           
  5878  0662  1D86               	btfss	6,3	;volatile
  5879  0663  2E65               	goto	u196_21
  5880  0664  2E66               	goto	u196_20
  5881  0665                     u196_21:	
  5882  0665  2E8F               	goto	i1l2278
  5883  0666                     u196_20:	
  5884  0666                     i1l2264:	
  5885                           
  5886                           ;main.c: 506:     {;main.c: 507:         if (count >= 500)
  5887  0666  3001               	movlw	1
  5888  0667  0271               	subwf	_count+1,w
  5889  0668  30F4               	movlw	244
  5890  0669  1903               	skipnz
  5891  066A  0270               	subwf	_count,w
  5892  066B  1C03               	skipc
  5893  066C  2E6E               	goto	u197_21
  5894  066D  2E6F               	goto	u197_20
  5895  066E                     u197_21:	
  5896  066E  2E73               	goto	i1l2268
  5897  066F                     u197_20:	
  5898  066F                     i1l2266:	
  5899                           
  5900                           ;main.c: 508:         {;main.c: 509:             motorcycle[0]++;
  5901  066F  3001               	movlw	1
  5902  0670  00F5               	movwf	??_conteggioVeicoli
  5903  0671  0875               	movf	??_conteggioVeicoli,w
  5904  0672  07D4               	addwf	_motorcycle,f
  5905  0673                     i1l2268:	
  5906                           
  5907                           ;main.c: 511:         if (count >= 1500)
  5908  0673  3005               	movlw	5
  5909  0674  0271               	subwf	_count+1,w
  5910  0675  30DC               	movlw	220
  5911  0676  1903               	skipnz
  5912  0677  0270               	subwf	_count,w
  5913  0678  1C03               	skipc
  5914  0679  2E7B               	goto	u198_21
  5915  067A  2E7C               	goto	u198_20
  5916  067B                     u198_21:	
  5917  067B  2E80               	goto	i1l2272
  5918  067C                     u198_20:	
  5919  067C                     i1l2270:	
  5920                           
  5921                           ;main.c: 512:         {;main.c: 513:             car[0]++;
  5922  067C  3001               	movlw	1
  5923  067D  00F5               	movwf	??_conteggioVeicoli
  5924  067E  0875               	movf	??_conteggioVeicoli,w
  5925  067F  07D0               	addwf	_car,f
  5926  0680                     i1l2272:	
  5927                           
  5928                           ;main.c: 515:         if (count >= 3000)
  5929  0680  300B               	movlw	11
  5930  0681  0271               	subwf	_count+1,w
  5931  0682  30B8               	movlw	184
  5932  0683  1903               	skipnz
  5933  0684  0270               	subwf	_count,w
  5934  0685  1C03               	skipc
  5935  0686  2E88               	goto	u199_21
  5936  0687  2E89               	goto	u199_20
  5937  0688                     u199_21:	
  5938  0688  2E8D               	goto	i1l2276
  5939  0689                     u199_20:	
  5940  0689                     i1l2274:	
  5941                           
  5942                           ;main.c: 516:         {;main.c: 517:             truck[0]++;
  5943  0689  3001               	movlw	1
  5944  068A  00F5               	movwf	??_conteggioVeicoli
  5945  068B  0875               	movf	??_conteggioVeicoli,w
  5946  068C  07CC               	addwf	_truck,f
  5947  068D                     i1l2276:	
  5948                           
  5949                           ;main.c: 519:         count = 0;
  5950  068D  01F0               	clrf	_count
  5951  068E  01F1               	clrf	_count+1
  5952  068F                     i1l2278:	
  5953                           
  5954                           ;main.c: 522:     if (!PORTBbits.RB4)
  5955  068F  1A06               	btfsc	6,4	;volatile
  5956  0690  2E92               	goto	u200_21
  5957  0691  2E93               	goto	u200_20
  5958  0692                     u200_21:	
  5959  0692  2E9A               	goto	i1l334
  5960  0693                     u200_20:	
  5961  0693                     i1l2280:	
  5962                           
  5963                           ;main.c: 523:     {;main.c: 524:         count++;
  5964  0693  3001               	movlw	1
  5965  0694  07F0               	addwf	_count,f
  5966  0695  1803               	skipnc
  5967  0696  0AF1               	incf	_count+1,f
  5968  0697  3000               	movlw	0
  5969  0698  07F1               	addwf	_count+1,f
  5970                           
  5971                           ;main.c: 525:     }
  5972  0699  2EC7               	goto	i1l2296
  5973  069A                     i1l334:	
  5974                           ;main.c: 526:     else if (PORTBbits.RB4)
  5975                           
  5976  069A  1E06               	btfss	6,4	;volatile
  5977  069B  2E9D               	goto	u201_21
  5978  069C  2E9E               	goto	u201_20
  5979  069D                     u201_21:	
  5980  069D  2EC7               	goto	i1l2296
  5981  069E                     u201_20:	
  5982  069E                     i1l2282:	
  5983                           
  5984                           ;main.c: 527:     {;main.c: 528:         if (count >= 500)
  5985  069E  3001               	movlw	1
  5986  069F  0271               	subwf	_count+1,w
  5987  06A0  30F4               	movlw	244
  5988  06A1  1903               	skipnz
  5989  06A2  0270               	subwf	_count,w
  5990  06A3  1C03               	skipc
  5991  06A4  2EA6               	goto	u202_21
  5992  06A5  2EA7               	goto	u202_20
  5993  06A6                     u202_21:	
  5994  06A6  2EAB               	goto	i1l2286
  5995  06A7                     u202_20:	
  5996  06A7                     i1l2284:	
  5997                           
  5998                           ;main.c: 529:         {;main.c: 530:             motorcycle[1]++;
  5999  06A7  3001               	movlw	1
  6000  06A8  00F5               	movwf	??_conteggioVeicoli
  6001  06A9  0875               	movf	??_conteggioVeicoli,w
  6002  06AA  07D5               	addwf	_motorcycle+1,f
  6003  06AB                     i1l2286:	
  6004                           
  6005                           ;main.c: 532:         if (count >= 1500)
  6006  06AB  3005               	movlw	5
  6007  06AC  0271               	subwf	_count+1,w
  6008  06AD  30DC               	movlw	220
  6009  06AE  1903               	skipnz
  6010  06AF  0270               	subwf	_count,w
  6011  06B0  1C03               	skipc
  6012  06B1  2EB3               	goto	u203_21
  6013  06B2  2EB4               	goto	u203_20
  6014  06B3                     u203_21:	
  6015  06B3  2EB8               	goto	i1l2290
  6016  06B4                     u203_20:	
  6017  06B4                     i1l2288:	
  6018                           
  6019                           ;main.c: 533:         {;main.c: 534:             car[1]++;
  6020  06B4  3001               	movlw	1
  6021  06B5  00F5               	movwf	??_conteggioVeicoli
  6022  06B6  0875               	movf	??_conteggioVeicoli,w
  6023  06B7  07D1               	addwf	_car+1,f
  6024  06B8                     i1l2290:	
  6025                           
  6026                           ;main.c: 536:         if (count >= 3000)
  6027  06B8  300B               	movlw	11
  6028  06B9  0271               	subwf	_count+1,w
  6029  06BA  30B8               	movlw	184
  6030  06BB  1903               	skipnz
  6031  06BC  0270               	subwf	_count,w
  6032  06BD  1C03               	skipc
  6033  06BE  2EC0               	goto	u204_21
  6034  06BF  2EC1               	goto	u204_20
  6035  06C0                     u204_21:	
  6036  06C0  2EC5               	goto	i1l2294
  6037  06C1                     u204_20:	
  6038  06C1                     i1l2292:	
  6039                           
  6040                           ;main.c: 537:         {;main.c: 538:             truck[1]++;
  6041  06C1  3001               	movlw	1
  6042  06C2  00F5               	movwf	??_conteggioVeicoli
  6043  06C3  0875               	movf	??_conteggioVeicoli,w
  6044  06C4  07CD               	addwf	_truck+1,f
  6045  06C5                     i1l2294:	
  6046                           
  6047                           ;main.c: 540:         count = 0;
  6048  06C5  01F0               	clrf	_count
  6049  06C6  01F1               	clrf	_count+1
  6050  06C7                     i1l2296:	
  6051                           
  6052                           ;main.c: 543:     if (!PORTBbits.RB5)
  6053  06C7  1A86               	btfsc	6,5	;volatile
  6054  06C8  2ECA               	goto	u205_21
  6055  06C9  2ECB               	goto	u205_20
  6056  06CA                     u205_21:	
  6057  06CA  2ED2               	goto	i1l340
  6058  06CB                     u205_20:	
  6059  06CB                     i1l2298:	
  6060                           
  6061                           ;main.c: 544:     {;main.c: 545:         count++;
  6062  06CB  3001               	movlw	1
  6063  06CC  07F0               	addwf	_count,f
  6064  06CD  1803               	skipnc
  6065  06CE  0AF1               	incf	_count+1,f
  6066  06CF  3000               	movlw	0
  6067  06D0  07F1               	addwf	_count+1,f
  6068                           
  6069                           ;main.c: 546:     }
  6070  06D1  2EFF               	goto	i1l2314
  6071  06D2                     i1l340:	
  6072                           ;main.c: 547:     else if (PORTBbits.RB5)
  6073                           
  6074  06D2  1E86               	btfss	6,5	;volatile
  6075  06D3  2ED5               	goto	u206_21
  6076  06D4  2ED6               	goto	u206_20
  6077  06D5                     u206_21:	
  6078  06D5  2EFF               	goto	i1l2314
  6079  06D6                     u206_20:	
  6080  06D6                     i1l2300:	
  6081                           
  6082                           ;main.c: 548:     {;main.c: 549:         if (count >= 500)
  6083  06D6  3001               	movlw	1
  6084  06D7  0271               	subwf	_count+1,w
  6085  06D8  30F4               	movlw	244
  6086  06D9  1903               	skipnz
  6087  06DA  0270               	subwf	_count,w
  6088  06DB  1C03               	skipc
  6089  06DC  2EDE               	goto	u207_21
  6090  06DD  2EDF               	goto	u207_20
  6091  06DE                     u207_21:	
  6092  06DE  2EE3               	goto	i1l2304
  6093  06DF                     u207_20:	
  6094  06DF                     i1l2302:	
  6095                           
  6096                           ;main.c: 550:         {;main.c: 551:             motorcycle[2]++;
  6097  06DF  3001               	movlw	1
  6098  06E0  00F5               	movwf	??_conteggioVeicoli
  6099  06E1  0875               	movf	??_conteggioVeicoli,w
  6100  06E2  07D6               	addwf	_motorcycle+2,f
  6101  06E3                     i1l2304:	
  6102                           
  6103                           ;main.c: 553:         if (count >= 1500)
  6104  06E3  3005               	movlw	5
  6105  06E4  0271               	subwf	_count+1,w
  6106  06E5  30DC               	movlw	220
  6107  06E6  1903               	skipnz
  6108  06E7  0270               	subwf	_count,w
  6109  06E8  1C03               	skipc
  6110  06E9  2EEB               	goto	u208_21
  6111  06EA  2EEC               	goto	u208_20
  6112  06EB                     u208_21:	
  6113  06EB  2EF0               	goto	i1l2308
  6114  06EC                     u208_20:	
  6115  06EC                     i1l2306:	
  6116                           
  6117                           ;main.c: 554:         {;main.c: 555:             car[2]++;
  6118  06EC  3001               	movlw	1
  6119  06ED  00F5               	movwf	??_conteggioVeicoli
  6120  06EE  0875               	movf	??_conteggioVeicoli,w
  6121  06EF  07D2               	addwf	_car+2,f
  6122  06F0                     i1l2308:	
  6123                           
  6124                           ;main.c: 557:         if (count >= 3000)
  6125  06F0  300B               	movlw	11
  6126  06F1  0271               	subwf	_count+1,w
  6127  06F2  30B8               	movlw	184
  6128  06F3  1903               	skipnz
  6129  06F4  0270               	subwf	_count,w
  6130  06F5  1C03               	skipc
  6131  06F6  2EF8               	goto	u209_21
  6132  06F7  2EF9               	goto	u209_20
  6133  06F8                     u209_21:	
  6134  06F8  2EFD               	goto	i1l2312
  6135  06F9                     u209_20:	
  6136  06F9                     i1l2310:	
  6137                           
  6138                           ;main.c: 558:         {;main.c: 559:             truck[2]++;
  6139  06F9  3001               	movlw	1
  6140  06FA  00F5               	movwf	??_conteggioVeicoli
  6141  06FB  0875               	movf	??_conteggioVeicoli,w
  6142  06FC  07CE               	addwf	_truck+2,f
  6143  06FD                     i1l2312:	
  6144                           
  6145                           ;main.c: 561:         count = 0;
  6146  06FD  01F0               	clrf	_count
  6147  06FE  01F1               	clrf	_count+1
  6148  06FF                     i1l2314:	
  6149                           
  6150                           ;main.c: 564:     if (!PORTAbits.RA5)
  6151  06FF  1A85               	btfsc	5,5	;volatile
  6152  0700  2F02               	goto	u210_21
  6153  0701  2F03               	goto	u210_20
  6154  0702                     u210_21:	
  6155  0702  2F0A               	goto	i1l346
  6156  0703                     u210_20:	
  6157  0703                     i1l2316:	
  6158                           
  6159                           ;main.c: 565:     {;main.c: 566:         count++;
  6160  0703  3001               	movlw	1
  6161  0704  07F0               	addwf	_count,f
  6162  0705  1803               	skipnc
  6163  0706  0AF1               	incf	_count+1,f
  6164  0707  3000               	movlw	0
  6165  0708  07F1               	addwf	_count+1,f
  6166                           
  6167                           ;main.c: 567:     }
  6168  0709  2F37               	goto	i1l352
  6169  070A                     i1l346:	
  6170                           ;main.c: 568:     else if (PORTAbits.RA5)
  6171                           
  6172  070A  1E85               	btfss	5,5	;volatile
  6173  070B  2F0D               	goto	u211_21
  6174  070C  2F0E               	goto	u211_20
  6175  070D                     u211_21:	
  6176  070D  2F37               	goto	i1l352
  6177  070E                     u211_20:	
  6178  070E                     i1l2318:	
  6179                           
  6180                           ;main.c: 569:     {;main.c: 570:         if (count >= 500)
  6181  070E  3001               	movlw	1
  6182  070F  0271               	subwf	_count+1,w
  6183  0710  30F4               	movlw	244
  6184  0711  1903               	skipnz
  6185  0712  0270               	subwf	_count,w
  6186  0713  1C03               	skipc
  6187  0714  2F16               	goto	u212_21
  6188  0715  2F17               	goto	u212_20
  6189  0716                     u212_21:	
  6190  0716  2F1B               	goto	i1l2322
  6191  0717                     u212_20:	
  6192  0717                     i1l2320:	
  6193                           
  6194                           ;main.c: 571:         {;main.c: 572:             motorcycle[3]++;
  6195  0717  3001               	movlw	1
  6196  0718  00F5               	movwf	??_conteggioVeicoli
  6197  0719  0875               	movf	??_conteggioVeicoli,w
  6198  071A  07D7               	addwf	_motorcycle+3,f
  6199  071B                     i1l2322:	
  6200                           
  6201                           ;main.c: 574:         if (count >= 1500)
  6202  071B  3005               	movlw	5
  6203  071C  0271               	subwf	_count+1,w
  6204  071D  30DC               	movlw	220
  6205  071E  1903               	skipnz
  6206  071F  0270               	subwf	_count,w
  6207  0720  1C03               	skipc
  6208  0721  2F23               	goto	u213_21
  6209  0722  2F24               	goto	u213_20
  6210  0723                     u213_21:	
  6211  0723  2F28               	goto	i1l2326
  6212  0724                     u213_20:	
  6213  0724                     i1l2324:	
  6214                           
  6215                           ;main.c: 575:         {;main.c: 576:             car[3]++;
  6216  0724  3001               	movlw	1
  6217  0725  00F5               	movwf	??_conteggioVeicoli
  6218  0726  0875               	movf	??_conteggioVeicoli,w
  6219  0727  07D3               	addwf	_car+3,f
  6220  0728                     i1l2326:	
  6221                           
  6222                           ;main.c: 578:         if (count >= 3000)
  6223  0728  300B               	movlw	11
  6224  0729  0271               	subwf	_count+1,w
  6225  072A  30B8               	movlw	184
  6226  072B  1903               	skipnz
  6227  072C  0270               	subwf	_count,w
  6228  072D  1C03               	skipc
  6229  072E  2F30               	goto	u214_21
  6230  072F  2F31               	goto	u214_20
  6231  0730                     u214_21:	
  6232  0730  2F35               	goto	i1l2330
  6233  0731                     u214_20:	
  6234  0731                     i1l2328:	
  6235                           
  6236                           ;main.c: 579:         {;main.c: 580:             truck[3]++;
  6237  0731  3001               	movlw	1
  6238  0732  00F5               	movwf	??_conteggioVeicoli
  6239  0733  0875               	movf	??_conteggioVeicoli,w
  6240  0734  07CF               	addwf	_truck+3,f
  6241  0735                     i1l2330:	
  6242                           
  6243                           ;main.c: 582:         count = 0;
  6244  0735  01F0               	clrf	_count
  6245  0736  01F1               	clrf	_count+1
  6246  0737                     i1l352:	
  6247  0737  0008               	return
  6248  0738                     __end_of_conteggioVeicoli:	
  6249                           
  6250                           	psect	text21
  6251  0AA6                     __ptext21:	
  6252 ;; *************** function _UART_Read *****************
  6253 ;; Defined at:
  6254 ;;		line 423 in file "main.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;		None
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;		None
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  1    wreg      unsigned char 
  6261 ;; Registers used:
  6262 ;;		wreg
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6268 ;;      Params:         0       0       0       0       0
  6269 ;;      Locals:         0       0       0       0       0
  6270 ;;      Temps:          0       0       0       0       0
  6271 ;;      Totals:         0       0       0       0       0
  6272 ;;Total ram usage:        0 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_ISR
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           
  6282                           ;psect for function _UART_Read
  6283  0AA6                     _UART_Read:	
  6284  0AA6                     i1l2254:	
  6285                           ;incstack = 0
  6286                           ; Regs used in _UART_Read: [wreg]
  6287                           
  6288  0AA6                     i1l296:	
  6289                           ;main.c: 426:         ;
  6290                           
  6291                           
  6292                           ;main.c: 425:     while (!RCIF)
  6293  0AA6  1283               	bcf	3,5	;RP0=0, select bank0
  6294  0AA7  1303               	bcf	3,6	;RP1=0, select bank0
  6295  0AA8  1E8C               	btfss	12,5	;volatile
  6296  0AA9  2AAB               	goto	u194_21
  6297  0AAA  2AAC               	goto	u194_20
  6298  0AAB                     u194_21:	
  6299  0AAB  2AA6               	goto	i1l296
  6300  0AAC                     u194_20:	
  6301  0AAC                     i1l298:	
  6302                           
  6303                           ;main.c: 427:     RCIF = 0;
  6304  0AAC  128C               	bcf	12,5	;volatile
  6305  0AAD                     i1l2256:	
  6306                           
  6307                           ;main.c: 428:     return RCREG;
  6308  0AAD  081A               	movf	26,w	;volatile
  6309  0AAE                     i1l299:	
  6310  0AAE  0008               	return
  6311  0AAF                     __end_of_UART_Read:	
  6312  007E                     btemp	set	126	;btemp
  6313  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        33
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     44      69
    BANK1            80      0      71
    BANK3            96      0      96
    BANK2            96     20      92

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   18577
                                             28 BANK0     16    16      0
                                              0 BANK2     20    20      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                          _bitParita
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    4064
                                             20 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1135
                                              0 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4368
                                             16 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1636
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1113
                                              4 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     276
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             15 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3    1204
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    14     8      6     716
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              8     6      2     232
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             16 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              1 COMMON     4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   _bitParita
     _bitChange
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     14      5C      11       95.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     152      12        0.0%
ABS                  0      0     152       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Jun 22 14:48:32 2020

                        pc 0002             ___bmul@product 0022                __CFG_CP$OFF 0000  
                       l83 0C0C                         l98 0BD7               ___awdiv@sign 002D  
                       _s0 00BB                         _s1 00AF                         _s2 01E4  
                       _s3 01D8                         _s4 01CC                         _s5 01C0  
                       _s6 01B4                         _s7 01A8                         _s8 019C  
                       _s9 0190                         fsr 0004        ___wmul@multiplicand 0022  
           _GetDigits$1151 0035                __CFG_LVP$ON 0000                        l110 0FBE  
                      l111 0FCA                        l113 0FFF                        l105 0F6E  
                      l106 0F7A                        l220 0161                        l212 00C6  
                      l125 07D7                        l310 0E0F                        l214 009B  
                      l119 0786                        l128 07FF                        l304 0BA6  
                      l313 0AF4                        l225 0258                        l307 0C86  
                      l325 0E99                        l272 0ACC                        l601 0DA4  
                      l513 0EAE                        l281 0C46                        l249 03C4  
                      l450 0B78                        l275 0B45                        l523 0F36  
                      l284 0AB2                        l278 0B51                        l614 0D3B  
                      l286 0AB6                        l287 0AB9                        l448 0B60  
                      l474 0B0B               __CFG_CPD$OFF 0000                        _ISR 0C87  
                      _s10 014C                        _s11 0140                        _s12 0134  
                      _s13 0128                        _s14 011C                        _s15 0110  
                      _car 0050                        _map 0BD8                        fsr0 0004  
                      indf 0000               ___awmod@sign 0026               __CFG_FOSC$HS 0000  
                     ?_ISR 0075                main@colorId 0159                       l3000 0F3A  
                     l3020 0F76                       l3012 0F45                       l3110 0C6F  
                     l3030 0F91                       l3022 0F80                       l3014 0F5B  
                     l3006 0F41                       l3120 0DAB                       l3112 0C7A  
                     l3104 0C4A                       l3040 0FB1                       l3024 0F8D  
                     l3016 0F61                       l3200 0068                       l3122 0DC1  
                     l3114 0C82                       l3106 0C56                       l3130 0AF2  
                     l3050 0FE4                       l3042 0FC4                       l3018 0F74  
                     l3210 008F                       l3202 0073                       l3124 0DE6  
                     l3108 0C5E                       l3060 0C0D                       l3044 0FC6  
                     l3036 0F95                       l3052 0ABA                       l3140 0B90  
                     l3132 0B7C                       l3300 025D                       l3220 0095  
                     l3212 0092                       l3204 0086                       l3150 0B3B  
                     l3126 0DFC                       l3118 0DA5                       l3070 0E10  
                     l3062 0C15                       l3046 0FD0                       l3038 0FAB  
                     l3054 0ABE                       l3142 0B96                       l3134 0B8F  
                     l3310 02A6                       l3302 0261                       l3230 00AD  
                     l3214 0092                       l3206 008A                       l3152 0B42  
                     l3128 0AE3                       l3064 0C43                       l3160 0AF9  
                     l3048 0FDD                       l3056 0AC1                       l3144 0B9C  
                     l3400 0566                       l3320 0326                       l3312 02AE  
                     l3304 0269                       l3240 00CC                       l3224 009E  
                     l3216 0092                       l3208 008C                       l3154 0B49  
                     l3082 0E15                       l3090 0E72                       l3066 0C44  
                     l3162 0AFD                       l3058 0AC5                       l3146 0BA0  
                     l3410 063A                       l3402 0573                       l3330 034E  
                     l3322 032B                       l3314 02E1                       l3306 026A  
                     l3250 00DD                       l3242 00CE                       l3226 00A4  
                     l3234 00B1                       l3218 0092                       l3148 0B2F  
                     l3084 0E34                       l3092 0E85                       l3076 0E13  
                     l3068 0C45                       l3164 0B01                       l3412 063D  
                     l3404 0607                       l3332 0363                       l3324 0330  
                     l3340 03A2                       l3316 02E4                       l3308 02A3  
                     l3260 0111                       l3244 00D2                       l3236 00CA  
                     l3228 00A7                       l3094 0E89                       l3086 0E53  
                     l3166 0B03                       l3158 0AF8                       l3406 0618  
                     l3350 03CC                       l3342 03BA                       l3334 0378  
                     l3326 0344                       l3318 031E                       l3270 0167  
                     l3262 011C                       l3254 00E4                       l3246 00D4  
                     l3238 00CB                       l3190 0059                       l3096 0E8F  
                     l3168 0B0A                       l3416 0644                       l3408 0629  
                     l3360 03EC                       l3352 03CD                       l3344 03BE  
                     l3328 0349                       l3272 0168                       l3264 012E  
                     l3256 00F9                       l3248 00DA                       l3192 005B  
                     l3184 0050                       l3098 0E93                       l2810 0773  
                     l2802 075B                       l3418 0649                       l3362 0433  
                     l3370 0508                       l3354 03DA                       l3346 03C2  
                     l3338 038C                       l3290 0220                       l3282 0177  
                     l3266 015A                       l3258 0105                       l3194 005D  
                     l3186 0056                       l2900 0F0E                       l2820 0795  
                     l2812 0779                       l3364 047A                       l3372 051D  
                     l3356 03DE                       l3348 03C8                       l3284 01CC  
                     l3276 016F                       l3196 0061                       l3188 0057  
                     l2910 0F2E                       l2902 0F0F                       l2830 07AC  
                     l2822 079B                       l2814 078C                       l3390 0551  
                     l3382 0538                       l3366 04C1                       l3286 0219  
                     l3278 0170                       l3294 0229                       l3198 0063  
                     l2920 0D48                       l2904 0F18                       l2840 07CA  
                     l2824 07A8                       l2816 0794                       l2808 075F  
                     l3384 0547                       l3376 0526                       l3560 0394  
                     l3296 0230                       l2930 0D59                       l2922 0D4A  
                     l2914 0D3C                       l2906 0F1E                       l2850 07F1  
                     l2842 07DD                       l3394 0558                       l3378 052A  
                     l3562 050F                       l3298 0253                       l2940 0D71  
                     l2932 0D5F                       l2924 0D4E                       l2916 0D3F  
                     l3564 0E7A                       l2908 0F23                       l2860 0B52  
                     l2852 07FE                       l2844 07EA                       l2836 07B0  
                     l3396 055D                       l3388 054E                       l2942 0D82  
                     l2934 0D62                       l2950 0D96                       l2926 0D53  
                     l2918 0D43                       l2870 0B74                       l2862 0B56  
                     l2838 07C4                       l2790 074A                       l3558 00BE  
                     ?_map 0030                       l2952 0D9B                       l2944 0D88  
                     l2936 0D69                       l2928 0D57                       l2960 0CE4  
                     l2880 0EB2                       l2784 0BC8                       l2776 0BAA  
                     l2864 0B5A                       l2848 07EB                       l2792 0757  
                     l2856 0AB2                       l2954 0DA0                       l2946 0D89  
                     l2938 0D6D                       l2970 0CF8                       l2962 0CE8  
                     l2890 0ED4                       l2882 0EBD                       l2874 0E9A  
                     l2778 0BB9                       l2866 0B67                       l2794 0758  
                     l2858 0AB7                       l2948 0D90                       l2980 0D10  
                     l2972 0CFE                       l2964 0CED                       l2892 0EE1  
                     l2884 0EC1                       l2876 0E9D                       l2868 0B6E  
                     l2796 0759                       l2788 073B                       l2990 0D32  
                     l2982 0D1A                       l2974 0D01                       l2966 0CEF  
                     l2958 0CE1                       l2894 0EE5                       l2886 0EC9  
                     l2878 0EA1                       l2992 0D37                       l2984 0D20  
                     l2976 0D08                       l2968 0CF3                       l2896 0EEE  
                     l2888 0ED1                       l2986 0D27                       l2978 0D0C  
                     l2898 0F00                       l2988 0D2D                       l2996 0BD8  
                     u3010 0D10                       u3011 0D0F                       u3020 0D1A  
                     u3021 0D19                       u3005 0D02                       u3110 0FBE  
                     u3111 0FBD                       u3040 0D2D                       u3120 0FC4  
                     u3104 0FA3                       u3041 0D2C                       u3025 0D16  
                     u3121 0FC3                       u3105 0FA1                       u3210 0B49  
                     u3050 0D32                       u3130 0FDD                       u3211 0B48  
                     u3051 0D31                       u3035 0D21                       u3131 0FDC  
                     u3115 0FBA                       u3220 0AFD                       u3140 0FE4  
                     u3300 00E3                       u3205 0B32                       u3221 0AFC  
                     u3141 0FE3                       u3301 00E2                       u3150 0C24  
                     u3230 0B0A                       u3070 0F6E                       u3231 0B09  
                     u3135 0FD9                       u3071 0F6D                       u3160 0E8F  
                     u3080 0F74                       u3064 0F53                       u3400 02A3  
                     u3320 0167                       u3161 0E8E                       u3081 0F73  
                     u3065 0F51                       u3401 02A2                       u3321 0166  
                     u3170 0E99                       u3090 0F8D                       u3410 02AE  
                     u3330 016E                       u3250 009A                       u3171 0E98  
                     u3155 0C1F                       u3091 0F8C                       u3075 0F6A  
                     u3411 02AD                       u3331 016D                       u3315 0121  
                     u3251 0099                       u2604 0BBF                       u3500 03CC  
                     u3420 02E1                       u3340 0176                       u3260 00A4  
                     u2605 0BBD                       u3501 03CB                       u3421 02E0  
                     u3341 0175                       u3261 00A3                       u2614 0BCE  
                     u2710 07FE                       u3190 0BA6                       u3510 03DA  
                     u3430 0326                       u3350 01CC                       u3270 00AD  
                     u2615 0BCC                       u3095 0F89                       u2711 07FD  
                     u3191 0BA5                       u3511 03D9                       u3431 0325  
                     u3351 01CB                       u3271 00AC                       u2704 07E3  
                     u2640 0786                       u2720 0AB6                       u3520 03EB  
                     u3440 0330                       u3360 0253                       u3280 00CA  
                     u3185 0C64                       u2705 07E1                       u2641 0785  
                     u2625 074D                       u2721 0AB5                       u3521 03EA  
                     u3441 032F                       u3425 02DD                       u3361 0252  
                     u3281 00C9                       u2810 0EE5                       u2730 0B5A  
                     u2650 078C                       u2634 076B                       u3530 0537  
                     u3450 0349                       u3370 0258                       u3290 00D2  
                     u2811 0EE4                       u2731 0B59                       u2715 07FA  
                     u2651 078B                       u2635 0769                       u3531 0536  
                     u3451 0348                       u3371 0257                       u3355 01C8  
                     u3291 00D1                       u2660 07A8                       u3540 0557  
                     u3460 034E                       u3380 025D                       u2805 0ED6  
                     u2661 07A7                       u2645 0782                       u3541 0556  
                     u3525 03E7                       u3461 034D                       u3381 025C  
                     u2910 0D71                       u2830 0F00                       u2590 0BB9  
                     u3550 0573                       u3470 03BE                       u3390 0261  
                     u2911 0D70                       u2831 0EFF                       u2591 0BB8  
                     u3551 0572                       u3535 0533                       u3471 03BD  
                     u3391 0260                       u2584 0BB0                       u2760 0B74  
                     u2680 07D7                       u3560 0643                       u3480 03C2  
                     u2905 0D63                       u2825 0EE7                       u2585 0BAE  
                     u2761 0B73                       u2745 0B61                       u2681 07D6  
                     u2665 07A4                       u3561 0642                       u3481 03C1  
                     u2930 0D82                       u2850 0F1E                       u2770 0EA1  
                     u2690 07DD                       u2674 07BC                       u3490 03C8  
                     u2931 0D81                       u2851 0F1D                       u2835 0EFC  
                     u2771 0EA0                       u2755 0B68                       u2691 07DC  
                     u2675 07BA                       u3491 03C7                       u2860 0F23  
                     u2780 0EB2                       u2925 0D72                       u2861 0F22  
                     u2845 0F10                       u2781 0EB1                       u2685 07D3  
                     u2950 0D96                       u2870 0D43                       u2790 0ED1  
                     u2951 0D95                       u2935 0D7E                       u2871 0D42  
                     u2791 0ED0                       u2960 0D9B                       u2880 0D4E  
                     u2961 0D9A                       u2945 0D8A                       u2881 0D4D  
                     u2890 0D5F                       u2970 0CE8                       u2891 0D5E  
                     u2971 0CE7                       u3587 0AC9                       u2980 0CF3  
                     _RCIF 0065                       u3597 0B3F                       u2981 0CF2  
                     u2990 0CFE                       u2991 0CFD                       _TMR0 0001  
                     _TXIF 0064               __CFG_WRT$OFF 0000                       _disp 005B  
                     _main 0050                       _time 0072                       map@x 0030  
                     btemp 007E           __end_of_ADC_Read 0B52              __CFG_BOREN$ON 0000  
              main@umidita 015B                       start 000E            __end_of_GetTime 0C87  
        ___bmul@multiplier 0023               main@endCiclo 015D                      ??_ISR 0076  
__size_of_conteggioVeicoli 00E3                      ??_map 003A            __end_of___aldiv 0F37  
                    ?_main 0075            __end_of___awdiv 0DA5              __CFG_WDTE$OFF 0000  
          __end_of___awmod 0D3C            ___awdiv@divisor 0027                      _T1CON 0010  
     bitParita@errorColumn 002A                      i1l340 06D2                      i1l334 069A  
                    i1l352 0737                      i1l328 0662                      i1l346 070A  
                    i1l362 0CD8                      i1l296 0AA6                      i1l298 0AAC  
                    i1l299 0AAE            ___awdiv@counter 002C                      _RCREG 001A  
                    _TMR1H 000F                      _TMR1L 000E                      _SPBRG 0099  
                    _PORTD 0008                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087                      _TRISD 0088                      _TRISE 0089  
                    _TXREG 0019              __CFG_PWRTE$ON 0000         __size_of_UART_Init 003A  
       __size_of_UART_Read 0009            __end_of_display 0811                      _count 0070  
                    _unita 005F                      main@i 0163                      main@l 0168  
                    _truck 004C                      pclath 000A                      status 0003  
                    wtemp0 007E            __initialization 0011               __end_of_main 0655  
       __size_of_GetDigits 006B                     ??_main 003C          SetDefaultTimers@i 002D  
        SetDefaultTimers@l 002C         __size_of_BuildByte 00C8                 _SetDisplay 0AE0  
            bitChange@dato 0023                     _ADCON0 001F                     _ADCON1 009F  
                   _ADRESH 001E                     _ADRESL 009E           ___awdiv@dividend 0029  
                   i1l2300 06D6                     i1l2310 06F9                     i1l2302 06DF  
                   i1l2320 0717                     i1l2312 06FD                     i1l2304 06E3  
                   u200_20 0693                     u200_21 0692                     i1l2330 0735  
                   i1l2322 071B                     i1l2306 06EC                     i1l2314 06FF  
                   i1l2324 0724                     i1l2316 0703                     i1l2308 06F0  
                   i1l2260 0655                     i1l2254 0AA6                     i1l2326 0728  
                   i1l2318 070E                     i1l2270 067C                     i1l2262 065B  
                   i1l2256 0AAD                     i1l2328 0731                     u201_20 069E  
                   i1l2280 0693                     i1l2272 0680                     i1l2264 0666  
                   u201_21 069D                     i1l2290 06B8                     i1l2282 069E  
                   i1l2274 0689                     i1l2266 066F                     i1l2292 06C1  
                   i1l2284 06A7                     i1l2276 068D                     i1l2268 0673  
                   i1l2294 06C5                     i1l2286 06AB                     i1l2278 068F  
                   i1l2630 0C96                     i1l2622 0C87                     u210_20 0703  
                   i1l2288 06B4                     u202_20 06A7                     i1l2296 06C7  
                   i1l2632 0C9A                     i1l2640 0CB1                     i1l2624 0C8D  
                   u210_21 0702                     u202_21 06A6                     i1l2298 06CB  
                   i1l2650 0CC3                     i1l2642 0CB5                     i1l2634 0C9E  
                   i1l2626 0C91                     i1l2660 0CD0                     i1l2652 0CC4  
                   i1l2644 0CB6                     i1l2636 0CAC                     i1l2628 0C94  
                   i1l2662 0CD4                     i1l2654 0CC8                     i1l2646 0CBB  
                   i1l2638 0CB0                     u211_20 070E                     u203_20 06B4  
                   i1l2664 0CD6                     i1l2656 0CCE                     i1l2648 0CBF  
                   u211_21 070D                     u203_21 06B3                     i1l2658 0CCF  
                   u212_20 0717                     u204_20 06C1                     u212_21 0716  
                   u204_21 06C0                     u213_20 0724                     u205_20 06CB  
                   u213_21 0723                     u205_21 06CA                     u214_20 0731  
                   u206_20 06D6                     u214_21 0730                     u206_21 06D5  
                   u207_20 06DF                     u207_21 06DE                     u208_20 06EC  
                   u208_21 06EB                     u209_20 06F9                     _INTCON 000B  
                   u209_21 06F8                     u251_20 0C8D                     u251_21 0C8C  
                   u252_20 0C91                     u252_21 0C90                     u253_20 0C9A  
                   u253_21 0C99                     u254_20 0C9E                     u254_21 0C9D  
                   u255_20 0CB5                     u255_21 0CB4                     u256_20 0CC3  
                   u256_21 0CC2                     u257_20 0CCE                     u257_21 0CCD  
                   u194_20 0AAC                     u194_21 0AAB                     u195_20 065B  
                   u195_21 065A                     u196_20 0666                     u196_21 0665  
                   u197_20 066F                     u197_21 066E                     u198_20 067C  
                   u198_21 067B                     u199_20 0689                     u199_21 0688  
                   _TMR0IF 005A                     _TMR1IF 0060                  ??_GetTime 0022  
             ?_UART_TxChar 0075          __end_of_UART_Init 0C47          __end_of_UART_Read 0AAF  
                   ___bmul 0AF5                  ??___aldiv 0028            GetTime@shortInt 0025  
                   ___wmul 0B52                  ??___awdiv 002B                     _decine 005E  
                ??___awmod 0024           __end_of_init_ADC 0ACD                     _cycled 0060  
         ___awdiv@quotient 002E            ___awmod@divisor 0020            ___awmod@counter 0025  
         __end_of_sendByte 0BA7              main@pressione 015C                  ?_ADC_Read 0020  
                   saved_w 007E    __end_of__initialization 004C          __end_of_GetDigits 0E10  
     bitParita@sommaColumn 0029  __size_of_SetDefaultTimers 008A        ___bmul@multiplicand 0020  
           __pcstackCOMMON 0075          __end_of_BuildByte 0800               __pidataBANK0 0003  
             __pidataBANK1 0B0C         __size_of_bitChange 0031           _conteggioVeicoli 0655  
       __size_of_bitParita 00C9                 ??_ADC_Read 0022     SetDefaultTimers@giallo 0024  
              ?_SetDisplay 0020              GetDigits@Time 0030       _dataFromGatewayIndex 0059  
     _timerReadFromGateway 0058                 __pbssBANK0 004C                 __pbssBANK1 00A0  
               __pbssBANK2 0110                 __pbssBANK3 0190                 __pmaintext 0050  
                  ?___bmul 0020                    ?___wmul 0020              sendByte@byte0 0039  
            sendByte@byte1 0034                 __pintentry 0004          __end_of_bitChange 0BD8  
               __stringtab 0800          __end_of_bitParita 1000                  ?_init_ADC 0075  
                  _GetTime 0C47            BuildByte@valore 0021            BuildByte@txByte 0025  
                ?_sendByte 0034                 bitChange@n 0020                 _n_semafori 0064  
     __size_of_UART_TxChar 000B                    ___aldiv 0E9A            __size_of___bmul 0017  
                  ___awdiv 0D3C                    ___awmod 0CE1        __size_of_SetDisplay 0015  
          __size_of___wmul 0027                    __ptext1 0B79                    __ptext2 0AAF  
                  __ptext3 0738                    __ptext4 0BD8                    __ptext5 0B52  
                  __ptext6 0ABA                    __ptext7 0F37                    __ptext8 0BA7  
                  __ptext9 0AF5             main@semaforoId 0158                    _comando 0073  
                  _display 0806               __size_of_ISR 005A                 bitParita@i 0032  
               bitParita@y 002D               __size_of_map 0035           ___awmod@dividend 0022  
         ___aldiv@dividend 0024       BuildByte@sommaColumn 002B                    clrloop0 0A9F  
                  main@tmp 015E       end_of_initialization 004C                 ??_init_ADC 0020  
           main@lux_select 0161                 ??_sendByte 0036           _SetDefaultTimers 0E10  
                _RCSTAbits 0018           ___aldiv@quotient 002B                 _motorcycle 0054  
                _UART_Init 0C0D                  _UART_Read 0AA6                  _PORTAbits 0005  
                _PORTBbits 0006               SetDisplay@d1 0023               SetDisplay@d2 0020  
             SetDisplay@d3 0021                  _TRISCbits 0087          __size_of_ADC_Read 0026  
 __end_of_conteggioVeicoli 0738                 map@out_max 0038          bitParita@errorRow 002C  
               map@out_min 0036                  _TXSTAbits 0098                  _GetDigits 0DA5  
        bitParita@sommaRow 0028             __end_of___bmul 0B0C             __end_of___wmul 0B79  
               ?_UART_Init 002F                 ?_UART_Read 0075                  _BuildByte 0738  
        BuildByte@sommaRow 002A        start_initialization 0011                __end_of_ISR 0CE1  
             ??_SetDisplay 0023                __end_of_map 0C0D                 ?_GetDigits 0030  
                 ??___bmul 0021             ADC_Read@canale 0023                   ??___wmul 0024  
               init_fetch0 0ACD                __pdataBANK0 0064                __pdataBANK1 00C7  
       __end_of_SetDisplay 0AF5                 ?_BuildByte 0020                __pbssCOMMON 0070  
                ___latbits 0002              __pcstackBANK0 0020              __pcstackBANK2 0158  
                 ?_GetTime 0020                  _bitChange 0BA7      SetDefaultTimers@verde 0022  
    SetDefaultTimers@rosso 0020          __size_of_init_ADC 0013                  _bitParita 0F37  
                _centinaia 005D          __size_of_sendByte 002E                   ?___aldiv 0020  
                 ?___awdiv 0027                   ?___awmod 0020                ??_UART_Init 0031  
              ??_UART_Read 0075             BuildByte@i_342 0032                  __pstrings 0800  
           BuildByte@y_343 002E             sendByte@valore 0035             sendByte@txByte 003A  
           BuildByte@byte0 0024             BuildByte@byte1 0020   __end_of_SetDefaultTimers 0E9A  
                 _ADC_Read 0B2C                  _count_lux 0074                  _countdown 005A  
            UART_TxChar@ch 0020            ___aldiv@divisor 0020          interrupt_function 0004  
          ___aldiv@counter 0029                 ?_bitChange 0020             ___wmul@product 0024  
                clear_ram0 0A9E                   _PIE1bits 008C              ??_UART_TxChar 0020  
               ?_bitParita 0075                ??_GetDigits 0032                   _GO_nDONE 00FA  
        UART_Init@baudrate 002F                ??_BuildByte 0022                  map@in_max 0034  
                map@in_min 0032                __stringbase 0805                  main@i_444 0169  
                main@i_445 016A                  main@i_446 0166                  main@i_447 0164  
                main@i_449 0165          ___wmul@multiplier 0020                  main@index 0162  
             GetTime@index 0024          ?_conteggioVeicoli 0075               _secondPassed 0061  
       ??_conteggioVeicoli 0075           __size_of_GetTime 0040                   _Semafori 00C7  
           bitParita@i_330 0034                _readGateway 0062             bitParita@y_331 002F  
         __size_of___aldiv 009D        __end_of_UART_TxChar 0ABA           __size_of___awdiv 0069  
         __size_of___awmod 005B             bitParita@error 002B         __end_of__stringtab 0806  
                sendByte@i 003B                   __ptext10 0C0D                   __ptext11 0E9A  
                 __ptext20 0655                   __ptext12 0AE0                   __ptext21 0AA6  
                 __ptext13 0E10                   __ptext14 0C47                   __ptext15 0DA5  
                 __ptext16 0CE1                   __ptext17 0D3C                   __ptext18 0B2C  
                 __ptext19 0C87                   _init_ADC 0ABA                bitParita@rx 0031  
              ??_bitChange 0021              __size_of_main 0605            _dataFromGateway 00A0  
                 _old_disp 005C                ??_bitParita 0024                   _sendByte 0B79  
                 main@temp 015A                   main@time 015F                GetTime@time 0026  
               _INTCONbits 000B                   init_ram0 0AD1                   intlevel1 0000  
          _readGatewayDone 0063                  stringcode 0800                _UART_TxChar 0AAF  
               _OPTION_REG 0081            SetDisplay@value 0022                   stringdir 0800  
                 stringtab 0800          ?_SetDefaultTimers 0020               ___aldiv@sign 002A  
       ??_SetDefaultTimers 0026                 BuildByte@i 0030                 BuildByte@y 002C  
