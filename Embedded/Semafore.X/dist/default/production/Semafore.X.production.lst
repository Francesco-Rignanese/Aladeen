

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Jun 20 15:11:28 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 2.10
    42                           ; Generated 31/07/2019 GMT
    43                           ; 
    44                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F877A Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  0088                     	;# 
   115  0089                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  0091                     	;# 
   120  0092                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000D                     	;# 
   149  000E                     	;# 
   150  000E                     	;# 
   151  000F                     	;# 
   152  0010                     	;# 
   153  0011                     	;# 
   154  0012                     	;# 
   155  0013                     	;# 
   156  0014                     	;# 
   157  0015                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0017                     	;# 
   161  0018                     	;# 
   162  0019                     	;# 
   163  001A                     	;# 
   164  001B                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  001D                     	;# 
   168  001E                     	;# 
   169  001F                     	;# 
   170  0081                     	;# 
   171  0085                     	;# 
   172  0086                     	;# 
   173  0087                     	;# 
   174  0088                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0098                     	;# 
   184  0099                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  010C                     	;# 
   190  010D                     	;# 
   191  010E                     	;# 
   192  010F                     	;# 
   193  018C                     	;# 
   194  018D                     	;# 
   195                           
   196                           	psect	idataBANK1
   197  07DD                     __pidataBANK1:	
   198                           
   199                           ;initializer for _Semafori
   200  07DD  34C3               	retlw	low (_s0| 0)
   201  07DE  3400               	retlw	high (_s0| 0)
   202  07DF  34B7               	retlw	low (_s1| 0)
   203  07E0  3400               	retlw	high (_s1| 0)
   204  07E1  34E4               	retlw	low (_s2| (0+256))
   205  07E2  3401               	retlw	high (_s2| (0+256))
   206  07E3  34D8               	retlw	low (_s3| (0+256))
   207  07E4  3401               	retlw	high (_s3| (0+256))
   208  07E5  34CC               	retlw	low (_s4| (0+256))
   209  07E6  3401               	retlw	high (_s4| (0+256))
   210  07E7  34C0               	retlw	low (_s5| (0+256))
   211  07E8  3401               	retlw	high (_s5| (0+256))
   212  07E9  34B4               	retlw	low (_s6| (0+256))
   213  07EA  3401               	retlw	high (_s6| (0+256))
   214  07EB  34A8               	retlw	low (_s7| (0+256))
   215  07EC  3401               	retlw	high (_s7| (0+256))
   216  07ED  349C               	retlw	low (_s8| (0+256))
   217  07EE  3401               	retlw	high (_s8| (0+256))
   218  07EF  3490               	retlw	low (_s9| (0+256))
   219  07F0  3401               	retlw	high (_s9| (0+256))
   220  07F1  344C               	retlw	low (_s10| (0+256))
   221  07F2  3401               	retlw	high (_s10| (0+256))
   222  07F3  3440               	retlw	low (_s11| (0+256))
   223  07F4  3401               	retlw	high (_s11| (0+256))
   224  07F5  3434               	retlw	low (_s12| (0+256))
   225  07F6  3401               	retlw	high (_s12| (0+256))
   226  07F7  3428               	retlw	low (_s13| (0+256))
   227  07F8  3401               	retlw	high (_s13| (0+256))
   228  07F9  341C               	retlw	low (_s14| (0+256))
   229  07FA  3401               	retlw	high (_s14| (0+256))
   230  07FB  3410               	retlw	low (_s15| (0+256))
   231  07FC  3401               	retlw	high (_s15| (0+256))
   232                           
   233                           	psect	strings
   234  0800                     __pstrings:	
   235  0800                     stringtab:	
   236  0800                     __stringtab:	
   237  0800                     stringcode:	
   238                           ;	String table - string pointers are 1 byte each
   239                           
   240  0800                     stringdir:	
   241  0800  3008               	movlw	high stringdir
   242  0801  008A               	movwf	10
   243  0802  0804               	movf	4,w
   244  0803  0A84               	incf	4,f
   245  0804  0782               	addwf	2,f
   246  0805                     __stringbase:	
   247  0805  3400               	retlw	0
   248  0806                     __end_of__stringtab:	
   249  0806                     _display:	
   250  0806  343F               	retlw	63
   251  0807  3406               	retlw	6
   252  0808  345B               	retlw	91
   253  0809  344F               	retlw	79
   254  080A  3466               	retlw	102
   255  080B  346D               	retlw	109
   256  080C  347D               	retlw	125
   257  080D  3407               	retlw	7
   258  080E  347F               	retlw	127
   259  080F  346F               	retlw	111
   260  0810  3400               	retlw	0
   261  0811                     __end_of_display:	
   262  0006                     _PORTBbits	set	6
   263  0008                     _PORTD	set	8
   264  0005                     _PORTAbits	set	5
   265  001A                     _RCREG	set	26
   266  0019                     _TXREG	set	25
   267  000B                     _INTCONbits	set	11
   268  0018                     _RCSTAbits	set	24
   269  001E                     _ADRESH	set	30
   270  001F                     _ADCON0	set	31
   271  000E                     _TMR1L	set	14
   272  000F                     _TMR1H	set	15
   273  0010                     _T1CON	set	16
   274  0001                     _TMR0	set	1
   275  000B                     _INTCON	set	11
   276  0060                     _TMR1IF	set	96
   277  005A                     _TMR0IF	set	90
   278  0065                     _RCIF	set	101
   279  0064                     _TXIF	set	100
   280  00FA                     _GO_nDONE	set	250
   281  008C                     _PIE1bits	set	140
   282  0099                     _SPBRG	set	153
   283  0098                     _TXSTAbits	set	152
   284  0087                     _TRISCbits	set	135
   285  009E                     _ADRESL	set	158
   286  009F                     _ADCON1	set	159
   287  0085                     _TRISA	set	133
   288  0081                     _OPTION_REG	set	129
   289  0089                     _TRISE	set	137
   290  0088                     _TRISD	set	136
   291  0087                     _TRISC	set	135
   292  0086                     _TRISB	set	134
   293                           
   294                           ; #config settings
   295  0000                     
   296                           	psect	cinit
   297  0011                     start_initialization:	
   298  0011                     __initialization:	
   299                           
   300                           ; Initialize objects allocated to BANK1
   301  0011  1383               	bcf	3,7	;select IRP bank0
   302  0012  30EF               	movlw	low (__pdataBANK1+32)
   303  0013  00FD               	movwf	btemp+-1
   304  0014  3007               	movlw	high __pidataBANK1
   305  0015  00FE               	movwf	btemp
   306  0016  30DD               	movlw	low __pidataBANK1
   307  0017  00FF               	movwf	btemp+1
   308  0018  30CF               	movlw	low __pdataBANK1
   309  0019  0084               	movwf	4
   310  001A  120A  158A  246A  120A  118A  	fcall	init_ram0
   311                           
   312                           ; Clear objects allocated to BANK3
   313  001F  1783               	bsf	3,7	;select IRP bank2
   314  0020  3090               	movlw	low __pbssBANK3
   315  0021  0084               	movwf	4
   316  0022  30F0               	movlw	low (__pbssBANK3+96)
   317  0023  120A  158A  2437  120A  118A  	fcall	clear_ram0
   318                           
   319                           ; Clear objects allocated to BANK2
   320  0028  3010               	movlw	low __pbssBANK2
   321  0029  0084               	movwf	4
   322  002A  3058               	movlw	low (__pbssBANK2+72)
   323  002B  120A  158A  2437  120A  118A  	fcall	clear_ram0
   324                           
   325                           ; Clear objects allocated to BANK1
   326  0030  1383               	bcf	3,7	;select IRP bank0
   327  0031  30A0               	movlw	low __pbssBANK1
   328  0032  0084               	movwf	4
   329  0033  30CF               	movlw	low (__pbssBANK1+47)
   330  0034  120A  158A  2437  120A  118A  	fcall	clear_ram0
   331                           
   332                           ; Clear objects allocated to BANK0
   333  0039  304D               	movlw	low __pbssBANK0
   334  003A  0084               	movwf	4
   335  003B  3064               	movlw	low (__pbssBANK0+23)
   336  003C  120A  158A  2437  120A  118A  	fcall	clear_ram0
   337                           
   338                           ; Clear objects allocated to COMMON
   339  0041  01F0               	clrf	__pbssCOMMON& (0+127)
   340  0042  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   341  0043  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   342  0044  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   343  0045  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   344  0046                     end_of_initialization:	
   345                           ;End of C runtime variable initialization code
   346                           
   347  0046                     __end_of__initialization:	
   348  0046  0183               	clrf	3
   349  0047  120A  118A  284A   	ljmp	_main	;jump to C main() function
   350                           
   351                           	psect	bssCOMMON
   352  0070                     __pbssCOMMON:	
   353  0070                     _count:	
   354  0070                     	ds	2
   355  0072                     _time:	
   356  0072                     	ds	1
   357  0073                     _comando:	
   358  0073                     	ds	1
   359  0074                     _count_lux:	
   360  0074                     	ds	1
   361                           
   362                           	psect	bssBANK0
   363  004D                     __pbssBANK0:	
   364  004D                     _car:	
   365  004D                     	ds	4
   366  0051                     _motorcycle:	
   367  0051                     	ds	4
   368  0055                     _n_semafori:	
   369  0055                     	ds	2
   370  0057                     _colorIndex:	
   371  0057                     	ds	1
   372  0058                     _timerReadFromGateway:	
   373  0058                     	ds	1
   374  0059                     _dataFromGatewayIndex:	
   375  0059                     	ds	1
   376  005A                     _countdown:	
   377  005A                     	ds	1
   378  005B                     _disp:	
   379  005B                     	ds	1
   380  005C                     _old_disp:	
   381  005C                     	ds	1
   382  005D                     _centinaia:	
   383  005D                     	ds	1
   384  005E                     _decine:	
   385  005E                     	ds	1
   386  005F                     _unita:	
   387  005F                     	ds	1
   388  0060                     _cycled:	
   389  0060                     	ds	1
   390  0061                     _secondPassed:	
   391  0061                     	ds	1
   392  0062                     _readGateway:	
   393  0062                     	ds	1
   394  0063                     _readGatewayDone:	
   395  0063                     	ds	1
   396                           
   397                           	psect	bssBANK1
   398  00A0                     __pbssBANK1:	
   399  00A0                     _dataFromGateway:	
   400  00A0                     	ds	15
   401  00AF                     _truck:	
   402  00AF                     	ds	4
   403  00B3                     _str:	
   404  00B3                     	ds	4
   405  00B7                     _s1:	
   406  00B7                     	ds	12
   407  00C3                     _s0:	
   408  00C3                     	ds	12
   409                           
   410                           	psect	dataBANK1
   411  00CF                     __pdataBANK1:	
   412  00CF                     _Semafori:	
   413  00CF                     	ds	32
   414                           
   415                           	psect	bssBANK3
   416  0190                     __pbssBANK3:	
   417  0190                     _s9:	
   418  0190                     	ds	12
   419  019C                     _s8:	
   420  019C                     	ds	12
   421  01A8                     _s7:	
   422  01A8                     	ds	12
   423  01B4                     _s6:	
   424  01B4                     	ds	12
   425  01C0                     _s5:	
   426  01C0                     	ds	12
   427  01CC                     _s4:	
   428  01CC                     	ds	12
   429  01D8                     _s3:	
   430  01D8                     	ds	12
   431  01E4                     _s2:	
   432  01E4                     	ds	12
   433                           
   434                           	psect	bssBANK2
   435  0110                     __pbssBANK2:	
   436  0110                     _s15:	
   437  0110                     	ds	12
   438  011C                     _s14:	
   439  011C                     	ds	12
   440  0128                     _s13:	
   441  0128                     	ds	12
   442  0134                     _s12:	
   443  0134                     	ds	12
   444  0140                     _s11:	
   445  0140                     	ds	12
   446  014C                     _s10:	
   447  014C                     	ds	12
   448                           
   449                           	psect	inittext
   450  0C66                     init_fetch0:	
   451                           ;	Called with low address in FSR and high address in W
   452                           
   453  0C66  087E               	movf	btemp,w
   454  0C67  008A               	movwf	10
   455  0C68  087F               	movf	btemp+1,w
   456  0C69  0082               	movwf	2
   457  0C6A                     init_ram0:	
   458                           ;Called with:
   459                           ;	high address of idata address in btemp 
   460                           ;	low address of idata address in btemp+1 
   461                           ;	low address of data in FSR
   462                           ;	high address + 1 of data in btemp-1
   463                           
   464  0C6A  120A  158A  2466  120A  158A  	fcall	init_fetch0
   465  0C6F  0080               	movwf	0
   466  0C70  0A84               	incf	4,f
   467  0C71  0804               	movf	4,w
   468  0C72  067D               	xorwf	btemp+-1,w
   469  0C73  1903               	btfsc	3,2
   470  0C74  3400               	retlw	0
   471  0C75  0AFF               	incf	btemp+1,f
   472  0C76  1903               	btfsc	3,2
   473  0C77  0AFE               	incf	btemp,f
   474  0C78  2C6A               	goto	init_ram0
   475                           
   476                           	psect	clrtext
   477  0C37                     clear_ram0:	
   478                           ;	Called with FSR containing the base address, and
   479                           ;	W with the last address+1
   480                           
   481  0C37  0064               	clrwdt	;clear the watchdog before getting into this loop
   482  0C38                     clrloop0:	
   483  0C38  0180               	clrf	0	;clear RAM location pointed to by FSR
   484  0C39  0A84               	incf	4,f	;increment pointer
   485  0C3A  0604               	xorwf	4,w	;XOR with final address
   486  0C3B  1903               	btfsc	3,2	;have we reached the end yet?
   487  0C3C  3400               	retlw	0	;all done for this memory range, return
   488  0C3D  0604               	xorwf	4,w	;XOR again to restore value
   489  0C3E  2C38               	goto	clrloop0	;do the next byte
   490                           
   491                           	psect	cstackBANK2
   492  0158                     __pcstackBANK2:	
   493  0158                     main@index:	
   494                           
   495                           ; 2 bytes @ 0x0
   496  0158                     	ds	2
   497  015A                     main@colorId:	
   498                           
   499                           ; 2 bytes @ 0x2
   500  015A                     	ds	2
   501  015C                     main@semaforoId:	
   502                           
   503                           ; 2 bytes @ 0x4
   504  015C                     	ds	2
   505  015E                     main@temp:	
   506                           
   507                           ; 1 bytes @ 0x6
   508  015E                     	ds	1
   509  015F                     main@umidita:	
   510                           
   511                           ; 1 bytes @ 0x7
   512  015F                     	ds	1
   513  0160                     main@pressione:	
   514                           
   515                           ; 1 bytes @ 0x8
   516  0160                     	ds	1
   517  0161                     main@endCiclo:	
   518                           
   519                           ; 1 bytes @ 0x9
   520  0161                     	ds	1
   521  0162                     main@time:	
   522                           
   523                           ; 2 bytes @ 0xA
   524  0162                     	ds	2
   525  0164                     main@lux_select:	
   526                           
   527                           ; 1 bytes @ 0xC
   528  0164                     	ds	1
   529  0165                     main@i:	
   530                           
   531                           ; 2 bytes @ 0xD
   532  0165                     	ds	2
   533  0167                     main@i_447:	
   534                           
   535                           ; 2 bytes @ 0xF
   536  0167                     	ds	2
   537  0169                     main@l:	
   538                           
   539                           ; 2 bytes @ 0x11
   540  0169                     	ds	2
   541  016B                     main@i_445:	
   542                           
   543                           ; 2 bytes @ 0x13
   544  016B                     	ds	2
   545  016D                     main@i_446:	
   546                           
   547                           ; 2 bytes @ 0x15
   548  016D                     	ds	2
   549                           
   550                           	psect	cstackCOMMON
   551  0075                     __pcstackCOMMON:	
   552  0075                     ?_init_ADC:	
   553  0075                     ?_main:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0075                     ?_UART_TxChar:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0075                     ?_UART_Read:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0075                     ??_UART_Read:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0075                     ?_conteggioVeicoli:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0075                     ??_conteggioVeicoli:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0075                     ?_ISR:	
   572                           ; 1 bytes @ 0x0
   573                           
   574                           
   575                           ; 1 bytes @ 0x0
   576  0075                     	ds	1
   577  0076                     ??_ISR:	
   578                           
   579                           ; 1 bytes @ 0x1
   580  0076                     	ds	4
   581                           
   582                           	psect	cstackBANK0
   583  0020                     __pcstackBANK0:	
   584  0020                     ??_init_ADC:	
   585  0020                     ?_SetDefaultTimers:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0020                     ?_SetDisplay:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0020                     ?_BuildByte:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0020                     ??_UART_TxChar:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0020                     ?___bmul:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0020                     ?_GetTime:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0020                     ?_ADC_Read:	
   604                           ; 2 bytes @ 0x0
   605                           
   606  0020                     ?___wmul:	
   607                           ; 2 bytes @ 0x0
   608                           
   609  0020                     ?___awmod:	
   610                           ; 2 bytes @ 0x0
   611                           
   612  0020                     ?___aldiv:	
   613                           ; 2 bytes @ 0x0
   614                           
   615  0020                     BuildByte@byte1:	
   616                           ; 4 bytes @ 0x0
   617                           
   618  0020                     UART_TxChar@ch:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0020                     SetDisplay@d2:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0020                     ___bmul@multiplicand:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0020                     GetTime@index:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0020                     SetDefaultTimers@rosso:	
   631                           ; 2 bytes @ 0x0
   632                           
   633  0020                     ___wmul@multiplier:	
   634                           ; 2 bytes @ 0x0
   635                           
   636  0020                     ___awmod@divisor:	
   637                           ; 2 bytes @ 0x0
   638                           
   639  0020                     ___aldiv@divisor:	
   640                           ; 2 bytes @ 0x0
   641                           
   642                           
   643                           ; 4 bytes @ 0x0
   644  0020                     	ds	1
   645  0021                     ??___bmul:	
   646  0021                     BuildByte@valore:	
   647                           ; 1 bytes @ 0x1
   648                           
   649  0021                     SetDisplay@d3:	
   650                           ; 1 bytes @ 0x1
   651                           
   652                           
   653                           ; 1 bytes @ 0x1
   654  0021                     	ds	1
   655  0022                     ??_GetTime:	
   656  0022                     ??_ADC_Read:	
   657                           ; 1 bytes @ 0x2
   658                           
   659  0022                     ??_BuildByte:	
   660                           ; 1 bytes @ 0x2
   661                           
   662  0022                     SetDisplay@value:	
   663                           ; 1 bytes @ 0x2
   664                           
   665  0022                     ___bmul@product:	
   666                           ; 1 bytes @ 0x2
   667                           
   668  0022                     SetDefaultTimers@verde:	
   669                           ; 1 bytes @ 0x2
   670                           
   671  0022                     ___wmul@multiplicand:	
   672                           ; 2 bytes @ 0x2
   673                           
   674  0022                     ___awmod@dividend:	
   675                           ; 2 bytes @ 0x2
   676                           
   677                           
   678                           ; 2 bytes @ 0x2
   679  0022                     	ds	1
   680  0023                     ??_SetDisplay:	
   681  0023                     ADC_Read@canale:	
   682                           ; 1 bytes @ 0x3
   683                           
   684  0023                     SetDisplay@d1:	
   685                           ; 1 bytes @ 0x3
   686                           
   687  0023                     ___bmul@multiplier:	
   688                           ; 1 bytes @ 0x3
   689                           
   690                           
   691                           ; 1 bytes @ 0x3
   692  0023                     	ds	1
   693  0024                     ??___wmul:	
   694  0024                     ??___awmod:	
   695                           ; 1 bytes @ 0x4
   696                           
   697  0024                     BuildByte@byte0:	
   698                           ; 1 bytes @ 0x4
   699                           
   700  0024                     GetTime@shortInt:	
   701                           ; 1 bytes @ 0x4
   702                           
   703  0024                     SetDefaultTimers@giallo:	
   704                           ; 1 bytes @ 0x4
   705                           
   706  0024                     ___wmul@product:	
   707                           ; 2 bytes @ 0x4
   708                           
   709  0024                     ___aldiv@dividend:	
   710                           ; 2 bytes @ 0x4
   711                           
   712                           
   713                           ; 4 bytes @ 0x4
   714  0024                     	ds	1
   715  0025                     ___awmod@counter:	
   716  0025                     GetTime@time:	
   717                           ; 1 bytes @ 0x5
   718                           
   719  0025                     BuildByte@txByte:	
   720                           ; 2 bytes @ 0x5
   721                           
   722                           
   723                           ; 5 bytes @ 0x5
   724  0025                     	ds	1
   725  0026                     ??_SetDefaultTimers:	
   726  0026                     ___awmod@sign:	
   727                           ; 1 bytes @ 0x6
   728                           
   729                           
   730                           ; 1 bytes @ 0x6
   731  0026                     	ds	1
   732  0027                     ?___awdiv:	
   733  0027                     ___awdiv@divisor:	
   734                           ; 2 bytes @ 0x7
   735                           
   736                           
   737                           ; 2 bytes @ 0x7
   738  0027                     	ds	1
   739  0028                     ??___aldiv:	
   740                           
   741                           ; 1 bytes @ 0x8
   742  0028                     	ds	1
   743  0029                     ___aldiv@counter:	
   744  0029                     ___awdiv@dividend:	
   745                           ; 1 bytes @ 0x9
   746                           
   747                           
   748                           ; 2 bytes @ 0x9
   749  0029                     	ds	1
   750  002A                     BuildByte@sommaRow:	
   751  002A                     ___aldiv@sign:	
   752                           ; 1 bytes @ 0xA
   753                           
   754                           
   755                           ; 1 bytes @ 0xA
   756  002A                     	ds	1
   757  002B                     ??___awdiv:	
   758  002B                     BuildByte@sommaColumn:	
   759                           ; 1 bytes @ 0xB
   760                           
   761  002B                     ___aldiv@quotient:	
   762                           ; 1 bytes @ 0xB
   763                           
   764                           
   765                           ; 4 bytes @ 0xB
   766  002B                     	ds	1
   767  002C                     ___awdiv@counter:	
   768  002C                     BuildByte@y:	
   769                           ; 1 bytes @ 0xC
   770                           
   771  002C                     SetDefaultTimers@l:	
   772                           ; 2 bytes @ 0xC
   773                           
   774                           
   775                           ; 2 bytes @ 0xC
   776  002C                     	ds	1
   777  002D                     ___awdiv@sign:	
   778                           
   779                           ; 1 bytes @ 0xD
   780  002D                     	ds	1
   781  002E                     BuildByte@y_343:	
   782  002E                     SetDefaultTimers@i:	
   783                           ; 2 bytes @ 0xE
   784                           
   785  002E                     ___awdiv@quotient:	
   786                           ; 2 bytes @ 0xE
   787                           
   788                           
   789                           ; 2 bytes @ 0xE
   790  002E                     	ds	1
   791  002F                     ?_UART_Init:	
   792  002F                     UART_Init@baudrate:	
   793                           ; 1 bytes @ 0xF
   794                           
   795                           
   796                           ; 2 bytes @ 0xF
   797  002F                     	ds	1
   798  0030                     ?_GetDigits:	
   799  0030                     ?_map:	
   800                           ; 1 bytes @ 0x10
   801                           
   802  0030                     map@x:	
   803                           ; 2 bytes @ 0x10
   804                           
   805  0030                     BuildByte@i:	
   806                           ; 2 bytes @ 0x10
   807                           
   808  0030                     GetDigits@Time:	
   809                           ; 2 bytes @ 0x10
   810                           
   811                           
   812                           ; 2 bytes @ 0x10
   813  0030                     	ds	1
   814  0031                     ??_UART_Init:	
   815                           
   816                           ; 1 bytes @ 0x11
   817  0031                     	ds	1
   818  0032                     ??_GetDigits:	
   819  0032                     map@in_min:	
   820                           ; 1 bytes @ 0x12
   821                           
   822  0032                     BuildByte@i_342:	
   823                           ; 2 bytes @ 0x12
   824                           
   825                           
   826                           ; 2 bytes @ 0x12
   827  0032                     	ds	2
   828  0034                     ?_sendByte:	
   829  0034                     sendByte@byte1:	
   830                           ; 1 bytes @ 0x14
   831                           
   832  0034                     map@in_max:	
   833                           ; 1 bytes @ 0x14
   834                           
   835                           
   836                           ; 2 bytes @ 0x14
   837  0034                     	ds	1
   838  0035                     sendByte@valore:	
   839  0035                     _GetDigits$1151:	
   840                           ; 1 bytes @ 0x15
   841                           
   842                           
   843                           ; 2 bytes @ 0x15
   844  0035                     	ds	1
   845  0036                     ??_sendByte:	
   846  0036                     map@out_min:	
   847                           ; 1 bytes @ 0x16
   848                           
   849                           
   850                           ; 2 bytes @ 0x16
   851  0036                     	ds	2
   852  0038                     map@out_max:	
   853                           
   854                           ; 2 bytes @ 0x18
   855  0038                     	ds	1
   856  0039                     sendByte@byte0:	
   857                           
   858                           ; 1 bytes @ 0x19
   859  0039                     	ds	1
   860  003A                     ??_map:	
   861  003A                     sendByte@txByte:	
   862                           ; 1 bytes @ 0x1A
   863                           
   864                           
   865                           ; 1 bytes @ 0x1A
   866  003A                     	ds	1
   867  003B                     sendByte@i:	
   868                           
   869                           ; 2 bytes @ 0x1B
   870  003B                     	ds	2
   871  003D                     ??_main:	
   872                           
   873                           ; 1 bytes @ 0x1D
   874  003D                     	ds	16
   875                           
   876                           	psect	maintext
   877  004A                     __pmaintext:	
   878 ;;
   879 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   880 ;;
   881 ;; *************** function _main *****************
   882 ;; Defined at:
   883 ;;		line 131 in file "main.c"
   884 ;; Parameters:    Size  Location     Type
   885 ;;		None
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  i               2   19[BANK2 ] int 
   888 ;;  semaforoId      2    4[BANK2 ] int 
   889 ;;  colorId         2    2[BANK2 ] int 
   890 ;;  index           2    0[BANK2 ] int 
   891 ;;  i               2   13[BANK2 ] int 
   892 ;;  i               2   15[BANK2 ] int 
   893 ;;  i               2   21[BANK2 ] int 
   894 ;;  l               2   17[BANK2 ] int 
   895 ;;  colorsTime      6    0        int [3]
   896 ;;  time            2   10[BANK2 ] int 
   897 ;;  lux_select      1   12[BANK2 ] unsigned char 
   898 ;;  endCiclo        1    9[BANK2 ] struct .
   899 ;;  pressione       1    8[BANK2 ] unsigned char 
   900 ;;  umidita         1    7[BANK2 ] unsigned char 
   901 ;;  temp            1    6[BANK2 ] unsigned char 
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : B00/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   911 ;;      Params:         0       0       0       0       0
   912 ;;      Locals:         0       0       0       0      23
   913 ;;      Temps:          0      16       0       0       0
   914 ;;      Totals:         0      16       0       0      23
   915 ;;Total ram usage:       39 bytes
   916 ;; Hardware stack levels required when called:    4
   917 ;; This function calls:
   918 ;;		_ADC_Read
   919 ;;		_GetDigits
   920 ;;		_GetTime
   921 ;;		_SetDefaultTimers
   922 ;;		_SetDisplay
   923 ;;		_UART_Init
   924 ;;		___awmod
   925 ;;		___bmul
   926 ;;		___wmul
   927 ;;		_init_ADC
   928 ;;		_map
   929 ;;		_sendByte
   930 ;; This function is called by:
   931 ;;		Startup code after reset
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           
   936                           ;psect for function _main
   937  004A                     _main:	
   938  004A                     l2892:	
   939                           ;incstack = 0
   940                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   941                           
   942                           
   943                           ;main.c: 134:     TRISB = 0x1F;
   944  004A  301F               	movlw	31
   945  004B  1683               	bsf	3,5	;RP0=1, select bank1
   946  004C  1303               	bcf	3,6	;RP1=0, select bank1
   947  004D  0086               	movwf	6	;volatile
   948                           
   949                           ;main.c: 135:     TRISC = 0x80;
   950  004E  3080               	movlw	128
   951  004F  0087               	movwf	7	;volatile
   952  0050                     l2894:	
   953                           
   954                           ;main.c: 136:     TRISD = 0x00;
   955  0050  0188               	clrf	8	;volatile
   956  0051                     l2896:	
   957                           
   958                           ;main.c: 137:     TRISE = 0x01;
   959  0051  3001               	movlw	1
   960  0052  0089               	movwf	9	;volatile
   961  0053                     l2898:	
   962                           
   963                           ;main.c: 138:     INTCON = 0xE0;
   964  0053  30E0               	movlw	224
   965  0054  008B               	movwf	11	;volatile
   966  0055                     l2900:	
   967                           
   968                           ;main.c: 139:     OPTION_REG = 0x04;
   969  0055  3004               	movlw	4
   970  0056  0081               	movwf	1	;volatile
   971  0057                     l2902:	
   972                           
   973                           ;main.c: 140:     TMR0 = 6;
   974  0057  3006               	movlw	6
   975  0058  1283               	bcf	3,5	;RP0=0, select bank0
   976  0059  1303               	bcf	3,6	;RP1=0, select bank0
   977  005A  0081               	movwf	1	;volatile
   978  005B                     l2904:	
   979                           
   980                           ;main.c: 141:     T1CON = 0x31;
   981  005B  3031               	movlw	49
   982  005C  0090               	movwf	16	;volatile
   983  005D                     l2906:	
   984                           
   985                           ;main.c: 147:     init_ADC();
   986  005D  120A  158A  2453  120A  118A  	fcall	_init_ADC
   987  0062                     l2908:	
   988                           
   989                           ;main.c: 148:     UART_Init(9600);
   990  0062  3080               	movlw	128
   991  0063  1283               	bcf	3,5	;RP0=0, select bank0
   992  0064  1303               	bcf	3,6	;RP1=0, select bank0
   993  0065  00AF               	movwf	UART_Init@baudrate
   994  0066  3025               	movlw	37
   995  0067  00B0               	movwf	UART_Init@baudrate+1
   996  0068  120A  158A  2527  120A  118A  	fcall	_UART_Init
   997  006D                     l2910:	
   998                           
   999                           ;main.c: 149:     SetDefaultTimers(0, 0, 0);
  1000  006D  3000               	movlw	0
  1001  006E  1283               	bcf	3,5	;RP0=0, select bank0
  1002  006F  1303               	bcf	3,6	;RP1=0, select bank0
  1003  0070  00A0               	movwf	SetDefaultTimers@rosso
  1004  0071  00A1               	movwf	SetDefaultTimers@rosso+1
  1005  0072  3000               	movlw	0
  1006  0073  00A2               	movwf	SetDefaultTimers@verde
  1007  0074  00A3               	movwf	SetDefaultTimers@verde+1
  1008  0075  3000               	movlw	0
  1009  0076  00A4               	movwf	SetDefaultTimers@giallo
  1010  0077  00A5               	movwf	SetDefaultTimers@giallo+1
  1011  0078  120A  118A  273C  120A  118A  	fcall	_SetDefaultTimers
  1012  007D                     l2912:	
  1013                           
  1014                           ;main.c: 151:     TMR1H = 60;
  1015  007D  303C               	movlw	60
  1016  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1017  007F  1303               	bcf	3,6	;RP1=0, select bank0
  1018  0080  008F               	movwf	15	;volatile
  1019  0081                     l2914:	
  1020                           
  1021                           ;main.c: 152:     TMR1L = 176;
  1022  0081  30B0               	movlw	176
  1023  0082  008E               	movwf	14	;volatile
  1024  0083                     l2916:	
  1025                           
  1026                           ;main.c: 154:     int colorsTime[3], time;;main.c: 155:     char lux_select = 0;
  1027  0083  1283               	bcf	3,5	;RP0=0, select bank2
  1028  0084  1703               	bsf	3,6	;RP1=1, select bank2
  1029  0085  01E4               	clrf	main@lux_select^(0+256)
  1030  0086                     l2918:	
  1031                           
  1032                           ;main.c: 156:     disp = 0;
  1033  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1034  0087  1303               	bcf	3,6	;RP1=0, select bank0
  1035  0088  01DB               	clrf	_disp
  1036  0089                     l2920:	
  1037  0089                     l2922:	
  1038  0089                     l2924:	
  1039  0089                     l2926:	
  1040                           
  1041                           ;main.c: 160:     Bit endCiclo;;main.c: 161:     endCiclo.Bit = 1;
  1042  0089  1283               	bcf	3,5	;RP0=0, select bank2
  1043  008A  1703               	bsf	3,6	;RP1=1, select bank2
  1044  008B  1461               	bsf	main@endCiclo^(0+256),0
  1045  008C                     l2928:	
  1046                           
  1047                           ;main.c: 164:     {;main.c: 166:         if (readGateway.Bit)
  1048  008C  1283               	bcf	3,5	;RP0=0, select bank0
  1049  008D  1303               	bcf	3,6	;RP1=0, select bank0
  1050  008E  1C62               	btfss	_readGateway,0
  1051  008F  2891               	goto	u2991
  1052  0090  2892               	goto	u2990
  1053  0091                     u2991:	
  1054  0091  28BE               	goto	l216
  1055  0092                     u2990:	
  1056  0092  28A9               	goto	l2942
  1057  0093                     l218:	
  1058                           ;main.c: 169:             {;main.c: 170:             case 0x08:
  1059                           
  1060                           
  1061                           ;main.c: 171:                 readGatewayDone.Bit = 1;
  1062  0093  1463               	bsf	_readGatewayDone,0
  1063                           
  1064                           ;main.c: 172:                 readGateway.Bit = 0;
  1065  0094  1062               	bcf	_readGateway,0
  1066                           
  1067                           ;main.c: 173:                 break;
  1068  0095  28BE               	goto	l216
  1069  0096                     l2932:	
  1070                           
  1071                           ;main.c: 180:                 if (timerReadFromGateway >= 4)
  1072  0096  3004               	movlw	4
  1073  0097  0258               	subwf	_timerReadFromGateway,w
  1074  0098  1C03               	skipc
  1075  0099  289B               	goto	u3001
  1076  009A  289C               	goto	u3000
  1077  009B                     u3001:	
  1078  009B  289F               	goto	l2936
  1079  009C                     u3000:	
  1080  009C                     l2934:	
  1081                           
  1082                           ;main.c: 181:                 {;main.c: 182:                     readGatewayDone.Bit = 1
      +                          ;
  1083  009C  1463               	bsf	_readGatewayDone,0
  1084                           
  1085                           ;main.c: 183:                     readGatewayDone.Timeout = 1;
  1086  009D  14E3               	bsf	_readGatewayDone,1
  1087                           
  1088                           ;main.c: 184:                     readGateway.Bit = 0;
  1089  009E  1062               	bcf	_readGateway,0
  1090  009F                     l2936:	
  1091                           
  1092                           ;main.c: 187:                 if (dataFromGatewayIndex >= 15)
  1093  009F  300F               	movlw	15
  1094  00A0  0259               	subwf	_dataFromGatewayIndex,w
  1095  00A1  1C03               	skipc
  1096  00A2  28A4               	goto	u3011
  1097  00A3  28A5               	goto	u3010
  1098  00A4                     u3011:	
  1099  00A4  28BE               	goto	l216
  1100  00A5                     u3010:	
  1101  00A5                     l2938:	
  1102                           
  1103                           ;main.c: 188:                 {;main.c: 189:                     readGatewayDone.Bit = 1
      +                          ;
  1104  00A5  1463               	bsf	_readGatewayDone,0
  1105                           
  1106                           ;main.c: 190:                     readGatewayDone.Timeout = 0;
  1107  00A6  10E3               	bcf	_readGatewayDone,1
  1108                           
  1109                           ;main.c: 191:                     readGateway.Bit = 0;
  1110  00A7  1062               	bcf	_readGateway,0
  1111  00A8  28BE               	goto	l216
  1112  00A9                     l2942:	
  1113  00A9  1683               	bsf	3,5	;RP0=1, select bank1
  1114  00AA  1303               	bcf	3,6	;RP1=0, select bank1
  1115  00AB  0820               	movf	_dataFromGateway^(0+128),w
  1116  00AC  397F               	andlw	127
  1117  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1118  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1119  00AF  00BD               	movwf	??_main
  1120  00B0  01BE               	clrf	??_main+1
  1121                           
  1122                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1123                           ; Switch size 1, requested type "simple"
  1124                           ; Number of cases is 1, Range of values is 0 to 0
  1125                           ; switch strategies available:
  1126                           ; Name         Instructions Cycles
  1127                           ; simple_byte            4     3 (average)
  1128                           ; direct_byte           11     8 (fixed)
  1129                           ; jumptable            260     6 (fixed)
  1130                           ;	Chosen strategy is simple_byte
  1131  00B1  083E               	movf	??_main+1,w
  1132  00B2  3A00               	xorlw	0	; case 0
  1133  00B3  1903               	skipnz
  1134  00B4  28B6               	goto	l3188
  1135  00B5  2896               	goto	l2932
  1136  00B6                     l3188:	
  1137                           
  1138                           ; Switch size 1, requested type "simple"
  1139                           ; Number of cases is 2, Range of values is 8 to 10
  1140                           ; switch strategies available:
  1141                           ; Name         Instructions Cycles
  1142                           ; simple_byte            7     4 (average)
  1143                           ; direct_byte           20    11 (fixed)
  1144                           ; jumptable            263     9 (fixed)
  1145                           ;	Chosen strategy is simple_byte
  1146  00B6  083D               	movf	??_main,w
  1147  00B7  3A08               	xorlw	8	; case 8
  1148  00B8  1903               	skipnz
  1149  00B9  2893               	goto	l218
  1150  00BA  3A02               	xorlw	2	; case 10
  1151  00BB  1903               	skipnz
  1152  00BC  2893               	goto	l218
  1153  00BD  2896               	goto	l2932
  1154  00BE                     l216:	
  1155                           ;main.c: 195:         }
  1156                           
  1157                           
  1158                           ;main.c: 198:         if (readGatewayDone.Bit)
  1159  00BE  1C63               	btfss	_readGatewayDone,0
  1160  00BF  28C1               	goto	u3021
  1161  00C0  28C2               	goto	u3020
  1162  00C1                     u3021:	
  1163  00C1  2975               	goto	l224
  1164  00C2                     u3020:	
  1165  00C2                     l2944:	
  1166                           
  1167                           ;main.c: 199:         {;main.c: 201:             readGateway.Bit = 0;
  1168  00C2  1062               	bcf	_readGateway,0
  1169  00C3                     l2946:	
  1170                           
  1171                           ;main.c: 202:             dataFromGatewayIndex = 0;
  1172  00C3  01D9               	clrf	_dataFromGatewayIndex
  1173  00C4                     l2948:	
  1174                           
  1175                           ;main.c: 203:             readGatewayDone.Bit = 0;
  1176  00C4  1063               	bcf	_readGatewayDone,0
  1177                           
  1178                           ;main.c: 204:             timerReadFromGateway = 0;
  1179  00C5  01D8               	clrf	_timerReadFromGateway
  1180  00C6                     l2950:	
  1181                           
  1182                           ;main.c: 207:             if (readGatewayDone.Timeout)
  1183  00C6  1CE3               	btfss	_readGatewayDone,1
  1184  00C7  28C9               	goto	u3031
  1185  00C8  28CA               	goto	u3030
  1186  00C9                     u3031:	
  1187  00C9  28CC               	goto	l2954
  1188  00CA                     u3030:	
  1189  00CA                     l2952:	
  1190                           
  1191                           ;main.c: 208:             {;main.c: 209:                 readGatewayDone.Timeout = 0;
  1192  00CA  10E3               	bcf	_readGatewayDone,1
  1193                           
  1194                           ;main.c: 210:             }
  1195  00CB  2975               	goto	l224
  1196  00CC                     l2954:	
  1197                           
  1198                           ;main.c: 213:             {;main.c: 216:                 for (int i = 0; i < 3; i++)
  1199  00CC  1283               	bcf	3,5	;RP0=0, select bank2
  1200  00CD  1703               	bsf	3,6	;RP1=1, select bank2
  1201  00CE  01E5               	clrf	main@i^(0+256)
  1202  00CF  01E6               	clrf	(main@i+1)^(0+256)
  1203  00D0                     l2960:	
  1204                           
  1205                           ;main.c: 217:                 {;main.c: 218:                     int index = i * 5;
  1206  00D0  1283               	bcf	3,5	;RP0=0, select bank2
  1207  00D1  1703               	bsf	3,6	;RP1=1, select bank2
  1208  00D2  0866               	movf	(main@i+1)^(0+256),w
  1209  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1210  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  1211  00D5  00A1               	movwf	___wmul@multiplier+1
  1212  00D6  1283               	bcf	3,5	;RP0=0, select bank2
  1213  00D7  1703               	bsf	3,6	;RP1=1, select bank2
  1214  00D8  0865               	movf	main@i^(0+256),w
  1215  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1216  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  1217  00DB  00A0               	movwf	___wmul@multiplier
  1218  00DC  3005               	movlw	5
  1219  00DD  00A2               	movwf	___wmul@multiplicand
  1220  00DE  3000               	movlw	0
  1221  00DF  00A3               	movwf	___wmul@multiplicand+1
  1222  00E0  120A  158A  24CB  120A  118A  	fcall	___wmul
  1223  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1224  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  1225  00E7  0821               	movf	?___wmul+1,w
  1226  00E8  1283               	bcf	3,5	;RP0=0, select bank2
  1227  00E9  1703               	bsf	3,6	;RP1=1, select bank2
  1228  00EA  00D9               	movwf	(main@index+1)^(0+256)
  1229  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1230  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1231  00ED  0820               	movf	?___wmul,w
  1232  00EE  1283               	bcf	3,5	;RP0=0, select bank2
  1233  00EF  1703               	bsf	3,6	;RP1=1, select bank2
  1234  00F0  00D8               	movwf	main@index^(0+256)
  1235  00F1                     l2962:	
  1236                           
  1237                           ;main.c: 219:                     int colorId = ((dataFromGateway[i * 5] >> 5) & 0x03) -
      +                           1;
  1238  00F1  3005               	movlw	5
  1239  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1240  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1241  00F4  00BD               	movwf	??_main
  1242  00F5  083D               	movf	??_main,w
  1243  00F6  00A0               	movwf	___bmul@multiplicand
  1244  00F7  1283               	bcf	3,5	;RP0=0, select bank2
  1245  00F8  1703               	bsf	3,6	;RP1=1, select bank2
  1246  00F9  0865               	movf	main@i^(0+256),w
  1247  00FA  120A  158A  248E  120A  118A  	fcall	___bmul
  1248  00FF  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1249  0100  0084               	movwf	4
  1250  0101  1383               	bcf	3,7	;select IRP bank1
  1251  0102  0800               	movf	0,w
  1252  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1253  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1254  0105  00BE               	movwf	??_main+1
  1255  0106  3005               	movlw	5
  1256  0107                     u3045:	
  1257  0107  1003               	clrc
  1258  0108  0CBE               	rrf	??_main+1,f
  1259  0109  3EFF               	addlw	-1
  1260  010A  1D03               	skipz
  1261  010B  2907               	goto	u3045
  1262  010C  083E               	movf	??_main+1,w
  1263  010D  3903               	andlw	3
  1264  010E  3EFF               	addlw	255
  1265  010F  1283               	bcf	3,5	;RP0=0, select bank2
  1266  0110  1703               	bsf	3,6	;RP1=1, select bank2
  1267  0111  00DA               	movwf	main@colorId^(0+256)
  1268  0112  30FF               	movlw	255
  1269  0113  1803               	skipnc
  1270  0114  3000               	movlw	0
  1271  0115  00DB               	movwf	(main@colorId^(0+256)+1)
  1272  0116                     l2964:	
  1273                           
  1274                           ;main.c: 220:                     int semaforoId = (dataFromGateway[0] >> 1) & 0x07;
  1275  0116  1683               	bsf	3,5	;RP0=1, select bank1
  1276  0117  1303               	bcf	3,6	;RP1=0, select bank1
  1277  0118  0820               	movf	_dataFromGateway^(0+128),w
  1278  0119  1283               	bcf	3,5	;RP0=0, select bank0
  1279  011A  1303               	bcf	3,6	;RP1=0, select bank0
  1280  011B  00BD               	movwf	??_main
  1281  011C  1003               	clrc
  1282  011D  0C3D               	rrf	??_main,w
  1283  011E  3907               	andlw	7
  1284  011F  00BE               	movwf	??_main+1
  1285  0120  01BF               	clrf	??_main+2
  1286  0121  083E               	movf	??_main+1,w
  1287  0122  1283               	bcf	3,5	;RP0=0, select bank2
  1288  0123  1703               	bsf	3,6	;RP1=1, select bank2
  1289  0124  00DC               	movwf	main@semaforoId^(0+256)
  1290  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1291  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1292  0127  083F               	movf	??_main+2,w
  1293  0128  1283               	bcf	3,5	;RP0=0, select bank2
  1294  0129  1703               	bsf	3,6	;RP1=1, select bank2
  1295  012A  00DD               	movwf	(main@semaforoId+1)^(0+256)
  1296  012B                     l2966:	
  1297                           
  1298                           ;main.c: 222:                     (*(Semafori[semaforoId])).new_times[colorId] = GetTime
      +                          (index);
  1299  012B  0859               	movf	(main@index+1)^(0+256),w
  1300  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1301  012D  1303               	bcf	3,6	;RP1=0, select bank0
  1302  012E  00A1               	movwf	GetTime@index+1
  1303  012F  1283               	bcf	3,5	;RP0=0, select bank2
  1304  0130  1703               	bsf	3,6	;RP1=1, select bank2
  1305  0131  0858               	movf	main@index^(0+256),w
  1306  0132  1283               	bcf	3,5	;RP0=0, select bank0
  1307  0133  1303               	bcf	3,6	;RP1=0, select bank0
  1308  0134  00A0               	movwf	GetTime@index
  1309  0135  120A  158A  259B  120A  118A  	fcall	_GetTime
  1310  013A  1283               	bcf	3,5	;RP0=0, select bank2
  1311  013B  1703               	bsf	3,6	;RP1=1, select bank2
  1312  013C  085C               	movf	main@semaforoId^(0+256),w
  1313  013D  1283               	bcf	3,5	;RP0=0, select bank0
  1314  013E  1303               	bcf	3,6	;RP1=0, select bank0
  1315  013F  00BD               	movwf	??_main
  1316  0140  073D               	addwf	??_main,w
  1317  0141  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1318  0142  0084               	movwf	4
  1319  0143  1383               	bcf	3,7	;select IRP bank1
  1320  0144  0800               	movf	0,w
  1321  0145  00BE               	movwf	??_main+1
  1322  0146  0A84               	incf	4,f
  1323  0147  0800               	movf	0,w
  1324  0148  00BF               	movwf	??_main+2
  1325  0149  1283               	bcf	3,5	;RP0=0, select bank2
  1326  014A  1703               	bsf	3,6	;RP1=1, select bank2
  1327  014B  085A               	movf	main@colorId^(0+256),w
  1328  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1329  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1330  014E  00C0               	movwf	??_main+3
  1331  014F  0740               	addwf	??_main+3,w
  1332  0150  073E               	addwf	??_main+1,w
  1333  0151  00C1               	movwf	??_main+4
  1334  0152  083F               	movf	??_main+2,w
  1335  0153  1803               	skipnc
  1336  0154  3E01               	addlw	1
  1337  0155  00C2               	movwf	??_main+5
  1338  0156  0841               	movf	??_main+4,w
  1339  0157  0084               	movwf	4
  1340  0158  1783               	bsf	3,7
  1341  0159  1C42               	btfss	??_main+5,0
  1342  015A  1383               	bcf	3,7
  1343  015B  0820               	movf	?_GetTime,w
  1344  015C  0080               	movwf	0
  1345  015D  0A84               	incf	4,f
  1346  015E  0821               	movf	?_GetTime+1,w
  1347  015F  0080               	movwf	0
  1348  0160                     l2968:	
  1349                           
  1350                           ;main.c: 223:                 }
  1351  0160  3001               	movlw	1
  1352  0161  1283               	bcf	3,5	;RP0=0, select bank2
  1353  0162  1703               	bsf	3,6	;RP1=1, select bank2
  1354  0163  07E5               	addwf	main@i^(0+256),f
  1355  0164  1803               	skipnc
  1356  0165  0AE6               	incf	(main@i+1)^(0+256),f
  1357  0166  3000               	movlw	0
  1358  0167  07E6               	addwf	(main@i+1)^(0+256),f
  1359  0168                     l2970:	
  1360  0168  0866               	movf	(main@i+1)^(0+256),w
  1361  0169  3A80               	xorlw	128
  1362  016A  00FF               	movwf	btemp+1
  1363  016B  3080               	movlw	128
  1364  016C  027F               	subwf	btemp+1,w
  1365  016D  1D03               	skipz
  1366  016E  2971               	goto	u3055
  1367  016F  3003               	movlw	3
  1368  0170  0265               	subwf	main@i^(0+256),w
  1369  0171                     u3055:	
  1370  0171  1C03               	skipc
  1371  0172  2974               	goto	u3051
  1372  0173  2975               	goto	u3050
  1373  0174                     u3051:	
  1374  0174  28D0               	goto	l2960
  1375  0175                     u3050:	
  1376  0175                     l224:	
  1377                           ;main.c: 225:         }
  1378                           
  1379                           
  1380                           ;main.c: 229:         if (endCiclo.Bit)
  1381  0175  1283               	bcf	3,5	;RP0=0, select bank2
  1382  0176  1703               	bsf	3,6	;RP1=1, select bank2
  1383  0177  1C61               	btfss	main@endCiclo^(0+256),0
  1384  0178  297A               	goto	u3061
  1385  0179  297B               	goto	u3060
  1386  017A                     u3061:	
  1387  017A  2A8F               	goto	l229
  1388  017B                     u3060:	
  1389  017B                     l2972:	
  1390                           
  1391                           ;main.c: 230:         {;main.c: 231:             n_semafori = (n_semafori + 1) % 16;
  1392  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1393  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1394  017D  0855               	movf	_n_semafori,w
  1395  017E  3E01               	addlw	1
  1396  017F  00BD               	movwf	??_main
  1397  0180  0856               	movf	_n_semafori+1,w
  1398  0181  1803               	skipnc
  1399  0182  3E01               	addlw	1
  1400  0183  3E00               	addlw	0
  1401  0184  00BE               	movwf	??_main+1
  1402  0185  300F               	movlw	15
  1403  0186  053D               	andwf	??_main,w
  1404  0187  00D5               	movwf	_n_semafori
  1405  0188  3000               	movlw	0
  1406  0189  053E               	andwf	??_main+1,w
  1407  018A  00D6               	movwf	_n_semafori+1
  1408                           
  1409                           ;main.c: 232:             while ((*(Semafori[n_semafori])).times[0] == 0)
  1410  018B  2992               	goto	l2976
  1411  018C                     l2974:	
  1412                           
  1413                           ;main.c: 233:             {;main.c: 234:                 n_semafori++;
  1414  018C  3001               	movlw	1
  1415  018D  07D5               	addwf	_n_semafori,f
  1416  018E  1803               	skipnc
  1417  018F  0AD6               	incf	_n_semafori+1,f
  1418  0190  3000               	movlw	0
  1419  0191  07D6               	addwf	_n_semafori+1,f
  1420  0192                     l2976:	
  1421                           
  1422                           ;main.c: 232:             while ((*(Semafori[n_semafori])).times[0] == 0)
  1423  0192  0855               	movf	_n_semafori,w
  1424  0193  00BD               	movwf	??_main
  1425  0194  073D               	addwf	??_main,w
  1426  0195  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1427  0196  0084               	movwf	4
  1428  0197  1383               	bcf	3,7	;select IRP bank1
  1429  0198  0800               	movf	0,w
  1430  0199  00BE               	movwf	??_main+1
  1431  019A  0A84               	incf	4,f
  1432  019B  0800               	movf	0,w
  1433  019C  00BF               	movwf	??_main+2
  1434  019D  083E               	movf	??_main+1,w
  1435  019E  3E06               	addlw	6
  1436  019F  00C0               	movwf	??_main+3
  1437  01A0  083F               	movf	??_main+2,w
  1438  01A1  1803               	skipnc
  1439  01A2  3E01               	addlw	1
  1440  01A3  3E00               	addlw	0
  1441  01A4  00C1               	movwf	??_main+4
  1442  01A5  0840               	movf	??_main+3,w
  1443  01A6  0084               	movwf	4
  1444  01A7  1783               	bsf	3,7
  1445  01A8  1C41               	btfss	??_main+4,0
  1446  01A9  1383               	bcf	3,7
  1447  01AA  0800               	movf	0,w
  1448  01AB  00C2               	movwf	??_main+5
  1449  01AC  0A84               	incf	4,f
  1450  01AD  0800               	movf	0,w
  1451  01AE  00C3               	movwf	??_main+6
  1452  01AF  0842               	movf	??_main+5,w
  1453  01B0  0443               	iorwf	??_main+6,w
  1454  01B1  1903               	btfsc	3,2
  1455  01B2  29B4               	goto	u3071
  1456  01B3  29B5               	goto	u3070
  1457  01B4                     u3071:	
  1458  01B4  298C               	goto	l2974
  1459  01B5                     u3070:	
  1460  01B5                     l2978:	
  1461                           
  1462                           ;main.c: 237:             for (int l = 0; l < 16; l++)
  1463  01B5  1283               	bcf	3,5	;RP0=0, select bank2
  1464  01B6  1703               	bsf	3,6	;RP1=1, select bank2
  1465  01B7  01E9               	clrf	main@l^(0+256)
  1466  01B8  01EA               	clrf	(main@l+1)^(0+256)
  1467  01B9                     l2980:	
  1468  01B9  086A               	movf	(main@l+1)^(0+256),w
  1469  01BA  3A80               	xorlw	128
  1470  01BB  00FF               	movwf	btemp+1
  1471  01BC  3080               	movlw	128
  1472  01BD  027F               	subwf	btemp+1,w
  1473  01BE  1D03               	skipz
  1474  01BF  29C2               	goto	u3085
  1475  01C0  3010               	movlw	16
  1476  01C1  0269               	subwf	main@l^(0+256),w
  1477  01C2                     u3085:	
  1478  01C2  1C03               	skipc
  1479  01C3  29C5               	goto	u3081
  1480  01C4  29C6               	goto	u3080
  1481  01C5                     u3081:	
  1482  01C5  29C7               	goto	l2984
  1483  01C6                     u3080:	
  1484  01C6  2A8F               	goto	l229
  1485  01C7                     l2984:	
  1486                           
  1487                           ;main.c: 238:             {;main.c: 239:                 for (int i = 0; i < 3; i++)
  1488  01C7  1283               	bcf	3,5	;RP0=0, select bank2
  1489  01C8  1703               	bsf	3,6	;RP1=1, select bank2
  1490  01C9  01EB               	clrf	main@i_445^(0+256)
  1491  01CA  01EC               	clrf	(main@i_445+1)^(0+256)
  1492  01CB                     l2986:	
  1493  01CB  086C               	movf	(main@i_445+1)^(0+256),w
  1494  01CC  3A80               	xorlw	128
  1495  01CD  00FF               	movwf	btemp+1
  1496  01CE  3080               	movlw	128
  1497  01CF  027F               	subwf	btemp+1,w
  1498  01D0  1D03               	skipz
  1499  01D1  29D4               	goto	u3095
  1500  01D2  3003               	movlw	3
  1501  01D3  026B               	subwf	main@i_445^(0+256),w
  1502  01D4                     u3095:	
  1503  01D4  1C03               	skipc
  1504  01D5  29D7               	goto	u3091
  1505  01D6  29D8               	goto	u3090
  1506  01D7                     u3091:	
  1507  01D7  29D9               	goto	l2990
  1508  01D8                     u3090:	
  1509  01D8  2A86               	goto	l2998
  1510  01D9                     l2990:	
  1511                           
  1512                           ;main.c: 240:                 {;main.c: 241:                     if ((*(Semafori[l])).ti
      +                          mes[i] != (*(Semafori[l])).new_times[i])
  1513  01D9  1283               	bcf	3,5	;RP0=0, select bank2
  1514  01DA  1703               	bsf	3,6	;RP1=1, select bank2
  1515  01DB  0869               	movf	main@l^(0+256),w
  1516  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1517  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1518  01DE  00BD               	movwf	??_main
  1519  01DF  073D               	addwf	??_main,w
  1520  01E0  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1521  01E1  0084               	movwf	4
  1522  01E2  1383               	bcf	3,7	;select IRP bank1
  1523  01E3  0800               	movf	0,w
  1524  01E4  00BE               	movwf	??_main+1
  1525  01E5  0A84               	incf	4,f
  1526  01E6  0800               	movf	0,w
  1527  01E7  00BF               	movwf	??_main+2
  1528  01E8  1283               	bcf	3,5	;RP0=0, select bank2
  1529  01E9  1703               	bsf	3,6	;RP1=1, select bank2
  1530  01EA  086B               	movf	main@i_445^(0+256),w
  1531  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1532  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  1533  01ED  00C0               	movwf	??_main+3
  1534  01EE  0740               	addwf	??_main+3,w
  1535  01EF  073E               	addwf	??_main+1,w
  1536  01F0  00C1               	movwf	??_main+4
  1537  01F1  083F               	movf	??_main+2,w
  1538  01F2  1803               	skipnc
  1539  01F3  3E01               	addlw	1
  1540  01F4  00C2               	movwf	??_main+5
  1541  01F5  0841               	movf	??_main+4,w
  1542  01F6  0084               	movwf	4
  1543  01F7  1783               	bsf	3,7
  1544  01F8  1C42               	btfss	??_main+5,0
  1545  01F9  1383               	bcf	3,7
  1546  01FA  0800               	movf	0,w
  1547  01FB  00C3               	movwf	??_main+6
  1548  01FC  0A84               	incf	4,f
  1549  01FD  0800               	movf	0,w
  1550  01FE  00C4               	movwf	??_main+7
  1551  01FF  1283               	bcf	3,5	;RP0=0, select bank2
  1552  0200  1703               	bsf	3,6	;RP1=1, select bank2
  1553  0201  0869               	movf	main@l^(0+256),w
  1554  0202  1283               	bcf	3,5	;RP0=0, select bank0
  1555  0203  1303               	bcf	3,6	;RP1=0, select bank0
  1556  0204  00C5               	movwf	??_main+8
  1557  0205  0745               	addwf	??_main+8,w
  1558  0206  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1559  0207  0084               	movwf	4
  1560  0208  1383               	bcf	3,7	;select IRP bank1
  1561  0209  0800               	movf	0,w
  1562  020A  00C6               	movwf	??_main+9
  1563  020B  0A84               	incf	4,f
  1564  020C  0800               	movf	0,w
  1565  020D  00C7               	movwf	??_main+10
  1566  020E  1283               	bcf	3,5	;RP0=0, select bank2
  1567  020F  1703               	bsf	3,6	;RP1=1, select bank2
  1568  0210  086B               	movf	main@i_445^(0+256),w
  1569  0211  1283               	bcf	3,5	;RP0=0, select bank0
  1570  0212  1303               	bcf	3,6	;RP1=0, select bank0
  1571  0213  00C8               	movwf	??_main+11
  1572  0214  0748               	addwf	??_main+11,w
  1573  0215  3E06               	addlw	6
  1574  0216  0746               	addwf	??_main+9,w
  1575  0217  00C9               	movwf	??_main+12
  1576  0218  0847               	movf	??_main+10,w
  1577  0219  1803               	skipnc
  1578  021A  3E01               	addlw	1
  1579  021B  00CA               	movwf	??_main+13
  1580  021C  0849               	movf	??_main+12,w
  1581  021D  0084               	movwf	4
  1582  021E  1783               	bsf	3,7
  1583  021F  1C4A               	btfss	??_main+13,0
  1584  0220  1383               	bcf	3,7
  1585  0221  0800               	movf	0,w
  1586  0222  00CB               	movwf	??_main+14
  1587  0223  0A84               	incf	4,f
  1588  0224  0800               	movf	0,w
  1589  0225  00CC               	movwf	??_main+15
  1590  0226  0844               	movf	??_main+7,w
  1591  0227  064C               	xorwf	??_main+15,w
  1592  0228  1D03               	skipz
  1593  0229  2A2C               	goto	u3105
  1594  022A  0843               	movf	??_main+6,w
  1595  022B  064B               	xorwf	??_main+14,w
  1596  022C                     u3105:	
  1597  022C  1903               	skipnz
  1598  022D  2A2F               	goto	u3101
  1599  022E  2A30               	goto	u3100
  1600  022F                     u3101:	
  1601  022F  2A7D               	goto	l2994
  1602  0230                     u3100:	
  1603  0230                     l2992:	
  1604                           
  1605                           ;main.c: 242:                     {;main.c: 243:                         (*(Semafori[l])
      +                          ).times[i] = (*(Semafori[l])).new_times[i];
  1606  0230  1283               	bcf	3,5	;RP0=0, select bank2
  1607  0231  1703               	bsf	3,6	;RP1=1, select bank2
  1608  0232  0869               	movf	main@l^(0+256),w
  1609  0233  1283               	bcf	3,5	;RP0=0, select bank0
  1610  0234  1303               	bcf	3,6	;RP1=0, select bank0
  1611  0235  00BD               	movwf	??_main
  1612  0236  073D               	addwf	??_main,w
  1613  0237  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1614  0238  0084               	movwf	4
  1615  0239  1383               	bcf	3,7	;select IRP bank1
  1616  023A  0800               	movf	0,w
  1617  023B  00BE               	movwf	??_main+1
  1618  023C  0A84               	incf	4,f
  1619  023D  0800               	movf	0,w
  1620  023E  00BF               	movwf	??_main+2
  1621  023F  1283               	bcf	3,5	;RP0=0, select bank2
  1622  0240  1703               	bsf	3,6	;RP1=1, select bank2
  1623  0241  086B               	movf	main@i_445^(0+256),w
  1624  0242  1283               	bcf	3,5	;RP0=0, select bank0
  1625  0243  1303               	bcf	3,6	;RP1=0, select bank0
  1626  0244  00C0               	movwf	??_main+3
  1627  0245  0740               	addwf	??_main+3,w
  1628  0246  073E               	addwf	??_main+1,w
  1629  0247  00C1               	movwf	??_main+4
  1630  0248  083F               	movf	??_main+2,w
  1631  0249  1803               	skipnc
  1632  024A  3E01               	addlw	1
  1633  024B  00C2               	movwf	??_main+5
  1634  024C  0841               	movf	??_main+4,w
  1635  024D  0084               	movwf	4
  1636  024E  1783               	bsf	3,7
  1637  024F  1C42               	btfss	??_main+5,0
  1638  0250  1383               	bcf	3,7
  1639  0251  0800               	movf	0,w
  1640  0252  00C3               	movwf	??_main+6
  1641  0253  0A84               	incf	4,f
  1642  0254  0800               	movf	0,w
  1643  0255  00C4               	movwf	??_main+7
  1644  0256  1283               	bcf	3,5	;RP0=0, select bank2
  1645  0257  1703               	bsf	3,6	;RP1=1, select bank2
  1646  0258  0869               	movf	main@l^(0+256),w
  1647  0259  1283               	bcf	3,5	;RP0=0, select bank0
  1648  025A  1303               	bcf	3,6	;RP1=0, select bank0
  1649  025B  00C5               	movwf	??_main+8
  1650  025C  0745               	addwf	??_main+8,w
  1651  025D  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1652  025E  0084               	movwf	4
  1653  025F  1383               	bcf	3,7	;select IRP bank1
  1654  0260  0800               	movf	0,w
  1655  0261  00C6               	movwf	??_main+9
  1656  0262  0A84               	incf	4,f
  1657  0263  0800               	movf	0,w
  1658  0264  00C7               	movwf	??_main+10
  1659  0265  1283               	bcf	3,5	;RP0=0, select bank2
  1660  0266  1703               	bsf	3,6	;RP1=1, select bank2
  1661  0267  086B               	movf	main@i_445^(0+256),w
  1662  0268  1283               	bcf	3,5	;RP0=0, select bank0
  1663  0269  1303               	bcf	3,6	;RP1=0, select bank0
  1664  026A  00C8               	movwf	??_main+11
  1665  026B  0748               	addwf	??_main+11,w
  1666  026C  3E06               	addlw	6
  1667  026D  0746               	addwf	??_main+9,w
  1668  026E  00C9               	movwf	??_main+12
  1669  026F  0847               	movf	??_main+10,w
  1670  0270  1803               	skipnc
  1671  0271  3E01               	addlw	1
  1672  0272  00CA               	movwf	??_main+13
  1673  0273  0849               	movf	??_main+12,w
  1674  0274  0084               	movwf	4
  1675  0275  1783               	bsf	3,7
  1676  0276  1C4A               	btfss	??_main+13,0
  1677  0277  1383               	bcf	3,7
  1678  0278  0843               	movf	??_main+6,w
  1679  0279  0080               	movwf	0
  1680  027A  0A84               	incf	4,f
  1681  027B  0844               	movf	??_main+7,w
  1682  027C  0080               	movwf	0
  1683  027D                     l2994:	
  1684                           
  1685                           ;main.c: 245:                 }
  1686  027D  3001               	movlw	1
  1687  027E  1283               	bcf	3,5	;RP0=0, select bank2
  1688  027F  1703               	bsf	3,6	;RP1=1, select bank2
  1689  0280  07EB               	addwf	main@i_445^(0+256),f
  1690  0281  1803               	skipnc
  1691  0282  0AEC               	incf	(main@i_445+1)^(0+256),f
  1692  0283  3000               	movlw	0
  1693  0284  07EC               	addwf	(main@i_445+1)^(0+256),f
  1694  0285  29CB               	goto	l2986
  1695  0286                     l2998:	
  1696                           
  1697                           ;main.c: 246:             }
  1698  0286  3001               	movlw	1
  1699  0287  1283               	bcf	3,5	;RP0=0, select bank2
  1700  0288  1703               	bsf	3,6	;RP1=1, select bank2
  1701  0289  07E9               	addwf	main@l^(0+256),f
  1702  028A  1803               	skipnc
  1703  028B  0AEA               	incf	(main@l+1)^(0+256),f
  1704  028C  3000               	movlw	0
  1705  028D  07EA               	addwf	(main@l+1)^(0+256),f
  1706  028E  29B9               	goto	l2980
  1707  028F                     l229:	
  1708                           ;main.c: 247:         }
  1709                           
  1710                           
  1711                           ;main.c: 251:         if (secondPassed.Bit && cycled.Bit)
  1712  028F  1283               	bcf	3,5	;RP0=0, select bank0
  1713  0290  1303               	bcf	3,6	;RP1=0, select bank0
  1714  0291  1C61               	btfss	_secondPassed,0
  1715  0292  2A94               	goto	u3111
  1716  0293  2A95               	goto	u3110
  1717  0294                     u3111:	
  1718  0294  2B53               	goto	l3020
  1719  0295                     u3110:	
  1720  0295                     l3002:	
  1721  0295  1C60               	btfss	_cycled,0
  1722  0296  2A98               	goto	u3121
  1723  0297  2A99               	goto	u3120
  1724  0298                     u3121:	
  1725  0298  2B53               	goto	l3020
  1726  0299                     u3120:	
  1727  0299                     l3004:	
  1728                           
  1729                           ;main.c: 252:         {;main.c: 253:             time++;
  1730  0299  3001               	movlw	1
  1731  029A  1283               	bcf	3,5	;RP0=0, select bank2
  1732  029B  1703               	bsf	3,6	;RP1=1, select bank2
  1733  029C  07E2               	addwf	main@time^(0+256),f
  1734  029D  1803               	skipnc
  1735  029E  0AE3               	incf	(main@time+1)^(0+256),f
  1736  029F  3000               	movlw	0
  1737  02A0  07E3               	addwf	(main@time+1)^(0+256),f
  1738  02A1                     l3006:	
  1739                           
  1740                           ;main.c: 254:             endCiclo.Bit = 0;
  1741  02A1  1061               	bcf	main@endCiclo^(0+256),0
  1742  02A2                     l3008:	
  1743                           
  1744                           ;main.c: 256:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  1745  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  1746  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  1747  02A4  0855               	movf	_n_semafori,w
  1748  02A5  00BD               	movwf	??_main
  1749  02A6  073D               	addwf	??_main,w
  1750  02A7  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1751  02A8  0084               	movwf	4
  1752  02A9  1383               	bcf	3,7	;select IRP bank1
  1753  02AA  0800               	movf	0,w
  1754  02AB  00BE               	movwf	??_main+1
  1755  02AC  0A84               	incf	4,f
  1756  02AD  0800               	movf	0,w
  1757  02AE  00BF               	movwf	??_main+2
  1758  02AF  1283               	bcf	3,5	;RP0=0, select bank2
  1759  02B0  1703               	bsf	3,6	;RP1=1, select bank2
  1760  02B1  0864               	movf	main@lux_select^(0+256),w
  1761  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1762  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  1763  02B4  00C0               	movwf	??_main+3
  1764  02B5  0740               	addwf	??_main+3,w
  1765  02B6  3E06               	addlw	6
  1766  02B7  073E               	addwf	??_main+1,w
  1767  02B8  00C1               	movwf	??_main+4
  1768  02B9  083F               	movf	??_main+2,w
  1769  02BA  1803               	skipnc
  1770  02BB  3E01               	addlw	1
  1771  02BC  00C2               	movwf	??_main+5
  1772  02BD  0841               	movf	??_main+4,w
  1773  02BE  0084               	movwf	4
  1774  02BF  1783               	bsf	3,7
  1775  02C0  1C42               	btfss	??_main+5,0
  1776  02C1  1383               	bcf	3,7
  1777  02C2  0800               	movf	0,w
  1778  02C3  00C3               	movwf	??_main+6
  1779  02C4  0A84               	incf	4,f
  1780  02C5  0800               	movf	0,w
  1781  02C6  00C4               	movwf	??_main+7
  1782  02C7  1283               	bcf	3,5	;RP0=0, select bank2
  1783  02C8  1703               	bsf	3,6	;RP1=1, select bank2
  1784  02C9  0862               	movf	main@time^(0+256),w
  1785  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  1786  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  1787  02CC  0243               	subwf	??_main+6,w
  1788  02CD  00C5               	movwf	??_main+8
  1789  02CE  1283               	bcf	3,5	;RP0=0, select bank2
  1790  02CF  1703               	bsf	3,6	;RP1=1, select bank2
  1791  02D0  0863               	movf	(main@time+1)^(0+256),w
  1792  02D1  1C03               	skipc
  1793  02D2  0A63               	incf	(main@time+1)^(0+256),w
  1794  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  1795  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  1796  02D5  0244               	subwf	??_main+7,w
  1797  02D6  00C6               	movwf	??_main+9
  1798  02D7  1FC6               	btfss	??_main+9,7
  1799  02D8  2ADA               	goto	u3131
  1800  02D9  2ADB               	goto	u3130
  1801  02DA                     u3131:	
  1802  02DA  2ADE               	goto	l3012
  1803  02DB                     u3130:	
  1804  02DB                     l3010:	
  1805                           
  1806                           ;main.c: 257:             {;main.c: 258:                 endCiclo.Bit = 1;
  1807  02DB  1283               	bcf	3,5	;RP0=0, select bank2
  1808  02DC  1703               	bsf	3,6	;RP1=1, select bank2
  1809  02DD  1461               	bsf	main@endCiclo^(0+256),0
  1810  02DE                     l3012:	
  1811                           
  1812                           ;main.c: 261:             if (lux_select == 2 && time == (*Semafori[n_semafori]).times[2
      +                          ])
  1813  02DE  3002               	movlw	2
  1814  02DF  1283               	bcf	3,5	;RP0=0, select bank2
  1815  02E0  1703               	bsf	3,6	;RP1=1, select bank2
  1816  02E1  0664               	xorwf	main@lux_select^(0+256),w
  1817  02E2  1D03               	btfss	3,2
  1818  02E3  2AE5               	goto	u3141
  1819  02E4  2AE6               	goto	u3140
  1820  02E5                     u3141:	
  1821  02E5  2B1A               	goto	l3018
  1822  02E6                     u3140:	
  1823  02E6                     l3014:	
  1824  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1825  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1826  02E8  0855               	movf	_n_semafori,w
  1827  02E9  00BD               	movwf	??_main
  1828  02EA  073D               	addwf	??_main,w
  1829  02EB  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1830  02EC  0084               	movwf	4
  1831  02ED  1383               	bcf	3,7	;select IRP bank1
  1832  02EE  0800               	movf	0,w
  1833  02EF  00BE               	movwf	??_main+1
  1834  02F0  0A84               	incf	4,f
  1835  02F1  0800               	movf	0,w
  1836  02F2  00BF               	movwf	??_main+2
  1837  02F3  083E               	movf	??_main+1,w
  1838  02F4  3E0A               	addlw	10
  1839  02F5  00C0               	movwf	??_main+3
  1840  02F6  083F               	movf	??_main+2,w
  1841  02F7  1803               	skipnc
  1842  02F8  3E01               	addlw	1
  1843  02F9  3E00               	addlw	0
  1844  02FA  00C1               	movwf	??_main+4
  1845  02FB  0840               	movf	??_main+3,w
  1846  02FC  0084               	movwf	4
  1847  02FD  1783               	bsf	3,7
  1848  02FE  1C41               	btfss	??_main+4,0
  1849  02FF  1383               	bcf	3,7
  1850  0300  0800               	movf	0,w
  1851  0301  00C2               	movwf	??_main+5
  1852  0302  0A84               	incf	4,f
  1853  0303  0800               	movf	0,w
  1854  0304  00C3               	movwf	??_main+6
  1855  0305  1283               	bcf	3,5	;RP0=0, select bank2
  1856  0306  1703               	bsf	3,6	;RP1=1, select bank2
  1857  0307  0863               	movf	(main@time+1)^(0+256),w
  1858  0308  1283               	bcf	3,5	;RP0=0, select bank0
  1859  0309  1303               	bcf	3,6	;RP1=0, select bank0
  1860  030A  0643               	xorwf	??_main+6,w
  1861  030B  1D03               	skipz
  1862  030C  2B13               	goto	u3155
  1863  030D  1283               	bcf	3,5	;RP0=0, select bank2
  1864  030E  1703               	bsf	3,6	;RP1=1, select bank2
  1865  030F  0862               	movf	main@time^(0+256),w
  1866  0310  1283               	bcf	3,5	;RP0=0, select bank0
  1867  0311  1303               	bcf	3,6	;RP1=0, select bank0
  1868  0312  0642               	xorwf	??_main+5,w
  1869  0313                     u3155:	
  1870  0313  1D03               	skipz
  1871  0314  2B16               	goto	u3151
  1872  0315  2B17               	goto	u3150
  1873  0316                     u3151:	
  1874  0316  2B1A               	goto	l3018
  1875  0317                     u3150:	
  1876  0317                     l3016:	
  1877                           
  1878                           ;main.c: 262:             {;main.c: 263:                 endCiclo.Bit = 1;
  1879  0317  1283               	bcf	3,5	;RP0=0, select bank2
  1880  0318  1703               	bsf	3,6	;RP1=1, select bank2
  1881  0319  1461               	bsf	main@endCiclo^(0+256),0
  1882  031A                     l3018:	
  1883                           
  1884                           ;main.c: 266:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  1885  031A  1303               	bcf	3,6	;RP1=0, select bank0
  1886  031B  0855               	movf	_n_semafori,w
  1887  031C  00BD               	movwf	??_main
  1888  031D  073D               	addwf	??_main,w
  1889  031E  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1890  031F  0084               	movwf	4
  1891  0320  1383               	bcf	3,7	;select IRP bank1
  1892  0321  0800               	movf	0,w
  1893  0322  00BE               	movwf	??_main+1
  1894  0323  0A84               	incf	4,f
  1895  0324  0800               	movf	0,w
  1896  0325  00BF               	movwf	??_main+2
  1897  0326  1283               	bcf	3,5	;RP0=0, select bank2
  1898  0327  1703               	bsf	3,6	;RP1=1, select bank2
  1899  0328  0864               	movf	main@lux_select^(0+256),w
  1900  0329  1283               	bcf	3,5	;RP0=0, select bank0
  1901  032A  1303               	bcf	3,6	;RP1=0, select bank0
  1902  032B  00C0               	movwf	??_main+3
  1903  032C  0740               	addwf	??_main+3,w
  1904  032D  3E06               	addlw	6
  1905  032E  073E               	addwf	??_main+1,w
  1906  032F  00C1               	movwf	??_main+4
  1907  0330  083F               	movf	??_main+2,w
  1908  0331  1803               	skipnc
  1909  0332  3E01               	addlw	1
  1910  0333  00C2               	movwf	??_main+5
  1911  0334  0841               	movf	??_main+4,w
  1912  0335  0084               	movwf	4
  1913  0336  1783               	bsf	3,7
  1914  0337  1C42               	btfss	??_main+5,0
  1915  0338  1383               	bcf	3,7
  1916  0339  0800               	movf	0,w
  1917  033A  00C3               	movwf	??_main+6
  1918  033B  0A84               	incf	4,f
  1919  033C  0800               	movf	0,w
  1920  033D  00C4               	movwf	??_main+7
  1921  033E  1283               	bcf	3,5	;RP0=0, select bank2
  1922  033F  1703               	bsf	3,6	;RP1=1, select bank2
  1923  0340  0862               	movf	main@time^(0+256),w
  1924  0341  1283               	bcf	3,5	;RP0=0, select bank0
  1925  0342  1303               	bcf	3,6	;RP1=0, select bank0
  1926  0343  0243               	subwf	??_main+6,w
  1927  0344  00B0               	movwf	GetDigits@Time
  1928  0345  1283               	bcf	3,5	;RP0=0, select bank2
  1929  0346  1703               	bsf	3,6	;RP1=1, select bank2
  1930  0347  0863               	movf	(main@time+1)^(0+256),w
  1931  0348  1C03               	skipc
  1932  0349  0A63               	incf	(main@time+1)^(0+256),w
  1933  034A  1283               	bcf	3,5	;RP0=0, select bank0
  1934  034B  1303               	bcf	3,6	;RP1=0, select bank0
  1935  034C  0244               	subwf	??_main+7,w
  1936  034D  00B1               	movwf	GetDigits@Time+1
  1937  034E  120A  158A  26F8  120A  118A  	fcall	_GetDigits
  1938  0353                     l3020:	
  1939                           
  1940                           ;main.c: 270:         if (disp != old_disp)
  1941  0353  1283               	bcf	3,5	;RP0=0, select bank0
  1942  0354  1303               	bcf	3,6	;RP1=0, select bank0
  1943  0355  085B               	movf	_disp,w
  1944  0356  065C               	xorwf	_old_disp,w
  1945  0357  1903               	skipnz
  1946  0358  2B5A               	goto	u3161
  1947  0359  2B5B               	goto	u3160
  1948  035A                     u3161:	
  1949  035A  2BC0               	goto	l3040
  1950  035B                     u3160:	
  1951  035B                     l3022:	
  1952                           
  1953                           ;main.c: 271:         {;main.c: 272:             old_disp = disp;
  1954  035B  085B               	movf	_disp,w
  1955  035C  00BD               	movwf	??_main
  1956  035D  083D               	movf	??_main,w
  1957  035E  00DC               	movwf	_old_disp
  1958                           
  1959                           ;main.c: 273:             switch (disp)
  1960  035F  2BAD               	goto	l3038
  1961  0360                     l3024:	
  1962                           
  1963                           ;main.c: 276:                 if (centinaia > 0)
  1964  0360  085D               	movf	_centinaia,w
  1965  0361  1903               	btfsc	3,2
  1966  0362  2B64               	goto	u3171
  1967  0363  2B65               	goto	u3170
  1968  0364                     u3171:	
  1969  0364  2BC0               	goto	l3040
  1970  0365                     u3170:	
  1971  0365                     l3026:	
  1972                           
  1973                           ;main.c: 277:                 {;main.c: 278:                     SetDisplay(1, 0, 0, dis
      +                          play[centinaia]);
  1974  0365  01A0               	clrf	SetDisplay@d2
  1975  0366  01A1               	clrf	SetDisplay@d3
  1976  0367  085D               	movf	_centinaia,w
  1977  0368  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  1978  0369  0084               	movwf	4
  1979  036A  120A  158A  2000  120A  118A  	fcall	stringdir
  1980  036F  00BD               	movwf	??_main
  1981  0370  083D               	movf	??_main,w
  1982  0371  00A2               	movwf	SetDisplay@value
  1983  0372  3001               	movlw	1
  1984  0373  120A  158A  2479  120A  118A  	fcall	_SetDisplay
  1985  0378  2BC0               	goto	l3040
  1986  0379                     l3028:	
  1987                           
  1988                           ;main.c: 282:                 if (decine > 0 || centinaia > 0)
  1989  0379  085E               	movf	_decine,w
  1990  037A  1D03               	btfss	3,2
  1991  037B  2B7D               	goto	u3181
  1992  037C  2B7E               	goto	u3180
  1993  037D                     u3181:	
  1994  037D  2B83               	goto	l3032
  1995  037E                     u3180:	
  1996  037E                     l3030:	
  1997  037E  085D               	movf	_centinaia,w
  1998  037F  1903               	btfsc	3,2
  1999  0380  2B82               	goto	u3191
  2000  0381  2B83               	goto	u3190
  2001  0382                     u3191:	
  2002  0382  2BC0               	goto	l3040
  2003  0383                     u3190:	
  2004  0383                     l3032:	
  2005                           
  2006                           ;main.c: 283:                 {;main.c: 284:                     SetDisplay(0, 1, 0, dis
      +                          play[decine]);
  2007  0383  01A0               	clrf	SetDisplay@d2
  2008  0384  0AA0               	incf	SetDisplay@d2,f
  2009  0385  01A1               	clrf	SetDisplay@d3
  2010  0386  085E               	movf	_decine,w
  2011  0387  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2012  0388  0084               	movwf	4
  2013  0389  120A  158A  2000  120A  118A  	fcall	stringdir
  2014  038E  00BD               	movwf	??_main
  2015  038F  083D               	movf	??_main,w
  2016  0390  00A2               	movwf	SetDisplay@value
  2017  0391  3000               	movlw	0
  2018  0392  120A  158A  2479  120A  118A  	fcall	_SetDisplay
  2019  0397  2BC0               	goto	l3040
  2020  0398                     l3034:	
  2021                           
  2022                           ;main.c: 288:                 SetDisplay(0, 0, 1, display[unita]);
  2023  0398  01A0               	clrf	SetDisplay@d2
  2024  0399  01A1               	clrf	SetDisplay@d3
  2025  039A  0AA1               	incf	SetDisplay@d3,f
  2026  039B  085F               	movf	_unita,w
  2027  039C  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2028  039D  0084               	movwf	4
  2029  039E  120A  158A  2000  120A  118A  	fcall	stringdir
  2030  03A3  00BD               	movwf	??_main
  2031  03A4  083D               	movf	??_main,w
  2032  03A5  00A2               	movwf	SetDisplay@value
  2033  03A6  3000               	movlw	0
  2034  03A7  120A  158A  2479  120A  118A  	fcall	_SetDisplay
  2035                           
  2036                           ;main.c: 289:                 break;
  2037  03AC  2BC0               	goto	l3040
  2038  03AD                     l3038:	
  2039  03AD  085B               	movf	_disp,w
  2040  03AE  00BD               	movwf	??_main
  2041  03AF  01BE               	clrf	??_main+1
  2042                           
  2043                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2044                           ; Switch size 1, requested type "simple"
  2045                           ; Number of cases is 1, Range of values is 0 to 0
  2046                           ; switch strategies available:
  2047                           ; Name         Instructions Cycles
  2048                           ; simple_byte            4     3 (average)
  2049                           ; direct_byte           11     8 (fixed)
  2050                           ; jumptable            260     6 (fixed)
  2051                           ;	Chosen strategy is simple_byte
  2052  03B0  083E               	movf	??_main+1,w
  2053  03B1  3A00               	xorlw	0	; case 0
  2054  03B2  1903               	skipnz
  2055  03B3  2BB5               	goto	l3190
  2056  03B4  2BC0               	goto	l3040
  2057  03B5                     l3190:	
  2058                           
  2059                           ; Switch size 1, requested type "simple"
  2060                           ; Number of cases is 3, Range of values is 0 to 2
  2061                           ; switch strategies available:
  2062                           ; Name         Instructions Cycles
  2063                           ; simple_byte           10     6 (average)
  2064                           ; direct_byte           17     8 (fixed)
  2065                           ; jumptable            260     6 (fixed)
  2066                           ;	Chosen strategy is simple_byte
  2067  03B5  083D               	movf	??_main,w
  2068  03B6  3A00               	xorlw	0	; case 0
  2069  03B7  1903               	skipnz
  2070  03B8  2B60               	goto	l3024
  2071  03B9  3A01               	xorlw	1	; case 1
  2072  03BA  1903               	skipnz
  2073  03BB  2B79               	goto	l3028
  2074  03BC  3A03               	xorlw	3	; case 2
  2075  03BD  1903               	skipnz
  2076  03BE  2B98               	goto	l3034
  2077  03BF  2BC0               	goto	l3040
  2078  03C0                     l3040:	
  2079                           
  2080                           ;main.c: 292:         disp = (disp + 1) % 3;
  2081  03C0  3003               	movlw	3
  2082  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  2083  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  2084  03C3  00A0               	movwf	___awmod@divisor
  2085  03C4  3000               	movlw	0
  2086  03C5  00A1               	movwf	___awmod@divisor+1
  2087  03C6  085B               	movf	_disp,w
  2088  03C7  3E01               	addlw	1
  2089  03C8  00A2               	movwf	___awmod@dividend
  2090  03C9  3000               	movlw	0
  2091  03CA  1803               	skipnc
  2092  03CB  3001               	movlw	1
  2093  03CC  00A3               	movwf	___awmod@dividend+1
  2094  03CD  120A  158A  2634  120A  118A  	fcall	___awmod
  2095  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  2096  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  2097  03D4  0820               	movf	?___awmod,w
  2098  03D5  00BD               	movwf	??_main
  2099  03D6  083D               	movf	??_main,w
  2100  03D7  00DB               	movwf	_disp
  2101  03D8                     l3042:	
  2102                           
  2103                           ;main.c: 298:         if (secondPassed.Bit && cycled.Bit)
  2104  03D8  1C61               	btfss	_secondPassed,0
  2105  03D9  2BDB               	goto	u3201
  2106  03DA  2BDC               	goto	u3200
  2107  03DB                     u3201:	
  2108  03DB  2BE2               	goto	l251
  2109  03DC                     u3200:	
  2110  03DC                     l3044:	
  2111  03DC  1C60               	btfss	_cycled,0
  2112  03DD  2BDF               	goto	u3211
  2113  03DE  2BE0               	goto	u3210
  2114  03DF                     u3211:	
  2115  03DF  2BE2               	goto	l251
  2116  03E0                     u3210:	
  2117  03E0                     l3046:	
  2118                           
  2119                           ;main.c: 299:         {;main.c: 300:             secondPassed.Bit = 0;
  2120  03E0  1061               	bcf	_secondPassed,0
  2121                           
  2122                           ;main.c: 301:             cycled.Bit = 0;
  2123  03E1  1060               	bcf	_cycled,0
  2124  03E2                     l251:	
  2125                           ;main.c: 302:         }
  2126                           
  2127                           
  2128                           ;main.c: 304:         if (secondPassed.Bit && !cycled.Bit)
  2129  03E2  1C61               	btfss	_secondPassed,0
  2130  03E3  2BE5               	goto	u3221
  2131  03E4  2BE6               	goto	u3220
  2132  03E5                     u3221:	
  2133  03E5  2BEB               	goto	l3052
  2134  03E6                     u3220:	
  2135  03E6                     l3048:	
  2136  03E6  1860               	btfsc	_cycled,0
  2137  03E7  2BE9               	goto	u3231
  2138  03E8  2BEA               	goto	u3230
  2139  03E9                     u3231:	
  2140  03E9  2BEB               	goto	l3052
  2141  03EA                     u3230:	
  2142  03EA                     l3050:	
  2143                           
  2144                           ;main.c: 305:         {;main.c: 306:             cycled.Bit = 1;
  2145  03EA  1460               	bsf	_cycled,0
  2146  03EB                     l3052:	
  2147                           
  2148                           ;main.c: 310:         if ((dataFromGateway[0] & 0x7F) == 0x08)
  2149  03EB  307F               	movlw	127
  2150  03EC  1683               	bsf	3,5	;RP0=1, select bank1
  2151  03ED  1303               	bcf	3,6	;RP1=0, select bank1
  2152  03EE  0520               	andwf	_dataFromGateway^(0+128),w
  2153  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2154  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2155  03F1  00BD               	movwf	??_main
  2156  03F2  3008               	movlw	8
  2157  03F3  063D               	xorwf	??_main,w
  2158  03F4  1D03               	btfss	3,2
  2159  03F5  2BF7               	goto	u3241
  2160  03F6  2BF8               	goto	u3240
  2161  03F7                     u3241:	
  2162  03F7  2CAE               	goto	l3078
  2163  03F8                     u3240:	
  2164  03F8                     l3054:	
  2165                           
  2166                           ;main.c: 311:         {;main.c: 312:             for (int i = 0; i < 4; i++)
  2167  03F8  1283               	bcf	3,5	;RP0=0, select bank2
  2168  03F9  1703               	bsf	3,6	;RP1=1, select bank2
  2169  03FA  01ED               	clrf	main@i_446^(0+256)
  2170  03FB  01EE               	clrf	(main@i_446+1)^(0+256)
  2171  03FC                     l3056:	
  2172  03FC  086E               	movf	(main@i_446+1)^(0+256),w
  2173  03FD  3A80               	xorlw	128
  2174  03FE  00FF               	movwf	btemp+1
  2175  03FF  3080               	movlw	128
  2176  0400  027F               	subwf	btemp+1,w
  2177  0401  1D03               	skipz
  2178  0402  2C05               	goto	u3255
  2179  0403  3004               	movlw	4
  2180  0404  026D               	subwf	main@i_446^(0+256),w
  2181  0405                     u3255:	
  2182  0405  1C03               	skipc
  2183  0406  2C08               	goto	u3251
  2184  0407  2C09               	goto	u3250
  2185  0408                     u3251:	
  2186  0408  2C0A               	goto	l3060
  2187  0409                     u3250:	
  2188  0409  2C86               	goto	l3066
  2189  040A                     l3060:	
  2190                           
  2191                           ;main.c: 313:             {;main.c: 314:                 sendByte((0x01 << (i + 1)), 0x0
      +                          1, motorcycle[i]);
  2192  040A  1283               	bcf	3,5	;RP0=0, select bank0
  2193  040B  1303               	bcf	3,6	;RP1=0, select bank0
  2194  040C  01B4               	clrf	sendByte@byte1
  2195  040D  0AB4               	incf	sendByte@byte1,f
  2196  040E  1283               	bcf	3,5	;RP0=0, select bank2
  2197  040F  1703               	bsf	3,6	;RP1=1, select bank2
  2198  0410  086D               	movf	main@i_446^(0+256),w
  2199  0411  3E51               	addlw	(low (_motorcycle| 0))& (0+255)
  2200  0412  0084               	movwf	4
  2201  0413  1383               	bcf	3,7	;select IRP bank0
  2202  0414  0800               	movf	0,w
  2203  0415  1283               	bcf	3,5	;RP0=0, select bank0
  2204  0416  1303               	bcf	3,6	;RP1=0, select bank0
  2205  0417  00BD               	movwf	??_main
  2206  0418  083D               	movf	??_main,w
  2207  0419  00B5               	movwf	sendByte@valore
  2208  041A  3001               	movlw	1
  2209  041B  00BE               	movwf	??_main+1
  2210  041C  1283               	bcf	3,5	;RP0=0, select bank2
  2211  041D  1703               	bsf	3,6	;RP1=1, select bank2
  2212  041E  086D               	movf	main@i_446^(0+256),w
  2213  041F  3E01               	addlw	1
  2214  0420  3E01               	addlw	1
  2215  0421  1283               	bcf	3,5	;RP0=0, select bank0
  2216  0422  1303               	bcf	3,6	;RP1=0, select bank0
  2217  0423  2C26               	goto	u3264
  2218  0424                     u3265:	
  2219  0424  1003               	clrc
  2220  0425  0DBE               	rlf	??_main+1,f
  2221  0426                     u3264:	
  2222  0426  3EFF               	addlw	-1
  2223  0427  1D03               	skipz
  2224  0428  2C24               	goto	u3265
  2225  0429  083E               	movf	??_main+1,w
  2226  042A  120A  158A  2561  120A  118A  	fcall	_sendByte
  2227                           
  2228                           ;main.c: 315:                 sendByte((0x01 << (i + 1)), 0x10, car[i]);
  2229  042F  3010               	movlw	16
  2230  0430  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0431  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0432  00BD               	movwf	??_main
  2233  0433  083D               	movf	??_main,w
  2234  0434  00B4               	movwf	sendByte@byte1
  2235  0435  1283               	bcf	3,5	;RP0=0, select bank2
  2236  0436  1703               	bsf	3,6	;RP1=1, select bank2
  2237  0437  086D               	movf	main@i_446^(0+256),w
  2238  0438  3E4D               	addlw	(low (_car| 0))& (0+255)
  2239  0439  0084               	movwf	4
  2240  043A  1383               	bcf	3,7	;select IRP bank0
  2241  043B  0800               	movf	0,w
  2242  043C  1283               	bcf	3,5	;RP0=0, select bank0
  2243  043D  1303               	bcf	3,6	;RP1=0, select bank0
  2244  043E  00BE               	movwf	??_main+1
  2245  043F  083E               	movf	??_main+1,w
  2246  0440  00B5               	movwf	sendByte@valore
  2247  0441  3001               	movlw	1
  2248  0442  00BF               	movwf	??_main+2
  2249  0443  1283               	bcf	3,5	;RP0=0, select bank2
  2250  0444  1703               	bsf	3,6	;RP1=1, select bank2
  2251  0445  086D               	movf	main@i_446^(0+256),w
  2252  0446  3E01               	addlw	1
  2253  0447  3E01               	addlw	1
  2254  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2255  0449  1303               	bcf	3,6	;RP1=0, select bank0
  2256  044A  2C4D               	goto	u3274
  2257  044B                     u3275:	
  2258  044B  1003               	clrc
  2259  044C  0DBF               	rlf	??_main+2,f
  2260  044D                     u3274:	
  2261  044D  3EFF               	addlw	-1
  2262  044E  1D03               	skipz
  2263  044F  2C4B               	goto	u3275
  2264  0450  083F               	movf	??_main+2,w
  2265  0451  120A  158A  2561  120A  118A  	fcall	_sendByte
  2266                           
  2267                           ;main.c: 316:                 sendByte((0x01 << (i + 1)), 0x11, truck[i]);
  2268  0456  3011               	movlw	17
  2269  0457  1283               	bcf	3,5	;RP0=0, select bank0
  2270  0458  1303               	bcf	3,6	;RP1=0, select bank0
  2271  0459  00BD               	movwf	??_main
  2272  045A  083D               	movf	??_main,w
  2273  045B  00B4               	movwf	sendByte@byte1
  2274  045C  1283               	bcf	3,5	;RP0=0, select bank2
  2275  045D  1703               	bsf	3,6	;RP1=1, select bank2
  2276  045E  086D               	movf	main@i_446^(0+256),w
  2277  045F  3EAF               	addlw	(low (_truck| 0))& (0+255)
  2278  0460  0084               	movwf	4
  2279  0461  1383               	bcf	3,7	;select IRP bank1
  2280  0462  0800               	movf	0,w
  2281  0463  1283               	bcf	3,5	;RP0=0, select bank0
  2282  0464  1303               	bcf	3,6	;RP1=0, select bank0
  2283  0465  00BE               	movwf	??_main+1
  2284  0466  083E               	movf	??_main+1,w
  2285  0467  00B5               	movwf	sendByte@valore
  2286  0468  3001               	movlw	1
  2287  0469  00BF               	movwf	??_main+2
  2288  046A  1283               	bcf	3,5	;RP0=0, select bank2
  2289  046B  1703               	bsf	3,6	;RP1=1, select bank2
  2290  046C  086D               	movf	main@i_446^(0+256),w
  2291  046D  3E01               	addlw	1
  2292  046E  3E01               	addlw	1
  2293  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2294  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2295  0471  2C74               	goto	u3284
  2296  0472                     u3285:	
  2297  0472  1003               	clrc
  2298  0473  0DBF               	rlf	??_main+2,f
  2299  0474                     u3284:	
  2300  0474  3EFF               	addlw	-1
  2301  0475  1D03               	skipz
  2302  0476  2C72               	goto	u3285
  2303  0477  083F               	movf	??_main+2,w
  2304  0478  120A  158A  2561  120A  118A  	fcall	_sendByte
  2305  047D                     l3062:	
  2306                           
  2307                           ;main.c: 317:             }
  2308  047D  3001               	movlw	1
  2309  047E  1283               	bcf	3,5	;RP0=0, select bank2
  2310  047F  1703               	bsf	3,6	;RP1=1, select bank2
  2311  0480  07ED               	addwf	main@i_446^(0+256),f
  2312  0481  1803               	skipnc
  2313  0482  0AEE               	incf	(main@i_446+1)^(0+256),f
  2314  0483  3000               	movlw	0
  2315  0484  07EE               	addwf	(main@i_446+1)^(0+256),f
  2316  0485  2BFC               	goto	l3056
  2317  0486                     l3066:	
  2318                           
  2319                           ;main.c: 318:             for (int i = 0; i < 4; i++)
  2320  0486  1283               	bcf	3,5	;RP0=0, select bank2
  2321  0487  1703               	bsf	3,6	;RP1=1, select bank2
  2322  0488  01E7               	clrf	main@i_447^(0+256)
  2323  0489  01E8               	clrf	(main@i_447+1)^(0+256)
  2324  048A                     l3068:	
  2325  048A  0868               	movf	(main@i_447+1)^(0+256),w
  2326  048B  3A80               	xorlw	128
  2327  048C  00FF               	movwf	btemp+1
  2328  048D  3080               	movlw	128
  2329  048E  027F               	subwf	btemp+1,w
  2330  048F  1D03               	skipz
  2331  0490  2C93               	goto	u3295
  2332  0491  3004               	movlw	4
  2333  0492  0267               	subwf	main@i_447^(0+256),w
  2334  0493                     u3295:	
  2335  0493  1C03               	skipc
  2336  0494  2C96               	goto	u3291
  2337  0495  2C97               	goto	u3290
  2338  0496                     u3291:	
  2339  0496  2C98               	goto	l3072
  2340  0497                     u3290:	
  2341  0497  2CAE               	goto	l3078
  2342  0498                     l3072:	
  2343                           
  2344                           ;main.c: 319:             {;main.c: 320:                 motorcycle[i] = 0;
  2345  0498  1283               	bcf	3,5	;RP0=0, select bank2
  2346  0499  1703               	bsf	3,6	;RP1=1, select bank2
  2347  049A  0867               	movf	main@i_447^(0+256),w
  2348  049B  3E51               	addlw	(low (_motorcycle| 0))& (0+255)
  2349  049C  0084               	movwf	4
  2350  049D  1383               	bcf	3,7	;select IRP bank0
  2351  049E  0180               	clrf	0
  2352                           
  2353                           ;main.c: 321:                 car[i] = 0;
  2354  049F  0867               	movf	main@i_447^(0+256),w
  2355  04A0  3E4D               	addlw	(low (_car| 0))& (0+255)
  2356  04A1  0084               	movwf	4
  2357  04A2  0180               	clrf	0
  2358                           
  2359                           ;main.c: 322:                 truck[i] = 0;
  2360  04A3  0867               	movf	main@i_447^(0+256),w
  2361  04A4  3EAF               	addlw	(low (_truck| 0))& (0+255)
  2362  04A5  0084               	movwf	4
  2363  04A6  0180               	clrf	0
  2364  04A7                     l3074:	
  2365                           
  2366                           ;main.c: 323:             }
  2367  04A7  3001               	movlw	1
  2368  04A8  07E7               	addwf	main@i_447^(0+256),f
  2369  04A9  1803               	skipnc
  2370  04AA  0AE8               	incf	(main@i_447+1)^(0+256),f
  2371  04AB  3000               	movlw	0
  2372  04AC  07E8               	addwf	(main@i_447+1)^(0+256),f
  2373  04AD  2C8A               	goto	l3068
  2374  04AE                     l3078:	
  2375                           
  2376                           ;main.c: 332:         if ((dataFromGateway[0] & 0x7F) == 0x0A)
  2377  04AE  307F               	movlw	127
  2378  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  2379  04B0  1303               	bcf	3,6	;RP1=0, select bank1
  2380  04B1  0520               	andwf	_dataFromGateway^(0+128),w
  2381  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  2382  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  2383  04B4  00BD               	movwf	??_main
  2384  04B5  300A               	movlw	10
  2385  04B6  063D               	xorwf	??_main,w
  2386  04B7  1D03               	btfss	3,2
  2387  04B8  2CBA               	goto	u3301
  2388  04B9  2CBB               	goto	u3300
  2389  04BA                     u3301:	
  2390  04BA  288C               	goto	l2928
  2391  04BB                     u3300:	
  2392  04BB                     l3080:	
  2393                           
  2394                           ;main.c: 333:         {;main.c: 334:             temp = (char)map((ADC_Read(0) >> 2), 0,
      +                           255, -20, 60);
  2395  04BB  3000               	movlw	0
  2396  04BC  120A  158A  24A5  120A  118A  	fcall	_ADC_Read
  2397  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  2398  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  2399  04C3  0820               	movf	?_ADC_Read,w
  2400  04C4  00BD               	movwf	??_main
  2401  04C5  0821               	movf	?_ADC_Read+1,w
  2402  04C6  00BE               	movwf	??_main+1
  2403  04C7  0D3E               	rlf	??_main+1,w
  2404  04C8  0CBE               	rrf	??_main+1,f
  2405  04C9  0CBD               	rrf	??_main,f
  2406  04CA  0D3E               	rlf	??_main+1,w
  2407  04CB  0CBE               	rrf	??_main+1,f
  2408  04CC  0CBD               	rrf	??_main,f
  2409  04CD  083D               	movf	??_main,w
  2410  04CE  00B0               	movwf	map@x
  2411  04CF  083E               	movf	??_main+1,w
  2412  04D0  00B1               	movwf	map@x+1
  2413  04D1  3000               	movlw	0
  2414  04D2  00B2               	movwf	map@in_min
  2415  04D3  00B3               	movwf	map@in_min+1
  2416  04D4  30FF               	movlw	255
  2417  04D5  00B4               	movwf	map@in_max
  2418  04D6  3000               	movlw	0
  2419  04D7  00B5               	movwf	map@in_max+1
  2420  04D8  30EC               	movlw	236
  2421  04D9  00B6               	movwf	map@out_min
  2422  04DA  30FF               	movlw	255
  2423  04DB  00B7               	movwf	map@out_min+1
  2424  04DC  303C               	movlw	60
  2425  04DD  00B8               	movwf	map@out_max
  2426  04DE  3000               	movlw	0
  2427  04DF  00B9               	movwf	map@out_max+1
  2428  04E0  120A  158A  24F2  120A  118A  	fcall	_map
  2429  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  2430  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  2431  04E7  0830               	movf	?_map,w
  2432  04E8  00BF               	movwf	??_main+2
  2433  04E9  083F               	movf	??_main+2,w
  2434  04EA  1283               	bcf	3,5	;RP0=0, select bank2
  2435  04EB  1703               	bsf	3,6	;RP1=1, select bank2
  2436  04EC  00DE               	movwf	main@temp^(0+256)
  2437                           
  2438                           ;main.c: 335:             umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  2439  04ED  3001               	movlw	1
  2440  04EE  120A  158A  24A5  120A  118A  	fcall	_ADC_Read
  2441  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  2442  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  2443  04F5  0820               	movf	?_ADC_Read,w
  2444  04F6  00BD               	movwf	??_main
  2445  04F7  0821               	movf	?_ADC_Read+1,w
  2446  04F8  00BE               	movwf	??_main+1
  2447  04F9  0D3E               	rlf	??_main+1,w
  2448  04FA  0CBE               	rrf	??_main+1,f
  2449  04FB  0CBD               	rrf	??_main,f
  2450  04FC  0D3E               	rlf	??_main+1,w
  2451  04FD  0CBE               	rrf	??_main+1,f
  2452  04FE  0CBD               	rrf	??_main,f
  2453  04FF  083D               	movf	??_main,w
  2454  0500  00B0               	movwf	map@x
  2455  0501  083E               	movf	??_main+1,w
  2456  0502  00B1               	movwf	map@x+1
  2457  0503  3000               	movlw	0
  2458  0504  00B2               	movwf	map@in_min
  2459  0505  00B3               	movwf	map@in_min+1
  2460  0506  30FF               	movlw	255
  2461  0507  00B4               	movwf	map@in_max
  2462  0508  3000               	movlw	0
  2463  0509  00B5               	movwf	map@in_max+1
  2464  050A  3000               	movlw	0
  2465  050B  00B6               	movwf	map@out_min
  2466  050C  00B7               	movwf	map@out_min+1
  2467  050D  3064               	movlw	100
  2468  050E  00B8               	movwf	map@out_max
  2469  050F  3000               	movlw	0
  2470  0510  00B9               	movwf	map@out_max+1
  2471  0511  120A  158A  24F2  120A  118A  	fcall	_map
  2472  0516  1283               	bcf	3,5	;RP0=0, select bank0
  2473  0517  1303               	bcf	3,6	;RP1=0, select bank0
  2474  0518  0830               	movf	?_map,w
  2475  0519  00BF               	movwf	??_main+2
  2476  051A  083F               	movf	??_main+2,w
  2477  051B  1283               	bcf	3,5	;RP0=0, select bank2
  2478  051C  1703               	bsf	3,6	;RP1=1, select bank2
  2479  051D  00DF               	movwf	main@umidita^(0+256)
  2480                           
  2481                           ;main.c: 336:             pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  2482  051E  3005               	movlw	5
  2483  051F  120A  158A  24A5  120A  118A  	fcall	_ADC_Read
  2484  0524  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0525  1303               	bcf	3,6	;RP1=0, select bank0
  2486  0526  0820               	movf	?_ADC_Read,w
  2487  0527  00BD               	movwf	??_main
  2488  0528  0821               	movf	?_ADC_Read+1,w
  2489  0529  00BE               	movwf	??_main+1
  2490  052A  0D3E               	rlf	??_main+1,w
  2491  052B  0CBE               	rrf	??_main+1,f
  2492  052C  0CBD               	rrf	??_main,f
  2493  052D  0D3E               	rlf	??_main+1,w
  2494  052E  0CBE               	rrf	??_main+1,f
  2495  052F  0CBD               	rrf	??_main,f
  2496  0530  083D               	movf	??_main,w
  2497  0531  00B0               	movwf	map@x
  2498  0532  083E               	movf	??_main+1,w
  2499  0533  00B1               	movwf	map@x+1
  2500  0534  3000               	movlw	0
  2501  0535  00B2               	movwf	map@in_min
  2502  0536  00B3               	movwf	map@in_min+1
  2503  0537  30FF               	movlw	255
  2504  0538  00B4               	movwf	map@in_max
  2505  0539  3000               	movlw	0
  2506  053A  00B5               	movwf	map@in_max+1
  2507  053B  3000               	movlw	0
  2508  053C  00B6               	movwf	map@out_min
  2509  053D  00B7               	movwf	map@out_min+1
  2510  053E  3064               	movlw	100
  2511  053F  00B8               	movwf	map@out_max
  2512  0540  3000               	movlw	0
  2513  0541  00B9               	movwf	map@out_max+1
  2514  0542  120A  158A  24F2  120A  118A  	fcall	_map
  2515  0547  1283               	bcf	3,5	;RP0=0, select bank0
  2516  0548  1303               	bcf	3,6	;RP1=0, select bank0
  2517  0549  0830               	movf	?_map,w
  2518  054A  00BF               	movwf	??_main+2
  2519  054B  083F               	movf	??_main+2,w
  2520  054C  1283               	bcf	3,5	;RP0=0, select bank2
  2521  054D  1703               	bsf	3,6	;RP1=1, select bank2
  2522  054E  00E0               	movwf	main@pressione^(0+256)
  2523  054F                     l3082:	
  2524                           
  2525                           ;main.c: 337:             sendByte(0x02, 0x00, temp);
  2526  054F  1283               	bcf	3,5	;RP0=0, select bank0
  2527  0550  1303               	bcf	3,6	;RP1=0, select bank0
  2528  0551  01B4               	clrf	sendByte@byte1
  2529  0552  1283               	bcf	3,5	;RP0=0, select bank2
  2530  0553  1703               	bsf	3,6	;RP1=1, select bank2
  2531  0554  085E               	movf	main@temp^(0+256),w
  2532  0555  1283               	bcf	3,5	;RP0=0, select bank0
  2533  0556  1303               	bcf	3,6	;RP1=0, select bank0
  2534  0557  00BD               	movwf	??_main
  2535  0558  083D               	movf	??_main,w
  2536  0559  00B5               	movwf	sendByte@valore
  2537  055A  3002               	movlw	2
  2538  055B  120A  158A  2561  120A  118A  	fcall	_sendByte
  2539  0560                     l3084:	
  2540                           
  2541                           ;main.c: 338:             sendByte(0x04, 0x00, umidita);
  2542  0560  1283               	bcf	3,5	;RP0=0, select bank0
  2543  0561  1303               	bcf	3,6	;RP1=0, select bank0
  2544  0562  01B4               	clrf	sendByte@byte1
  2545  0563  1283               	bcf	3,5	;RP0=0, select bank2
  2546  0564  1703               	bsf	3,6	;RP1=1, select bank2
  2547  0565  085F               	movf	main@umidita^(0+256),w
  2548  0566  1283               	bcf	3,5	;RP0=0, select bank0
  2549  0567  1303               	bcf	3,6	;RP1=0, select bank0
  2550  0568  00BD               	movwf	??_main
  2551  0569  083D               	movf	??_main,w
  2552  056A  00B5               	movwf	sendByte@valore
  2553  056B  3004               	movlw	4
  2554  056C  120A  158A  2561  120A  118A  	fcall	_sendByte
  2555  0571                     l3086:	
  2556                           
  2557                           ;main.c: 339:             sendByte(0x06, 0x00, pressione);
  2558  0571  1283               	bcf	3,5	;RP0=0, select bank0
  2559  0572  1303               	bcf	3,6	;RP1=0, select bank0
  2560  0573  01B4               	clrf	sendByte@byte1
  2561  0574  1283               	bcf	3,5	;RP0=0, select bank2
  2562  0575  1703               	bsf	3,6	;RP1=1, select bank2
  2563  0576  0860               	movf	main@pressione^(0+256),w
  2564  0577  1283               	bcf	3,5	;RP0=0, select bank0
  2565  0578  1303               	bcf	3,6	;RP1=0, select bank0
  2566  0579  00BD               	movwf	??_main
  2567  057A  083D               	movf	??_main,w
  2568  057B  00B5               	movwf	sendByte@valore
  2569  057C  3006               	movlw	6
  2570  057D  120A  158A  2561  120A  118A  	fcall	_sendByte
  2571  0582  288C               	goto	l2928
  2572  0583  120A  118A  280E   	ljmp	start
  2573  0586                     __end_of_main:	
  2574                           
  2575                           	psect	text1
  2576  0D61                     __ptext1:	
  2577 ;; *************** function _sendByte *****************
  2578 ;; Defined at:
  2579 ;;		line 408 in file "main.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  byte0           1    wreg     unsigned char 
  2582 ;;  byte1           1   20[BANK0 ] unsigned char 
  2583 ;;  valore          1   21[BANK0 ] unsigned char 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  byte0           1   25[BANK0 ] unsigned char 
  2586 ;;  i               2   27[BANK0 ] int 
  2587 ;;  txByte          1   26[BANK0 ] PTR unsigned char 
  2588 ;;		 -> BuildByte@txByte(5), 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2598 ;;      Params:         0       2       0       0       0
  2599 ;;      Locals:         0       4       0       0       0
  2600 ;;      Temps:          0       3       0       0       0
  2601 ;;      Totals:         0       9       0       0       0
  2602 ;;Total ram usage:        9 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    3
  2605 ;; This function calls:
  2606 ;;		_BuildByte
  2607 ;;		_UART_TxChar
  2608 ;; This function is called by:
  2609 ;;		_main
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _sendByte
  2615  0D61                     _sendByte:	
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2619                           ;sendByte@byte0 stored from wreg
  2620  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0D63  00B9               	movwf	sendByte@byte0
  2623  0D64                     l2840:	
  2624                           
  2625                           ;main.c: 408: void sendByte(char byte0, char byte1, char valore);main.c: 409: {;main.c: 
      +                          410:     char *txByte;;main.c: 411:     txByte = BuildByte(byte0, byte1, valore);
  2626  0D64  0834               	movf	sendByte@byte1,w
  2627  0D65  00B6               	movwf	??_sendByte
  2628  0D66  0836               	movf	??_sendByte,w
  2629  0D67  00A0               	movwf	BuildByte@byte1
  2630  0D68  0835               	movf	sendByte@valore,w
  2631  0D69  00B7               	movwf	??_sendByte+1
  2632  0D6A  0837               	movf	??_sendByte+1,w
  2633  0D6B  00A1               	movwf	BuildByte@valore
  2634  0D6C  0839               	movf	sendByte@byte0,w
  2635  0D6D  120A  118A  2674  120A  158A  	fcall	_BuildByte
  2636  0D72  1283               	bcf	3,5	;RP0=0, select bank0
  2637  0D73  1303               	bcf	3,6	;RP1=0, select bank0
  2638  0D74  00B8               	movwf	??_sendByte+2
  2639  0D75  0838               	movf	??_sendByte+2,w
  2640  0D76  00BA               	movwf	sendByte@txByte
  2641  0D77                     l2842:	
  2642                           
  2643                           ;main.c: 413:     for (int i = 0; i < 5; i++)
  2644  0D77  01BB               	clrf	sendByte@i
  2645  0D78  01BC               	clrf	sendByte@i+1
  2646  0D79                     l2848:	
  2647                           
  2648                           ;main.c: 414:     {;main.c: 415:         UART_TxChar(txByte++);
  2649  0D79  1283               	bcf	3,5	;RP0=0, select bank0
  2650  0D7A  1303               	bcf	3,6	;RP1=0, select bank0
  2651  0D7B  083A               	movf	sendByte@txByte,w
  2652  0D7C  120A  158A  2448  120A  158A  	fcall	_UART_TxChar
  2653  0D81                     l2850:	
  2654  0D81  3001               	movlw	1
  2655  0D82  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0D83  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0D84  00B6               	movwf	??_sendByte
  2658  0D85  0836               	movf	??_sendByte,w
  2659  0D86  07BA               	addwf	sendByte@txByte,f
  2660  0D87                     l2852:	
  2661                           
  2662                           ;main.c: 416:     }
  2663  0D87  3001               	movlw	1
  2664  0D88  07BB               	addwf	sendByte@i,f
  2665  0D89  1803               	skipnc
  2666  0D8A  0ABC               	incf	sendByte@i+1,f
  2667  0D8B  3000               	movlw	0
  2668  0D8C  07BC               	addwf	sendByte@i+1,f
  2669  0D8D                     l2854:	
  2670  0D8D  083C               	movf	sendByte@i+1,w
  2671  0D8E  3A80               	xorlw	128
  2672  0D8F  00FF               	movwf	btemp+1
  2673  0D90  3080               	movlw	128
  2674  0D91  027F               	subwf	btemp+1,w
  2675  0D92  1D03               	skipz
  2676  0D93  2D96               	goto	u2935
  2677  0D94  3005               	movlw	5
  2678  0D95  023B               	subwf	sendByte@i,w
  2679  0D96                     u2935:	
  2680  0D96  1C03               	skipc
  2681  0D97  2D99               	goto	u2931
  2682  0D98  2D9A               	goto	u2930
  2683  0D99                     u2931:	
  2684  0D99  2D79               	goto	l2848
  2685  0D9A                     u2930:	
  2686  0D9A                     l296:	
  2687  0D9A  0008               	return
  2688  0D9B                     __end_of_sendByte:	
  2689                           
  2690                           	psect	text2
  2691  0C48                     __ptext2:	
  2692 ;; *************** function _UART_TxChar *****************
  2693 ;; Defined at:
  2694 ;;		line 383 in file "main.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;  ch              1    wreg     unsigned char 
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  ch              1    0[BANK0 ] unsigned char 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		wreg
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2708 ;;      Params:         0       0       0       0       0
  2709 ;;      Locals:         0       1       0       0       0
  2710 ;;      Temps:          0       0       0       0       0
  2711 ;;      Totals:         0       1       0       0       0
  2712 ;;Total ram usage:        1 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    2
  2715 ;; This function calls:
  2716 ;;		Nothing
  2717 ;; This function is called by:
  2718 ;;		_sendByte
  2719 ;;		_UART_Write_Text
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           
  2724                           ;psect for function _UART_TxChar
  2725  0C48                     _UART_TxChar:	
  2726                           
  2727                           ;incstack = 0
  2728                           ; Regs used in _UART_TxChar: [wreg]
  2729                           ;UART_TxChar@ch stored from wreg
  2730  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  2731  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  2732  0C4A  00A0               	movwf	UART_TxChar@ch
  2733  0C4B                     l2616:	
  2734  0C4B                     l276:	
  2735                           ;main.c: 386:         ;
  2736                           
  2737                           
  2738                           ;main.c: 385:     while (!TXIF)
  2739  0C4B  1E0C               	btfss	12,4	;volatile
  2740  0C4C  2C4E               	goto	u2551
  2741  0C4D  2C4F               	goto	u2550
  2742  0C4E                     u2551:	
  2743  0C4E  2C4B               	goto	l276
  2744  0C4F                     u2550:	
  2745  0C4F                     l278:	
  2746                           
  2747                           ;main.c: 387:     TXIF = 0;
  2748  0C4F  120C               	bcf	12,4	;volatile
  2749  0C50                     l2618:	
  2750                           
  2751                           ;main.c: 388:     TXREG = ch;
  2752  0C50  0820               	movf	UART_TxChar@ch,w
  2753  0C51  0099               	movwf	25	;volatile
  2754  0C52                     l279:	
  2755  0C52  0008               	return
  2756  0C53                     __end_of_UART_TxChar:	
  2757                           
  2758                           	psect	text3
  2759  0674                     __ptext3:	
  2760 ;; *************** function _BuildByte *****************
  2761 ;; Defined at:
  2762 ;;		line 2 in file "./CustomLib/Serial.h"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  byte0           1    wreg     unsigned char 
  2765 ;;  byte1           1    0[BANK0 ] unsigned char 
  2766 ;;  valore          1    1[BANK0 ] unsigned char 
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;  byte0           1    4[BANK0 ] unsigned char 
  2769 ;;  y               2   14[BANK0 ] int 
  2770 ;;  y               2   12[BANK0 ] int 
  2771 ;;  i               2   18[BANK0 ] int 
  2772 ;;  i               2   16[BANK0 ] int 
  2773 ;;  txByte          5    5[BANK0 ] unsigned char [5]
  2774 ;;  sommaColumn     1   11[BANK0 ] unsigned char 
  2775 ;;  sommaRow        1   10[BANK0 ] unsigned char 
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      PTR unsigned char 
  2778 ;; Registers used:
  2779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2785 ;;      Params:         0       2       0       0       0
  2786 ;;      Locals:         0      16       0       0       0
  2787 ;;      Temps:          0       2       0       0       0
  2788 ;;      Totals:         0      20       0       0       0
  2789 ;;Total ram usage:       20 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    2
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_sendByte
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           
  2800                           ;psect for function _BuildByte
  2801  0674                     _BuildByte:	
  2802                           
  2803                           ;incstack = 0
  2804                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2805                           ;BuildByte@byte0 stored from wreg
  2806  0674  1283               	bcf	3,5	;RP0=0, select bank0
  2807  0675  1303               	bcf	3,6	;RP1=0, select bank0
  2808  0676  00A4               	movwf	BuildByte@byte0
  2809  0677                     l2548:	
  2810                           
  2811                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2812  0677  0824               	movf	BuildByte@byte0,w
  2813  0678  397F               	andlw	127
  2814  0679  00A2               	movwf	??_BuildByte
  2815  067A  0822               	movf	??_BuildByte,w
  2816  067B  00A5               	movwf	BuildByte@txByte
  2817                           
  2818                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2819  067C  0820               	movf	BuildByte@byte1,w
  2820  067D  397F               	andlw	127
  2821  067E  00A2               	movwf	??_BuildByte
  2822  067F  0822               	movf	??_BuildByte,w
  2823  0680  00A6               	movwf	BuildByte@txByte+1
  2824                           
  2825                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2826  0681  0821               	movf	BuildByte@valore,w
  2827  0682  397F               	andlw	127
  2828  0683  00A2               	movwf	??_BuildByte
  2829  0684  0822               	movf	??_BuildByte,w
  2830  0685  00A7               	movwf	BuildByte@txByte+2
  2831  0686                     l2550:	
  2832                           
  2833                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2834  0686  0821               	movf	BuildByte@valore,w
  2835  0687  00A2               	movwf	??_BuildByte
  2836  0688  3007               	movlw	7
  2837  0689                     u2455:	
  2838  0689  1003               	clrc
  2839  068A  0CA2               	rrf	??_BuildByte,f
  2840  068B  3EFF               	addlw	-1
  2841  068C  1D03               	skipz
  2842  068D  2E89               	goto	u2455
  2843  068E  0822               	movf	??_BuildByte,w
  2844  068F  397F               	andlw	127
  2845  0690  00A3               	movwf	??_BuildByte+1
  2846  0691  0823               	movf	??_BuildByte+1,w
  2847  0692  00A8               	movwf	BuildByte@txByte+3
  2848  0693                     l2552:	
  2849                           
  2850                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2851  0693  01AA               	clrf	BuildByte@sommaRow
  2852  0694                     l2554:	
  2853                           
  2854                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2855  0694  01AB               	clrf	BuildByte@sommaColumn
  2856  0695                     l2556:	
  2857                           
  2858                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2859  0695  01B0               	clrf	BuildByte@i
  2860  0696  01B1               	clrf	BuildByte@i+1
  2861  0697                     l2562:	
  2862                           
  2863                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2864  0697  1283               	bcf	3,5	;RP0=0, select bank0
  2865  0698  1303               	bcf	3,6	;RP1=0, select bank0
  2866  0699  01AC               	clrf	BuildByte@y
  2867  069A  01AD               	clrf	BuildByte@y+1
  2868  069B                     l2568:	
  2869                           
  2870                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2871  069B  1283               	bcf	3,5	;RP0=0, select bank0
  2872  069C  1303               	bcf	3,6	;RP1=0, select bank0
  2873  069D  0830               	movf	BuildByte@i,w
  2874  069E  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2875  069F  0084               	movwf	4
  2876  06A0  1383               	bcf	3,7	;select IRP bank0
  2877  06A1  0800               	movf	0,w
  2878  06A2  00A2               	movwf	??_BuildByte
  2879  06A3  0A2C               	incf	BuildByte@y,w
  2880  06A4  2EA7               	goto	u2464
  2881  06A5                     u2465:	
  2882  06A5  1003               	clrc
  2883  06A6  0CA2               	rrf	??_BuildByte,f
  2884  06A7                     u2464:	
  2885  06A7  3EFF               	addlw	-1
  2886  06A8  1D03               	skipz
  2887  06A9  2EA5               	goto	u2465
  2888  06AA  0822               	movf	??_BuildByte,w
  2889  06AB  3901               	andlw	1
  2890  06AC  00A3               	movwf	??_BuildByte+1
  2891  06AD  0823               	movf	??_BuildByte+1,w
  2892  06AE  07AA               	addwf	BuildByte@sommaRow,f
  2893  06AF                     l2570:	
  2894                           
  2895                           ;./CustomLib/Serial.h: 18:         }
  2896  06AF  3001               	movlw	1
  2897  06B0  07AC               	addwf	BuildByte@y,f
  2898  06B1  1803               	skipnc
  2899  06B2  0AAD               	incf	BuildByte@y+1,f
  2900  06B3  3000               	movlw	0
  2901  06B4  07AD               	addwf	BuildByte@y+1,f
  2902  06B5                     l2572:	
  2903  06B5  082D               	movf	BuildByte@y+1,w
  2904  06B6  3A80               	xorlw	128
  2905  06B7  00FF               	movwf	btemp+1
  2906  06B8  3080               	movlw	128
  2907  06B9  027F               	subwf	btemp+1,w
  2908  06BA  1D03               	skipz
  2909  06BB  2EBE               	goto	u2475
  2910  06BC  3008               	movlw	8
  2911  06BD  022C               	subwf	BuildByte@y,w
  2912  06BE                     u2475:	
  2913  06BE  1C03               	skipc
  2914  06BF  2EC1               	goto	u2471
  2915  06C0  2EC2               	goto	u2470
  2916  06C1                     u2471:	
  2917  06C1  2E9B               	goto	l2568
  2918  06C2                     u2470:	
  2919  06C2                     l119:	
  2920                           
  2921                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  2922  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  2923  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  2924  06C4  1C2A               	btfss	BuildByte@sommaRow,0
  2925  06C5  2EC7               	goto	u2481
  2926  06C6  2EC8               	goto	u2480
  2927  06C7                     u2481:	
  2928  06C7  2ED0               	goto	l2576
  2929  06C8                     u2480:	
  2930  06C8                     l2574:	
  2931                           
  2932                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  2933  06C8  3080               	movlw	128
  2934  06C9  00A2               	movwf	??_BuildByte
  2935  06CA  0830               	movf	BuildByte@i,w
  2936  06CB  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2937  06CC  0084               	movwf	4
  2938  06CD  0822               	movf	??_BuildByte,w
  2939  06CE  1383               	bcf	3,7	;select IRP bank0
  2940  06CF  0780               	addwf	0,f
  2941  06D0                     l2576:	
  2942                           
  2943                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  2944  06D0  01AA               	clrf	BuildByte@sommaRow
  2945  06D1                     l2580:	
  2946                           ;./CustomLib/Serial.h: 23:         }
  2947                           
  2948                           
  2949                           ;./CustomLib/Serial.h: 28:     }
  2950  06D1  3001               	movlw	1
  2951  06D2  07B0               	addwf	BuildByte@i,f
  2952  06D3  1803               	skipnc
  2953  06D4  0AB1               	incf	BuildByte@i+1,f
  2954  06D5  3000               	movlw	0
  2955  06D6  07B1               	addwf	BuildByte@i+1,f
  2956  06D7                     l2582:	
  2957  06D7  0831               	movf	BuildByte@i+1,w
  2958  06D8  3A80               	xorlw	128
  2959  06D9  00FF               	movwf	btemp+1
  2960  06DA  3080               	movlw	128
  2961  06DB  027F               	subwf	btemp+1,w
  2962  06DC  1D03               	skipz
  2963  06DD  2EE0               	goto	u2495
  2964  06DE  3004               	movlw	4
  2965  06DF  0230               	subwf	BuildByte@i,w
  2966  06E0                     u2495:	
  2967  06E0  1C03               	skipc
  2968  06E1  2EE3               	goto	u2491
  2969  06E2  2EE4               	goto	u2490
  2970  06E3                     u2491:	
  2971  06E3  2E97               	goto	l2562
  2972  06E4                     u2490:	
  2973  06E4                     l2584:	
  2974                           
  2975                           ;./CustomLib/Serial.h: 30:     for (int i = 0; i < 8; i++)
  2976  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  2977  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  2978  06E6  01B2               	clrf	BuildByte@i_342
  2979  06E7  01B3               	clrf	BuildByte@i_342+1
  2980  06E8                     l2590:	
  2981                           
  2982                           ;./CustomLib/Serial.h: 31:     {;./CustomLib/Serial.h: 32:         for (int y = 0; y < 4
      +                          ; y++)
  2983  06E8  1283               	bcf	3,5	;RP0=0, select bank0
  2984  06E9  1303               	bcf	3,6	;RP1=0, select bank0
  2985  06EA  01AE               	clrf	BuildByte@y_343
  2986  06EB  01AF               	clrf	BuildByte@y_343+1
  2987  06EC                     l2596:	
  2988                           
  2989                           ;./CustomLib/Serial.h: 34:         {;./CustomLib/Serial.h: 35:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  2990  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  2991  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  2992  06EE  082E               	movf	BuildByte@y_343,w
  2993  06EF  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2994  06F0  0084               	movwf	4
  2995  06F1  1383               	bcf	3,7	;select IRP bank0
  2996  06F2  0800               	movf	0,w
  2997  06F3  00A2               	movwf	??_BuildByte
  2998  06F4  0A32               	incf	BuildByte@i_342,w
  2999  06F5  2EF8               	goto	u2504
  3000  06F6                     u2505:	
  3001  06F6  1003               	clrc
  3002  06F7  0CA2               	rrf	??_BuildByte,f
  3003  06F8                     u2504:	
  3004  06F8  3EFF               	addlw	-1
  3005  06F9  1D03               	skipz
  3006  06FA  2EF6               	goto	u2505
  3007  06FB  0822               	movf	??_BuildByte,w
  3008  06FC  3901               	andlw	1
  3009  06FD  00A3               	movwf	??_BuildByte+1
  3010  06FE  0823               	movf	??_BuildByte+1,w
  3011  06FF  07AB               	addwf	BuildByte@sommaColumn,f
  3012  0700                     l2598:	
  3013                           
  3014                           ;./CustomLib/Serial.h: 36:         }
  3015  0700  3001               	movlw	1
  3016  0701  07AE               	addwf	BuildByte@y_343,f
  3017  0702  1803               	skipnc
  3018  0703  0AAF               	incf	BuildByte@y_343+1,f
  3019  0704  3000               	movlw	0
  3020  0705  07AF               	addwf	BuildByte@y_343+1,f
  3021  0706                     l2600:	
  3022  0706  082F               	movf	BuildByte@y_343+1,w
  3023  0707  3A80               	xorlw	128
  3024  0708  00FF               	movwf	btemp+1
  3025  0709  3080               	movlw	128
  3026  070A  027F               	subwf	btemp+1,w
  3027  070B  1D03               	skipz
  3028  070C  2F0F               	goto	u2515
  3029  070D  3004               	movlw	4
  3030  070E  022E               	subwf	BuildByte@y_343,w
  3031  070F                     u2515:	
  3032  070F  1C03               	skipc
  3033  0710  2F12               	goto	u2511
  3034  0711  2F13               	goto	u2510
  3035  0712                     u2511:	
  3036  0712  2EEC               	goto	l2596
  3037  0713                     u2510:	
  3038  0713                     l125:	
  3039                           
  3040                           ;./CustomLib/Serial.h: 37:         if (sommaColumn % 2 == 1)
  3041  0713  1283               	bcf	3,5	;RP0=0, select bank0
  3042  0714  1303               	bcf	3,6	;RP1=0, select bank0
  3043  0715  1C2B               	btfss	BuildByte@sommaColumn,0
  3044  0716  2F18               	goto	u2521
  3045  0717  2F19               	goto	u2520
  3046  0718                     u2521:	
  3047  0718  2F26               	goto	l2604
  3048  0719                     u2520:	
  3049  0719                     l2602:	
  3050                           
  3051                           ;./CustomLib/Serial.h: 38:         {;./CustomLib/Serial.h: 39:             txByte[4] += 
      +                          0x01 << i;
  3052  0719  3001               	movlw	1
  3053  071A  00A2               	movwf	??_BuildByte
  3054  071B  0A32               	incf	BuildByte@i_342,w
  3055  071C  2F1F               	goto	u2534
  3056  071D                     u2535:	
  3057  071D  1003               	clrc
  3058  071E  0DA2               	rlf	??_BuildByte,f
  3059  071F                     u2534:	
  3060  071F  3EFF               	addlw	-1
  3061  0720  1D03               	skipz
  3062  0721  2F1D               	goto	u2535
  3063  0722  0822               	movf	??_BuildByte,w
  3064  0723  00A3               	movwf	??_BuildByte+1
  3065  0724  0823               	movf	??_BuildByte+1,w
  3066  0725  07A9               	addwf	BuildByte@txByte+4,f
  3067  0726                     l2604:	
  3068                           
  3069                           ;./CustomLib/Serial.h: 40:             sommaColumn = 0;
  3070  0726  01AB               	clrf	BuildByte@sommaColumn
  3071  0727                     l2608:	
  3072                           ;./CustomLib/Serial.h: 41:         }
  3073                           
  3074                           
  3075                           ;./CustomLib/Serial.h: 46:     }
  3076  0727  3001               	movlw	1
  3077  0728  07B2               	addwf	BuildByte@i_342,f
  3078  0729  1803               	skipnc
  3079  072A  0AB3               	incf	BuildByte@i_342+1,f
  3080  072B  3000               	movlw	0
  3081  072C  07B3               	addwf	BuildByte@i_342+1,f
  3082  072D                     l2610:	
  3083  072D  0833               	movf	BuildByte@i_342+1,w
  3084  072E  3A80               	xorlw	128
  3085  072F  00FF               	movwf	btemp+1
  3086  0730  3080               	movlw	128
  3087  0731  027F               	subwf	btemp+1,w
  3088  0732  1D03               	skipz
  3089  0733  2F36               	goto	u2545
  3090  0734  3008               	movlw	8
  3091  0735  0232               	subwf	BuildByte@i_342,w
  3092  0736                     u2545:	
  3093  0736  1C03               	skipc
  3094  0737  2F39               	goto	u2541
  3095  0738  2F3A               	goto	u2540
  3096  0739                     u2541:	
  3097  0739  2EE8               	goto	l2590
  3098  073A                     u2540:	
  3099  073A                     l2612:	
  3100                           
  3101                           ;./CustomLib/Serial.h: 48:     return txByte;
  3102  073A  3025               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3103  073B                     l128:	
  3104  073B  0008               	return
  3105  073C                     __end_of_BuildByte:	
  3106                           
  3107                           	psect	text4
  3108  0CF2                     __ptext4:	
  3109 ;; *************** function _map *****************
  3110 ;; Defined at:
  3111 ;;		line 1 in file "./CustomLib/Conversions.h"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  x               2   16[BANK0 ] int 
  3114 ;;  in_min          2   18[BANK0 ] int 
  3115 ;;  in_max          2   20[BANK0 ] int 
  3116 ;;  out_min         2   22[BANK0 ] int 
  3117 ;;  out_max         2   24[BANK0 ] int 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;		None
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  2   16[BANK0 ] int 
  3122 ;; Registers used:
  3123 ;;		wreg, status,2, status,0, pclath, cstack
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3129 ;;      Params:         0      10       0       0       0
  3130 ;;      Locals:         0       0       0       0       0
  3131 ;;      Temps:          0       0       0       0       0
  3132 ;;      Totals:         0      10       0       0       0
  3133 ;;Total ram usage:       10 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    3
  3136 ;; This function calls:
  3137 ;;		___awdiv
  3138 ;;		___wmul
  3139 ;; This function is called by:
  3140 ;;		_main
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           
  3145                           ;psect for function _map
  3146  0CF2                     _map:	
  3147  0CF2                     l2756:	
  3148                           ;incstack = 0
  3149                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3150                           
  3151                           
  3152                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3153  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  3154  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  3155  0CF4  0832               	movf	map@in_min,w
  3156  0CF5  0234               	subwf	map@in_max,w
  3157  0CF6  00A7               	movwf	___awdiv@divisor
  3158  0CF7  0833               	movf	map@in_min+1,w
  3159  0CF8  1C03               	skipc
  3160  0CF9  0A33               	incf	map@in_min+1,w
  3161  0CFA  0235               	subwf	map@in_max+1,w
  3162  0CFB  00A8               	movwf	___awdiv@divisor+1
  3163  0CFC  0832               	movf	map@in_min,w
  3164  0CFD  0230               	subwf	map@x,w
  3165  0CFE  00A0               	movwf	___wmul@multiplier
  3166  0CFF  0833               	movf	map@in_min+1,w
  3167  0D00  1C03               	skipc
  3168  0D01  0A33               	incf	map@in_min+1,w
  3169  0D02  0231               	subwf	map@x+1,w
  3170  0D03  00A1               	movwf	___wmul@multiplier+1
  3171  0D04  0836               	movf	map@out_min,w
  3172  0D05  0238               	subwf	map@out_max,w
  3173  0D06  00A2               	movwf	___wmul@multiplicand
  3174  0D07  0837               	movf	map@out_min+1,w
  3175  0D08  1C03               	skipc
  3176  0D09  0A37               	incf	map@out_min+1,w
  3177  0D0A  0239               	subwf	map@out_max+1,w
  3178  0D0B  00A3               	movwf	___wmul@multiplicand+1
  3179  0D0C  120A  158A  24CB  120A  158A  	fcall	___wmul
  3180  0D11  1283               	bcf	3,5	;RP0=0, select bank0
  3181  0D12  1303               	bcf	3,6	;RP1=0, select bank0
  3182  0D13  0821               	movf	?___wmul+1,w
  3183  0D14  00AA               	movwf	___awdiv@dividend+1
  3184  0D15  0820               	movf	?___wmul,w
  3185  0D16  00A9               	movwf	___awdiv@dividend
  3186  0D17  120A  158A  268F  120A  158A  	fcall	___awdiv
  3187  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  3188  0D1D  1303               	bcf	3,6	;RP1=0, select bank0
  3189  0D1E  0836               	movf	map@out_min,w
  3190  0D1F  0727               	addwf	?___awdiv,w
  3191  0D20  00B0               	movwf	?_map
  3192  0D21  0837               	movf	map@out_min+1,w
  3193  0D22  1803               	skipnc
  3194  0D23  0A37               	incf	map@out_min+1,w
  3195  0D24  0728               	addwf	?___awdiv+1,w
  3196  0D25  00B1               	movwf	?_map+1
  3197  0D26                     l83:	
  3198  0D26  0008               	return
  3199  0D27                     __end_of_map:	
  3200                           
  3201                           	psect	text5
  3202  0CCB                     __ptext5:	
  3203 ;; *************** function ___wmul *****************
  3204 ;; Defined at:
  3205 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3208 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  product         2    4[BANK0 ] unsigned int 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  2    0[BANK0 ] unsigned int 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3220 ;;      Params:         0       4       0       0       0
  3221 ;;      Locals:         0       2       0       0       0
  3222 ;;      Temps:          0       0       0       0       0
  3223 ;;      Totals:         0       6       0       0       0
  3224 ;;Total ram usage:        6 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    2
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_map
  3231 ;;		_main
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           
  3236                           ;psect for function ___wmul
  3237  0CCB                     ___wmul:	
  3238  0CCB                     l2620:	
  3239                           ;incstack = 0
  3240                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3241                           
  3242  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  3243  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  3244  0CCD  01A4               	clrf	___wmul@product
  3245  0CCE  01A5               	clrf	___wmul@product+1
  3246  0CCF                     l2622:	
  3247  0CCF  1C20               	btfss	___wmul@multiplier,0
  3248  0CD0  2CD2               	goto	u2561
  3249  0CD1  2CD3               	goto	u2560
  3250  0CD2                     u2561:	
  3251  0CD2  2CD9               	goto	l440
  3252  0CD3                     u2560:	
  3253  0CD3                     l2624:	
  3254  0CD3  0822               	movf	___wmul@multiplicand,w
  3255  0CD4  07A4               	addwf	___wmul@product,f
  3256  0CD5  1803               	skipnc
  3257  0CD6  0AA5               	incf	___wmul@product+1,f
  3258  0CD7  0823               	movf	___wmul@multiplicand+1,w
  3259  0CD8  07A5               	addwf	___wmul@product+1,f
  3260  0CD9                     l440:	
  3261  0CD9  3001               	movlw	1
  3262  0CDA                     u2575:	
  3263  0CDA  1003               	clrc
  3264  0CDB  0DA2               	rlf	___wmul@multiplicand,f
  3265  0CDC  0DA3               	rlf	___wmul@multiplicand+1,f
  3266  0CDD  3EFF               	addlw	-1
  3267  0CDE  1D03               	skipz
  3268  0CDF  2CDA               	goto	u2575
  3269  0CE0                     l2626:	
  3270  0CE0  3001               	movlw	1
  3271  0CE1                     u2585:	
  3272  0CE1  1003               	clrc
  3273  0CE2  0CA1               	rrf	___wmul@multiplier+1,f
  3274  0CE3  0CA0               	rrf	___wmul@multiplier,f
  3275  0CE4  3EFF               	addlw	-1
  3276  0CE5  1D03               	skipz
  3277  0CE6  2CE1               	goto	u2585
  3278  0CE7                     l2628:	
  3279  0CE7  0820               	movf	___wmul@multiplier,w
  3280  0CE8  0421               	iorwf	___wmul@multiplier+1,w
  3281  0CE9  1D03               	btfss	3,2
  3282  0CEA  2CEC               	goto	u2591
  3283  0CEB  2CED               	goto	u2590
  3284  0CEC                     u2591:	
  3285  0CEC  2CCF               	goto	l2622
  3286  0CED                     u2590:	
  3287  0CED                     l2630:	
  3288  0CED  0825               	movf	___wmul@product+1,w
  3289  0CEE  00A1               	movwf	?___wmul+1
  3290  0CEF  0824               	movf	___wmul@product,w
  3291  0CF0  00A0               	movwf	?___wmul
  3292  0CF1                     l442:	
  3293  0CF1  0008               	return
  3294  0CF2                     __end_of___wmul:	
  3295                           
  3296                           	psect	text6
  3297  0C53                     __ptext6:	
  3298 ;; *************** function _init_ADC *****************
  3299 ;; Defined at:
  3300 ;;		line 352 in file "main.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;		None
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;		None
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3314 ;;      Params:         0       0       0       0       0
  3315 ;;      Locals:         0       0       0       0       0
  3316 ;;      Temps:          0       1       0       0       0
  3317 ;;      Totals:         0       1       0       0       0
  3318 ;;Total ram usage:        1 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    2
  3321 ;; This function calls:
  3322 ;;		Nothing
  3323 ;; This function is called by:
  3324 ;;		_main
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _init_ADC
  3330  0C53                     _init_ADC:	
  3331  0C53                     l2760:	
  3332                           ;incstack = 0
  3333                           ; Regs used in _init_ADC: [wreg+status,2]
  3334                           
  3335                           
  3336                           ;main.c: 354:     TRISA = 0xE3;
  3337  0C53  30E3               	movlw	227
  3338  0C54  1683               	bsf	3,5	;RP0=1, select bank1
  3339  0C55  1303               	bcf	3,6	;RP1=0, select bank1
  3340  0C56  0085               	movwf	5	;volatile
  3341  0C57                     l2762:	
  3342                           
  3343                           ;main.c: 355:     ADCON0 = 0x00;
  3344  0C57  1283               	bcf	3,5	;RP0=0, select bank0
  3345  0C58  1303               	bcf	3,6	;RP1=0, select bank0
  3346  0C59  019F               	clrf	31	;volatile
  3347  0C5A                     l2764:	
  3348                           
  3349                           ;main.c: 356:     ADCON1 = 0x80;
  3350  0C5A  3080               	movlw	128
  3351  0C5B  1683               	bsf	3,5	;RP0=1, select bank1
  3352  0C5C  1303               	bcf	3,6	;RP1=0, select bank1
  3353  0C5D  009F               	movwf	31	;volatile
  3354  0C5E                     l2766:	
  3355                           
  3356                           ;main.c: 357:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3357  0C5E  3019               	movlw	25
  3358  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0C60  1303               	bcf	3,6	;RP1=0, select bank0
  3360  0C61  00A0               	movwf	??_init_ADC
  3361  0C62                     u3327:	
  3362  0C62  0BA0               	decfsz	??_init_ADC,f
  3363  0C63  2C62               	goto	u3327
  3364  0C64  2C65               	nop2
  3365  0C65                     l264:	
  3366  0C65  0008               	return
  3367  0C66                     __end_of_init_ADC:	
  3368                           
  3369                           	psect	text7
  3370  0C8E                     __ptext7:	
  3371 ;; *************** function ___bmul *****************
  3372 ;; Defined at:
  3373 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;  multiplier      1    wreg     unsigned char 
  3376 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3379 ;;  product         1    2[BANK0 ] unsigned char 
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      unsigned char 
  3382 ;; Registers used:
  3383 ;;		wreg, status,2, status,0
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3389 ;;      Params:         0       1       0       0       0
  3390 ;;      Locals:         0       2       0       0       0
  3391 ;;      Temps:          0       1       0       0       0
  3392 ;;      Totals:         0       4       0       0       0
  3393 ;;Total ram usage:        4 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    2
  3396 ;; This function calls:
  3397 ;;		Nothing
  3398 ;; This function is called by:
  3399 ;;		_main
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           
  3404                           ;psect for function ___bmul
  3405  0C8E                     ___bmul:	
  3406                           
  3407                           ;incstack = 0
  3408                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3409                           ;___bmul@multiplier stored from wreg
  3410  0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  3411  0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  3412  0C90  00A3               	movwf	___bmul@multiplier
  3413  0C91                     l2866:	
  3414  0C91  01A2               	clrf	___bmul@product
  3415  0C92                     l2868:	
  3416  0C92  1C23               	btfss	___bmul@multiplier,0
  3417  0C93  2C95               	goto	u2961
  3418  0C94  2C96               	goto	u2960
  3419  0C95                     u2961:	
  3420  0C95  2C9A               	goto	l2872
  3421  0C96                     u2960:	
  3422  0C96                     l2870:	
  3423  0C96  0820               	movf	___bmul@multiplicand,w
  3424  0C97  00A1               	movwf	??___bmul
  3425  0C98  0821               	movf	??___bmul,w
  3426  0C99  07A2               	addwf	___bmul@product,f
  3427  0C9A                     l2872:	
  3428  0C9A  1003               	clrc
  3429  0C9B  0DA0               	rlf	___bmul@multiplicand,f
  3430  0C9C                     l2874:	
  3431  0C9C  1003               	clrc
  3432  0C9D  0CA3               	rrf	___bmul@multiplier,f
  3433  0C9E  0823               	movf	___bmul@multiplier,w
  3434  0C9F  1D03               	btfss	3,2
  3435  0CA0  2CA2               	goto	u2971
  3436  0CA1  2CA3               	goto	u2970
  3437  0CA2                     u2971:	
  3438  0CA2  2C92               	goto	l2868
  3439  0CA3                     u2970:	
  3440  0CA3                     l2876:	
  3441  0CA3  0822               	movf	___bmul@product,w
  3442  0CA4                     l466:	
  3443  0CA4  0008               	return
  3444  0CA5                     __end_of___bmul:	
  3445                           
  3446                           	psect	text8
  3447  0D27                     __ptext8:	
  3448 ;; *************** function _UART_Init *****************
  3449 ;; Defined at:
  3450 ;;		line 371 in file "main.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  baudrate        2   15[BANK0 ] int 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;		None
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		wreg, status,2, status,0, pclath, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3464 ;;      Params:         0       2       0       0       0
  3465 ;;      Locals:         0       0       0       0       0
  3466 ;;      Temps:          0       4       0       0       0
  3467 ;;      Totals:         0       6       0       0       0
  3468 ;;Total ram usage:        6 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    3
  3471 ;; This function calls:
  3472 ;;		___aldiv
  3473 ;; This function is called by:
  3474 ;;		_main
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           
  3479                           ;psect for function _UART_Init
  3480  0D27                     _UART_Init:	
  3481  0D27                     l2768:	
  3482                           ;incstack = 0
  3483                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3484                           
  3485                           
  3486                           ;main.c: 371: void UART_Init(int baudrate);main.c: 372: {;main.c: 373:     TRISCbits.TRI
      +                          SC6 = 0;
  3487  0D27  1683               	bsf	3,5	;RP0=1, select bank1
  3488  0D28  1303               	bcf	3,6	;RP1=0, select bank1
  3489  0D29  1307               	bcf	7,6	;volatile
  3490                           
  3491                           ;main.c: 374:     TXSTAbits.TXEN = 1;
  3492  0D2A  1698               	bsf	24,5	;volatile
  3493                           
  3494                           ;main.c: 375:     RCSTAbits.SPEN = 1;
  3495  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  3496  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  3497  0D2D  1798               	bsf	24,7	;volatile
  3498                           
  3499                           ;main.c: 376:     RCSTAbits.CREN = 1;
  3500  0D2E  1618               	bsf	24,4	;volatile
  3501  0D2F                     l2770:	
  3502                           
  3503                           ;main.c: 377:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  3504  0D2F  082F               	movf	UART_Init@baudrate,w
  3505  0D30  00B1               	movwf	??_UART_Init
  3506  0D31  0830               	movf	UART_Init@baudrate+1,w
  3507  0D32  00B2               	movwf	??_UART_Init+1
  3508  0D33  3000               	movlw	0
  3509  0D34  1BB2               	btfsc	??_UART_Init+1,7
  3510  0D35  30FF               	movlw	255
  3511  0D36  00B3               	movwf	??_UART_Init+2
  3512  0D37  00B4               	movwf	??_UART_Init+3
  3513  0D38  3006               	movlw	6
  3514  0D39                     u2895:	
  3515  0D39  1003               	clrc
  3516  0D3A  0DB1               	rlf	??_UART_Init,f
  3517  0D3B  0DB2               	rlf	??_UART_Init+1,f
  3518  0D3C  0DB3               	rlf	??_UART_Init+2,f
  3519  0D3D  0DB4               	rlf	??_UART_Init+3,f
  3520  0D3E                     u2890:	
  3521  0D3E  3EFF               	addlw	-1
  3522  0D3F  1D03               	skipz
  3523  0D40  2D39               	goto	u2895
  3524  0D41  0834               	movf	??_UART_Init+3,w
  3525  0D42  00A3               	movwf	___aldiv@divisor+3
  3526  0D43  0833               	movf	??_UART_Init+2,w
  3527  0D44  00A2               	movwf	___aldiv@divisor+2
  3528  0D45  0832               	movf	??_UART_Init+1,w
  3529  0D46  00A1               	movwf	___aldiv@divisor+1
  3530  0D47  0831               	movf	??_UART_Init,w
  3531  0D48  00A0               	movwf	___aldiv@divisor
  3532  0D49  3001               	movlw	1
  3533  0D4A  00A7               	movwf	___aldiv@dividend+3
  3534  0D4B  30E8               	movlw	232
  3535  0D4C  00A6               	movwf	___aldiv@dividend+2
  3536  0D4D  3048               	movlw	72
  3537  0D4E  00A5               	movwf	___aldiv@dividend+1
  3538  0D4F  3000               	movlw	0
  3539  0D50  00A4               	movwf	___aldiv@dividend
  3540  0D51  120A  158A  2763  120A  158A  	fcall	___aldiv
  3541  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  3542  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  3543  0D58  0820               	movf	?___aldiv,w
  3544  0D59  3EFF               	addlw	255
  3545  0D5A  1683               	bsf	3,5	;RP0=1, select bank1
  3546  0D5B  1303               	bcf	3,6	;RP1=0, select bank1
  3547  0D5C  0099               	movwf	25	;volatile
  3548  0D5D                     l2772:	
  3549                           
  3550                           ;main.c: 378:     INTCONbits.GIE = 1;
  3551  0D5D  178B               	bsf	11,7	;volatile
  3552  0D5E                     l2774:	
  3553                           
  3554                           ;main.c: 379:     INTCONbits.PEIE = 1;
  3555  0D5E  170B               	bsf	11,6	;volatile
  3556  0D5F                     l2776:	
  3557                           
  3558                           ;main.c: 380:     PIE1bits.RCIE = 1;
  3559  0D5F  168C               	bsf	12,5	;volatile
  3560  0D60                     l273:	
  3561  0D60  0008               	return
  3562  0D61                     __end_of_UART_Init:	
  3563                           
  3564                           	psect	text9
  3565  0F63                     __ptext9:	
  3566 ;; *************** function ___aldiv *****************
  3567 ;; Defined at:
  3568 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  divisor         4    0[BANK0 ] long 
  3571 ;;  dividend        4    4[BANK0 ] long 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  quotient        4   11[BANK0 ] long 
  3574 ;;  sign            1   10[BANK0 ] unsigned char 
  3575 ;;  counter         1    9[BANK0 ] unsigned char 
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  4    0[BANK0 ] long 
  3578 ;; Registers used:
  3579 ;;		wreg, status,2, status,0
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3585 ;;      Params:         0       8       0       0       0
  3586 ;;      Locals:         0       6       0       0       0
  3587 ;;      Temps:          0       1       0       0       0
  3588 ;;      Totals:         0      15       0       0       0
  3589 ;;Total ram usage:       15 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    2
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_UART_Init
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           
  3600                           ;psect for function ___aldiv
  3601  0F63                     ___aldiv:	
  3602  0F63                     l2634:	
  3603                           ;incstack = 0
  3604                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3605                           
  3606  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  3607  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  3608  0F65  01AA               	clrf	___aldiv@sign
  3609  0F66                     l2636:	
  3610  0F66  1FA3               	btfss	___aldiv@divisor+3,7
  3611  0F67  2F69               	goto	u2601
  3612  0F68  2F6A               	goto	u2600
  3613  0F69                     u2601:	
  3614  0F69  2F77               	goto	l505
  3615  0F6A                     u2600:	
  3616  0F6A                     l2638:	
  3617  0F6A  09A0               	comf	___aldiv@divisor,f
  3618  0F6B  09A1               	comf	___aldiv@divisor+1,f
  3619  0F6C  09A2               	comf	___aldiv@divisor+2,f
  3620  0F6D  09A3               	comf	___aldiv@divisor+3,f
  3621  0F6E  0AA0               	incf	___aldiv@divisor,f
  3622  0F6F  1903               	skipnz
  3623  0F70  0AA1               	incf	___aldiv@divisor+1,f
  3624  0F71  1903               	skipnz
  3625  0F72  0AA2               	incf	___aldiv@divisor+2,f
  3626  0F73  1903               	skipnz
  3627  0F74  0AA3               	incf	___aldiv@divisor+3,f
  3628  0F75  01AA               	clrf	___aldiv@sign
  3629  0F76  0AAA               	incf	___aldiv@sign,f
  3630  0F77                     l505:	
  3631  0F77  1FA7               	btfss	___aldiv@dividend+3,7
  3632  0F78  2F7A               	goto	u2611
  3633  0F79  2F7B               	goto	u2610
  3634  0F7A                     u2611:	
  3635  0F7A  2F8A               	goto	l2644
  3636  0F7B                     u2610:	
  3637  0F7B                     l2640:	
  3638  0F7B  09A4               	comf	___aldiv@dividend,f
  3639  0F7C  09A5               	comf	___aldiv@dividend+1,f
  3640  0F7D  09A6               	comf	___aldiv@dividend+2,f
  3641  0F7E  09A7               	comf	___aldiv@dividend+3,f
  3642  0F7F  0AA4               	incf	___aldiv@dividend,f
  3643  0F80  1903               	skipnz
  3644  0F81  0AA5               	incf	___aldiv@dividend+1,f
  3645  0F82  1903               	skipnz
  3646  0F83  0AA6               	incf	___aldiv@dividend+2,f
  3647  0F84  1903               	skipnz
  3648  0F85  0AA7               	incf	___aldiv@dividend+3,f
  3649  0F86                     l2642:	
  3650  0F86  3001               	movlw	1
  3651  0F87  00A8               	movwf	??___aldiv
  3652  0F88  0828               	movf	??___aldiv,w
  3653  0F89  06AA               	xorwf	___aldiv@sign,f
  3654  0F8A                     l2644:	
  3655  0F8A  3000               	movlw	0
  3656  0F8B  00AE               	movwf	___aldiv@quotient+3
  3657  0F8C  3000               	movlw	0
  3658  0F8D  00AD               	movwf	___aldiv@quotient+2
  3659  0F8E  3000               	movlw	0
  3660  0F8F  00AC               	movwf	___aldiv@quotient+1
  3661  0F90  3000               	movlw	0
  3662  0F91  00AB               	movwf	___aldiv@quotient
  3663  0F92                     l2646:	
  3664  0F92  0823               	movf	___aldiv@divisor+3,w
  3665  0F93  0422               	iorwf	___aldiv@divisor+2,w
  3666  0F94  0421               	iorwf	___aldiv@divisor+1,w
  3667  0F95  0420               	iorwf	___aldiv@divisor,w
  3668  0F96  1903               	skipnz
  3669  0F97  2F99               	goto	u2621
  3670  0F98  2F9A               	goto	u2620
  3671  0F99                     u2621:	
  3672  0F99  2FE7               	goto	l2666
  3673  0F9A                     u2620:	
  3674  0F9A                     l2648:	
  3675  0F9A  01A9               	clrf	___aldiv@counter
  3676  0F9B  0AA9               	incf	___aldiv@counter,f
  3677  0F9C  2FAA               	goto	l2652
  3678  0F9D                     l2650:	
  3679  0F9D  3001               	movlw	1
  3680  0F9E  00A8               	movwf	??___aldiv
  3681  0F9F                     u2635:	
  3682  0F9F  1003               	clrc
  3683  0FA0  0DA0               	rlf	___aldiv@divisor,f
  3684  0FA1  0DA1               	rlf	___aldiv@divisor+1,f
  3685  0FA2  0DA2               	rlf	___aldiv@divisor+2,f
  3686  0FA3  0DA3               	rlf	___aldiv@divisor+3,f
  3687  0FA4  0BA8               	decfsz	??___aldiv,f
  3688  0FA5  2F9F               	goto	u2635
  3689  0FA6  3001               	movlw	1
  3690  0FA7  00A8               	movwf	??___aldiv
  3691  0FA8  0828               	movf	??___aldiv,w
  3692  0FA9  07A9               	addwf	___aldiv@counter,f
  3693  0FAA                     l2652:	
  3694  0FAA  1FA3               	btfss	___aldiv@divisor+3,7
  3695  0FAB  2FAD               	goto	u2641
  3696  0FAC  2FAE               	goto	u2640
  3697  0FAD                     u2641:	
  3698  0FAD  2F9D               	goto	l2650
  3699  0FAE                     u2640:	
  3700  0FAE                     l2654:	
  3701  0FAE  3001               	movlw	1
  3702  0FAF  00A8               	movwf	??___aldiv
  3703  0FB0                     u2655:	
  3704  0FB0  1003               	clrc
  3705  0FB1  0DAB               	rlf	___aldiv@quotient,f
  3706  0FB2  0DAC               	rlf	___aldiv@quotient+1,f
  3707  0FB3  0DAD               	rlf	___aldiv@quotient+2,f
  3708  0FB4  0DAE               	rlf	___aldiv@quotient+3,f
  3709  0FB5  0BA8               	decfsz	??___aldiv,f
  3710  0FB6  2FB0               	goto	u2655
  3711  0FB7                     l2656:	
  3712  0FB7  0823               	movf	___aldiv@divisor+3,w
  3713  0FB8  0227               	subwf	___aldiv@dividend+3,w
  3714  0FB9  1D03               	skipz
  3715  0FBA  2FC5               	goto	u2665
  3716  0FBB  0822               	movf	___aldiv@divisor+2,w
  3717  0FBC  0226               	subwf	___aldiv@dividend+2,w
  3718  0FBD  1D03               	skipz
  3719  0FBE  2FC5               	goto	u2665
  3720  0FBF  0821               	movf	___aldiv@divisor+1,w
  3721  0FC0  0225               	subwf	___aldiv@dividend+1,w
  3722  0FC1  1D03               	skipz
  3723  0FC2  2FC5               	goto	u2665
  3724  0FC3  0820               	movf	___aldiv@divisor,w
  3725  0FC4  0224               	subwf	___aldiv@dividend,w
  3726  0FC5                     u2665:	
  3727  0FC5  1C03               	skipc
  3728  0FC6  2FC8               	goto	u2661
  3729  0FC7  2FC9               	goto	u2660
  3730  0FC8                     u2661:	
  3731  0FC8  2FD8               	goto	l2662
  3732  0FC9                     u2660:	
  3733  0FC9                     l2658:	
  3734  0FC9  0820               	movf	___aldiv@divisor,w
  3735  0FCA  02A4               	subwf	___aldiv@dividend,f
  3736  0FCB  0821               	movf	___aldiv@divisor+1,w
  3737  0FCC  1C03               	skipc
  3738  0FCD  0F21               	incfsz	___aldiv@divisor+1,w
  3739  0FCE  02A5               	subwf	___aldiv@dividend+1,f
  3740  0FCF  0822               	movf	___aldiv@divisor+2,w
  3741  0FD0  1C03               	skipc
  3742  0FD1  0F22               	incfsz	___aldiv@divisor+2,w
  3743  0FD2  02A6               	subwf	___aldiv@dividend+2,f
  3744  0FD3  0823               	movf	___aldiv@divisor+3,w
  3745  0FD4  1C03               	skipc
  3746  0FD5  0F23               	incfsz	___aldiv@divisor+3,w
  3747  0FD6  02A7               	subwf	___aldiv@dividend+3,f
  3748  0FD7                     l2660:	
  3749  0FD7  142B               	bsf	___aldiv@quotient,0
  3750  0FD8                     l2662:	
  3751  0FD8  3001               	movlw	1
  3752  0FD9                     u2675:	
  3753  0FD9  1003               	clrc
  3754  0FDA  0CA3               	rrf	___aldiv@divisor+3,f
  3755  0FDB  0CA2               	rrf	___aldiv@divisor+2,f
  3756  0FDC  0CA1               	rrf	___aldiv@divisor+1,f
  3757  0FDD  0CA0               	rrf	___aldiv@divisor,f
  3758  0FDE  3EFF               	addlw	-1
  3759  0FDF  1D03               	skipz
  3760  0FE0  2FD9               	goto	u2675
  3761  0FE1                     l2664:	
  3762  0FE1  3001               	movlw	1
  3763  0FE2  02A9               	subwf	___aldiv@counter,f
  3764  0FE3  1D03               	btfss	3,2
  3765  0FE4  2FE6               	goto	u2681
  3766  0FE5  2FE7               	goto	u2680
  3767  0FE6                     u2681:	
  3768  0FE6  2FAE               	goto	l2654
  3769  0FE7                     u2680:	
  3770  0FE7                     l2666:	
  3771  0FE7  082A               	movf	___aldiv@sign,w
  3772  0FE8  1903               	btfsc	3,2
  3773  0FE9  2FEB               	goto	u2691
  3774  0FEA  2FEC               	goto	u2690
  3775  0FEB                     u2691:	
  3776  0FEB  2FF7               	goto	l2670
  3777  0FEC                     u2690:	
  3778  0FEC                     l2668:	
  3779  0FEC  09AB               	comf	___aldiv@quotient,f
  3780  0FED  09AC               	comf	___aldiv@quotient+1,f
  3781  0FEE  09AD               	comf	___aldiv@quotient+2,f
  3782  0FEF  09AE               	comf	___aldiv@quotient+3,f
  3783  0FF0  0AAB               	incf	___aldiv@quotient,f
  3784  0FF1  1903               	skipnz
  3785  0FF2  0AAC               	incf	___aldiv@quotient+1,f
  3786  0FF3  1903               	skipnz
  3787  0FF4  0AAD               	incf	___aldiv@quotient+2,f
  3788  0FF5  1903               	skipnz
  3789  0FF6  0AAE               	incf	___aldiv@quotient+3,f
  3790  0FF7                     l2670:	
  3791  0FF7  082E               	movf	___aldiv@quotient+3,w
  3792  0FF8  00A3               	movwf	?___aldiv+3
  3793  0FF9  082D               	movf	___aldiv@quotient+2,w
  3794  0FFA  00A2               	movwf	?___aldiv+2
  3795  0FFB  082C               	movf	___aldiv@quotient+1,w
  3796  0FFC  00A1               	movwf	?___aldiv+1
  3797  0FFD  082B               	movf	___aldiv@quotient,w
  3798  0FFE  00A0               	movwf	?___aldiv
  3799  0FFF                     l515:	
  3800  0FFF  0008               	return
  3801  1000                     __end_of___aldiv:	
  3802                           
  3803                           	psect	text10
  3804  0C79                     __ptext10:	
  3805 ;; *************** function _SetDisplay *****************
  3806 ;; Defined at:
  3807 ;;		line 445 in file "main.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  d1              1    wreg     unsigned char 
  3810 ;;  d2              1    0[BANK0 ] unsigned char 
  3811 ;;  d3              1    1[BANK0 ] unsigned char 
  3812 ;;  value           1    2[BANK0 ] unsigned char 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  d1              1    3[BANK0 ] unsigned char 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      void 
  3817 ;; Registers used:
  3818 ;;		wreg, status,0
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3824 ;;      Params:         0       3       0       0       0
  3825 ;;      Locals:         0       1       0       0       0
  3826 ;;      Temps:          0       0       0       0       0
  3827 ;;      Totals:         0       4       0       0       0
  3828 ;;Total ram usage:        4 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    2
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_main
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           
  3839                           ;psect for function _SetDisplay
  3840  0C79                     _SetDisplay:	
  3841                           
  3842                           ;incstack = 0
  3843                           ; Regs used in _SetDisplay: [wreg+status,0]
  3844                           ;SetDisplay@d1 stored from wreg
  3845  0C79  1283               	bcf	3,5	;RP0=0, select bank0
  3846  0C7A  1303               	bcf	3,6	;RP1=0, select bank0
  3847  0C7B  00A3               	movwf	SetDisplay@d1
  3848  0C7C                     l2836:	
  3849                           
  3850                           ;main.c: 445: void SetDisplay(char d1, char d2, char d3, char value);main.c: 446: {;main
      +                          .c: 447:     PORTAbits.RA2 = d1;
  3851  0C7C  0C23               	rrf	SetDisplay@d1,w
  3852  0C7D  1C03               	skipc
  3853  0C7E  1105               	bcf	5,2	;volatile
  3854  0C7F  1803               	skipnc
  3855  0C80  1505               	bsf	5,2	;volatile
  3856                           
  3857                           ;main.c: 448:     PORTAbits.RA3 = d2;
  3858  0C81  0C20               	rrf	SetDisplay@d2,w
  3859  0C82  1C03               	skipc
  3860  0C83  1185               	bcf	5,3	;volatile
  3861  0C84  1803               	skipnc
  3862  0C85  1585               	bsf	5,3	;volatile
  3863                           
  3864                           ;main.c: 449:     PORTAbits.RA4 = d3;
  3865  0C86  0C21               	rrf	SetDisplay@d3,w
  3866  0C87  1C03               	skipc
  3867  0C88  1205               	bcf	5,4	;volatile
  3868  0C89  1803               	skipnc
  3869  0C8A  1605               	bsf	5,4	;volatile
  3870  0C8B                     l2838:	
  3871                           
  3872                           ;main.c: 450:     PORTD = value;
  3873  0C8B  0822               	movf	SetDisplay@value,w
  3874  0C8C  0088               	movwf	8	;volatile
  3875  0C8D                     l305:	
  3876  0C8D  0008               	return
  3877  0C8E                     __end_of_SetDisplay:	
  3878                           
  3879                           	psect	text11
  3880  073C                     __ptext11:	
  3881 ;; *************** function _SetDefaultTimers *****************
  3882 ;; Defined at:
  3883 ;;		line 541 in file "main.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  rosso           2    0[BANK0 ] int 
  3886 ;;  verde           2    2[BANK0 ] int 
  3887 ;;  giallo          2    4[BANK0 ] int 
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;  i               2   14[BANK0 ] int 
  3890 ;;  l               2   12[BANK0 ] int 
  3891 ;; Return value:  Size  Location     Type
  3892 ;;                  1    wreg      void 
  3893 ;; Registers used:
  3894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3900 ;;      Params:         0       6       0       0       0
  3901 ;;      Locals:         0       4       0       0       0
  3902 ;;      Temps:          0       6       0       0       0
  3903 ;;      Totals:         0      16       0       0       0
  3904 ;;Total ram usage:       16 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    2
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_main
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           
  3915                           ;psect for function _SetDefaultTimers
  3916  073C                     _SetDefaultTimers:	
  3917  073C                     l2778:	
  3918                           ;incstack = 0
  3919                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0+btemp+1]
  3920                           
  3921                           
  3922                           ;main.c: 541: void SetDefaultTimers(int rosso, int verde, int giallo);main.c: 542: {;mai
      +                          n.c: 543:     for (int l = 0; l < 16; l++)
  3923  073C  1283               	bcf	3,5	;RP0=0, select bank0
  3924  073D  1303               	bcf	3,6	;RP1=0, select bank0
  3925  073E  01AC               	clrf	SetDefaultTimers@l
  3926  073F  01AD               	clrf	SetDefaultTimers@l+1
  3927  0740                     l2784:	
  3928                           
  3929                           ;main.c: 544:     {;main.c: 545:         for (int i = 0; i < 3; i++)
  3930  0740  1283               	bcf	3,5	;RP0=0, select bank0
  3931  0741  1303               	bcf	3,6	;RP1=0, select bank0
  3932  0742  01AE               	clrf	SetDefaultTimers@i
  3933  0743  01AF               	clrf	SetDefaultTimers@i+1
  3934  0744  2FA2               	goto	l2798
  3935  0745                     l2790:	
  3936                           
  3937                           ;main.c: 550:                 (*(Semafori[l])).new_times[i] = rosso;
  3938  0745  082C               	movf	SetDefaultTimers@l,w
  3939  0746  00A6               	movwf	??_SetDefaultTimers
  3940  0747  0726               	addwf	??_SetDefaultTimers,w
  3941  0748  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  3942  0749  0084               	movwf	4
  3943  074A  1383               	bcf	3,7	;select IRP bank1
  3944  074B  0800               	movf	0,w
  3945  074C  00A7               	movwf	??_SetDefaultTimers+1
  3946  074D  0A84               	incf	4,f
  3947  074E  0800               	movf	0,w
  3948  074F  00A8               	movwf	??_SetDefaultTimers+2
  3949  0750  082E               	movf	SetDefaultTimers@i,w
  3950  0751  00A9               	movwf	??_SetDefaultTimers+3
  3951  0752  0729               	addwf	??_SetDefaultTimers+3,w
  3952  0753  0727               	addwf	??_SetDefaultTimers+1,w
  3953  0754  00AA               	movwf	??_SetDefaultTimers+4
  3954  0755  0828               	movf	??_SetDefaultTimers+2,w
  3955  0756  1803               	skipnc
  3956  0757  3E01               	addlw	1
  3957  0758  00AB               	movwf	??_SetDefaultTimers+5
  3958  0759  082A               	movf	??_SetDefaultTimers+4,w
  3959  075A  0084               	movwf	4
  3960  075B  1783               	bsf	3,7
  3961  075C  1C2B               	btfss	??_SetDefaultTimers+5,0
  3962  075D  1383               	bcf	3,7
  3963  075E  0820               	movf	SetDefaultTimers@rosso,w
  3964  075F  0080               	movwf	0
  3965  0760  0A84               	incf	4,f
  3966  0761  0821               	movf	SetDefaultTimers@rosso+1,w
  3967  0762  0080               	movwf	0
  3968                           
  3969                           ;main.c: 551:                 break;
  3970  0763  2FB4               	goto	l2800
  3971  0764                     l2792:	
  3972                           
  3973                           ;main.c: 553:                 (*(Semafori[l])).new_times[i] = verde;
  3974  0764  082C               	movf	SetDefaultTimers@l,w
  3975  0765  00A6               	movwf	??_SetDefaultTimers
  3976  0766  0726               	addwf	??_SetDefaultTimers,w
  3977  0767  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  3978  0768  0084               	movwf	4
  3979  0769  1383               	bcf	3,7	;select IRP bank1
  3980  076A  0800               	movf	0,w
  3981  076B  00A7               	movwf	??_SetDefaultTimers+1
  3982  076C  0A84               	incf	4,f
  3983  076D  0800               	movf	0,w
  3984  076E  00A8               	movwf	??_SetDefaultTimers+2
  3985  076F  082E               	movf	SetDefaultTimers@i,w
  3986  0770  00A9               	movwf	??_SetDefaultTimers+3
  3987  0771  0729               	addwf	??_SetDefaultTimers+3,w
  3988  0772  0727               	addwf	??_SetDefaultTimers+1,w
  3989  0773  00AA               	movwf	??_SetDefaultTimers+4
  3990  0774  0828               	movf	??_SetDefaultTimers+2,w
  3991  0775  1803               	skipnc
  3992  0776  3E01               	addlw	1
  3993  0777  00AB               	movwf	??_SetDefaultTimers+5
  3994  0778  082A               	movf	??_SetDefaultTimers+4,w
  3995  0779  0084               	movwf	4
  3996  077A  1783               	bsf	3,7
  3997  077B  1C2B               	btfss	??_SetDefaultTimers+5,0
  3998  077C  1383               	bcf	3,7
  3999  077D  0822               	movf	SetDefaultTimers@verde,w
  4000  077E  0080               	movwf	0
  4001  077F  0A84               	incf	4,f
  4002  0780  0823               	movf	SetDefaultTimers@verde+1,w
  4003  0781  0080               	movwf	0
  4004                           
  4005                           ;main.c: 554:                 break;
  4006  0782  2FB4               	goto	l2800
  4007  0783                     l2794:	
  4008                           
  4009                           ;main.c: 556:                 (*(Semafori[l])).new_times[i] = giallo;
  4010  0783  082C               	movf	SetDefaultTimers@l,w
  4011  0784  00A6               	movwf	??_SetDefaultTimers
  4012  0785  0726               	addwf	??_SetDefaultTimers,w
  4013  0786  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  4014  0787  0084               	movwf	4
  4015  0788  1383               	bcf	3,7	;select IRP bank1
  4016  0789  0800               	movf	0,w
  4017  078A  00A7               	movwf	??_SetDefaultTimers+1
  4018  078B  0A84               	incf	4,f
  4019  078C  0800               	movf	0,w
  4020  078D  00A8               	movwf	??_SetDefaultTimers+2
  4021  078E  082E               	movf	SetDefaultTimers@i,w
  4022  078F  00A9               	movwf	??_SetDefaultTimers+3
  4023  0790  0729               	addwf	??_SetDefaultTimers+3,w
  4024  0791  0727               	addwf	??_SetDefaultTimers+1,w
  4025  0792  00AA               	movwf	??_SetDefaultTimers+4
  4026  0793  0828               	movf	??_SetDefaultTimers+2,w
  4027  0794  1803               	skipnc
  4028  0795  3E01               	addlw	1
  4029  0796  00AB               	movwf	??_SetDefaultTimers+5
  4030  0797  082A               	movf	??_SetDefaultTimers+4,w
  4031  0798  0084               	movwf	4
  4032  0799  1783               	bsf	3,7
  4033  079A  1C2B               	btfss	??_SetDefaultTimers+5,0
  4034  079B  1383               	bcf	3,7
  4035  079C  0824               	movf	SetDefaultTimers@giallo,w
  4036  079D  0080               	movwf	0
  4037  079E  0A84               	incf	4,f
  4038  079F  0825               	movf	SetDefaultTimers@giallo+1,w
  4039  07A0  0080               	movwf	0
  4040                           
  4041                           ;main.c: 557:                 break;
  4042  07A1  2FB4               	goto	l2800
  4043  07A2                     l2798:	
  4044                           
  4045                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4046                           ; Switch size 1, requested type "simple"
  4047                           ; Number of cases is 1, Range of values is 0 to 0
  4048                           ; switch strategies available:
  4049                           ; Name         Instructions Cycles
  4050                           ; simple_byte            4     3 (average)
  4051                           ; direct_byte           11     8 (fixed)
  4052                           ; jumptable            260     6 (fixed)
  4053                           ;	Chosen strategy is simple_byte
  4054  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  4055  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  4056  07A4  082F               	movf	SetDefaultTimers@i+1,w
  4057  07A5  3A00               	xorlw	0	; case 0
  4058  07A6  1903               	skipnz
  4059  07A7  2FA9               	goto	l3192
  4060  07A8  2FB4               	goto	l2800
  4061  07A9                     l3192:	
  4062                           
  4063                           ; Switch size 1, requested type "simple"
  4064                           ; Number of cases is 3, Range of values is 0 to 2
  4065                           ; switch strategies available:
  4066                           ; Name         Instructions Cycles
  4067                           ; simple_byte           10     6 (average)
  4068                           ; direct_byte           17     8 (fixed)
  4069                           ; jumptable            260     6 (fixed)
  4070                           ;	Chosen strategy is simple_byte
  4071  07A9  082E               	movf	SetDefaultTimers@i,w
  4072  07AA  3A00               	xorlw	0	; case 0
  4073  07AB  1903               	skipnz
  4074  07AC  2F45               	goto	l2790
  4075  07AD  3A01               	xorlw	1	; case 1
  4076  07AE  1903               	skipnz
  4077  07AF  2F64               	goto	l2792
  4078  07B0  3A03               	xorlw	3	; case 2
  4079  07B1  1903               	skipnz
  4080  07B2  2F83               	goto	l2794
  4081  07B3  2FB4               	goto	l2800
  4082  07B4                     l2800:	
  4083                           
  4084                           ;main.c: 559:         }
  4085  07B4  3001               	movlw	1
  4086  07B5  07AE               	addwf	SetDefaultTimers@i,f
  4087  07B6  1803               	skipnc
  4088  07B7  0AAF               	incf	SetDefaultTimers@i+1,f
  4089  07B8  3000               	movlw	0
  4090  07B9  07AF               	addwf	SetDefaultTimers@i+1,f
  4091  07BA                     l2802:	
  4092  07BA  082F               	movf	SetDefaultTimers@i+1,w
  4093  07BB  3A80               	xorlw	128
  4094  07BC  00FF               	movwf	btemp+1
  4095  07BD  3080               	movlw	128
  4096  07BE  027F               	subwf	btemp+1,w
  4097  07BF  1D03               	skipz
  4098  07C0  2FC3               	goto	u2905
  4099  07C1  3003               	movlw	3
  4100  07C2  022E               	subwf	SetDefaultTimers@i,w
  4101  07C3                     u2905:	
  4102  07C3  1C03               	skipc
  4103  07C4  2FC6               	goto	u2901
  4104  07C5  2FC7               	goto	u2900
  4105  07C6                     u2901:	
  4106  07C6  2FA2               	goto	l2798
  4107  07C7                     u2900:	
  4108  07C7                     l2804:	
  4109                           
  4110                           ;main.c: 560:     }
  4111  07C7  3001               	movlw	1
  4112  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  4113  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  4114  07CA  07AC               	addwf	SetDefaultTimers@l,f
  4115  07CB  1803               	skipnc
  4116  07CC  0AAD               	incf	SetDefaultTimers@l+1,f
  4117  07CD  3000               	movlw	0
  4118  07CE  07AD               	addwf	SetDefaultTimers@l+1,f
  4119  07CF                     l2806:	
  4120  07CF  082D               	movf	SetDefaultTimers@l+1,w
  4121  07D0  3A80               	xorlw	128
  4122  07D1  00FF               	movwf	btemp+1
  4123  07D2  3080               	movlw	128
  4124  07D3  027F               	subwf	btemp+1,w
  4125  07D4  1D03               	skipz
  4126  07D5  2FD8               	goto	u2915
  4127  07D6  3010               	movlw	16
  4128  07D7  022C               	subwf	SetDefaultTimers@l,w
  4129  07D8                     u2915:	
  4130  07D8  1C03               	skipc
  4131  07D9  2FDB               	goto	u2911
  4132  07DA  2FDC               	goto	u2910
  4133  07DB                     u2911:	
  4134  07DB  2F40               	goto	l2784
  4135  07DC                     u2910:	
  4136  07DC                     l344:	
  4137  07DC  0008               	return
  4138  07DD                     __end_of_SetDefaultTimers:	
  4139                           
  4140                           	psect	text12
  4141  0D9B                     __ptext12:	
  4142 ;; *************** function _GetTime *****************
  4143 ;; Defined at:
  4144 ;;		line 419 in file "main.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  index           2    0[BANK0 ] int 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  time            2    5[BANK0 ] int 
  4149 ;;  shortInt        1    4[BANK0 ] struct .
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  2    0[BANK0 ] int 
  4152 ;; Registers used:
  4153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4159 ;;      Params:         0       2       0       0       0
  4160 ;;      Locals:         0       3       0       0       0
  4161 ;;      Temps:          0       2       0       0       0
  4162 ;;      Totals:         0       7       0       0       0
  4163 ;;Total ram usage:        7 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:    2
  4166 ;; This function calls:
  4167 ;;		Nothing
  4168 ;; This function is called by:
  4169 ;;		_main
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           
  4174                           ;psect for function _GetTime
  4175  0D9B                     _GetTime:	
  4176  0D9B                     l2812:	
  4177                           ;incstack = 0
  4178                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4179                           
  4180                           
  4181                           ;main.c: 419: int GetTime(int index);main.c: 420: {;main.c: 421:     int time;;main.c: 4
      +                          25:     } shortInt;;main.c: 427:     shortInt.Val = dataFromGateway[index + 3] & 0x7F;
  4182  0D9B  1283               	bcf	3,5	;RP0=0, select bank0
  4183  0D9C  1303               	bcf	3,6	;RP1=0, select bank0
  4184  0D9D  0820               	movf	GetTime@index,w
  4185  0D9E  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4186  0D9F  0084               	movwf	4
  4187  0DA0  307F               	movlw	127
  4188  0DA1  1383               	bcf	3,7	;select IRP bank1
  4189  0DA2  0500               	andwf	0,w
  4190  0DA3  00A2               	movwf	??_GetTime
  4191  0DA4  0824               	movf	GetTime@shortInt,w
  4192  0DA5  0622               	xorwf	??_GetTime,w
  4193  0DA6  3980               	andlw	-128
  4194  0DA7  0622               	xorwf	??_GetTime,w
  4195  0DA8  00A4               	movwf	GetTime@shortInt
  4196  0DA9                     l2814:	
  4197                           
  4198                           ;main.c: 428:     time = shortInt.Val;
  4199  0DA9  0824               	movf	GetTime@shortInt,w
  4200  0DAA  397F               	andlw	127
  4201  0DAB  00A2               	movwf	??_GetTime
  4202  0DAC  01A3               	clrf	??_GetTime+1
  4203  0DAD  0822               	movf	??_GetTime,w
  4204  0DAE  00A5               	movwf	GetTime@time
  4205  0DAF  0823               	movf	??_GetTime+1,w
  4206  0DB0  00A6               	movwf	GetTime@time+1
  4207  0DB1                     l2816:	
  4208                           
  4209                           ;main.c: 429:     time = (time << 7) & 0x80;
  4210  0DB1  0826               	movf	GetTime@time+1,w
  4211  0DB2  00A3               	movwf	??_GetTime+1
  4212  0DB3  0825               	movf	GetTime@time,w
  4213  0DB4  00A2               	movwf	??_GetTime
  4214  0DB5  3007               	movlw	7
  4215  0DB6  00FF               	movwf	btemp+1
  4216  0DB7                     u2925:	
  4217  0DB7  1003               	clrc
  4218  0DB8  0DA2               	rlf	??_GetTime,f
  4219  0DB9  0DA3               	rlf	??_GetTime+1,f
  4220  0DBA  0BFF               	decfsz	btemp+1,f
  4221  0DBB  2DB7               	goto	u2925
  4222  0DBC  3080               	movlw	128
  4223  0DBD  0522               	andwf	??_GetTime,w
  4224  0DBE  00A5               	movwf	GetTime@time
  4225  0DBF  3000               	movlw	0
  4226  0DC0  0523               	andwf	??_GetTime+1,w
  4227  0DC1  00A6               	movwf	GetTime@time+1
  4228  0DC2                     l2818:	
  4229                           
  4230                           ;main.c: 431:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4231  0DC2  0820               	movf	GetTime@index,w
  4232  0DC3  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4233  0DC4  0084               	movwf	4
  4234  0DC5  307F               	movlw	127
  4235  0DC6  0500               	andwf	0,w
  4236  0DC7  00A2               	movwf	??_GetTime
  4237  0DC8  0824               	movf	GetTime@shortInt,w
  4238  0DC9  0622               	xorwf	??_GetTime,w
  4239  0DCA  3980               	andlw	-128
  4240  0DCB  0622               	xorwf	??_GetTime,w
  4241  0DCC  00A4               	movwf	GetTime@shortInt
  4242  0DCD                     l2820:	
  4243                           
  4244                           ;main.c: 432:     time = time | shortInt.Val;
  4245  0DCD  0824               	movf	GetTime@shortInt,w
  4246  0DCE  397F               	andlw	127
  4247  0DCF  00A2               	movwf	??_GetTime
  4248  0DD0  0825               	movf	GetTime@time,w
  4249  0DD1  0422               	iorwf	??_GetTime,w
  4250  0DD2  00A5               	movwf	GetTime@time
  4251  0DD3  0826               	movf	GetTime@time+1,w
  4252  0DD4  00A6               	movwf	GetTime@time+1
  4253  0DD5                     l2822:	
  4254                           
  4255                           ;main.c: 434:     return time;
  4256  0DD5  0826               	movf	GetTime@time+1,w
  4257  0DD6  00A1               	movwf	?_GetTime+1
  4258  0DD7  0825               	movf	GetTime@time,w
  4259  0DD8  00A0               	movwf	?_GetTime
  4260  0DD9                     l299:	
  4261  0DD9  0008               	return
  4262  0DDA                     __end_of_GetTime:	
  4263                           
  4264                           	psect	text13
  4265  0EF8                     __ptext13:	
  4266 ;; *************** function _GetDigits *****************
  4267 ;; Defined at:
  4268 ;;		line 437 in file "main.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  Time            2   16[BANK0 ] int 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  1    wreg      void 
  4275 ;; Registers used:
  4276 ;;		wreg, status,2, status,0, pclath, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4282 ;;      Params:         0       2       0       0       0
  4283 ;;      Locals:         0       2       0       0       0
  4284 ;;      Temps:          0       3       0       0       0
  4285 ;;      Totals:         0       7       0       0       0
  4286 ;;Total ram usage:        7 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    3
  4289 ;; This function calls:
  4290 ;;		___awdiv
  4291 ;;		___awmod
  4292 ;; This function is called by:
  4293 ;;		_main
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           
  4298                           ;psect for function _GetDigits
  4299  0EF8                     _GetDigits:	
  4300  0EF8                     l2826:	
  4301                           ;incstack = 0
  4302                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  4303                           
  4304                           
  4305                           ;main.c: 437: void GetDigits(int Time);main.c: 438: {;main.c: 439:     countdown = Time;
  4306  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  4307  0EF9  1303               	bcf	3,6	;RP1=0, select bank0
  4308  0EFA  0830               	movf	GetDigits@Time,w
  4309  0EFB  00B2               	movwf	??_GetDigits
  4310  0EFC  0832               	movf	??_GetDigits,w
  4311  0EFD  00DA               	movwf	_countdown
  4312  0EFE                     l2828:	
  4313                           
  4314                           ;main.c: 440:     centinaia = countdown / 100;
  4315  0EFE  3064               	movlw	100
  4316  0EFF  00A7               	movwf	___awdiv@divisor
  4317  0F00  3000               	movlw	0
  4318  0F01  00A8               	movwf	___awdiv@divisor+1
  4319  0F02  085A               	movf	_countdown,w
  4320  0F03  00B2               	movwf	??_GetDigits
  4321  0F04  01B3               	clrf	??_GetDigits+1
  4322  0F05  0832               	movf	??_GetDigits,w
  4323  0F06  00A9               	movwf	___awdiv@dividend
  4324  0F07  0833               	movf	??_GetDigits+1,w
  4325  0F08  00AA               	movwf	___awdiv@dividend+1
  4326  0F09  120A  158A  268F  120A  158A  	fcall	___awdiv
  4327  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  4328  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  4329  0F10  0827               	movf	?___awdiv,w
  4330  0F11  00B4               	movwf	??_GetDigits+2
  4331  0F12  0834               	movf	??_GetDigits+2,w
  4332  0F13  00DD               	movwf	_centinaia
  4333  0F14                     l2830:	
  4334                           
  4335                           ;main.c: 441:     decine = (countdown % 100) / 10;
  4336  0F14  300A               	movlw	10
  4337  0F15  00A7               	movwf	___awdiv@divisor
  4338  0F16  3000               	movlw	0
  4339  0F17  00A8               	movwf	___awdiv@divisor+1
  4340  0F18  085A               	movf	_countdown,w
  4341  0F19  00B2               	movwf	??_GetDigits
  4342  0F1A  01B3               	clrf	??_GetDigits+1
  4343  0F1B  0832               	movf	??_GetDigits,w
  4344  0F1C  00A2               	movwf	___awmod@dividend
  4345  0F1D  0833               	movf	??_GetDigits+1,w
  4346  0F1E  00A3               	movwf	___awmod@dividend+1
  4347  0F1F  3064               	movlw	100
  4348  0F20  00A0               	movwf	___awmod@divisor
  4349  0F21  3000               	movlw	0
  4350  0F22  00A1               	movwf	___awmod@divisor+1
  4351  0F23  120A  158A  2634  120A  158A  	fcall	___awmod
  4352  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  4353  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  4354  0F2A  0821               	movf	?___awmod+1,w
  4355  0F2B  00AA               	movwf	___awdiv@dividend+1
  4356  0F2C  0820               	movf	?___awmod,w
  4357  0F2D  00A9               	movwf	___awdiv@dividend
  4358  0F2E  120A  158A  268F  120A  158A  	fcall	___awdiv
  4359  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  4360  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  4361  0F35  0827               	movf	?___awdiv,w
  4362  0F36  00B4               	movwf	??_GetDigits+2
  4363  0F37  0834               	movf	??_GetDigits+2,w
  4364  0F38  00DE               	movwf	_decine
  4365  0F39                     l2832:	
  4366                           
  4367                           ;main.c: 442:     unita = (countdown % 100) % 10;
  4368  0F39  085A               	movf	_countdown,w
  4369  0F3A  00B2               	movwf	??_GetDigits
  4370  0F3B  01B3               	clrf	??_GetDigits+1
  4371  0F3C  0832               	movf	??_GetDigits,w
  4372  0F3D  00A2               	movwf	___awmod@dividend
  4373  0F3E  0833               	movf	??_GetDigits+1,w
  4374  0F3F  00A3               	movwf	___awmod@dividend+1
  4375  0F40  3064               	movlw	100
  4376  0F41  00A0               	movwf	___awmod@divisor
  4377  0F42  3000               	movlw	0
  4378  0F43  00A1               	movwf	___awmod@divisor+1
  4379  0F44  120A  158A  2634  120A  158A  	fcall	___awmod
  4380  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  4381  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  4382  0F4B  0821               	movf	?___awmod+1,w
  4383  0F4C  00B6               	movwf	_GetDigits$1151+1
  4384  0F4D  0820               	movf	?___awmod,w
  4385  0F4E  00B5               	movwf	_GetDigits$1151
  4386  0F4F                     l2834:	
  4387                           
  4388                           ;main.c: 442:     unita = (countdown % 100) % 10;
  4389  0F4F  300A               	movlw	10
  4390  0F50  00A0               	movwf	___awmod@divisor
  4391  0F51  3000               	movlw	0
  4392  0F52  00A1               	movwf	___awmod@divisor+1
  4393  0F53  0836               	movf	_GetDigits$1151+1,w
  4394  0F54  00A3               	movwf	___awmod@dividend+1
  4395  0F55  0835               	movf	_GetDigits$1151,w
  4396  0F56  00A2               	movwf	___awmod@dividend
  4397  0F57  120A  158A  2634  120A  158A  	fcall	___awmod
  4398  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  4399  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  4400  0F5E  0820               	movf	?___awmod,w
  4401  0F5F  00B2               	movwf	??_GetDigits
  4402  0F60  0832               	movf	??_GetDigits,w
  4403  0F61  00DF               	movwf	_unita
  4404  0F62                     l302:	
  4405  0F62  0008               	return
  4406  0F63                     __end_of_GetDigits:	
  4407                           
  4408                           	psect	text14
  4409  0E34                     __ptext14:	
  4410 ;; *************** function ___awmod *****************
  4411 ;; Defined at:
  4412 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;  divisor         2    0[BANK0 ] int 
  4415 ;;  dividend        2    2[BANK0 ] int 
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;  sign            1    6[BANK0 ] unsigned char 
  4418 ;;  counter         1    5[BANK0 ] unsigned char 
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  2    0[BANK0 ] int 
  4421 ;; Registers used:
  4422 ;;		wreg, status,2, status,0
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4428 ;;      Params:         0       4       0       0       0
  4429 ;;      Locals:         0       2       0       0       0
  4430 ;;      Temps:          0       1       0       0       0
  4431 ;;      Totals:         0       7       0       0       0
  4432 ;;Total ram usage:        7 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    2
  4435 ;; This function calls:
  4436 ;;		Nothing
  4437 ;; This function is called by:
  4438 ;;		_main
  4439 ;;		_GetDigits
  4440 ;;		_intToString
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function ___awmod
  4446  0E34                     ___awmod:	
  4447  0E34                     l2718:	
  4448                           ;incstack = 0
  4449                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4450                           
  4451  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  4452  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  4453  0E36  01A6               	clrf	___awmod@sign
  4454  0E37                     l2720:	
  4455  0E37  1FA3               	btfss	___awmod@dividend+1,7
  4456  0E38  2E3A               	goto	u2801
  4457  0E39  2E3B               	goto	u2800
  4458  0E3A                     u2801:	
  4459  0E3A  2E42               	goto	l2726
  4460  0E3B                     u2800:	
  4461  0E3B                     l2722:	
  4462  0E3B  09A2               	comf	___awmod@dividend,f
  4463  0E3C  09A3               	comf	___awmod@dividend+1,f
  4464  0E3D  0AA2               	incf	___awmod@dividend,f
  4465  0E3E  1903               	skipnz
  4466  0E3F  0AA3               	incf	___awmod@dividend+1,f
  4467  0E40                     l2724:	
  4468  0E40  01A6               	clrf	___awmod@sign
  4469  0E41  0AA6               	incf	___awmod@sign,f
  4470  0E42                     l2726:	
  4471  0E42  1FA1               	btfss	___awmod@divisor+1,7
  4472  0E43  2E45               	goto	u2811
  4473  0E44  2E46               	goto	u2810
  4474  0E45                     u2811:	
  4475  0E45  2E4B               	goto	l2730
  4476  0E46                     u2810:	
  4477  0E46                     l2728:	
  4478  0E46  09A0               	comf	___awmod@divisor,f
  4479  0E47  09A1               	comf	___awmod@divisor+1,f
  4480  0E48  0AA0               	incf	___awmod@divisor,f
  4481  0E49  1903               	skipnz
  4482  0E4A  0AA1               	incf	___awmod@divisor+1,f
  4483  0E4B                     l2730:	
  4484  0E4B  0820               	movf	___awmod@divisor,w
  4485  0E4C  0421               	iorwf	___awmod@divisor+1,w
  4486  0E4D  1903               	btfsc	3,2
  4487  0E4E  2E50               	goto	u2821
  4488  0E4F  2E51               	goto	u2820
  4489  0E50                     u2821:	
  4490  0E50  2E80               	goto	l2748
  4491  0E51                     u2820:	
  4492  0E51                     l2732:	
  4493  0E51  01A5               	clrf	___awmod@counter
  4494  0E52  0AA5               	incf	___awmod@counter,f
  4495  0E53  2E5F               	goto	l2738
  4496  0E54                     l2734:	
  4497  0E54  3001               	movlw	1
  4498  0E55                     u2835:	
  4499  0E55  1003               	clrc
  4500  0E56  0DA0               	rlf	___awmod@divisor,f
  4501  0E57  0DA1               	rlf	___awmod@divisor+1,f
  4502  0E58  3EFF               	addlw	-1
  4503  0E59  1D03               	skipz
  4504  0E5A  2E55               	goto	u2835
  4505  0E5B                     l2736:	
  4506  0E5B  3001               	movlw	1
  4507  0E5C  00A4               	movwf	??___awmod
  4508  0E5D  0824               	movf	??___awmod,w
  4509  0E5E  07A5               	addwf	___awmod@counter,f
  4510  0E5F                     l2738:	
  4511  0E5F  1FA1               	btfss	___awmod@divisor+1,7
  4512  0E60  2E62               	goto	u2841
  4513  0E61  2E63               	goto	u2840
  4514  0E62                     u2841:	
  4515  0E62  2E54               	goto	l2734
  4516  0E63                     u2840:	
  4517  0E63                     l2740:	
  4518  0E63  0821               	movf	___awmod@divisor+1,w
  4519  0E64  0223               	subwf	___awmod@dividend+1,w
  4520  0E65  1D03               	skipz
  4521  0E66  2E69               	goto	u2855
  4522  0E67  0820               	movf	___awmod@divisor,w
  4523  0E68  0222               	subwf	___awmod@dividend,w
  4524  0E69                     u2855:	
  4525  0E69  1C03               	skipc
  4526  0E6A  2E6C               	goto	u2851
  4527  0E6B  2E6D               	goto	u2850
  4528  0E6C                     u2851:	
  4529  0E6C  2E73               	goto	l2744
  4530  0E6D                     u2850:	
  4531  0E6D                     l2742:	
  4532  0E6D  0820               	movf	___awmod@divisor,w
  4533  0E6E  02A2               	subwf	___awmod@dividend,f
  4534  0E6F  0821               	movf	___awmod@divisor+1,w
  4535  0E70  1C03               	skipc
  4536  0E71  03A3               	decf	___awmod@dividend+1,f
  4537  0E72  02A3               	subwf	___awmod@dividend+1,f
  4538  0E73                     l2744:	
  4539  0E73  3001               	movlw	1
  4540  0E74                     u2865:	
  4541  0E74  1003               	clrc
  4542  0E75  0CA1               	rrf	___awmod@divisor+1,f
  4543  0E76  0CA0               	rrf	___awmod@divisor,f
  4544  0E77  3EFF               	addlw	-1
  4545  0E78  1D03               	skipz
  4546  0E79  2E74               	goto	u2865
  4547  0E7A                     l2746:	
  4548  0E7A  3001               	movlw	1
  4549  0E7B  02A5               	subwf	___awmod@counter,f
  4550  0E7C  1D03               	btfss	3,2
  4551  0E7D  2E7F               	goto	u2871
  4552  0E7E  2E80               	goto	u2870
  4553  0E7F                     u2871:	
  4554  0E7F  2E63               	goto	l2740
  4555  0E80                     u2870:	
  4556  0E80                     l2748:	
  4557  0E80  0826               	movf	___awmod@sign,w
  4558  0E81  1903               	btfsc	3,2
  4559  0E82  2E84               	goto	u2881
  4560  0E83  2E85               	goto	u2880
  4561  0E84                     u2881:	
  4562  0E84  2E8A               	goto	l2752
  4563  0E85                     u2880:	
  4564  0E85                     l2750:	
  4565  0E85  09A2               	comf	___awmod@dividend,f
  4566  0E86  09A3               	comf	___awmod@dividend+1,f
  4567  0E87  0AA2               	incf	___awmod@dividend,f
  4568  0E88  1903               	skipnz
  4569  0E89  0AA3               	incf	___awmod@dividend+1,f
  4570  0E8A                     l2752:	
  4571  0E8A  0823               	movf	___awmod@dividend+1,w
  4572  0E8B  00A1               	movwf	?___awmod+1
  4573  0E8C  0822               	movf	___awmod@dividend,w
  4574  0E8D  00A0               	movwf	?___awmod
  4575  0E8E                     l606:	
  4576  0E8E  0008               	return
  4577  0E8F                     __end_of___awmod:	
  4578                           
  4579                           	psect	text15
  4580  0E8F                     __ptext15:	
  4581 ;; *************** function ___awdiv *****************
  4582 ;; Defined at:
  4583 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  divisor         2    7[BANK0 ] int 
  4586 ;;  dividend        2    9[BANK0 ] int 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  quotient        2   14[BANK0 ] int 
  4589 ;;  sign            1   13[BANK0 ] unsigned char 
  4590 ;;  counter         1   12[BANK0 ] unsigned char 
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  2    7[BANK0 ] int 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4600 ;;      Params:         0       4       0       0       0
  4601 ;;      Locals:         0       4       0       0       0
  4602 ;;      Temps:          0       1       0       0       0
  4603 ;;      Totals:         0       9       0       0       0
  4604 ;;Total ram usage:        9 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    2
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_map
  4611 ;;		_GetDigits
  4612 ;;		_intToString
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function ___awdiv
  4618  0E8F                     ___awdiv:	
  4619  0E8F                     l2674:	
  4620                           ;incstack = 0
  4621                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4622                           
  4623  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  4624  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  4625  0E91  01AD               	clrf	___awdiv@sign
  4626  0E92                     l2676:	
  4627  0E92  1FA8               	btfss	___awdiv@divisor+1,7
  4628  0E93  2E95               	goto	u2701
  4629  0E94  2E96               	goto	u2700
  4630  0E95                     u2701:	
  4631  0E95  2E9D               	goto	l2682
  4632  0E96                     u2700:	
  4633  0E96                     l2678:	
  4634  0E96  09A7               	comf	___awdiv@divisor,f
  4635  0E97  09A8               	comf	___awdiv@divisor+1,f
  4636  0E98  0AA7               	incf	___awdiv@divisor,f
  4637  0E99  1903               	skipnz
  4638  0E9A  0AA8               	incf	___awdiv@divisor+1,f
  4639  0E9B                     l2680:	
  4640  0E9B  01AD               	clrf	___awdiv@sign
  4641  0E9C  0AAD               	incf	___awdiv@sign,f
  4642  0E9D                     l2682:	
  4643  0E9D  1FAA               	btfss	___awdiv@dividend+1,7
  4644  0E9E  2EA0               	goto	u2711
  4645  0E9F  2EA1               	goto	u2710
  4646  0EA0                     u2711:	
  4647  0EA0  2EAA               	goto	l2688
  4648  0EA1                     u2710:	
  4649  0EA1                     l2684:	
  4650  0EA1  09A9               	comf	___awdiv@dividend,f
  4651  0EA2  09AA               	comf	___awdiv@dividend+1,f
  4652  0EA3  0AA9               	incf	___awdiv@dividend,f
  4653  0EA4  1903               	skipnz
  4654  0EA5  0AAA               	incf	___awdiv@dividend+1,f
  4655  0EA6                     l2686:	
  4656  0EA6  3001               	movlw	1
  4657  0EA7  00AB               	movwf	??___awdiv
  4658  0EA8  082B               	movf	??___awdiv,w
  4659  0EA9  06AD               	xorwf	___awdiv@sign,f
  4660  0EAA                     l2688:	
  4661  0EAA  01AE               	clrf	___awdiv@quotient
  4662  0EAB  01AF               	clrf	___awdiv@quotient+1
  4663  0EAC                     l2690:	
  4664  0EAC  0827               	movf	___awdiv@divisor,w
  4665  0EAD  0428               	iorwf	___awdiv@divisor+1,w
  4666  0EAE  1903               	btfsc	3,2
  4667  0EAF  2EB1               	goto	u2721
  4668  0EB0  2EB2               	goto	u2720
  4669  0EB1                     u2721:	
  4670  0EB1  2EE9               	goto	l2710
  4671  0EB2                     u2720:	
  4672  0EB2                     l2692:	
  4673  0EB2  01AC               	clrf	___awdiv@counter
  4674  0EB3  0AAC               	incf	___awdiv@counter,f
  4675  0EB4  2EC0               	goto	l2698
  4676  0EB5                     l2694:	
  4677  0EB5  3001               	movlw	1
  4678  0EB6                     u2735:	
  4679  0EB6  1003               	clrc
  4680  0EB7  0DA7               	rlf	___awdiv@divisor,f
  4681  0EB8  0DA8               	rlf	___awdiv@divisor+1,f
  4682  0EB9  3EFF               	addlw	-1
  4683  0EBA  1D03               	skipz
  4684  0EBB  2EB6               	goto	u2735
  4685  0EBC                     l2696:	
  4686  0EBC  3001               	movlw	1
  4687  0EBD  00AB               	movwf	??___awdiv
  4688  0EBE  082B               	movf	??___awdiv,w
  4689  0EBF  07AC               	addwf	___awdiv@counter,f
  4690  0EC0                     l2698:	
  4691  0EC0  1FA8               	btfss	___awdiv@divisor+1,7
  4692  0EC1  2EC3               	goto	u2741
  4693  0EC2  2EC4               	goto	u2740
  4694  0EC3                     u2741:	
  4695  0EC3  2EB5               	goto	l2694
  4696  0EC4                     u2740:	
  4697  0EC4                     l2700:	
  4698  0EC4  3001               	movlw	1
  4699  0EC5                     u2755:	
  4700  0EC5  1003               	clrc
  4701  0EC6  0DAE               	rlf	___awdiv@quotient,f
  4702  0EC7  0DAF               	rlf	___awdiv@quotient+1,f
  4703  0EC8  3EFF               	addlw	-1
  4704  0EC9  1D03               	skipz
  4705  0ECA  2EC5               	goto	u2755
  4706  0ECB  0828               	movf	___awdiv@divisor+1,w
  4707  0ECC  022A               	subwf	___awdiv@dividend+1,w
  4708  0ECD  1D03               	skipz
  4709  0ECE  2ED1               	goto	u2765
  4710  0ECF  0827               	movf	___awdiv@divisor,w
  4711  0ED0  0229               	subwf	___awdiv@dividend,w
  4712  0ED1                     u2765:	
  4713  0ED1  1C03               	skipc
  4714  0ED2  2ED4               	goto	u2761
  4715  0ED3  2ED5               	goto	u2760
  4716  0ED4                     u2761:	
  4717  0ED4  2EDC               	goto	l2706
  4718  0ED5                     u2760:	
  4719  0ED5                     l2702:	
  4720  0ED5  0827               	movf	___awdiv@divisor,w
  4721  0ED6  02A9               	subwf	___awdiv@dividend,f
  4722  0ED7  0828               	movf	___awdiv@divisor+1,w
  4723  0ED8  1C03               	skipc
  4724  0ED9  03AA               	decf	___awdiv@dividend+1,f
  4725  0EDA  02AA               	subwf	___awdiv@dividend+1,f
  4726  0EDB                     l2704:	
  4727  0EDB  142E               	bsf	___awdiv@quotient,0
  4728  0EDC                     l2706:	
  4729  0EDC  3001               	movlw	1
  4730  0EDD                     u2775:	
  4731  0EDD  1003               	clrc
  4732  0EDE  0CA8               	rrf	___awdiv@divisor+1,f
  4733  0EDF  0CA7               	rrf	___awdiv@divisor,f
  4734  0EE0  3EFF               	addlw	-1
  4735  0EE1  1D03               	skipz
  4736  0EE2  2EDD               	goto	u2775
  4737  0EE3                     l2708:	
  4738  0EE3  3001               	movlw	1
  4739  0EE4  02AC               	subwf	___awdiv@counter,f
  4740  0EE5  1D03               	btfss	3,2
  4741  0EE6  2EE8               	goto	u2781
  4742  0EE7  2EE9               	goto	u2780
  4743  0EE8                     u2781:	
  4744  0EE8  2EC4               	goto	l2700
  4745  0EE9                     u2780:	
  4746  0EE9                     l2710:	
  4747  0EE9  082D               	movf	___awdiv@sign,w
  4748  0EEA  1903               	btfsc	3,2
  4749  0EEB  2EED               	goto	u2791
  4750  0EEC  2EEE               	goto	u2790
  4751  0EED                     u2791:	
  4752  0EED  2EF3               	goto	l2714
  4753  0EEE                     u2790:	
  4754  0EEE                     l2712:	
  4755  0EEE  09AE               	comf	___awdiv@quotient,f
  4756  0EEF  09AF               	comf	___awdiv@quotient+1,f
  4757  0EF0  0AAE               	incf	___awdiv@quotient,f
  4758  0EF1  1903               	skipnz
  4759  0EF2  0AAF               	incf	___awdiv@quotient+1,f
  4760  0EF3                     l2714:	
  4761  0EF3  082F               	movf	___awdiv@quotient+1,w
  4762  0EF4  00A8               	movwf	?___awdiv+1
  4763  0EF5  082E               	movf	___awdiv@quotient,w
  4764  0EF6  00A7               	movwf	?___awdiv
  4765  0EF7                     l593:	
  4766  0EF7  0008               	return
  4767  0EF8                     __end_of___awdiv:	
  4768                           
  4769                           	psect	text16
  4770  0CA5                     __ptext16:	
  4771 ;; *************** function _ADC_Read *****************
  4772 ;; Defined at:
  4773 ;;		line 361 in file "main.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;  canale          1    wreg     unsigned char 
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;  canale          1    3[BANK0 ] unsigned char 
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  2    0[BANK0 ] int 
  4780 ;; Registers used:
  4781 ;;		wreg, status,2, status,0
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4787 ;;      Params:         0       2       0       0       0
  4788 ;;      Locals:         0       1       0       0       0
  4789 ;;      Temps:          0       1       0       0       0
  4790 ;;      Totals:         0       4       0       0       0
  4791 ;;Total ram usage:        4 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:    2
  4794 ;; This function calls:
  4795 ;;		Nothing
  4796 ;; This function is called by:
  4797 ;;		_main
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           
  4802                           ;psect for function _ADC_Read
  4803  0CA5                     _ADC_Read:	
  4804                           
  4805                           ;incstack = 0
  4806                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  4807                           ;ADC_Read@canale stored from wreg
  4808  0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  4809  0CA6  1303               	bcf	3,6	;RP1=0, select bank0
  4810  0CA7  00A3               	movwf	ADC_Read@canale
  4811  0CA8                     l2856:	
  4812                           
  4813                           ;main.c: 361: int ADC_Read(char canale);main.c: 362: {;main.c: 363:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  4814  0CA8  0823               	movf	ADC_Read@canale,w
  4815  0CA9  00A2               	movwf	??_ADC_Read
  4816  0CAA  3002               	movlw	2
  4817  0CAB                     u2945:	
  4818  0CAB  1003               	clrc
  4819  0CAC  0DA2               	rlf	??_ADC_Read,f
  4820  0CAD  3EFF               	addlw	-1
  4821  0CAE  1D03               	skipz
  4822  0CAF  2CAB               	goto	u2945
  4823  0CB0  1003               	clrc
  4824  0CB1  0D22               	rlf	??_ADC_Read,w
  4825  0CB2  3801               	iorlw	1
  4826  0CB3  009F               	movwf	31	;volatile
  4827  0CB4                     l2858:	
  4828                           
  4829                           ;main.c: 364:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  4830  0CB4  3004               	movlw	4
  4831  0CB5  1283               	bcf	3,5	;RP0=0, select bank0
  4832  0CB6  1303               	bcf	3,6	;RP1=0, select bank0
  4833  0CB7  00A2               	movwf	??_ADC_Read
  4834  0CB8                     u3337:	
  4835  0CB8  0BA2               	decfsz	??_ADC_Read,f
  4836  0CB9  2CB8               	goto	u3337
  4837  0CBA  0000               	nop
  4838  0CBB                     l2860:	
  4839                           
  4840                           ;main.c: 365:     GO_nDONE = 1;
  4841  0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  4842  0CBC  1303               	bcf	3,6	;RP1=0, select bank0
  4843  0CBD  151F               	bsf	31,2	;volatile
  4844  0CBE                     l267:	
  4845                           ;main.c: 367:         ;
  4846                           
  4847                           
  4848                           ;main.c: 366:     while (GO_nDONE)
  4849  0CBE  191F               	btfsc	31,2	;volatile
  4850  0CBF  2CC1               	goto	u2951
  4851  0CC0  2CC2               	goto	u2950
  4852  0CC1                     u2951:	
  4853  0CC1  2CBE               	goto	l267
  4854  0CC2                     u2950:	
  4855  0CC2                     l2862:	
  4856                           
  4857                           ;main.c: 368:     return ADRESL + (ADRESH << 8);
  4858  0CC2  081E               	movf	30,w	;volatile
  4859  0CC3  00A1               	movwf	?_ADC_Read+1
  4860  0CC4  1683               	bsf	3,5	;RP0=1, select bank1
  4861  0CC5  1303               	bcf	3,6	;RP1=0, select bank1
  4862  0CC6  081E               	movf	30,w	;volatile
  4863  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  4864  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  4865  0CC9  00A0               	movwf	?_ADC_Read
  4866  0CCA                     l270:	
  4867  0CCA  0008               	return
  4868  0CCB                     __end_of_ADC_Read:	
  4869                           
  4870                           	psect	text17
  4871  0DDA                     __ptext17:	
  4872 ;; *************** function _ISR *****************
  4873 ;; Defined at:
  4874 ;;		line 562 in file "main.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  1    wreg      void 
  4881 ;; Registers used:
  4882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4888 ;;      Params:         0       0       0       0       0
  4889 ;;      Locals:         0       0       0       0       0
  4890 ;;      Temps:          4       0       0       0       0
  4891 ;;      Totals:         4       0       0       0       0
  4892 ;;Total ram usage:        4 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    1
  4895 ;; This function calls:
  4896 ;;		_UART_Read
  4897 ;;		_conteggioVeicoli
  4898 ;; This function is called by:
  4899 ;;		Interrupt level 1
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _ISR
  4905  0DDA                     _ISR:	
  4906  0DDA                     i1l2424:	
  4907                           
  4908                           ;main.c: 565:     if (RCIF && readGateway.Bit == 0)
  4909  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  4910  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  4911  0DDC  1E8C               	btfss	12,5	;volatile
  4912  0DDD  2DDF               	goto	u238_21
  4913  0DDE  2DE0               	goto	u238_20
  4914  0DDF                     u238_21:	
  4915  0DDF  2DE9               	goto	i1l2432
  4916  0DE0                     u238_20:	
  4917  0DE0                     i1l2426:	
  4918  0DE0  1862               	btfsc	_readGateway,0
  4919  0DE1  2DE3               	goto	u239_21
  4920  0DE2  2DE4               	goto	u239_20
  4921  0DE3                     u239_21:	
  4922  0DE3  2DE9               	goto	i1l2432
  4923  0DE4                     u239_20:	
  4924  0DE4                     i1l2428:	
  4925                           
  4926                           ;main.c: 566:     {;main.c: 567:         readGateway.Bit = 1;
  4927  0DE4  1462               	bsf	_readGateway,0
  4928                           
  4929                           ;main.c: 568:         readGatewayDone.Bit = 0;
  4930  0DE5  1063               	bcf	_readGatewayDone,0
  4931                           
  4932                           ;main.c: 569:         readGatewayDone.Timeout = 0;
  4933  0DE6  10E3               	bcf	_readGatewayDone,1
  4934  0DE7                     i1l2430:	
  4935                           
  4936                           ;main.c: 570:         dataFromGatewayIndex = 0;
  4937  0DE7  01D9               	clrf	_dataFromGatewayIndex
  4938                           
  4939                           ;main.c: 571:         timerReadFromGateway = 0;
  4940  0DE8  01D8               	clrf	_timerReadFromGateway
  4941  0DE9                     i1l2432:	
  4942                           
  4943                           ;main.c: 573:     if (RCIF && readGateway.Bit == 1)
  4944  0DE9  1E8C               	btfss	12,5	;volatile
  4945  0DEA  2DEC               	goto	u240_21
  4946  0DEB  2DED               	goto	u240_20
  4947  0DEC                     u240_21:	
  4948  0DEC  2E04               	goto	i1l2442
  4949  0DED                     u240_20:	
  4950  0DED                     i1l2434:	
  4951  0DED  1C62               	btfss	_readGateway,0
  4952  0DEE  2DF0               	goto	u241_21
  4953  0DEF  2DF1               	goto	u241_20
  4954  0DF0                     u241_21:	
  4955  0DF0  2E04               	goto	i1l2442
  4956  0DF1                     u241_20:	
  4957  0DF1                     i1l2436:	
  4958                           
  4959                           ;main.c: 574:     {;main.c: 575:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  4960  0DF1  120A  158A  243F  120A  158A  	fcall	_UART_Read
  4961  0DF6  00F6               	movwf	??_ISR
  4962  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  4963  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  4964  0DF9  0859               	movf	_dataFromGatewayIndex,w
  4965  0DFA  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  4966  0DFB  0084               	movwf	4
  4967  0DFC  0876               	movf	??_ISR,w
  4968  0DFD  1383               	bcf	3,7	;select IRP bank1
  4969  0DFE  0080               	movwf	0
  4970  0DFF                     i1l2438:	
  4971                           
  4972                           ;main.c: 576:         dataFromGatewayIndex++;
  4973  0DFF  3001               	movlw	1
  4974  0E00  00F6               	movwf	??_ISR
  4975  0E01  0876               	movf	??_ISR,w
  4976  0E02  07D9               	addwf	_dataFromGatewayIndex,f
  4977  0E03                     i1l2440:	
  4978                           
  4979                           ;main.c: 577:         timerReadFromGateway = 0;
  4980  0E03  01D8               	clrf	_timerReadFromGateway
  4981  0E04                     i1l2442:	
  4982                           
  4983                           ;main.c: 582:     if (TMR0IF)
  4984  0E04  1D0B               	btfss	11,2	;volatile
  4985  0E05  2E07               	goto	u242_21
  4986  0E06  2E08               	goto	u242_20
  4987  0E07                     u242_21:	
  4988  0E07  2E12               	goto	i1l2450
  4989  0E08                     u242_20:	
  4990  0E08                     i1l2444:	
  4991                           
  4992                           ;main.c: 583:     {;main.c: 584:         TMR0IF = 0;
  4993  0E08  110B               	bcf	11,2	;volatile
  4994  0E09                     i1l2446:	
  4995                           
  4996                           ;main.c: 585:         conteggioVeicoli();
  4997  0E09  120A  118A  2586  120A  158A  	fcall	_conteggioVeicoli
  4998  0E0E                     i1l2448:	
  4999                           
  5000                           ;main.c: 586:         TMR0 = 6;
  5001  0E0E  3006               	movlw	6
  5002  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  5003  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  5004  0E11  0081               	movwf	1	;volatile
  5005  0E12                     i1l2450:	
  5006                           
  5007                           ;main.c: 589:     if (TMR1IF)
  5008  0E12  1C0C               	btfss	12,0	;volatile
  5009  0E13  2E15               	goto	u243_21
  5010  0E14  2E16               	goto	u243_20
  5011  0E15                     u243_21:	
  5012  0E15  2E2B               	goto	i1l354
  5013  0E16                     u243_20:	
  5014  0E16                     i1l2452:	
  5015                           
  5016                           ;main.c: 590:     {;main.c: 591:         TMR1IF = 0;
  5017  0E16  100C               	bcf	12,0	;volatile
  5018  0E17                     i1l2454:	
  5019                           
  5020                           ;main.c: 592:         count_lux++;
  5021  0E17  3001               	movlw	1
  5022  0E18  00F6               	movwf	??_ISR
  5023  0E19  0876               	movf	??_ISR,w
  5024  0E1A  07F4               	addwf	_count_lux,f
  5025  0E1B                     i1l2456:	
  5026                           
  5027                           ;main.c: 594:         if (count_lux >= 20)
  5028  0E1B  3014               	movlw	20
  5029  0E1C  0274               	subwf	_count_lux,w
  5030  0E1D  1C03               	skipc
  5031  0E1E  2E20               	goto	u244_21
  5032  0E1F  2E21               	goto	u244_20
  5033  0E20                     u244_21:	
  5034  0E20  2E27               	goto	i1l2464
  5035  0E21                     u244_20:	
  5036  0E21                     i1l2458:	
  5037                           
  5038                           ;main.c: 595:         {;main.c: 596:             secondPassed.Bit = 1;
  5039  0E21  1461               	bsf	_secondPassed,0
  5040  0E22                     i1l2460:	
  5041                           
  5042                           ;main.c: 597:             count_lux = 0;
  5043  0E22  01F4               	clrf	_count_lux
  5044  0E23                     i1l2462:	
  5045                           
  5046                           ;main.c: 598:             timerReadFromGateway++;
  5047  0E23  3001               	movlw	1
  5048  0E24  00F6               	movwf	??_ISR
  5049  0E25  0876               	movf	??_ISR,w
  5050  0E26  07D8               	addwf	_timerReadFromGateway,f
  5051  0E27                     i1l2464:	
  5052                           
  5053                           ;main.c: 601:         TMR1H = 60;
  5054  0E27  303C               	movlw	60
  5055  0E28  008F               	movwf	15	;volatile
  5056  0E29                     i1l2466:	
  5057                           
  5058                           ;main.c: 602:         TMR1L = 176;
  5059  0E29  30B0               	movlw	176
  5060  0E2A  008E               	movwf	14	;volatile
  5061  0E2B                     i1l354:	
  5062  0E2B  0879               	movf	??_ISR+3,w
  5063  0E2C  008A               	movwf	10
  5064  0E2D  0878               	movf	??_ISR+2,w
  5065  0E2E  0084               	movwf	4
  5066  0E2F  0E77               	swapf	(??_ISR+1)^(0+4294967168),w
  5067  0E30  0083               	movwf	3
  5068  0E31  0EFE               	swapf	btemp,f
  5069  0E32  0E7E               	swapf	btemp,w
  5070  0E33  0009               	retfie
  5071  0E34                     __end_of_ISR:	
  5072                           
  5073                           	psect	intentry
  5074  0004                     __pintentry:	
  5075                           ;incstack = 0
  5076                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5077                           
  5078  0004                     interrupt_function:	
  5079  007E                     saved_w	set	btemp
  5080  0004  00FE               	movwf	btemp
  5081  0005  0E03               	swapf	3,w
  5082  0006  00F7               	movwf	??_ISR+1
  5083  0007  0804               	movf	4,w
  5084  0008  00F8               	movwf	??_ISR+2
  5085  0009  080A               	movf	10,w
  5086  000A  00F9               	movwf	??_ISR+3
  5087  000B  120A  158A  2DDA   	ljmp	_ISR
  5088                           
  5089                           	psect	text18
  5090  0586                     __ptext18:	
  5091 ;; *************** function _conteggioVeicoli *****************
  5092 ;; Defined at:
  5093 ;;		line 453 in file "main.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;		None
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;		None
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      void 
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5107 ;;      Params:         0       0       0       0       0
  5108 ;;      Locals:         0       0       0       0       0
  5109 ;;      Temps:          1       0       0       0       0
  5110 ;;      Totals:         1       0       0       0       0
  5111 ;;Total ram usage:        1 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; This function calls:
  5114 ;;		Nothing
  5115 ;; This function is called by:
  5116 ;;		_ISR
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           
  5121                           ;psect for function _conteggioVeicoli
  5122  0586                     _conteggioVeicoli:	
  5123  0586                     i1l2110:	
  5124                           ;incstack = 0
  5125                           ; Regs used in _conteggioVeicoli: [wreg+status,2+status,0]
  5126                           
  5127                           
  5128                           ;main.c: 456:     if (!PORTBbits.RB3)
  5129  0586  1283               	bcf	3,5	;RP0=0, select bank0
  5130  0587  1303               	bcf	3,6	;RP1=0, select bank0
  5131  0588  1986               	btfsc	6,3	;volatile
  5132  0589  2D8B               	goto	u182_21
  5133  058A  2D8C               	goto	u182_20
  5134  058B                     u182_21:	
  5135  058B  2D93               	goto	i1l308
  5136  058C                     u182_20:	
  5137  058C                     i1l2112:	
  5138                           
  5139                           ;main.c: 457:     {;main.c: 458:         count++;
  5140  058C  3001               	movlw	1
  5141  058D  07F0               	addwf	_count,f
  5142  058E  1803               	skipnc
  5143  058F  0AF1               	incf	_count+1,f
  5144  0590  3000               	movlw	0
  5145  0591  07F1               	addwf	_count+1,f
  5146                           
  5147                           ;main.c: 459:     }
  5148  0592  2DC2               	goto	i1l2128
  5149  0593                     i1l308:	
  5150                           ;main.c: 460:     else if (PORTBbits.RB3)
  5151                           
  5152  0593  1D86               	btfss	6,3	;volatile
  5153  0594  2D96               	goto	u183_21
  5154  0595  2D97               	goto	u183_20
  5155  0596                     u183_21:	
  5156  0596  2DC2               	goto	i1l2128
  5157  0597                     u183_20:	
  5158  0597                     i1l2114:	
  5159                           
  5160                           ;main.c: 461:     {;main.c: 462:         if (count >= 500)
  5161  0597  3001               	movlw	1
  5162  0598  0271               	subwf	_count+1,w
  5163  0599  30F4               	movlw	244
  5164  059A  1903               	skipnz
  5165  059B  0270               	subwf	_count,w
  5166  059C  1C03               	skipc
  5167  059D  2D9F               	goto	u184_21
  5168  059E  2DA0               	goto	u184_20
  5169  059F                     u184_21:	
  5170  059F  2DA4               	goto	i1l2118
  5171  05A0                     u184_20:	
  5172  05A0                     i1l2116:	
  5173                           
  5174                           ;main.c: 463:         {;main.c: 464:             motorcycle[0]++;
  5175  05A0  3001               	movlw	1
  5176  05A1  00F5               	movwf	??_conteggioVeicoli
  5177  05A2  0875               	movf	??_conteggioVeicoli,w
  5178  05A3  07D1               	addwf	_motorcycle,f
  5179  05A4                     i1l2118:	
  5180                           
  5181                           ;main.c: 466:         if (count >= 1500)
  5182  05A4  3005               	movlw	5
  5183  05A5  0271               	subwf	_count+1,w
  5184  05A6  30DC               	movlw	220
  5185  05A7  1903               	skipnz
  5186  05A8  0270               	subwf	_count,w
  5187  05A9  1C03               	skipc
  5188  05AA  2DAC               	goto	u185_21
  5189  05AB  2DAD               	goto	u185_20
  5190  05AC                     u185_21:	
  5191  05AC  2DB1               	goto	i1l2122
  5192  05AD                     u185_20:	
  5193  05AD                     i1l2120:	
  5194                           
  5195                           ;main.c: 467:         {;main.c: 468:             car[0]++;
  5196  05AD  3001               	movlw	1
  5197  05AE  00F5               	movwf	??_conteggioVeicoli
  5198  05AF  0875               	movf	??_conteggioVeicoli,w
  5199  05B0  07CD               	addwf	_car,f
  5200  05B1                     i1l2122:	
  5201                           
  5202                           ;main.c: 470:         if (count >= 3000)
  5203  05B1  300B               	movlw	11
  5204  05B2  0271               	subwf	_count+1,w
  5205  05B3  30B8               	movlw	184
  5206  05B4  1903               	skipnz
  5207  05B5  0270               	subwf	_count,w
  5208  05B6  1C03               	skipc
  5209  05B7  2DB9               	goto	u186_21
  5210  05B8  2DBA               	goto	u186_20
  5211  05B9                     u186_21:	
  5212  05B9  2DC0               	goto	i1l2126
  5213  05BA                     u186_20:	
  5214  05BA                     i1l2124:	
  5215                           
  5216                           ;main.c: 471:         {;main.c: 472:             truck[0]++;
  5217  05BA  3001               	movlw	1
  5218  05BB  00F5               	movwf	??_conteggioVeicoli
  5219  05BC  0875               	movf	??_conteggioVeicoli,w
  5220  05BD  1683               	bsf	3,5	;RP0=1, select bank1
  5221  05BE  1303               	bcf	3,6	;RP1=0, select bank1
  5222  05BF  07AF               	addwf	_truck^(0+128),f
  5223  05C0                     i1l2126:	
  5224                           
  5225                           ;main.c: 474:         count = 0;
  5226  05C0  01F0               	clrf	_count
  5227  05C1  01F1               	clrf	_count+1
  5228  05C2                     i1l2128:	
  5229                           
  5230                           ;main.c: 477:     if (!PORTBbits.RB4)
  5231  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  5232  05C3  1A06               	btfsc	6,4	;volatile
  5233  05C4  2DC6               	goto	u187_21
  5234  05C5  2DC7               	goto	u187_20
  5235  05C6                     u187_21:	
  5236  05C6  2DCE               	goto	i1l314
  5237  05C7                     u187_20:	
  5238  05C7                     i1l2130:	
  5239                           
  5240                           ;main.c: 478:     {;main.c: 479:         count++;
  5241  05C7  3001               	movlw	1
  5242  05C8  07F0               	addwf	_count,f
  5243  05C9  1803               	skipnc
  5244  05CA  0AF1               	incf	_count+1,f
  5245  05CB  3000               	movlw	0
  5246  05CC  07F1               	addwf	_count+1,f
  5247                           
  5248                           ;main.c: 480:     }
  5249  05CD  2DFD               	goto	i1l2146
  5250  05CE                     i1l314:	
  5251                           ;main.c: 481:     else if (PORTBbits.RB4)
  5252                           
  5253  05CE  1E06               	btfss	6,4	;volatile
  5254  05CF  2DD1               	goto	u188_21
  5255  05D0  2DD2               	goto	u188_20
  5256  05D1                     u188_21:	
  5257  05D1  2DFD               	goto	i1l2146
  5258  05D2                     u188_20:	
  5259  05D2                     i1l2132:	
  5260                           
  5261                           ;main.c: 482:     {;main.c: 483:         if (count >= 500)
  5262  05D2  3001               	movlw	1
  5263  05D3  0271               	subwf	_count+1,w
  5264  05D4  30F4               	movlw	244
  5265  05D5  1903               	skipnz
  5266  05D6  0270               	subwf	_count,w
  5267  05D7  1C03               	skipc
  5268  05D8  2DDA               	goto	u189_21
  5269  05D9  2DDB               	goto	u189_20
  5270  05DA                     u189_21:	
  5271  05DA  2DDF               	goto	i1l2136
  5272  05DB                     u189_20:	
  5273  05DB                     i1l2134:	
  5274                           
  5275                           ;main.c: 484:         {;main.c: 485:             motorcycle[1]++;
  5276  05DB  3001               	movlw	1
  5277  05DC  00F5               	movwf	??_conteggioVeicoli
  5278  05DD  0875               	movf	??_conteggioVeicoli,w
  5279  05DE  07D2               	addwf	_motorcycle+1,f
  5280  05DF                     i1l2136:	
  5281                           
  5282                           ;main.c: 487:         if (count >= 1500)
  5283  05DF  3005               	movlw	5
  5284  05E0  0271               	subwf	_count+1,w
  5285  05E1  30DC               	movlw	220
  5286  05E2  1903               	skipnz
  5287  05E3  0270               	subwf	_count,w
  5288  05E4  1C03               	skipc
  5289  05E5  2DE7               	goto	u190_21
  5290  05E6  2DE8               	goto	u190_20
  5291  05E7                     u190_21:	
  5292  05E7  2DEC               	goto	i1l2140
  5293  05E8                     u190_20:	
  5294  05E8                     i1l2138:	
  5295                           
  5296                           ;main.c: 488:         {;main.c: 489:             car[1]++;
  5297  05E8  3001               	movlw	1
  5298  05E9  00F5               	movwf	??_conteggioVeicoli
  5299  05EA  0875               	movf	??_conteggioVeicoli,w
  5300  05EB  07CE               	addwf	_car+1,f
  5301  05EC                     i1l2140:	
  5302                           
  5303                           ;main.c: 491:         if (count >= 3000)
  5304  05EC  300B               	movlw	11
  5305  05ED  0271               	subwf	_count+1,w
  5306  05EE  30B8               	movlw	184
  5307  05EF  1903               	skipnz
  5308  05F0  0270               	subwf	_count,w
  5309  05F1  1C03               	skipc
  5310  05F2  2DF4               	goto	u191_21
  5311  05F3  2DF5               	goto	u191_20
  5312  05F4                     u191_21:	
  5313  05F4  2DFB               	goto	i1l2144
  5314  05F5                     u191_20:	
  5315  05F5                     i1l2142:	
  5316                           
  5317                           ;main.c: 492:         {;main.c: 493:             truck[1]++;
  5318  05F5  3001               	movlw	1
  5319  05F6  00F5               	movwf	??_conteggioVeicoli
  5320  05F7  0875               	movf	??_conteggioVeicoli,w
  5321  05F8  1683               	bsf	3,5	;RP0=1, select bank1
  5322  05F9  1303               	bcf	3,6	;RP1=0, select bank1
  5323  05FA  07B0               	addwf	(_truck^(0+128)+1),f
  5324  05FB                     i1l2144:	
  5325                           
  5326                           ;main.c: 495:         count = 0;
  5327  05FB  01F0               	clrf	_count
  5328  05FC  01F1               	clrf	_count+1
  5329  05FD                     i1l2146:	
  5330                           
  5331                           ;main.c: 498:     if (!PORTBbits.RB5)
  5332  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  5333  05FE  1A86               	btfsc	6,5	;volatile
  5334  05FF  2E01               	goto	u192_21
  5335  0600  2E02               	goto	u192_20
  5336  0601                     u192_21:	
  5337  0601  2E09               	goto	i1l320
  5338  0602                     u192_20:	
  5339  0602                     i1l2148:	
  5340                           
  5341                           ;main.c: 499:     {;main.c: 500:         count++;
  5342  0602  3001               	movlw	1
  5343  0603  07F0               	addwf	_count,f
  5344  0604  1803               	skipnc
  5345  0605  0AF1               	incf	_count+1,f
  5346  0606  3000               	movlw	0
  5347  0607  07F1               	addwf	_count+1,f
  5348                           
  5349                           ;main.c: 501:     }
  5350  0608  2E38               	goto	i1l2164
  5351  0609                     i1l320:	
  5352                           ;main.c: 502:     else if (PORTBbits.RB5)
  5353                           
  5354  0609  1E86               	btfss	6,5	;volatile
  5355  060A  2E0C               	goto	u193_21
  5356  060B  2E0D               	goto	u193_20
  5357  060C                     u193_21:	
  5358  060C  2E38               	goto	i1l2164
  5359  060D                     u193_20:	
  5360  060D                     i1l2150:	
  5361                           
  5362                           ;main.c: 503:     {;main.c: 504:         if (count >= 500)
  5363  060D  3001               	movlw	1
  5364  060E  0271               	subwf	_count+1,w
  5365  060F  30F4               	movlw	244
  5366  0610  1903               	skipnz
  5367  0611  0270               	subwf	_count,w
  5368  0612  1C03               	skipc
  5369  0613  2E15               	goto	u194_21
  5370  0614  2E16               	goto	u194_20
  5371  0615                     u194_21:	
  5372  0615  2E1A               	goto	i1l2154
  5373  0616                     u194_20:	
  5374  0616                     i1l2152:	
  5375                           
  5376                           ;main.c: 505:         {;main.c: 506:             motorcycle[2]++;
  5377  0616  3001               	movlw	1
  5378  0617  00F5               	movwf	??_conteggioVeicoli
  5379  0618  0875               	movf	??_conteggioVeicoli,w
  5380  0619  07D3               	addwf	_motorcycle+2,f
  5381  061A                     i1l2154:	
  5382                           
  5383                           ;main.c: 508:         if (count >= 1500)
  5384  061A  3005               	movlw	5
  5385  061B  0271               	subwf	_count+1,w
  5386  061C  30DC               	movlw	220
  5387  061D  1903               	skipnz
  5388  061E  0270               	subwf	_count,w
  5389  061F  1C03               	skipc
  5390  0620  2E22               	goto	u195_21
  5391  0621  2E23               	goto	u195_20
  5392  0622                     u195_21:	
  5393  0622  2E27               	goto	i1l2158
  5394  0623                     u195_20:	
  5395  0623                     i1l2156:	
  5396                           
  5397                           ;main.c: 509:         {;main.c: 510:             car[2]++;
  5398  0623  3001               	movlw	1
  5399  0624  00F5               	movwf	??_conteggioVeicoli
  5400  0625  0875               	movf	??_conteggioVeicoli,w
  5401  0626  07CF               	addwf	_car+2,f
  5402  0627                     i1l2158:	
  5403                           
  5404                           ;main.c: 512:         if (count >= 3000)
  5405  0627  300B               	movlw	11
  5406  0628  0271               	subwf	_count+1,w
  5407  0629  30B8               	movlw	184
  5408  062A  1903               	skipnz
  5409  062B  0270               	subwf	_count,w
  5410  062C  1C03               	skipc
  5411  062D  2E2F               	goto	u196_21
  5412  062E  2E30               	goto	u196_20
  5413  062F                     u196_21:	
  5414  062F  2E36               	goto	i1l2162
  5415  0630                     u196_20:	
  5416  0630                     i1l2160:	
  5417                           
  5418                           ;main.c: 513:         {;main.c: 514:             truck[2]++;
  5419  0630  3001               	movlw	1
  5420  0631  00F5               	movwf	??_conteggioVeicoli
  5421  0632  0875               	movf	??_conteggioVeicoli,w
  5422  0633  1683               	bsf	3,5	;RP0=1, select bank1
  5423  0634  1303               	bcf	3,6	;RP1=0, select bank1
  5424  0635  07B1               	addwf	(_truck^(0+128)+2),f
  5425  0636                     i1l2162:	
  5426                           
  5427                           ;main.c: 516:         count = 0;
  5428  0636  01F0               	clrf	_count
  5429  0637  01F1               	clrf	_count+1
  5430  0638                     i1l2164:	
  5431                           
  5432                           ;main.c: 519:     if (!PORTAbits.RA5)
  5433  0638  1283               	bcf	3,5	;RP0=0, select bank0
  5434  0639  1A85               	btfsc	5,5	;volatile
  5435  063A  2E3C               	goto	u197_21
  5436  063B  2E3D               	goto	u197_20
  5437  063C                     u197_21:	
  5438  063C  2E44               	goto	i1l326
  5439  063D                     u197_20:	
  5440  063D                     i1l2166:	
  5441                           
  5442                           ;main.c: 520:     {;main.c: 521:         count++;
  5443  063D  3001               	movlw	1
  5444  063E  07F0               	addwf	_count,f
  5445  063F  1803               	skipnc
  5446  0640  0AF1               	incf	_count+1,f
  5447  0641  3000               	movlw	0
  5448  0642  07F1               	addwf	_count+1,f
  5449                           
  5450                           ;main.c: 522:     }
  5451  0643  2E73               	goto	i1l332
  5452  0644                     i1l326:	
  5453                           ;main.c: 523:     else if (PORTAbits.RA5)
  5454                           
  5455  0644  1E85               	btfss	5,5	;volatile
  5456  0645  2E47               	goto	u198_21
  5457  0646  2E48               	goto	u198_20
  5458  0647                     u198_21:	
  5459  0647  2E73               	goto	i1l332
  5460  0648                     u198_20:	
  5461  0648                     i1l2168:	
  5462                           
  5463                           ;main.c: 524:     {;main.c: 525:         if (count >= 500)
  5464  0648  3001               	movlw	1
  5465  0649  0271               	subwf	_count+1,w
  5466  064A  30F4               	movlw	244
  5467  064B  1903               	skipnz
  5468  064C  0270               	subwf	_count,w
  5469  064D  1C03               	skipc
  5470  064E  2E50               	goto	u199_21
  5471  064F  2E51               	goto	u199_20
  5472  0650                     u199_21:	
  5473  0650  2E55               	goto	i1l2172
  5474  0651                     u199_20:	
  5475  0651                     i1l2170:	
  5476                           
  5477                           ;main.c: 526:         {;main.c: 527:             motorcycle[3]++;
  5478  0651  3001               	movlw	1
  5479  0652  00F5               	movwf	??_conteggioVeicoli
  5480  0653  0875               	movf	??_conteggioVeicoli,w
  5481  0654  07D4               	addwf	_motorcycle+3,f
  5482  0655                     i1l2172:	
  5483                           
  5484                           ;main.c: 529:         if (count >= 1500)
  5485  0655  3005               	movlw	5
  5486  0656  0271               	subwf	_count+1,w
  5487  0657  30DC               	movlw	220
  5488  0658  1903               	skipnz
  5489  0659  0270               	subwf	_count,w
  5490  065A  1C03               	skipc
  5491  065B  2E5D               	goto	u200_21
  5492  065C  2E5E               	goto	u200_20
  5493  065D                     u200_21:	
  5494  065D  2E62               	goto	i1l2176
  5495  065E                     u200_20:	
  5496  065E                     i1l2174:	
  5497                           
  5498                           ;main.c: 530:         {;main.c: 531:             car[3]++;
  5499  065E  3001               	movlw	1
  5500  065F  00F5               	movwf	??_conteggioVeicoli
  5501  0660  0875               	movf	??_conteggioVeicoli,w
  5502  0661  07D0               	addwf	_car+3,f
  5503  0662                     i1l2176:	
  5504                           
  5505                           ;main.c: 533:         if (count >= 3000)
  5506  0662  300B               	movlw	11
  5507  0663  0271               	subwf	_count+1,w
  5508  0664  30B8               	movlw	184
  5509  0665  1903               	skipnz
  5510  0666  0270               	subwf	_count,w
  5511  0667  1C03               	skipc
  5512  0668  2E6A               	goto	u201_21
  5513  0669  2E6B               	goto	u201_20
  5514  066A                     u201_21:	
  5515  066A  2E71               	goto	i1l2180
  5516  066B                     u201_20:	
  5517  066B                     i1l2178:	
  5518                           
  5519                           ;main.c: 534:         {;main.c: 535:             truck[3]++;
  5520  066B  3001               	movlw	1
  5521  066C  00F5               	movwf	??_conteggioVeicoli
  5522  066D  0875               	movf	??_conteggioVeicoli,w
  5523  066E  1683               	bsf	3,5	;RP0=1, select bank1
  5524  066F  1303               	bcf	3,6	;RP1=0, select bank1
  5525  0670  07B2               	addwf	(_truck^(0+128)+3),f
  5526  0671                     i1l2180:	
  5527                           
  5528                           ;main.c: 537:         count = 0;
  5529  0671  01F0               	clrf	_count
  5530  0672  01F1               	clrf	_count+1
  5531  0673                     i1l332:	
  5532  0673  0008               	return
  5533  0674                     __end_of_conteggioVeicoli:	
  5534                           
  5535                           	psect	text19
  5536  0C3F                     __ptext19:	
  5537 ;; *************** function _UART_Read *****************
  5538 ;; Defined at:
  5539 ;;		line 400 in file "main.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;		None
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;		None
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      unsigned char 
  5546 ;; Registers used:
  5547 ;;		wreg
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5553 ;;      Params:         0       0       0       0       0
  5554 ;;      Locals:         0       0       0       0       0
  5555 ;;      Temps:          0       0       0       0       0
  5556 ;;      Totals:         0       0       0       0       0
  5557 ;;Total ram usage:        0 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; This function calls:
  5560 ;;		Nothing
  5561 ;; This function is called by:
  5562 ;;		_ISR
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           
  5567                           ;psect for function _UART_Read
  5568  0C3F                     _UART_Read:	
  5569  0C3F                     i1l2104:	
  5570                           ;incstack = 0
  5571                           ; Regs used in _UART_Read: [wreg]
  5572                           
  5573  0C3F                     i1l288:	
  5574                           ;main.c: 403:         ;
  5575                           
  5576                           
  5577                           ;main.c: 402:     while (!RCIF)
  5578  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  5579  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  5580  0C41  1E8C               	btfss	12,5	;volatile
  5581  0C42  2C44               	goto	u181_21
  5582  0C43  2C45               	goto	u181_20
  5583  0C44                     u181_21:	
  5584  0C44  2C3F               	goto	i1l288
  5585  0C45                     u181_20:	
  5586  0C45                     i1l290:	
  5587                           
  5588                           ;main.c: 404:     RCIF = 0;
  5589  0C45  128C               	bcf	12,5	;volatile
  5590  0C46                     i1l2106:	
  5591                           
  5592                           ;main.c: 405:     return RCREG;
  5593  0C46  081A               	movf	26,w	;volatile
  5594  0C47                     i1l291:	
  5595  0C47  0008               	return
  5596  0C48                     __end_of_UART_Read:	
  5597  007E                     btemp	set	126	;btemp
  5598  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        32
    BSS         243
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     45      68
    BANK1            80      0      79
    BANK3            96      0      96
    BANK2            96     23      95

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _map->___awdiv
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                45    45      0   17311
                                             29 BANK0     16    16      0
                                              0 BANK2     23    23      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                             ___wmul
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             9     7      2    2444
                                             20 BANK0      9     7      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1135
                                              0 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4658
                                             16 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1926
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     171
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             15 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3     934
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    16    10      6     716
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              7     5      2     322
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             16 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              1 COMMON     4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   ___wmul
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     17      5F      11       99.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2D      44       5       85.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     15C      12        0.0%
ABS                  0      0     15C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Jun 20 15:11:28 2020

                        pc 0002             ___bmul@product 0022                __CFG_CP$OFF 0000  
                       l83 0D26               ___awdiv@sign 002D                         _s0 00C3  
                       _s1 00B7                         _s2 01E4                         _s3 01D8  
                       _s4 01CC                         _s5 01C0                         _s6 01B4  
                       _s7 01A8                         _s8 019C                         _s9 0190  
                       fsr 0004        ___wmul@multiplicand 0022             _GetDigits$1151 0035  
              __CFG_LVP$ON 0000                        l125 0713                        l302 0F62  
                      l119 06C2                        l128 073B                        l224 0175  
                      l216 00BE                        l305 0C8D                        l218 0093  
                      l251 03E2                        l229 028F                        l270 0CCA  
                      l344 07DC                        l264 0C65                        l440 0CD9  
                      l505 0F77                        l273 0D60                        l442 0CF1  
                      l267 0CBE                        l515 0FFF                        l276 0C4B  
                      l606 0E8E                        l278 0C4F                        l279 0C52  
                      l296 0D9A                        l466 0CA4                        l299 0DD9  
                      l593 0EF7               __CFG_CPD$OFF 0000                        _ISR 0DDA  
                      _s10 014C                        _s11 0140                        _s12 0134  
                      _s13 0128                        _s14 011C                        _s15 0110  
                      _car 004D                        _map 0CF2                        fsr0 0004  
                      _str 00B3                        indf 0000               ___awmod@sign 0026  
             __CFG_FOSC$HS 0000                       ?_ISR 0075                main@colorId 015A  
                     l3010 02DB                       l3002 0295                       l3012 02DE  
                     l3004 0299                       l3020 0353                       l3030 037E  
                     l3022 035B                       l3014 02E6                       l3006 02A1  
                     l3032 0383                       l3024 0360                       l3040 03C0  
                     l3016 0317                       l3008 02A2                       l3050 03EA  
                     l3042 03D8                       l3034 0398                       l3026 0365  
                     l3018 031A                       l3060 040A                       l3052 03EB  
                     l3044 03DC                       l3028 0379                       l3062 047D  
                     l3054 03F8                       l3046 03E0                       l3038 03AD  
                     l2600 0706                       l3080 04BB                       l3072 0498  
                     l3056 03FC                       l3048 03E6                       l2610 072D  
                     l2602 0719                       l3082 054F                       l3074 04A7  
                     l3066 0486                       l2700 0EC4                       l2620 0CCB  
                     l2612 073A                       l2604 0726                       l3084 0560  
                     l3068 048A                       l2702 0ED5                       l2710 0EE9  
                     l2630 0CED                       l2622 0CCF                       l2550 0686  
                     l3086 0571                       l3078 04AE                       l3190 03B5  
                     l2712 0EEE                       l2704 0EDB                       l2720 0E37  
                     l3192 07A9                       l2800 07B4                       l2640 0F7B  
                     l2624 0CD3                       l2608 0727                       l2552 0693  
                     l2616 0C4B                       l2714 0EF3                       l2706 0EDC  
                     l2730 0E4B                       l2722 0E3B                       l2802 07BA  
                     l2650 0F9D                       l2642 0F86                       l2634 0F63  
                     l2626 0CE0                       l2570 06AF                       l2562 0697  
                     l2554 0694                       l2618 0C50                       l2708 0EE3  
                     l2740 0E63                       l2732 0E51                       l2724 0E40  
                     l2820 0DCD                       l2812 0D9B                       l2804 07C7  
                     l2660 0FD7                       l2652 0FAA                       l2644 0F8A  
                     l2636 0F66                       l2628 0CE7                       l2580 06D1  
                     l2572 06B5                       l2556 0695                       l2548 0677  
                     l3188 00B6                       l2900 0055                       l2750 0E85  
                     l2742 0E6D                       l2734 0E54                       l2726 0E42  
                     l2718 0E34                       l2830 0F14                       l2822 0DD5  
                     l2814 0DA9                       l2806 07CF                       l2670 0FF7  
                     l2662 0FD8                       l2654 0FAE                       l2646 0F92  
                     l2638 0F6A                       l2590 06E8                       l2582 06D7  
                     l2574 06C8                       l2910 006D                       l2902 0057  
                     l2680 0E9B                       l2752 0E8A                       l2744 0E73  
                     l2736 0E5B                       l2728 0E46                       l2832 0F39  
                     l2816 0DB1                       l2664 0FE1                       l2656 0FB7  
                     l2648 0F9A                       l2760 0C53                       l2584 06E4  
                     l2576 06D0                       l2568 069B                       l2840 0D64  
                     l2920 0089                       l2912 007D                       l2904 005B  
                     l2690 0EAC                       l2682 0E9D                       l2674 0E8F  
                     l2746 0E7A                       l2738 0E5F                       l2834 0F4F  
                     l2826 0EF8                       l2818 0DC2                       l2658 0FC9  
                     l2666 0FE7                       l2770 0D2F                       l2762 0C57  
                     l2850 0D81                       l2842 0D77                       l2922 0089  
                     l2914 0081                       l2906 005D                       l2860 0CBB  
                     l2692 0EB2                       l2684 0EA1                       l2676 0E92  
                     l2748 0E80                       l2828 0EFE                       l2836 0C7C  
                     l2668 0FEC                       l2772 0D5D                       l2764 0C5A  
                     l2756 0CF2                       l2596 06EC                       l2852 0D87  
                     l2932 0096                       l2924 0089                       l2916 0083  
                     l2908 0062                       l2862 0CC2                       l2694 0EB5  
                     l2686 0EA6                       l2678 0E96                       l2790 0745  
                     l2838 0C8B                       l2774 0D5E                       l2870 0C96  
                     l2766 0C5E                       l2598 0700                       l2854 0D8D  
                     l2950 00C6                       l2934 009C                       l2942 00A9  
                     l2926 0089                       l2918 0086                       ?_map 0030  
                     l2856 0CA8                       l2696 0EBC                       l2688 0EAA  
                     l2792 0764                       l2784 0740                       l2776 0D5F  
                     l2768 0D27                       l2872 0C9A                       l2848 0D79  
                     l2960 00D0                       l2952 00CA                       l2944 00C2  
                     l2936 009F                       l2928 008C                       l2858 0CB4  
                     l2698 0EC0                       l2794 0783                       l2778 073C  
                     l2874 0C9C                       l2866 0C91                       l2970 0168  
                     l2962 00F1                       l2954 00CC                       l2946 00C3  
                     l2938 00A5                       l2876 0CA3                       l2868 0C92  
                     l2980 01B9                       l2972 017B                       l2964 0116  
                     l2948 00C4                       l2892 004A                       l2798 07A2  
                     l2990 01D9                       l2974 018C                       l2966 012B  
                     l2894 0050                       l2992 0230                       l2984 01C7  
                     l2976 0192                       l2968 0160                       l2896 0051  
                     l2994 027D                       l2986 01CB                       l2978 01B5  
                     l2898 0053                       l2998 0286                       u3000 009C  
                     u3001 009B                       u3010 00A5                       u3011 00A4  
                     u3100 0230                       u3020 00C2                       u3101 022F  
                     u3021 00C1                       u3110 0295                       u3030 00CA  
                     u3111 0294                       u3031 00C9                       u3200 03DC  
                     u3120 0299                       u3201 03DB                       u3121 0298  
                     u3105 022C                       u3210 03E0                       u3130 02DB  
                     u3050 0175                       u3211 03DF                       u3131 02DA  
                     u3051 0174                       u3300 04BB                       u3220 03E6  
                     u3140 02E6                       u3060 017B                       u3301 04BA  
                     u3221 03E5                       u3141 02E5                       u3061 017A  
                     u3045 0107                       u2510 0713                       u3230 03EA  
                     u3150 0317                       u3070 01B5                       u2511 0712  
                     u3231 03E9                       u3151 0316                       u3071 01B4  
                     u3055 0171                       u2600 0F6A                       u2520 0719  
                     u2504 06F8                       u3240 03F8                       u3160 035B  
                     u3080 01C6                       u2601 0F69                       u2521 0718  
                     u2505 06F6                       u3241 03F7                       u3161 035A  
                     u3081 01C5                       u2610 0F7B                       u3250 0409  
                     u3170 0365                       u3090 01D8                       u2611 0F7A  
                     u2515 070F                       u3251 0408                       u3171 0364  
                     u3155 0313                       u3091 01D7                       u2700 0E96  
                     u2620 0F9A                       u2540 073A                       u3180 037E  
                     u2701 0E95                       u2621 0F99                       u2541 0739  
                     u3181 037D                       u3085 01C2                       u2710 0EA1  
                     u2534 071F                       u2470 06C2                       u2550 0C4F  
                     u3190 0383                       u2711 0EA0                       u3327 0C62  
                     u2535 071D                       u2471 06C1                       u2455 0689  
                     u2551 0C4E                       u3255 0405                       u3191 0382  
                     u3095 01D4                       u2720 0EB2                       u2800 0E3B  
                     u2640 0FAE                       u2560 0CD3                       u2480 06C8  
                     u2464 06A7                       u3264 0426                       u3337 0CB8  
                     u2721 0EB1                       u2801 0E3A                       u2641 0FAD  
                     u2561 0CD2                       u2545 0736                       u2481 06C7  
                     u2465 06A5                       u3265 0424                       u2810 0E46  
                     u2490 06E4                       u3290 0497                       u3274 044D  
                     u2811 0E45                       u2635 0F9F                       u2491 06E3  
                     u2475 06BE                       u3291 0496                       u3275 044B  
                     u2740 0EC4                       u2820 0E51                       u2900 07C7  
                     u2660 0FC9                       u3284 0474                       u2741 0EC3  
                     u2821 0E50                       u2901 07C6                       u2661 0FC8  
                     u3285 0472                       u2910 07DC                       u2590 0CED  
                     u2735 0EB6                       u2911 07DB                       u2655 0FB0  
                     u2591 0CEC                       u2575 0CDA                       u2495 06E0  
                     u3295 0493                       u2760 0ED5                       u2840 0E63  
                     u2680 0FE7                       u2761 0ED4                       u2841 0E62  
                     u2905 07C3                       u2681 0FE6                       u2665 0FC5  
                     u2585 0CE1                       u2850 0E6D                       u2690 0FEC  
                     u2930 0D9A                       u2755 0EC5                       u2851 0E6C  
                     u2835 0E55                       u2915 07D8                       u2691 0FEB  
                     u2675 0FD9                       u2931 0D99                       u2780 0EE9  
                     u2781 0EE8                       u2765 0ED1                       u2925 0DB7  
                     u2950 0CC2                       u2790 0EEE                       u2870 0E80  
                     u2951 0CC1                       u2791 0EED                       u2775 0EDD  
                     u2871 0E7F                       u2855 0E69                       u2935 0D96  
                     u2880 0E85                       u2960 0C96                       u2945 0CAB  
                     u2881 0E84                       u2865 0E74                       u2961 0C95  
                     u2890 0D3E                       u2970 0CA3                       u2971 0CA2  
                     _RCIF 0065                       u2990 0092                       u2895 0D39  
                     u2991 0091                       _TMR0 0001                       _TXIF 0064  
             __CFG_WRT$OFF 0000                       _disp 005B                       _main 004A  
                     _time 0072                       map@x 0030                       btemp 007E  
         __end_of_ADC_Read 0CCB              __CFG_BOREN$ON 0000                main@umidita 015F  
                     start 000E            __end_of_GetTime 0DDA          ___bmul@multiplier 0023  
             main@endCiclo 0161                      ??_ISR 0076  __size_of_conteggioVeicoli 00EE  
                    ??_map 003A            __end_of___aldiv 1000                      ?_main 0075  
          __end_of___awdiv 0EF8              __CFG_WDTE$OFF 0000            __end_of___awmod 0E8F  
          ___awdiv@divisor 0027                      _T1CON 0010                      i1l320 0609  
                    i1l314 05CE                      i1l332 0673                      i1l308 0593  
                    i1l326 0644                      i1l290 0C45                      i1l354 0E2B  
                    i1l291 0C47                      i1l288 0C3F            ___awdiv@counter 002C  
                    _RCREG 001A                      _TMR1H 000F                      _TMR1L 000E  
                    _SPBRG 0099                      _PORTD 0008                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087                      _TRISD 0088  
                    _TRISE 0089                      _TXREG 0019              __CFG_PWRTE$ON 0000  
       __size_of_UART_Init 003A         __size_of_UART_Read 0009            __end_of_display 0811  
                    _count 0070                      _unita 005F                      main@i 0165  
                    main@l 0169                      _truck 00AF                      pclath 000A  
                    status 0003                      wtemp0 007E            __initialization 0011  
             __end_of_main 0586         __size_of_GetDigits 006B                     ??_main 003D  
        SetDefaultTimers@i 002E          SetDefaultTimers@l 002C         __size_of_BuildByte 00C8  
               _SetDisplay 0C79                     _ADCON0 001F                     _ADCON1 009F  
                   _ADRESH 001E                     _ADRESL 009E           ___awdiv@dividend 0029  
                   i1l2110 0586                     i1l2104 0C3F                     i1l2120 05AD  
                   i1l2112 058C                     i1l2106 0C46                     i1l2130 05C7  
                   i1l2122 05B1                     i1l2114 0597                     i1l2140 05EC  
                   i1l2132 05D2                     i1l2124 05BA                     i1l2116 05A0  
                   i1l2150 060D                     i1l2142 05F5                     i1l2134 05DB  
                   i1l2126 05C0                     i1l2118 05A4                     u200_20 065E  
                   i1l2160 0630                     i1l2152 0616                     i1l2144 05FB  
                   i1l2136 05DF                     i1l2128 05C2                     u200_21 065D  
                   i1l2170 0651                     i1l2162 0636                     i1l2154 061A  
                   i1l2138 05E8                     i1l2146 05FD                     i1l2180 0671  
                   i1l2172 0655                     i1l2156 0623                     i1l2164 0638  
                   i1l2148 0602                     i1l2174 065E                     i1l2166 063D  
                   i1l2158 0627                     i1l2430 0DE7                     u201_20 066B  
                   i1l2176 0662                     i1l2168 0648                     i1l2440 0E03  
                   i1l2432 0DE9                     i1l2424 0DDA                     u201_21 066A  
                   i1l2178 066B                     i1l2450 0E12                     i1l2434 0DED  
                   i1l2442 0E04                     i1l2426 0DE0                     i1l2460 0E22  
                   i1l2452 0E16                     i1l2444 0E08                     i1l2436 0DF1  
                   i1l2428 0DE4                     i1l2462 0E23                     i1l2454 0E17  
                   i1l2446 0E09                     i1l2438 0DFF                     i1l2464 0E27  
                   i1l2456 0E1B                     i1l2448 0E0E                     i1l2466 0E29  
                   i1l2458 0E21                     u240_20 0DED                     u240_21 0DEC  
                   u241_20 0DF1                     _INTCON 000B                     u241_21 0DF0  
                   u242_20 0E08                     u242_21 0E07                     u243_20 0E16  
                   u243_21 0E15                     u244_20 0E21                     u244_21 0E20  
                   u181_20 0C45                     u181_21 0C44                     u190_20 05E8  
                   u182_20 058C                     u238_20 0DE0                     u190_21 05E7  
                   u182_21 058B                     u238_21 0DDF                     u191_20 05F5  
                   u183_20 0597                     u239_20 0DE4                     u191_21 05F4  
                   u183_21 0596                     u239_21 0DE3                     u192_20 0602  
                   u184_20 05A0                     u192_21 0601                     u184_21 059F  
                   u193_20 060D                     u185_20 05AD                     u193_21 060C  
                   u185_21 05AC                     u194_20 0616                     u186_20 05BA  
                   u194_21 0615                     u186_21 05B9                     u195_20 0623  
                   u187_20 05C7                     u195_21 0622                     u187_21 05C6  
                   u196_20 0630                     u188_20 05D2                     u196_21 062F  
                   u188_21 05D1                     u197_20 063D                     u189_20 05DB  
                   u197_21 063C                     u189_21 05DA                     u198_20 0648  
                   u198_21 0647                     u199_20 0651                     u199_21 0650  
                   _TMR0IF 005A                     _TMR1IF 0060                  ??_GetTime 0022  
             ?_UART_TxChar 0075          __end_of_UART_Init 0D61          __end_of_UART_Read 0C48  
                   ___bmul 0C8E                  ??___aldiv 0028            GetTime@shortInt 0024  
                   ___wmul 0CCB                  ??___awdiv 002B                     _decine 005E  
                ??___awmod 0024           __end_of_init_ADC 0C66                     _cycled 0060  
         ___awdiv@quotient 002E            ___awmod@divisor 0020            ___awmod@counter 0025  
         __end_of_sendByte 0D9B              main@pressione 0160                  ?_ADC_Read 0020  
                   saved_w 007E    __end_of__initialization 0046          __end_of_GetDigits 0F63  
__size_of_SetDefaultTimers 00A1        ___bmul@multiplicand 0020             __pcstackCOMMON 0075  
        __end_of_BuildByte 073C               __pidataBANK1 07DD           _conteggioVeicoli 0586  
               ??_ADC_Read 0022     SetDefaultTimers@giallo 0024                ?_SetDisplay 0020  
            GetDigits@Time 0030       _dataFromGatewayIndex 0059       _timerReadFromGateway 0058  
               __pbssBANK0 004D                 __pbssBANK1 00A0                 __pbssBANK2 0110  
               __pbssBANK3 0190                 __pmaintext 004A                    ?___bmul 0020  
                  ?___wmul 0020              sendByte@byte0 0039              sendByte@byte1 0034  
               __pintentry 0004                 _colorIndex 0057                 __stringtab 0800  
                ?_init_ADC 0075                    _GetTime 0D9B            BuildByte@valore 0021  
          BuildByte@txByte 0025                  ?_sendByte 0034                 _n_semafori 0055  
     __size_of_UART_TxChar 000B                    ___aldiv 0F63            __size_of___bmul 0017  
                  ___awdiv 0E8F                    ___awmod 0E34        __size_of_SetDisplay 0015  
          __size_of___wmul 0027                    __ptext1 0D61                    __ptext2 0C48  
                  __ptext3 0674                    __ptext4 0CF2                    __ptext5 0CCB  
                  __ptext6 0C53                    __ptext7 0C8E                    __ptext8 0D27  
                  __ptext9 0F63             main@semaforoId 015C                    _comando 0073  
                  _display 0806               __size_of_ISR 005A               __size_of_map 0035  
         ___awmod@dividend 0022           ___aldiv@dividend 0024       BuildByte@sommaColumn 002B  
                  clrloop0 0C38       end_of_initialization 0046                 ??_init_ADC 0020  
           main@lux_select 0164                 ??_sendByte 0036           _SetDefaultTimers 073C  
                _RCSTAbits 0018           ___aldiv@quotient 002B                 _motorcycle 0051  
                _UART_Init 0D27                  _UART_Read 0C3F                  _PORTAbits 0005  
                _PORTBbits 0006               SetDisplay@d1 0023               SetDisplay@d2 0020  
             SetDisplay@d3 0021                  _TRISCbits 0087          __size_of_ADC_Read 0026  
 __end_of_conteggioVeicoli 0674                 map@out_max 0038                 map@out_min 0036  
                _TXSTAbits 0098                  _GetDigits 0EF8             __end_of___bmul 0CA5  
           __end_of___wmul 0CF2                 ?_UART_Init 002F                 ?_UART_Read 0075  
                _BuildByte 0674          BuildByte@sommaRow 002A        start_initialization 0011  
              __end_of_ISR 0E34               ??_SetDisplay 0023                __end_of_map 0D27  
               ?_GetDigits 0030                   ??___bmul 0021             ADC_Read@canale 0023  
                 ??___wmul 0024                 init_fetch0 0C66                __pdataBANK1 00CF  
       __end_of_SetDisplay 0C8E                 ?_BuildByte 0020                __pbssCOMMON 0070  
                ___latbits 0002              __pcstackBANK0 0020              __pcstackBANK2 0158  
                 ?_GetTime 0020      SetDefaultTimers@verde 0022      SetDefaultTimers@rosso 0020  
        __size_of_init_ADC 0013                  _centinaia 005D          __size_of_sendByte 003A  
                 ?___aldiv 0020                   ?___awdiv 0027                   ?___awmod 0020  
              ??_UART_Init 0031                ??_UART_Read 0075             BuildByte@i_342 0032  
                __pstrings 0800             BuildByte@y_343 002E             sendByte@valore 0035  
           sendByte@txByte 003A             BuildByte@byte0 0024             BuildByte@byte1 0020  
 __end_of_SetDefaultTimers 07DD                   _ADC_Read 0CA5                  _count_lux 0074  
                _countdown 005A              UART_TxChar@ch 0020            ___aldiv@divisor 0020  
        interrupt_function 0004            ___aldiv@counter 0029             ___wmul@product 0024  
                clear_ram0 0C37                   _PIE1bits 008C              ??_UART_TxChar 0020  
              ??_GetDigits 0032                   _GO_nDONE 00FA          UART_Init@baudrate 002F  
              ??_BuildByte 0022                  map@in_max 0034                  map@in_min 0032  
              __stringbase 0805                  main@i_445 016B                  main@i_446 016D  
                main@i_447 0167          ___wmul@multiplier 0020                  main@index 0158  
             GetTime@index 0020          ?_conteggioVeicoli 0075               _secondPassed 0061  
       ??_conteggioVeicoli 0075           __size_of_GetTime 003F                   _Semafori 00CF  
              _readGateway 0062           __size_of___aldiv 009D        __end_of_UART_TxChar 0C53  
         __size_of___awdiv 0069           __size_of___awmod 005B         __end_of__stringtab 0806  
                sendByte@i 003B                   __ptext10 0C79                   __ptext11 073C  
                 __ptext12 0D9B                   __ptext13 0EF8                   __ptext14 0E34  
                 __ptext15 0E8F                   __ptext16 0CA5                   __ptext17 0DDA  
                 __ptext18 0586                   __ptext19 0C3F                   _init_ADC 0C53  
            __size_of_main 053C            _dataFromGateway 00A0                   _old_disp 005C  
                 _sendByte 0D61                   main@temp 015E                   main@time 0162  
              GetTime@time 0025                 _INTCONbits 000B                   init_ram0 0C6A  
                 intlevel1 0000            _readGatewayDone 0063                  stringcode 0800  
              _UART_TxChar 0C48                 _OPTION_REG 0081            SetDisplay@value 0022  
                 stringdir 0800                   stringtab 0800          ?_SetDefaultTimers 0020  
             ___aldiv@sign 002A         ??_SetDefaultTimers 0026                 BuildByte@i 0030  
               BuildByte@y 002C  
