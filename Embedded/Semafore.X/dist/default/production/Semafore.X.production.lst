

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Jun 22 15:10:25 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  0AAB                     __pidataBANK0:	
   202                           
   203                           ;initializer for _truck
   204  0AAB  34D5               	retlw	213
   205  0AAC  34D5               	retlw	213
   206  0AAD  34D5               	retlw	213
   207  0AAE  34D5               	retlw	213
   208                           
   209                           ;initializer for _car
   210  0AAF  34D5               	retlw	213
   211  0AB0  34D5               	retlw	213
   212  0AB1  34D5               	retlw	213
   213  0AB2  34D5               	retlw	213
   214                           
   215                           ;initializer for _motorcycle
   216  0AB3  34D5               	retlw	213
   217  0AB4  34D5               	retlw	213
   218  0AB5  34D5               	retlw	213
   219  0AB6  34D5               	retlw	213
   220                           
   221                           ;initializer for _n_semafori
   222  0AB7  340F               	retlw	15
   223                           
   224                           	psect	idataBANK1
   225  0B0A                     __pidataBANK1:	
   226                           
   227                           ;initializer for _Semafori
   228  0B0A  34BB               	retlw	low (_s0| 0)
   229  0B0B  3400               	retlw	high (_s0| 0)
   230  0B0C  34AF               	retlw	low (_s1| 0)
   231  0B0D  3400               	retlw	high (_s1| 0)
   232  0B0E  34E4               	retlw	low (_s2| (0+256))
   233  0B0F  3401               	retlw	high (_s2| (0+256))
   234  0B10  34D8               	retlw	low (_s3| (0+256))
   235  0B11  3401               	retlw	high (_s3| (0+256))
   236  0B12  34CC               	retlw	low (_s4| (0+256))
   237  0B13  3401               	retlw	high (_s4| (0+256))
   238  0B14  34C0               	retlw	low (_s5| (0+256))
   239  0B15  3401               	retlw	high (_s5| (0+256))
   240  0B16  34B4               	retlw	low (_s6| (0+256))
   241  0B17  3401               	retlw	high (_s6| (0+256))
   242  0B18  34A8               	retlw	low (_s7| (0+256))
   243  0B19  3401               	retlw	high (_s7| (0+256))
   244  0B1A  349C               	retlw	low (_s8| (0+256))
   245  0B1B  3401               	retlw	high (_s8| (0+256))
   246  0B1C  3490               	retlw	low (_s9| (0+256))
   247  0B1D  3401               	retlw	high (_s9| (0+256))
   248  0B1E  344C               	retlw	low (_s10| (0+256))
   249  0B1F  3401               	retlw	high (_s10| (0+256))
   250  0B20  3440               	retlw	low (_s11| (0+256))
   251  0B21  3401               	retlw	high (_s11| (0+256))
   252  0B22  3434               	retlw	low (_s12| (0+256))
   253  0B23  3401               	retlw	high (_s12| (0+256))
   254  0B24  3428               	retlw	low (_s13| (0+256))
   255  0B25  3401               	retlw	high (_s13| (0+256))
   256  0B26  341C               	retlw	low (_s14| (0+256))
   257  0B27  3401               	retlw	high (_s14| (0+256))
   258  0B28  3410               	retlw	low (_s15| (0+256))
   259  0B29  3401               	retlw	high (_s15| (0+256))
   260                           
   261                           	psect	strings
   262  0800                     __pstrings:	
   263  0800                     stringtab:	
   264  0800                     __stringtab:	
   265  0800                     stringcode:	
   266                           ;	String table - string pointers are 1 byte each
   267                           
   268  0800                     stringdir:	
   269  0800  3008               	movlw	high stringdir
   270  0801  008A               	movwf	10
   271  0802  0804               	movf	4,w
   272  0803  0A84               	incf	4,f
   273  0804  0782               	addwf	2,f
   274  0805                     __stringbase:	
   275  0805  3400               	retlw	0
   276  0806                     __end_of__stringtab:	
   277  0806                     _display:	
   278  0806  343F               	retlw	63
   279  0807  3406               	retlw	6
   280  0808  345B               	retlw	91
   281  0809  344F               	retlw	79
   282  080A  3466               	retlw	102
   283  080B  346D               	retlw	109
   284  080C  347D               	retlw	125
   285  080D  3407               	retlw	7
   286  080E  347F               	retlw	127
   287  080F  346F               	retlw	111
   288  0810  3400               	retlw	0
   289  0811                     __end_of_display:	
   290  0006                     _PORTBbits	set	6
   291  0008                     _PORTD	set	8
   292  0005                     _PORTAbits	set	5
   293  001A                     _RCREG	set	26
   294  0019                     _TXREG	set	25
   295  000B                     _INTCONbits	set	11
   296  0018                     _RCSTAbits	set	24
   297  001E                     _ADRESH	set	30
   298  001F                     _ADCON0	set	31
   299  000E                     _TMR1L	set	14
   300  000F                     _TMR1H	set	15
   301  0010                     _T1CON	set	16
   302  0001                     _TMR0	set	1
   303  000B                     _INTCON	set	11
   304  0060                     _TMR1IF	set	96
   305  005A                     _TMR0IF	set	90
   306  0065                     _RCIF	set	101
   307  0064                     _TXIF	set	100
   308  00FA                     _GO_nDONE	set	250
   309  008C                     _PIE1bits	set	140
   310  0099                     _SPBRG	set	153
   311  0098                     _TXSTAbits	set	152
   312  0087                     _TRISCbits	set	135
   313  009E                     _ADRESL	set	158
   314  009F                     _ADCON1	set	159
   315  0085                     _TRISA	set	133
   316  0081                     _OPTION_REG	set	129
   317  0089                     _TRISE	set	137
   318  0088                     _TRISD	set	136
   319  0087                     _TRISC	set	135
   320  0086                     _TRISB	set	134
   321                           
   322                           ; #config settings
   323  0000                     
   324                           	psect	cinit
   325  0011                     start_initialization:	
   326  0011                     __initialization:	
   327                           
   328                           ; Initialize objects allocated to BANK1
   329  0011  1383               	bcf	3,7	;select IRP bank0
   330  0012  30E7               	movlw	low (__pdataBANK1+32)
   331  0013  00FD               	movwf	btemp+-1
   332  0014  300B               	movlw	high __pidataBANK1
   333  0015  00FE               	movwf	btemp
   334  0016  300A               	movlw	low __pidataBANK1
   335  0017  00FF               	movwf	btemp+1
   336  0018  30C7               	movlw	low __pdataBANK1
   337  0019  0084               	movwf	4
   338  001A  120A  158A  22CF  120A  118A  	fcall	init_ram0
   339                           
   340                           ; Initialize objects allocated to BANK0
   341  001F  3059               	movlw	low (__pdataBANK0+13)
   342  0020  00FD               	movwf	btemp+-1
   343  0021  300A               	movlw	high __pidataBANK0
   344  0022  00FE               	movwf	btemp
   345  0023  30AB               	movlw	low __pidataBANK0
   346  0024  00FF               	movwf	btemp+1
   347  0025  304C               	movlw	low __pdataBANK0
   348  0026  0084               	movwf	4
   349  0027  120A  158A  22CF  120A  118A  	fcall	init_ram0
   350                           
   351                           ; Clear objects allocated to BANK3
   352  002C  1783               	bsf	3,7	;select IRP bank2
   353  002D  3090               	movlw	low __pbssBANK3
   354  002E  0084               	movwf	4
   355  002F  30F0               	movlw	low (__pbssBANK3+96)
   356  0030  120A  158A  229A  120A  118A  	fcall	clear_ram0
   357                           
   358                           ; Clear objects allocated to BANK2
   359  0035  3010               	movlw	low __pbssBANK2
   360  0036  0084               	movwf	4
   361  0037  3058               	movlw	low (__pbssBANK2+72)
   362  0038  120A  158A  229A  120A  118A  	fcall	clear_ram0
   363                           
   364                           ; Clear objects allocated to BANK1
   365  003D  1383               	bcf	3,7	;select IRP bank0
   366  003E  30A0               	movlw	low __pbssBANK1
   367  003F  0084               	movwf	4
   368  0040  30C7               	movlw	low (__pbssBANK1+39)
   369  0041  120A  158A  229A  120A  118A  	fcall	clear_ram0
   370                           
   371                           ; Clear objects allocated to BANK0
   372  0046  3059               	movlw	low __pbssBANK0
   373  0047  0084               	movwf	4
   374  0048  3065               	movlw	low (__pbssBANK0+12)
   375  0049  120A  158A  229A  120A  118A  	fcall	clear_ram0
   376                           
   377                           ; Clear objects allocated to COMMON
   378  004E  01F0               	clrf	__pbssCOMMON& (0+127)
   379  004F  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   380  0050  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   381  0051  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   382  0052  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   383  0053                     end_of_initialization:	
   384                           ;End of C runtime variable initialization code
   385                           
   386  0053                     __end_of__initialization:	
   387  0053  0183               	clrf	3
   388  0054  120A  118A  2857   	ljmp	_main	;jump to C main() function
   389                           
   390                           	psect	bssCOMMON
   391  0070                     __pbssCOMMON:	
   392  0070                     _count:	
   393  0070                     	ds	2
   394  0072                     _time:	
   395  0072                     	ds	1
   396  0073                     _comando:	
   397  0073                     	ds	1
   398  0074                     _count_lux:	
   399  0074                     	ds	1
   400                           
   401                           	psect	bssBANK0
   402  0059                     __pbssBANK0:	
   403  0059                     _timerReadFromGateway:	
   404  0059                     	ds	1
   405  005A                     _dataFromGatewayIndex:	
   406  005A                     	ds	1
   407  005B                     _countdown:	
   408  005B                     	ds	1
   409  005C                     _disp:	
   410  005C                     	ds	1
   411  005D                     _old_disp:	
   412  005D                     	ds	1
   413  005E                     _centinaia:	
   414  005E                     	ds	1
   415  005F                     _decine:	
   416  005F                     	ds	1
   417  0060                     _unita:	
   418  0060                     	ds	1
   419  0061                     _cycled:	
   420  0061                     	ds	1
   421  0062                     _secondPassed:	
   422  0062                     	ds	1
   423  0063                     _readGateway:	
   424  0063                     	ds	1
   425  0064                     _readGatewayDone:	
   426  0064                     	ds	1
   427                           
   428                           	psect	dataBANK0
   429  004C                     __pdataBANK0:	
   430  004C                     _truck:	
   431  004C                     	ds	4
   432  0050                     _car:	
   433  0050                     	ds	4
   434  0054                     _motorcycle:	
   435  0054                     	ds	4
   436  0058                     _n_semafori:	
   437  0058                     	ds	1
   438                           
   439                           	psect	bssBANK1
   440  00A0                     __pbssBANK1:	
   441  00A0                     _dataFromGateway:	
   442  00A0                     	ds	15
   443  00AF                     _s1:	
   444  00AF                     	ds	12
   445  00BB                     _s0:	
   446  00BB                     	ds	12
   447                           
   448                           	psect	dataBANK1
   449  00C7                     __pdataBANK1:	
   450  00C7                     _Semafori:	
   451  00C7                     	ds	32
   452                           
   453                           	psect	bssBANK3
   454  0190                     __pbssBANK3:	
   455  0190                     _s9:	
   456  0190                     	ds	12
   457  019C                     _s8:	
   458  019C                     	ds	12
   459  01A8                     _s7:	
   460  01A8                     	ds	12
   461  01B4                     _s6:	
   462  01B4                     	ds	12
   463  01C0                     _s5:	
   464  01C0                     	ds	12
   465  01CC                     _s4:	
   466  01CC                     	ds	12
   467  01D8                     _s3:	
   468  01D8                     	ds	12
   469  01E4                     _s2:	
   470  01E4                     	ds	12
   471                           
   472                           	psect	bssBANK2
   473  0110                     __pbssBANK2:	
   474  0110                     _s15:	
   475  0110                     	ds	12
   476  011C                     _s14:	
   477  011C                     	ds	12
   478  0128                     _s13:	
   479  0128                     	ds	12
   480  0134                     _s12:	
   481  0134                     	ds	12
   482  0140                     _s11:	
   483  0140                     	ds	12
   484  014C                     _s10:	
   485  014C                     	ds	12
   486                           
   487                           	psect	inittext
   488  0ACB                     init_fetch0:	
   489                           ;	Called with low address in FSR and high address in W
   490                           
   491  0ACB  087E               	movf	btemp,w
   492  0ACC  008A               	movwf	10
   493  0ACD  087F               	movf	btemp+1,w
   494  0ACE  0082               	movwf	2
   495  0ACF                     init_ram0:	
   496                           ;Called with:
   497                           ;	high address of idata address in btemp 
   498                           ;	low address of idata address in btemp+1 
   499                           ;	low address of data in FSR
   500                           ;	high address + 1 of data in btemp-1
   501                           
   502  0ACF  120A  158A  22CB  120A  158A  	fcall	init_fetch0
   503  0AD4  0080               	movwf	0
   504  0AD5  0A84               	incf	4,f
   505  0AD6  0804               	movf	4,w
   506  0AD7  067D               	xorwf	btemp+-1,w
   507  0AD8  1903               	btfsc	3,2
   508  0AD9  3400               	retlw	0
   509  0ADA  0AFF               	incf	btemp+1,f
   510  0ADB  1903               	btfsc	3,2
   511  0ADC  0AFE               	incf	btemp,f
   512  0ADD  2ACF               	goto	init_ram0
   513                           
   514                           	psect	clrtext
   515  0A9A                     clear_ram0:	
   516                           ;	Called with FSR containing the base address, and
   517                           ;	W with the last address+1
   518                           
   519  0A9A  0064               	clrwdt	;clear the watchdog before getting into this loop
   520  0A9B                     clrloop0:	
   521  0A9B  0180               	clrf	0	;clear RAM location pointed to by FSR
   522  0A9C  0A84               	incf	4,f	;increment pointer
   523  0A9D  0604               	xorwf	4,w	;XOR with final address
   524  0A9E  1903               	btfsc	3,2	;have we reached the end yet?
   525  0A9F  3400               	retlw	0	;all done for this memory range, return
   526  0AA0  0604               	xorwf	4,w	;XOR again to restore value
   527  0AA1  2A9B               	goto	clrloop0	;do the next byte
   528                           
   529                           	psect	cstackBANK2
   530  0158                     __pcstackBANK2:	
   531  0158                     main@semaforoId:	
   532                           
   533                           ; 1 bytes @ 0x0
   534  0158                     	ds	1
   535  0159                     main@colorId:	
   536                           
   537                           ; 1 bytes @ 0x1
   538  0159                     	ds	1
   539  015A                     main@temp:	
   540                           
   541                           ; 1 bytes @ 0x2
   542  015A                     	ds	1
   543  015B                     main@umidita:	
   544                           
   545                           ; 1 bytes @ 0x3
   546  015B                     	ds	1
   547  015C                     main@pressione:	
   548                           
   549                           ; 1 bytes @ 0x4
   550  015C                     	ds	1
   551  015D                     main@endCiclo:	
   552                           
   553                           ; 1 bytes @ 0x5
   554  015D                     	ds	1
   555  015E                     main@tmp:	
   556                           
   557                           ; 1 bytes @ 0x6
   558  015E                     	ds	1
   559  015F                     main@lux_select:	
   560                           
   561                           ; 1 bytes @ 0x7
   562  015F                     	ds	1
   563  0160                     main@index:	
   564                           
   565                           ; 1 bytes @ 0x8
   566  0160                     	ds	1
   567  0161                     main@time:	
   568                           
   569                           ; 2 bytes @ 0x9
   570  0161                     	ds	2
   571  0163                     main@i_437:	
   572                           
   573                           ; 1 bytes @ 0xB
   574  0163                     	ds	1
   575  0164                     main@i_439:	
   576                           
   577                           ; 1 bytes @ 0xC
   578  0164                     	ds	1
   579  0165                     main@i_442:	
   580                           
   581                           ; 1 bytes @ 0xD
   582  0165                     	ds	1
   583  0166                     main@i_436:	
   584                           
   585                           ; 2 bytes @ 0xE
   586  0166                     	ds	2
   587  0168                     main@l:	
   588                           
   589                           ; 1 bytes @ 0x10
   590  0168                     	ds	1
   591  0169                     main@i_449:	
   592                           
   593                           ; 1 bytes @ 0x11
   594  0169                     	ds	1
   595  016A                     main@i:	
   596                           
   597                           ; 2 bytes @ 0x12
   598  016A                     	ds	2
   599                           
   600                           	psect	cstackCOMMON
   601  0075                     __pcstackCOMMON:	
   602  0075                     ?_init_ADC:	
   603  0075                     ?_bitParita:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0075                     ?_main:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0075                     ?_UART_TxChar:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0075                     ?_UART_Read:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0075                     ??_UART_Read:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0075                     ?_conteggioVeicoli:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0075                     ??_conteggioVeicoli:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0075                     ?_ISR:	
   625                           ; 1 bytes @ 0x0
   626                           
   627                           
   628                           ; 1 bytes @ 0x0
   629  0075                     	ds	1
   630  0076                     ??_ISR:	
   631                           
   632                           ; 1 bytes @ 0x1
   633  0076                     	ds	4
   634                           
   635                           	psect	cstackBANK0
   636  0020                     __pcstackBANK0:	
   637  0020                     ??_init_ADC:	
   638  0020                     ?_SetDefaultTimers:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0020                     ?_SetDisplay:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0020                     ?_BuildByte:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0020                     ?_bitChange:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0020                     ??_UART_TxChar:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0020                     ?___bmul:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0020                     ?_ADC_Read:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0020                     ?_GetTime:	
   660                           ; 2 bytes @ 0x0
   661                           
   662  0020                     ?___wmul:	
   663                           ; 2 bytes @ 0x0
   664                           
   665  0020                     ?___awmod:	
   666                           ; 2 bytes @ 0x0
   667                           
   668  0020                     ?___aldiv:	
   669                           ; 2 bytes @ 0x0
   670                           
   671  0020                     bitChange@n:	
   672                           ; 4 bytes @ 0x0
   673                           
   674  0020                     BuildByte@byte1:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0020                     UART_TxChar@ch:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0020                     SetDisplay@d2:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0020                     ___bmul@multiplicand:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0020                     SetDefaultTimers@rosso:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0020                     ___wmul@multiplier:	
   690                           ; 2 bytes @ 0x0
   691                           
   692  0020                     ___awmod@divisor:	
   693                           ; 2 bytes @ 0x0
   694                           
   695  0020                     ___aldiv@divisor:	
   696                           ; 2 bytes @ 0x0
   697                           
   698                           
   699                           ; 4 bytes @ 0x0
   700  0020                     	ds	1
   701  0021                     ??_bitChange:	
   702  0021                     ??___bmul:	
   703                           ; 1 bytes @ 0x1
   704                           
   705  0021                     BuildByte@valore:	
   706                           ; 1 bytes @ 0x1
   707                           
   708  0021                     SetDisplay@d3:	
   709                           ; 1 bytes @ 0x1
   710                           
   711                           
   712                           ; 1 bytes @ 0x1
   713  0021                     	ds	1
   714  0022                     ??_ADC_Read:	
   715  0022                     ??_GetTime:	
   716                           ; 1 bytes @ 0x2
   717                           
   718  0022                     ??_BuildByte:	
   719                           ; 1 bytes @ 0x2
   720                           
   721  0022                     SetDisplay@value:	
   722                           ; 1 bytes @ 0x2
   723                           
   724  0022                     ___bmul@product:	
   725                           ; 1 bytes @ 0x2
   726                           
   727  0022                     SetDefaultTimers@verde:	
   728                           ; 1 bytes @ 0x2
   729                           
   730  0022                     ___wmul@multiplicand:	
   731                           ; 2 bytes @ 0x2
   732                           
   733  0022                     ___awmod@dividend:	
   734                           ; 2 bytes @ 0x2
   735                           
   736                           
   737                           ; 2 bytes @ 0x2
   738  0022                     	ds	1
   739  0023                     ??_SetDisplay:	
   740  0023                     bitChange@dato:	
   741                           ; 1 bytes @ 0x3
   742                           
   743  0023                     ADC_Read@canale:	
   744                           ; 1 bytes @ 0x3
   745                           
   746  0023                     SetDisplay@d1:	
   747                           ; 1 bytes @ 0x3
   748                           
   749  0023                     ___bmul@multiplier:	
   750                           ; 1 bytes @ 0x3
   751                           
   752                           
   753                           ; 1 bytes @ 0x3
   754  0023                     	ds	1
   755  0024                     ??_bitParita:	
   756  0024                     ??___wmul:	
   757                           ; 1 bytes @ 0x4
   758                           
   759  0024                     ??___awmod:	
   760                           ; 1 bytes @ 0x4
   761                           
   762  0024                     BuildByte@byte0:	
   763                           ; 1 bytes @ 0x4
   764                           
   765  0024                     GetTime@index:	
   766                           ; 1 bytes @ 0x4
   767                           
   768  0024                     SetDefaultTimers@giallo:	
   769                           ; 1 bytes @ 0x4
   770                           
   771  0024                     ___wmul@product:	
   772                           ; 2 bytes @ 0x4
   773                           
   774  0024                     ___aldiv@dividend:	
   775                           ; 2 bytes @ 0x4
   776                           
   777                           
   778                           ; 4 bytes @ 0x4
   779  0024                     	ds	1
   780  0025                     GetTime@shortInt:	
   781  0025                     ___awmod@counter:	
   782                           ; 1 bytes @ 0x5
   783                           
   784  0025                     BuildByte@txByte:	
   785                           ; 1 bytes @ 0x5
   786                           
   787                           
   788                           ; 5 bytes @ 0x5
   789  0025                     	ds	1
   790  0026                     ??_SetDefaultTimers:	
   791  0026                     ___awmod@sign:	
   792                           ; 1 bytes @ 0x6
   793                           
   794  0026                     GetTime@time:	
   795                           ; 1 bytes @ 0x6
   796                           
   797                           
   798                           ; 2 bytes @ 0x6
   799  0026                     	ds	1
   800  0027                     ?___awdiv:	
   801  0027                     ___awdiv@divisor:	
   802                           ; 2 bytes @ 0x7
   803                           
   804                           
   805                           ; 2 bytes @ 0x7
   806  0027                     	ds	1
   807  0028                     ??___aldiv:	
   808  0028                     bitParita@sommaRow:	
   809                           ; 1 bytes @ 0x8
   810                           
   811                           
   812                           ; 1 bytes @ 0x8
   813  0028                     	ds	1
   814  0029                     bitParita@sommaColumn:	
   815  0029                     ___aldiv@counter:	
   816                           ; 1 bytes @ 0x9
   817                           
   818  0029                     ___awdiv@dividend:	
   819                           ; 1 bytes @ 0x9
   820                           
   821                           
   822                           ; 2 bytes @ 0x9
   823  0029                     	ds	1
   824  002A                     bitParita@errorColumn:	
   825  002A                     BuildByte@sommaRow:	
   826                           ; 1 bytes @ 0xA
   827                           
   828  002A                     ___aldiv@sign:	
   829                           ; 1 bytes @ 0xA
   830                           
   831                           
   832                           ; 1 bytes @ 0xA
   833  002A                     	ds	1
   834  002B                     ??___awdiv:	
   835  002B                     bitParita@error:	
   836                           ; 1 bytes @ 0xB
   837                           
   838  002B                     BuildByte@sommaColumn:	
   839                           ; 1 bytes @ 0xB
   840                           
   841  002B                     ___aldiv@quotient:	
   842                           ; 1 bytes @ 0xB
   843                           
   844                           
   845                           ; 4 bytes @ 0xB
   846  002B                     	ds	1
   847  002C                     bitParita@errorRow:	
   848  002C                     SetDefaultTimers@l:	
   849                           ; 1 bytes @ 0xC
   850                           
   851  002C                     ___awdiv@counter:	
   852                           ; 1 bytes @ 0xC
   853                           
   854  002C                     BuildByte@y:	
   855                           ; 1 bytes @ 0xC
   856                           
   857                           
   858                           ; 2 bytes @ 0xC
   859  002C                     	ds	1
   860  002D                     SetDefaultTimers@i:	
   861  002D                     ___awdiv@sign:	
   862                           ; 1 bytes @ 0xD
   863                           
   864  002D                     bitParita@y:	
   865                           ; 1 bytes @ 0xD
   866                           
   867                           
   868                           ; 2 bytes @ 0xD
   869  002D                     	ds	1
   870  002E                     BuildByte@y_343:	
   871  002E                     ___awdiv@quotient:	
   872                           ; 2 bytes @ 0xE
   873                           
   874                           
   875                           ; 2 bytes @ 0xE
   876  002E                     	ds	1
   877  002F                     ?_UART_Init:	
   878  002F                     bitParita@y_331:	
   879                           ; 1 bytes @ 0xF
   880                           
   881  002F                     UART_Init@baudrate:	
   882                           ; 2 bytes @ 0xF
   883                           
   884                           
   885                           ; 2 bytes @ 0xF
   886  002F                     	ds	1
   887  0030                     ?_GetDigits:	
   888  0030                     ?_map:	
   889                           ; 1 bytes @ 0x10
   890                           
   891  0030                     map@x:	
   892                           ; 2 bytes @ 0x10
   893                           
   894  0030                     BuildByte@i:	
   895                           ; 2 bytes @ 0x10
   896                           
   897  0030                     GetDigits@Time:	
   898                           ; 2 bytes @ 0x10
   899                           
   900                           
   901                           ; 2 bytes @ 0x10
   902  0030                     	ds	1
   903  0031                     ??_UART_Init:	
   904  0031                     bitParita@rx:	
   905                           ; 1 bytes @ 0x11
   906                           
   907                           
   908                           ; 1 bytes @ 0x11
   909  0031                     	ds	1
   910  0032                     ??_GetDigits:	
   911  0032                     map@in_min:	
   912                           ; 1 bytes @ 0x12
   913                           
   914  0032                     bitParita@i:	
   915                           ; 2 bytes @ 0x12
   916                           
   917  0032                     BuildByte@i_342:	
   918                           ; 2 bytes @ 0x12
   919                           
   920                           
   921                           ; 2 bytes @ 0x12
   922  0032                     	ds	2
   923  0034                     ?_sendByte:	
   924  0034                     sendByte@byte1:	
   925                           ; 1 bytes @ 0x14
   926                           
   927  0034                     map@in_max:	
   928                           ; 1 bytes @ 0x14
   929                           
   930  0034                     bitParita@i_330:	
   931                           ; 2 bytes @ 0x14
   932                           
   933                           
   934                           ; 2 bytes @ 0x14
   935  0034                     	ds	1
   936  0035                     sendByte@valore:	
   937  0035                     _GetDigits$1151:	
   938                           ; 1 bytes @ 0x15
   939                           
   940                           
   941                           ; 2 bytes @ 0x15
   942  0035                     	ds	1
   943  0036                     ??_sendByte:	
   944  0036                     map@out_min:	
   945                           ; 1 bytes @ 0x16
   946                           
   947                           
   948                           ; 2 bytes @ 0x16
   949  0036                     	ds	2
   950  0038                     map@out_max:	
   951                           
   952                           ; 2 bytes @ 0x18
   953  0038                     	ds	1
   954  0039                     sendByte@byte0:	
   955                           
   956                           ; 1 bytes @ 0x19
   957  0039                     	ds	1
   958  003A                     ??_map:	
   959  003A                     sendByte@txByte:	
   960                           ; 1 bytes @ 0x1A
   961                           
   962                           
   963                           ; 1 bytes @ 0x1A
   964  003A                     	ds	1
   965  003B                     sendByte@i:	
   966                           
   967                           ; 1 bytes @ 0x1B
   968  003B                     	ds	1
   969  003C                     ??_main:	
   970                           
   971                           ; 1 bytes @ 0x1C
   972  003C                     	ds	16
   973                           
   974                           	psect	maintext
   975  0057                     __pmaintext:	
   976 ;;
   977 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   978 ;;
   979 ;; *************** function _main *****************
   980 ;; Defined at:
   981 ;;		line 129 in file "main.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;		None
   984 ;; Auto vars:     Size  Location     Type
   985 ;;  i               1   17[BANK2 ] unsigned char 
   986 ;;  index           1    8[BANK2 ] unsigned char 
   987 ;;  colorId         1    1[BANK2 ] unsigned char 
   988 ;;  semaforoId      1    0[BANK2 ] unsigned char 
   989 ;;  i               1   13[BANK2 ] unsigned char 
   990 ;;  i               1   12[BANK2 ] unsigned char 
   991 ;;  i               1   11[BANK2 ] unsigned char 
   992 ;;  i               2   14[BANK2 ] int 
   993 ;;  i               2   18[BANK2 ] int 
   994 ;;  l               1   16[BANK2 ] unsigned char 
   995 ;;  tmp             1    6[BANK2 ] unsigned char 
   996 ;;  time            2    9[BANK2 ] int 
   997 ;;  lux_select      1    7[BANK2 ] unsigned char 
   998 ;;  endCiclo        1    5[BANK2 ] struct .
   999 ;;  pressione       1    4[BANK2 ] unsigned char 
  1000 ;;  umidita         1    3[BANK2 ] unsigned char 
  1001 ;;  temp            1    2[BANK2 ] unsigned char 
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1006 ;; Tracked objects:
  1007 ;;		On entry : B00/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1011 ;;      Params:         0       0       0       0       0
  1012 ;;      Locals:         0       0       0       0      20
  1013 ;;      Temps:          0      16       0       0       0
  1014 ;;      Totals:         0      16       0       0      20
  1015 ;;Total ram usage:       36 bytes
  1016 ;; Hardware stack levels required when called:    4
  1017 ;; This function calls:
  1018 ;;		_ADC_Read
  1019 ;;		_GetDigits
  1020 ;;		_GetTime
  1021 ;;		_SetDefaultTimers
  1022 ;;		_SetDisplay
  1023 ;;		_UART_Init
  1024 ;;		___awmod
  1025 ;;		___bmul
  1026 ;;		_bitParita
  1027 ;;		_init_ADC
  1028 ;;		_map
  1029 ;;		_sendByte
  1030 ;; This function is called by:
  1031 ;;		Startup code after reset
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           
  1036                           ;psect for function _main
  1037  0057                     _main:	
  1038  0057                     l3178:	
  1039                           ;incstack = 0
  1040                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1041                           
  1042                           
  1043                           ;main.c: 131:     TRISB = 0x1F;
  1044  0057  301F               	movlw	31
  1045  0058  1683               	bsf	3,5	;RP0=1, select bank1
  1046  0059  1303               	bcf	3,6	;RP1=0, select bank1
  1047  005A  0086               	movwf	6	;volatile
  1048                           
  1049                           ;main.c: 132:     TRISC = 0x80;
  1050  005B  3080               	movlw	128
  1051  005C  0087               	movwf	7	;volatile
  1052  005D                     l3180:	
  1053                           
  1054                           ;main.c: 133:     TRISD = 0x00;
  1055  005D  0188               	clrf	8	;volatile
  1056  005E                     l3182:	
  1057                           
  1058                           ;main.c: 134:     TRISE = 0x01;
  1059  005E  3001               	movlw	1
  1060  005F  0089               	movwf	9	;volatile
  1061  0060                     l3184:	
  1062                           
  1063                           ;main.c: 135:     INTCON = 0xE0;
  1064  0060  30E0               	movlw	224
  1065  0061  008B               	movwf	11	;volatile
  1066  0062                     l3186:	
  1067                           
  1068                           ;main.c: 136:     OPTION_REG = 0x04;
  1069  0062  3004               	movlw	4
  1070  0063  0081               	movwf	1	;volatile
  1071  0064                     l3188:	
  1072                           
  1073                           ;main.c: 137:     TMR0 = 6;
  1074  0064  3006               	movlw	6
  1075  0065  1283               	bcf	3,5	;RP0=0, select bank0
  1076  0066  1303               	bcf	3,6	;RP1=0, select bank0
  1077  0067  0081               	movwf	1	;volatile
  1078  0068                     l3190:	
  1079                           
  1080                           ;main.c: 138:     T1CON = 0x31;
  1081  0068  3031               	movlw	49
  1082  0069  0090               	movwf	16	;volatile
  1083  006A                     l3192:	
  1084                           
  1085                           ;main.c: 144:     init_ADC();
  1086  006A  120A  158A  22B8  120A  118A  	fcall	_init_ADC
  1087  006F                     l3194:	
  1088                           
  1089                           ;main.c: 145:     UART_Init(9600);
  1090  006F  3080               	movlw	128
  1091  0070  1283               	bcf	3,5	;RP0=0, select bank0
  1092  0071  1303               	bcf	3,6	;RP1=0, select bank0
  1093  0072  00AF               	movwf	UART_Init@baudrate
  1094  0073  3025               	movlw	37
  1095  0074  00B0               	movwf	UART_Init@baudrate+1
  1096  0075  120A  158A  240E  120A  118A  	fcall	_UART_Init
  1097  007A                     l3196:	
  1098                           
  1099                           ;main.c: 146:     SetDefaultTimers(2, 2, 2);
  1100  007A  3002               	movlw	2
  1101  007B  1283               	bcf	3,5	;RP0=0, select bank0
  1102  007C  1303               	bcf	3,6	;RP1=0, select bank0
  1103  007D  00A0               	movwf	SetDefaultTimers@rosso
  1104  007E  3000               	movlw	0
  1105  007F  00A1               	movwf	SetDefaultTimers@rosso+1
  1106  0080  3002               	movlw	2
  1107  0081  00A2               	movwf	SetDefaultTimers@verde
  1108  0082  3000               	movlw	0
  1109  0083  00A3               	movwf	SetDefaultTimers@verde+1
  1110  0084  3002               	movlw	2
  1111  0085  00A4               	movwf	SetDefaultTimers@giallo
  1112  0086  3000               	movlw	0
  1113  0087  00A5               	movwf	SetDefaultTimers@giallo+1
  1114  0088  120A  158A  2611  120A  118A  	fcall	_SetDefaultTimers
  1115  008D                     l3198:	
  1116                           
  1117                           ;main.c: 148:     TMR1H = 60;
  1118  008D  303C               	movlw	60
  1119  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1120  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1121  0090  008F               	movwf	15	;volatile
  1122  0091                     l3200:	
  1123                           
  1124                           ;main.c: 149:     TMR1L = 176;
  1125  0091  30B0               	movlw	176
  1126  0092  008E               	movwf	14	;volatile
  1127  0093                     l3202:	
  1128                           
  1129                           ;main.c: 151:     int time;;main.c: 152:     unsigned char lux_select = 0;
  1130  0093  1283               	bcf	3,5	;RP0=0, select bank2
  1131  0094  1703               	bsf	3,6	;RP1=1, select bank2
  1132  0095  01DF               	clrf	main@lux_select^(0+256)
  1133  0096                     l3204:	
  1134                           
  1135                           ;main.c: 153:     disp = 0;
  1136  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1137  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1138  0098  01DC               	clrf	_disp
  1139  0099                     l3206:	
  1140  0099                     l3208:	
  1141  0099                     l3210:	
  1142  0099                     l3212:	
  1143                           
  1144                           ;main.c: 157:     Bit endCiclo;;main.c: 158:     endCiclo.Bit = 1;
  1145  0099  1283               	bcf	3,5	;RP0=0, select bank2
  1146  009A  1703               	bsf	3,6	;RP1=1, select bank2
  1147  009B  145D               	bsf	main@endCiclo^(0+256),0
  1148  009C                     l3214:	
  1149                           
  1150                           ;main.c: 161:     {;main.c: 163:         if (readGateway.Bit)
  1151  009C  1303               	bcf	3,6	;RP1=0, select bank0
  1152  009D  1C63               	btfss	_readGateway,0
  1153  009E  28A0               	goto	u3211
  1154  009F  28A1               	goto	u3210
  1155  00A0                     u3211:	
  1156  00A0  2B38               	goto	l212
  1157  00A1                     u3210:	
  1158  00A1  2B23               	goto	l3294
  1159  00A2                     l214:	
  1160                           ;main.c: 166:             {;main.c: 167:             case 0x08:
  1161                           
  1162                           
  1163                           ;main.c: 168:                 readGatewayDone.Bit = 1;
  1164  00A2  1464               	bsf	_readGatewayDone,0
  1165                           
  1166                           ;main.c: 169:                 readGateway.Bit = 0;
  1167  00A3  1063               	bcf	_readGateway,0
  1168  00A4                     l3218:	
  1169                           
  1170                           ;main.c: 171:                 for (int i = 0; i < 4; i++)
  1171  00A4  1283               	bcf	3,5	;RP0=0, select bank2
  1172  00A5  1703               	bsf	3,6	;RP1=1, select bank2
  1173  00A6  01EA               	clrf	main@i^(0+256)
  1174  00A7  01EB               	clrf	(main@i+1)^(0+256)
  1175  00A8  29C5               	goto	l3234
  1176  00A9                     l3224:	
  1177                           
  1178                           ;main.c: 176:                         sendByte(0x03, 0x01, motorcycle[i]);
  1179  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  1180  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  1181  00AB  01B4               	clrf	sendByte@byte1
  1182  00AC  0AB4               	incf	sendByte@byte1,f
  1183  00AD  1283               	bcf	3,5	;RP0=0, select bank2
  1184  00AE  1703               	bsf	3,6	;RP1=1, select bank2
  1185  00AF  086A               	movf	main@i^(0+256),w
  1186  00B0  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1187  00B1  0084               	movwf	4
  1188  00B2  1383               	bcf	3,7	;select IRP bank0
  1189  00B3  0800               	movf	0,w
  1190  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1191  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  1192  00B6  00BC               	movwf	??_main
  1193  00B7  083C               	movf	??_main,w
  1194  00B8  00B5               	movwf	sendByte@valore
  1195  00B9  3003               	movlw	3
  1196  00BA  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1197                           
  1198                           ;main.c: 177:                         sendByte(0x03, 0x02, car[i]);
  1199  00BF  3002               	movlw	2
  1200  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1201  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1202  00C2  00BC               	movwf	??_main
  1203  00C3  083C               	movf	??_main,w
  1204  00C4  00B4               	movwf	sendByte@byte1
  1205  00C5  1283               	bcf	3,5	;RP0=0, select bank2
  1206  00C6  1703               	bsf	3,6	;RP1=1, select bank2
  1207  00C7  086A               	movf	main@i^(0+256),w
  1208  00C8  3E50               	addlw	(low (_car| 0))& (0+255)
  1209  00C9  0084               	movwf	4
  1210  00CA  1383               	bcf	3,7	;select IRP bank0
  1211  00CB  0800               	movf	0,w
  1212  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1213  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1214  00CE  00BD               	movwf	??_main+1
  1215  00CF  083D               	movf	??_main+1,w
  1216  00D0  00B5               	movwf	sendByte@valore
  1217  00D1  3003               	movlw	3
  1218  00D2  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1219                           
  1220                           ;main.c: 178:                         sendByte(0x03, 0x03, truck[i]);
  1221  00D7  3003               	movlw	3
  1222  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1223  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1224  00DA  00BC               	movwf	??_main
  1225  00DB  083C               	movf	??_main,w
  1226  00DC  00B4               	movwf	sendByte@byte1
  1227  00DD  1283               	bcf	3,5	;RP0=0, select bank2
  1228  00DE  1703               	bsf	3,6	;RP1=1, select bank2
  1229  00DF  086A               	movf	main@i^(0+256),w
  1230  00E0  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1231  00E1  0084               	movwf	4
  1232  00E2  1383               	bcf	3,7	;select IRP bank0
  1233  00E3  0800               	movf	0,w
  1234  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  1235  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  1236  00E6  00BD               	movwf	??_main+1
  1237  00E7  083D               	movf	??_main+1,w
  1238  00E8  00B5               	movwf	sendByte@valore
  1239  00E9  3003               	movlw	3
  1240  00EA  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1241                           
  1242                           ;main.c: 179:                         break;
  1243  00EF  29DA               	goto	l3236
  1244  00F0                     l3226:	
  1245                           
  1246                           ;main.c: 181:                         sendByte(0x05, 0x01, motorcycle[i]);
  1247  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  1248  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  1249  00F2  01B4               	clrf	sendByte@byte1
  1250  00F3  0AB4               	incf	sendByte@byte1,f
  1251  00F4  1283               	bcf	3,5	;RP0=0, select bank2
  1252  00F5  1703               	bsf	3,6	;RP1=1, select bank2
  1253  00F6  086A               	movf	main@i^(0+256),w
  1254  00F7  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1255  00F8  0084               	movwf	4
  1256  00F9  1383               	bcf	3,7	;select IRP bank0
  1257  00FA  0800               	movf	0,w
  1258  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1259  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  1260  00FD  00BC               	movwf	??_main
  1261  00FE  083C               	movf	??_main,w
  1262  00FF  00B5               	movwf	sendByte@valore
  1263  0100  3005               	movlw	5
  1264  0101  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1265                           
  1266                           ;main.c: 182:                         sendByte(0x05, 0x02, car[i]);
  1267  0106  3002               	movlw	2
  1268  0107  1283               	bcf	3,5	;RP0=0, select bank0
  1269  0108  1303               	bcf	3,6	;RP1=0, select bank0
  1270  0109  00BC               	movwf	??_main
  1271  010A  083C               	movf	??_main,w
  1272  010B  00B4               	movwf	sendByte@byte1
  1273  010C  1283               	bcf	3,5	;RP0=0, select bank2
  1274  010D  1703               	bsf	3,6	;RP1=1, select bank2
  1275  010E  086A               	movf	main@i^(0+256),w
  1276  010F  3E50               	addlw	(low (_car| 0))& (0+255)
  1277  0110  0084               	movwf	4
  1278  0111  1383               	bcf	3,7	;select IRP bank0
  1279  0112  0800               	movf	0,w
  1280  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1281  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1282  0115  00BD               	movwf	??_main+1
  1283  0116  083D               	movf	??_main+1,w
  1284  0117  00B5               	movwf	sendByte@valore
  1285  0118  3005               	movlw	5
  1286  0119  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1287                           
  1288                           ;main.c: 183:                         sendByte(0x05, 0x03, truck[i]);
  1289  011E  3003               	movlw	3
  1290  011F  1283               	bcf	3,5	;RP0=0, select bank0
  1291  0120  1303               	bcf	3,6	;RP1=0, select bank0
  1292  0121  00BC               	movwf	??_main
  1293  0122  083C               	movf	??_main,w
  1294  0123  00B4               	movwf	sendByte@byte1
  1295  0124  1283               	bcf	3,5	;RP0=0, select bank2
  1296  0125  1703               	bsf	3,6	;RP1=1, select bank2
  1297  0126  086A               	movf	main@i^(0+256),w
  1298  0127  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1299  0128  0084               	movwf	4
  1300  0129  1383               	bcf	3,7	;select IRP bank0
  1301  012A  0800               	movf	0,w
  1302  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1303  012C  1303               	bcf	3,6	;RP1=0, select bank0
  1304  012D  00BD               	movwf	??_main+1
  1305  012E  083D               	movf	??_main+1,w
  1306  012F  00B5               	movwf	sendByte@valore
  1307  0130  3005               	movlw	5
  1308  0131  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1309                           
  1310                           ;main.c: 184:                         break;
  1311  0136  29DA               	goto	l3236
  1312  0137                     l3228:	
  1313                           
  1314                           ;main.c: 186:                         sendByte(0x07, 0x01, motorcycle[i]);
  1315  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1316  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1317  0139  01B4               	clrf	sendByte@byte1
  1318  013A  0AB4               	incf	sendByte@byte1,f
  1319  013B  1283               	bcf	3,5	;RP0=0, select bank2
  1320  013C  1703               	bsf	3,6	;RP1=1, select bank2
  1321  013D  086A               	movf	main@i^(0+256),w
  1322  013E  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1323  013F  0084               	movwf	4
  1324  0140  1383               	bcf	3,7	;select IRP bank0
  1325  0141  0800               	movf	0,w
  1326  0142  1283               	bcf	3,5	;RP0=0, select bank0
  1327  0143  1303               	bcf	3,6	;RP1=0, select bank0
  1328  0144  00BC               	movwf	??_main
  1329  0145  083C               	movf	??_main,w
  1330  0146  00B5               	movwf	sendByte@valore
  1331  0147  3007               	movlw	7
  1332  0148  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1333                           
  1334                           ;main.c: 187:                         sendByte(0x07, 0x02, car[i]);
  1335  014D  3002               	movlw	2
  1336  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1337  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1338  0150  00BC               	movwf	??_main
  1339  0151  083C               	movf	??_main,w
  1340  0152  00B4               	movwf	sendByte@byte1
  1341  0153  1283               	bcf	3,5	;RP0=0, select bank2
  1342  0154  1703               	bsf	3,6	;RP1=1, select bank2
  1343  0155  086A               	movf	main@i^(0+256),w
  1344  0156  3E50               	addlw	(low (_car| 0))& (0+255)
  1345  0157  0084               	movwf	4
  1346  0158  1383               	bcf	3,7	;select IRP bank0
  1347  0159  0800               	movf	0,w
  1348  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1349  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1350  015C  00BD               	movwf	??_main+1
  1351  015D  083D               	movf	??_main+1,w
  1352  015E  00B5               	movwf	sendByte@valore
  1353  015F  3007               	movlw	7
  1354  0160  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1355                           
  1356                           ;main.c: 188:                         sendByte(0x07, 0x03, truck[i]);
  1357  0165  3003               	movlw	3
  1358  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1359  0167  1303               	bcf	3,6	;RP1=0, select bank0
  1360  0168  00BC               	movwf	??_main
  1361  0169  083C               	movf	??_main,w
  1362  016A  00B4               	movwf	sendByte@byte1
  1363  016B  1283               	bcf	3,5	;RP0=0, select bank2
  1364  016C  1703               	bsf	3,6	;RP1=1, select bank2
  1365  016D  086A               	movf	main@i^(0+256),w
  1366  016E  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1367  016F  0084               	movwf	4
  1368  0170  1383               	bcf	3,7	;select IRP bank0
  1369  0171  0800               	movf	0,w
  1370  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1371  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1372  0174  00BD               	movwf	??_main+1
  1373  0175  083D               	movf	??_main+1,w
  1374  0176  00B5               	movwf	sendByte@valore
  1375  0177  3007               	movlw	7
  1376  0178  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1377                           
  1378                           ;main.c: 189:                         break;
  1379  017D  29DA               	goto	l3236
  1380  017E                     l3230:	
  1381                           
  1382                           ;main.c: 191:                         sendByte(0x09, 0x01, motorcycle[i]);
  1383  017E  1283               	bcf	3,5	;RP0=0, select bank0
  1384  017F  1303               	bcf	3,6	;RP1=0, select bank0
  1385  0180  01B4               	clrf	sendByte@byte1
  1386  0181  0AB4               	incf	sendByte@byte1,f
  1387  0182  1283               	bcf	3,5	;RP0=0, select bank2
  1388  0183  1703               	bsf	3,6	;RP1=1, select bank2
  1389  0184  086A               	movf	main@i^(0+256),w
  1390  0185  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1391  0186  0084               	movwf	4
  1392  0187  1383               	bcf	3,7	;select IRP bank0
  1393  0188  0800               	movf	0,w
  1394  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1395  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1396  018B  00BC               	movwf	??_main
  1397  018C  083C               	movf	??_main,w
  1398  018D  00B5               	movwf	sendByte@valore
  1399  018E  3009               	movlw	9
  1400  018F  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1401                           
  1402                           ;main.c: 192:                         sendByte(0x09, 0x02, car[i]);
  1403  0194  3002               	movlw	2
  1404  0195  1283               	bcf	3,5	;RP0=0, select bank0
  1405  0196  1303               	bcf	3,6	;RP1=0, select bank0
  1406  0197  00BC               	movwf	??_main
  1407  0198  083C               	movf	??_main,w
  1408  0199  00B4               	movwf	sendByte@byte1
  1409  019A  1283               	bcf	3,5	;RP0=0, select bank2
  1410  019B  1703               	bsf	3,6	;RP1=1, select bank2
  1411  019C  086A               	movf	main@i^(0+256),w
  1412  019D  3E50               	addlw	(low (_car| 0))& (0+255)
  1413  019E  0084               	movwf	4
  1414  019F  1383               	bcf	3,7	;select IRP bank0
  1415  01A0  0800               	movf	0,w
  1416  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1417  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1418  01A3  00BD               	movwf	??_main+1
  1419  01A4  083D               	movf	??_main+1,w
  1420  01A5  00B5               	movwf	sendByte@valore
  1421  01A6  3009               	movlw	9
  1422  01A7  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1423                           
  1424                           ;main.c: 193:                         sendByte(0x09, 0x03, truck[i]);
  1425  01AC  3003               	movlw	3
  1426  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1427  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1428  01AF  00BC               	movwf	??_main
  1429  01B0  083C               	movf	??_main,w
  1430  01B1  00B4               	movwf	sendByte@byte1
  1431  01B2  1283               	bcf	3,5	;RP0=0, select bank2
  1432  01B3  1703               	bsf	3,6	;RP1=1, select bank2
  1433  01B4  086A               	movf	main@i^(0+256),w
  1434  01B5  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1435  01B6  0084               	movwf	4
  1436  01B7  1383               	bcf	3,7	;select IRP bank0
  1437  01B8  0800               	movf	0,w
  1438  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  1439  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  1440  01BB  00BD               	movwf	??_main+1
  1441  01BC  083D               	movf	??_main+1,w
  1442  01BD  00B5               	movwf	sendByte@valore
  1443  01BE  3009               	movlw	9
  1444  01BF  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1445                           
  1446                           ;main.c: 194:                         break;
  1447  01C4  29DA               	goto	l3236
  1448  01C5                     l3234:	
  1449                           
  1450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1451                           ; Switch size 1, requested type "simple"
  1452                           ; Number of cases is 1, Range of values is 0 to 0
  1453                           ; switch strategies available:
  1454                           ; Name         Instructions Cycles
  1455                           ; simple_byte            4     3 (average)
  1456                           ; direct_byte           11     8 (fixed)
  1457                           ; jumptable            260     6 (fixed)
  1458                           ;	Chosen strategy is simple_byte
  1459  01C5  1283               	bcf	3,5	;RP0=0, select bank2
  1460  01C6  1703               	bsf	3,6	;RP1=1, select bank2
  1461  01C7  086B               	movf	(main@i+1)^(0+256),w
  1462  01C8  3A00               	xorlw	0	; case 0
  1463  01C9  1903               	skipnz
  1464  01CA  29CC               	goto	l3550
  1465  01CB  29DA               	goto	l3236
  1466  01CC                     l3550:	
  1467                           
  1468                           ; Switch size 1, requested type "simple"
  1469                           ; Number of cases is 4, Range of values is 0 to 3
  1470                           ; switch strategies available:
  1471                           ; Name         Instructions Cycles
  1472                           ; simple_byte           13     7 (average)
  1473                           ; direct_byte           20     8 (fixed)
  1474                           ; jumptable            260     6 (fixed)
  1475                           ;	Chosen strategy is simple_byte
  1476  01CC  086A               	movf	main@i^(0+256),w
  1477  01CD  3A00               	xorlw	0	; case 0
  1478  01CE  1903               	skipnz
  1479  01CF  28A9               	goto	l3224
  1480  01D0  3A01               	xorlw	1	; case 1
  1481  01D1  1903               	skipnz
  1482  01D2  28F0               	goto	l3226
  1483  01D3  3A03               	xorlw	3	; case 2
  1484  01D4  1903               	skipnz
  1485  01D5  2937               	goto	l3228
  1486  01D6  3A01               	xorlw	1	; case 3
  1487  01D7  1903               	skipnz
  1488  01D8  297E               	goto	l3230
  1489  01D9  29DA               	goto	l3236
  1490  01DA                     l3236:	
  1491                           
  1492                           ;main.c: 196:                 }
  1493  01DA  3001               	movlw	1
  1494  01DB  1283               	bcf	3,5	;RP0=0, select bank2
  1495  01DC  1703               	bsf	3,6	;RP1=1, select bank2
  1496  01DD  07EA               	addwf	main@i^(0+256),f
  1497  01DE  1803               	skipnc
  1498  01DF  0AEB               	incf	(main@i+1)^(0+256),f
  1499  01E0  3000               	movlw	0
  1500  01E1  07EB               	addwf	(main@i+1)^(0+256),f
  1501  01E2                     l3238:	
  1502  01E2  086B               	movf	(main@i+1)^(0+256),w
  1503  01E3  3A80               	xorlw	128
  1504  01E4  00FF               	movwf	btemp+1
  1505  01E5  3080               	movlw	128
  1506  01E6  027F               	subwf	btemp+1,w
  1507  01E7  1D03               	skipz
  1508  01E8  29EB               	goto	u3225
  1509  01E9  3004               	movlw	4
  1510  01EA  026A               	subwf	main@i^(0+256),w
  1511  01EB                     u3225:	
  1512  01EB  1C03               	skipc
  1513  01EC  29EE               	goto	u3221
  1514  01ED  29EF               	goto	u3220
  1515  01EE                     u3221:	
  1516  01EE  29C5               	goto	l3234
  1517  01EF                     u3220:	
  1518  01EF                     l3240:	
  1519                           
  1520                           ;main.c: 198:                 for (int i = 0; i < 4; i++)
  1521  01EF  1283               	bcf	3,5	;RP0=0, select bank2
  1522  01F0  1703               	bsf	3,6	;RP1=1, select bank2
  1523  01F1  01E6               	clrf	main@i_436^(0+256)
  1524  01F2  01E7               	clrf	(main@i_436+1)^(0+256)
  1525  01F3                     l3242:	
  1526  01F3  0867               	movf	(main@i_436+1)^(0+256),w
  1527  01F4  3A80               	xorlw	128
  1528  01F5  00FF               	movwf	btemp+1
  1529  01F6  3080               	movlw	128
  1530  01F7  027F               	subwf	btemp+1,w
  1531  01F8  1D03               	skipz
  1532  01F9  29FC               	goto	u3235
  1533  01FA  3004               	movlw	4
  1534  01FB  0266               	subwf	main@i_436^(0+256),w
  1535  01FC                     u3235:	
  1536  01FC  1C03               	skipc
  1537  01FD  29FF               	goto	u3231
  1538  01FE  2A00               	goto	u3230
  1539  01FF                     u3231:	
  1540  01FF  2A01               	goto	l3246
  1541  0200                     u3230:	
  1542  0200  2A17               	goto	l3252
  1543  0201                     l3246:	
  1544                           
  1545                           ;main.c: 199:                 {;main.c: 200:                     motorcycle[i] = 0;
  1546  0201  1283               	bcf	3,5	;RP0=0, select bank2
  1547  0202  1703               	bsf	3,6	;RP1=1, select bank2
  1548  0203  0866               	movf	main@i_436^(0+256),w
  1549  0204  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1550  0205  0084               	movwf	4
  1551  0206  1383               	bcf	3,7	;select IRP bank0
  1552  0207  0180               	clrf	0
  1553                           
  1554                           ;main.c: 201:                     car[i] = 0;
  1555  0208  0866               	movf	main@i_436^(0+256),w
  1556  0209  3E50               	addlw	(low (_car| 0))& (0+255)
  1557  020A  0084               	movwf	4
  1558  020B  0180               	clrf	0
  1559                           
  1560                           ;main.c: 202:                     truck[i] = 0;
  1561  020C  0866               	movf	main@i_436^(0+256),w
  1562  020D  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1563  020E  0084               	movwf	4
  1564  020F  0180               	clrf	0
  1565  0210                     l3248:	
  1566                           
  1567                           ;main.c: 203:                 }
  1568  0210  3001               	movlw	1
  1569  0211  07E6               	addwf	main@i_436^(0+256),f
  1570  0212  1803               	skipnc
  1571  0213  0AE7               	incf	(main@i_436+1)^(0+256),f
  1572  0214  3000               	movlw	0
  1573  0215  07E7               	addwf	(main@i_436+1)^(0+256),f
  1574  0216  29F3               	goto	l3242
  1575  0217                     l3252:	
  1576                           
  1577                           ;main.c: 205:                 for (unsigned char i = 0; i < 5; i++)
  1578  0217  1283               	bcf	3,5	;RP0=0, select bank2
  1579  0218  1703               	bsf	3,6	;RP1=1, select bank2
  1580  0219  01E3               	clrf	main@i_437^(0+256)
  1581  021A                     l3254:	
  1582  021A  3005               	movlw	5
  1583  021B  0263               	subwf	main@i_437^(0+256),w
  1584  021C  1C03               	skipc
  1585  021D  2A1F               	goto	u3241
  1586  021E  2A20               	goto	u3240
  1587  021F                     u3241:	
  1588  021F  2A21               	goto	l3258
  1589  0220                     u3240:	
  1590  0220  2B38               	goto	l212
  1591  0221                     l3258:	
  1592                           
  1593                           ;main.c: 206:                 {;main.c: 207:                     dataFromGateway[i] = 0;
  1594  0221  0863               	movf	main@i_437^(0+256),w
  1595  0222  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1596  0223  0084               	movwf	4
  1597  0224  1383               	bcf	3,7	;select IRP bank1
  1598  0225  0180               	clrf	0
  1599  0226                     l3260:	
  1600                           
  1601                           ;main.c: 208:                 }
  1602  0226  3001               	movlw	1
  1603  0227  1283               	bcf	3,5	;RP0=0, select bank0
  1604  0228  1303               	bcf	3,6	;RP1=0, select bank0
  1605  0229  00BC               	movwf	??_main
  1606  022A  083C               	movf	??_main,w
  1607  022B  1283               	bcf	3,5	;RP0=0, select bank2
  1608  022C  1703               	bsf	3,6	;RP1=1, select bank2
  1609  022D  07E3               	addwf	main@i_437^(0+256),f
  1610  022E  2A1A               	goto	l3254
  1611  022F                     l228:	
  1612                           ;main.c: 210:             case 0x0A:
  1613                           
  1614                           
  1615                           ;main.c: 211:                 readGatewayDone.Bit = 1;
  1616  022F  1464               	bsf	_readGatewayDone,0
  1617                           
  1618                           ;main.c: 212:                 readGateway.Bit = 0;
  1619  0230  1063               	bcf	_readGateway,0
  1620  0231                     l3264:	
  1621                           
  1622                           ;main.c: 214:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1623  0231  3000               	movlw	0
  1624  0232  120A  158A  232A  120A  118A  	fcall	_ADC_Read
  1625  0237  1283               	bcf	3,5	;RP0=0, select bank0
  1626  0238  1303               	bcf	3,6	;RP1=0, select bank0
  1627  0239  0820               	movf	?_ADC_Read,w
  1628  023A  00BC               	movwf	??_main
  1629  023B  0821               	movf	?_ADC_Read+1,w
  1630  023C  00BD               	movwf	??_main+1
  1631  023D  0D3D               	rlf	??_main+1,w
  1632  023E  0CBD               	rrf	??_main+1,f
  1633  023F  0CBC               	rrf	??_main,f
  1634  0240  0D3D               	rlf	??_main+1,w
  1635  0241  0CBD               	rrf	??_main+1,f
  1636  0242  0CBC               	rrf	??_main,f
  1637  0243  083C               	movf	??_main,w
  1638  0244  00B0               	movwf	map@x
  1639  0245  083D               	movf	??_main+1,w
  1640  0246  00B1               	movwf	map@x+1
  1641  0247  3000               	movlw	0
  1642  0248  00B2               	movwf	map@in_min
  1643  0249  00B3               	movwf	map@in_min+1
  1644  024A  30FF               	movlw	255
  1645  024B  00B4               	movwf	map@in_max
  1646  024C  3000               	movlw	0
  1647  024D  00B5               	movwf	map@in_max+1
  1648  024E  30EC               	movlw	236
  1649  024F  00B6               	movwf	map@out_min
  1650  0250  30FF               	movlw	255
  1651  0251  00B7               	movwf	map@out_min+1
  1652  0252  303C               	movlw	60
  1653  0253  00B8               	movwf	map@out_max
  1654  0254  3000               	movlw	0
  1655  0255  00B9               	movwf	map@out_max+1
  1656  0256  120A  158A  23D9  120A  118A  	fcall	_map
  1657  025B  1283               	bcf	3,5	;RP0=0, select bank0
  1658  025C  1303               	bcf	3,6	;RP1=0, select bank0
  1659  025D  0830               	movf	?_map,w
  1660  025E  00BE               	movwf	??_main+2
  1661  025F  083E               	movf	??_main+2,w
  1662  0260  1283               	bcf	3,5	;RP0=0, select bank2
  1663  0261  1703               	bsf	3,6	;RP1=1, select bank2
  1664  0262  00DA               	movwf	main@temp^(0+256)
  1665                           
  1666                           ;main.c: 215:                 umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  1667  0263  3001               	movlw	1
  1668  0264  120A  158A  232A  120A  118A  	fcall	_ADC_Read
  1669  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1670  026A  1303               	bcf	3,6	;RP1=0, select bank0
  1671  026B  0820               	movf	?_ADC_Read,w
  1672  026C  00BC               	movwf	??_main
  1673  026D  0821               	movf	?_ADC_Read+1,w
  1674  026E  00BD               	movwf	??_main+1
  1675  026F  0D3D               	rlf	??_main+1,w
  1676  0270  0CBD               	rrf	??_main+1,f
  1677  0271  0CBC               	rrf	??_main,f
  1678  0272  0D3D               	rlf	??_main+1,w
  1679  0273  0CBD               	rrf	??_main+1,f
  1680  0274  0CBC               	rrf	??_main,f
  1681  0275  083C               	movf	??_main,w
  1682  0276  00B0               	movwf	map@x
  1683  0277  083D               	movf	??_main+1,w
  1684  0278  00B1               	movwf	map@x+1
  1685  0279  3000               	movlw	0
  1686  027A  00B2               	movwf	map@in_min
  1687  027B  00B3               	movwf	map@in_min+1
  1688  027C  30FF               	movlw	255
  1689  027D  00B4               	movwf	map@in_max
  1690  027E  3000               	movlw	0
  1691  027F  00B5               	movwf	map@in_max+1
  1692  0280  3000               	movlw	0
  1693  0281  00B6               	movwf	map@out_min
  1694  0282  00B7               	movwf	map@out_min+1
  1695  0283  3064               	movlw	100
  1696  0284  00B8               	movwf	map@out_max
  1697  0285  3000               	movlw	0
  1698  0286  00B9               	movwf	map@out_max+1
  1699  0287  120A  158A  23D9  120A  118A  	fcall	_map
  1700  028C  1283               	bcf	3,5	;RP0=0, select bank0
  1701  028D  1303               	bcf	3,6	;RP1=0, select bank0
  1702  028E  0830               	movf	?_map,w
  1703  028F  00BE               	movwf	??_main+2
  1704  0290  083E               	movf	??_main+2,w
  1705  0291  1283               	bcf	3,5	;RP0=0, select bank2
  1706  0292  1703               	bsf	3,6	;RP1=1, select bank2
  1707  0293  00DB               	movwf	main@umidita^(0+256)
  1708                           
  1709                           ;main.c: 216:                 pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  1710  0294  3005               	movlw	5
  1711  0295  120A  158A  232A  120A  118A  	fcall	_ADC_Read
  1712  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1713  029B  1303               	bcf	3,6	;RP1=0, select bank0
  1714  029C  0820               	movf	?_ADC_Read,w
  1715  029D  00BC               	movwf	??_main
  1716  029E  0821               	movf	?_ADC_Read+1,w
  1717  029F  00BD               	movwf	??_main+1
  1718  02A0  0D3D               	rlf	??_main+1,w
  1719  02A1  0CBD               	rrf	??_main+1,f
  1720  02A2  0CBC               	rrf	??_main,f
  1721  02A3  0D3D               	rlf	??_main+1,w
  1722  02A4  0CBD               	rrf	??_main+1,f
  1723  02A5  0CBC               	rrf	??_main,f
  1724  02A6  083C               	movf	??_main,w
  1725  02A7  00B0               	movwf	map@x
  1726  02A8  083D               	movf	??_main+1,w
  1727  02A9  00B1               	movwf	map@x+1
  1728  02AA  3000               	movlw	0
  1729  02AB  00B2               	movwf	map@in_min
  1730  02AC  00B3               	movwf	map@in_min+1
  1731  02AD  30FF               	movlw	255
  1732  02AE  00B4               	movwf	map@in_max
  1733  02AF  3000               	movlw	0
  1734  02B0  00B5               	movwf	map@in_max+1
  1735  02B1  3000               	movlw	0
  1736  02B2  00B6               	movwf	map@out_min
  1737  02B3  00B7               	movwf	map@out_min+1
  1738  02B4  3064               	movlw	100
  1739  02B5  00B8               	movwf	map@out_max
  1740  02B6  3000               	movlw	0
  1741  02B7  00B9               	movwf	map@out_max+1
  1742  02B8  120A  158A  23D9  120A  118A  	fcall	_map
  1743  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  1744  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  1745  02BF  0830               	movf	?_map,w
  1746  02C0  00BE               	movwf	??_main+2
  1747  02C1  083E               	movf	??_main+2,w
  1748  02C2  1283               	bcf	3,5	;RP0=0, select bank2
  1749  02C3  1703               	bsf	3,6	;RP1=1, select bank2
  1750  02C4  00DC               	movwf	main@pressione^(0+256)
  1751  02C5                     l3266:	
  1752                           
  1753                           ;main.c: 217:                 sendByte(0x02, 0x00, temp);
  1754  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  1755  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  1756  02C7  01B4               	clrf	sendByte@byte1
  1757  02C8  1283               	bcf	3,5	;RP0=0, select bank2
  1758  02C9  1703               	bsf	3,6	;RP1=1, select bank2
  1759  02CA  085A               	movf	main@temp^(0+256),w
  1760  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  1761  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  1762  02CD  00BC               	movwf	??_main
  1763  02CE  083C               	movf	??_main,w
  1764  02CF  00B5               	movwf	sendByte@valore
  1765  02D0  3002               	movlw	2
  1766  02D1  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1767  02D6                     l3268:	
  1768                           
  1769                           ;main.c: 218:                 sendByte(0x04, 0x00, umidita);
  1770  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  1771  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  1772  02D8  01B4               	clrf	sendByte@byte1
  1773  02D9  1283               	bcf	3,5	;RP0=0, select bank2
  1774  02DA  1703               	bsf	3,6	;RP1=1, select bank2
  1775  02DB  085B               	movf	main@umidita^(0+256),w
  1776  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  1777  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  1778  02DE  00BC               	movwf	??_main
  1779  02DF  083C               	movf	??_main,w
  1780  02E0  00B5               	movwf	sendByte@valore
  1781  02E1  3004               	movlw	4
  1782  02E2  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1783  02E7                     l3270:	
  1784                           
  1785                           ;main.c: 219:                 sendByte(0x06, 0x00, pressione);
  1786  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  1787  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  1788  02E9  01B4               	clrf	sendByte@byte1
  1789  02EA  1283               	bcf	3,5	;RP0=0, select bank2
  1790  02EB  1703               	bsf	3,6	;RP1=1, select bank2
  1791  02EC  085C               	movf	main@pressione^(0+256),w
  1792  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  1793  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  1794  02EF  00BC               	movwf	??_main
  1795  02F0  083C               	movf	??_main,w
  1796  02F1  00B5               	movwf	sendByte@valore
  1797  02F2  3006               	movlw	6
  1798  02F3  120A  158A  23A8  120A  118A  	fcall	_sendByte
  1799  02F8                     l3272:	
  1800                           
  1801                           ;main.c: 221:                 for (unsigned char i = 0; i < 5; i++)
  1802  02F8  1283               	bcf	3,5	;RP0=0, select bank2
  1803  02F9  1703               	bsf	3,6	;RP1=1, select bank2
  1804  02FA  01E4               	clrf	main@i_439^(0+256)
  1805  02FB                     l3274:	
  1806  02FB  3005               	movlw	5
  1807  02FC  0264               	subwf	main@i_439^(0+256),w
  1808  02FD  1C03               	skipc
  1809  02FE  2B00               	goto	u3251
  1810  02FF  2B01               	goto	u3250
  1811  0300                     u3251:	
  1812  0300  2B02               	goto	l3278
  1813  0301                     u3250:	
  1814  0301  2B38               	goto	l212
  1815  0302                     l3278:	
  1816                           
  1817                           ;main.c: 222:                 {;main.c: 223:                     dataFromGateway[i] = 0;
  1818  0302  0864               	movf	main@i_439^(0+256),w
  1819  0303  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1820  0304  0084               	movwf	4
  1821  0305  1383               	bcf	3,7	;select IRP bank1
  1822  0306  0180               	clrf	0
  1823  0307                     l3280:	
  1824                           
  1825                           ;main.c: 224:                 }
  1826  0307  3001               	movlw	1
  1827  0308  1283               	bcf	3,5	;RP0=0, select bank0
  1828  0309  1303               	bcf	3,6	;RP1=0, select bank0
  1829  030A  00BC               	movwf	??_main
  1830  030B  083C               	movf	??_main,w
  1831  030C  1283               	bcf	3,5	;RP0=0, select bank2
  1832  030D  1703               	bsf	3,6	;RP1=1, select bank2
  1833  030E  07E4               	addwf	main@i_439^(0+256),f
  1834  030F  2AFB               	goto	l3274
  1835  0310                     l3284:	
  1836                           
  1837                           ;main.c: 228:                 if (timerReadFromGateway >= 4)
  1838  0310  3004               	movlw	4
  1839  0311  0259               	subwf	_timerReadFromGateway,w
  1840  0312  1C03               	skipc
  1841  0313  2B15               	goto	u3261
  1842  0314  2B16               	goto	u3260
  1843  0315                     u3261:	
  1844  0315  2B19               	goto	l3288
  1845  0316                     u3260:	
  1846  0316                     l3286:	
  1847                           
  1848                           ;main.c: 229:                 {;main.c: 230:                     readGatewayDone.Bit = 1
      +                          ;
  1849  0316  1464               	bsf	_readGatewayDone,0
  1850                           
  1851                           ;main.c: 231:                     readGatewayDone.Timeout = 1;
  1852  0317  14E4               	bsf	_readGatewayDone,1
  1853                           
  1854                           ;main.c: 232:                     readGateway.Bit = 0;
  1855  0318  1063               	bcf	_readGateway,0
  1856  0319                     l3288:	
  1857                           
  1858                           ;main.c: 235:                 if (dataFromGatewayIndex >= 15)
  1859  0319  300F               	movlw	15
  1860  031A  025A               	subwf	_dataFromGatewayIndex,w
  1861  031B  1C03               	skipc
  1862  031C  2B1E               	goto	u3271
  1863  031D  2B1F               	goto	u3270
  1864  031E                     u3271:	
  1865  031E  2B38               	goto	l212
  1866  031F                     u3270:	
  1867  031F                     l3290:	
  1868                           
  1869                           ;main.c: 236:                 {;main.c: 237:                     readGatewayDone.Bit = 1
      +                          ;
  1870  031F  1464               	bsf	_readGatewayDone,0
  1871                           
  1872                           ;main.c: 238:                     readGatewayDone.Timeout = 0;
  1873  0320  10E4               	bcf	_readGatewayDone,1
  1874                           
  1875                           ;main.c: 239:                     readGateway.Bit = 0;
  1876  0321  1063               	bcf	_readGateway,0
  1877  0322  2B38               	goto	l212
  1878  0323                     l3294:	
  1879  0323  1683               	bsf	3,5	;RP0=1, select bank1
  1880  0324  1303               	bcf	3,6	;RP1=0, select bank1
  1881  0325  0820               	movf	_dataFromGateway^(0+128),w
  1882  0326  397F               	andlw	127
  1883  0327  1283               	bcf	3,5	;RP0=0, select bank0
  1884  0328  1303               	bcf	3,6	;RP1=0, select bank0
  1885  0329  00BC               	movwf	??_main
  1886  032A  01BD               	clrf	??_main+1
  1887                           
  1888                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1889                           ; Switch size 1, requested type "simple"
  1890                           ; Number of cases is 1, Range of values is 0 to 0
  1891                           ; switch strategies available:
  1892                           ; Name         Instructions Cycles
  1893                           ; simple_byte            4     3 (average)
  1894                           ; direct_byte           11     8 (fixed)
  1895                           ; jumptable            260     6 (fixed)
  1896                           ;	Chosen strategy is simple_byte
  1897  032B  083D               	movf	??_main+1,w
  1898  032C  3A00               	xorlw	0	; case 0
  1899  032D  1903               	skipnz
  1900  032E  2B30               	goto	l3552
  1901  032F  2B10               	goto	l3284
  1902  0330                     l3552:	
  1903                           
  1904                           ; Switch size 1, requested type "simple"
  1905                           ; Number of cases is 2, Range of values is 8 to 10
  1906                           ; switch strategies available:
  1907                           ; Name         Instructions Cycles
  1908                           ; simple_byte            7     4 (average)
  1909                           ; direct_byte           20    11 (fixed)
  1910                           ; jumptable            263     9 (fixed)
  1911                           ;	Chosen strategy is simple_byte
  1912  0330  083C               	movf	??_main,w
  1913  0331  3A08               	xorlw	8	; case 8
  1914  0332  1903               	skipnz
  1915  0333  28A2               	goto	l214
  1916  0334  3A02               	xorlw	2	; case 10
  1917  0335  1903               	skipnz
  1918  0336  2A2F               	goto	l228
  1919  0337  2B10               	goto	l3284
  1920  0338                     l212:	
  1921                           ;main.c: 243:         }
  1922                           
  1923                           
  1924                           ;main.c: 246:         if (readGatewayDone.Bit)
  1925  0338  1303               	bcf	3,6	;RP1=0, select bank0
  1926  0339  1C64               	btfss	_readGatewayDone,0
  1927  033A  2B3C               	goto	u3281
  1928  033B  2B3D               	goto	u3280
  1929  033C                     u3281:	
  1930  033C  2BD4               	goto	l234
  1931  033D                     u3280:	
  1932  033D                     l3296:	
  1933                           
  1934                           ;main.c: 247:         {;main.c: 249:             readGateway.Bit = 0;
  1935  033D  1063               	bcf	_readGateway,0
  1936  033E                     l3298:	
  1937                           
  1938                           ;main.c: 250:             dataFromGatewayIndex = 0;
  1939  033E  01DA               	clrf	_dataFromGatewayIndex
  1940  033F                     l3300:	
  1941                           
  1942                           ;main.c: 251:             readGatewayDone.Bit = 0;
  1943  033F  1064               	bcf	_readGatewayDone,0
  1944                           
  1945                           ;main.c: 252:             timerReadFromGateway = 0;
  1946  0340  01D9               	clrf	_timerReadFromGateway
  1947  0341                     l3302:	
  1948                           
  1949                           ;main.c: 255:             if (readGatewayDone.Timeout)
  1950  0341  1CE4               	btfss	_readGatewayDone,1
  1951  0342  2B44               	goto	u3291
  1952  0343  2B45               	goto	u3290
  1953  0344                     u3291:	
  1954  0344  2B47               	goto	l3306
  1955  0345                     u3290:	
  1956  0345                     l3304:	
  1957                           
  1958                           ;main.c: 256:             {;main.c: 257:                 readGatewayDone.Timeout = 0;
  1959  0345  10E4               	bcf	_readGatewayDone,1
  1960                           
  1961                           ;main.c: 258:             }
  1962  0346  2BD4               	goto	l234
  1963  0347                     l3306:	
  1964                           
  1965                           ;main.c: 261:             {;main.c: 262:                 bitParita(dataFromGateway);
  1966  0347  30A0               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1967  0348  120A  118A  272B  120A  118A  	fcall	_bitParita
  1968  034D                     l3308:	
  1969                           
  1970                           ;main.c: 263:                 unsigned char tmp;;main.c: 264:                 for (unsig
      +                          ned char i = 0; i < 3; i++)
  1971  034D  1283               	bcf	3,5	;RP0=0, select bank2
  1972  034E  1703               	bsf	3,6	;RP1=1, select bank2
  1973  034F  01E5               	clrf	main@i_442^(0+256)
  1974  0350                     l3310:	
  1975  0350  3003               	movlw	3
  1976  0351  0265               	subwf	main@i_442^(0+256),w
  1977  0352  1C03               	skipc
  1978  0353  2B55               	goto	u3301
  1979  0354  2B56               	goto	u3300
  1980  0355                     u3301:	
  1981  0355  2B57               	goto	l3314
  1982  0356                     u3300:	
  1983  0356  2BD4               	goto	l234
  1984  0357                     l3314:	
  1985                           
  1986                           ;main.c: 265:                 {;main.c: 266:                     unsigned char index = i
      +                           * 5;
  1987  0357  3005               	movlw	5
  1988  0358  1283               	bcf	3,5	;RP0=0, select bank0
  1989  0359  1303               	bcf	3,6	;RP1=0, select bank0
  1990  035A  00BC               	movwf	??_main
  1991  035B  083C               	movf	??_main,w
  1992  035C  00A0               	movwf	___bmul@multiplicand
  1993  035D  1283               	bcf	3,5	;RP0=0, select bank2
  1994  035E  1703               	bsf	3,6	;RP1=1, select bank2
  1995  035F  0865               	movf	main@i_442^(0+256),w
  1996  0360  120A  158A  22F3  120A  118A  	fcall	___bmul
  1997  0365  1283               	bcf	3,5	;RP0=0, select bank0
  1998  0366  1303               	bcf	3,6	;RP1=0, select bank0
  1999  0367  00BD               	movwf	??_main+1
  2000  0368  083D               	movf	??_main+1,w
  2001  0369  1283               	bcf	3,5	;RP0=0, select bank2
  2002  036A  1703               	bsf	3,6	;RP1=1, select bank2
  2003  036B  00E0               	movwf	main@index^(0+256)
  2004  036C                     l3316:	
  2005                           
  2006                           ;main.c: 267:                     tmp = dataFromGateway[index];
  2007  036C  0860               	movf	main@index^(0+256),w
  2008  036D  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  2009  036E  0084               	movwf	4
  2010  036F  1383               	bcf	3,7	;select IRP bank1
  2011  0370  0800               	movf	0,w
  2012  0371  1283               	bcf	3,5	;RP0=0, select bank0
  2013  0372  1303               	bcf	3,6	;RP1=0, select bank0
  2014  0373  00BC               	movwf	??_main
  2015  0374  083C               	movf	??_main,w
  2016  0375  1283               	bcf	3,5	;RP0=0, select bank2
  2017  0376  1703               	bsf	3,6	;RP1=1, select bank2
  2018  0377  00DE               	movwf	main@tmp^(0+256)
  2019  0378                     l3318:	
  2020                           
  2021                           ;main.c: 268:                     unsigned char semaforoId = (tmp >> 1) & 0x0F;
  2022  0378  085E               	movf	main@tmp^(0+256),w
  2023  0379  1283               	bcf	3,5	;RP0=0, select bank0
  2024  037A  1303               	bcf	3,6	;RP1=0, select bank0
  2025  037B  00BC               	movwf	??_main
  2026  037C  1003               	clrc
  2027  037D  0C3C               	rrf	??_main,w
  2028  037E  390F               	andlw	15
  2029  037F  00BD               	movwf	??_main+1
  2030  0380  083D               	movf	??_main+1,w
  2031  0381  1283               	bcf	3,5	;RP0=0, select bank2
  2032  0382  1703               	bsf	3,6	;RP1=1, select bank2
  2033  0383  00D8               	movwf	main@semaforoId^(0+256)
  2034  0384                     l3320:	
  2035                           
  2036                           ;main.c: 269:                     tmp = dataFromGateway[index];
  2037  0384  0860               	movf	main@index^(0+256),w
  2038  0385  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  2039  0386  0084               	movwf	4
  2040  0387  0800               	movf	0,w
  2041  0388  1283               	bcf	3,5	;RP0=0, select bank0
  2042  0389  1303               	bcf	3,6	;RP1=0, select bank0
  2043  038A  00BC               	movwf	??_main
  2044  038B  083C               	movf	??_main,w
  2045  038C  1283               	bcf	3,5	;RP0=0, select bank2
  2046  038D  1703               	bsf	3,6	;RP1=1, select bank2
  2047  038E  00DE               	movwf	main@tmp^(0+256)
  2048  038F                     l3322:	
  2049                           
  2050                           ;main.c: 270:                     unsigned char colorId = ((tmp >> 5) & 0x03) - 1;
  2051  038F  085E               	movf	main@tmp^(0+256),w
  2052  0390  1283               	bcf	3,5	;RP0=0, select bank0
  2053  0391  1303               	bcf	3,6	;RP1=0, select bank0
  2054  0392  00BC               	movwf	??_main
  2055  0393  3005               	movlw	5
  2056  0394                     u3315:	
  2057  0394  1003               	clrc
  2058  0395  0CBC               	rrf	??_main,f
  2059  0396  3EFF               	addlw	-1
  2060  0397  1D03               	skipz
  2061  0398  2B94               	goto	u3315
  2062  0399  083C               	movf	??_main,w
  2063  039A  3903               	andlw	3
  2064  039B  3EFF               	addlw	255
  2065  039C  00BD               	movwf	??_main+1
  2066  039D  083D               	movf	??_main+1,w
  2067  039E  1283               	bcf	3,5	;RP0=0, select bank2
  2068  039F  1703               	bsf	3,6	;RP1=1, select bank2
  2069  03A0  00D9               	movwf	main@colorId^(0+256)
  2070  03A1                     l3324:	
  2071                           
  2072                           ;main.c: 272:                     (*(Semafori[semaforoId])).new_times[colorId] = GetTime
      +                          (index);
  2073  03A1  0860               	movf	main@index^(0+256),w
  2074  03A2  120A  158A  2448  120A  118A  	fcall	_GetTime
  2075  03A7  1283               	bcf	3,5	;RP0=0, select bank2
  2076  03A8  1703               	bsf	3,6	;RP1=1, select bank2
  2077  03A9  0858               	movf	main@semaforoId^(0+256),w
  2078  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2079  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2080  03AC  00BC               	movwf	??_main
  2081  03AD  073C               	addwf	??_main,w
  2082  03AE  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2083  03AF  0084               	movwf	4
  2084  03B0  1383               	bcf	3,7	;select IRP bank1
  2085  03B1  0800               	movf	0,w
  2086  03B2  00BD               	movwf	??_main+1
  2087  03B3  0A84               	incf	4,f
  2088  03B4  0800               	movf	0,w
  2089  03B5  00BE               	movwf	??_main+2
  2090  03B6  1283               	bcf	3,5	;RP0=0, select bank2
  2091  03B7  1703               	bsf	3,6	;RP1=1, select bank2
  2092  03B8  0859               	movf	main@colorId^(0+256),w
  2093  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  2094  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  2095  03BB  00BF               	movwf	??_main+3
  2096  03BC  073F               	addwf	??_main+3,w
  2097  03BD  073D               	addwf	??_main+1,w
  2098  03BE  00C0               	movwf	??_main+4
  2099  03BF  083E               	movf	??_main+2,w
  2100  03C0  1803               	skipnc
  2101  03C1  3E01               	addlw	1
  2102  03C2  00C1               	movwf	??_main+5
  2103  03C3  0840               	movf	??_main+4,w
  2104  03C4  0084               	movwf	4
  2105  03C5  1783               	bsf	3,7
  2106  03C6  1C41               	btfss	??_main+5,0
  2107  03C7  1383               	bcf	3,7
  2108  03C8  0820               	movf	?_GetTime,w
  2109  03C9  0080               	movwf	0
  2110  03CA  0A84               	incf	4,f
  2111  03CB  0821               	movf	?_GetTime+1,w
  2112  03CC  0080               	movwf	0
  2113  03CD                     l3326:	
  2114                           
  2115                           ;main.c: 273:                 }
  2116  03CD  3001               	movlw	1
  2117  03CE  00BC               	movwf	??_main
  2118  03CF  083C               	movf	??_main,w
  2119  03D0  1283               	bcf	3,5	;RP0=0, select bank2
  2120  03D1  1703               	bsf	3,6	;RP1=1, select bank2
  2121  03D2  07E5               	addwf	main@i_442^(0+256),f
  2122  03D3  2B50               	goto	l3310
  2123  03D4                     l234:	
  2124                           ;main.c: 275:         }
  2125                           
  2126                           
  2127                           ;main.c: 279:         if (endCiclo.Bit)
  2128  03D4  1283               	bcf	3,5	;RP0=0, select bank2
  2129  03D5  1703               	bsf	3,6	;RP1=1, select bank2
  2130  03D6  1C5D               	btfss	main@endCiclo^(0+256),0
  2131  03D7  2BD9               	goto	u3321
  2132  03D8  2BDA               	goto	u3320
  2133  03D9                     u3321:	
  2134  03D9  2CCB               	goto	l239
  2135  03DA                     u3320:	
  2136  03DA                     l3330:	
  2137                           
  2138                           ;main.c: 280:         {;main.c: 282:             for (unsigned char l = 0; l < 16; l++)
  2139  03DA  01E8               	clrf	main@l^(0+256)
  2140  03DB                     l3332:	
  2141  03DB  3010               	movlw	16
  2142  03DC  0268               	subwf	main@l^(0+256),w
  2143  03DD  1C03               	skipc
  2144  03DE  2BE0               	goto	u3331
  2145  03DF  2BE1               	goto	u3330
  2146  03E0                     u3331:	
  2147  03E0  2BE2               	goto	l3336
  2148  03E1                     u3330:	
  2149  03E1  2C9C               	goto	l3354
  2150  03E2                     l3336:	
  2151                           
  2152                           ;main.c: 283:             {;main.c: 284:                 for (unsigned char i = 0; i < 3
      +                          ; i++)
  2153  03E2  01E9               	clrf	main@i_449^(0+256)
  2154  03E3                     l3338:	
  2155  03E3  3003               	movlw	3
  2156  03E4  0269               	subwf	main@i_449^(0+256),w
  2157  03E5  1C03               	skipc
  2158  03E6  2BE8               	goto	u3341
  2159  03E7  2BE9               	goto	u3340
  2160  03E8                     u3341:	
  2161  03E8  2BEA               	goto	l3342
  2162  03E9                     u3340:	
  2163  03E9  2C93               	goto	l3350
  2164  03EA                     l3342:	
  2165                           
  2166                           ;main.c: 285:                 {;main.c: 286:                     if ((*(Semafori[l])).ti
      +                          mes[i] != (*(Semafori[l])).new_times[i])
  2167  03EA  0868               	movf	main@l^(0+256),w
  2168  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  2169  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  2170  03ED  00BC               	movwf	??_main
  2171  03EE  073C               	addwf	??_main,w
  2172  03EF  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2173  03F0  0084               	movwf	4
  2174  03F1  1383               	bcf	3,7	;select IRP bank1
  2175  03F2  0800               	movf	0,w
  2176  03F3  00BD               	movwf	??_main+1
  2177  03F4  0A84               	incf	4,f
  2178  03F5  0800               	movf	0,w
  2179  03F6  00BE               	movwf	??_main+2
  2180  03F7  1283               	bcf	3,5	;RP0=0, select bank2
  2181  03F8  1703               	bsf	3,6	;RP1=1, select bank2
  2182  03F9  0869               	movf	main@i_449^(0+256),w
  2183  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2184  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2185  03FC  00BF               	movwf	??_main+3
  2186  03FD  073F               	addwf	??_main+3,w
  2187  03FE  073D               	addwf	??_main+1,w
  2188  03FF  00C0               	movwf	??_main+4
  2189  0400  083E               	movf	??_main+2,w
  2190  0401  1803               	skipnc
  2191  0402  3E01               	addlw	1
  2192  0403  00C1               	movwf	??_main+5
  2193  0404  0840               	movf	??_main+4,w
  2194  0405  0084               	movwf	4
  2195  0406  1783               	bsf	3,7
  2196  0407  1C41               	btfss	??_main+5,0
  2197  0408  1383               	bcf	3,7
  2198  0409  0800               	movf	0,w
  2199  040A  00C2               	movwf	??_main+6
  2200  040B  0A84               	incf	4,f
  2201  040C  0800               	movf	0,w
  2202  040D  00C3               	movwf	??_main+7
  2203  040E  1283               	bcf	3,5	;RP0=0, select bank2
  2204  040F  1703               	bsf	3,6	;RP1=1, select bank2
  2205  0410  0868               	movf	main@l^(0+256),w
  2206  0411  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0412  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0413  00C4               	movwf	??_main+8
  2209  0414  0744               	addwf	??_main+8,w
  2210  0415  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2211  0416  0084               	movwf	4
  2212  0417  1383               	bcf	3,7	;select IRP bank1
  2213  0418  0800               	movf	0,w
  2214  0419  00C5               	movwf	??_main+9
  2215  041A  0A84               	incf	4,f
  2216  041B  0800               	movf	0,w
  2217  041C  00C6               	movwf	??_main+10
  2218  041D  1283               	bcf	3,5	;RP0=0, select bank2
  2219  041E  1703               	bsf	3,6	;RP1=1, select bank2
  2220  041F  0869               	movf	main@i_449^(0+256),w
  2221  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2222  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2223  0422  00C7               	movwf	??_main+11
  2224  0423  0747               	addwf	??_main+11,w
  2225  0424  3E06               	addlw	6
  2226  0425  0745               	addwf	??_main+9,w
  2227  0426  00C8               	movwf	??_main+12
  2228  0427  0846               	movf	??_main+10,w
  2229  0428  1803               	skipnc
  2230  0429  3E01               	addlw	1
  2231  042A  00C9               	movwf	??_main+13
  2232  042B  0848               	movf	??_main+12,w
  2233  042C  0084               	movwf	4
  2234  042D  1783               	bsf	3,7
  2235  042E  1C49               	btfss	??_main+13,0
  2236  042F  1383               	bcf	3,7
  2237  0430  0800               	movf	0,w
  2238  0431  00CA               	movwf	??_main+14
  2239  0432  0A84               	incf	4,f
  2240  0433  0800               	movf	0,w
  2241  0434  00CB               	movwf	??_main+15
  2242  0435  0843               	movf	??_main+7,w
  2243  0436  064B               	xorwf	??_main+15,w
  2244  0437  1D03               	skipz
  2245  0438  2C3B               	goto	u3355
  2246  0439  0842               	movf	??_main+6,w
  2247  043A  064A               	xorwf	??_main+14,w
  2248  043B                     u3355:	
  2249  043B  1903               	skipnz
  2250  043C  2C3E               	goto	u3351
  2251  043D  2C3F               	goto	u3350
  2252  043E                     u3351:	
  2253  043E  2C8C               	goto	l3346
  2254  043F                     u3350:	
  2255  043F                     l3344:	
  2256                           
  2257                           ;main.c: 287:                     {;main.c: 288:                         (*(Semafori[l])
      +                          ).times[i] = (*(Semafori[l])).new_times[i];
  2258  043F  1283               	bcf	3,5	;RP0=0, select bank2
  2259  0440  1703               	bsf	3,6	;RP1=1, select bank2
  2260  0441  0868               	movf	main@l^(0+256),w
  2261  0442  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0443  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0444  00BC               	movwf	??_main
  2264  0445  073C               	addwf	??_main,w
  2265  0446  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2266  0447  0084               	movwf	4
  2267  0448  1383               	bcf	3,7	;select IRP bank1
  2268  0449  0800               	movf	0,w
  2269  044A  00BD               	movwf	??_main+1
  2270  044B  0A84               	incf	4,f
  2271  044C  0800               	movf	0,w
  2272  044D  00BE               	movwf	??_main+2
  2273  044E  1283               	bcf	3,5	;RP0=0, select bank2
  2274  044F  1703               	bsf	3,6	;RP1=1, select bank2
  2275  0450  0869               	movf	main@i_449^(0+256),w
  2276  0451  1283               	bcf	3,5	;RP0=0, select bank0
  2277  0452  1303               	bcf	3,6	;RP1=0, select bank0
  2278  0453  00BF               	movwf	??_main+3
  2279  0454  073F               	addwf	??_main+3,w
  2280  0455  073D               	addwf	??_main+1,w
  2281  0456  00C0               	movwf	??_main+4
  2282  0457  083E               	movf	??_main+2,w
  2283  0458  1803               	skipnc
  2284  0459  3E01               	addlw	1
  2285  045A  00C1               	movwf	??_main+5
  2286  045B  0840               	movf	??_main+4,w
  2287  045C  0084               	movwf	4
  2288  045D  1783               	bsf	3,7
  2289  045E  1C41               	btfss	??_main+5,0
  2290  045F  1383               	bcf	3,7
  2291  0460  0800               	movf	0,w
  2292  0461  00C2               	movwf	??_main+6
  2293  0462  0A84               	incf	4,f
  2294  0463  0800               	movf	0,w
  2295  0464  00C3               	movwf	??_main+7
  2296  0465  1283               	bcf	3,5	;RP0=0, select bank2
  2297  0466  1703               	bsf	3,6	;RP1=1, select bank2
  2298  0467  0868               	movf	main@l^(0+256),w
  2299  0468  1283               	bcf	3,5	;RP0=0, select bank0
  2300  0469  1303               	bcf	3,6	;RP1=0, select bank0
  2301  046A  00C4               	movwf	??_main+8
  2302  046B  0744               	addwf	??_main+8,w
  2303  046C  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2304  046D  0084               	movwf	4
  2305  046E  1383               	bcf	3,7	;select IRP bank1
  2306  046F  0800               	movf	0,w
  2307  0470  00C5               	movwf	??_main+9
  2308  0471  0A84               	incf	4,f
  2309  0472  0800               	movf	0,w
  2310  0473  00C6               	movwf	??_main+10
  2311  0474  1283               	bcf	3,5	;RP0=0, select bank2
  2312  0475  1703               	bsf	3,6	;RP1=1, select bank2
  2313  0476  0869               	movf	main@i_449^(0+256),w
  2314  0477  1283               	bcf	3,5	;RP0=0, select bank0
  2315  0478  1303               	bcf	3,6	;RP1=0, select bank0
  2316  0479  00C7               	movwf	??_main+11
  2317  047A  0747               	addwf	??_main+11,w
  2318  047B  3E06               	addlw	6
  2319  047C  0745               	addwf	??_main+9,w
  2320  047D  00C8               	movwf	??_main+12
  2321  047E  0846               	movf	??_main+10,w
  2322  047F  1803               	skipnc
  2323  0480  3E01               	addlw	1
  2324  0481  00C9               	movwf	??_main+13
  2325  0482  0848               	movf	??_main+12,w
  2326  0483  0084               	movwf	4
  2327  0484  1783               	bsf	3,7
  2328  0485  1C49               	btfss	??_main+13,0
  2329  0486  1383               	bcf	3,7
  2330  0487  0842               	movf	??_main+6,w
  2331  0488  0080               	movwf	0
  2332  0489  0A84               	incf	4,f
  2333  048A  0843               	movf	??_main+7,w
  2334  048B  0080               	movwf	0
  2335  048C                     l3346:	
  2336                           
  2337                           ;main.c: 290:                 }
  2338  048C  3001               	movlw	1
  2339  048D  00BC               	movwf	??_main
  2340  048E  083C               	movf	??_main,w
  2341  048F  1283               	bcf	3,5	;RP0=0, select bank2
  2342  0490  1703               	bsf	3,6	;RP1=1, select bank2
  2343  0491  07E9               	addwf	main@i_449^(0+256),f
  2344  0492  2BE3               	goto	l3338
  2345  0493                     l3350:	
  2346                           
  2347                           ;main.c: 291:             }
  2348  0493  3001               	movlw	1
  2349  0494  1283               	bcf	3,5	;RP0=0, select bank0
  2350  0495  1303               	bcf	3,6	;RP1=0, select bank0
  2351  0496  00BC               	movwf	??_main
  2352  0497  083C               	movf	??_main,w
  2353  0498  1283               	bcf	3,5	;RP0=0, select bank2
  2354  0499  1703               	bsf	3,6	;RP1=1, select bank2
  2355  049A  07E8               	addwf	main@l^(0+256),f
  2356  049B  2BDB               	goto	l3332
  2357  049C                     l3354:	
  2358                           
  2359                           ;main.c: 295:             {;main.c: 296:                 n_semafori = (n_semafori + 1) %
      +                           16;
  2360  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2361  049D  0858               	movf	_n_semafori,w
  2362  049E  3E01               	addlw	1
  2363  049F  390F               	andlw	15
  2364  04A0  00BC               	movwf	??_main
  2365  04A1  083C               	movf	??_main,w
  2366  04A2  00D8               	movwf	_n_semafori
  2367  04A3                     l3356:	
  2368                           
  2369                           ;main.c: 297:             } while ((*(Semafori[n_semafori])).times[0] == 0 && n_semafori
      +                           > 0);
  2370  04A3  0858               	movf	_n_semafori,w
  2371  04A4  00BC               	movwf	??_main
  2372  04A5  073C               	addwf	??_main,w
  2373  04A6  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2374  04A7  0084               	movwf	4
  2375  04A8  1383               	bcf	3,7	;select IRP bank1
  2376  04A9  0800               	movf	0,w
  2377  04AA  00BD               	movwf	??_main+1
  2378  04AB  0A84               	incf	4,f
  2379  04AC  0800               	movf	0,w
  2380  04AD  00BE               	movwf	??_main+2
  2381  04AE  083D               	movf	??_main+1,w
  2382  04AF  3E06               	addlw	6
  2383  04B0  00BF               	movwf	??_main+3
  2384  04B1  083E               	movf	??_main+2,w
  2385  04B2  1803               	skipnc
  2386  04B3  3E01               	addlw	1
  2387  04B4  3E00               	addlw	0
  2388  04B5  00C0               	movwf	??_main+4
  2389  04B6  083F               	movf	??_main+3,w
  2390  04B7  0084               	movwf	4
  2391  04B8  1783               	bsf	3,7
  2392  04B9  1C40               	btfss	??_main+4,0
  2393  04BA  1383               	bcf	3,7
  2394  04BB  0800               	movf	0,w
  2395  04BC  00C1               	movwf	??_main+5
  2396  04BD  0A84               	incf	4,f
  2397  04BE  0800               	movf	0,w
  2398  04BF  00C2               	movwf	??_main+6
  2399  04C0  0841               	movf	??_main+5,w
  2400  04C1  0442               	iorwf	??_main+6,w
  2401  04C2  1D03               	btfss	3,2
  2402  04C3  2CC5               	goto	u3361
  2403  04C4  2CC6               	goto	u3360
  2404  04C5                     u3361:	
  2405  04C5  2CCB               	goto	l239
  2406  04C6                     u3360:	
  2407  04C6                     l3358:	
  2408  04C6  0858               	movf	_n_semafori,w
  2409  04C7  1D03               	btfss	3,2
  2410  04C8  2CCA               	goto	u3371
  2411  04C9  2CCB               	goto	u3370
  2412  04CA                     u3371:	
  2413  04CA  2C9C               	goto	l3354
  2414  04CB                     u3370:	
  2415  04CB                     l239:	
  2416                           ;main.c: 298:         }
  2417                           
  2418                           
  2419                           ;main.c: 302:         if (secondPassed.Bit && cycled.Bit)
  2420  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  2421  04CC  1C62               	btfss	_secondPassed,0
  2422  04CD  2CCF               	goto	u3381
  2423  04CE  2CD0               	goto	u3380
  2424  04CF                     u3381:	
  2425  04CF  2D95               	goto	l3380
  2426  04D0                     u3380:	
  2427  04D0                     l3360:	
  2428  04D0  1C61               	btfss	_cycled,0
  2429  04D1  2CD3               	goto	u3391
  2430  04D2  2CD4               	goto	u3390
  2431  04D3                     u3391:	
  2432  04D3  2D95               	goto	l3380
  2433  04D4                     u3390:	
  2434  04D4                     l3362:	
  2435                           
  2436                           ;main.c: 303:         {;main.c: 304:             time++;
  2437  04D4  3001               	movlw	1
  2438  04D5  1283               	bcf	3,5	;RP0=0, select bank2
  2439  04D6  1703               	bsf	3,6	;RP1=1, select bank2
  2440  04D7  07E1               	addwf	main@time^(0+256),f
  2441  04D8  1803               	skipnc
  2442  04D9  0AE2               	incf	(main@time+1)^(0+256),f
  2443  04DA  3000               	movlw	0
  2444  04DB  07E2               	addwf	(main@time+1)^(0+256),f
  2445  04DC                     l3364:	
  2446                           
  2447                           ;main.c: 305:             endCiclo.Bit = 0;
  2448  04DC  105D               	bcf	main@endCiclo^(0+256),0
  2449  04DD                     l3366:	
  2450                           
  2451                           ;main.c: 307:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  2452  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  2453  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  2454  04DF  0858               	movf	_n_semafori,w
  2455  04E0  00BC               	movwf	??_main
  2456  04E1  073C               	addwf	??_main,w
  2457  04E2  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2458  04E3  0084               	movwf	4
  2459  04E4  1383               	bcf	3,7	;select IRP bank1
  2460  04E5  0800               	movf	0,w
  2461  04E6  00BD               	movwf	??_main+1
  2462  04E7  0A84               	incf	4,f
  2463  04E8  0800               	movf	0,w
  2464  04E9  00BE               	movwf	??_main+2
  2465  04EA  1283               	bcf	3,5	;RP0=0, select bank2
  2466  04EB  1703               	bsf	3,6	;RP1=1, select bank2
  2467  04EC  085F               	movf	main@lux_select^(0+256),w
  2468  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  2469  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  2470  04EF  00BF               	movwf	??_main+3
  2471  04F0  073F               	addwf	??_main+3,w
  2472  04F1  3E06               	addlw	6
  2473  04F2  073D               	addwf	??_main+1,w
  2474  04F3  00C0               	movwf	??_main+4
  2475  04F4  083E               	movf	??_main+2,w
  2476  04F5  1803               	skipnc
  2477  04F6  3E01               	addlw	1
  2478  04F7  00C1               	movwf	??_main+5
  2479  04F8  0840               	movf	??_main+4,w
  2480  04F9  0084               	movwf	4
  2481  04FA  1783               	bsf	3,7
  2482  04FB  1C41               	btfss	??_main+5,0
  2483  04FC  1383               	bcf	3,7
  2484  04FD  0800               	movf	0,w
  2485  04FE  00C2               	movwf	??_main+6
  2486  04FF  0A84               	incf	4,f
  2487  0500  0800               	movf	0,w
  2488  0501  00C3               	movwf	??_main+7
  2489  0502  1283               	bcf	3,5	;RP0=0, select bank2
  2490  0503  1703               	bsf	3,6	;RP1=1, select bank2
  2491  0504  0861               	movf	main@time^(0+256),w
  2492  0505  1283               	bcf	3,5	;RP0=0, select bank0
  2493  0506  1303               	bcf	3,6	;RP1=0, select bank0
  2494  0507  0242               	subwf	??_main+6,w
  2495  0508  00C4               	movwf	??_main+8
  2496  0509  1283               	bcf	3,5	;RP0=0, select bank2
  2497  050A  1703               	bsf	3,6	;RP1=1, select bank2
  2498  050B  0862               	movf	(main@time+1)^(0+256),w
  2499  050C  1C03               	skipc
  2500  050D  0A62               	incf	(main@time+1)^(0+256),w
  2501  050E  1283               	bcf	3,5	;RP0=0, select bank0
  2502  050F  1303               	bcf	3,6	;RP1=0, select bank0
  2503  0510  0243               	subwf	??_main+7,w
  2504  0511  00C5               	movwf	??_main+9
  2505  0512  1FC5               	btfss	??_main+9,7
  2506  0513  2D15               	goto	u3401
  2507  0514  2D16               	goto	u3400
  2508  0515                     u3401:	
  2509  0515  2D1D               	goto	l3372
  2510  0516                     u3400:	
  2511  0516                     l3368:	
  2512                           
  2513                           ;main.c: 308:             {;main.c: 309:                 endCiclo.Bit = 1;
  2514  0516  1283               	bcf	3,5	;RP0=0, select bank2
  2515  0517  1703               	bsf	3,6	;RP1=1, select bank2
  2516  0518  145D               	bsf	main@endCiclo^(0+256),0
  2517  0519                     l3370:	
  2518                           
  2519                           ;main.c: 310:                 time = 1;
  2520  0519  3001               	movlw	1
  2521  051A  00E1               	movwf	main@time^(0+256)
  2522  051B  3000               	movlw	0
  2523  051C  00E2               	movwf	(main@time^(0+256)+1)
  2524  051D                     l3372:	
  2525                           
  2526                           ;main.c: 313:             if (lux_select == 2 && time >= (*Semafori[n_semafori]).times[2
      +                          ])
  2527  051D  3002               	movlw	2
  2528  051E  1283               	bcf	3,5	;RP0=0, select bank2
  2529  051F  1703               	bsf	3,6	;RP1=1, select bank2
  2530  0520  065F               	xorwf	main@lux_select^(0+256),w
  2531  0521  1D03               	btfss	3,2
  2532  0522  2D24               	goto	u3411
  2533  0523  2D25               	goto	u3410
  2534  0524                     u3411:	
  2535  0524  2D5B               	goto	l3378
  2536  0525                     u3410:	
  2537  0525                     l3374:	
  2538  0525  1283               	bcf	3,5	;RP0=0, select bank0
  2539  0526  1303               	bcf	3,6	;RP1=0, select bank0
  2540  0527  0858               	movf	_n_semafori,w
  2541  0528  00BC               	movwf	??_main
  2542  0529  073C               	addwf	??_main,w
  2543  052A  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2544  052B  0084               	movwf	4
  2545  052C  1383               	bcf	3,7	;select IRP bank1
  2546  052D  0800               	movf	0,w
  2547  052E  00BD               	movwf	??_main+1
  2548  052F  0A84               	incf	4,f
  2549  0530  0800               	movf	0,w
  2550  0531  00BE               	movwf	??_main+2
  2551  0532  083D               	movf	??_main+1,w
  2552  0533  3E0A               	addlw	10
  2553  0534  00BF               	movwf	??_main+3
  2554  0535  083E               	movf	??_main+2,w
  2555  0536  1803               	skipnc
  2556  0537  3E01               	addlw	1
  2557  0538  3E00               	addlw	0
  2558  0539  00C0               	movwf	??_main+4
  2559  053A  083F               	movf	??_main+3,w
  2560  053B  0084               	movwf	4
  2561  053C  1783               	bsf	3,7
  2562  053D  1C40               	btfss	??_main+4,0
  2563  053E  1383               	bcf	3,7
  2564  053F  0800               	movf	0,w
  2565  0540  00C1               	movwf	??_main+5
  2566  0541  0A84               	incf	4,f
  2567  0542  0800               	movf	0,w
  2568  0543  00C2               	movwf	??_main+6
  2569  0544  1283               	bcf	3,5	;RP0=0, select bank2
  2570  0545  1703               	bsf	3,6	;RP1=1, select bank2
  2571  0546  0862               	movf	(main@time+1)^(0+256),w
  2572  0547  3A80               	xorlw	128
  2573  0548  1283               	bcf	3,5	;RP0=0, select bank0
  2574  0549  1303               	bcf	3,6	;RP1=0, select bank0
  2575  054A  00C3               	movwf	??_main+7
  2576  054B  0842               	movf	??_main+6,w
  2577  054C  3A80               	xorlw	128
  2578  054D  0243               	subwf	??_main+7,w
  2579  054E  1D03               	skipz
  2580  054F  2D54               	goto	u3425
  2581  0550  0841               	movf	??_main+5,w
  2582  0551  1283               	bcf	3,5	;RP0=0, select bank2
  2583  0552  1703               	bsf	3,6	;RP1=1, select bank2
  2584  0553  0261               	subwf	main@time^(0+256),w
  2585  0554                     u3425:	
  2586  0554  1C03               	skipc
  2587  0555  2D57               	goto	u3421
  2588  0556  2D58               	goto	u3420
  2589  0557                     u3421:	
  2590  0557  2D5B               	goto	l3378
  2591  0558                     u3420:	
  2592  0558                     l3376:	
  2593                           
  2594                           ;main.c: 314:             {;main.c: 315:                 endCiclo.Bit = 1;
  2595  0558  1283               	bcf	3,5	;RP0=0, select bank2
  2596  0559  1703               	bsf	3,6	;RP1=1, select bank2
  2597  055A  145D               	bsf	main@endCiclo^(0+256),0
  2598  055B                     l3378:	
  2599                           
  2600                           ;main.c: 318:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  2601  055B  1283               	bcf	3,5	;RP0=0, select bank0
  2602  055C  1303               	bcf	3,6	;RP1=0, select bank0
  2603  055D  0858               	movf	_n_semafori,w
  2604  055E  00BC               	movwf	??_main
  2605  055F  073C               	addwf	??_main,w
  2606  0560  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2607  0561  0084               	movwf	4
  2608  0562  1383               	bcf	3,7	;select IRP bank1
  2609  0563  0800               	movf	0,w
  2610  0564  00BD               	movwf	??_main+1
  2611  0565  0A84               	incf	4,f
  2612  0566  0800               	movf	0,w
  2613  0567  00BE               	movwf	??_main+2
  2614  0568  1283               	bcf	3,5	;RP0=0, select bank2
  2615  0569  1703               	bsf	3,6	;RP1=1, select bank2
  2616  056A  085F               	movf	main@lux_select^(0+256),w
  2617  056B  1283               	bcf	3,5	;RP0=0, select bank0
  2618  056C  1303               	bcf	3,6	;RP1=0, select bank0
  2619  056D  00BF               	movwf	??_main+3
  2620  056E  073F               	addwf	??_main+3,w
  2621  056F  3E06               	addlw	6
  2622  0570  073D               	addwf	??_main+1,w
  2623  0571  00C0               	movwf	??_main+4
  2624  0572  083E               	movf	??_main+2,w
  2625  0573  1803               	skipnc
  2626  0574  3E01               	addlw	1
  2627  0575  00C1               	movwf	??_main+5
  2628  0576  0840               	movf	??_main+4,w
  2629  0577  0084               	movwf	4
  2630  0578  1783               	bsf	3,7
  2631  0579  1C41               	btfss	??_main+5,0
  2632  057A  1383               	bcf	3,7
  2633  057B  0800               	movf	0,w
  2634  057C  00C2               	movwf	??_main+6
  2635  057D  0A84               	incf	4,f
  2636  057E  0800               	movf	0,w
  2637  057F  00C3               	movwf	??_main+7
  2638  0580  1283               	bcf	3,5	;RP0=0, select bank2
  2639  0581  1703               	bsf	3,6	;RP1=1, select bank2
  2640  0582  0861               	movf	main@time^(0+256),w
  2641  0583  1283               	bcf	3,5	;RP0=0, select bank0
  2642  0584  1303               	bcf	3,6	;RP1=0, select bank0
  2643  0585  0242               	subwf	??_main+6,w
  2644  0586  00B0               	movwf	GetDigits@Time
  2645  0587  1283               	bcf	3,5	;RP0=0, select bank2
  2646  0588  1703               	bsf	3,6	;RP1=1, select bank2
  2647  0589  0862               	movf	(main@time+1)^(0+256),w
  2648  058A  1C03               	skipc
  2649  058B  0A62               	incf	(main@time+1)^(0+256),w
  2650  058C  1283               	bcf	3,5	;RP0=0, select bank0
  2651  058D  1303               	bcf	3,6	;RP1=0, select bank0
  2652  058E  0243               	subwf	??_main+7,w
  2653  058F  00B1               	movwf	GetDigits@Time+1
  2654  0590  120A  158A  25A6  120A  118A  	fcall	_GetDigits
  2655  0595                     l3380:	
  2656                           
  2657                           ;main.c: 322:         if (disp != old_disp)
  2658  0595  1283               	bcf	3,5	;RP0=0, select bank0
  2659  0596  1303               	bcf	3,6	;RP1=0, select bank0
  2660  0597  085C               	movf	_disp,w
  2661  0598  065D               	xorwf	_old_disp,w
  2662  0599  1903               	skipnz
  2663  059A  2D9C               	goto	u3431
  2664  059B  2D9D               	goto	u3430
  2665  059C                     u3431:	
  2666  059C  2E19               	goto	l3402
  2667  059D                     u3430:	
  2668  059D                     l3382:	
  2669                           
  2670                           ;main.c: 323:         {;main.c: 324:             old_disp = disp;
  2671  059D  085C               	movf	_disp,w
  2672  059E  00BC               	movwf	??_main
  2673  059F  083C               	movf	??_main,w
  2674  05A0  00DD               	movwf	_old_disp
  2675                           
  2676                           ;main.c: 325:             switch (disp)
  2677  05A1  2E03               	goto	l3400
  2678  05A2                     l3384:	
  2679                           
  2680                           ;main.c: 328:                 if (centinaia > 0)
  2681  05A2  085E               	movf	_centinaia,w
  2682  05A3  1903               	btfsc	3,2
  2683  05A4  2DA6               	goto	u3441
  2684  05A5  2DA7               	goto	u3440
  2685  05A6                     u3441:	
  2686  05A6  2E19               	goto	l3402
  2687  05A7                     u3440:	
  2688  05A7                     l3386:	
  2689                           
  2690                           ;main.c: 329:                 {;main.c: 330:                     SetDisplay(1, 0, 0, dis
      +                          play[centinaia]);
  2691  05A7  01A0               	clrf	SetDisplay@d2
  2692  05A8  01A1               	clrf	SetDisplay@d3
  2693  05A9  085E               	movf	_centinaia,w
  2694  05AA  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2695  05AB  0084               	movwf	4
  2696  05AC  120A  158A  2000  120A  118A  	fcall	stringdir
  2697  05B1  00BC               	movwf	??_main
  2698  05B2  083C               	movf	??_main,w
  2699  05B3  00A2               	movwf	SetDisplay@value
  2700  05B4  3001               	movlw	1
  2701  05B5  120A  158A  22DE  120A  118A  	fcall	_SetDisplay
  2702  05BA  2E19               	goto	l3402
  2703  05BB                     l3388:	
  2704                           
  2705                           ;main.c: 334:                 if (decine > 0 || centinaia > 0)
  2706  05BB  085F               	movf	_decine,w
  2707  05BC  1D03               	btfss	3,2
  2708  05BD  2DBF               	goto	u3451
  2709  05BE  2DC0               	goto	u3450
  2710  05BF                     u3451:	
  2711  05BF  2DC5               	goto	l3392
  2712  05C0                     u3450:	
  2713  05C0                     l3390:	
  2714  05C0  085E               	movf	_centinaia,w
  2715  05C1  1903               	btfsc	3,2
  2716  05C2  2DC4               	goto	u3461
  2717  05C3  2DC5               	goto	u3460
  2718  05C4                     u3461:	
  2719  05C4  2E19               	goto	l3402
  2720  05C5                     u3460:	
  2721  05C5                     l3392:	
  2722                           
  2723                           ;main.c: 335:                 {;main.c: 336:                     SetDisplay(0, 1, 0, dis
      +                          play[decine]);
  2724  05C5  01A0               	clrf	SetDisplay@d2
  2725  05C6  0AA0               	incf	SetDisplay@d2,f
  2726  05C7  01A1               	clrf	SetDisplay@d3
  2727  05C8  085F               	movf	_decine,w
  2728  05C9  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2729  05CA  0084               	movwf	4
  2730  05CB  120A  158A  2000  120A  118A  	fcall	stringdir
  2731  05D0  00BC               	movwf	??_main
  2732  05D1  083C               	movf	??_main,w
  2733  05D2  00A2               	movwf	SetDisplay@value
  2734  05D3  3000               	movlw	0
  2735  05D4  120A  158A  22DE  120A  118A  	fcall	_SetDisplay
  2736  05D9  2E19               	goto	l3402
  2737  05DA                     l3394:	
  2738                           
  2739                           ;main.c: 340:                 SetDisplay(0, 0, 1, display[unita]);
  2740  05DA  01A0               	clrf	SetDisplay@d2
  2741  05DB  01A1               	clrf	SetDisplay@d3
  2742  05DC  0AA1               	incf	SetDisplay@d3,f
  2743  05DD  0860               	movf	_unita,w
  2744  05DE  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2745  05DF  0084               	movwf	4
  2746  05E0  120A  158A  2000  120A  118A  	fcall	stringdir
  2747  05E5  00BC               	movwf	??_main
  2748  05E6  083C               	movf	??_main,w
  2749  05E7  00A2               	movwf	SetDisplay@value
  2750  05E8  3000               	movlw	0
  2751  05E9  120A  158A  22DE  120A  118A  	fcall	_SetDisplay
  2752                           
  2753                           ;main.c: 341:                 break;
  2754  05EE  2E19               	goto	l3402
  2755  05EF                     l3396:	
  2756                           
  2757                           ;main.c: 343:                 SetDisplay(1, 0, 0, display[n_semafori]);
  2758  05EF  01A0               	clrf	SetDisplay@d2
  2759  05F0  01A1               	clrf	SetDisplay@d3
  2760  05F1  0858               	movf	_n_semafori,w
  2761  05F2  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2762  05F3  0084               	movwf	4
  2763  05F4  120A  158A  2000  120A  118A  	fcall	stringdir
  2764  05F9  00BC               	movwf	??_main
  2765  05FA  083C               	movf	??_main,w
  2766  05FB  00A2               	movwf	SetDisplay@value
  2767  05FC  3001               	movlw	1
  2768  05FD  120A  158A  22DE  120A  118A  	fcall	_SetDisplay
  2769                           
  2770                           ;main.c: 344:                 break;
  2771  0602  2E19               	goto	l3402
  2772  0603                     l3400:	
  2773  0603  085C               	movf	_disp,w
  2774  0604  00BC               	movwf	??_main
  2775  0605  01BD               	clrf	??_main+1
  2776                           
  2777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2778                           ; Switch size 1, requested type "simple"
  2779                           ; Number of cases is 1, Range of values is 0 to 0
  2780                           ; switch strategies available:
  2781                           ; Name         Instructions Cycles
  2782                           ; simple_byte            4     3 (average)
  2783                           ; direct_byte           11     8 (fixed)
  2784                           ; jumptable            260     6 (fixed)
  2785                           ;	Chosen strategy is simple_byte
  2786  0606  083D               	movf	??_main+1,w
  2787  0607  3A00               	xorlw	0	; case 0
  2788  0608  1903               	skipnz
  2789  0609  2E0B               	goto	l3554
  2790  060A  2E19               	goto	l3402
  2791  060B                     l3554:	
  2792                           
  2793                           ; Switch size 1, requested type "simple"
  2794                           ; Number of cases is 4, Range of values is 0 to 3
  2795                           ; switch strategies available:
  2796                           ; Name         Instructions Cycles
  2797                           ; simple_byte           13     7 (average)
  2798                           ; direct_byte           20     8 (fixed)
  2799                           ; jumptable            260     6 (fixed)
  2800                           ;	Chosen strategy is simple_byte
  2801  060B  083C               	movf	??_main,w
  2802  060C  3A00               	xorlw	0	; case 0
  2803  060D  1903               	skipnz
  2804  060E  2DA2               	goto	l3384
  2805  060F  3A01               	xorlw	1	; case 1
  2806  0610  1903               	skipnz
  2807  0611  2DBB               	goto	l3388
  2808  0612  3A03               	xorlw	3	; case 2
  2809  0613  1903               	skipnz
  2810  0614  2DDA               	goto	l3394
  2811  0615  3A01               	xorlw	1	; case 3
  2812  0616  1903               	skipnz
  2813  0617  2DEF               	goto	l3396
  2814  0618  2E19               	goto	l3402
  2815  0619                     l3402:	
  2816                           
  2817                           ;main.c: 347:         disp = (disp + 1) % 3;
  2818  0619  3003               	movlw	3
  2819  061A  1283               	bcf	3,5	;RP0=0, select bank0
  2820  061B  1303               	bcf	3,6	;RP1=0, select bank0
  2821  061C  00A0               	movwf	___awmod@divisor
  2822  061D  3000               	movlw	0
  2823  061E  00A1               	movwf	___awmod@divisor+1
  2824  061F  085C               	movf	_disp,w
  2825  0620  3E01               	addlw	1
  2826  0621  00A2               	movwf	___awmod@dividend
  2827  0622  3000               	movlw	0
  2828  0623  1803               	skipnc
  2829  0624  3001               	movlw	1
  2830  0625  00A3               	movwf	___awmod@dividend+1
  2831  0626  120A  158A  24E2  120A  118A  	fcall	___awmod
  2832  062B  1283               	bcf	3,5	;RP0=0, select bank0
  2833  062C  1303               	bcf	3,6	;RP1=0, select bank0
  2834  062D  0820               	movf	?___awmod,w
  2835  062E  00BC               	movwf	??_main
  2836  062F  083C               	movf	??_main,w
  2837  0630  00DC               	movwf	_disp
  2838  0631                     l3404:	
  2839                           
  2840                           ;main.c: 353:         if (secondPassed.Bit && cycled.Bit)
  2841  0631  1C62               	btfss	_secondPassed,0
  2842  0632  2E34               	goto	u3471
  2843  0633  2E35               	goto	u3470
  2844  0634                     u3471:	
  2845  0634  2E3B               	goto	l263
  2846  0635                     u3470:	
  2847  0635                     l3406:	
  2848  0635  1C61               	btfss	_cycled,0
  2849  0636  2E38               	goto	u3481
  2850  0637  2E39               	goto	u3480
  2851  0638                     u3481:	
  2852  0638  2E3B               	goto	l263
  2853  0639                     u3480:	
  2854  0639                     l3408:	
  2855                           
  2856                           ;main.c: 354:         {;main.c: 355:             secondPassed.Bit = 0;
  2857  0639  1062               	bcf	_secondPassed,0
  2858                           
  2859                           ;main.c: 356:             cycled.Bit = 0;
  2860  063A  1061               	bcf	_cycled,0
  2861  063B                     l263:	
  2862                           ;main.c: 357:         }
  2863                           
  2864                           
  2865                           ;main.c: 359:         if (secondPassed.Bit && !cycled.Bit)
  2866  063B  1C62               	btfss	_secondPassed,0
  2867  063C  2E3E               	goto	u3491
  2868  063D  2E3F               	goto	u3490
  2869  063E                     u3491:	
  2870  063E  289C               	goto	l3214
  2871  063F                     u3490:	
  2872  063F                     l3410:	
  2873  063F  1861               	btfsc	_cycled,0
  2874  0640  2E42               	goto	u3501
  2875  0641  2E43               	goto	u3500
  2876  0642                     u3501:	
  2877  0642  289C               	goto	l3214
  2878  0643                     u3500:	
  2879  0643                     l3412:	
  2880                           
  2881                           ;main.c: 360:         {;main.c: 361:             cycled.Bit = 1;
  2882  0643  1461               	bsf	_cycled,0
  2883  0644  289C               	goto	l3214
  2884  0645  120A  118A  280E   	ljmp	start
  2885  0648                     __end_of_main:	
  2886                           
  2887                           	psect	text1
  2888  0BA8                     __ptext1:	
  2889 ;; *************** function _sendByte *****************
  2890 ;; Defined at:
  2891 ;;		line 425 in file "main.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  byte0           1    wreg     unsigned char 
  2894 ;;  byte1           1   20[BANK0 ] unsigned char 
  2895 ;;  valore          1   21[BANK0 ] unsigned char 
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;  byte0           1   25[BANK0 ] unsigned char 
  2898 ;;  i               1   27[BANK0 ] unsigned char 
  2899 ;;  txByte          1   26[BANK0 ] PTR unsigned char 
  2900 ;;		 -> BuildByte@txByte(5), 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2910 ;;      Params:         0       2       0       0       0
  2911 ;;      Locals:         0       3       0       0       0
  2912 ;;      Temps:          0       3       0       0       0
  2913 ;;      Totals:         0       8       0       0       0
  2914 ;;Total ram usage:        8 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    3
  2917 ;; This function calls:
  2918 ;;		_BuildByte
  2919 ;;		_UART_TxChar
  2920 ;; This function is called by:
  2921 ;;		_main
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           
  2926                           ;psect for function _sendByte
  2927  0BA8                     _sendByte:	
  2928                           
  2929                           ;incstack = 0
  2930                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2931                           ;sendByte@byte0 stored from wreg
  2932  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  2933  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  2934  0BAA  00B9               	movwf	sendByte@byte0
  2935  0BAB                     l3098:	
  2936                           
  2937                           ;main.c: 425: void sendByte(char byte0, char byte1, char valore);main.c: 426: {;main.c: 
      +                          427:     char *txByte;;main.c: 428:     txByte = BuildByte(byte0, byte1, valore);
  2938  0BAB  0834               	movf	sendByte@byte1,w
  2939  0BAC  00B6               	movwf	??_sendByte
  2940  0BAD  0836               	movf	??_sendByte,w
  2941  0BAE  00A0               	movwf	BuildByte@byte1
  2942  0BAF  0835               	movf	sendByte@valore,w
  2943  0BB0  00B7               	movwf	??_sendByte+1
  2944  0BB1  0837               	movf	??_sendByte+1,w
  2945  0BB2  00A1               	movwf	BuildByte@valore
  2946  0BB3  0839               	movf	sendByte@byte0,w
  2947  0BB4  120A  158A  2738  120A  158A  	fcall	_BuildByte
  2948  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
  2949  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
  2950  0BBB  00B8               	movwf	??_sendByte+2
  2951  0BBC  0838               	movf	??_sendByte+2,w
  2952  0BBD  00BA               	movwf	sendByte@txByte
  2953  0BBE                     l3100:	
  2954                           
  2955                           ;main.c: 430:     for (unsigned char i = 0; i < 5; i++)
  2956  0BBE  01BB               	clrf	sendByte@i
  2957  0BBF                     l3106:	
  2958                           
  2959                           ;main.c: 431:     {;main.c: 432:         UART_TxChar(*(txByte++));
  2960  0BBF  083A               	movf	sendByte@txByte,w
  2961  0BC0  0084               	movwf	4
  2962  0BC1  1383               	bcf	3,7	;select IRP bank0
  2963  0BC2  0800               	movf	0,w
  2964  0BC3  120A  118A  27F4  120A  158A  	fcall	_UART_TxChar
  2965  0BC8                     l3108:	
  2966  0BC8  3001               	movlw	1
  2967  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  2968  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  2969  0BCB  00B6               	movwf	??_sendByte
  2970  0BCC  0836               	movf	??_sendByte,w
  2971  0BCD  07BA               	addwf	sendByte@txByte,f
  2972  0BCE                     l3110:	
  2973                           
  2974                           ;main.c: 433:     }
  2975  0BCE  3001               	movlw	1
  2976  0BCF  00B6               	movwf	??_sendByte
  2977  0BD0  0836               	movf	??_sendByte,w
  2978  0BD1  07BB               	addwf	sendByte@i,f
  2979  0BD2                     l3112:	
  2980  0BD2  3005               	movlw	5
  2981  0BD3  023B               	subwf	sendByte@i,w
  2982  0BD4  1C03               	skipc
  2983  0BD5  2BD7               	goto	u3141
  2984  0BD6  2BD8               	goto	u3140
  2985  0BD7                     u3141:	
  2986  0BD7  2BBF               	goto	l3106
  2987  0BD8                     u3140:	
  2988  0BD8                     l302:	
  2989  0BD8  0008               	return
  2990  0BD9                     __end_of_sendByte:	
  2991                           
  2992                           	psect	text2
  2993  07F4                     __ptext2:	
  2994 ;; *************** function _UART_TxChar *****************
  2995 ;; Defined at:
  2996 ;;		line 400 in file "main.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  ch              1    wreg     unsigned char 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  ch              1    0[BANK0 ] unsigned char 
  3001 ;; Return value:  Size  Location     Type
  3002 ;;                  1    wreg      void 
  3003 ;; Registers used:
  3004 ;;		wreg
  3005 ;; Tracked objects:
  3006 ;;		On entry : 0/0
  3007 ;;		On exit  : 0/0
  3008 ;;		Unchanged: 0/0
  3009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3010 ;;      Params:         0       0       0       0       0
  3011 ;;      Locals:         0       1       0       0       0
  3012 ;;      Temps:          0       0       0       0       0
  3013 ;;      Totals:         0       1       0       0       0
  3014 ;;Total ram usage:        1 bytes
  3015 ;; Hardware stack levels used:    1
  3016 ;; Hardware stack levels required when called:    2
  3017 ;; This function calls:
  3018 ;;		Nothing
  3019 ;; This function is called by:
  3020 ;;		_sendByte
  3021 ;;		_UART_Write_Text
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           
  3026                           ;psect for function _UART_TxChar
  3027  07F4                     _UART_TxChar:	
  3028                           
  3029                           ;incstack = 0
  3030                           ; Regs used in _UART_TxChar: [wreg]
  3031                           ;UART_TxChar@ch stored from wreg
  3032  07F4  1283               	bcf	3,5	;RP0=0, select bank0
  3033  07F5  1303               	bcf	3,6	;RP1=0, select bank0
  3034  07F6  00A0               	movwf	UART_TxChar@ch
  3035  07F7                     l2850:	
  3036  07F7                     l282:	
  3037                           ;main.c: 403:         ;
  3038                           
  3039                           
  3040                           ;main.c: 402:     while (!TXIF)
  3041  07F7  1E0C               	btfss	12,4	;volatile
  3042  07F8  2FFA               	goto	u2681
  3043  07F9  2FFB               	goto	u2680
  3044  07FA                     u2681:	
  3045  07FA  2FF7               	goto	l282
  3046  07FB                     u2680:	
  3047  07FB                     l284:	
  3048                           
  3049                           ;main.c: 404:     TXIF = 0;
  3050  07FB  120C               	bcf	12,4	;volatile
  3051  07FC                     l2852:	
  3052                           
  3053                           ;main.c: 405:     TXREG = ch;
  3054  07FC  0820               	movf	UART_TxChar@ch,w
  3055  07FD  0099               	movwf	25	;volatile
  3056  07FE                     l285:	
  3057  07FE  0008               	return
  3058  07FF                     __end_of_UART_TxChar:	
  3059                           
  3060                           	psect	text3
  3061  0F38                     __ptext3:	
  3062 ;; *************** function _BuildByte *****************
  3063 ;; Defined at:
  3064 ;;		line 2 in file "./CustomLib/Serial.h"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;  byte0           1    wreg     unsigned char 
  3067 ;;  byte1           1    0[BANK0 ] unsigned char 
  3068 ;;  valore          1    1[BANK0 ] unsigned char 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  byte0           1    4[BANK0 ] unsigned char 
  3071 ;;  y               2   14[BANK0 ] int 
  3072 ;;  y               2   12[BANK0 ] int 
  3073 ;;  i               2   18[BANK0 ] int 
  3074 ;;  i               2   16[BANK0 ] int 
  3075 ;;  txByte          5    5[BANK0 ] unsigned char [5]
  3076 ;;  sommaColumn     1   11[BANK0 ] unsigned char 
  3077 ;;  sommaRow        1   10[BANK0 ] unsigned char 
  3078 ;; Return value:  Size  Location     Type
  3079 ;;                  1    wreg      PTR unsigned char 
  3080 ;; Registers used:
  3081 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3082 ;; Tracked objects:
  3083 ;;		On entry : 0/0
  3084 ;;		On exit  : 0/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3087 ;;      Params:         0       2       0       0       0
  3088 ;;      Locals:         0      16       0       0       0
  3089 ;;      Temps:          0       2       0       0       0
  3090 ;;      Totals:         0      20       0       0       0
  3091 ;;Total ram usage:       20 bytes
  3092 ;; Hardware stack levels used:    1
  3093 ;; Hardware stack levels required when called:    2
  3094 ;; This function calls:
  3095 ;;		Nothing
  3096 ;; This function is called by:
  3097 ;;		_sendByte
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           
  3102                           ;psect for function _BuildByte
  3103  0F38                     _BuildByte:	
  3104                           
  3105                           ;incstack = 0
  3106                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  3107                           ;BuildByte@byte0 stored from wreg
  3108  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  3109  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  3110  0F3A  00A4               	movwf	BuildByte@byte0
  3111  0F3B                     l2782:	
  3112                           
  3113                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  3114  0F3B  0824               	movf	BuildByte@byte0,w
  3115  0F3C  397F               	andlw	127
  3116  0F3D  00A2               	movwf	??_BuildByte
  3117  0F3E  0822               	movf	??_BuildByte,w
  3118  0F3F  00A5               	movwf	BuildByte@txByte
  3119                           
  3120                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  3121  0F40  0820               	movf	BuildByte@byte1,w
  3122  0F41  397F               	andlw	127
  3123  0F42  00A2               	movwf	??_BuildByte
  3124  0F43  0822               	movf	??_BuildByte,w
  3125  0F44  00A6               	movwf	BuildByte@txByte+1
  3126                           
  3127                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  3128  0F45  0821               	movf	BuildByte@valore,w
  3129  0F46  397F               	andlw	127
  3130  0F47  00A2               	movwf	??_BuildByte
  3131  0F48  0822               	movf	??_BuildByte,w
  3132  0F49  00A7               	movwf	BuildByte@txByte+2
  3133  0F4A                     l2784:	
  3134                           
  3135                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  3136  0F4A  0821               	movf	BuildByte@valore,w
  3137  0F4B  00A2               	movwf	??_BuildByte
  3138  0F4C  3007               	movlw	7
  3139  0F4D                     u2585:	
  3140  0F4D  1003               	clrc
  3141  0F4E  0CA2               	rrf	??_BuildByte,f
  3142  0F4F  3EFF               	addlw	-1
  3143  0F50  1D03               	skipz
  3144  0F51  2F4D               	goto	u2585
  3145  0F52  0822               	movf	??_BuildByte,w
  3146  0F53  397F               	andlw	127
  3147  0F54  00A3               	movwf	??_BuildByte+1
  3148  0F55  0823               	movf	??_BuildByte+1,w
  3149  0F56  00A8               	movwf	BuildByte@txByte+3
  3150  0F57                     l2786:	
  3151                           
  3152                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  3153  0F57  01AA               	clrf	BuildByte@sommaRow
  3154  0F58                     l2788:	
  3155                           
  3156                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  3157  0F58  01AB               	clrf	BuildByte@sommaColumn
  3158  0F59                     l2790:	
  3159                           
  3160                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  3161  0F59  01B0               	clrf	BuildByte@i
  3162  0F5A  01B1               	clrf	BuildByte@i+1
  3163  0F5B                     l2796:	
  3164                           
  3165                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  3166  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  3167  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  3168  0F5D  01AC               	clrf	BuildByte@y
  3169  0F5E  01AD               	clrf	BuildByte@y+1
  3170  0F5F                     l2802:	
  3171                           
  3172                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  3173  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  3174  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  3175  0F61  0830               	movf	BuildByte@i,w
  3176  0F62  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3177  0F63  0084               	movwf	4
  3178  0F64  1383               	bcf	3,7	;select IRP bank0
  3179  0F65  0800               	movf	0,w
  3180  0F66  00A2               	movwf	??_BuildByte
  3181  0F67  0A2C               	incf	BuildByte@y,w
  3182  0F68  2F6B               	goto	u2594
  3183  0F69                     u2595:	
  3184  0F69  1003               	clrc
  3185  0F6A  0CA2               	rrf	??_BuildByte,f
  3186  0F6B                     u2594:	
  3187  0F6B  3EFF               	addlw	-1
  3188  0F6C  1D03               	skipz
  3189  0F6D  2F69               	goto	u2595
  3190  0F6E  0822               	movf	??_BuildByte,w
  3191  0F6F  3901               	andlw	1
  3192  0F70  00A3               	movwf	??_BuildByte+1
  3193  0F71  0823               	movf	??_BuildByte+1,w
  3194  0F72  07AA               	addwf	BuildByte@sommaRow,f
  3195  0F73                     l2804:	
  3196                           
  3197                           ;./CustomLib/Serial.h: 18:         }
  3198  0F73  3001               	movlw	1
  3199  0F74  07AC               	addwf	BuildByte@y,f
  3200  0F75  1803               	skipnc
  3201  0F76  0AAD               	incf	BuildByte@y+1,f
  3202  0F77  3000               	movlw	0
  3203  0F78  07AD               	addwf	BuildByte@y+1,f
  3204  0F79                     l2806:	
  3205  0F79  082D               	movf	BuildByte@y+1,w
  3206  0F7A  3A80               	xorlw	128
  3207  0F7B  00FF               	movwf	btemp+1
  3208  0F7C  3080               	movlw	128
  3209  0F7D  027F               	subwf	btemp+1,w
  3210  0F7E  1D03               	skipz
  3211  0F7F  2F82               	goto	u2605
  3212  0F80  3008               	movlw	8
  3213  0F81  022C               	subwf	BuildByte@y,w
  3214  0F82                     u2605:	
  3215  0F82  1C03               	skipc
  3216  0F83  2F85               	goto	u2601
  3217  0F84  2F86               	goto	u2600
  3218  0F85                     u2601:	
  3219  0F85  2F5F               	goto	l2802
  3220  0F86                     u2600:	
  3221  0F86                     l119:	
  3222                           
  3223                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  3224  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  3225  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  3226  0F88  1C2A               	btfss	BuildByte@sommaRow,0
  3227  0F89  2F8B               	goto	u2611
  3228  0F8A  2F8C               	goto	u2610
  3229  0F8B                     u2611:	
  3230  0F8B  2F94               	goto	l2810
  3231  0F8C                     u2610:	
  3232  0F8C                     l2808:	
  3233                           
  3234                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  3235  0F8C  3080               	movlw	128
  3236  0F8D  00A2               	movwf	??_BuildByte
  3237  0F8E  0830               	movf	BuildByte@i,w
  3238  0F8F  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3239  0F90  0084               	movwf	4
  3240  0F91  0822               	movf	??_BuildByte,w
  3241  0F92  1383               	bcf	3,7	;select IRP bank0
  3242  0F93  0780               	addwf	0,f
  3243  0F94                     l2810:	
  3244                           
  3245                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  3246  0F94  01AA               	clrf	BuildByte@sommaRow
  3247  0F95                     l2814:	
  3248                           ;./CustomLib/Serial.h: 23:         }
  3249                           
  3250                           
  3251                           ;./CustomLib/Serial.h: 28:     }
  3252  0F95  3001               	movlw	1
  3253  0F96  07B0               	addwf	BuildByte@i,f
  3254  0F97  1803               	skipnc
  3255  0F98  0AB1               	incf	BuildByte@i+1,f
  3256  0F99  3000               	movlw	0
  3257  0F9A  07B1               	addwf	BuildByte@i+1,f
  3258  0F9B                     l2816:	
  3259  0F9B  0831               	movf	BuildByte@i+1,w
  3260  0F9C  3A80               	xorlw	128
  3261  0F9D  00FF               	movwf	btemp+1
  3262  0F9E  3080               	movlw	128
  3263  0F9F  027F               	subwf	btemp+1,w
  3264  0FA0  1D03               	skipz
  3265  0FA1  2FA4               	goto	u2625
  3266  0FA2  3004               	movlw	4
  3267  0FA3  0230               	subwf	BuildByte@i,w
  3268  0FA4                     u2625:	
  3269  0FA4  1C03               	skipc
  3270  0FA5  2FA7               	goto	u2621
  3271  0FA6  2FA8               	goto	u2620
  3272  0FA7                     u2621:	
  3273  0FA7  2F5B               	goto	l2796
  3274  0FA8                     u2620:	
  3275  0FA8                     l2818:	
  3276                           
  3277                           ;./CustomLib/Serial.h: 31:     for (int i = 0; i < 8; i++)
  3278  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  3279  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  3280  0FAA  01B2               	clrf	BuildByte@i_342
  3281  0FAB  01B3               	clrf	BuildByte@i_342+1
  3282  0FAC                     l2824:	
  3283                           
  3284                           ;./CustomLib/Serial.h: 32:     {;./CustomLib/Serial.h: 33:         for (int y = 0; y < 4
      +                          ; y++)
  3285  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  3286  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  3287  0FAE  01AE               	clrf	BuildByte@y_343
  3288  0FAF  01AF               	clrf	BuildByte@y_343+1
  3289  0FB0                     l2830:	
  3290                           
  3291                           ;./CustomLib/Serial.h: 35:         {;./CustomLib/Serial.h: 36:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3292  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  3293  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  3294  0FB2  082E               	movf	BuildByte@y_343,w
  3295  0FB3  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3296  0FB4  0084               	movwf	4
  3297  0FB5  1383               	bcf	3,7	;select IRP bank0
  3298  0FB6  0800               	movf	0,w
  3299  0FB7  00A2               	movwf	??_BuildByte
  3300  0FB8  0A32               	incf	BuildByte@i_342,w
  3301  0FB9  2FBC               	goto	u2634
  3302  0FBA                     u2635:	
  3303  0FBA  1003               	clrc
  3304  0FBB  0CA2               	rrf	??_BuildByte,f
  3305  0FBC                     u2634:	
  3306  0FBC  3EFF               	addlw	-1
  3307  0FBD  1D03               	skipz
  3308  0FBE  2FBA               	goto	u2635
  3309  0FBF  0822               	movf	??_BuildByte,w
  3310  0FC0  3901               	andlw	1
  3311  0FC1  00A3               	movwf	??_BuildByte+1
  3312  0FC2  0823               	movf	??_BuildByte+1,w
  3313  0FC3  07AB               	addwf	BuildByte@sommaColumn,f
  3314  0FC4                     l2832:	
  3315                           
  3316                           ;./CustomLib/Serial.h: 37:         }
  3317  0FC4  3001               	movlw	1
  3318  0FC5  07AE               	addwf	BuildByte@y_343,f
  3319  0FC6  1803               	skipnc
  3320  0FC7  0AAF               	incf	BuildByte@y_343+1,f
  3321  0FC8  3000               	movlw	0
  3322  0FC9  07AF               	addwf	BuildByte@y_343+1,f
  3323  0FCA                     l2834:	
  3324  0FCA  082F               	movf	BuildByte@y_343+1,w
  3325  0FCB  3A80               	xorlw	128
  3326  0FCC  00FF               	movwf	btemp+1
  3327  0FCD  3080               	movlw	128
  3328  0FCE  027F               	subwf	btemp+1,w
  3329  0FCF  1D03               	skipz
  3330  0FD0  2FD3               	goto	u2645
  3331  0FD1  3004               	movlw	4
  3332  0FD2  022E               	subwf	BuildByte@y_343,w
  3333  0FD3                     u2645:	
  3334  0FD3  1C03               	skipc
  3335  0FD4  2FD6               	goto	u2641
  3336  0FD5  2FD7               	goto	u2640
  3337  0FD6                     u2641:	
  3338  0FD6  2FB0               	goto	l2830
  3339  0FD7                     u2640:	
  3340  0FD7                     l125:	
  3341                           
  3342                           ;./CustomLib/Serial.h: 38:         if (sommaColumn % 2 == 1)
  3343  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  3344  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  3345  0FD9  1C2B               	btfss	BuildByte@sommaColumn,0
  3346  0FDA  2FDC               	goto	u2651
  3347  0FDB  2FDD               	goto	u2650
  3348  0FDC                     u2651:	
  3349  0FDC  2FEA               	goto	l2838
  3350  0FDD                     u2650:	
  3351  0FDD                     l2836:	
  3352                           
  3353                           ;./CustomLib/Serial.h: 39:         {;./CustomLib/Serial.h: 40:             txByte[4] += 
      +                          0x01 << i;
  3354  0FDD  3001               	movlw	1
  3355  0FDE  00A2               	movwf	??_BuildByte
  3356  0FDF  0A32               	incf	BuildByte@i_342,w
  3357  0FE0  2FE3               	goto	u2664
  3358  0FE1                     u2665:	
  3359  0FE1  1003               	clrc
  3360  0FE2  0DA2               	rlf	??_BuildByte,f
  3361  0FE3                     u2664:	
  3362  0FE3  3EFF               	addlw	-1
  3363  0FE4  1D03               	skipz
  3364  0FE5  2FE1               	goto	u2665
  3365  0FE6  0822               	movf	??_BuildByte,w
  3366  0FE7  00A3               	movwf	??_BuildByte+1
  3367  0FE8  0823               	movf	??_BuildByte+1,w
  3368  0FE9  07A9               	addwf	BuildByte@txByte+4,f
  3369  0FEA                     l2838:	
  3370                           
  3371                           ;./CustomLib/Serial.h: 41:             sommaColumn = 0;
  3372  0FEA  01AB               	clrf	BuildByte@sommaColumn
  3373  0FEB                     l2842:	
  3374                           ;./CustomLib/Serial.h: 42:         }
  3375                           
  3376                           
  3377                           ;./CustomLib/Serial.h: 47:     }
  3378  0FEB  3001               	movlw	1
  3379  0FEC  07B2               	addwf	BuildByte@i_342,f
  3380  0FED  1803               	skipnc
  3381  0FEE  0AB3               	incf	BuildByte@i_342+1,f
  3382  0FEF  3000               	movlw	0
  3383  0FF0  07B3               	addwf	BuildByte@i_342+1,f
  3384  0FF1                     l2844:	
  3385  0FF1  0833               	movf	BuildByte@i_342+1,w
  3386  0FF2  3A80               	xorlw	128
  3387  0FF3  00FF               	movwf	btemp+1
  3388  0FF4  3080               	movlw	128
  3389  0FF5  027F               	subwf	btemp+1,w
  3390  0FF6  1D03               	skipz
  3391  0FF7  2FFA               	goto	u2675
  3392  0FF8  3008               	movlw	8
  3393  0FF9  0232               	subwf	BuildByte@i_342,w
  3394  0FFA                     u2675:	
  3395  0FFA  1C03               	skipc
  3396  0FFB  2FFD               	goto	u2671
  3397  0FFC  2FFE               	goto	u2670
  3398  0FFD                     u2671:	
  3399  0FFD  2FAC               	goto	l2824
  3400  0FFE                     u2670:	
  3401  0FFE                     l2846:	
  3402                           
  3403                           ;./CustomLib/Serial.h: 49:     return txByte;
  3404  0FFE  3025               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3405  0FFF                     l128:	
  3406  0FFF  0008               	return
  3407  1000                     __end_of_BuildByte:	
  3408                           
  3409                           	psect	text4
  3410  0BD9                     __ptext4:	
  3411 ;; *************** function _map *****************
  3412 ;; Defined at:
  3413 ;;		line 1 in file "./CustomLib/Conversions.h"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  x               2   16[BANK0 ] int 
  3416 ;;  in_min          2   18[BANK0 ] int 
  3417 ;;  in_max          2   20[BANK0 ] int 
  3418 ;;  out_min         2   22[BANK0 ] int 
  3419 ;;  out_max         2   24[BANK0 ] int 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  2   16[BANK0 ] int 
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0, pclath, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3431 ;;      Params:         0      10       0       0       0
  3432 ;;      Locals:         0       0       0       0       0
  3433 ;;      Temps:          0       0       0       0       0
  3434 ;;      Totals:         0      10       0       0       0
  3435 ;;Total ram usage:       10 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    3
  3438 ;; This function calls:
  3439 ;;		___awdiv
  3440 ;;		___wmul
  3441 ;; This function is called by:
  3442 ;;		_main
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           
  3447                           ;psect for function _map
  3448  0BD9                     _map:	
  3449  0BD9                     l2990:	
  3450                           ;incstack = 0
  3451                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3452                           
  3453                           
  3454                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3455  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  3456  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  3457  0BDB  0832               	movf	map@in_min,w
  3458  0BDC  0234               	subwf	map@in_max,w
  3459  0BDD  00A7               	movwf	___awdiv@divisor
  3460  0BDE  0833               	movf	map@in_min+1,w
  3461  0BDF  1C03               	skipc
  3462  0BE0  0A33               	incf	map@in_min+1,w
  3463  0BE1  0235               	subwf	map@in_max+1,w
  3464  0BE2  00A8               	movwf	___awdiv@divisor+1
  3465  0BE3  0832               	movf	map@in_min,w
  3466  0BE4  0230               	subwf	map@x,w
  3467  0BE5  00A0               	movwf	___wmul@multiplier
  3468  0BE6  0833               	movf	map@in_min+1,w
  3469  0BE7  1C03               	skipc
  3470  0BE8  0A33               	incf	map@in_min+1,w
  3471  0BE9  0231               	subwf	map@x+1,w
  3472  0BEA  00A1               	movwf	___wmul@multiplier+1
  3473  0BEB  0836               	movf	map@out_min,w
  3474  0BEC  0238               	subwf	map@out_max,w
  3475  0BED  00A2               	movwf	___wmul@multiplicand
  3476  0BEE  0837               	movf	map@out_min+1,w
  3477  0BEF  1C03               	skipc
  3478  0BF0  0A37               	incf	map@out_min+1,w
  3479  0BF1  0239               	subwf	map@out_max+1,w
  3480  0BF2  00A3               	movwf	___wmul@multiplicand+1
  3481  0BF3  120A  158A  2350  120A  158A  	fcall	___wmul
  3482  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  3483  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  3484  0BFA  0821               	movf	?___wmul+1,w
  3485  0BFB  00AA               	movwf	___awdiv@dividend+1
  3486  0BFC  0820               	movf	?___wmul,w
  3487  0BFD  00A9               	movwf	___awdiv@dividend
  3488  0BFE  120A  158A  253D  120A  158A  	fcall	___awdiv
  3489  0C03  1283               	bcf	3,5	;RP0=0, select bank0
  3490  0C04  1303               	bcf	3,6	;RP1=0, select bank0
  3491  0C05  0836               	movf	map@out_min,w
  3492  0C06  0727               	addwf	?___awdiv,w
  3493  0C07  00B0               	movwf	?_map
  3494  0C08  0837               	movf	map@out_min+1,w
  3495  0C09  1803               	skipnc
  3496  0C0A  0A37               	incf	map@out_min+1,w
  3497  0C0B  0728               	addwf	?___awdiv+1,w
  3498  0C0C  00B1               	movwf	?_map+1
  3499  0C0D                     l83:	
  3500  0C0D  0008               	return
  3501  0C0E                     __end_of_map:	
  3502                           
  3503                           	psect	text5
  3504  0B50                     __ptext5:	
  3505 ;; *************** function ___wmul *****************
  3506 ;; Defined at:
  3507 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3510 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;  product         2    4[BANK0 ] unsigned int 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  2    0[BANK0 ] unsigned int 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3522 ;;      Params:         0       4       0       0       0
  3523 ;;      Locals:         0       2       0       0       0
  3524 ;;      Temps:          0       0       0       0       0
  3525 ;;      Totals:         0       6       0       0       0
  3526 ;;Total ram usage:        6 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    2
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_map
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           
  3537                           ;psect for function ___wmul
  3538  0B50                     ___wmul:	
  3539  0B50                     l2854:	
  3540                           ;incstack = 0
  3541                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3542                           
  3543  0B50  1283               	bcf	3,5	;RP0=0, select bank0
  3544  0B51  1303               	bcf	3,6	;RP1=0, select bank0
  3545  0B52  01A4               	clrf	___wmul@product
  3546  0B53  01A5               	clrf	___wmul@product+1
  3547  0B54                     l2856:	
  3548  0B54  1C20               	btfss	___wmul@multiplier,0
  3549  0B55  2B57               	goto	u2691
  3550  0B56  2B58               	goto	u2690
  3551  0B57                     u2691:	
  3552  0B57  2B5E               	goto	l446
  3553  0B58                     u2690:	
  3554  0B58                     l2858:	
  3555  0B58  0822               	movf	___wmul@multiplicand,w
  3556  0B59  07A4               	addwf	___wmul@product,f
  3557  0B5A  1803               	skipnc
  3558  0B5B  0AA5               	incf	___wmul@product+1,f
  3559  0B5C  0823               	movf	___wmul@multiplicand+1,w
  3560  0B5D  07A5               	addwf	___wmul@product+1,f
  3561  0B5E                     l446:	
  3562  0B5E  3001               	movlw	1
  3563  0B5F                     u2705:	
  3564  0B5F  1003               	clrc
  3565  0B60  0DA2               	rlf	___wmul@multiplicand,f
  3566  0B61  0DA3               	rlf	___wmul@multiplicand+1,f
  3567  0B62  3EFF               	addlw	-1
  3568  0B63  1D03               	skipz
  3569  0B64  2B5F               	goto	u2705
  3570  0B65                     l2860:	
  3571  0B65  3001               	movlw	1
  3572  0B66                     u2715:	
  3573  0B66  1003               	clrc
  3574  0B67  0CA1               	rrf	___wmul@multiplier+1,f
  3575  0B68  0CA0               	rrf	___wmul@multiplier,f
  3576  0B69  3EFF               	addlw	-1
  3577  0B6A  1D03               	skipz
  3578  0B6B  2B66               	goto	u2715
  3579  0B6C                     l2862:	
  3580  0B6C  0820               	movf	___wmul@multiplier,w
  3581  0B6D  0421               	iorwf	___wmul@multiplier+1,w
  3582  0B6E  1D03               	btfss	3,2
  3583  0B6F  2B71               	goto	u2721
  3584  0B70  2B72               	goto	u2720
  3585  0B71                     u2721:	
  3586  0B71  2B54               	goto	l2856
  3587  0B72                     u2720:	
  3588  0B72                     l2864:	
  3589  0B72  0825               	movf	___wmul@product+1,w
  3590  0B73  00A1               	movwf	?___wmul+1
  3591  0B74  0824               	movf	___wmul@product,w
  3592  0B75  00A0               	movwf	?___wmul
  3593  0B76                     l448:	
  3594  0B76  0008               	return
  3595  0B77                     __end_of___wmul:	
  3596                           
  3597                           	psect	text6
  3598  0AB8                     __ptext6:	
  3599 ;; *************** function _init_ADC *****************
  3600 ;; Defined at:
  3601 ;;		line 369 in file "main.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;		None
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;		None
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  1    wreg      void 
  3608 ;; Registers used:
  3609 ;;		wreg, status,2
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3615 ;;      Params:         0       0       0       0       0
  3616 ;;      Locals:         0       0       0       0       0
  3617 ;;      Temps:          0       1       0       0       0
  3618 ;;      Totals:         0       1       0       0       0
  3619 ;;Total ram usage:        1 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    2
  3622 ;; This function calls:
  3623 ;;		Nothing
  3624 ;; This function is called by:
  3625 ;;		_main
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           
  3630                           ;psect for function _init_ADC
  3631  0AB8                     _init_ADC:	
  3632  0AB8                     l3046:	
  3633                           ;incstack = 0
  3634                           ; Regs used in _init_ADC: [wreg+status,2]
  3635                           
  3636                           
  3637                           ;main.c: 371:     TRISA = 0xE3;
  3638  0AB8  30E3               	movlw	227
  3639  0AB9  1683               	bsf	3,5	;RP0=1, select bank1
  3640  0ABA  1303               	bcf	3,6	;RP1=0, select bank1
  3641  0ABB  0085               	movwf	5	;volatile
  3642  0ABC                     l3048:	
  3643                           
  3644                           ;main.c: 372:     ADCON0 = 0x00;
  3645  0ABC  1283               	bcf	3,5	;RP0=0, select bank0
  3646  0ABD  1303               	bcf	3,6	;RP1=0, select bank0
  3647  0ABE  019F               	clrf	31	;volatile
  3648  0ABF                     l3050:	
  3649                           
  3650                           ;main.c: 373:     ADCON1 = 0x80;
  3651  0ABF  3080               	movlw	128
  3652  0AC0  1683               	bsf	3,5	;RP0=1, select bank1
  3653  0AC1  1303               	bcf	3,6	;RP1=0, select bank1
  3654  0AC2  009F               	movwf	31	;volatile
  3655  0AC3                     l3052:	
  3656                           
  3657                           ;main.c: 374:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3658  0AC3  3019               	movlw	25
  3659  0AC4  1283               	bcf	3,5	;RP0=0, select bank0
  3660  0AC5  1303               	bcf	3,6	;RP1=0, select bank0
  3661  0AC6  00A0               	movwf	??_init_ADC
  3662  0AC7                     u3527:	
  3663  0AC7  0BA0               	decfsz	??_init_ADC,f
  3664  0AC8  2AC7               	goto	u3527
  3665  0AC9  2ACA               	nop2
  3666  0ACA                     l270:	
  3667  0ACA  0008               	return
  3668  0ACB                     __end_of_init_ADC:	
  3669                           
  3670                           	psect	text7
  3671  072B                     __ptext7:	
  3672 ;; *************** function _bitParita *****************
  3673 ;; Defined at:
  3674 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;  rx              1    wreg     PTR unsigned char 
  3677 ;;		 -> dataFromGateway(15), 
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;  rx              1   17[BANK0 ] PTR unsigned char 
  3680 ;;		 -> dataFromGateway(15), 
  3681 ;;  y               2   15[BANK0 ] int 
  3682 ;;  y               2   13[BANK0 ] int 
  3683 ;;  i               2   20[BANK0 ] int 
  3684 ;;  i               2   18[BANK0 ] int 
  3685 ;;  errorRow        1   12[BANK0 ] unsigned char 
  3686 ;;  error           1   11[BANK0 ] unsigned char 
  3687 ;;  errorColumn     1   10[BANK0 ] unsigned char 
  3688 ;;  sommaColumn     1    9[BANK0 ] unsigned char 
  3689 ;;  sommaRow        1    8[BANK0 ] unsigned char 
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  1    wreg      void 
  3692 ;; Registers used:
  3693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3699 ;;      Params:         0       0       0       0       0
  3700 ;;      Locals:         0      14       0       0       0
  3701 ;;      Temps:          0       4       0       0       0
  3702 ;;      Totals:         0      18       0       0       0
  3703 ;;Total ram usage:       18 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; Hardware stack levels required when called:    3
  3706 ;; This function calls:
  3707 ;;		_bitChange
  3708 ;; This function is called by:
  3709 ;;		_main
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           
  3714                           ;psect for function _bitParita
  3715  072B                     _bitParita:	
  3716                           
  3717                           ;incstack = 0
  3718                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3719                           ;bitParita@rx stored from wreg
  3720  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3721  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3722  072D  00B1               	movwf	bitParita@rx
  3723  072E                     l2994:	
  3724                           
  3725                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3726  072E  01AB               	clrf	bitParita@error
  3727                           
  3728                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3729  072F  01A8               	clrf	bitParita@sommaRow
  3730                           
  3731                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3732  0730  01AC               	clrf	bitParita@errorRow
  3733                           
  3734                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  3735  0731  01A9               	clrf	bitParita@sommaColumn
  3736                           
  3737                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  3738  0732  01AA               	clrf	bitParita@errorColumn
  3739                           
  3740                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  3741  0733  01B2               	clrf	bitParita@i
  3742  0734  01B3               	clrf	bitParita@i+1
  3743  0735                     l3000:	
  3744                           
  3745                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  3746  0735  1283               	bcf	3,5	;RP0=0, select bank0
  3747  0736  1303               	bcf	3,6	;RP1=0, select bank0
  3748  0737  01AD               	clrf	bitParita@y
  3749  0738  01AE               	clrf	bitParita@y+1
  3750  0739                     l3006:	
  3751                           
  3752                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  3753  0739  1283               	bcf	3,5	;RP0=0, select bank0
  3754  073A  1303               	bcf	3,6	;RP1=0, select bank0
  3755  073B  0832               	movf	bitParita@i,w
  3756  073C  0731               	addwf	bitParita@rx,w
  3757  073D  00A4               	movwf	??_bitParita
  3758  073E  0824               	movf	??_bitParita,w
  3759  073F  0084               	movwf	4
  3760  0740  1383               	bcf	3,7	;select IRP bank0
  3761  0741  0800               	movf	0,w
  3762  0742  00A5               	movwf	??_bitParita+1
  3763  0743  0A2D               	incf	bitParita@y,w
  3764  0744  2F47               	goto	u3024
  3765  0745                     u3025:	
  3766  0745  1003               	clrc
  3767  0746  0CA5               	rrf	??_bitParita+1,f
  3768  0747                     u3024:	
  3769  0747  3EFF               	addlw	-1
  3770  0748  1D03               	skipz
  3771  0749  2F45               	goto	u3025
  3772  074A  0825               	movf	??_bitParita+1,w
  3773  074B  3901               	andlw	1
  3774  074C  00A6               	movwf	??_bitParita+2
  3775  074D  0826               	movf	??_bitParita+2,w
  3776  074E  07A8               	addwf	bitParita@sommaRow,f
  3777  074F                     l3008:	
  3778                           
  3779                           ;./CustomLib/BitsFlow.h: 26:         }
  3780  074F  3001               	movlw	1
  3781  0750  07AD               	addwf	bitParita@y,f
  3782  0751  1803               	skipnc
  3783  0752  0AAE               	incf	bitParita@y+1,f
  3784  0753  3000               	movlw	0
  3785  0754  07AE               	addwf	bitParita@y+1,f
  3786  0755                     l3010:	
  3787  0755  082E               	movf	bitParita@y+1,w
  3788  0756  3A80               	xorlw	128
  3789  0757  00FF               	movwf	btemp+1
  3790  0758  3080               	movlw	128
  3791  0759  027F               	subwf	btemp+1,w
  3792  075A  1D03               	skipz
  3793  075B  2F5E               	goto	u3035
  3794  075C  3008               	movlw	8
  3795  075D  022D               	subwf	bitParita@y,w
  3796  075E                     u3035:	
  3797  075E  1C03               	skipc
  3798  075F  2F61               	goto	u3031
  3799  0760  2F62               	goto	u3030
  3800  0761                     u3031:	
  3801  0761  2F39               	goto	l3006
  3802  0762                     u3030:	
  3803  0762                     l105:	
  3804                           
  3805                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  3806  0762  1283               	bcf	3,5	;RP0=0, select bank0
  3807  0763  1303               	bcf	3,6	;RP1=0, select bank0
  3808  0764  1C28               	btfss	bitParita@sommaRow,0
  3809  0765  2F67               	goto	u3041
  3810  0766  2F68               	goto	u3040
  3811  0767                     u3041:	
  3812  0767  2F6E               	goto	l106
  3813  0768                     u3040:	
  3814  0768                     l3012:	
  3815                           
  3816                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  3817  0768  01AB               	clrf	bitParita@error
  3818  0769  0AAB               	incf	bitParita@error,f
  3819  076A                     l3014:	
  3820                           
  3821                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  3822  076A  0832               	movf	bitParita@i,w
  3823  076B  00A4               	movwf	??_bitParita
  3824  076C  0824               	movf	??_bitParita,w
  3825  076D  00AC               	movwf	bitParita@errorRow
  3826  076E                     l106:	
  3827                           ;./CustomLib/BitsFlow.h: 31:         }
  3828                           
  3829                           
  3830                           ;./CustomLib/BitsFlow.h: 32:     }
  3831  076E  3001               	movlw	1
  3832  076F  07B2               	addwf	bitParita@i,f
  3833  0770  1803               	skipnc
  3834  0771  0AB3               	incf	bitParita@i+1,f
  3835  0772  3000               	movlw	0
  3836  0773  07B3               	addwf	bitParita@i+1,f
  3837  0774                     l3016:	
  3838  0774  0833               	movf	bitParita@i+1,w
  3839  0775  3A80               	xorlw	128
  3840  0776  00FF               	movwf	btemp+1
  3841  0777  3080               	movlw	128
  3842  0778  027F               	subwf	btemp+1,w
  3843  0779  1D03               	skipz
  3844  077A  2F7D               	goto	u3055
  3845  077B  3005               	movlw	5
  3846  077C  0232               	subwf	bitParita@i,w
  3847  077D                     u3055:	
  3848  077D  1C03               	skipc
  3849  077E  2F80               	goto	u3051
  3850  077F  2F81               	goto	u3050
  3851  0780                     u3051:	
  3852  0780  2F35               	goto	l3000
  3853  0781                     u3050:	
  3854  0781                     l3018:	
  3855                           
  3856                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  3857  0781  1283               	bcf	3,5	;RP0=0, select bank0
  3858  0782  1303               	bcf	3,6	;RP1=0, select bank0
  3859  0783  01B4               	clrf	bitParita@i_330
  3860  0784  01B5               	clrf	bitParita@i_330+1
  3861  0785                     l3024:	
  3862                           
  3863                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  3864  0785  1283               	bcf	3,5	;RP0=0, select bank0
  3865  0786  1303               	bcf	3,6	;RP1=0, select bank0
  3866  0787  01AF               	clrf	bitParita@y_331
  3867  0788  01B0               	clrf	bitParita@y_331+1
  3868  0789                     l3030:	
  3869                           
  3870                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  3871  0789  1283               	bcf	3,5	;RP0=0, select bank0
  3872  078A  1303               	bcf	3,6	;RP1=0, select bank0
  3873  078B  082F               	movf	bitParita@y_331,w
  3874  078C  0731               	addwf	bitParita@rx,w
  3875  078D  00A4               	movwf	??_bitParita
  3876  078E  0824               	movf	??_bitParita,w
  3877  078F  0084               	movwf	4
  3878  0790  1383               	bcf	3,7	;select IRP bank0
  3879  0791  0800               	movf	0,w
  3880  0792  00A5               	movwf	??_bitParita+1
  3881  0793  0A34               	incf	bitParita@i_330,w
  3882  0794  2F97               	goto	u3064
  3883  0795                     u3065:	
  3884  0795  1003               	clrc
  3885  0796  0CA5               	rrf	??_bitParita+1,f
  3886  0797                     u3064:	
  3887  0797  3EFF               	addlw	-1
  3888  0798  1D03               	skipz
  3889  0799  2F95               	goto	u3065
  3890  079A  0825               	movf	??_bitParita+1,w
  3891  079B  3901               	andlw	1
  3892  079C  00A6               	movwf	??_bitParita+2
  3893  079D  0826               	movf	??_bitParita+2,w
  3894  079E  07A9               	addwf	bitParita@sommaColumn,f
  3895  079F                     l3032:	
  3896                           
  3897                           ;./CustomLib/BitsFlow.h: 39:         }
  3898  079F  3001               	movlw	1
  3899  07A0  07AF               	addwf	bitParita@y_331,f
  3900  07A1  1803               	skipnc
  3901  07A2  0AB0               	incf	bitParita@y_331+1,f
  3902  07A3  3000               	movlw	0
  3903  07A4  07B0               	addwf	bitParita@y_331+1,f
  3904  07A5                     l3034:	
  3905  07A5  0830               	movf	bitParita@y_331+1,w
  3906  07A6  3A80               	xorlw	128
  3907  07A7  00FF               	movwf	btemp+1
  3908  07A8  3080               	movlw	128
  3909  07A9  027F               	subwf	btemp+1,w
  3910  07AA  1D03               	skipz
  3911  07AB  2FAE               	goto	u3075
  3912  07AC  3004               	movlw	4
  3913  07AD  022F               	subwf	bitParita@y_331,w
  3914  07AE                     u3075:	
  3915  07AE  1C03               	skipc
  3916  07AF  2FB1               	goto	u3071
  3917  07B0  2FB2               	goto	u3070
  3918  07B1                     u3071:	
  3919  07B1  2F89               	goto	l3030
  3920  07B2                     u3070:	
  3921  07B2                     l110:	
  3922                           
  3923                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  3924  07B2  1283               	bcf	3,5	;RP0=0, select bank0
  3925  07B3  1303               	bcf	3,6	;RP1=0, select bank0
  3926  07B4  1C29               	btfss	bitParita@sommaColumn,0
  3927  07B5  2FB7               	goto	u3081
  3928  07B6  2FB8               	goto	u3080
  3929  07B7                     u3081:	
  3930  07B7  2FBE               	goto	l111
  3931  07B8                     u3080:	
  3932  07B8                     l3036:	
  3933                           
  3934                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  3935  07B8  01AB               	clrf	bitParita@error
  3936  07B9  0AAB               	incf	bitParita@error,f
  3937  07BA                     l3038:	
  3938                           
  3939                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  3940  07BA  0834               	movf	bitParita@i_330,w
  3941  07BB  00A4               	movwf	??_bitParita
  3942  07BC  0824               	movf	??_bitParita,w
  3943  07BD  00AA               	movwf	bitParita@errorColumn
  3944  07BE                     l111:	
  3945                           ;./CustomLib/BitsFlow.h: 44:         }
  3946                           
  3947                           
  3948                           ;./CustomLib/BitsFlow.h: 45:     }
  3949  07BE  3001               	movlw	1
  3950  07BF  07B4               	addwf	bitParita@i_330,f
  3951  07C0  1803               	skipnc
  3952  07C1  0AB5               	incf	bitParita@i_330+1,f
  3953  07C2  3000               	movlw	0
  3954  07C3  07B5               	addwf	bitParita@i_330+1,f
  3955  07C4                     l3040:	
  3956  07C4  0835               	movf	bitParita@i_330+1,w
  3957  07C5  3A80               	xorlw	128
  3958  07C6  00FF               	movwf	btemp+1
  3959  07C7  3080               	movlw	128
  3960  07C8  027F               	subwf	btemp+1,w
  3961  07C9  1D03               	skipz
  3962  07CA  2FCD               	goto	u3095
  3963  07CB  3008               	movlw	8
  3964  07CC  0234               	subwf	bitParita@i_330,w
  3965  07CD                     u3095:	
  3966  07CD  1C03               	skipc
  3967  07CE  2FD0               	goto	u3091
  3968  07CF  2FD1               	goto	u3090
  3969  07D0                     u3091:	
  3970  07D0  2F85               	goto	l3024
  3971  07D1                     u3090:	
  3972  07D1                     l3042:	
  3973                           
  3974                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  3975  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  3976  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  3977  07D3  082B               	movf	bitParita@error,w
  3978  07D4  1903               	btfsc	3,2
  3979  07D5  2FD7               	goto	u3101
  3980  07D6  2FD8               	goto	u3100
  3981  07D7                     u3101:	
  3982  07D7  2FF3               	goto	l113
  3983  07D8                     u3100:	
  3984  07D8                     l3044:	
  3985                           
  3986                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  3987  07D8  082A               	movf	bitParita@errorColumn,w
  3988  07D9  00A4               	movwf	??_bitParita
  3989  07DA  0824               	movf	??_bitParita,w
  3990  07DB  00A0               	movwf	bitChange@n
  3991  07DC  082C               	movf	bitParita@errorRow,w
  3992  07DD  0731               	addwf	bitParita@rx,w
  3993  07DE  00A5               	movwf	??_bitParita+1
  3994  07DF  0825               	movf	??_bitParita+1,w
  3995  07E0  0084               	movwf	4
  3996  07E1  1383               	bcf	3,7	;select IRP bank0
  3997  07E2  0800               	movf	0,w
  3998  07E3  120A  158A  2377  120A  118A  	fcall	_bitChange
  3999  07E8  1283               	bcf	3,5	;RP0=0, select bank0
  4000  07E9  1303               	bcf	3,6	;RP1=0, select bank0
  4001  07EA  00A6               	movwf	??_bitParita+2
  4002  07EB  082C               	movf	bitParita@errorRow,w
  4003  07EC  0731               	addwf	bitParita@rx,w
  4004  07ED  00A7               	movwf	??_bitParita+3
  4005  07EE  0827               	movf	??_bitParita+3,w
  4006  07EF  0084               	movwf	4
  4007  07F0  0826               	movf	??_bitParita+2,w
  4008  07F1  1383               	bcf	3,7	;select IRP bank0
  4009  07F2  0080               	movwf	0
  4010  07F3                     l113:	
  4011  07F3  0008               	return
  4012  07F4                     __end_of_bitParita:	
  4013                           
  4014                           	psect	text8
  4015  0B77                     __ptext8:	
  4016 ;; *************** function _bitChange *****************
  4017 ;; Defined at:
  4018 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  dato            1    wreg     unsigned char 
  4021 ;;  n               1    0[BANK0 ] unsigned char 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  dato            1    3[BANK0 ] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      unsigned char 
  4026 ;; Registers used:
  4027 ;;		wreg, status,2, status,0
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4033 ;;      Params:         0       1       0       0       0
  4034 ;;      Locals:         0       1       0       0       0
  4035 ;;      Temps:          0       2       0       0       0
  4036 ;;      Totals:         0       4       0       0       0
  4037 ;;Total ram usage:        4 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    2
  4040 ;; This function calls:
  4041 ;;		Nothing
  4042 ;; This function is called by:
  4043 ;;		_bitParita
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           
  4048                           ;psect for function _bitChange
  4049  0B77                     _bitChange:	
  4050                           
  4051                           ;incstack = 0
  4052                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  4053                           ;bitChange@dato stored from wreg
  4054  0B77  1283               	bcf	3,5	;RP0=0, select bank0
  4055  0B78  1303               	bcf	3,6	;RP1=0, select bank0
  4056  0B79  00A3               	movwf	bitChange@dato
  4057  0B7A                     l2770:	
  4058                           
  4059                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  4060  0B7A  3001               	movlw	1
  4061  0B7B  00A1               	movwf	??_bitChange
  4062  0B7C  0A20               	incf	bitChange@n,w
  4063  0B7D  2B80               	goto	u2544
  4064  0B7E                     u2545:	
  4065  0B7E  1003               	clrc
  4066  0B7F  0DA1               	rlf	??_bitChange,f
  4067  0B80                     u2544:	
  4068  0B80  3EFF               	addlw	-1
  4069  0B81  1D03               	skipz
  4070  0B82  2B7E               	goto	u2545
  4071  0B83  0821               	movf	??_bitChange,w
  4072  0B84  0523               	andwf	bitChange@dato,w
  4073  0B85  1903               	btfsc	3,2
  4074  0B86  2B88               	goto	u2551
  4075  0B87  2B89               	goto	u2550
  4076  0B88                     u2551:	
  4077  0B88  2B98               	goto	l2778
  4078  0B89                     u2550:	
  4079  0B89                     l2772:	
  4080                           
  4081                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  4082  0B89  3001               	movlw	1
  4083  0B8A  00A1               	movwf	??_bitChange
  4084  0B8B  0A20               	incf	bitChange@n,w
  4085  0B8C  2B8F               	goto	u2564
  4086  0B8D                     u2565:	
  4087  0B8D  1003               	clrc
  4088  0B8E  0DA1               	rlf	??_bitChange,f
  4089  0B8F                     u2564:	
  4090  0B8F  3EFF               	addlw	-1
  4091  0B90  1D03               	skipz
  4092  0B91  2B8D               	goto	u2565
  4093  0B92  0821               	movf	??_bitChange,w
  4094  0B93  00A2               	movwf	??_bitChange+1
  4095  0B94  0822               	movf	??_bitChange+1,w
  4096  0B95  04A3               	iorwf	bitChange@dato,f
  4097  0B96  0823               	movf	bitChange@dato,w
  4098  0B97  2BA7               	goto	l98
  4099  0B98                     l2778:	
  4100                           
  4101                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  4102  0B98  3001               	movlw	1
  4103  0B99  00A1               	movwf	??_bitChange
  4104  0B9A  0A20               	incf	bitChange@n,w
  4105  0B9B  2B9E               	goto	u2574
  4106  0B9C                     u2575:	
  4107  0B9C  1003               	clrc
  4108  0B9D  0DA1               	rlf	??_bitChange,f
  4109  0B9E                     u2574:	
  4110  0B9E  3EFF               	addlw	-1
  4111  0B9F  1D03               	skipz
  4112  0BA0  2B9C               	goto	u2575
  4113  0BA1  0821               	movf	??_bitChange,w
  4114  0BA2  3AFF               	xorlw	255
  4115  0BA3  00A2               	movwf	??_bitChange+1
  4116  0BA4  0822               	movf	??_bitChange+1,w
  4117  0BA5  05A3               	andwf	bitChange@dato,f
  4118  0BA6  0823               	movf	bitChange@dato,w
  4119  0BA7                     l98:	
  4120  0BA7  0008               	return
  4121  0BA8                     __end_of_bitChange:	
  4122                           
  4123                           	psect	text9
  4124  0AF3                     __ptext9:	
  4125 ;; *************** function ___bmul *****************
  4126 ;; Defined at:
  4127 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  multiplier      1    wreg     unsigned char 
  4130 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4133 ;;  product         1    2[BANK0 ] unsigned char 
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  1    wreg      unsigned char 
  4136 ;; Registers used:
  4137 ;;		wreg, status,2, status,0
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4143 ;;      Params:         0       1       0       0       0
  4144 ;;      Locals:         0       2       0       0       0
  4145 ;;      Temps:          0       1       0       0       0
  4146 ;;      Totals:         0       4       0       0       0
  4147 ;;Total ram usage:        4 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; Hardware stack levels required when called:    2
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_main
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function ___bmul
  4159  0AF3                     ___bmul:	
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4163                           ;___bmul@multiplier stored from wreg
  4164  0AF3  1283               	bcf	3,5	;RP0=0, select bank0
  4165  0AF4  1303               	bcf	3,6	;RP1=0, select bank0
  4166  0AF5  00A3               	movwf	___bmul@multiplier
  4167  0AF6                     l3152:	
  4168  0AF6  01A2               	clrf	___bmul@product
  4169  0AF7                     l3154:	
  4170  0AF7  1C23               	btfss	___bmul@multiplier,0
  4171  0AF8  2AFA               	goto	u3181
  4172  0AF9  2AFB               	goto	u3180
  4173  0AFA                     u3181:	
  4174  0AFA  2AFF               	goto	l3158
  4175  0AFB                     u3180:	
  4176  0AFB                     l3156:	
  4177  0AFB  0820               	movf	___bmul@multiplicand,w
  4178  0AFC  00A1               	movwf	??___bmul
  4179  0AFD  0821               	movf	??___bmul,w
  4180  0AFE  07A2               	addwf	___bmul@product,f
  4181  0AFF                     l3158:	
  4182  0AFF  1003               	clrc
  4183  0B00  0DA0               	rlf	___bmul@multiplicand,f
  4184  0B01                     l3160:	
  4185  0B01  1003               	clrc
  4186  0B02  0CA3               	rrf	___bmul@multiplier,f
  4187  0B03  0823               	movf	___bmul@multiplier,w
  4188  0B04  1D03               	btfss	3,2
  4189  0B05  2B07               	goto	u3191
  4190  0B06  2B08               	goto	u3190
  4191  0B07                     u3191:	
  4192  0B07  2AF7               	goto	l3154
  4193  0B08                     u3190:	
  4194  0B08                     l3162:	
  4195  0B08  0822               	movf	___bmul@product,w
  4196  0B09                     l472:	
  4197  0B09  0008               	return
  4198  0B0A                     __end_of___bmul:	
  4199                           
  4200                           	psect	text10
  4201  0C0E                     __ptext10:	
  4202 ;; *************** function _UART_Init *****************
  4203 ;; Defined at:
  4204 ;;		line 388 in file "main.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;  baudrate        2   15[BANK0 ] int 
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		wreg, status,2, status,0, pclath, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4218 ;;      Params:         0       2       0       0       0
  4219 ;;      Locals:         0       0       0       0       0
  4220 ;;      Temps:          0       4       0       0       0
  4221 ;;      Totals:         0       6       0       0       0
  4222 ;;Total ram usage:        6 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    3
  4225 ;; This function calls:
  4226 ;;		___aldiv
  4227 ;; This function is called by:
  4228 ;;		_main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _UART_Init
  4234  0C0E                     _UART_Init:	
  4235  0C0E                     l3054:	
  4236                           ;incstack = 0
  4237                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4238                           
  4239                           
  4240                           ;main.c: 388: void UART_Init(int baudrate);main.c: 389: {;main.c: 390:     TRISCbits.TRI
      +                          SC6 = 0;
  4241  0C0E  1683               	bsf	3,5	;RP0=1, select bank1
  4242  0C0F  1303               	bcf	3,6	;RP1=0, select bank1
  4243  0C10  1307               	bcf	7,6	;volatile
  4244                           
  4245                           ;main.c: 391:     TXSTAbits.TXEN = 1;
  4246  0C11  1698               	bsf	24,5	;volatile
  4247                           
  4248                           ;main.c: 392:     RCSTAbits.SPEN = 1;
  4249  0C12  1283               	bcf	3,5	;RP0=0, select bank0
  4250  0C13  1303               	bcf	3,6	;RP1=0, select bank0
  4251  0C14  1798               	bsf	24,7	;volatile
  4252                           
  4253                           ;main.c: 393:     RCSTAbits.CREN = 1;
  4254  0C15  1618               	bsf	24,4	;volatile
  4255  0C16                     l3056:	
  4256                           
  4257                           ;main.c: 394:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4258  0C16  082F               	movf	UART_Init@baudrate,w
  4259  0C17  00B1               	movwf	??_UART_Init
  4260  0C18  0830               	movf	UART_Init@baudrate+1,w
  4261  0C19  00B2               	movwf	??_UART_Init+1
  4262  0C1A  3000               	movlw	0
  4263  0C1B  1BB2               	btfsc	??_UART_Init+1,7
  4264  0C1C  30FF               	movlw	255
  4265  0C1D  00B3               	movwf	??_UART_Init+2
  4266  0C1E  00B4               	movwf	??_UART_Init+3
  4267  0C1F  3006               	movlw	6
  4268  0C20                     u3115:	
  4269  0C20  1003               	clrc
  4270  0C21  0DB1               	rlf	??_UART_Init,f
  4271  0C22  0DB2               	rlf	??_UART_Init+1,f
  4272  0C23  0DB3               	rlf	??_UART_Init+2,f
  4273  0C24  0DB4               	rlf	??_UART_Init+3,f
  4274  0C25                     u3110:	
  4275  0C25  3EFF               	addlw	-1
  4276  0C26  1D03               	skipz
  4277  0C27  2C20               	goto	u3115
  4278  0C28  0834               	movf	??_UART_Init+3,w
  4279  0C29  00A3               	movwf	___aldiv@divisor+3
  4280  0C2A  0833               	movf	??_UART_Init+2,w
  4281  0C2B  00A2               	movwf	___aldiv@divisor+2
  4282  0C2C  0832               	movf	??_UART_Init+1,w
  4283  0C2D  00A1               	movwf	___aldiv@divisor+1
  4284  0C2E  0831               	movf	??_UART_Init,w
  4285  0C2F  00A0               	movwf	___aldiv@divisor
  4286  0C30  3001               	movlw	1
  4287  0C31  00A7               	movwf	___aldiv@dividend+3
  4288  0C32  30E8               	movlw	232
  4289  0C33  00A6               	movwf	___aldiv@dividend+2
  4290  0C34  3048               	movlw	72
  4291  0C35  00A5               	movwf	___aldiv@dividend+1
  4292  0C36  3000               	movlw	0
  4293  0C37  00A4               	movwf	___aldiv@dividend
  4294  0C38  120A  158A  269B  120A  158A  	fcall	___aldiv
  4295  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  4296  0C3E  1303               	bcf	3,6	;RP1=0, select bank0
  4297  0C3F  0820               	movf	?___aldiv,w
  4298  0C40  3EFF               	addlw	255
  4299  0C41  1683               	bsf	3,5	;RP0=1, select bank1
  4300  0C42  1303               	bcf	3,6	;RP1=0, select bank1
  4301  0C43  0099               	movwf	25	;volatile
  4302  0C44                     l3058:	
  4303                           
  4304                           ;main.c: 395:     INTCONbits.GIE = 1;
  4305  0C44  178B               	bsf	11,7	;volatile
  4306  0C45                     l3060:	
  4307                           
  4308                           ;main.c: 396:     INTCONbits.PEIE = 1;
  4309  0C45  170B               	bsf	11,6	;volatile
  4310  0C46                     l3062:	
  4311                           
  4312                           ;main.c: 397:     PIE1bits.RCIE = 1;
  4313  0C46  168C               	bsf	12,5	;volatile
  4314  0C47                     l279:	
  4315  0C47  0008               	return
  4316  0C48                     __end_of_UART_Init:	
  4317                           
  4318                           	psect	text11
  4319  0E9B                     __ptext11:	
  4320 ;; *************** function ___aldiv *****************
  4321 ;; Defined at:
  4322 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4323 ;; Parameters:    Size  Location     Type
  4324 ;;  divisor         4    0[BANK0 ] long 
  4325 ;;  dividend        4    4[BANK0 ] long 
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;  quotient        4   11[BANK0 ] long 
  4328 ;;  sign            1   10[BANK0 ] unsigned char 
  4329 ;;  counter         1    9[BANK0 ] unsigned char 
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  4    0[BANK0 ] long 
  4332 ;; Registers used:
  4333 ;;		wreg, status,2, status,0
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4339 ;;      Params:         0       8       0       0       0
  4340 ;;      Locals:         0       6       0       0       0
  4341 ;;      Temps:          0       1       0       0       0
  4342 ;;      Totals:         0      15       0       0       0
  4343 ;;Total ram usage:       15 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:    2
  4346 ;; This function calls:
  4347 ;;		Nothing
  4348 ;; This function is called by:
  4349 ;;		_UART_Init
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           
  4354                           ;psect for function ___aldiv
  4355  0E9B                     ___aldiv:	
  4356  0E9B                     l2868:	
  4357                           ;incstack = 0
  4358                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4359                           
  4360  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  4362  0E9D  01AA               	clrf	___aldiv@sign
  4363  0E9E                     l2870:	
  4364  0E9E  1FA3               	btfss	___aldiv@divisor+3,7
  4365  0E9F  2EA1               	goto	u2731
  4366  0EA0  2EA2               	goto	u2730
  4367  0EA1                     u2731:	
  4368  0EA1  2EAF               	goto	l511
  4369  0EA2                     u2730:	
  4370  0EA2                     l2872:	
  4371  0EA2  09A0               	comf	___aldiv@divisor,f
  4372  0EA3  09A1               	comf	___aldiv@divisor+1,f
  4373  0EA4  09A2               	comf	___aldiv@divisor+2,f
  4374  0EA5  09A3               	comf	___aldiv@divisor+3,f
  4375  0EA6  0AA0               	incf	___aldiv@divisor,f
  4376  0EA7  1903               	skipnz
  4377  0EA8  0AA1               	incf	___aldiv@divisor+1,f
  4378  0EA9  1903               	skipnz
  4379  0EAA  0AA2               	incf	___aldiv@divisor+2,f
  4380  0EAB  1903               	skipnz
  4381  0EAC  0AA3               	incf	___aldiv@divisor+3,f
  4382  0EAD  01AA               	clrf	___aldiv@sign
  4383  0EAE  0AAA               	incf	___aldiv@sign,f
  4384  0EAF                     l511:	
  4385  0EAF  1FA7               	btfss	___aldiv@dividend+3,7
  4386  0EB0  2EB2               	goto	u2741
  4387  0EB1  2EB3               	goto	u2740
  4388  0EB2                     u2741:	
  4389  0EB2  2EC2               	goto	l2878
  4390  0EB3                     u2740:	
  4391  0EB3                     l2874:	
  4392  0EB3  09A4               	comf	___aldiv@dividend,f
  4393  0EB4  09A5               	comf	___aldiv@dividend+1,f
  4394  0EB5  09A6               	comf	___aldiv@dividend+2,f
  4395  0EB6  09A7               	comf	___aldiv@dividend+3,f
  4396  0EB7  0AA4               	incf	___aldiv@dividend,f
  4397  0EB8  1903               	skipnz
  4398  0EB9  0AA5               	incf	___aldiv@dividend+1,f
  4399  0EBA  1903               	skipnz
  4400  0EBB  0AA6               	incf	___aldiv@dividend+2,f
  4401  0EBC  1903               	skipnz
  4402  0EBD  0AA7               	incf	___aldiv@dividend+3,f
  4403  0EBE                     l2876:	
  4404  0EBE  3001               	movlw	1
  4405  0EBF  00A8               	movwf	??___aldiv
  4406  0EC0  0828               	movf	??___aldiv,w
  4407  0EC1  06AA               	xorwf	___aldiv@sign,f
  4408  0EC2                     l2878:	
  4409  0EC2  3000               	movlw	0
  4410  0EC3  00AE               	movwf	___aldiv@quotient+3
  4411  0EC4  3000               	movlw	0
  4412  0EC5  00AD               	movwf	___aldiv@quotient+2
  4413  0EC6  3000               	movlw	0
  4414  0EC7  00AC               	movwf	___aldiv@quotient+1
  4415  0EC8  3000               	movlw	0
  4416  0EC9  00AB               	movwf	___aldiv@quotient
  4417  0ECA                     l2880:	
  4418  0ECA  0823               	movf	___aldiv@divisor+3,w
  4419  0ECB  0422               	iorwf	___aldiv@divisor+2,w
  4420  0ECC  0421               	iorwf	___aldiv@divisor+1,w
  4421  0ECD  0420               	iorwf	___aldiv@divisor,w
  4422  0ECE  1903               	skipnz
  4423  0ECF  2ED1               	goto	u2751
  4424  0ED0  2ED2               	goto	u2750
  4425  0ED1                     u2751:	
  4426  0ED1  2F1F               	goto	l2900
  4427  0ED2                     u2750:	
  4428  0ED2                     l2882:	
  4429  0ED2  01A9               	clrf	___aldiv@counter
  4430  0ED3  0AA9               	incf	___aldiv@counter,f
  4431  0ED4  2EE2               	goto	l2886
  4432  0ED5                     l2884:	
  4433  0ED5  3001               	movlw	1
  4434  0ED6  00A8               	movwf	??___aldiv
  4435  0ED7                     u2765:	
  4436  0ED7  1003               	clrc
  4437  0ED8  0DA0               	rlf	___aldiv@divisor,f
  4438  0ED9  0DA1               	rlf	___aldiv@divisor+1,f
  4439  0EDA  0DA2               	rlf	___aldiv@divisor+2,f
  4440  0EDB  0DA3               	rlf	___aldiv@divisor+3,f
  4441  0EDC  0BA8               	decfsz	??___aldiv,f
  4442  0EDD  2ED7               	goto	u2765
  4443  0EDE  3001               	movlw	1
  4444  0EDF  00A8               	movwf	??___aldiv
  4445  0EE0  0828               	movf	??___aldiv,w
  4446  0EE1  07A9               	addwf	___aldiv@counter,f
  4447  0EE2                     l2886:	
  4448  0EE2  1FA3               	btfss	___aldiv@divisor+3,7
  4449  0EE3  2EE5               	goto	u2771
  4450  0EE4  2EE6               	goto	u2770
  4451  0EE5                     u2771:	
  4452  0EE5  2ED5               	goto	l2884
  4453  0EE6                     u2770:	
  4454  0EE6                     l2888:	
  4455  0EE6  3001               	movlw	1
  4456  0EE7  00A8               	movwf	??___aldiv
  4457  0EE8                     u2785:	
  4458  0EE8  1003               	clrc
  4459  0EE9  0DAB               	rlf	___aldiv@quotient,f
  4460  0EEA  0DAC               	rlf	___aldiv@quotient+1,f
  4461  0EEB  0DAD               	rlf	___aldiv@quotient+2,f
  4462  0EEC  0DAE               	rlf	___aldiv@quotient+3,f
  4463  0EED  0BA8               	decfsz	??___aldiv,f
  4464  0EEE  2EE8               	goto	u2785
  4465  0EEF                     l2890:	
  4466  0EEF  0823               	movf	___aldiv@divisor+3,w
  4467  0EF0  0227               	subwf	___aldiv@dividend+3,w
  4468  0EF1  1D03               	skipz
  4469  0EF2  2EFD               	goto	u2795
  4470  0EF3  0822               	movf	___aldiv@divisor+2,w
  4471  0EF4  0226               	subwf	___aldiv@dividend+2,w
  4472  0EF5  1D03               	skipz
  4473  0EF6  2EFD               	goto	u2795
  4474  0EF7  0821               	movf	___aldiv@divisor+1,w
  4475  0EF8  0225               	subwf	___aldiv@dividend+1,w
  4476  0EF9  1D03               	skipz
  4477  0EFA  2EFD               	goto	u2795
  4478  0EFB  0820               	movf	___aldiv@divisor,w
  4479  0EFC  0224               	subwf	___aldiv@dividend,w
  4480  0EFD                     u2795:	
  4481  0EFD  1C03               	skipc
  4482  0EFE  2F00               	goto	u2791
  4483  0EFF  2F01               	goto	u2790
  4484  0F00                     u2791:	
  4485  0F00  2F10               	goto	l2896
  4486  0F01                     u2790:	
  4487  0F01                     l2892:	
  4488  0F01  0820               	movf	___aldiv@divisor,w
  4489  0F02  02A4               	subwf	___aldiv@dividend,f
  4490  0F03  0821               	movf	___aldiv@divisor+1,w
  4491  0F04  1C03               	skipc
  4492  0F05  0F21               	incfsz	___aldiv@divisor+1,w
  4493  0F06  02A5               	subwf	___aldiv@dividend+1,f
  4494  0F07  0822               	movf	___aldiv@divisor+2,w
  4495  0F08  1C03               	skipc
  4496  0F09  0F22               	incfsz	___aldiv@divisor+2,w
  4497  0F0A  02A6               	subwf	___aldiv@dividend+2,f
  4498  0F0B  0823               	movf	___aldiv@divisor+3,w
  4499  0F0C  1C03               	skipc
  4500  0F0D  0F23               	incfsz	___aldiv@divisor+3,w
  4501  0F0E  02A7               	subwf	___aldiv@dividend+3,f
  4502  0F0F                     l2894:	
  4503  0F0F  142B               	bsf	___aldiv@quotient,0
  4504  0F10                     l2896:	
  4505  0F10  3001               	movlw	1
  4506  0F11                     u2805:	
  4507  0F11  1003               	clrc
  4508  0F12  0CA3               	rrf	___aldiv@divisor+3,f
  4509  0F13  0CA2               	rrf	___aldiv@divisor+2,f
  4510  0F14  0CA1               	rrf	___aldiv@divisor+1,f
  4511  0F15  0CA0               	rrf	___aldiv@divisor,f
  4512  0F16  3EFF               	addlw	-1
  4513  0F17  1D03               	skipz
  4514  0F18  2F11               	goto	u2805
  4515  0F19                     l2898:	
  4516  0F19  3001               	movlw	1
  4517  0F1A  02A9               	subwf	___aldiv@counter,f
  4518  0F1B  1D03               	btfss	3,2
  4519  0F1C  2F1E               	goto	u2811
  4520  0F1D  2F1F               	goto	u2810
  4521  0F1E                     u2811:	
  4522  0F1E  2EE6               	goto	l2888
  4523  0F1F                     u2810:	
  4524  0F1F                     l2900:	
  4525  0F1F  082A               	movf	___aldiv@sign,w
  4526  0F20  1903               	btfsc	3,2
  4527  0F21  2F23               	goto	u2821
  4528  0F22  2F24               	goto	u2820
  4529  0F23                     u2821:	
  4530  0F23  2F2F               	goto	l2904
  4531  0F24                     u2820:	
  4532  0F24                     l2902:	
  4533  0F24  09AB               	comf	___aldiv@quotient,f
  4534  0F25  09AC               	comf	___aldiv@quotient+1,f
  4535  0F26  09AD               	comf	___aldiv@quotient+2,f
  4536  0F27  09AE               	comf	___aldiv@quotient+3,f
  4537  0F28  0AAB               	incf	___aldiv@quotient,f
  4538  0F29  1903               	skipnz
  4539  0F2A  0AAC               	incf	___aldiv@quotient+1,f
  4540  0F2B  1903               	skipnz
  4541  0F2C  0AAD               	incf	___aldiv@quotient+2,f
  4542  0F2D  1903               	skipnz
  4543  0F2E  0AAE               	incf	___aldiv@quotient+3,f
  4544  0F2F                     l2904:	
  4545  0F2F  082E               	movf	___aldiv@quotient+3,w
  4546  0F30  00A3               	movwf	?___aldiv+3
  4547  0F31  082D               	movf	___aldiv@quotient+2,w
  4548  0F32  00A2               	movwf	?___aldiv+2
  4549  0F33  082C               	movf	___aldiv@quotient+1,w
  4550  0F34  00A1               	movwf	?___aldiv+1
  4551  0F35  082B               	movf	___aldiv@quotient,w
  4552  0F36  00A0               	movwf	?___aldiv
  4553  0F37                     l521:	
  4554  0F37  0008               	return
  4555  0F38                     __end_of___aldiv:	
  4556                           
  4557                           	psect	text12
  4558  0ADE                     __ptext12:	
  4559 ;; *************** function _SetDisplay *****************
  4560 ;; Defined at:
  4561 ;;		line 462 in file "main.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;  d1              1    wreg     unsigned char 
  4564 ;;  d2              1    0[BANK0 ] unsigned char 
  4565 ;;  d3              1    1[BANK0 ] unsigned char 
  4566 ;;  value           1    2[BANK0 ] unsigned char 
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;  d1              1    3[BANK0 ] unsigned char 
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		wreg, status,0
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4578 ;;      Params:         0       3       0       0       0
  4579 ;;      Locals:         0       1       0       0       0
  4580 ;;      Temps:          0       0       0       0       0
  4581 ;;      Totals:         0       4       0       0       0
  4582 ;;Total ram usage:        4 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    2
  4585 ;; This function calls:
  4586 ;;		Nothing
  4587 ;; This function is called by:
  4588 ;;		_main
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           
  4593                           ;psect for function _SetDisplay
  4594  0ADE                     _SetDisplay:	
  4595                           
  4596                           ;incstack = 0
  4597                           ; Regs used in _SetDisplay: [wreg+status,0]
  4598                           ;SetDisplay@d1 stored from wreg
  4599  0ADE  1283               	bcf	3,5	;RP0=0, select bank0
  4600  0ADF  1303               	bcf	3,6	;RP1=0, select bank0
  4601  0AE0  00A3               	movwf	SetDisplay@d1
  4602  0AE1                     l3148:	
  4603                           
  4604                           ;main.c: 462: void SetDisplay(char d1, char d2, char d3, char value);main.c: 463: {;main
      +                          .c: 464:     PORTAbits.RA2 = d1;
  4605  0AE1  0C23               	rrf	SetDisplay@d1,w
  4606  0AE2  1C03               	skipc
  4607  0AE3  1105               	bcf	5,2	;volatile
  4608  0AE4  1803               	skipnc
  4609  0AE5  1505               	bsf	5,2	;volatile
  4610                           
  4611                           ;main.c: 465:     PORTAbits.RA3 = d2;
  4612  0AE6  0C20               	rrf	SetDisplay@d2,w
  4613  0AE7  1C03               	skipc
  4614  0AE8  1185               	bcf	5,3	;volatile
  4615  0AE9  1803               	skipnc
  4616  0AEA  1585               	bsf	5,3	;volatile
  4617                           
  4618                           ;main.c: 466:     PORTAbits.RA4 = d3;
  4619  0AEB  0C21               	rrf	SetDisplay@d3,w
  4620  0AEC  1C03               	skipc
  4621  0AED  1205               	bcf	5,4	;volatile
  4622  0AEE  1803               	skipnc
  4623  0AEF  1605               	bsf	5,4	;volatile
  4624  0AF0                     l3150:	
  4625                           
  4626                           ;main.c: 467:     PORTD = value;
  4627  0AF0  0822               	movf	SetDisplay@value,w
  4628  0AF1  0088               	movwf	8	;volatile
  4629  0AF2                     l311:	
  4630  0AF2  0008               	return
  4631  0AF3                     __end_of_SetDisplay:	
  4632                           
  4633                           	psect	text13
  4634  0E11                     __ptext13:	
  4635 ;; *************** function _SetDefaultTimers *****************
  4636 ;; Defined at:
  4637 ;;		line 470 in file "main.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  rosso           2    0[BANK0 ] int 
  4640 ;;  verde           2    2[BANK0 ] int 
  4641 ;;  giallo          2    4[BANK0 ] int 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;  i               1   13[BANK0 ] unsigned char 
  4644 ;;  l               1   12[BANK0 ] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4654 ;;      Params:         0       6       0       0       0
  4655 ;;      Locals:         0       2       0       0       0
  4656 ;;      Temps:          0       6       0       0       0
  4657 ;;      Totals:         0      14       0       0       0
  4658 ;;Total ram usage:       14 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    2
  4661 ;; This function calls:
  4662 ;;		Nothing
  4663 ;; This function is called by:
  4664 ;;		_main
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           
  4669                           ;psect for function _SetDefaultTimers
  4670  0E11                     _SetDefaultTimers:	
  4671  0E11                     l3064:	
  4672                           ;incstack = 0
  4673                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4674                           
  4675                           
  4676                           ;main.c: 470: void SetDefaultTimers(int rosso, int verde, int giallo);main.c: 471: {;mai
      +                          n.c: 472:     for (unsigned char l = 0; l < 16; l++)
  4677  0E11  1283               	bcf	3,5	;RP0=0, select bank0
  4678  0E12  1303               	bcf	3,6	;RP1=0, select bank0
  4679  0E13  01AC               	clrf	SetDefaultTimers@l
  4680  0E14                     l3070:	
  4681                           
  4682                           ;main.c: 473:     {;main.c: 474:         for (unsigned char i = 0; i < 3; i++)
  4683  0E14  01AD               	clrf	SetDefaultTimers@i
  4684  0E15  2E73               	goto	l3084
  4685  0E16                     l3076:	
  4686                           
  4687                           ;main.c: 479:                 (*(Semafori[l])).new_times[i] = rosso;
  4688  0E16  082C               	movf	SetDefaultTimers@l,w
  4689  0E17  00A6               	movwf	??_SetDefaultTimers
  4690  0E18  0726               	addwf	??_SetDefaultTimers,w
  4691  0E19  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4692  0E1A  0084               	movwf	4
  4693  0E1B  1383               	bcf	3,7	;select IRP bank1
  4694  0E1C  0800               	movf	0,w
  4695  0E1D  00A7               	movwf	??_SetDefaultTimers+1
  4696  0E1E  0A84               	incf	4,f
  4697  0E1F  0800               	movf	0,w
  4698  0E20  00A8               	movwf	??_SetDefaultTimers+2
  4699  0E21  082D               	movf	SetDefaultTimers@i,w
  4700  0E22  00A9               	movwf	??_SetDefaultTimers+3
  4701  0E23  0729               	addwf	??_SetDefaultTimers+3,w
  4702  0E24  0727               	addwf	??_SetDefaultTimers+1,w
  4703  0E25  00AA               	movwf	??_SetDefaultTimers+4
  4704  0E26  0828               	movf	??_SetDefaultTimers+2,w
  4705  0E27  1803               	skipnc
  4706  0E28  3E01               	addlw	1
  4707  0E29  00AB               	movwf	??_SetDefaultTimers+5
  4708  0E2A  082A               	movf	??_SetDefaultTimers+4,w
  4709  0E2B  0084               	movwf	4
  4710  0E2C  1783               	bsf	3,7
  4711  0E2D  1C2B               	btfss	??_SetDefaultTimers+5,0
  4712  0E2E  1383               	bcf	3,7
  4713  0E2F  0820               	movf	SetDefaultTimers@rosso,w
  4714  0E30  0080               	movwf	0
  4715  0E31  0A84               	incf	4,f
  4716  0E32  0821               	movf	SetDefaultTimers@rosso+1,w
  4717  0E33  0080               	movwf	0
  4718                           
  4719                           ;main.c: 480:                 break;
  4720  0E34  2E86               	goto	l3086
  4721  0E35                     l3078:	
  4722                           
  4723                           ;main.c: 482:                 (*(Semafori[l])).new_times[i] = verde;
  4724  0E35  082C               	movf	SetDefaultTimers@l,w
  4725  0E36  00A6               	movwf	??_SetDefaultTimers
  4726  0E37  0726               	addwf	??_SetDefaultTimers,w
  4727  0E38  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4728  0E39  0084               	movwf	4
  4729  0E3A  1383               	bcf	3,7	;select IRP bank1
  4730  0E3B  0800               	movf	0,w
  4731  0E3C  00A7               	movwf	??_SetDefaultTimers+1
  4732  0E3D  0A84               	incf	4,f
  4733  0E3E  0800               	movf	0,w
  4734  0E3F  00A8               	movwf	??_SetDefaultTimers+2
  4735  0E40  082D               	movf	SetDefaultTimers@i,w
  4736  0E41  00A9               	movwf	??_SetDefaultTimers+3
  4737  0E42  0729               	addwf	??_SetDefaultTimers+3,w
  4738  0E43  0727               	addwf	??_SetDefaultTimers+1,w
  4739  0E44  00AA               	movwf	??_SetDefaultTimers+4
  4740  0E45  0828               	movf	??_SetDefaultTimers+2,w
  4741  0E46  1803               	skipnc
  4742  0E47  3E01               	addlw	1
  4743  0E48  00AB               	movwf	??_SetDefaultTimers+5
  4744  0E49  082A               	movf	??_SetDefaultTimers+4,w
  4745  0E4A  0084               	movwf	4
  4746  0E4B  1783               	bsf	3,7
  4747  0E4C  1C2B               	btfss	??_SetDefaultTimers+5,0
  4748  0E4D  1383               	bcf	3,7
  4749  0E4E  0822               	movf	SetDefaultTimers@verde,w
  4750  0E4F  0080               	movwf	0
  4751  0E50  0A84               	incf	4,f
  4752  0E51  0823               	movf	SetDefaultTimers@verde+1,w
  4753  0E52  0080               	movwf	0
  4754                           
  4755                           ;main.c: 483:                 break;
  4756  0E53  2E86               	goto	l3086
  4757  0E54                     l3080:	
  4758                           
  4759                           ;main.c: 485:                 (*(Semafori[l])).new_times[i] = giallo;
  4760  0E54  082C               	movf	SetDefaultTimers@l,w
  4761  0E55  00A6               	movwf	??_SetDefaultTimers
  4762  0E56  0726               	addwf	??_SetDefaultTimers,w
  4763  0E57  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4764  0E58  0084               	movwf	4
  4765  0E59  1383               	bcf	3,7	;select IRP bank1
  4766  0E5A  0800               	movf	0,w
  4767  0E5B  00A7               	movwf	??_SetDefaultTimers+1
  4768  0E5C  0A84               	incf	4,f
  4769  0E5D  0800               	movf	0,w
  4770  0E5E  00A8               	movwf	??_SetDefaultTimers+2
  4771  0E5F  082D               	movf	SetDefaultTimers@i,w
  4772  0E60  00A9               	movwf	??_SetDefaultTimers+3
  4773  0E61  0729               	addwf	??_SetDefaultTimers+3,w
  4774  0E62  0727               	addwf	??_SetDefaultTimers+1,w
  4775  0E63  00AA               	movwf	??_SetDefaultTimers+4
  4776  0E64  0828               	movf	??_SetDefaultTimers+2,w
  4777  0E65  1803               	skipnc
  4778  0E66  3E01               	addlw	1
  4779  0E67  00AB               	movwf	??_SetDefaultTimers+5
  4780  0E68  082A               	movf	??_SetDefaultTimers+4,w
  4781  0E69  0084               	movwf	4
  4782  0E6A  1783               	bsf	3,7
  4783  0E6B  1C2B               	btfss	??_SetDefaultTimers+5,0
  4784  0E6C  1383               	bcf	3,7
  4785  0E6D  0824               	movf	SetDefaultTimers@giallo,w
  4786  0E6E  0080               	movwf	0
  4787  0E6F  0A84               	incf	4,f
  4788  0E70  0825               	movf	SetDefaultTimers@giallo+1,w
  4789  0E71  0080               	movwf	0
  4790                           
  4791                           ;main.c: 486:                 break;
  4792  0E72  2E86               	goto	l3086
  4793  0E73                     l3084:	
  4794  0E73  082D               	movf	SetDefaultTimers@i,w
  4795  0E74  00A6               	movwf	??_SetDefaultTimers
  4796  0E75  01A7               	clrf	??_SetDefaultTimers+1
  4797                           
  4798                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4799                           ; Switch size 1, requested type "simple"
  4800                           ; Number of cases is 1, Range of values is 0 to 0
  4801                           ; switch strategies available:
  4802                           ; Name         Instructions Cycles
  4803                           ; simple_byte            4     3 (average)
  4804                           ; direct_byte           11     8 (fixed)
  4805                           ; jumptable            260     6 (fixed)
  4806                           ;	Chosen strategy is simple_byte
  4807  0E76  0827               	movf	??_SetDefaultTimers+1,w
  4808  0E77  3A00               	xorlw	0	; case 0
  4809  0E78  1903               	skipnz
  4810  0E79  2E7B               	goto	l3556
  4811  0E7A  2E86               	goto	l3086
  4812  0E7B                     l3556:	
  4813                           
  4814                           ; Switch size 1, requested type "simple"
  4815                           ; Number of cases is 3, Range of values is 0 to 2
  4816                           ; switch strategies available:
  4817                           ; Name         Instructions Cycles
  4818                           ; simple_byte           10     6 (average)
  4819                           ; direct_byte           17     8 (fixed)
  4820                           ; jumptable            260     6 (fixed)
  4821                           ;	Chosen strategy is simple_byte
  4822  0E7B  0826               	movf	??_SetDefaultTimers,w
  4823  0E7C  3A00               	xorlw	0	; case 0
  4824  0E7D  1903               	skipnz
  4825  0E7E  2E16               	goto	l3076
  4826  0E7F  3A01               	xorlw	1	; case 1
  4827  0E80  1903               	skipnz
  4828  0E81  2E35               	goto	l3078
  4829  0E82  3A03               	xorlw	3	; case 2
  4830  0E83  1903               	skipnz
  4831  0E84  2E54               	goto	l3080
  4832  0E85  2E86               	goto	l3086
  4833  0E86                     l3086:	
  4834                           
  4835                           ;main.c: 488:         }
  4836  0E86  3001               	movlw	1
  4837  0E87  00A6               	movwf	??_SetDefaultTimers
  4838  0E88  0826               	movf	??_SetDefaultTimers,w
  4839  0E89  07AD               	addwf	SetDefaultTimers@i,f
  4840  0E8A                     l3088:	
  4841  0E8A  3003               	movlw	3
  4842  0E8B  022D               	subwf	SetDefaultTimers@i,w
  4843  0E8C  1C03               	skipc
  4844  0E8D  2E8F               	goto	u3121
  4845  0E8E  2E90               	goto	u3120
  4846  0E8F                     u3121:	
  4847  0E8F  2E73               	goto	l3084
  4848  0E90                     u3120:	
  4849  0E90                     l3090:	
  4850                           
  4851                           ;main.c: 489:     }
  4852  0E90  3001               	movlw	1
  4853  0E91  00A6               	movwf	??_SetDefaultTimers
  4854  0E92  0826               	movf	??_SetDefaultTimers,w
  4855  0E93  07AC               	addwf	SetDefaultTimers@l,f
  4856  0E94                     l3092:	
  4857  0E94  3010               	movlw	16
  4858  0E95  022C               	subwf	SetDefaultTimers@l,w
  4859  0E96  1C03               	skipc
  4860  0E97  2E99               	goto	u3131
  4861  0E98  2E9A               	goto	u3130
  4862  0E99                     u3131:	
  4863  0E99  2E14               	goto	l3070
  4864  0E9A                     u3130:	
  4865  0E9A                     l323:	
  4866  0E9A  0008               	return
  4867  0E9B                     __end_of_SetDefaultTimers:	
  4868                           
  4869                           	psect	text14
  4870  0C48                     __ptext14:	
  4871 ;; *************** function _GetTime *****************
  4872 ;; Defined at:
  4873 ;;		line 436 in file "main.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;  index           1    wreg     unsigned char 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  index           1    4[BANK0 ] unsigned char 
  4878 ;;  time            2    6[BANK0 ] int 
  4879 ;;  shortInt        1    5[BANK0 ] struct .
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  2    0[BANK0 ] int 
  4882 ;; Registers used:
  4883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4889 ;;      Params:         0       2       0       0       0
  4890 ;;      Locals:         0       4       0       0       0
  4891 ;;      Temps:          0       2       0       0       0
  4892 ;;      Totals:         0       8       0       0       0
  4893 ;;Total ram usage:        8 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    2
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_main
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _GetTime
  4905  0C48                     _GetTime:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4909                           ;GetTime@index stored from wreg
  4910  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  4911  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  4912  0C4A  00A4               	movwf	GetTime@index
  4913  0C4B                     l3124:	
  4914                           
  4915                           ;main.c: 436: int GetTime(unsigned char index);main.c: 437: {;main.c: 438:     int time;
      +                          ;main.c: 442:     } shortInt;;main.c: 444:     shortInt.Val = dataFromGateway[index + 3]
      +                           & 0x7F;
  4916  0C4B  0824               	movf	GetTime@index,w
  4917  0C4C  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4918  0C4D  0084               	movwf	4
  4919  0C4E  307F               	movlw	127
  4920  0C4F  1383               	bcf	3,7	;select IRP bank1
  4921  0C50  0500               	andwf	0,w
  4922  0C51  00A2               	movwf	??_GetTime
  4923  0C52  0825               	movf	GetTime@shortInt,w
  4924  0C53  0622               	xorwf	??_GetTime,w
  4925  0C54  3980               	andlw	-128
  4926  0C55  0622               	xorwf	??_GetTime,w
  4927  0C56  00A5               	movwf	GetTime@shortInt
  4928  0C57                     l3126:	
  4929                           
  4930                           ;main.c: 445:     time = shortInt.Val;
  4931  0C57  0825               	movf	GetTime@shortInt,w
  4932  0C58  397F               	andlw	127
  4933  0C59  00A2               	movwf	??_GetTime
  4934  0C5A  01A3               	clrf	??_GetTime+1
  4935  0C5B  0822               	movf	??_GetTime,w
  4936  0C5C  00A6               	movwf	GetTime@time
  4937  0C5D  0823               	movf	??_GetTime+1,w
  4938  0C5E  00A7               	movwf	GetTime@time+1
  4939  0C5F                     l3128:	
  4940                           
  4941                           ;main.c: 446:     time = (time << 7) & 0x80;
  4942  0C5F  0827               	movf	GetTime@time+1,w
  4943  0C60  00A3               	movwf	??_GetTime+1
  4944  0C61  0826               	movf	GetTime@time,w
  4945  0C62  00A2               	movwf	??_GetTime
  4946  0C63  3007               	movlw	7
  4947  0C64  00FF               	movwf	btemp+1
  4948  0C65                     u3175:	
  4949  0C65  1003               	clrc
  4950  0C66  0DA2               	rlf	??_GetTime,f
  4951  0C67  0DA3               	rlf	??_GetTime+1,f
  4952  0C68  0BFF               	decfsz	btemp+1,f
  4953  0C69  2C65               	goto	u3175
  4954  0C6A  3080               	movlw	128
  4955  0C6B  0522               	andwf	??_GetTime,w
  4956  0C6C  00A6               	movwf	GetTime@time
  4957  0C6D  3000               	movlw	0
  4958  0C6E  0523               	andwf	??_GetTime+1,w
  4959  0C6F  00A7               	movwf	GetTime@time+1
  4960  0C70                     l3130:	
  4961                           
  4962                           ;main.c: 448:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4963  0C70  0824               	movf	GetTime@index,w
  4964  0C71  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4965  0C72  0084               	movwf	4
  4966  0C73  307F               	movlw	127
  4967  0C74  0500               	andwf	0,w
  4968  0C75  00A2               	movwf	??_GetTime
  4969  0C76  0825               	movf	GetTime@shortInt,w
  4970  0C77  0622               	xorwf	??_GetTime,w
  4971  0C78  3980               	andlw	-128
  4972  0C79  0622               	xorwf	??_GetTime,w
  4973  0C7A  00A5               	movwf	GetTime@shortInt
  4974  0C7B                     l3132:	
  4975                           
  4976                           ;main.c: 449:     time = time | shortInt.Val;
  4977  0C7B  0825               	movf	GetTime@shortInt,w
  4978  0C7C  397F               	andlw	127
  4979  0C7D  00A2               	movwf	??_GetTime
  4980  0C7E  0826               	movf	GetTime@time,w
  4981  0C7F  0422               	iorwf	??_GetTime,w
  4982  0C80  00A6               	movwf	GetTime@time
  4983  0C81  0827               	movf	GetTime@time+1,w
  4984  0C82  00A7               	movwf	GetTime@time+1
  4985  0C83                     l3134:	
  4986                           
  4987                           ;main.c: 451:     return time;
  4988  0C83  0827               	movf	GetTime@time+1,w
  4989  0C84  00A1               	movwf	?_GetTime+1
  4990  0C85  0826               	movf	GetTime@time,w
  4991  0C86  00A0               	movwf	?_GetTime
  4992  0C87                     l305:	
  4993  0C87  0008               	return
  4994  0C88                     __end_of_GetTime:	
  4995                           
  4996                           	psect	text15
  4997  0DA6                     __ptext15:	
  4998 ;; *************** function _GetDigits *****************
  4999 ;; Defined at:
  5000 ;;		line 454 in file "main.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;  Time            2   16[BANK0 ] int 
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;		None
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  1    wreg      void 
  5007 ;; Registers used:
  5008 ;;		wreg, status,2, status,0, pclath, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5014 ;;      Params:         0       2       0       0       0
  5015 ;;      Locals:         0       2       0       0       0
  5016 ;;      Temps:          0       3       0       0       0
  5017 ;;      Totals:         0       7       0       0       0
  5018 ;;Total ram usage:        7 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:    3
  5021 ;; This function calls:
  5022 ;;		___awdiv
  5023 ;;		___awmod
  5024 ;; This function is called by:
  5025 ;;		_main
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           
  5030                           ;psect for function _GetDigits
  5031  0DA6                     _GetDigits:	
  5032  0DA6                     l3138:	
  5033                           ;incstack = 0
  5034                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  5035                           
  5036                           
  5037                           ;main.c: 454: void GetDigits(int Time);main.c: 455: {;main.c: 456:     countdown = Time;
  5038  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  5039  0DA7  1303               	bcf	3,6	;RP1=0, select bank0
  5040  0DA8  0830               	movf	GetDigits@Time,w
  5041  0DA9  00B2               	movwf	??_GetDigits
  5042  0DAA  0832               	movf	??_GetDigits,w
  5043  0DAB  00DB               	movwf	_countdown
  5044  0DAC                     l3140:	
  5045                           
  5046                           ;main.c: 457:     centinaia = countdown / 100;
  5047  0DAC  3064               	movlw	100
  5048  0DAD  00A7               	movwf	___awdiv@divisor
  5049  0DAE  3000               	movlw	0
  5050  0DAF  00A8               	movwf	___awdiv@divisor+1
  5051  0DB0  085B               	movf	_countdown,w
  5052  0DB1  00B2               	movwf	??_GetDigits
  5053  0DB2  01B3               	clrf	??_GetDigits+1
  5054  0DB3  0832               	movf	??_GetDigits,w
  5055  0DB4  00A9               	movwf	___awdiv@dividend
  5056  0DB5  0833               	movf	??_GetDigits+1,w
  5057  0DB6  00AA               	movwf	___awdiv@dividend+1
  5058  0DB7  120A  158A  253D  120A  158A  	fcall	___awdiv
  5059  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  5060  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  5061  0DBE  0827               	movf	?___awdiv,w
  5062  0DBF  00B4               	movwf	??_GetDigits+2
  5063  0DC0  0834               	movf	??_GetDigits+2,w
  5064  0DC1  00DE               	movwf	_centinaia
  5065  0DC2                     l3142:	
  5066                           
  5067                           ;main.c: 458:     decine = (countdown % 100) / 10;
  5068  0DC2  300A               	movlw	10
  5069  0DC3  00A7               	movwf	___awdiv@divisor
  5070  0DC4  3000               	movlw	0
  5071  0DC5  00A8               	movwf	___awdiv@divisor+1
  5072  0DC6  085B               	movf	_countdown,w
  5073  0DC7  00B2               	movwf	??_GetDigits
  5074  0DC8  01B3               	clrf	??_GetDigits+1
  5075  0DC9  0832               	movf	??_GetDigits,w
  5076  0DCA  00A2               	movwf	___awmod@dividend
  5077  0DCB  0833               	movf	??_GetDigits+1,w
  5078  0DCC  00A3               	movwf	___awmod@dividend+1
  5079  0DCD  3064               	movlw	100
  5080  0DCE  00A0               	movwf	___awmod@divisor
  5081  0DCF  3000               	movlw	0
  5082  0DD0  00A1               	movwf	___awmod@divisor+1
  5083  0DD1  120A  158A  24E2  120A  158A  	fcall	___awmod
  5084  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  5085  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  5086  0DD8  0821               	movf	?___awmod+1,w
  5087  0DD9  00AA               	movwf	___awdiv@dividend+1
  5088  0DDA  0820               	movf	?___awmod,w
  5089  0DDB  00A9               	movwf	___awdiv@dividend
  5090  0DDC  120A  158A  253D  120A  158A  	fcall	___awdiv
  5091  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  5092  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  5093  0DE3  0827               	movf	?___awdiv,w
  5094  0DE4  00B4               	movwf	??_GetDigits+2
  5095  0DE5  0834               	movf	??_GetDigits+2,w
  5096  0DE6  00DF               	movwf	_decine
  5097  0DE7                     l3144:	
  5098                           
  5099                           ;main.c: 459:     unita = (countdown % 100) % 10;
  5100  0DE7  085B               	movf	_countdown,w
  5101  0DE8  00B2               	movwf	??_GetDigits
  5102  0DE9  01B3               	clrf	??_GetDigits+1
  5103  0DEA  0832               	movf	??_GetDigits,w
  5104  0DEB  00A2               	movwf	___awmod@dividend
  5105  0DEC  0833               	movf	??_GetDigits+1,w
  5106  0DED  00A3               	movwf	___awmod@dividend+1
  5107  0DEE  3064               	movlw	100
  5108  0DEF  00A0               	movwf	___awmod@divisor
  5109  0DF0  3000               	movlw	0
  5110  0DF1  00A1               	movwf	___awmod@divisor+1
  5111  0DF2  120A  158A  24E2  120A  158A  	fcall	___awmod
  5112  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  5113  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  5114  0DF9  0821               	movf	?___awmod+1,w
  5115  0DFA  00B6               	movwf	_GetDigits$1151+1
  5116  0DFB  0820               	movf	?___awmod,w
  5117  0DFC  00B5               	movwf	_GetDigits$1151
  5118  0DFD                     l3146:	
  5119                           
  5120                           ;main.c: 459:     unita = (countdown % 100) % 10;
  5121  0DFD  300A               	movlw	10
  5122  0DFE  00A0               	movwf	___awmod@divisor
  5123  0DFF  3000               	movlw	0
  5124  0E00  00A1               	movwf	___awmod@divisor+1
  5125  0E01  0836               	movf	_GetDigits$1151+1,w
  5126  0E02  00A3               	movwf	___awmod@dividend+1
  5127  0E03  0835               	movf	_GetDigits$1151,w
  5128  0E04  00A2               	movwf	___awmod@dividend
  5129  0E05  120A  158A  24E2  120A  158A  	fcall	___awmod
  5130  0E0A  1283               	bcf	3,5	;RP0=0, select bank0
  5131  0E0B  1303               	bcf	3,6	;RP1=0, select bank0
  5132  0E0C  0820               	movf	?___awmod,w
  5133  0E0D  00B2               	movwf	??_GetDigits
  5134  0E0E  0832               	movf	??_GetDigits,w
  5135  0E0F  00E0               	movwf	_unita
  5136  0E10                     l308:	
  5137  0E10  0008               	return
  5138  0E11                     __end_of_GetDigits:	
  5139                           
  5140                           	psect	text16
  5141  0CE2                     __ptext16:	
  5142 ;; *************** function ___awmod *****************
  5143 ;; Defined at:
  5144 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  divisor         2    0[BANK0 ] int 
  5147 ;;  dividend        2    2[BANK0 ] int 
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;  sign            1    6[BANK0 ] unsigned char 
  5150 ;;  counter         1    5[BANK0 ] unsigned char 
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  2    0[BANK0 ] int 
  5153 ;; Registers used:
  5154 ;;		wreg, status,2, status,0
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5160 ;;      Params:         0       4       0       0       0
  5161 ;;      Locals:         0       2       0       0       0
  5162 ;;      Temps:          0       1       0       0       0
  5163 ;;      Totals:         0       7       0       0       0
  5164 ;;Total ram usage:        7 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    2
  5167 ;; This function calls:
  5168 ;;		Nothing
  5169 ;; This function is called by:
  5170 ;;		_main
  5171 ;;		_GetDigits
  5172 ;;		_intToString
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           
  5177                           ;psect for function ___awmod
  5178  0CE2                     ___awmod:	
  5179  0CE2                     l2952:	
  5180                           ;incstack = 0
  5181                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5182                           
  5183  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
  5184  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  5185  0CE4  01A6               	clrf	___awmod@sign
  5186  0CE5                     l2954:	
  5187  0CE5  1FA3               	btfss	___awmod@dividend+1,7
  5188  0CE6  2CE8               	goto	u2931
  5189  0CE7  2CE9               	goto	u2930
  5190  0CE8                     u2931:	
  5191  0CE8  2CF0               	goto	l2960
  5192  0CE9                     u2930:	
  5193  0CE9                     l2956:	
  5194  0CE9  09A2               	comf	___awmod@dividend,f
  5195  0CEA  09A3               	comf	___awmod@dividend+1,f
  5196  0CEB  0AA2               	incf	___awmod@dividend,f
  5197  0CEC  1903               	skipnz
  5198  0CED  0AA3               	incf	___awmod@dividend+1,f
  5199  0CEE                     l2958:	
  5200  0CEE  01A6               	clrf	___awmod@sign
  5201  0CEF  0AA6               	incf	___awmod@sign,f
  5202  0CF0                     l2960:	
  5203  0CF0  1FA1               	btfss	___awmod@divisor+1,7
  5204  0CF1  2CF3               	goto	u2941
  5205  0CF2  2CF4               	goto	u2940
  5206  0CF3                     u2941:	
  5207  0CF3  2CF9               	goto	l2964
  5208  0CF4                     u2940:	
  5209  0CF4                     l2962:	
  5210  0CF4  09A0               	comf	___awmod@divisor,f
  5211  0CF5  09A1               	comf	___awmod@divisor+1,f
  5212  0CF6  0AA0               	incf	___awmod@divisor,f
  5213  0CF7  1903               	skipnz
  5214  0CF8  0AA1               	incf	___awmod@divisor+1,f
  5215  0CF9                     l2964:	
  5216  0CF9  0820               	movf	___awmod@divisor,w
  5217  0CFA  0421               	iorwf	___awmod@divisor+1,w
  5218  0CFB  1903               	btfsc	3,2
  5219  0CFC  2CFE               	goto	u2951
  5220  0CFD  2CFF               	goto	u2950
  5221  0CFE                     u2951:	
  5222  0CFE  2D2E               	goto	l2982
  5223  0CFF                     u2950:	
  5224  0CFF                     l2966:	
  5225  0CFF  01A5               	clrf	___awmod@counter
  5226  0D00  0AA5               	incf	___awmod@counter,f
  5227  0D01  2D0D               	goto	l2972
  5228  0D02                     l2968:	
  5229  0D02  3001               	movlw	1
  5230  0D03                     u2965:	
  5231  0D03  1003               	clrc
  5232  0D04  0DA0               	rlf	___awmod@divisor,f
  5233  0D05  0DA1               	rlf	___awmod@divisor+1,f
  5234  0D06  3EFF               	addlw	-1
  5235  0D07  1D03               	skipz
  5236  0D08  2D03               	goto	u2965
  5237  0D09                     l2970:	
  5238  0D09  3001               	movlw	1
  5239  0D0A  00A4               	movwf	??___awmod
  5240  0D0B  0824               	movf	??___awmod,w
  5241  0D0C  07A5               	addwf	___awmod@counter,f
  5242  0D0D                     l2972:	
  5243  0D0D  1FA1               	btfss	___awmod@divisor+1,7
  5244  0D0E  2D10               	goto	u2971
  5245  0D0F  2D11               	goto	u2970
  5246  0D10                     u2971:	
  5247  0D10  2D02               	goto	l2968
  5248  0D11                     u2970:	
  5249  0D11                     l2974:	
  5250  0D11  0821               	movf	___awmod@divisor+1,w
  5251  0D12  0223               	subwf	___awmod@dividend+1,w
  5252  0D13  1D03               	skipz
  5253  0D14  2D17               	goto	u2985
  5254  0D15  0820               	movf	___awmod@divisor,w
  5255  0D16  0222               	subwf	___awmod@dividend,w
  5256  0D17                     u2985:	
  5257  0D17  1C03               	skipc
  5258  0D18  2D1A               	goto	u2981
  5259  0D19  2D1B               	goto	u2980
  5260  0D1A                     u2981:	
  5261  0D1A  2D21               	goto	l2978
  5262  0D1B                     u2980:	
  5263  0D1B                     l2976:	
  5264  0D1B  0820               	movf	___awmod@divisor,w
  5265  0D1C  02A2               	subwf	___awmod@dividend,f
  5266  0D1D  0821               	movf	___awmod@divisor+1,w
  5267  0D1E  1C03               	skipc
  5268  0D1F  03A3               	decf	___awmod@dividend+1,f
  5269  0D20  02A3               	subwf	___awmod@dividend+1,f
  5270  0D21                     l2978:	
  5271  0D21  3001               	movlw	1
  5272  0D22                     u2995:	
  5273  0D22  1003               	clrc
  5274  0D23  0CA1               	rrf	___awmod@divisor+1,f
  5275  0D24  0CA0               	rrf	___awmod@divisor,f
  5276  0D25  3EFF               	addlw	-1
  5277  0D26  1D03               	skipz
  5278  0D27  2D22               	goto	u2995
  5279  0D28                     l2980:	
  5280  0D28  3001               	movlw	1
  5281  0D29  02A5               	subwf	___awmod@counter,f
  5282  0D2A  1D03               	btfss	3,2
  5283  0D2B  2D2D               	goto	u3001
  5284  0D2C  2D2E               	goto	u3000
  5285  0D2D                     u3001:	
  5286  0D2D  2D11               	goto	l2974
  5287  0D2E                     u3000:	
  5288  0D2E                     l2982:	
  5289  0D2E  0826               	movf	___awmod@sign,w
  5290  0D2F  1903               	btfsc	3,2
  5291  0D30  2D32               	goto	u3011
  5292  0D31  2D33               	goto	u3010
  5293  0D32                     u3011:	
  5294  0D32  2D38               	goto	l2986
  5295  0D33                     u3010:	
  5296  0D33                     l2984:	
  5297  0D33  09A2               	comf	___awmod@dividend,f
  5298  0D34  09A3               	comf	___awmod@dividend+1,f
  5299  0D35  0AA2               	incf	___awmod@dividend,f
  5300  0D36  1903               	skipnz
  5301  0D37  0AA3               	incf	___awmod@dividend+1,f
  5302  0D38                     l2986:	
  5303  0D38  0823               	movf	___awmod@dividend+1,w
  5304  0D39  00A1               	movwf	?___awmod+1
  5305  0D3A  0822               	movf	___awmod@dividend,w
  5306  0D3B  00A0               	movwf	?___awmod
  5307  0D3C                     l612:	
  5308  0D3C  0008               	return
  5309  0D3D                     __end_of___awmod:	
  5310                           
  5311                           	psect	text17
  5312  0D3D                     __ptext17:	
  5313 ;; *************** function ___awdiv *****************
  5314 ;; Defined at:
  5315 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  divisor         2    7[BANK0 ] int 
  5318 ;;  dividend        2    9[BANK0 ] int 
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  quotient        2   14[BANK0 ] int 
  5321 ;;  sign            1   13[BANK0 ] unsigned char 
  5322 ;;  counter         1   12[BANK0 ] unsigned char 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  2    7[BANK0 ] int 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5332 ;;      Params:         0       4       0       0       0
  5333 ;;      Locals:         0       4       0       0       0
  5334 ;;      Temps:          0       1       0       0       0
  5335 ;;      Totals:         0       9       0       0       0
  5336 ;;Total ram usage:        9 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    2
  5339 ;; This function calls:
  5340 ;;		Nothing
  5341 ;; This function is called by:
  5342 ;;		_map
  5343 ;;		_GetDigits
  5344 ;;		_intToString
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           
  5349                           ;psect for function ___awdiv
  5350  0D3D                     ___awdiv:	
  5351  0D3D                     l2908:	
  5352                           ;incstack = 0
  5353                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5354                           
  5355  0D3D  1283               	bcf	3,5	;RP0=0, select bank0
  5356  0D3E  1303               	bcf	3,6	;RP1=0, select bank0
  5357  0D3F  01AD               	clrf	___awdiv@sign
  5358  0D40                     l2910:	
  5359  0D40  1FA8               	btfss	___awdiv@divisor+1,7
  5360  0D41  2D43               	goto	u2831
  5361  0D42  2D44               	goto	u2830
  5362  0D43                     u2831:	
  5363  0D43  2D4B               	goto	l2916
  5364  0D44                     u2830:	
  5365  0D44                     l2912:	
  5366  0D44  09A7               	comf	___awdiv@divisor,f
  5367  0D45  09A8               	comf	___awdiv@divisor+1,f
  5368  0D46  0AA7               	incf	___awdiv@divisor,f
  5369  0D47  1903               	skipnz
  5370  0D48  0AA8               	incf	___awdiv@divisor+1,f
  5371  0D49                     l2914:	
  5372  0D49  01AD               	clrf	___awdiv@sign
  5373  0D4A  0AAD               	incf	___awdiv@sign,f
  5374  0D4B                     l2916:	
  5375  0D4B  1FAA               	btfss	___awdiv@dividend+1,7
  5376  0D4C  2D4E               	goto	u2841
  5377  0D4D  2D4F               	goto	u2840
  5378  0D4E                     u2841:	
  5379  0D4E  2D58               	goto	l2922
  5380  0D4F                     u2840:	
  5381  0D4F                     l2918:	
  5382  0D4F  09A9               	comf	___awdiv@dividend,f
  5383  0D50  09AA               	comf	___awdiv@dividend+1,f
  5384  0D51  0AA9               	incf	___awdiv@dividend,f
  5385  0D52  1903               	skipnz
  5386  0D53  0AAA               	incf	___awdiv@dividend+1,f
  5387  0D54                     l2920:	
  5388  0D54  3001               	movlw	1
  5389  0D55  00AB               	movwf	??___awdiv
  5390  0D56  082B               	movf	??___awdiv,w
  5391  0D57  06AD               	xorwf	___awdiv@sign,f
  5392  0D58                     l2922:	
  5393  0D58  01AE               	clrf	___awdiv@quotient
  5394  0D59  01AF               	clrf	___awdiv@quotient+1
  5395  0D5A                     l2924:	
  5396  0D5A  0827               	movf	___awdiv@divisor,w
  5397  0D5B  0428               	iorwf	___awdiv@divisor+1,w
  5398  0D5C  1903               	btfsc	3,2
  5399  0D5D  2D5F               	goto	u2851
  5400  0D5E  2D60               	goto	u2850
  5401  0D5F                     u2851:	
  5402  0D5F  2D97               	goto	l2944
  5403  0D60                     u2850:	
  5404  0D60                     l2926:	
  5405  0D60  01AC               	clrf	___awdiv@counter
  5406  0D61  0AAC               	incf	___awdiv@counter,f
  5407  0D62  2D6E               	goto	l2932
  5408  0D63                     l2928:	
  5409  0D63  3001               	movlw	1
  5410  0D64                     u2865:	
  5411  0D64  1003               	clrc
  5412  0D65  0DA7               	rlf	___awdiv@divisor,f
  5413  0D66  0DA8               	rlf	___awdiv@divisor+1,f
  5414  0D67  3EFF               	addlw	-1
  5415  0D68  1D03               	skipz
  5416  0D69  2D64               	goto	u2865
  5417  0D6A                     l2930:	
  5418  0D6A  3001               	movlw	1
  5419  0D6B  00AB               	movwf	??___awdiv
  5420  0D6C  082B               	movf	??___awdiv,w
  5421  0D6D  07AC               	addwf	___awdiv@counter,f
  5422  0D6E                     l2932:	
  5423  0D6E  1FA8               	btfss	___awdiv@divisor+1,7
  5424  0D6F  2D71               	goto	u2871
  5425  0D70  2D72               	goto	u2870
  5426  0D71                     u2871:	
  5427  0D71  2D63               	goto	l2928
  5428  0D72                     u2870:	
  5429  0D72                     l2934:	
  5430  0D72  3001               	movlw	1
  5431  0D73                     u2885:	
  5432  0D73  1003               	clrc
  5433  0D74  0DAE               	rlf	___awdiv@quotient,f
  5434  0D75  0DAF               	rlf	___awdiv@quotient+1,f
  5435  0D76  3EFF               	addlw	-1
  5436  0D77  1D03               	skipz
  5437  0D78  2D73               	goto	u2885
  5438  0D79  0828               	movf	___awdiv@divisor+1,w
  5439  0D7A  022A               	subwf	___awdiv@dividend+1,w
  5440  0D7B  1D03               	skipz
  5441  0D7C  2D7F               	goto	u2895
  5442  0D7D  0827               	movf	___awdiv@divisor,w
  5443  0D7E  0229               	subwf	___awdiv@dividend,w
  5444  0D7F                     u2895:	
  5445  0D7F  1C03               	skipc
  5446  0D80  2D82               	goto	u2891
  5447  0D81  2D83               	goto	u2890
  5448  0D82                     u2891:	
  5449  0D82  2D8A               	goto	l2940
  5450  0D83                     u2890:	
  5451  0D83                     l2936:	
  5452  0D83  0827               	movf	___awdiv@divisor,w
  5453  0D84  02A9               	subwf	___awdiv@dividend,f
  5454  0D85  0828               	movf	___awdiv@divisor+1,w
  5455  0D86  1C03               	skipc
  5456  0D87  03AA               	decf	___awdiv@dividend+1,f
  5457  0D88  02AA               	subwf	___awdiv@dividend+1,f
  5458  0D89                     l2938:	
  5459  0D89  142E               	bsf	___awdiv@quotient,0
  5460  0D8A                     l2940:	
  5461  0D8A  3001               	movlw	1
  5462  0D8B                     u2905:	
  5463  0D8B  1003               	clrc
  5464  0D8C  0CA8               	rrf	___awdiv@divisor+1,f
  5465  0D8D  0CA7               	rrf	___awdiv@divisor,f
  5466  0D8E  3EFF               	addlw	-1
  5467  0D8F  1D03               	skipz
  5468  0D90  2D8B               	goto	u2905
  5469  0D91                     l2942:	
  5470  0D91  3001               	movlw	1
  5471  0D92  02AC               	subwf	___awdiv@counter,f
  5472  0D93  1D03               	btfss	3,2
  5473  0D94  2D96               	goto	u2911
  5474  0D95  2D97               	goto	u2910
  5475  0D96                     u2911:	
  5476  0D96  2D72               	goto	l2934
  5477  0D97                     u2910:	
  5478  0D97                     l2944:	
  5479  0D97  082D               	movf	___awdiv@sign,w
  5480  0D98  1903               	btfsc	3,2
  5481  0D99  2D9B               	goto	u2921
  5482  0D9A  2D9C               	goto	u2920
  5483  0D9B                     u2921:	
  5484  0D9B  2DA1               	goto	l2948
  5485  0D9C                     u2920:	
  5486  0D9C                     l2946:	
  5487  0D9C  09AE               	comf	___awdiv@quotient,f
  5488  0D9D  09AF               	comf	___awdiv@quotient+1,f
  5489  0D9E  0AAE               	incf	___awdiv@quotient,f
  5490  0D9F  1903               	skipnz
  5491  0DA0  0AAF               	incf	___awdiv@quotient+1,f
  5492  0DA1                     l2948:	
  5493  0DA1  082F               	movf	___awdiv@quotient+1,w
  5494  0DA2  00A8               	movwf	?___awdiv+1
  5495  0DA3  082E               	movf	___awdiv@quotient,w
  5496  0DA4  00A7               	movwf	?___awdiv
  5497  0DA5                     l599:	
  5498  0DA5  0008               	return
  5499  0DA6                     __end_of___awdiv:	
  5500                           
  5501                           	psect	text18
  5502  0B2A                     __ptext18:	
  5503 ;; *************** function _ADC_Read *****************
  5504 ;; Defined at:
  5505 ;;		line 378 in file "main.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;  canale          1    wreg     unsigned char 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  canale          1    3[BANK0 ] unsigned char 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  2    0[BANK0 ] int 
  5512 ;; Registers used:
  5513 ;;		wreg, status,2, status,0
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5519 ;;      Params:         0       2       0       0       0
  5520 ;;      Locals:         0       1       0       0       0
  5521 ;;      Temps:          0       1       0       0       0
  5522 ;;      Totals:         0       4       0       0       0
  5523 ;;Total ram usage:        4 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    2
  5526 ;; This function calls:
  5527 ;;		Nothing
  5528 ;; This function is called by:
  5529 ;;		_main
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function _ADC_Read
  5535  0B2A                     _ADC_Read:	
  5536                           
  5537                           ;incstack = 0
  5538                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5539                           ;ADC_Read@canale stored from wreg
  5540  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  5541  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  5542  0B2C  00A3               	movwf	ADC_Read@canale
  5543  0B2D                     l3114:	
  5544                           
  5545                           ;main.c: 378: int ADC_Read(char canale);main.c: 379: {;main.c: 380:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  5546  0B2D  0823               	movf	ADC_Read@canale,w
  5547  0B2E  00A2               	movwf	??_ADC_Read
  5548  0B2F  3002               	movlw	2
  5549  0B30                     u3155:	
  5550  0B30  1003               	clrc
  5551  0B31  0DA2               	rlf	??_ADC_Read,f
  5552  0B32  3EFF               	addlw	-1
  5553  0B33  1D03               	skipz
  5554  0B34  2B30               	goto	u3155
  5555  0B35  1003               	clrc
  5556  0B36  0D22               	rlf	??_ADC_Read,w
  5557  0B37  3801               	iorlw	1
  5558  0B38  009F               	movwf	31	;volatile
  5559  0B39                     l3116:	
  5560                           
  5561                           ;main.c: 381:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5562  0B39  3004               	movlw	4
  5563  0B3A  1283               	bcf	3,5	;RP0=0, select bank0
  5564  0B3B  1303               	bcf	3,6	;RP1=0, select bank0
  5565  0B3C  00A2               	movwf	??_ADC_Read
  5566  0B3D                     u3537:	
  5567  0B3D  0BA2               	decfsz	??_ADC_Read,f
  5568  0B3E  2B3D               	goto	u3537
  5569  0B3F  0000               	nop
  5570  0B40                     l3118:	
  5571                           
  5572                           ;main.c: 382:     GO_nDONE = 1;
  5573  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  5574  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  5575  0B42  151F               	bsf	31,2	;volatile
  5576  0B43                     l273:	
  5577                           ;main.c: 384:         ;
  5578                           
  5579                           
  5580                           ;main.c: 383:     while (GO_nDONE)
  5581  0B43  191F               	btfsc	31,2	;volatile
  5582  0B44  2B46               	goto	u3161
  5583  0B45  2B47               	goto	u3160
  5584  0B46                     u3161:	
  5585  0B46  2B43               	goto	l273
  5586  0B47                     u3160:	
  5587  0B47                     l3120:	
  5588                           
  5589                           ;main.c: 385:     return ADRESL + (ADRESH << 8);
  5590  0B47  081E               	movf	30,w	;volatile
  5591  0B48  00A1               	movwf	?_ADC_Read+1
  5592  0B49  1683               	bsf	3,5	;RP0=1, select bank1
  5593  0B4A  1303               	bcf	3,6	;RP1=0, select bank1
  5594  0B4B  081E               	movf	30,w	;volatile
  5595  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  5596  0B4D  1303               	bcf	3,6	;RP1=0, select bank0
  5597  0B4E  00A0               	movwf	?_ADC_Read
  5598  0B4F                     l276:	
  5599  0B4F  0008               	return
  5600  0B50                     __end_of_ADC_Read:	
  5601                           
  5602                           	psect	text19
  5603  0C88                     __ptext19:	
  5604 ;; *************** function _ISR *****************
  5605 ;; Defined at:
  5606 ;;		line 580 in file "main.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;		None
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;		None
  5611 ;; Return value:  Size  Location     Type
  5612 ;;                  1    wreg      void 
  5613 ;; Registers used:
  5614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5620 ;;      Params:         0       0       0       0       0
  5621 ;;      Locals:         0       0       0       0       0
  5622 ;;      Temps:          4       0       0       0       0
  5623 ;;      Totals:         4       0       0       0       0
  5624 ;;Total ram usage:        4 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    1
  5627 ;; This function calls:
  5628 ;;		_UART_Read
  5629 ;;		_conteggioVeicoli
  5630 ;; This function is called by:
  5631 ;;		Interrupt level 1
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           
  5636                           ;psect for function _ISR
  5637  0C88                     _ISR:	
  5638  0C88                     i1l2616:	
  5639                           
  5640                           ;main.c: 583:     if (RCIF && readGateway.Bit == 0)
  5641  0C88  1283               	bcf	3,5	;RP0=0, select bank0
  5642  0C89  1303               	bcf	3,6	;RP1=0, select bank0
  5643  0C8A  1E8C               	btfss	12,5	;volatile
  5644  0C8B  2C8D               	goto	u247_21
  5645  0C8C  2C8E               	goto	u247_20
  5646  0C8D                     u247_21:	
  5647  0C8D  2C97               	goto	i1l2624
  5648  0C8E                     u247_20:	
  5649  0C8E                     i1l2618:	
  5650  0C8E  1863               	btfsc	_readGateway,0
  5651  0C8F  2C91               	goto	u248_21
  5652  0C90  2C92               	goto	u248_20
  5653  0C91                     u248_21:	
  5654  0C91  2C97               	goto	i1l2624
  5655  0C92                     u248_20:	
  5656  0C92                     i1l2620:	
  5657                           
  5658                           ;main.c: 584:     {;main.c: 585:         readGateway.Bit = 1;
  5659  0C92  1463               	bsf	_readGateway,0
  5660                           
  5661                           ;main.c: 586:         readGatewayDone.Bit = 0;
  5662  0C93  1064               	bcf	_readGatewayDone,0
  5663                           
  5664                           ;main.c: 587:         readGatewayDone.Timeout = 0;
  5665  0C94  10E4               	bcf	_readGatewayDone,1
  5666  0C95                     i1l2622:	
  5667                           
  5668                           ;main.c: 588:         dataFromGatewayIndex = 0;
  5669  0C95  01DA               	clrf	_dataFromGatewayIndex
  5670                           
  5671                           ;main.c: 589:         timerReadFromGateway = 0;
  5672  0C96  01D9               	clrf	_timerReadFromGateway
  5673  0C97                     i1l2624:	
  5674                           
  5675                           ;main.c: 591:     if (RCIF && readGateway.Bit == 1)
  5676  0C97  1E8C               	btfss	12,5	;volatile
  5677  0C98  2C9A               	goto	u249_21
  5678  0C99  2C9B               	goto	u249_20
  5679  0C9A                     u249_21:	
  5680  0C9A  2CB2               	goto	i1l2634
  5681  0C9B                     u249_20:	
  5682  0C9B                     i1l2626:	
  5683  0C9B  1C63               	btfss	_readGateway,0
  5684  0C9C  2C9E               	goto	u250_21
  5685  0C9D  2C9F               	goto	u250_20
  5686  0C9E                     u250_21:	
  5687  0C9E  2CB2               	goto	i1l2634
  5688  0C9F                     u250_20:	
  5689  0C9F                     i1l2628:	
  5690                           
  5691                           ;main.c: 592:     {;main.c: 593:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  5692  0C9F  120A  158A  22A2  120A  158A  	fcall	_UART_Read
  5693  0CA4  00F6               	movwf	??_ISR
  5694  0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  5695  0CA6  1303               	bcf	3,6	;RP1=0, select bank0
  5696  0CA7  085A               	movf	_dataFromGatewayIndex,w
  5697  0CA8  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  5698  0CA9  0084               	movwf	4
  5699  0CAA  0876               	movf	??_ISR,w
  5700  0CAB  1383               	bcf	3,7	;select IRP bank1
  5701  0CAC  0080               	movwf	0
  5702  0CAD                     i1l2630:	
  5703                           
  5704                           ;main.c: 594:         dataFromGatewayIndex++;
  5705  0CAD  3001               	movlw	1
  5706  0CAE  00F6               	movwf	??_ISR
  5707  0CAF  0876               	movf	??_ISR,w
  5708  0CB0  07DA               	addwf	_dataFromGatewayIndex,f
  5709  0CB1                     i1l2632:	
  5710                           
  5711                           ;main.c: 595:         timerReadFromGateway = 0;
  5712  0CB1  01D9               	clrf	_timerReadFromGateway
  5713  0CB2                     i1l2634:	
  5714                           
  5715                           ;main.c: 600:     if (TMR0IF)
  5716  0CB2  1D0B               	btfss	11,2	;volatile
  5717  0CB3  2CB5               	goto	u251_21
  5718  0CB4  2CB6               	goto	u251_20
  5719  0CB5                     u251_21:	
  5720  0CB5  2CC0               	goto	i1l2642
  5721  0CB6                     u251_20:	
  5722  0CB6                     i1l2636:	
  5723                           
  5724                           ;main.c: 601:     {;main.c: 602:         TMR0IF = 0;
  5725  0CB6  110B               	bcf	11,2	;volatile
  5726  0CB7                     i1l2638:	
  5727                           
  5728                           ;main.c: 603:         conteggioVeicoli();
  5729  0CB7  120A  118A  2648  120A  158A  	fcall	_conteggioVeicoli
  5730  0CBC                     i1l2640:	
  5731                           
  5732                           ;main.c: 604:         TMR0 = 6;
  5733  0CBC  3006               	movlw	6
  5734  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  5735  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  5736  0CBF  0081               	movwf	1	;volatile
  5737  0CC0                     i1l2642:	
  5738                           
  5739                           ;main.c: 607:     if (TMR1IF)
  5740  0CC0  1C0C               	btfss	12,0	;volatile
  5741  0CC1  2CC3               	goto	u252_21
  5742  0CC2  2CC4               	goto	u252_20
  5743  0CC3                     u252_21:	
  5744  0CC3  2CD9               	goto	i1l360
  5745  0CC4                     u252_20:	
  5746  0CC4                     i1l2644:	
  5747                           
  5748                           ;main.c: 608:     {;main.c: 609:         TMR1IF = 0;
  5749  0CC4  100C               	bcf	12,0	;volatile
  5750  0CC5                     i1l2646:	
  5751                           
  5752                           ;main.c: 610:         count_lux++;
  5753  0CC5  3001               	movlw	1
  5754  0CC6  00F6               	movwf	??_ISR
  5755  0CC7  0876               	movf	??_ISR,w
  5756  0CC8  07F4               	addwf	_count_lux,f
  5757  0CC9                     i1l2648:	
  5758                           
  5759                           ;main.c: 612:         if (count_lux >= 20)
  5760  0CC9  3014               	movlw	20
  5761  0CCA  0274               	subwf	_count_lux,w
  5762  0CCB  1C03               	skipc
  5763  0CCC  2CCE               	goto	u253_21
  5764  0CCD  2CCF               	goto	u253_20
  5765  0CCE                     u253_21:	
  5766  0CCE  2CD5               	goto	i1l2656
  5767  0CCF                     u253_20:	
  5768  0CCF                     i1l2650:	
  5769                           
  5770                           ;main.c: 613:         {;main.c: 614:             secondPassed.Bit = 1;
  5771  0CCF  1462               	bsf	_secondPassed,0
  5772  0CD0                     i1l2652:	
  5773                           
  5774                           ;main.c: 615:             count_lux = 0;
  5775  0CD0  01F4               	clrf	_count_lux
  5776  0CD1                     i1l2654:	
  5777                           
  5778                           ;main.c: 616:             timerReadFromGateway++;
  5779  0CD1  3001               	movlw	1
  5780  0CD2  00F6               	movwf	??_ISR
  5781  0CD3  0876               	movf	??_ISR,w
  5782  0CD4  07D9               	addwf	_timerReadFromGateway,f
  5783  0CD5                     i1l2656:	
  5784                           
  5785                           ;main.c: 619:         TMR1H = 60;
  5786  0CD5  303C               	movlw	60
  5787  0CD6  008F               	movwf	15	;volatile
  5788  0CD7                     i1l2658:	
  5789                           
  5790                           ;main.c: 620:         TMR1L = 176;
  5791  0CD7  30B0               	movlw	176
  5792  0CD8  008E               	movwf	14	;volatile
  5793  0CD9                     i1l360:	
  5794  0CD9  0879               	movf	??_ISR+3,w
  5795  0CDA  008A               	movwf	10
  5796  0CDB  0878               	movf	??_ISR+2,w
  5797  0CDC  0084               	movwf	4
  5798  0CDD  0E77               	swapf	(??_ISR+1)^(0+4294967168),w
  5799  0CDE  0083               	movwf	3
  5800  0CDF  0EFE               	swapf	btemp,f
  5801  0CE0  0E7E               	swapf	btemp,w
  5802  0CE1  0009               	retfie
  5803  0CE2                     __end_of_ISR:	
  5804                           
  5805                           	psect	intentry
  5806  0004                     __pintentry:	
  5807                           ;incstack = 0
  5808                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5809                           
  5810  0004                     interrupt_function:	
  5811  007E                     saved_w	set	btemp
  5812  0004  00FE               	movwf	btemp
  5813  0005  0E03               	swapf	3,w
  5814  0006  00F7               	movwf	??_ISR+1
  5815  0007  0804               	movf	4,w
  5816  0008  00F8               	movwf	??_ISR+2
  5817  0009  080A               	movf	10,w
  5818  000A  00F9               	movwf	??_ISR+3
  5819  000B  120A  158A  2C88   	ljmp	_ISR
  5820                           
  5821                           	psect	text20
  5822  0648                     __ptext20:	
  5823 ;; *************** function _conteggioVeicoli *****************
  5824 ;; Defined at:
  5825 ;;		line 492 in file "main.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;		None
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;		None
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  1    wreg      void 
  5832 ;; Registers used:
  5833 ;;		wreg, status,2, status,0
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5839 ;;      Params:         0       0       0       0       0
  5840 ;;      Locals:         0       0       0       0       0
  5841 ;;      Temps:          1       0       0       0       0
  5842 ;;      Totals:         1       0       0       0       0
  5843 ;;Total ram usage:        1 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; This function calls:
  5846 ;;		Nothing
  5847 ;; This function is called by:
  5848 ;;		_ISR
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           
  5853                           ;psect for function _conteggioVeicoli
  5854  0648                     _conteggioVeicoli:	
  5855  0648                     i1l2256:	
  5856                           ;incstack = 0
  5857                           ; Regs used in _conteggioVeicoli: [wreg+status,2+status,0]
  5858                           
  5859                           
  5860                           ;main.c: 495:     if (!PORTBbits.RB3)
  5861  0648  1283               	bcf	3,5	;RP0=0, select bank0
  5862  0649  1303               	bcf	3,6	;RP1=0, select bank0
  5863  064A  1986               	btfsc	6,3	;volatile
  5864  064B  2E4D               	goto	u193_21
  5865  064C  2E4E               	goto	u193_20
  5866  064D                     u193_21:	
  5867  064D  2E55               	goto	i1l326
  5868  064E                     u193_20:	
  5869  064E                     i1l2258:	
  5870                           
  5871                           ;main.c: 496:     {;main.c: 497:         count++;
  5872  064E  3001               	movlw	1
  5873  064F  07F0               	addwf	_count,f
  5874  0650  1803               	skipnc
  5875  0651  0AF1               	incf	_count+1,f
  5876  0652  3000               	movlw	0
  5877  0653  07F1               	addwf	_count+1,f
  5878                           
  5879                           ;main.c: 498:     }
  5880  0654  2E82               	goto	i1l2274
  5881  0655                     i1l326:	
  5882                           ;main.c: 499:     else if (PORTBbits.RB3)
  5883                           
  5884  0655  1D86               	btfss	6,3	;volatile
  5885  0656  2E58               	goto	u194_21
  5886  0657  2E59               	goto	u194_20
  5887  0658                     u194_21:	
  5888  0658  2E82               	goto	i1l2274
  5889  0659                     u194_20:	
  5890  0659                     i1l2260:	
  5891                           
  5892                           ;main.c: 500:     {;main.c: 501:         if (count >= 500)
  5893  0659  3001               	movlw	1
  5894  065A  0271               	subwf	_count+1,w
  5895  065B  30F4               	movlw	244
  5896  065C  1903               	skipnz
  5897  065D  0270               	subwf	_count,w
  5898  065E  1C03               	skipc
  5899  065F  2E61               	goto	u195_21
  5900  0660  2E62               	goto	u195_20
  5901  0661                     u195_21:	
  5902  0661  2E66               	goto	i1l2264
  5903  0662                     u195_20:	
  5904  0662                     i1l2262:	
  5905                           
  5906                           ;main.c: 502:         {;main.c: 503:             motorcycle[0]++;
  5907  0662  3001               	movlw	1
  5908  0663  00F5               	movwf	??_conteggioVeicoli
  5909  0664  0875               	movf	??_conteggioVeicoli,w
  5910  0665  07D4               	addwf	_motorcycle,f
  5911  0666                     i1l2264:	
  5912                           
  5913                           ;main.c: 505:         if (count >= 1500)
  5914  0666  3005               	movlw	5
  5915  0667  0271               	subwf	_count+1,w
  5916  0668  30DC               	movlw	220
  5917  0669  1903               	skipnz
  5918  066A  0270               	subwf	_count,w
  5919  066B  1C03               	skipc
  5920  066C  2E6E               	goto	u196_21
  5921  066D  2E6F               	goto	u196_20
  5922  066E                     u196_21:	
  5923  066E  2E73               	goto	i1l2268
  5924  066F                     u196_20:	
  5925  066F                     i1l2266:	
  5926                           
  5927                           ;main.c: 506:         {;main.c: 507:             car[0]++;
  5928  066F  3001               	movlw	1
  5929  0670  00F5               	movwf	??_conteggioVeicoli
  5930  0671  0875               	movf	??_conteggioVeicoli,w
  5931  0672  07D0               	addwf	_car,f
  5932  0673                     i1l2268:	
  5933                           
  5934                           ;main.c: 509:         if (count >= 3000)
  5935  0673  300B               	movlw	11
  5936  0674  0271               	subwf	_count+1,w
  5937  0675  30B8               	movlw	184
  5938  0676  1903               	skipnz
  5939  0677  0270               	subwf	_count,w
  5940  0678  1C03               	skipc
  5941  0679  2E7B               	goto	u197_21
  5942  067A  2E7C               	goto	u197_20
  5943  067B                     u197_21:	
  5944  067B  2E80               	goto	i1l2272
  5945  067C                     u197_20:	
  5946  067C                     i1l2270:	
  5947                           
  5948                           ;main.c: 510:         {;main.c: 511:             truck[0]++;
  5949  067C  3001               	movlw	1
  5950  067D  00F5               	movwf	??_conteggioVeicoli
  5951  067E  0875               	movf	??_conteggioVeicoli,w
  5952  067F  07CC               	addwf	_truck,f
  5953  0680                     i1l2272:	
  5954                           
  5955                           ;main.c: 513:         count = 0;
  5956  0680  01F0               	clrf	_count
  5957  0681  01F1               	clrf	_count+1
  5958  0682                     i1l2274:	
  5959                           
  5960                           ;main.c: 516:     if (!PORTBbits.RB4)
  5961  0682  1A06               	btfsc	6,4	;volatile
  5962  0683  2E85               	goto	u198_21
  5963  0684  2E86               	goto	u198_20
  5964  0685                     u198_21:	
  5965  0685  2E8D               	goto	i1l332
  5966  0686                     u198_20:	
  5967  0686                     i1l2276:	
  5968                           
  5969                           ;main.c: 517:     {;main.c: 518:         count++;
  5970  0686  3001               	movlw	1
  5971  0687  07F0               	addwf	_count,f
  5972  0688  1803               	skipnc
  5973  0689  0AF1               	incf	_count+1,f
  5974  068A  3000               	movlw	0
  5975  068B  07F1               	addwf	_count+1,f
  5976                           
  5977                           ;main.c: 519:     }
  5978  068C  2EBA               	goto	i1l2292
  5979  068D                     i1l332:	
  5980                           ;main.c: 520:     else if (PORTBbits.RB4)
  5981                           
  5982  068D  1E06               	btfss	6,4	;volatile
  5983  068E  2E90               	goto	u199_21
  5984  068F  2E91               	goto	u199_20
  5985  0690                     u199_21:	
  5986  0690  2EBA               	goto	i1l2292
  5987  0691                     u199_20:	
  5988  0691                     i1l2278:	
  5989                           
  5990                           ;main.c: 521:     {;main.c: 522:         if (count >= 500)
  5991  0691  3001               	movlw	1
  5992  0692  0271               	subwf	_count+1,w
  5993  0693  30F4               	movlw	244
  5994  0694  1903               	skipnz
  5995  0695  0270               	subwf	_count,w
  5996  0696  1C03               	skipc
  5997  0697  2E99               	goto	u200_21
  5998  0698  2E9A               	goto	u200_20
  5999  0699                     u200_21:	
  6000  0699  2E9E               	goto	i1l2282
  6001  069A                     u200_20:	
  6002  069A                     i1l2280:	
  6003                           
  6004                           ;main.c: 523:         {;main.c: 524:             motorcycle[1]++;
  6005  069A  3001               	movlw	1
  6006  069B  00F5               	movwf	??_conteggioVeicoli
  6007  069C  0875               	movf	??_conteggioVeicoli,w
  6008  069D  07D5               	addwf	_motorcycle+1,f
  6009  069E                     i1l2282:	
  6010                           
  6011                           ;main.c: 526:         if (count >= 1500)
  6012  069E  3005               	movlw	5
  6013  069F  0271               	subwf	_count+1,w
  6014  06A0  30DC               	movlw	220
  6015  06A1  1903               	skipnz
  6016  06A2  0270               	subwf	_count,w
  6017  06A3  1C03               	skipc
  6018  06A4  2EA6               	goto	u201_21
  6019  06A5  2EA7               	goto	u201_20
  6020  06A6                     u201_21:	
  6021  06A6  2EAB               	goto	i1l2286
  6022  06A7                     u201_20:	
  6023  06A7                     i1l2284:	
  6024                           
  6025                           ;main.c: 527:         {;main.c: 528:             car[1]++;
  6026  06A7  3001               	movlw	1
  6027  06A8  00F5               	movwf	??_conteggioVeicoli
  6028  06A9  0875               	movf	??_conteggioVeicoli,w
  6029  06AA  07D1               	addwf	_car+1,f
  6030  06AB                     i1l2286:	
  6031                           
  6032                           ;main.c: 530:         if (count >= 3000)
  6033  06AB  300B               	movlw	11
  6034  06AC  0271               	subwf	_count+1,w
  6035  06AD  30B8               	movlw	184
  6036  06AE  1903               	skipnz
  6037  06AF  0270               	subwf	_count,w
  6038  06B0  1C03               	skipc
  6039  06B1  2EB3               	goto	u202_21
  6040  06B2  2EB4               	goto	u202_20
  6041  06B3                     u202_21:	
  6042  06B3  2EB8               	goto	i1l2290
  6043  06B4                     u202_20:	
  6044  06B4                     i1l2288:	
  6045                           
  6046                           ;main.c: 531:         {;main.c: 532:             truck[1]++;
  6047  06B4  3001               	movlw	1
  6048  06B5  00F5               	movwf	??_conteggioVeicoli
  6049  06B6  0875               	movf	??_conteggioVeicoli,w
  6050  06B7  07CD               	addwf	_truck+1,f
  6051  06B8                     i1l2290:	
  6052                           
  6053                           ;main.c: 534:         count = 0;
  6054  06B8  01F0               	clrf	_count
  6055  06B9  01F1               	clrf	_count+1
  6056  06BA                     i1l2292:	
  6057                           
  6058                           ;main.c: 537:     if (!PORTBbits.RB5)
  6059  06BA  1A86               	btfsc	6,5	;volatile
  6060  06BB  2EBD               	goto	u203_21
  6061  06BC  2EBE               	goto	u203_20
  6062  06BD                     u203_21:	
  6063  06BD  2EC5               	goto	i1l338
  6064  06BE                     u203_20:	
  6065  06BE                     i1l2294:	
  6066                           
  6067                           ;main.c: 538:     {;main.c: 539:         count++;
  6068  06BE  3001               	movlw	1
  6069  06BF  07F0               	addwf	_count,f
  6070  06C0  1803               	skipnc
  6071  06C1  0AF1               	incf	_count+1,f
  6072  06C2  3000               	movlw	0
  6073  06C3  07F1               	addwf	_count+1,f
  6074                           
  6075                           ;main.c: 540:     }
  6076  06C4  2EF2               	goto	i1l2310
  6077  06C5                     i1l338:	
  6078                           ;main.c: 541:     else if (PORTBbits.RB5)
  6079                           
  6080  06C5  1E86               	btfss	6,5	;volatile
  6081  06C6  2EC8               	goto	u204_21
  6082  06C7  2EC9               	goto	u204_20
  6083  06C8                     u204_21:	
  6084  06C8  2EF2               	goto	i1l2310
  6085  06C9                     u204_20:	
  6086  06C9                     i1l2296:	
  6087                           
  6088                           ;main.c: 542:     {;main.c: 543:         if (count >= 500)
  6089  06C9  3001               	movlw	1
  6090  06CA  0271               	subwf	_count+1,w
  6091  06CB  30F4               	movlw	244
  6092  06CC  1903               	skipnz
  6093  06CD  0270               	subwf	_count,w
  6094  06CE  1C03               	skipc
  6095  06CF  2ED1               	goto	u205_21
  6096  06D0  2ED2               	goto	u205_20
  6097  06D1                     u205_21:	
  6098  06D1  2ED6               	goto	i1l2300
  6099  06D2                     u205_20:	
  6100  06D2                     i1l2298:	
  6101                           
  6102                           ;main.c: 544:         {;main.c: 545:             motorcycle[2]++;
  6103  06D2  3001               	movlw	1
  6104  06D3  00F5               	movwf	??_conteggioVeicoli
  6105  06D4  0875               	movf	??_conteggioVeicoli,w
  6106  06D5  07D6               	addwf	_motorcycle+2,f
  6107  06D6                     i1l2300:	
  6108                           
  6109                           ;main.c: 547:         if (count >= 1500)
  6110  06D6  3005               	movlw	5
  6111  06D7  0271               	subwf	_count+1,w
  6112  06D8  30DC               	movlw	220
  6113  06D9  1903               	skipnz
  6114  06DA  0270               	subwf	_count,w
  6115  06DB  1C03               	skipc
  6116  06DC  2EDE               	goto	u206_21
  6117  06DD  2EDF               	goto	u206_20
  6118  06DE                     u206_21:	
  6119  06DE  2EE3               	goto	i1l2304
  6120  06DF                     u206_20:	
  6121  06DF                     i1l2302:	
  6122                           
  6123                           ;main.c: 548:         {;main.c: 549:             car[2]++;
  6124  06DF  3001               	movlw	1
  6125  06E0  00F5               	movwf	??_conteggioVeicoli
  6126  06E1  0875               	movf	??_conteggioVeicoli,w
  6127  06E2  07D2               	addwf	_car+2,f
  6128  06E3                     i1l2304:	
  6129                           
  6130                           ;main.c: 551:         if (count >= 3000)
  6131  06E3  300B               	movlw	11
  6132  06E4  0271               	subwf	_count+1,w
  6133  06E5  30B8               	movlw	184
  6134  06E6  1903               	skipnz
  6135  06E7  0270               	subwf	_count,w
  6136  06E8  1C03               	skipc
  6137  06E9  2EEB               	goto	u207_21
  6138  06EA  2EEC               	goto	u207_20
  6139  06EB                     u207_21:	
  6140  06EB  2EF0               	goto	i1l2308
  6141  06EC                     u207_20:	
  6142  06EC                     i1l2306:	
  6143                           
  6144                           ;main.c: 552:         {;main.c: 553:             truck[2]++;
  6145  06EC  3001               	movlw	1
  6146  06ED  00F5               	movwf	??_conteggioVeicoli
  6147  06EE  0875               	movf	??_conteggioVeicoli,w
  6148  06EF  07CE               	addwf	_truck+2,f
  6149  06F0                     i1l2308:	
  6150                           
  6151                           ;main.c: 555:         count = 0;
  6152  06F0  01F0               	clrf	_count
  6153  06F1  01F1               	clrf	_count+1
  6154  06F2                     i1l2310:	
  6155                           
  6156                           ;main.c: 558:     if (!PORTAbits.RA5)
  6157  06F2  1A85               	btfsc	5,5	;volatile
  6158  06F3  2EF5               	goto	u208_21
  6159  06F4  2EF6               	goto	u208_20
  6160  06F5                     u208_21:	
  6161  06F5  2EFD               	goto	i1l344
  6162  06F6                     u208_20:	
  6163  06F6                     i1l2312:	
  6164                           
  6165                           ;main.c: 559:     {;main.c: 560:         count++;
  6166  06F6  3001               	movlw	1
  6167  06F7  07F0               	addwf	_count,f
  6168  06F8  1803               	skipnc
  6169  06F9  0AF1               	incf	_count+1,f
  6170  06FA  3000               	movlw	0
  6171  06FB  07F1               	addwf	_count+1,f
  6172                           
  6173                           ;main.c: 561:     }
  6174  06FC  2F2A               	goto	i1l350
  6175  06FD                     i1l344:	
  6176                           ;main.c: 562:     else if (PORTAbits.RA5)
  6177                           
  6178  06FD  1E85               	btfss	5,5	;volatile
  6179  06FE  2F00               	goto	u209_21
  6180  06FF  2F01               	goto	u209_20
  6181  0700                     u209_21:	
  6182  0700  2F2A               	goto	i1l350
  6183  0701                     u209_20:	
  6184  0701                     i1l2314:	
  6185                           
  6186                           ;main.c: 563:     {;main.c: 564:         if (count >= 500)
  6187  0701  3001               	movlw	1
  6188  0702  0271               	subwf	_count+1,w
  6189  0703  30F4               	movlw	244
  6190  0704  1903               	skipnz
  6191  0705  0270               	subwf	_count,w
  6192  0706  1C03               	skipc
  6193  0707  2F09               	goto	u210_21
  6194  0708  2F0A               	goto	u210_20
  6195  0709                     u210_21:	
  6196  0709  2F0E               	goto	i1l2318
  6197  070A                     u210_20:	
  6198  070A                     i1l2316:	
  6199                           
  6200                           ;main.c: 565:         {;main.c: 566:             motorcycle[3]++;
  6201  070A  3001               	movlw	1
  6202  070B  00F5               	movwf	??_conteggioVeicoli
  6203  070C  0875               	movf	??_conteggioVeicoli,w
  6204  070D  07D7               	addwf	_motorcycle+3,f
  6205  070E                     i1l2318:	
  6206                           
  6207                           ;main.c: 568:         if (count >= 1500)
  6208  070E  3005               	movlw	5
  6209  070F  0271               	subwf	_count+1,w
  6210  0710  30DC               	movlw	220
  6211  0711  1903               	skipnz
  6212  0712  0270               	subwf	_count,w
  6213  0713  1C03               	skipc
  6214  0714  2F16               	goto	u211_21
  6215  0715  2F17               	goto	u211_20
  6216  0716                     u211_21:	
  6217  0716  2F1B               	goto	i1l2322
  6218  0717                     u211_20:	
  6219  0717                     i1l2320:	
  6220                           
  6221                           ;main.c: 569:         {;main.c: 570:             car[3]++;
  6222  0717  3001               	movlw	1
  6223  0718  00F5               	movwf	??_conteggioVeicoli
  6224  0719  0875               	movf	??_conteggioVeicoli,w
  6225  071A  07D3               	addwf	_car+3,f
  6226  071B                     i1l2322:	
  6227                           
  6228                           ;main.c: 572:         if (count >= 3000)
  6229  071B  300B               	movlw	11
  6230  071C  0271               	subwf	_count+1,w
  6231  071D  30B8               	movlw	184
  6232  071E  1903               	skipnz
  6233  071F  0270               	subwf	_count,w
  6234  0720  1C03               	skipc
  6235  0721  2F23               	goto	u212_21
  6236  0722  2F24               	goto	u212_20
  6237  0723                     u212_21:	
  6238  0723  2F28               	goto	i1l2326
  6239  0724                     u212_20:	
  6240  0724                     i1l2324:	
  6241                           
  6242                           ;main.c: 573:         {;main.c: 574:             truck[3]++;
  6243  0724  3001               	movlw	1
  6244  0725  00F5               	movwf	??_conteggioVeicoli
  6245  0726  0875               	movf	??_conteggioVeicoli,w
  6246  0727  07CF               	addwf	_truck+3,f
  6247  0728                     i1l2326:	
  6248                           
  6249                           ;main.c: 576:         count = 0;
  6250  0728  01F0               	clrf	_count
  6251  0729  01F1               	clrf	_count+1
  6252  072A                     i1l350:	
  6253  072A  0008               	return
  6254  072B                     __end_of_conteggioVeicoli:	
  6255                           
  6256                           	psect	text21
  6257  0AA2                     __ptext21:	
  6258 ;; *************** function _UART_Read *****************
  6259 ;; Defined at:
  6260 ;;		line 417 in file "main.c"
  6261 ;; Parameters:    Size  Location     Type
  6262 ;;		None
  6263 ;; Auto vars:     Size  Location     Type
  6264 ;;		None
  6265 ;; Return value:  Size  Location     Type
  6266 ;;                  1    wreg      unsigned char 
  6267 ;; Registers used:
  6268 ;;		wreg
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6274 ;;      Params:         0       0       0       0       0
  6275 ;;      Locals:         0       0       0       0       0
  6276 ;;      Temps:          0       0       0       0       0
  6277 ;;      Totals:         0       0       0       0       0
  6278 ;;Total ram usage:        0 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; This function calls:
  6281 ;;		Nothing
  6282 ;; This function is called by:
  6283 ;;		_ISR
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           
  6288                           ;psect for function _UART_Read
  6289  0AA2                     _UART_Read:	
  6290  0AA2                     i1l2250:	
  6291                           ;incstack = 0
  6292                           ; Regs used in _UART_Read: [wreg]
  6293                           
  6294  0AA2                     i1l294:	
  6295                           ;main.c: 420:         ;
  6296                           
  6297                           
  6298                           ;main.c: 419:     while (!RCIF)
  6299  0AA2  1283               	bcf	3,5	;RP0=0, select bank0
  6300  0AA3  1303               	bcf	3,6	;RP1=0, select bank0
  6301  0AA4  1E8C               	btfss	12,5	;volatile
  6302  0AA5  2AA7               	goto	u192_21
  6303  0AA6  2AA8               	goto	u192_20
  6304  0AA7                     u192_21:	
  6305  0AA7  2AA2               	goto	i1l294
  6306  0AA8                     u192_20:	
  6307  0AA8                     i1l296:	
  6308                           
  6309                           ;main.c: 421:     RCIF = 0;
  6310  0AA8  128C               	bcf	12,5	;volatile
  6311  0AA9                     i1l2252:	
  6312                           
  6313                           ;main.c: 422:     return RCREG;
  6314  0AA9  081A               	movf	26,w	;volatile
  6315  0AAA                     i1l297:	
  6316  0AAA  0008               	return
  6317  0AAB                     __end_of_UART_Read:	
  6318  007E                     btemp	set	126	;btemp
  6319  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        45
    BSS         224
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     44      69
    BANK1            80      0      71
    BANK3            96      0      96
    BANK2            96     20      92

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   18583
                                             28 BANK0     16    16      0
                                              0 BANK2     20    20      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                          _bitParita
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    4067
                                             20 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1138
                                              0 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4368
                                             16 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1636
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1113
                                              4 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     276
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             15 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3    1204
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    14     8      6     716
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              8     6      2     232
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             16 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              1 COMMON     4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   _bitParita
     _bitChange
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     14      5C      11       95.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     152      12        0.0%
ABS                  0      0     152       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Jun 22 15:10:25 2020

                        pc 0002             ___bmul@product 0022                __CFG_CP$OFF 0000  
                       l83 0C0D                         l98 0BA7               ___awdiv@sign 002D  
                       _s0 00BB                         _s1 00AF                         _s2 01E4  
                       _s3 01D8                         _s4 01CC                         _s5 01C0  
                       _s6 01B4                         _s7 01A8                         _s8 019C  
                       _s9 0190                         fsr 0004        ___wmul@multiplicand 0022  
           _GetDigits$1151 0035                __CFG_LVP$ON 0000                        l110 07B2  
                      l111 07BE                        l113 07F3                        l105 0762  
                      l106 076E                        l212 0338                        l125 0FD7  
                      l302 0BD8                        l214 00A2                        l311 0AF2  
                      l119 0F86                        l128 0FFF                        l305 0C87  
                      l234 03D4                        l323 0E9A                        l308 0E10  
                      l228 022F                        l270 0ACA                        l511 0EAF  
                      l263 063B                        l239 04CB                        l273 0B43  
                      l521 0F37                        l282 07F7                        l276 0B4F  
                      l612 0D3C                        l284 07FB                        l285 07FE  
                      l446 0B5E                        l279 0C47                        l472 0B09  
                      l448 0B76                        l599 0DA5               __CFG_CPD$OFF 0000  
                      _ISR 0C88                        _s10 014C                        _s11 0140  
                      _s12 0134                        _s13 0128                        _s14 011C  
                      _s15 0110                        _car 0050                        _map 0BD9  
                      fsr0 0004                        indf 0000               ___awmod@sign 0026  
             __CFG_FOSC$HS 0000                       ?_ISR 0075                main@colorId 0159  
                     l3000 0735                       l3010 0755                       l3012 0768  
                     l3100 0BBE                       l3030 0789                       l3014 076A  
                     l3006 0739                       l3110 0BCE                       l3120 0B47  
                     l3040 07C4                       l3032 079F                       l3024 0785  
                     l3016 0774                       l3008 074F                       l3112 0BD2  
                     l3200 0091                       l3114 0B2D                       l3130 0C70  
                     l3042 07D1                       l3034 07A5                       l3018 0781  
                     l3050 0ABF                       l3106 0BBF                       l3210 0099  
                     l3202 0093                       l3116 0B39                       l3140 0DAC  
                     l3132 0C7B                       l3124 0C4B                       l3060 0C45  
                     l3044 07D8                       l3036 07B8                       l3052 0AC3  
                     l3108 0BC8                       l3300 033F                       l3212 0099  
                     l3204 0096                       l3118 0B40                       l3142 0DC2  
                     l3134 0C83                       l3126 0C57                       l3070 0E14  
                     l3150 0AF0                       l3062 0C46                       l3054 0C0E  
                     l3038 07BA                       l3046 0AB8                       l3310 0350  
                     l3302 0341                       l3230 017E                       l3214 009C  
                     l3206 0099                       l3144 0DE7                       l3128 0C5F  
                     l3080 0E54                       l3064 0E11                       l3056 0C16  
                     l3160 0B01                       l3152 0AF6                       l3048 0ABC  
                     l3400 0603                       l3320 0384                       l3304 0345  
                     l3240 01EF                       l3224 00A9                       l3208 0099  
                     l3146 0DFD                       l3138 0DA6                       l3090 0E90  
                     l3058 0C44                       l3162 0B08                       l3154 0AF7  
                     l3410 063F                       l3402 0619                       l3330 03DA  
                     l3322 038F                       l3314 0357                       l3306 0347  
                     l3242 01F3                       l3226 00F0                       l3234 01C5  
                     l3218 00A4                       l3092 0E94                       l3076 0E16  
                     l3084 0E73                       l3148 0AE1                       l3156 0AFB  
                     l3412 0643                       l3404 0631                       l3332 03DB  
                     l3324 03A1                       l3316 036C                       l3308 034D  
                     l3260 0226                       l3252 0217                       l3228 0137  
                     l3236 01DA                       l3180 005D                       l3078 0E35  
                     l3086 0E86                       l3158 0AFF                       l3406 0635  
                     l3350 0493                       l3342 03EA                       l3326 03CD  
                     l3318 0378                       l3270 02E7                       l3254 021A  
                     l3246 0201                       l3238 01E2                       l3190 0068  
                     l3182 005E                       l3088 0E8A                       l3408 0639  
                     l3360 04D0                       l3344 043F                       l3336 03E2  
                     l3280 0307                       l3272 02F8                       l3264 0231  
                     l3248 0210                       l3192 006A                       l3184 0060  
                     l2810 0F94                       l2802 0F5F                       l3098 0BAB  
                     l3370 0519                       l3362 04D4                       l3346 048C  
                     l3338 03E3                       l3354 049C                       l3290 031F  
                     l3274 02FB                       l3266 02C5                       l3258 0221  
                     l3194 006F                       l3186 0062                       l3178 0057  
                     l2900 0F1F                       l2804 0F73                       l3372 051D  
                     l3364 04DC                       l3380 0595                       l3356 04A3  
                     l3284 0310                       l3268 02D6                       l3196 007A  
                     l3188 0064                       l2910 0D40                       l2902 0F24  
                     l2830 0FB0                       l2814 0F95                       l2806 0F79  
                     l3390 05C0                       l3382 059D                       l3374 0525  
                     l3366 04DD                       l3358 04C6                       l3286 0316  
                     l3278 0302                       l3550 01CC                       l3294 0323  
                     l3198 008D                       l2920 0D54                       l2912 0D44  
                     l2904 0F2F                       l2832 0FC4                       l2824 0FAC  
                     l2816 0F9B                       l2808 0F8C                       l3392 05C5  
                     l3384 05A2                       l3376 0558                       l3368 0516  
                     l3296 033D                       l3552 0330                       l3288 0319  
                     l2930 0D6A                       l2922 0D58                       l2914 0D49  
                     l2770 0B7A                       l2842 0FEB                       l2834 0FCA  
                     l2818 0FA8                       l2850 07F7                       l3554 060B  
                     l3394 05DA                       l3386 05A7                       l3378 055B  
                     l3298 033E                       l2940 0D8A                       l2932 0D6E  
                     l2924 0D5A                       l2916 0D4B                       l2908 0D3D  
                     l3556 0E7B                       l2772 0B89                       l2860 0B65  
                     l2844 0FF1                       l2836 0FDD                       l2852 07FC  
                     l3396 05EF                       l3388 05BB                       l2942 0D91  
                     l2934 0D72                       l2926 0D60                       l2918 0D4F  
                     l2870 0E9E                       l2862 0B6C                       l2854 0B50  
                     l2846 0FFE                       l2838 0FEA                       l2790 0F59  
                     l2782 0F3B                       ?_map 0030                       l2936 0D83  
                     l2928 0D63                       l2944 0D97                       l2960 0CF0  
                     l2952 0CE2                       l2880 0ECA                       l2872 0EA2  
                     l2864 0B72                       l2856 0B54                       l2784 0F4A  
                     l2946 0D9C                       l2938 0D89                       l2970 0D09  
                     l2962 0CF4                       l2954 0CE5                       l2890 0EEF  
                     l2882 0ED2                       l2874 0EB3                       l2778 0B98  
                     l2858 0B58                       l2786 0F57                       l2948 0DA1  
                     l2980 0D28                       l2972 0D0D                       l2964 0CF9  
                     l2956 0CE9                       l2892 0F01                       l2884 0ED5  
                     l2876 0EBE                       l2868 0E9B                       l2796 0F5B  
                     l2788 0F58                       l2974 0D11                       l2966 0CFF  
                     l2982 0D2E                       l2958 0CEE                       l2894 0F0F  
                     l2886 0EE2                       l2878 0EC2                       l2990 0BD9  
                     l2984 0D33                       l2976 0D1B                       l2968 0D02  
                     l2896 0F10                       l2888 0EE6                       l2986 0D38  
                     l2978 0D21                       l2898 0F19                       l2994 072E  
                     u3000 0D2E                       u3001 0D2D                       u3010 0D33  
                     u3011 0D32                       u3100 07D8                       u3101 07D7  
                     u3110 0C25                       u3030 0762                       u3031 0761  
                     u3120 0E90                       u3040 0768                       u3024 0747  
                     u3121 0E8F                       u3041 0767                       u3025 0745  
                     u3130 0E9A                       u3050 0781                       u3210 00A1  
                     u3131 0E99                       u3115 0C20                       u3051 0780  
                     u3035 075E                       u3211 00A0                       u3140 0BD8  
                     u3300 0356                       u3220 01EF                       u3141 0BD7  
                     u3301 0355                       u3221 01EE                       u3070 07B2  
                     u3230 0200                       u3071 07B1                       u3055 077D  
                     u3231 01FF                       u3160 0B47                       u3080 07B8  
                     u3064 0797                       u2600 0F86                       u3400 0516  
                     u3320 03DA                       u3240 0220                       u3161 0B46  
                     u3081 07B7                       u3065 0795                       u2601 0F85  
                     u3401 0515                       u3321 03D9                       u3241 021F  
                     u3225 01EB                       u3090 07D1                       u2610 0F8C  
                     u3410 0525                       u3330 03E1                       u3250 0301  
                     u3155 0B30                       u3091 07D0                       u3075 07AE  
                     u2611 0F8B                       u3411 0524                       u3331 03E0  
                     u3315 0394                       u3251 0300                       u3235 01FC  
                     u3180 0AFB                       u2620 0FA8                       u3500 0643  
                     u3420 0558                       u3340 03E9                       u3260 0316  
                     u3181 0AFA                       u2621 0FA7                       u2605 0F82  
                     u3501 0642                       u3421 0557                       u3341 03E8  
                     u3261 0315                       u3190 0B08                       u2550 0B89  
                     u3430 059D                       u3350 043F                       u3270 031F  
                     u3175 0C65                       u3191 0B07                       u2551 0B88  
                     u3095 07CD                       u3431 059C                       u3351 043E  
                     u3271 031E                       u2544 0B80                       u2720 0B72  
                     u2640 0FD7                       u3440 05A7                       u3360 04C6  
                     u3280 033D                       u2545 0B7E                       u2721 0B71  
                     u2705 0B5F                       u2641 0FD6                       u2625 0FA4  
                     u3441 05A6                       u3425 0554                       u3361 04C5  
                     u3281 033C                       u2810 0F1F                       u2730 0EA2  
                     u2650 0FDD                       u2634 0FBC                       u3450 05C0  
                     u3370 04CB                       u3290 0345                       u2811 0F1E  
                     u2731 0EA1                       u2715 0B66                       u2651 0FDC  
                     u2635 0FBA                       u3451 05BF                       u3371 04CA  
                     u3355 043B                       u3291 0344                       u2820 0F24  
                     u2740 0EB3                       u2564 0B8F                       u3460 05C5  
                     u3380 04D0                       u2821 0F23                       u2805 0F11  
                     u2741 0EB2                       u2565 0B8D                       u2645 0FD3  
                     u3461 05C4                       u3381 04CF                       u2910 0D97  
                     u2830 0D44                       u2750 0ED2                       u2574 0B9E  
                     u2670 0FFE                       u3470 0635                       u3390 04D4  
                     u2911 0D96                       u2831 0D43                       u2751 0ED1  
                     u2575 0B9C                       u3527 0AC7                       u2671 0FFD  
                     u3471 0634                       u3391 04D3                       u2920 0D9C  
                     u2840 0D4F                       u2664 0FE3                       u2680 07FB  
                     u3480 0639                       u3537 0B3D                       u2921 0D9B  
                     u2905 0D8B                       u2841 0D4E                       u2665 0FE1  
                     u2585 0F4D                       u2681 07FA                       u3481 0638  
                     u2850 0D60                       u2930 0CE9                       u2770 0EE6  
                     u2690 0B58                       u2594 0F6B                       u3490 063F  
                     u2851 0D5F                       u2931 0CE8                       u2771 0EE5  
                     u2691 0B57                       u2675 0FFA                       u2595 0F69  
                     u3491 063E                       u2940 0CF4                       u2941 0CF3  
                     u2765 0ED7                       u2870 0D72                       u2950 0CFF  
                     u2790 0F01                       u2871 0D71                       u2951 0CFE  
                     u2791 0F00                       u2865 0D64                       u2785 0EE8  
                     u2890 0D83                       u2970 0D11                       u2891 0D82  
                     u2971 0D10                       u2795 0EFD                       u2980 0D1B  
                     _RCIF 0065                       u2885 0D73                       u2981 0D1A  
                     u2965 0D03                       u2895 0D7F                       u2985 0D17  
                     u2995 0D22                       _TMR0 0001                       _TXIF 0064  
             __CFG_WRT$OFF 0000                       _disp 005C                       _main 0057  
                     _time 0072                       map@x 0030                       btemp 007E  
         __end_of_ADC_Read 0B50              __CFG_BOREN$ON 0000                main@umidita 015B  
                     start 000E            __end_of_GetTime 0C88          ___bmul@multiplier 0023  
             main@endCiclo 015D                      ??_ISR 0076  __size_of_conteggioVeicoli 00E3  
                    ??_map 003A            __end_of___aldiv 0F38                      ?_main 0075  
          __end_of___awdiv 0DA6              __CFG_WDTE$OFF 0000            __end_of___awmod 0D3D  
          ___awdiv@divisor 0027                      _T1CON 0010       bitParita@errorColumn 002A  
                    i1l332 068D                      i1l350 072A                      i1l326 0655  
                    i1l344 06FD                      i1l360 0CD9                      i1l338 06C5  
                    i1l294 0AA2                      i1l296 0AA8                      i1l297 0AAA  
          ___awdiv@counter 002C                      _RCREG 001A                      _TMR1H 000F  
                    _TMR1L 000E                      _SPBRG 0099                      _PORTD 0008  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _TRISE 0089                      _TXREG 0019  
            __CFG_PWRTE$ON 0000         __size_of_UART_Init 003A         __size_of_UART_Read 0009  
          __end_of_display 0811                      _count 0070                      _unita 0060  
                    main@i 016A                      main@l 0168                      _truck 004C  
                    pclath 000A                      status 0003                      wtemp0 007E  
          __initialization 0011               __end_of_main 0648         __size_of_GetDigits 006B  
                   ??_main 003C          SetDefaultTimers@i 002D          SetDefaultTimers@l 002C  
       __size_of_BuildByte 00C8                 _SetDisplay 0ADE              bitChange@dato 0023  
                   _ADCON0 001F                     _ADCON1 009F                     _ADRESH 001E  
                   _ADRESL 009E           ___awdiv@dividend 0029                     i1l2300 06D6  
                   i1l2302 06DF                     i1l2310 06F2                     i1l2320 0717  
                   i1l2312 06F6                     i1l2304 06E3                     u200_20 069A  
                   u200_21 0699                     i1l2250 0AA2                     i1l2322 071B  
                   i1l2314 0701                     i1l2306 06EC                     i1l2252 0AA9  
                   i1l2324 0724                     i1l2316 070A                     i1l2308 06F0  
                   i1l2260 0659                     i1l2326 0728                     i1l2318 070E  
                   i1l2270 067C                     i1l2262 0662                     u201_20 06A7  
                   i1l2280 069A                     i1l2272 0680                     i1l2264 0666  
                   i1l2256 0648                     u201_21 06A6                     i1l2290 06B8  
                   i1l2282 069E                     i1l2266 066F                     i1l2274 0682  
                   i1l2258 064E                     i1l2284 06A7                     i1l2292 06BA  
                   i1l2276 0686                     i1l2268 0673                     i1l2620 0C92  
                   i1l2294 06BE                     i1l2286 06AB                     i1l2278 0691  
                   i1l2630 0CAD                     i1l2622 0C95                     u210_20 070A  
                   i1l2296 06C9                     i1l2288 06B4                     u202_20 06B4  
                   i1l2640 0CBC                     i1l2632 0CB1                     i1l2624 0C97  
                   i1l2616 0C88                     u210_21 0709                     u202_21 06B3  
                   i1l2298 06D2                     i1l2650 0CCF                     i1l2642 0CC0  
                   i1l2626 0C9B                     i1l2634 0CB2                     i1l2618 0C8E  
                   i1l2652 0CD0                     i1l2644 0CC4                     i1l2636 0CB6  
                   i1l2628 0C9F                     i1l2654 0CD1                     i1l2646 0CC5  
                   i1l2638 0CB7                     u211_20 0717                     u203_20 06BE  
                   i1l2656 0CD5                     i1l2648 0CC9                     u211_21 0716  
                   u203_21 06BD                     i1l2658 0CD7                     u212_20 0724  
                   u204_20 06C9                     u212_21 0723                     u204_21 06C8  
                   u205_20 06D2                     u205_21 06D1                     u206_20 06DF  
                   u206_21 06DE                     u207_20 06EC                     u207_21 06EB  
                   u208_20 06F6                     u208_21 06F5                     u209_20 0701  
                   _INTCON 000B                     u209_21 0700                     u250_20 0C9F  
                   u250_21 0C9E                     u251_20 0CB6                     u251_21 0CB5  
                   u252_20 0CC4                     u252_21 0CC3                     u253_20 0CCF  
                   u253_21 0CCE                     u247_20 0C8E                     u247_21 0C8D  
                   u192_20 0AA8                     u248_20 0C92                     u192_21 0AA7  
                   u248_21 0C91                     u193_20 064E                     u249_20 0C9B  
                   u193_21 064D                     u249_21 0C9A                     u194_20 0659  
                   u194_21 0658                     u195_20 0662                     u195_21 0661  
                   u196_20 066F                     u196_21 066E                     u197_20 067C  
                   u197_21 067B                     u198_20 0686                     u198_21 0685  
                   u199_20 0691                     u199_21 0690                     _TMR0IF 005A  
                   _TMR1IF 0060                  ??_GetTime 0022               ?_UART_TxChar 0075  
        __end_of_UART_Init 0C48          __end_of_UART_Read 0AAB                     ___bmul 0AF3  
                ??___aldiv 0028            GetTime@shortInt 0025                     ___wmul 0B50  
                ??___awdiv 002B                     _decine 005F                  ??___awmod 0024  
         __end_of_init_ADC 0ACB                     _cycled 0061           ___awdiv@quotient 002E  
          ___awmod@divisor 0020            ___awmod@counter 0025           __end_of_sendByte 0BD9  
            main@pressione 015C                  ?_ADC_Read 0020                     saved_w 007E  
  __end_of__initialization 0053          __end_of_GetDigits 0E11       bitParita@sommaColumn 0029  
__size_of_SetDefaultTimers 008A        ___bmul@multiplicand 0020             __pcstackCOMMON 0075  
        __end_of_BuildByte 1000               __pidataBANK0 0AAB               __pidataBANK1 0B0A  
       __size_of_bitChange 0031           _conteggioVeicoli 0648         __size_of_bitParita 00C9  
               ??_ADC_Read 0022     SetDefaultTimers@giallo 0024                ?_SetDisplay 0020  
            GetDigits@Time 0030       _dataFromGatewayIndex 005A       _timerReadFromGateway 0059  
               __pbssBANK0 0059                 __pbssBANK1 00A0                 __pbssBANK2 0110  
               __pbssBANK3 0190                 __pmaintext 0057                    ?___bmul 0020  
                  ?___wmul 0020              sendByte@byte0 0039              sendByte@byte1 0034  
               __pintentry 0004          __end_of_bitChange 0BA8                 __stringtab 0800  
        __end_of_bitParita 07F4                  ?_init_ADC 0075                    _GetTime 0C48  
          BuildByte@valore 0021            BuildByte@txByte 0025                  ?_sendByte 0034  
               bitChange@n 0020                 _n_semafori 0058       __size_of_UART_TxChar 000B  
                  ___aldiv 0E9B            __size_of___bmul 0017                    ___awdiv 0D3D  
                  ___awmod 0CE2        __size_of_SetDisplay 0015            __size_of___wmul 0027  
                  __ptext1 0BA8                    __ptext2 07F4                    __ptext3 0F38  
                  __ptext4 0BD9                    __ptext5 0B50                    __ptext6 0AB8  
                  __ptext7 072B                    __ptext8 0B77                    __ptext9 0AF3  
           main@semaforoId 0158                    _comando 0073                    _display 0806  
             __size_of_ISR 005A                 bitParita@i 0032                 bitParita@y 002D  
             __size_of_map 0035           ___awmod@dividend 0022           ___aldiv@dividend 0024  
     BuildByte@sommaColumn 002B                    clrloop0 0A9B                    main@tmp 015E  
     end_of_initialization 0053                 ??_init_ADC 0020             main@lux_select 015F  
               ??_sendByte 0036           _SetDefaultTimers 0E11                  _RCSTAbits 0018  
         ___aldiv@quotient 002B                 _motorcycle 0054                  _UART_Init 0C0E  
                _UART_Read 0AA2                  _PORTAbits 0005                  _PORTBbits 0006  
             SetDisplay@d1 0023               SetDisplay@d2 0020               SetDisplay@d3 0021  
                _TRISCbits 0087          __size_of_ADC_Read 0026   __end_of_conteggioVeicoli 072B  
               map@out_max 0038          bitParita@errorRow 002C                 map@out_min 0036  
                _TXSTAbits 0098                  _GetDigits 0DA6          bitParita@sommaRow 0028  
           __end_of___bmul 0B0A             __end_of___wmul 0B77                 ?_UART_Init 002F  
               ?_UART_Read 0075                  _BuildByte 0F38          BuildByte@sommaRow 002A  
      start_initialization 0011                __end_of_ISR 0CE2               ??_SetDisplay 0023  
              __end_of_map 0C0E                 ?_GetDigits 0030                   ??___bmul 0021  
           ADC_Read@canale 0023                   ??___wmul 0024                 init_fetch0 0ACB  
              __pdataBANK0 004C                __pdataBANK1 00C7         __end_of_SetDisplay 0AF3  
               ?_BuildByte 0020                __pbssCOMMON 0070                  ___latbits 0002  
            __pcstackBANK0 0020              __pcstackBANK2 0158                   ?_GetTime 0020  
                _bitChange 0B77      SetDefaultTimers@verde 0022      SetDefaultTimers@rosso 0020  
        __size_of_init_ADC 0013                  _bitParita 072B                  _centinaia 005E  
        __size_of_sendByte 0031                   ?___aldiv 0020                   ?___awdiv 0027  
                 ?___awmod 0020                ??_UART_Init 0031                ??_UART_Read 0075  
           BuildByte@i_342 0032                  __pstrings 0800             BuildByte@y_343 002E  
           sendByte@valore 0035             sendByte@txByte 003A             BuildByte@byte0 0024  
           BuildByte@byte1 0020   __end_of_SetDefaultTimers 0E9B                   _ADC_Read 0B2A  
                _count_lux 0074                  _countdown 005B              UART_TxChar@ch 0020  
          ___aldiv@divisor 0020          interrupt_function 0004            ___aldiv@counter 0029  
               ?_bitChange 0020             ___wmul@product 0024                  clear_ram0 0A9A  
                 _PIE1bits 008C              ??_UART_TxChar 0020                 ?_bitParita 0075  
              ??_GetDigits 0032                   _GO_nDONE 00FA          UART_Init@baudrate 002F  
              ??_BuildByte 0022                  map@in_max 0034                  map@in_min 0032  
              __stringbase 0805                  main@i_442 0165                  main@i_436 0166  
                main@i_437 0163                  main@i_439 0164                  main@i_449 0169  
        ___wmul@multiplier 0020                  main@index 0160               GetTime@index 0024  
        ?_conteggioVeicoli 0075               _secondPassed 0062         ??_conteggioVeicoli 0075  
         __size_of_GetTime 0040                   _Semafori 00C7             bitParita@i_330 0034  
              _readGateway 0063             bitParita@y_331 002F           __size_of___aldiv 009D  
      __end_of_UART_TxChar 07FF           __size_of___awdiv 0069           __size_of___awmod 005B  
           bitParita@error 002B         __end_of__stringtab 0806                  sendByte@i 003B  
                 __ptext10 0C0E                   __ptext11 0E9B                   __ptext20 0648  
                 __ptext12 0ADE                   __ptext21 0AA2                   __ptext13 0E11  
                 __ptext14 0C48                   __ptext15 0DA6                   __ptext16 0CE2  
                 __ptext17 0D3D                   __ptext18 0B2A                   __ptext19 0C88  
                 _init_ADC 0AB8                bitParita@rx 0031                ??_bitChange 0021  
            __size_of_main 05F1            _dataFromGateway 00A0                   _old_disp 005D  
              ??_bitParita 0024                   _sendByte 0BA8                   main@temp 015A  
                 main@time 0161                GetTime@time 0026                 _INTCONbits 000B  
                 init_ram0 0ACF                   intlevel1 0000            _readGatewayDone 0064  
                stringcode 0800                _UART_TxChar 07F4                 _OPTION_REG 0081  
          SetDisplay@value 0022                   stringdir 0800                   stringtab 0800  
        ?_SetDefaultTimers 0020               ___aldiv@sign 002A         ??_SetDefaultTimers 0026  
               BuildByte@i 0030                 BuildByte@y 002C  
