

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Jun 18 16:06:55 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 2.10
    43                           ; Generated 31/07/2019 GMT
    44                           ; 
    45                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F877A Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0088                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009C                     	;# 
   187  009D                     	;# 
   188  009E                     	;# 
   189  009F                     	;# 
   190  010C                     	;# 
   191  010D                     	;# 
   192  010E                     	;# 
   193  010F                     	;# 
   194  018C                     	;# 
   195  018D                     	;# 
   196                           
   197                           	psect	idataBANK1
   198  07DD                     __pidataBANK1:	
   199                           
   200                           ;initializer for _Semafori
   201  07DD  34C3               	retlw	low (_s0| 0)
   202  07DE  3400               	retlw	high (_s0| 0)
   203  07DF  34B7               	retlw	low (_s1| 0)
   204  07E0  3400               	retlw	high (_s1| 0)
   205  07E1  34E4               	retlw	low (_s2| (0+256))
   206  07E2  3401               	retlw	high (_s2| (0+256))
   207  07E3  34D8               	retlw	low (_s3| (0+256))
   208  07E4  3401               	retlw	high (_s3| (0+256))
   209  07E5  34CC               	retlw	low (_s4| (0+256))
   210  07E6  3401               	retlw	high (_s4| (0+256))
   211  07E7  34C0               	retlw	low (_s5| (0+256))
   212  07E8  3401               	retlw	high (_s5| (0+256))
   213  07E9  34B4               	retlw	low (_s6| (0+256))
   214  07EA  3401               	retlw	high (_s6| (0+256))
   215  07EB  34A8               	retlw	low (_s7| (0+256))
   216  07EC  3401               	retlw	high (_s7| (0+256))
   217  07ED  349C               	retlw	low (_s8| (0+256))
   218  07EE  3401               	retlw	high (_s8| (0+256))
   219  07EF  3490               	retlw	low (_s9| (0+256))
   220  07F0  3401               	retlw	high (_s9| (0+256))
   221  07F1  344C               	retlw	low (_s10| (0+256))
   222  07F2  3401               	retlw	high (_s10| (0+256))
   223  07F3  3440               	retlw	low (_s11| (0+256))
   224  07F4  3401               	retlw	high (_s11| (0+256))
   225  07F5  3434               	retlw	low (_s12| (0+256))
   226  07F6  3401               	retlw	high (_s12| (0+256))
   227  07F7  3428               	retlw	low (_s13| (0+256))
   228  07F8  3401               	retlw	high (_s13| (0+256))
   229  07F9  341C               	retlw	low (_s14| (0+256))
   230  07FA  3401               	retlw	high (_s14| (0+256))
   231  07FB  3410               	retlw	low (_s15| (0+256))
   232  07FC  3401               	retlw	high (_s15| (0+256))
   233                           
   234                           	psect	strings
   235  0800                     __pstrings:	
   236  0800                     stringtab:	
   237  0800                     __stringtab:	
   238  0800                     stringcode:	
   239                           ;	String table - string pointers are 1 byte each
   240                           
   241  0800                     stringdir:	
   242  0800  3008               	movlw	high stringdir
   243  0801  008A               	movwf	10
   244  0802  0804               	movf	4,w
   245  0803  0A84               	incf	4,f
   246  0804  0782               	addwf	2,f
   247  0805                     __stringbase:	
   248  0805  3400               	retlw	0
   249  0806                     __end_of__stringtab:	
   250  0806                     _display:	
   251  0806  343F               	retlw	63
   252  0807  3406               	retlw	6
   253  0808  345B               	retlw	91
   254  0809  344F               	retlw	79
   255  080A  3466               	retlw	102
   256  080B  346D               	retlw	109
   257  080C  347D               	retlw	125
   258  080D  3407               	retlw	7
   259  080E  347F               	retlw	127
   260  080F  346F               	retlw	111
   261  0810  3400               	retlw	0
   262  0811                     __end_of_display:	
   263  0006                     _PORTBbits	set	6
   264  0008                     _PORTD	set	8
   265  0005                     _PORTAbits	set	5
   266  001A                     _RCREG	set	26
   267  0019                     _TXREG	set	25
   268  000B                     _INTCONbits	set	11
   269  0018                     _RCSTAbits	set	24
   270  001E                     _ADRESH	set	30
   271  001F                     _ADCON0	set	31
   272  000E                     _TMR1L	set	14
   273  000F                     _TMR1H	set	15
   274  0010                     _T1CON	set	16
   275  0001                     _TMR0	set	1
   276  000B                     _INTCON	set	11
   277  0060                     _TMR1IF	set	96
   278  005A                     _TMR0IF	set	90
   279  0065                     _RCIF	set	101
   280  0064                     _TXIF	set	100
   281  00FA                     _GO_nDONE	set	250
   282  008C                     _PIE1bits	set	140
   283  0099                     _SPBRG	set	153
   284  0098                     _TXSTAbits	set	152
   285  0087                     _TRISCbits	set	135
   286  009E                     _ADRESL	set	158
   287  009F                     _ADCON1	set	159
   288  0085                     _TRISA	set	133
   289  0081                     _OPTION_REG	set	129
   290  0089                     _TRISE	set	137
   291  0088                     _TRISD	set	136
   292  0087                     _TRISC	set	135
   293  0086                     _TRISB	set	134
   294                           
   295                           ; #config settings
   296  0000                     
   297                           	psect	cinit
   298  0011                     start_initialization:	
   299  0011                     __initialization:	
   300                           
   301                           ; Initialize objects allocated to BANK1
   302  0011  1383               	bcf	3,7	;select IRP bank0
   303  0012  30EF               	movlw	low (__pdataBANK1+32)
   304  0013  00FD               	movwf	btemp+-1
   305  0014  3007               	movlw	high __pidataBANK1
   306  0015  00FE               	movwf	btemp
   307  0016  30DD               	movlw	low __pidataBANK1
   308  0017  00FF               	movwf	btemp+1
   309  0018  30CF               	movlw	low __pdataBANK1
   310  0019  0084               	movwf	4
   311  001A  120A  158A  2445  120A  118A  	fcall	init_ram0
   312                           
   313                           ; Clear objects allocated to BANK3
   314  001F  1783               	bsf	3,7	;select IRP bank2
   315  0020  3090               	movlw	low __pbssBANK3
   316  0021  0084               	movwf	4
   317  0022  30F0               	movlw	low (__pbssBANK3+96)
   318  0023  120A  158A  2412  120A  118A  	fcall	clear_ram0
   319                           
   320                           ; Clear objects allocated to BANK2
   321  0028  3010               	movlw	low __pbssBANK2
   322  0029  0084               	movwf	4
   323  002A  3058               	movlw	low (__pbssBANK2+72)
   324  002B  120A  158A  2412  120A  118A  	fcall	clear_ram0
   325                           
   326                           ; Clear objects allocated to BANK1
   327  0030  1383               	bcf	3,7	;select IRP bank0
   328  0031  30A0               	movlw	low __pbssBANK1
   329  0032  0084               	movwf	4
   330  0033  30CF               	movlw	low (__pbssBANK1+47)
   331  0034  120A  158A  2412  120A  118A  	fcall	clear_ram0
   332                           
   333                           ; Clear objects allocated to BANK0
   334  0039  304D               	movlw	low __pbssBANK0
   335  003A  0084               	movwf	4
   336  003B  3064               	movlw	low (__pbssBANK0+23)
   337  003C  120A  158A  2412  120A  118A  	fcall	clear_ram0
   338                           
   339                           ; Clear objects allocated to COMMON
   340  0041  01F0               	clrf	__pbssCOMMON& (0+127)
   341  0042  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   342  0043  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   343  0044  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   344  0045  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   345  0046                     end_of_initialization:	
   346                           ;End of C runtime variable initialization code
   347                           
   348  0046                     __end_of__initialization:	
   349  0046  0183               	clrf	3
   350  0047  120A  118A  284A   	ljmp	_main	;jump to C main() function
   351                           
   352                           	psect	bssCOMMON
   353  0070                     __pbssCOMMON:	
   354  0070                     _count:	
   355  0070                     	ds	2
   356  0072                     _time:	
   357  0072                     	ds	1
   358  0073                     _comando:	
   359  0073                     	ds	1
   360  0074                     _count_lux:	
   361  0074                     	ds	1
   362                           
   363                           	psect	bssBANK0
   364  004D                     __pbssBANK0:	
   365  004D                     _car:	
   366  004D                     	ds	4
   367  0051                     _motorcycle:	
   368  0051                     	ds	4
   369  0055                     _n_semafori:	
   370  0055                     	ds	2
   371  0057                     _colorIndex:	
   372  0057                     	ds	1
   373  0058                     _timerReadFromGateway:	
   374  0058                     	ds	1
   375  0059                     _dataFromGatewayIndex:	
   376  0059                     	ds	1
   377  005A                     _countdown:	
   378  005A                     	ds	1
   379  005B                     _disp:	
   380  005B                     	ds	1
   381  005C                     _old_disp:	
   382  005C                     	ds	1
   383  005D                     _centinaia:	
   384  005D                     	ds	1
   385  005E                     _decine:	
   386  005E                     	ds	1
   387  005F                     _unita:	
   388  005F                     	ds	1
   389  0060                     _cycled:	
   390  0060                     	ds	1
   391  0061                     _secondPassed:	
   392  0061                     	ds	1
   393  0062                     _readGateway:	
   394  0062                     	ds	1
   395  0063                     _readGatewayDone:	
   396  0063                     	ds	1
   397                           
   398                           	psect	bssBANK1
   399  00A0                     __pbssBANK1:	
   400  00A0                     _dataFromGateway:	
   401  00A0                     	ds	15
   402  00AF                     _truck:	
   403  00AF                     	ds	4
   404  00B3                     _str:	
   405  00B3                     	ds	4
   406  00B7                     _s1:	
   407  00B7                     	ds	12
   408  00C3                     _s0:	
   409  00C3                     	ds	12
   410                           
   411                           	psect	dataBANK1
   412  00CF                     __pdataBANK1:	
   413  00CF                     _Semafori:	
   414  00CF                     	ds	32
   415                           
   416                           	psect	bssBANK3
   417  0190                     __pbssBANK3:	
   418  0190                     _s9:	
   419  0190                     	ds	12
   420  019C                     _s8:	
   421  019C                     	ds	12
   422  01A8                     _s7:	
   423  01A8                     	ds	12
   424  01B4                     _s6:	
   425  01B4                     	ds	12
   426  01C0                     _s5:	
   427  01C0                     	ds	12
   428  01CC                     _s4:	
   429  01CC                     	ds	12
   430  01D8                     _s3:	
   431  01D8                     	ds	12
   432  01E4                     _s2:	
   433  01E4                     	ds	12
   434                           
   435                           	psect	bssBANK2
   436  0110                     __pbssBANK2:	
   437  0110                     _s15:	
   438  0110                     	ds	12
   439  011C                     _s14:	
   440  011C                     	ds	12
   441  0128                     _s13:	
   442  0128                     	ds	12
   443  0134                     _s12:	
   444  0134                     	ds	12
   445  0140                     _s11:	
   446  0140                     	ds	12
   447  014C                     _s10:	
   448  014C                     	ds	12
   449                           
   450                           	psect	inittext
   451  0C41                     init_fetch0:	
   452                           ;	Called with low address in FSR and high address in W
   453                           
   454  0C41  087E               	movf	btemp,w
   455  0C42  008A               	movwf	10
   456  0C43  087F               	movf	btemp+1,w
   457  0C44  0082               	movwf	2
   458  0C45                     init_ram0:	
   459                           ;Called with:
   460                           ;	high address of idata address in btemp 
   461                           ;	low address of idata address in btemp+1 
   462                           ;	low address of data in FSR
   463                           ;	high address + 1 of data in btemp-1
   464                           
   465  0C45  120A  158A  2441  120A  158A  	fcall	init_fetch0
   466  0C4A  0080               	movwf	0
   467  0C4B  0A84               	incf	4,f
   468  0C4C  0804               	movf	4,w
   469  0C4D  067D               	xorwf	btemp+-1,w
   470  0C4E  1903               	btfsc	3,2
   471  0C4F  3400               	retlw	0
   472  0C50  0AFF               	incf	btemp+1,f
   473  0C51  1903               	btfsc	3,2
   474  0C52  0AFE               	incf	btemp,f
   475  0C53  2C45               	goto	init_ram0
   476                           
   477                           	psect	clrtext
   478  0C12                     clear_ram0:	
   479                           ;	Called with FSR containing the base address, and
   480                           ;	W with the last address+1
   481                           
   482  0C12  0064               	clrwdt	;clear the watchdog before getting into this loop
   483  0C13                     clrloop0:	
   484  0C13  0180               	clrf	0	;clear RAM location pointed to by FSR
   485  0C14  0A84               	incf	4,f	;increment pointer
   486  0C15  0604               	xorwf	4,w	;XOR with final address
   487  0C16  1903               	btfsc	3,2	;have we reached the end yet?
   488  0C17  3400               	retlw	0	;all done for this memory range, return
   489  0C18  0604               	xorwf	4,w	;XOR again to restore value
   490  0C19  2C13               	goto	clrloop0	;do the next byte
   491                           
   492                           	psect	cstackBANK2
   493  0158                     __pcstackBANK2:	
   494  0158                     main@index:	
   495                           
   496                           ; 2 bytes @ 0x0
   497  0158                     	ds	2
   498  015A                     main@colorId:	
   499                           
   500                           ; 2 bytes @ 0x2
   501  015A                     	ds	2
   502  015C                     main@semaforoId:	
   503                           
   504                           ; 2 bytes @ 0x4
   505  015C                     	ds	2
   506  015E                     main@temp:	
   507                           
   508                           ; 1 bytes @ 0x6
   509  015E                     	ds	1
   510  015F                     main@umidita:	
   511                           
   512                           ; 1 bytes @ 0x7
   513  015F                     	ds	1
   514  0160                     main@pressione:	
   515                           
   516                           ; 1 bytes @ 0x8
   517  0160                     	ds	1
   518  0161                     main@endCiclo:	
   519                           
   520                           ; 1 bytes @ 0x9
   521  0161                     	ds	1
   522  0162                     main@time:	
   523                           
   524                           ; 2 bytes @ 0xA
   525  0162                     	ds	2
   526  0164                     main@lux_select:	
   527                           
   528                           ; 1 bytes @ 0xC
   529  0164                     	ds	1
   530  0165                     main@i:	
   531                           
   532                           ; 2 bytes @ 0xD
   533  0165                     	ds	2
   534  0167                     main@i_447:	
   535                           
   536                           ; 2 bytes @ 0xF
   537  0167                     	ds	2
   538  0169                     main@l:	
   539                           
   540                           ; 2 bytes @ 0x11
   541  0169                     	ds	2
   542  016B                     main@i_445:	
   543                           
   544                           ; 2 bytes @ 0x13
   545  016B                     	ds	2
   546  016D                     main@i_446:	
   547                           
   548                           ; 2 bytes @ 0x15
   549  016D                     	ds	2
   550                           
   551                           	psect	cstackCOMMON
   552  0075                     __pcstackCOMMON:	
   553  0075                     ?_init_ADC:	
   554  0075                     ?_main:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0075                     ?_UART_TxChar:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0075                     ?_UART_Write_Text:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0075                     ?_UART_Read:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0075                     ??_UART_Read:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0075                     ?_conteggioVeicoli:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0075                     ??_conteggioVeicoli:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0075                     ?_ISR:	
   576                           ; 1 bytes @ 0x0
   577                           
   578                           
   579                           ; 1 bytes @ 0x0
   580  0075                     	ds	1
   581  0076                     ??_ISR:	
   582                           
   583                           ; 1 bytes @ 0x1
   584  0076                     	ds	4
   585                           
   586                           	psect	cstackBANK0
   587  0020                     __pcstackBANK0:	
   588  0020                     ??_init_ADC:	
   589  0020                     ?_SetDefaultTimers:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0020                     ?_SetDisplay:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0020                     ?_BuildByte:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0020                     ??_UART_TxChar:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0020                     ?___bmul:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0020                     ?_GetTime:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0020                     ?_ADC_Read:	
   608                           ; 2 bytes @ 0x0
   609                           
   610  0020                     ?___wmul:	
   611                           ; 2 bytes @ 0x0
   612                           
   613  0020                     ?___awmod:	
   614                           ; 2 bytes @ 0x0
   615                           
   616  0020                     ?___aldiv:	
   617                           ; 2 bytes @ 0x0
   618                           
   619  0020                     BuildByte@byte1:	
   620                           ; 4 bytes @ 0x0
   621                           
   622  0020                     UART_TxChar@ch:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0020                     SetDisplay@d2:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0020                     ___bmul@multiplicand:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0020                     GetTime@index:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0020                     SetDefaultTimers@rosso:	
   635                           ; 2 bytes @ 0x0
   636                           
   637  0020                     ___wmul@multiplier:	
   638                           ; 2 bytes @ 0x0
   639                           
   640  0020                     ___awmod@divisor:	
   641                           ; 2 bytes @ 0x0
   642                           
   643  0020                     ___aldiv@divisor:	
   644                           ; 2 bytes @ 0x0
   645                           
   646                           
   647                           ; 4 bytes @ 0x0
   648  0020                     	ds	1
   649  0021                     ??_UART_Write_Text:	
   650  0021                     ??___bmul:	
   651                           ; 1 bytes @ 0x1
   652                           
   653  0021                     BuildByte@valore:	
   654                           ; 1 bytes @ 0x1
   655                           
   656  0021                     SetDisplay@d3:	
   657                           ; 1 bytes @ 0x1
   658                           
   659                           
   660                           ; 1 bytes @ 0x1
   661  0021                     	ds	1
   662  0022                     ??_GetTime:	
   663  0022                     ??_ADC_Read:	
   664                           ; 1 bytes @ 0x2
   665                           
   666  0022                     ??_BuildByte:	
   667                           ; 1 bytes @ 0x2
   668                           
   669  0022                     UART_Write_Text@text:	
   670                           ; 1 bytes @ 0x2
   671                           
   672  0022                     SetDisplay@value:	
   673                           ; 1 bytes @ 0x2
   674                           
   675  0022                     ___bmul@product:	
   676                           ; 1 bytes @ 0x2
   677                           
   678  0022                     SetDefaultTimers@verde:	
   679                           ; 1 bytes @ 0x2
   680                           
   681  0022                     ___wmul@multiplicand:	
   682                           ; 2 bytes @ 0x2
   683                           
   684  0022                     ___awmod@dividend:	
   685                           ; 2 bytes @ 0x2
   686                           
   687                           
   688                           ; 2 bytes @ 0x2
   689  0022                     	ds	1
   690  0023                     ??_SetDisplay:	
   691  0023                     ADC_Read@canale:	
   692                           ; 1 bytes @ 0x3
   693                           
   694  0023                     SetDisplay@d1:	
   695                           ; 1 bytes @ 0x3
   696                           
   697  0023                     ___bmul@multiplier:	
   698                           ; 1 bytes @ 0x3
   699                           
   700  0023                     UART_Write_Text@i:	
   701                           ; 1 bytes @ 0x3
   702                           
   703                           
   704                           ; 2 bytes @ 0x3
   705  0023                     	ds	1
   706  0024                     ??___wmul:	
   707  0024                     ??___awmod:	
   708                           ; 1 bytes @ 0x4
   709                           
   710  0024                     BuildByte@byte0:	
   711                           ; 1 bytes @ 0x4
   712                           
   713  0024                     GetTime@shortInt:	
   714                           ; 1 bytes @ 0x4
   715                           
   716  0024                     SetDefaultTimers@giallo:	
   717                           ; 1 bytes @ 0x4
   718                           
   719  0024                     ___wmul@product:	
   720                           ; 2 bytes @ 0x4
   721                           
   722  0024                     ___aldiv@dividend:	
   723                           ; 2 bytes @ 0x4
   724                           
   725                           
   726                           ; 4 bytes @ 0x4
   727  0024                     	ds	1
   728  0025                     ___awmod@counter:	
   729  0025                     GetTime@time:	
   730                           ; 1 bytes @ 0x5
   731                           
   732  0025                     BuildByte@txByte:	
   733                           ; 2 bytes @ 0x5
   734                           
   735                           
   736                           ; 5 bytes @ 0x5
   737  0025                     	ds	1
   738  0026                     ??_SetDefaultTimers:	
   739  0026                     ___awmod@sign:	
   740                           ; 1 bytes @ 0x6
   741                           
   742                           
   743                           ; 1 bytes @ 0x6
   744  0026                     	ds	1
   745  0027                     ?___awdiv:	
   746  0027                     ___awdiv@divisor:	
   747                           ; 2 bytes @ 0x7
   748                           
   749                           
   750                           ; 2 bytes @ 0x7
   751  0027                     	ds	1
   752  0028                     ??___aldiv:	
   753                           
   754                           ; 1 bytes @ 0x8
   755  0028                     	ds	1
   756  0029                     ___aldiv@counter:	
   757  0029                     ___awdiv@dividend:	
   758                           ; 1 bytes @ 0x9
   759                           
   760                           
   761                           ; 2 bytes @ 0x9
   762  0029                     	ds	1
   763  002A                     BuildByte@sommaRow:	
   764  002A                     ___aldiv@sign:	
   765                           ; 1 bytes @ 0xA
   766                           
   767                           
   768                           ; 1 bytes @ 0xA
   769  002A                     	ds	1
   770  002B                     ??___awdiv:	
   771  002B                     BuildByte@sommaColumn:	
   772                           ; 1 bytes @ 0xB
   773                           
   774  002B                     ___aldiv@quotient:	
   775                           ; 1 bytes @ 0xB
   776                           
   777                           
   778                           ; 4 bytes @ 0xB
   779  002B                     	ds	1
   780  002C                     ___awdiv@counter:	
   781  002C                     BuildByte@y:	
   782                           ; 1 bytes @ 0xC
   783                           
   784  002C                     SetDefaultTimers@l:	
   785                           ; 2 bytes @ 0xC
   786                           
   787                           
   788                           ; 2 bytes @ 0xC
   789  002C                     	ds	1
   790  002D                     ___awdiv@sign:	
   791                           
   792                           ; 1 bytes @ 0xD
   793  002D                     	ds	1
   794  002E                     BuildByte@y_343:	
   795  002E                     SetDefaultTimers@i:	
   796                           ; 2 bytes @ 0xE
   797                           
   798  002E                     ___awdiv@quotient:	
   799                           ; 2 bytes @ 0xE
   800                           
   801                           
   802                           ; 2 bytes @ 0xE
   803  002E                     	ds	1
   804  002F                     ?_UART_Init:	
   805  002F                     UART_Init@baudrate:	
   806                           ; 1 bytes @ 0xF
   807                           
   808                           
   809                           ; 2 bytes @ 0xF
   810  002F                     	ds	1
   811  0030                     ?_GetDigits:	
   812  0030                     ?_map:	
   813                           ; 1 bytes @ 0x10
   814                           
   815  0030                     map@x:	
   816                           ; 2 bytes @ 0x10
   817                           
   818  0030                     BuildByte@i:	
   819                           ; 2 bytes @ 0x10
   820                           
   821  0030                     GetDigits@Time:	
   822                           ; 2 bytes @ 0x10
   823                           
   824                           
   825                           ; 2 bytes @ 0x10
   826  0030                     	ds	1
   827  0031                     ??_UART_Init:	
   828                           
   829                           ; 1 bytes @ 0x11
   830  0031                     	ds	1
   831  0032                     ??_GetDigits:	
   832  0032                     map@in_min:	
   833                           ; 1 bytes @ 0x12
   834                           
   835  0032                     BuildByte@i_342:	
   836                           ; 2 bytes @ 0x12
   837                           
   838                           
   839                           ; 2 bytes @ 0x12
   840  0032                     	ds	2
   841  0034                     ?_sendByte:	
   842  0034                     sendByte@byte1:	
   843                           ; 1 bytes @ 0x14
   844                           
   845  0034                     map@in_max:	
   846                           ; 1 bytes @ 0x14
   847                           
   848                           
   849                           ; 2 bytes @ 0x14
   850  0034                     	ds	1
   851  0035                     sendByte@valore:	
   852  0035                     _GetDigits$1151:	
   853                           ; 1 bytes @ 0x15
   854                           
   855                           
   856                           ; 2 bytes @ 0x15
   857  0035                     	ds	1
   858  0036                     ??_sendByte:	
   859  0036                     map@out_min:	
   860                           ; 1 bytes @ 0x16
   861                           
   862                           
   863                           ; 2 bytes @ 0x16
   864  0036                     	ds	2
   865  0038                     map@out_max:	
   866                           
   867                           ; 2 bytes @ 0x18
   868  0038                     	ds	1
   869  0039                     sendByte@byte0:	
   870                           
   871                           ; 1 bytes @ 0x19
   872  0039                     	ds	1
   873  003A                     ??_map:	
   874  003A                     sendByte@txByte:	
   875                           ; 1 bytes @ 0x1A
   876                           
   877                           
   878                           ; 1 bytes @ 0x1A
   879  003A                     	ds	1
   880  003B                     sendByte@i:	
   881                           
   882                           ; 2 bytes @ 0x1B
   883  003B                     	ds	2
   884  003D                     ??_main:	
   885                           
   886                           ; 1 bytes @ 0x1D
   887  003D                     	ds	16
   888                           
   889                           	psect	maintext
   890  004A                     __pmaintext:	
   891 ;;
   892 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   893 ;;
   894 ;; *************** function _main *****************
   895 ;; Defined at:
   896 ;;		line 131 in file "main.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;  i               2   19[BANK2 ] int 
   901 ;;  semaforoId      2    4[BANK2 ] int 
   902 ;;  colorId         2    2[BANK2 ] int 
   903 ;;  index           2    0[BANK2 ] int 
   904 ;;  i               2   13[BANK2 ] int 
   905 ;;  i               2   15[BANK2 ] int 
   906 ;;  i               2   21[BANK2 ] int 
   907 ;;  l               2   17[BANK2 ] int 
   908 ;;  colorsTime      6    0        int [3]
   909 ;;  time            2   10[BANK2 ] int 
   910 ;;  lux_select      1   12[BANK2 ] unsigned char 
   911 ;;  endCiclo        1    9[BANK2 ] struct .
   912 ;;  pressione       1    8[BANK2 ] unsigned char 
   913 ;;  umidita         1    7[BANK2 ] unsigned char 
   914 ;;  temp            1    6[BANK2 ] unsigned char 
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : B00/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   924 ;;      Params:         0       0       0       0       0
   925 ;;      Locals:         0       0       0       0      23
   926 ;;      Temps:          0      16       0       0       0
   927 ;;      Totals:         0      16       0       0      23
   928 ;;Total ram usage:       39 bytes
   929 ;; Hardware stack levels required when called:    5
   930 ;; This function calls:
   931 ;;		_ADC_Read
   932 ;;		_GetDigits
   933 ;;		_GetTime
   934 ;;		_SetDefaultTimers
   935 ;;		_SetDisplay
   936 ;;		_UART_Init
   937 ;;		___awmod
   938 ;;		___bmul
   939 ;;		___wmul
   940 ;;		_init_ADC
   941 ;;		_map
   942 ;;		_sendByte
   943 ;; This function is called by:
   944 ;;		Startup code after reset
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           
   949                           ;psect for function _main
   950  004A                     _main:	
   951  004A                     l2900:	
   952                           ;incstack = 0
   953                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   954                           
   955                           
   956                           ;main.c: 134:     TRISB = 0x1F;
   957  004A  301F               	movlw	31
   958  004B  1683               	bsf	3,5	;RP0=1, select bank1
   959  004C  1303               	bcf	3,6	;RP1=0, select bank1
   960  004D  0086               	movwf	6	;volatile
   961                           
   962                           ;main.c: 135:     TRISC = 0x80;
   963  004E  3080               	movlw	128
   964  004F  0087               	movwf	7	;volatile
   965  0050                     l2902:	
   966                           
   967                           ;main.c: 136:     TRISD = 0x00;
   968  0050  0188               	clrf	8	;volatile
   969  0051                     l2904:	
   970                           
   971                           ;main.c: 137:     TRISE = 0x01;
   972  0051  3001               	movlw	1
   973  0052  0089               	movwf	9	;volatile
   974  0053                     l2906:	
   975                           
   976                           ;main.c: 138:     INTCON = 0xE0;
   977  0053  30E0               	movlw	224
   978  0054  008B               	movwf	11	;volatile
   979  0055                     l2908:	
   980                           
   981                           ;main.c: 139:     OPTION_REG = 0x04;
   982  0055  3004               	movlw	4
   983  0056  0081               	movwf	1	;volatile
   984  0057                     l2910:	
   985                           
   986                           ;main.c: 140:     TMR0 = 6;
   987  0057  3006               	movlw	6
   988  0058  1283               	bcf	3,5	;RP0=0, select bank0
   989  0059  1303               	bcf	3,6	;RP1=0, select bank0
   990  005A  0081               	movwf	1	;volatile
   991  005B                     l2912:	
   992                           
   993                           ;main.c: 141:     T1CON = 0x31;
   994  005B  3031               	movlw	49
   995  005C  0090               	movwf	16	;volatile
   996  005D                     l2914:	
   997                           
   998                           ;main.c: 147:     init_ADC();
   999  005D  120A  158A  242E  120A  118A  	fcall	_init_ADC
  1000  0062                     l2916:	
  1001                           
  1002                           ;main.c: 148:     UART_Init(9600);
  1003  0062  3080               	movlw	128
  1004  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1005  0064  1303               	bcf	3,6	;RP1=0, select bank0
  1006  0065  00AF               	movwf	UART_Init@baudrate
  1007  0066  3025               	movlw	37
  1008  0067  00B0               	movwf	UART_Init@baudrate+1
  1009  0068  120A  158A  2527  120A  118A  	fcall	_UART_Init
  1010  006D                     l2918:	
  1011                           
  1012                           ;main.c: 149:     SetDefaultTimers(0, 0, 0);
  1013  006D  3000               	movlw	0
  1014  006E  1283               	bcf	3,5	;RP0=0, select bank0
  1015  006F  1303               	bcf	3,6	;RP1=0, select bank0
  1016  0070  00A0               	movwf	SetDefaultTimers@rosso
  1017  0071  00A1               	movwf	SetDefaultTimers@rosso+1
  1018  0072  3000               	movlw	0
  1019  0073  00A2               	movwf	SetDefaultTimers@verde
  1020  0074  00A3               	movwf	SetDefaultTimers@verde+1
  1021  0075  3000               	movlw	0
  1022  0076  00A4               	movwf	SetDefaultTimers@giallo
  1023  0077  00A5               	movwf	SetDefaultTimers@giallo+1
  1024  0078  120A  118A  273C  120A  118A  	fcall	_SetDefaultTimers
  1025  007D                     l2920:	
  1026                           
  1027                           ;main.c: 151:     TMR1H = 60;
  1028  007D  303C               	movlw	60
  1029  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1030  007F  1303               	bcf	3,6	;RP1=0, select bank0
  1031  0080  008F               	movwf	15	;volatile
  1032  0081                     l2922:	
  1033                           
  1034                           ;main.c: 152:     TMR1L = 176;
  1035  0081  30B0               	movlw	176
  1036  0082  008E               	movwf	14	;volatile
  1037  0083                     l2924:	
  1038                           
  1039                           ;main.c: 154:     int colorsTime[3], time;;main.c: 155:     char lux_select = 0;
  1040  0083  1283               	bcf	3,5	;RP0=0, select bank2
  1041  0084  1703               	bsf	3,6	;RP1=1, select bank2
  1042  0085  01E4               	clrf	main@lux_select^(0+256)
  1043  0086                     l2926:	
  1044                           
  1045                           ;main.c: 156:     disp = 0;
  1046  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1047  0087  1303               	bcf	3,6	;RP1=0, select bank0
  1048  0088  01DB               	clrf	_disp
  1049  0089                     l2928:	
  1050  0089                     l2930:	
  1051  0089                     l2932:	
  1052  0089                     l2934:	
  1053                           
  1054                           ;main.c: 160:     Bit endCiclo;;main.c: 161:     endCiclo.Bit = 1;
  1055  0089  1283               	bcf	3,5	;RP0=0, select bank2
  1056  008A  1703               	bsf	3,6	;RP1=1, select bank2
  1057  008B  1461               	bsf	main@endCiclo^(0+256),0
  1058  008C                     l2936:	
  1059                           
  1060                           ;main.c: 164:     {;main.c: 166:         if (readGateway.Bit)
  1061  008C  1283               	bcf	3,5	;RP0=0, select bank0
  1062  008D  1303               	bcf	3,6	;RP1=0, select bank0
  1063  008E  1C62               	btfss	_readGateway,0
  1064  008F  2891               	goto	u3001
  1065  0090  2892               	goto	u3000
  1066  0091                     u3001:	
  1067  0091  28BE               	goto	l216
  1068  0092                     u3000:	
  1069  0092  28A9               	goto	l2950
  1070  0093                     l218:	
  1071                           ;main.c: 169:             {;main.c: 170:             case 0x08:
  1072                           
  1073                           
  1074                           ;main.c: 171:                 readGatewayDone.Bit = 1;
  1075  0093  1463               	bsf	_readGatewayDone,0
  1076                           
  1077                           ;main.c: 172:                 readGateway.Bit = 0;
  1078  0094  1062               	bcf	_readGateway,0
  1079                           
  1080                           ;main.c: 173:                 break;
  1081  0095  28BE               	goto	l216
  1082  0096                     l2940:	
  1083                           
  1084                           ;main.c: 179:                 if (timerReadFromGateway >= 4)
  1085  0096  3004               	movlw	4
  1086  0097  0258               	subwf	_timerReadFromGateway,w
  1087  0098  1C03               	skipc
  1088  0099  289B               	goto	u3011
  1089  009A  289C               	goto	u3010
  1090  009B                     u3011:	
  1091  009B  289F               	goto	l2944
  1092  009C                     u3010:	
  1093  009C                     l2942:	
  1094                           
  1095                           ;main.c: 180:                 {;main.c: 181:                     readGatewayDone.Bit = 1
      +                          ;
  1096  009C  1463               	bsf	_readGatewayDone,0
  1097                           
  1098                           ;main.c: 182:                     readGatewayDone.Timeout = 1;
  1099  009D  14E3               	bsf	_readGatewayDone,1
  1100                           
  1101                           ;main.c: 183:                     readGateway.Bit = 0;
  1102  009E  1062               	bcf	_readGateway,0
  1103  009F                     l2944:	
  1104                           
  1105                           ;main.c: 186:                 if (dataFromGatewayIndex >= 15)
  1106  009F  300F               	movlw	15
  1107  00A0  0259               	subwf	_dataFromGatewayIndex,w
  1108  00A1  1C03               	skipc
  1109  00A2  28A4               	goto	u3021
  1110  00A3  28A5               	goto	u3020
  1111  00A4                     u3021:	
  1112  00A4  28BE               	goto	l216
  1113  00A5                     u3020:	
  1114  00A5                     l2946:	
  1115                           
  1116                           ;main.c: 187:                 {;main.c: 188:                     readGatewayDone.Bit = 1
      +                          ;
  1117  00A5  1463               	bsf	_readGatewayDone,0
  1118                           
  1119                           ;main.c: 189:                     readGatewayDone.Timeout = 0;
  1120  00A6  10E3               	bcf	_readGatewayDone,1
  1121                           
  1122                           ;main.c: 190:                     readGateway.Bit = 0;
  1123  00A7  1062               	bcf	_readGateway,0
  1124  00A8  28BE               	goto	l216
  1125  00A9                     l2950:	
  1126  00A9  1683               	bsf	3,5	;RP0=1, select bank1
  1127  00AA  1303               	bcf	3,6	;RP1=0, select bank1
  1128  00AB  0821               	movf	(_dataFromGateway^(0+128)+1),w
  1129  00AC  397F               	andlw	127
  1130  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1131  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1132  00AF  00BD               	movwf	??_main
  1133  00B0  01BE               	clrf	??_main+1
  1134                           
  1135                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1136                           ; Switch size 1, requested type "simple"
  1137                           ; Number of cases is 1, Range of values is 0 to 0
  1138                           ; switch strategies available:
  1139                           ; Name         Instructions Cycles
  1140                           ; simple_byte            4     3 (average)
  1141                           ; direct_byte           11     8 (fixed)
  1142                           ; jumptable            260     6 (fixed)
  1143                           ;	Chosen strategy is simple_byte
  1144  00B1  083E               	movf	??_main+1,w
  1145  00B2  3A00               	xorlw	0	; case 0
  1146  00B3  1903               	skipnz
  1147  00B4  28B6               	goto	l3188
  1148  00B5  2896               	goto	l2940
  1149  00B6                     l3188:	
  1150                           
  1151                           ; Switch size 1, requested type "simple"
  1152                           ; Number of cases is 2, Range of values is 8 to 10
  1153                           ; switch strategies available:
  1154                           ; Name         Instructions Cycles
  1155                           ; simple_byte            7     4 (average)
  1156                           ; direct_byte           20    11 (fixed)
  1157                           ; jumptable            263     9 (fixed)
  1158                           ;	Chosen strategy is simple_byte
  1159  00B6  083D               	movf	??_main,w
  1160  00B7  3A08               	xorlw	8	; case 8
  1161  00B8  1903               	skipnz
  1162  00B9  2893               	goto	l218
  1163  00BA  3A02               	xorlw	2	; case 10
  1164  00BB  1903               	skipnz
  1165  00BC  2893               	goto	l218
  1166  00BD  2896               	goto	l2940
  1167  00BE                     l216:	
  1168                           ;main.c: 194:         }
  1169                           
  1170                           
  1171                           ;main.c: 197:         if (readGatewayDone.Bit)
  1172  00BE  1C63               	btfss	_readGatewayDone,0
  1173  00BF  28C1               	goto	u3031
  1174  00C0  28C2               	goto	u3030
  1175  00C1                     u3031:	
  1176  00C1  2975               	goto	l224
  1177  00C2                     u3030:	
  1178  00C2                     l2952:	
  1179                           
  1180                           ;main.c: 198:         {;main.c: 200:             readGateway.Bit = 0;
  1181  00C2  1062               	bcf	_readGateway,0
  1182  00C3                     l2954:	
  1183                           
  1184                           ;main.c: 201:             dataFromGatewayIndex = 0;
  1185  00C3  01D9               	clrf	_dataFromGatewayIndex
  1186  00C4                     l2956:	
  1187                           
  1188                           ;main.c: 202:             readGatewayDone.Bit = 0;
  1189  00C4  1063               	bcf	_readGatewayDone,0
  1190                           
  1191                           ;main.c: 203:             timerReadFromGateway = 0;
  1192  00C5  01D8               	clrf	_timerReadFromGateway
  1193  00C6                     l2958:	
  1194                           
  1195                           ;main.c: 206:             if (readGatewayDone.Timeout)
  1196  00C6  1CE3               	btfss	_readGatewayDone,1
  1197  00C7  28C9               	goto	u3041
  1198  00C8  28CA               	goto	u3040
  1199  00C9                     u3041:	
  1200  00C9  28CC               	goto	l2962
  1201  00CA                     u3040:	
  1202  00CA                     l2960:	
  1203                           
  1204                           ;main.c: 207:             {;main.c: 208:                 readGatewayDone.Timeout = 0;
  1205  00CA  10E3               	bcf	_readGatewayDone,1
  1206                           
  1207                           ;main.c: 209:             }
  1208  00CB  2975               	goto	l224
  1209  00CC                     l2962:	
  1210                           
  1211                           ;main.c: 212:             {;main.c: 215:                 for (int i = 0; i < 3; i++)
  1212  00CC  1283               	bcf	3,5	;RP0=0, select bank2
  1213  00CD  1703               	bsf	3,6	;RP1=1, select bank2
  1214  00CE  01E5               	clrf	main@i^(0+256)
  1215  00CF  01E6               	clrf	(main@i+1)^(0+256)
  1216  00D0                     l2968:	
  1217                           
  1218                           ;main.c: 216:                 {;main.c: 217:                     int index = i * 5;
  1219  00D0  1283               	bcf	3,5	;RP0=0, select bank2
  1220  00D1  1703               	bsf	3,6	;RP1=1, select bank2
  1221  00D2  0866               	movf	(main@i+1)^(0+256),w
  1222  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1223  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  1224  00D5  00A1               	movwf	___wmul@multiplier+1
  1225  00D6  1283               	bcf	3,5	;RP0=0, select bank2
  1226  00D7  1703               	bsf	3,6	;RP1=1, select bank2
  1227  00D8  0865               	movf	main@i^(0+256),w
  1228  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1229  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  1230  00DB  00A0               	movwf	___wmul@multiplier
  1231  00DC  3005               	movlw	5
  1232  00DD  00A2               	movwf	___wmul@multiplicand
  1233  00DE  3000               	movlw	0
  1234  00DF  00A3               	movwf	___wmul@multiplicand+1
  1235  00E0  120A  158A  24CB  120A  118A  	fcall	___wmul
  1236  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1237  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  1238  00E7  0821               	movf	?___wmul+1,w
  1239  00E8  1283               	bcf	3,5	;RP0=0, select bank2
  1240  00E9  1703               	bsf	3,6	;RP1=1, select bank2
  1241  00EA  00D9               	movwf	(main@index+1)^(0+256)
  1242  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1243  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1244  00ED  0820               	movf	?___wmul,w
  1245  00EE  1283               	bcf	3,5	;RP0=0, select bank2
  1246  00EF  1703               	bsf	3,6	;RP1=1, select bank2
  1247  00F0  00D8               	movwf	main@index^(0+256)
  1248  00F1                     l2970:	
  1249                           
  1250                           ;main.c: 218:                     int colorId = ((dataFromGateway[i * 5] >> 5) & 0x03) -
      +                           1;
  1251  00F1  3005               	movlw	5
  1252  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1253  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1254  00F4  00BD               	movwf	??_main
  1255  00F5  083D               	movf	??_main,w
  1256  00F6  00A0               	movwf	___bmul@multiplicand
  1257  00F7  1283               	bcf	3,5	;RP0=0, select bank2
  1258  00F8  1703               	bsf	3,6	;RP1=1, select bank2
  1259  00F9  0865               	movf	main@i^(0+256),w
  1260  00FA  120A  158A  2469  120A  118A  	fcall	___bmul
  1261  00FF  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1262  0100  0084               	movwf	4
  1263  0101  1383               	bcf	3,7	;select IRP bank1
  1264  0102  0800               	movf	0,w
  1265  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1266  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1267  0105  00BE               	movwf	??_main+1
  1268  0106  3005               	movlw	5
  1269  0107                     u3055:	
  1270  0107  1003               	clrc
  1271  0108  0CBE               	rrf	??_main+1,f
  1272  0109  3EFF               	addlw	-1
  1273  010A  1D03               	skipz
  1274  010B  2907               	goto	u3055
  1275  010C  083E               	movf	??_main+1,w
  1276  010D  3903               	andlw	3
  1277  010E  3EFF               	addlw	255
  1278  010F  1283               	bcf	3,5	;RP0=0, select bank2
  1279  0110  1703               	bsf	3,6	;RP1=1, select bank2
  1280  0111  00DA               	movwf	main@colorId^(0+256)
  1281  0112  30FF               	movlw	255
  1282  0113  1803               	skipnc
  1283  0114  3000               	movlw	0
  1284  0115  00DB               	movwf	(main@colorId^(0+256)+1)
  1285  0116                     l2972:	
  1286                           
  1287                           ;main.c: 219:                     int semaforoId = (dataFromGateway[0] >> 1) & 0x07;
  1288  0116  1683               	bsf	3,5	;RP0=1, select bank1
  1289  0117  1303               	bcf	3,6	;RP1=0, select bank1
  1290  0118  0820               	movf	_dataFromGateway^(0+128),w
  1291  0119  1283               	bcf	3,5	;RP0=0, select bank0
  1292  011A  1303               	bcf	3,6	;RP1=0, select bank0
  1293  011B  00BD               	movwf	??_main
  1294  011C  1003               	clrc
  1295  011D  0C3D               	rrf	??_main,w
  1296  011E  3907               	andlw	7
  1297  011F  00BE               	movwf	??_main+1
  1298  0120  01BF               	clrf	??_main+2
  1299  0121  083E               	movf	??_main+1,w
  1300  0122  1283               	bcf	3,5	;RP0=0, select bank2
  1301  0123  1703               	bsf	3,6	;RP1=1, select bank2
  1302  0124  00DC               	movwf	main@semaforoId^(0+256)
  1303  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1304  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1305  0127  083F               	movf	??_main+2,w
  1306  0128  1283               	bcf	3,5	;RP0=0, select bank2
  1307  0129  1703               	bsf	3,6	;RP1=1, select bank2
  1308  012A  00DD               	movwf	(main@semaforoId+1)^(0+256)
  1309  012B                     l2974:	
  1310                           
  1311                           ;main.c: 221:                     (*(Semafori[semaforoId])).new_times[colorId] = GetTime
      +                          (index);
  1312  012B  0859               	movf	(main@index+1)^(0+256),w
  1313  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1314  012D  1303               	bcf	3,6	;RP1=0, select bank0
  1315  012E  00A1               	movwf	GetTime@index+1
  1316  012F  1283               	bcf	3,5	;RP0=0, select bank2
  1317  0130  1703               	bsf	3,6	;RP1=1, select bank2
  1318  0131  0858               	movf	main@index^(0+256),w
  1319  0132  1283               	bcf	3,5	;RP0=0, select bank0
  1320  0133  1303               	bcf	3,6	;RP1=0, select bank0
  1321  0134  00A0               	movwf	GetTime@index
  1322  0135  120A  158A  259B  120A  118A  	fcall	_GetTime
  1323  013A  1283               	bcf	3,5	;RP0=0, select bank2
  1324  013B  1703               	bsf	3,6	;RP1=1, select bank2
  1325  013C  085C               	movf	main@semaforoId^(0+256),w
  1326  013D  1283               	bcf	3,5	;RP0=0, select bank0
  1327  013E  1303               	bcf	3,6	;RP1=0, select bank0
  1328  013F  00BD               	movwf	??_main
  1329  0140  073D               	addwf	??_main,w
  1330  0141  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1331  0142  0084               	movwf	4
  1332  0143  1383               	bcf	3,7	;select IRP bank1
  1333  0144  0800               	movf	0,w
  1334  0145  00BE               	movwf	??_main+1
  1335  0146  0A84               	incf	4,f
  1336  0147  0800               	movf	0,w
  1337  0148  00BF               	movwf	??_main+2
  1338  0149  1283               	bcf	3,5	;RP0=0, select bank2
  1339  014A  1703               	bsf	3,6	;RP1=1, select bank2
  1340  014B  085A               	movf	main@colorId^(0+256),w
  1341  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1342  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1343  014E  00C0               	movwf	??_main+3
  1344  014F  0740               	addwf	??_main+3,w
  1345  0150  073E               	addwf	??_main+1,w
  1346  0151  00C1               	movwf	??_main+4
  1347  0152  083F               	movf	??_main+2,w
  1348  0153  1803               	skipnc
  1349  0154  3E01               	addlw	1
  1350  0155  00C2               	movwf	??_main+5
  1351  0156  0841               	movf	??_main+4,w
  1352  0157  0084               	movwf	4
  1353  0158  1783               	bsf	3,7
  1354  0159  1C42               	btfss	??_main+5,0
  1355  015A  1383               	bcf	3,7
  1356  015B  0820               	movf	?_GetTime,w
  1357  015C  0080               	movwf	0
  1358  015D  0A84               	incf	4,f
  1359  015E  0821               	movf	?_GetTime+1,w
  1360  015F  0080               	movwf	0
  1361  0160                     l2976:	
  1362                           
  1363                           ;main.c: 222:                 }
  1364  0160  3001               	movlw	1
  1365  0161  1283               	bcf	3,5	;RP0=0, select bank2
  1366  0162  1703               	bsf	3,6	;RP1=1, select bank2
  1367  0163  07E5               	addwf	main@i^(0+256),f
  1368  0164  1803               	skipnc
  1369  0165  0AE6               	incf	(main@i+1)^(0+256),f
  1370  0166  3000               	movlw	0
  1371  0167  07E6               	addwf	(main@i+1)^(0+256),f
  1372  0168                     l2978:	
  1373  0168  0866               	movf	(main@i+1)^(0+256),w
  1374  0169  3A80               	xorlw	128
  1375  016A  00FF               	movwf	btemp+1
  1376  016B  3080               	movlw	128
  1377  016C  027F               	subwf	btemp+1,w
  1378  016D  1D03               	skipz
  1379  016E  2971               	goto	u3065
  1380  016F  3003               	movlw	3
  1381  0170  0265               	subwf	main@i^(0+256),w
  1382  0171                     u3065:	
  1383  0171  1C03               	skipc
  1384  0172  2974               	goto	u3061
  1385  0173  2975               	goto	u3060
  1386  0174                     u3061:	
  1387  0174  28D0               	goto	l2968
  1388  0175                     u3060:	
  1389  0175                     l224:	
  1390                           ;main.c: 224:         }
  1391                           
  1392                           
  1393                           ;main.c: 228:         if (endCiclo.Bit)
  1394  0175  1283               	bcf	3,5	;RP0=0, select bank2
  1395  0176  1703               	bsf	3,6	;RP1=1, select bank2
  1396  0177  1C61               	btfss	main@endCiclo^(0+256),0
  1397  0178  297A               	goto	u3071
  1398  0179  297B               	goto	u3070
  1399  017A                     u3071:	
  1400  017A  2A8F               	goto	l229
  1401  017B                     u3070:	
  1402  017B                     l2980:	
  1403                           
  1404                           ;main.c: 229:         {;main.c: 230:             n_semafori = (n_semafori + 1) % 16;
  1405  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1406  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1407  017D  0855               	movf	_n_semafori,w
  1408  017E  3E01               	addlw	1
  1409  017F  00BD               	movwf	??_main
  1410  0180  0856               	movf	_n_semafori+1,w
  1411  0181  1803               	skipnc
  1412  0182  3E01               	addlw	1
  1413  0183  3E00               	addlw	0
  1414  0184  00BE               	movwf	??_main+1
  1415  0185  300F               	movlw	15
  1416  0186  053D               	andwf	??_main,w
  1417  0187  00D5               	movwf	_n_semafori
  1418  0188  3000               	movlw	0
  1419  0189  053E               	andwf	??_main+1,w
  1420  018A  00D6               	movwf	_n_semafori+1
  1421                           
  1422                           ;main.c: 231:             while ((*(Semafori[n_semafori])).times[0] == 0)
  1423  018B  2992               	goto	l2984
  1424  018C                     l2982:	
  1425                           
  1426                           ;main.c: 232:             {;main.c: 233:                 n_semafori++;
  1427  018C  3001               	movlw	1
  1428  018D  07D5               	addwf	_n_semafori,f
  1429  018E  1803               	skipnc
  1430  018F  0AD6               	incf	_n_semafori+1,f
  1431  0190  3000               	movlw	0
  1432  0191  07D6               	addwf	_n_semafori+1,f
  1433  0192                     l2984:	
  1434                           
  1435                           ;main.c: 231:             while ((*(Semafori[n_semafori])).times[0] == 0)
  1436  0192  0855               	movf	_n_semafori,w
  1437  0193  00BD               	movwf	??_main
  1438  0194  073D               	addwf	??_main,w
  1439  0195  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1440  0196  0084               	movwf	4
  1441  0197  1383               	bcf	3,7	;select IRP bank1
  1442  0198  0800               	movf	0,w
  1443  0199  00BE               	movwf	??_main+1
  1444  019A  0A84               	incf	4,f
  1445  019B  0800               	movf	0,w
  1446  019C  00BF               	movwf	??_main+2
  1447  019D  083E               	movf	??_main+1,w
  1448  019E  3E06               	addlw	6
  1449  019F  00C0               	movwf	??_main+3
  1450  01A0  083F               	movf	??_main+2,w
  1451  01A1  1803               	skipnc
  1452  01A2  3E01               	addlw	1
  1453  01A3  3E00               	addlw	0
  1454  01A4  00C1               	movwf	??_main+4
  1455  01A5  0840               	movf	??_main+3,w
  1456  01A6  0084               	movwf	4
  1457  01A7  1783               	bsf	3,7
  1458  01A8  1C41               	btfss	??_main+4,0
  1459  01A9  1383               	bcf	3,7
  1460  01AA  0800               	movf	0,w
  1461  01AB  00C2               	movwf	??_main+5
  1462  01AC  0A84               	incf	4,f
  1463  01AD  0800               	movf	0,w
  1464  01AE  00C3               	movwf	??_main+6
  1465  01AF  0842               	movf	??_main+5,w
  1466  01B0  0443               	iorwf	??_main+6,w
  1467  01B1  1903               	btfsc	3,2
  1468  01B2  29B4               	goto	u3081
  1469  01B3  29B5               	goto	u3080
  1470  01B4                     u3081:	
  1471  01B4  298C               	goto	l2982
  1472  01B5                     u3080:	
  1473  01B5                     l2986:	
  1474                           
  1475                           ;main.c: 236:             for (int l = 0; l < 16; l++)
  1476  01B5  1283               	bcf	3,5	;RP0=0, select bank2
  1477  01B6  1703               	bsf	3,6	;RP1=1, select bank2
  1478  01B7  01E9               	clrf	main@l^(0+256)
  1479  01B8  01EA               	clrf	(main@l+1)^(0+256)
  1480  01B9                     l2988:	
  1481  01B9  086A               	movf	(main@l+1)^(0+256),w
  1482  01BA  3A80               	xorlw	128
  1483  01BB  00FF               	movwf	btemp+1
  1484  01BC  3080               	movlw	128
  1485  01BD  027F               	subwf	btemp+1,w
  1486  01BE  1D03               	skipz
  1487  01BF  29C2               	goto	u3095
  1488  01C0  3010               	movlw	16
  1489  01C1  0269               	subwf	main@l^(0+256),w
  1490  01C2                     u3095:	
  1491  01C2  1C03               	skipc
  1492  01C3  29C5               	goto	u3091
  1493  01C4  29C6               	goto	u3090
  1494  01C5                     u3091:	
  1495  01C5  29C7               	goto	l2992
  1496  01C6                     u3090:	
  1497  01C6  2A8F               	goto	l229
  1498  01C7                     l2992:	
  1499                           
  1500                           ;main.c: 237:             {;main.c: 238:                 for (int i = 0; i < 3; i++)
  1501  01C7  1283               	bcf	3,5	;RP0=0, select bank2
  1502  01C8  1703               	bsf	3,6	;RP1=1, select bank2
  1503  01C9  01EB               	clrf	main@i_445^(0+256)
  1504  01CA  01EC               	clrf	(main@i_445+1)^(0+256)
  1505  01CB                     l2994:	
  1506  01CB  086C               	movf	(main@i_445+1)^(0+256),w
  1507  01CC  3A80               	xorlw	128
  1508  01CD  00FF               	movwf	btemp+1
  1509  01CE  3080               	movlw	128
  1510  01CF  027F               	subwf	btemp+1,w
  1511  01D0  1D03               	skipz
  1512  01D1  29D4               	goto	u3105
  1513  01D2  3003               	movlw	3
  1514  01D3  026B               	subwf	main@i_445^(0+256),w
  1515  01D4                     u3105:	
  1516  01D4  1C03               	skipc
  1517  01D5  29D7               	goto	u3101
  1518  01D6  29D8               	goto	u3100
  1519  01D7                     u3101:	
  1520  01D7  29D9               	goto	l2998
  1521  01D8                     u3100:	
  1522  01D8  2A86               	goto	l3006
  1523  01D9                     l2998:	
  1524                           
  1525                           ;main.c: 239:                 {;main.c: 240:                     if ((*(Semafori[l])).ti
      +                          mes[i] != (*(Semafori[l])).new_times[i])
  1526  01D9  1283               	bcf	3,5	;RP0=0, select bank2
  1527  01DA  1703               	bsf	3,6	;RP1=1, select bank2
  1528  01DB  0869               	movf	main@l^(0+256),w
  1529  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1530  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1531  01DE  00BD               	movwf	??_main
  1532  01DF  073D               	addwf	??_main,w
  1533  01E0  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1534  01E1  0084               	movwf	4
  1535  01E2  1383               	bcf	3,7	;select IRP bank1
  1536  01E3  0800               	movf	0,w
  1537  01E4  00BE               	movwf	??_main+1
  1538  01E5  0A84               	incf	4,f
  1539  01E6  0800               	movf	0,w
  1540  01E7  00BF               	movwf	??_main+2
  1541  01E8  1283               	bcf	3,5	;RP0=0, select bank2
  1542  01E9  1703               	bsf	3,6	;RP1=1, select bank2
  1543  01EA  086B               	movf	main@i_445^(0+256),w
  1544  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1545  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  1546  01ED  00C0               	movwf	??_main+3
  1547  01EE  0740               	addwf	??_main+3,w
  1548  01EF  073E               	addwf	??_main+1,w
  1549  01F0  00C1               	movwf	??_main+4
  1550  01F1  083F               	movf	??_main+2,w
  1551  01F2  1803               	skipnc
  1552  01F3  3E01               	addlw	1
  1553  01F4  00C2               	movwf	??_main+5
  1554  01F5  0841               	movf	??_main+4,w
  1555  01F6  0084               	movwf	4
  1556  01F7  1783               	bsf	3,7
  1557  01F8  1C42               	btfss	??_main+5,0
  1558  01F9  1383               	bcf	3,7
  1559  01FA  0800               	movf	0,w
  1560  01FB  00C3               	movwf	??_main+6
  1561  01FC  0A84               	incf	4,f
  1562  01FD  0800               	movf	0,w
  1563  01FE  00C4               	movwf	??_main+7
  1564  01FF  1283               	bcf	3,5	;RP0=0, select bank2
  1565  0200  1703               	bsf	3,6	;RP1=1, select bank2
  1566  0201  0869               	movf	main@l^(0+256),w
  1567  0202  1283               	bcf	3,5	;RP0=0, select bank0
  1568  0203  1303               	bcf	3,6	;RP1=0, select bank0
  1569  0204  00C5               	movwf	??_main+8
  1570  0205  0745               	addwf	??_main+8,w
  1571  0206  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1572  0207  0084               	movwf	4
  1573  0208  1383               	bcf	3,7	;select IRP bank1
  1574  0209  0800               	movf	0,w
  1575  020A  00C6               	movwf	??_main+9
  1576  020B  0A84               	incf	4,f
  1577  020C  0800               	movf	0,w
  1578  020D  00C7               	movwf	??_main+10
  1579  020E  1283               	bcf	3,5	;RP0=0, select bank2
  1580  020F  1703               	bsf	3,6	;RP1=1, select bank2
  1581  0210  086B               	movf	main@i_445^(0+256),w
  1582  0211  1283               	bcf	3,5	;RP0=0, select bank0
  1583  0212  1303               	bcf	3,6	;RP1=0, select bank0
  1584  0213  00C8               	movwf	??_main+11
  1585  0214  0748               	addwf	??_main+11,w
  1586  0215  3E06               	addlw	6
  1587  0216  0746               	addwf	??_main+9,w
  1588  0217  00C9               	movwf	??_main+12
  1589  0218  0847               	movf	??_main+10,w
  1590  0219  1803               	skipnc
  1591  021A  3E01               	addlw	1
  1592  021B  00CA               	movwf	??_main+13
  1593  021C  0849               	movf	??_main+12,w
  1594  021D  0084               	movwf	4
  1595  021E  1783               	bsf	3,7
  1596  021F  1C4A               	btfss	??_main+13,0
  1597  0220  1383               	bcf	3,7
  1598  0221  0800               	movf	0,w
  1599  0222  00CB               	movwf	??_main+14
  1600  0223  0A84               	incf	4,f
  1601  0224  0800               	movf	0,w
  1602  0225  00CC               	movwf	??_main+15
  1603  0226  0844               	movf	??_main+7,w
  1604  0227  064C               	xorwf	??_main+15,w
  1605  0228  1D03               	skipz
  1606  0229  2A2C               	goto	u3115
  1607  022A  0843               	movf	??_main+6,w
  1608  022B  064B               	xorwf	??_main+14,w
  1609  022C                     u3115:	
  1610  022C  1903               	skipnz
  1611  022D  2A2F               	goto	u3111
  1612  022E  2A30               	goto	u3110
  1613  022F                     u3111:	
  1614  022F  2A7D               	goto	l3002
  1615  0230                     u3110:	
  1616  0230                     l3000:	
  1617                           
  1618                           ;main.c: 241:                     {;main.c: 242:                         (*(Semafori[l])
      +                          ).times[i] = (*(Semafori[l])).new_times[i];
  1619  0230  1283               	bcf	3,5	;RP0=0, select bank2
  1620  0231  1703               	bsf	3,6	;RP1=1, select bank2
  1621  0232  0869               	movf	main@l^(0+256),w
  1622  0233  1283               	bcf	3,5	;RP0=0, select bank0
  1623  0234  1303               	bcf	3,6	;RP1=0, select bank0
  1624  0235  00BD               	movwf	??_main
  1625  0236  073D               	addwf	??_main,w
  1626  0237  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1627  0238  0084               	movwf	4
  1628  0239  1383               	bcf	3,7	;select IRP bank1
  1629  023A  0800               	movf	0,w
  1630  023B  00BE               	movwf	??_main+1
  1631  023C  0A84               	incf	4,f
  1632  023D  0800               	movf	0,w
  1633  023E  00BF               	movwf	??_main+2
  1634  023F  1283               	bcf	3,5	;RP0=0, select bank2
  1635  0240  1703               	bsf	3,6	;RP1=1, select bank2
  1636  0241  086B               	movf	main@i_445^(0+256),w
  1637  0242  1283               	bcf	3,5	;RP0=0, select bank0
  1638  0243  1303               	bcf	3,6	;RP1=0, select bank0
  1639  0244  00C0               	movwf	??_main+3
  1640  0245  0740               	addwf	??_main+3,w
  1641  0246  073E               	addwf	??_main+1,w
  1642  0247  00C1               	movwf	??_main+4
  1643  0248  083F               	movf	??_main+2,w
  1644  0249  1803               	skipnc
  1645  024A  3E01               	addlw	1
  1646  024B  00C2               	movwf	??_main+5
  1647  024C  0841               	movf	??_main+4,w
  1648  024D  0084               	movwf	4
  1649  024E  1783               	bsf	3,7
  1650  024F  1C42               	btfss	??_main+5,0
  1651  0250  1383               	bcf	3,7
  1652  0251  0800               	movf	0,w
  1653  0252  00C3               	movwf	??_main+6
  1654  0253  0A84               	incf	4,f
  1655  0254  0800               	movf	0,w
  1656  0255  00C4               	movwf	??_main+7
  1657  0256  1283               	bcf	3,5	;RP0=0, select bank2
  1658  0257  1703               	bsf	3,6	;RP1=1, select bank2
  1659  0258  0869               	movf	main@l^(0+256),w
  1660  0259  1283               	bcf	3,5	;RP0=0, select bank0
  1661  025A  1303               	bcf	3,6	;RP1=0, select bank0
  1662  025B  00C5               	movwf	??_main+8
  1663  025C  0745               	addwf	??_main+8,w
  1664  025D  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1665  025E  0084               	movwf	4
  1666  025F  1383               	bcf	3,7	;select IRP bank1
  1667  0260  0800               	movf	0,w
  1668  0261  00C6               	movwf	??_main+9
  1669  0262  0A84               	incf	4,f
  1670  0263  0800               	movf	0,w
  1671  0264  00C7               	movwf	??_main+10
  1672  0265  1283               	bcf	3,5	;RP0=0, select bank2
  1673  0266  1703               	bsf	3,6	;RP1=1, select bank2
  1674  0267  086B               	movf	main@i_445^(0+256),w
  1675  0268  1283               	bcf	3,5	;RP0=0, select bank0
  1676  0269  1303               	bcf	3,6	;RP1=0, select bank0
  1677  026A  00C8               	movwf	??_main+11
  1678  026B  0748               	addwf	??_main+11,w
  1679  026C  3E06               	addlw	6
  1680  026D  0746               	addwf	??_main+9,w
  1681  026E  00C9               	movwf	??_main+12
  1682  026F  0847               	movf	??_main+10,w
  1683  0270  1803               	skipnc
  1684  0271  3E01               	addlw	1
  1685  0272  00CA               	movwf	??_main+13
  1686  0273  0849               	movf	??_main+12,w
  1687  0274  0084               	movwf	4
  1688  0275  1783               	bsf	3,7
  1689  0276  1C4A               	btfss	??_main+13,0
  1690  0277  1383               	bcf	3,7
  1691  0278  0843               	movf	??_main+6,w
  1692  0279  0080               	movwf	0
  1693  027A  0A84               	incf	4,f
  1694  027B  0844               	movf	??_main+7,w
  1695  027C  0080               	movwf	0
  1696  027D                     l3002:	
  1697                           
  1698                           ;main.c: 244:                 }
  1699  027D  3001               	movlw	1
  1700  027E  1283               	bcf	3,5	;RP0=0, select bank2
  1701  027F  1703               	bsf	3,6	;RP1=1, select bank2
  1702  0280  07EB               	addwf	main@i_445^(0+256),f
  1703  0281  1803               	skipnc
  1704  0282  0AEC               	incf	(main@i_445+1)^(0+256),f
  1705  0283  3000               	movlw	0
  1706  0284  07EC               	addwf	(main@i_445+1)^(0+256),f
  1707  0285  29CB               	goto	l2994
  1708  0286                     l3006:	
  1709                           
  1710                           ;main.c: 245:             }
  1711  0286  3001               	movlw	1
  1712  0287  1283               	bcf	3,5	;RP0=0, select bank2
  1713  0288  1703               	bsf	3,6	;RP1=1, select bank2
  1714  0289  07E9               	addwf	main@l^(0+256),f
  1715  028A  1803               	skipnc
  1716  028B  0AEA               	incf	(main@l+1)^(0+256),f
  1717  028C  3000               	movlw	0
  1718  028D  07EA               	addwf	(main@l+1)^(0+256),f
  1719  028E  29B9               	goto	l2988
  1720  028F                     l229:	
  1721                           ;main.c: 246:         }
  1722                           
  1723                           
  1724                           ;main.c: 250:         if (secondPassed.Bit && cycled.Bit)
  1725  028F  1283               	bcf	3,5	;RP0=0, select bank0
  1726  0290  1303               	bcf	3,6	;RP1=0, select bank0
  1727  0291  1C61               	btfss	_secondPassed,0
  1728  0292  2A94               	goto	u3121
  1729  0293  2A95               	goto	u3120
  1730  0294                     u3121:	
  1731  0294  2B53               	goto	l3028
  1732  0295                     u3120:	
  1733  0295                     l3010:	
  1734  0295  1C60               	btfss	_cycled,0
  1735  0296  2A98               	goto	u3131
  1736  0297  2A99               	goto	u3130
  1737  0298                     u3131:	
  1738  0298  2B53               	goto	l3028
  1739  0299                     u3130:	
  1740  0299                     l3012:	
  1741                           
  1742                           ;main.c: 251:         {;main.c: 252:             time++;
  1743  0299  3001               	movlw	1
  1744  029A  1283               	bcf	3,5	;RP0=0, select bank2
  1745  029B  1703               	bsf	3,6	;RP1=1, select bank2
  1746  029C  07E2               	addwf	main@time^(0+256),f
  1747  029D  1803               	skipnc
  1748  029E  0AE3               	incf	(main@time+1)^(0+256),f
  1749  029F  3000               	movlw	0
  1750  02A0  07E3               	addwf	(main@time+1)^(0+256),f
  1751  02A1                     l3014:	
  1752                           
  1753                           ;main.c: 253:             endCiclo.Bit = 0;
  1754  02A1  1061               	bcf	main@endCiclo^(0+256),0
  1755  02A2                     l3016:	
  1756                           
  1757                           ;main.c: 255:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  1758  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  1759  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  1760  02A4  0855               	movf	_n_semafori,w
  1761  02A5  00BD               	movwf	??_main
  1762  02A6  073D               	addwf	??_main,w
  1763  02A7  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1764  02A8  0084               	movwf	4
  1765  02A9  1383               	bcf	3,7	;select IRP bank1
  1766  02AA  0800               	movf	0,w
  1767  02AB  00BE               	movwf	??_main+1
  1768  02AC  0A84               	incf	4,f
  1769  02AD  0800               	movf	0,w
  1770  02AE  00BF               	movwf	??_main+2
  1771  02AF  1283               	bcf	3,5	;RP0=0, select bank2
  1772  02B0  1703               	bsf	3,6	;RP1=1, select bank2
  1773  02B1  0864               	movf	main@lux_select^(0+256),w
  1774  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1775  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  1776  02B4  00C0               	movwf	??_main+3
  1777  02B5  0740               	addwf	??_main+3,w
  1778  02B6  3E06               	addlw	6
  1779  02B7  073E               	addwf	??_main+1,w
  1780  02B8  00C1               	movwf	??_main+4
  1781  02B9  083F               	movf	??_main+2,w
  1782  02BA  1803               	skipnc
  1783  02BB  3E01               	addlw	1
  1784  02BC  00C2               	movwf	??_main+5
  1785  02BD  0841               	movf	??_main+4,w
  1786  02BE  0084               	movwf	4
  1787  02BF  1783               	bsf	3,7
  1788  02C0  1C42               	btfss	??_main+5,0
  1789  02C1  1383               	bcf	3,7
  1790  02C2  0800               	movf	0,w
  1791  02C3  00C3               	movwf	??_main+6
  1792  02C4  0A84               	incf	4,f
  1793  02C5  0800               	movf	0,w
  1794  02C6  00C4               	movwf	??_main+7
  1795  02C7  1283               	bcf	3,5	;RP0=0, select bank2
  1796  02C8  1703               	bsf	3,6	;RP1=1, select bank2
  1797  02C9  0862               	movf	main@time^(0+256),w
  1798  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  1799  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  1800  02CC  0243               	subwf	??_main+6,w
  1801  02CD  00C5               	movwf	??_main+8
  1802  02CE  1283               	bcf	3,5	;RP0=0, select bank2
  1803  02CF  1703               	bsf	3,6	;RP1=1, select bank2
  1804  02D0  0863               	movf	(main@time+1)^(0+256),w
  1805  02D1  1C03               	skipc
  1806  02D2  0A63               	incf	(main@time+1)^(0+256),w
  1807  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  1808  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  1809  02D5  0244               	subwf	??_main+7,w
  1810  02D6  00C6               	movwf	??_main+9
  1811  02D7  1FC6               	btfss	??_main+9,7
  1812  02D8  2ADA               	goto	u3141
  1813  02D9  2ADB               	goto	u3140
  1814  02DA                     u3141:	
  1815  02DA  2ADE               	goto	l3020
  1816  02DB                     u3140:	
  1817  02DB                     l3018:	
  1818                           
  1819                           ;main.c: 256:             {;main.c: 257:                 endCiclo.Bit = 1;
  1820  02DB  1283               	bcf	3,5	;RP0=0, select bank2
  1821  02DC  1703               	bsf	3,6	;RP1=1, select bank2
  1822  02DD  1461               	bsf	main@endCiclo^(0+256),0
  1823  02DE                     l3020:	
  1824                           
  1825                           ;main.c: 260:             if (lux_select == 2 && time == (*Semafori[n_semafori]).times[2
      +                          ])
  1826  02DE  3002               	movlw	2
  1827  02DF  1283               	bcf	3,5	;RP0=0, select bank2
  1828  02E0  1703               	bsf	3,6	;RP1=1, select bank2
  1829  02E1  0664               	xorwf	main@lux_select^(0+256),w
  1830  02E2  1D03               	btfss	3,2
  1831  02E3  2AE5               	goto	u3151
  1832  02E4  2AE6               	goto	u3150
  1833  02E5                     u3151:	
  1834  02E5  2B1A               	goto	l3026
  1835  02E6                     u3150:	
  1836  02E6                     l3022:	
  1837  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1838  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1839  02E8  0855               	movf	_n_semafori,w
  1840  02E9  00BD               	movwf	??_main
  1841  02EA  073D               	addwf	??_main,w
  1842  02EB  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1843  02EC  0084               	movwf	4
  1844  02ED  1383               	bcf	3,7	;select IRP bank1
  1845  02EE  0800               	movf	0,w
  1846  02EF  00BE               	movwf	??_main+1
  1847  02F0  0A84               	incf	4,f
  1848  02F1  0800               	movf	0,w
  1849  02F2  00BF               	movwf	??_main+2
  1850  02F3  083E               	movf	??_main+1,w
  1851  02F4  3E0A               	addlw	10
  1852  02F5  00C0               	movwf	??_main+3
  1853  02F6  083F               	movf	??_main+2,w
  1854  02F7  1803               	skipnc
  1855  02F8  3E01               	addlw	1
  1856  02F9  3E00               	addlw	0
  1857  02FA  00C1               	movwf	??_main+4
  1858  02FB  0840               	movf	??_main+3,w
  1859  02FC  0084               	movwf	4
  1860  02FD  1783               	bsf	3,7
  1861  02FE  1C41               	btfss	??_main+4,0
  1862  02FF  1383               	bcf	3,7
  1863  0300  0800               	movf	0,w
  1864  0301  00C2               	movwf	??_main+5
  1865  0302  0A84               	incf	4,f
  1866  0303  0800               	movf	0,w
  1867  0304  00C3               	movwf	??_main+6
  1868  0305  1283               	bcf	3,5	;RP0=0, select bank2
  1869  0306  1703               	bsf	3,6	;RP1=1, select bank2
  1870  0307  0863               	movf	(main@time+1)^(0+256),w
  1871  0308  1283               	bcf	3,5	;RP0=0, select bank0
  1872  0309  1303               	bcf	3,6	;RP1=0, select bank0
  1873  030A  0643               	xorwf	??_main+6,w
  1874  030B  1D03               	skipz
  1875  030C  2B13               	goto	u3165
  1876  030D  1283               	bcf	3,5	;RP0=0, select bank2
  1877  030E  1703               	bsf	3,6	;RP1=1, select bank2
  1878  030F  0862               	movf	main@time^(0+256),w
  1879  0310  1283               	bcf	3,5	;RP0=0, select bank0
  1880  0311  1303               	bcf	3,6	;RP1=0, select bank0
  1881  0312  0642               	xorwf	??_main+5,w
  1882  0313                     u3165:	
  1883  0313  1D03               	skipz
  1884  0314  2B16               	goto	u3161
  1885  0315  2B17               	goto	u3160
  1886  0316                     u3161:	
  1887  0316  2B1A               	goto	l3026
  1888  0317                     u3160:	
  1889  0317                     l3024:	
  1890                           
  1891                           ;main.c: 261:             {;main.c: 262:                 endCiclo.Bit = 1;
  1892  0317  1283               	bcf	3,5	;RP0=0, select bank2
  1893  0318  1703               	bsf	3,6	;RP1=1, select bank2
  1894  0319  1461               	bsf	main@endCiclo^(0+256),0
  1895  031A                     l3026:	
  1896                           
  1897                           ;main.c: 265:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  1898  031A  1303               	bcf	3,6	;RP1=0, select bank0
  1899  031B  0855               	movf	_n_semafori,w
  1900  031C  00BD               	movwf	??_main
  1901  031D  073D               	addwf	??_main,w
  1902  031E  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  1903  031F  0084               	movwf	4
  1904  0320  1383               	bcf	3,7	;select IRP bank1
  1905  0321  0800               	movf	0,w
  1906  0322  00BE               	movwf	??_main+1
  1907  0323  0A84               	incf	4,f
  1908  0324  0800               	movf	0,w
  1909  0325  00BF               	movwf	??_main+2
  1910  0326  1283               	bcf	3,5	;RP0=0, select bank2
  1911  0327  1703               	bsf	3,6	;RP1=1, select bank2
  1912  0328  0864               	movf	main@lux_select^(0+256),w
  1913  0329  1283               	bcf	3,5	;RP0=0, select bank0
  1914  032A  1303               	bcf	3,6	;RP1=0, select bank0
  1915  032B  00C0               	movwf	??_main+3
  1916  032C  0740               	addwf	??_main+3,w
  1917  032D  3E06               	addlw	6
  1918  032E  073E               	addwf	??_main+1,w
  1919  032F  00C1               	movwf	??_main+4
  1920  0330  083F               	movf	??_main+2,w
  1921  0331  1803               	skipnc
  1922  0332  3E01               	addlw	1
  1923  0333  00C2               	movwf	??_main+5
  1924  0334  0841               	movf	??_main+4,w
  1925  0335  0084               	movwf	4
  1926  0336  1783               	bsf	3,7
  1927  0337  1C42               	btfss	??_main+5,0
  1928  0338  1383               	bcf	3,7
  1929  0339  0800               	movf	0,w
  1930  033A  00C3               	movwf	??_main+6
  1931  033B  0A84               	incf	4,f
  1932  033C  0800               	movf	0,w
  1933  033D  00C4               	movwf	??_main+7
  1934  033E  1283               	bcf	3,5	;RP0=0, select bank2
  1935  033F  1703               	bsf	3,6	;RP1=1, select bank2
  1936  0340  0862               	movf	main@time^(0+256),w
  1937  0341  1283               	bcf	3,5	;RP0=0, select bank0
  1938  0342  1303               	bcf	3,6	;RP1=0, select bank0
  1939  0343  0243               	subwf	??_main+6,w
  1940  0344  00B0               	movwf	GetDigits@Time
  1941  0345  1283               	bcf	3,5	;RP0=0, select bank2
  1942  0346  1703               	bsf	3,6	;RP1=1, select bank2
  1943  0347  0863               	movf	(main@time+1)^(0+256),w
  1944  0348  1C03               	skipc
  1945  0349  0A63               	incf	(main@time+1)^(0+256),w
  1946  034A  1283               	bcf	3,5	;RP0=0, select bank0
  1947  034B  1303               	bcf	3,6	;RP1=0, select bank0
  1948  034C  0244               	subwf	??_main+7,w
  1949  034D  00B1               	movwf	GetDigits@Time+1
  1950  034E  120A  158A  26F8  120A  118A  	fcall	_GetDigits
  1951  0353                     l3028:	
  1952                           
  1953                           ;main.c: 269:         if (disp != old_disp)
  1954  0353  1283               	bcf	3,5	;RP0=0, select bank0
  1955  0354  1303               	bcf	3,6	;RP1=0, select bank0
  1956  0355  085B               	movf	_disp,w
  1957  0356  065C               	xorwf	_old_disp,w
  1958  0357  1903               	skipnz
  1959  0358  2B5A               	goto	u3171
  1960  0359  2B5B               	goto	u3170
  1961  035A                     u3171:	
  1962  035A  2BC0               	goto	l3048
  1963  035B                     u3170:	
  1964  035B                     l3030:	
  1965                           
  1966                           ;main.c: 270:         {;main.c: 271:             old_disp = disp;
  1967  035B  085B               	movf	_disp,w
  1968  035C  00BD               	movwf	??_main
  1969  035D  083D               	movf	??_main,w
  1970  035E  00DC               	movwf	_old_disp
  1971                           
  1972                           ;main.c: 272:             switch (disp)
  1973  035F  2BAD               	goto	l3046
  1974  0360                     l3032:	
  1975                           
  1976                           ;main.c: 275:                 if (centinaia > 0)
  1977  0360  085D               	movf	_centinaia,w
  1978  0361  1903               	btfsc	3,2
  1979  0362  2B64               	goto	u3181
  1980  0363  2B65               	goto	u3180
  1981  0364                     u3181:	
  1982  0364  2BC0               	goto	l3048
  1983  0365                     u3180:	
  1984  0365                     l3034:	
  1985                           
  1986                           ;main.c: 276:                 {;main.c: 277:                     SetDisplay(1, 0, 0, dis
      +                          play[centinaia]);
  1987  0365  01A0               	clrf	SetDisplay@d2
  1988  0366  01A1               	clrf	SetDisplay@d3
  1989  0367  085D               	movf	_centinaia,w
  1990  0368  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  1991  0369  0084               	movwf	4
  1992  036A  120A  158A  2000  120A  118A  	fcall	stringdir
  1993  036F  00BD               	movwf	??_main
  1994  0370  083D               	movf	??_main,w
  1995  0371  00A2               	movwf	SetDisplay@value
  1996  0372  3001               	movlw	1
  1997  0373  120A  158A  2454  120A  118A  	fcall	_SetDisplay
  1998  0378  2BC0               	goto	l3048
  1999  0379                     l3036:	
  2000                           
  2001                           ;main.c: 281:                 if (decine > 0 || centinaia > 0)
  2002  0379  085E               	movf	_decine,w
  2003  037A  1D03               	btfss	3,2
  2004  037B  2B7D               	goto	u3191
  2005  037C  2B7E               	goto	u3190
  2006  037D                     u3191:	
  2007  037D  2B83               	goto	l3040
  2008  037E                     u3190:	
  2009  037E                     l3038:	
  2010  037E  085D               	movf	_centinaia,w
  2011  037F  1903               	btfsc	3,2
  2012  0380  2B82               	goto	u3201
  2013  0381  2B83               	goto	u3200
  2014  0382                     u3201:	
  2015  0382  2BC0               	goto	l3048
  2016  0383                     u3200:	
  2017  0383                     l3040:	
  2018                           
  2019                           ;main.c: 282:                 {;main.c: 283:                     SetDisplay(0, 1, 0, dis
      +                          play[decine]);
  2020  0383  01A0               	clrf	SetDisplay@d2
  2021  0384  0AA0               	incf	SetDisplay@d2,f
  2022  0385  01A1               	clrf	SetDisplay@d3
  2023  0386  085E               	movf	_decine,w
  2024  0387  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2025  0388  0084               	movwf	4
  2026  0389  120A  158A  2000  120A  118A  	fcall	stringdir
  2027  038E  00BD               	movwf	??_main
  2028  038F  083D               	movf	??_main,w
  2029  0390  00A2               	movwf	SetDisplay@value
  2030  0391  3000               	movlw	0
  2031  0392  120A  158A  2454  120A  118A  	fcall	_SetDisplay
  2032  0397  2BC0               	goto	l3048
  2033  0398                     l3042:	
  2034                           
  2035                           ;main.c: 287:                 SetDisplay(0, 0, 1, display[unita]);
  2036  0398  01A0               	clrf	SetDisplay@d2
  2037  0399  01A1               	clrf	SetDisplay@d3
  2038  039A  0AA1               	incf	SetDisplay@d3,f
  2039  039B  085F               	movf	_unita,w
  2040  039C  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2041  039D  0084               	movwf	4
  2042  039E  120A  158A  2000  120A  118A  	fcall	stringdir
  2043  03A3  00BD               	movwf	??_main
  2044  03A4  083D               	movf	??_main,w
  2045  03A5  00A2               	movwf	SetDisplay@value
  2046  03A6  3000               	movlw	0
  2047  03A7  120A  158A  2454  120A  118A  	fcall	_SetDisplay
  2048                           
  2049                           ;main.c: 288:                 break;
  2050  03AC  2BC0               	goto	l3048
  2051  03AD                     l3046:	
  2052  03AD  085B               	movf	_disp,w
  2053  03AE  00BD               	movwf	??_main
  2054  03AF  01BE               	clrf	??_main+1
  2055                           
  2056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2057                           ; Switch size 1, requested type "simple"
  2058                           ; Number of cases is 1, Range of values is 0 to 0
  2059                           ; switch strategies available:
  2060                           ; Name         Instructions Cycles
  2061                           ; simple_byte            4     3 (average)
  2062                           ; direct_byte           11     8 (fixed)
  2063                           ; jumptable            260     6 (fixed)
  2064                           ;	Chosen strategy is simple_byte
  2065  03B0  083E               	movf	??_main+1,w
  2066  03B1  3A00               	xorlw	0	; case 0
  2067  03B2  1903               	skipnz
  2068  03B3  2BB5               	goto	l3190
  2069  03B4  2BC0               	goto	l3048
  2070  03B5                     l3190:	
  2071                           
  2072                           ; Switch size 1, requested type "simple"
  2073                           ; Number of cases is 3, Range of values is 0 to 2
  2074                           ; switch strategies available:
  2075                           ; Name         Instructions Cycles
  2076                           ; simple_byte           10     6 (average)
  2077                           ; direct_byte           17     8 (fixed)
  2078                           ; jumptable            260     6 (fixed)
  2079                           ;	Chosen strategy is simple_byte
  2080  03B5  083D               	movf	??_main,w
  2081  03B6  3A00               	xorlw	0	; case 0
  2082  03B7  1903               	skipnz
  2083  03B8  2B60               	goto	l3032
  2084  03B9  3A01               	xorlw	1	; case 1
  2085  03BA  1903               	skipnz
  2086  03BB  2B79               	goto	l3036
  2087  03BC  3A03               	xorlw	3	; case 2
  2088  03BD  1903               	skipnz
  2089  03BE  2B98               	goto	l3042
  2090  03BF  2BC0               	goto	l3048
  2091  03C0                     l3048:	
  2092                           
  2093                           ;main.c: 291:         disp = (disp + 1) % 3;
  2094  03C0  3003               	movlw	3
  2095  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  2096  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  2097  03C3  00A0               	movwf	___awmod@divisor
  2098  03C4  3000               	movlw	0
  2099  03C5  00A1               	movwf	___awmod@divisor+1
  2100  03C6  085B               	movf	_disp,w
  2101  03C7  3E01               	addlw	1
  2102  03C8  00A2               	movwf	___awmod@dividend
  2103  03C9  3000               	movlw	0
  2104  03CA  1803               	skipnc
  2105  03CB  3001               	movlw	1
  2106  03CC  00A3               	movwf	___awmod@dividend+1
  2107  03CD  120A  158A  2634  120A  118A  	fcall	___awmod
  2108  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  2109  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  2110  03D4  0820               	movf	?___awmod,w
  2111  03D5  00BD               	movwf	??_main
  2112  03D6  083D               	movf	??_main,w
  2113  03D7  00DB               	movwf	_disp
  2114  03D8                     l3050:	
  2115                           
  2116                           ;main.c: 297:         if (secondPassed.Bit && cycled.Bit)
  2117  03D8  1C61               	btfss	_secondPassed,0
  2118  03D9  2BDB               	goto	u3211
  2119  03DA  2BDC               	goto	u3210
  2120  03DB                     u3211:	
  2121  03DB  2BE2               	goto	l251
  2122  03DC                     u3210:	
  2123  03DC                     l3052:	
  2124  03DC  1C60               	btfss	_cycled,0
  2125  03DD  2BDF               	goto	u3221
  2126  03DE  2BE0               	goto	u3220
  2127  03DF                     u3221:	
  2128  03DF  2BE2               	goto	l251
  2129  03E0                     u3220:	
  2130  03E0                     l3054:	
  2131                           
  2132                           ;main.c: 298:         {;main.c: 299:             secondPassed.Bit = 0;
  2133  03E0  1061               	bcf	_secondPassed,0
  2134                           
  2135                           ;main.c: 300:             cycled.Bit = 0;
  2136  03E1  1060               	bcf	_cycled,0
  2137  03E2                     l251:	
  2138                           ;main.c: 301:         }
  2139                           
  2140                           
  2141                           ;main.c: 303:         if (secondPassed.Bit && !cycled.Bit)
  2142  03E2  1C61               	btfss	_secondPassed,0
  2143  03E3  2BE5               	goto	u3231
  2144  03E4  2BE6               	goto	u3230
  2145  03E5                     u3231:	
  2146  03E5  2BEB               	goto	l3060
  2147  03E6                     u3230:	
  2148  03E6                     l3056:	
  2149  03E6  1860               	btfsc	_cycled,0
  2150  03E7  2BE9               	goto	u3241
  2151  03E8  2BEA               	goto	u3240
  2152  03E9                     u3241:	
  2153  03E9  2BEB               	goto	l3060
  2154  03EA                     u3240:	
  2155  03EA                     l3058:	
  2156                           
  2157                           ;main.c: 304:         {;main.c: 305:             cycled.Bit = 1;
  2158  03EA  1460               	bsf	_cycled,0
  2159  03EB                     l3060:	
  2160                           
  2161                           ;main.c: 309:         if ((dataFromGateway[1] & 0x7F) == 0x08)
  2162  03EB  307F               	movlw	127
  2163  03EC  1683               	bsf	3,5	;RP0=1, select bank1
  2164  03ED  1303               	bcf	3,6	;RP1=0, select bank1
  2165  03EE  0521               	andwf	(_dataFromGateway^(0+128)+1),w
  2166  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2167  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2168  03F1  00BD               	movwf	??_main
  2169  03F2  3008               	movlw	8
  2170  03F3  063D               	xorwf	??_main,w
  2171  03F4  1D03               	btfss	3,2
  2172  03F5  2BF7               	goto	u3251
  2173  03F6  2BF8               	goto	u3250
  2174  03F7                     u3251:	
  2175  03F7  2CAE               	goto	l3086
  2176  03F8                     u3250:	
  2177  03F8                     l3062:	
  2178                           
  2179                           ;main.c: 310:         {;main.c: 311:             for (int i = 0; i < 4; i++)
  2180  03F8  1283               	bcf	3,5	;RP0=0, select bank2
  2181  03F9  1703               	bsf	3,6	;RP1=1, select bank2
  2182  03FA  01ED               	clrf	main@i_446^(0+256)
  2183  03FB  01EE               	clrf	(main@i_446+1)^(0+256)
  2184  03FC                     l3064:	
  2185  03FC  086E               	movf	(main@i_446+1)^(0+256),w
  2186  03FD  3A80               	xorlw	128
  2187  03FE  00FF               	movwf	btemp+1
  2188  03FF  3080               	movlw	128
  2189  0400  027F               	subwf	btemp+1,w
  2190  0401  1D03               	skipz
  2191  0402  2C05               	goto	u3265
  2192  0403  3004               	movlw	4
  2193  0404  026D               	subwf	main@i_446^(0+256),w
  2194  0405                     u3265:	
  2195  0405  1C03               	skipc
  2196  0406  2C08               	goto	u3261
  2197  0407  2C09               	goto	u3260
  2198  0408                     u3261:	
  2199  0408  2C0A               	goto	l3068
  2200  0409                     u3260:	
  2201  0409  2C86               	goto	l3074
  2202  040A                     l3068:	
  2203                           
  2204                           ;main.c: 312:             {;main.c: 313:                 sendByte((0x01 << (i + 1)), 0x0
      +                          1, motorcycle[i]);
  2205  040A  1283               	bcf	3,5	;RP0=0, select bank0
  2206  040B  1303               	bcf	3,6	;RP1=0, select bank0
  2207  040C  01B4               	clrf	sendByte@byte1
  2208  040D  0AB4               	incf	sendByte@byte1,f
  2209  040E  1283               	bcf	3,5	;RP0=0, select bank2
  2210  040F  1703               	bsf	3,6	;RP1=1, select bank2
  2211  0410  086D               	movf	main@i_446^(0+256),w
  2212  0411  3E51               	addlw	(low (_motorcycle| 0))& (0+255)
  2213  0412  0084               	movwf	4
  2214  0413  1383               	bcf	3,7	;select IRP bank0
  2215  0414  0800               	movf	0,w
  2216  0415  1283               	bcf	3,5	;RP0=0, select bank0
  2217  0416  1303               	bcf	3,6	;RP1=0, select bank0
  2218  0417  00BD               	movwf	??_main
  2219  0418  083D               	movf	??_main,w
  2220  0419  00B5               	movwf	sendByte@valore
  2221  041A  3001               	movlw	1
  2222  041B  00BE               	movwf	??_main+1
  2223  041C  1283               	bcf	3,5	;RP0=0, select bank2
  2224  041D  1703               	bsf	3,6	;RP1=1, select bank2
  2225  041E  086D               	movf	main@i_446^(0+256),w
  2226  041F  3E01               	addlw	1
  2227  0420  3E01               	addlw	1
  2228  0421  1283               	bcf	3,5	;RP0=0, select bank0
  2229  0422  1303               	bcf	3,6	;RP1=0, select bank0
  2230  0423  2C26               	goto	u3274
  2231  0424                     u3275:	
  2232  0424  1003               	clrc
  2233  0425  0DBE               	rlf	??_main+1,f
  2234  0426                     u3274:	
  2235  0426  3EFF               	addlw	-1
  2236  0427  1D03               	skipz
  2237  0428  2C24               	goto	u3275
  2238  0429  083E               	movf	??_main+1,w
  2239  042A  120A  158A  2561  120A  118A  	fcall	_sendByte
  2240                           
  2241                           ;main.c: 314:                 sendByte((0x01 << (i + 1)), 0x10, car[i]);
  2242  042F  3010               	movlw	16
  2243  0430  1283               	bcf	3,5	;RP0=0, select bank0
  2244  0431  1303               	bcf	3,6	;RP1=0, select bank0
  2245  0432  00BD               	movwf	??_main
  2246  0433  083D               	movf	??_main,w
  2247  0434  00B4               	movwf	sendByte@byte1
  2248  0435  1283               	bcf	3,5	;RP0=0, select bank2
  2249  0436  1703               	bsf	3,6	;RP1=1, select bank2
  2250  0437  086D               	movf	main@i_446^(0+256),w
  2251  0438  3E4D               	addlw	(low (_car| 0))& (0+255)
  2252  0439  0084               	movwf	4
  2253  043A  1383               	bcf	3,7	;select IRP bank0
  2254  043B  0800               	movf	0,w
  2255  043C  1283               	bcf	3,5	;RP0=0, select bank0
  2256  043D  1303               	bcf	3,6	;RP1=0, select bank0
  2257  043E  00BE               	movwf	??_main+1
  2258  043F  083E               	movf	??_main+1,w
  2259  0440  00B5               	movwf	sendByte@valore
  2260  0441  3001               	movlw	1
  2261  0442  00BF               	movwf	??_main+2
  2262  0443  1283               	bcf	3,5	;RP0=0, select bank2
  2263  0444  1703               	bsf	3,6	;RP1=1, select bank2
  2264  0445  086D               	movf	main@i_446^(0+256),w
  2265  0446  3E01               	addlw	1
  2266  0447  3E01               	addlw	1
  2267  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2268  0449  1303               	bcf	3,6	;RP1=0, select bank0
  2269  044A  2C4D               	goto	u3284
  2270  044B                     u3285:	
  2271  044B  1003               	clrc
  2272  044C  0DBF               	rlf	??_main+2,f
  2273  044D                     u3284:	
  2274  044D  3EFF               	addlw	-1
  2275  044E  1D03               	skipz
  2276  044F  2C4B               	goto	u3285
  2277  0450  083F               	movf	??_main+2,w
  2278  0451  120A  158A  2561  120A  118A  	fcall	_sendByte
  2279                           
  2280                           ;main.c: 315:                 sendByte((0x01 << (i + 1)), 0x11, truck[i]);
  2281  0456  3011               	movlw	17
  2282  0457  1283               	bcf	3,5	;RP0=0, select bank0
  2283  0458  1303               	bcf	3,6	;RP1=0, select bank0
  2284  0459  00BD               	movwf	??_main
  2285  045A  083D               	movf	??_main,w
  2286  045B  00B4               	movwf	sendByte@byte1
  2287  045C  1283               	bcf	3,5	;RP0=0, select bank2
  2288  045D  1703               	bsf	3,6	;RP1=1, select bank2
  2289  045E  086D               	movf	main@i_446^(0+256),w
  2290  045F  3EAF               	addlw	(low (_truck| 0))& (0+255)
  2291  0460  0084               	movwf	4
  2292  0461  1383               	bcf	3,7	;select IRP bank1
  2293  0462  0800               	movf	0,w
  2294  0463  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0464  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0465  00BE               	movwf	??_main+1
  2297  0466  083E               	movf	??_main+1,w
  2298  0467  00B5               	movwf	sendByte@valore
  2299  0468  3001               	movlw	1
  2300  0469  00BF               	movwf	??_main+2
  2301  046A  1283               	bcf	3,5	;RP0=0, select bank2
  2302  046B  1703               	bsf	3,6	;RP1=1, select bank2
  2303  046C  086D               	movf	main@i_446^(0+256),w
  2304  046D  3E01               	addlw	1
  2305  046E  3E01               	addlw	1
  2306  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0471  2C74               	goto	u3294
  2309  0472                     u3295:	
  2310  0472  1003               	clrc
  2311  0473  0DBF               	rlf	??_main+2,f
  2312  0474                     u3294:	
  2313  0474  3EFF               	addlw	-1
  2314  0475  1D03               	skipz
  2315  0476  2C72               	goto	u3295
  2316  0477  083F               	movf	??_main+2,w
  2317  0478  120A  158A  2561  120A  118A  	fcall	_sendByte
  2318  047D                     l3070:	
  2319                           
  2320                           ;main.c: 316:             }
  2321  047D  3001               	movlw	1
  2322  047E  1283               	bcf	3,5	;RP0=0, select bank2
  2323  047F  1703               	bsf	3,6	;RP1=1, select bank2
  2324  0480  07ED               	addwf	main@i_446^(0+256),f
  2325  0481  1803               	skipnc
  2326  0482  0AEE               	incf	(main@i_446+1)^(0+256),f
  2327  0483  3000               	movlw	0
  2328  0484  07EE               	addwf	(main@i_446+1)^(0+256),f
  2329  0485  2BFC               	goto	l3064
  2330  0486                     l3074:	
  2331                           
  2332                           ;main.c: 317:             for (int i = 0; i < 4; i++)
  2333  0486  1283               	bcf	3,5	;RP0=0, select bank2
  2334  0487  1703               	bsf	3,6	;RP1=1, select bank2
  2335  0488  01E7               	clrf	main@i_447^(0+256)
  2336  0489  01E8               	clrf	(main@i_447+1)^(0+256)
  2337  048A                     l3076:	
  2338  048A  0868               	movf	(main@i_447+1)^(0+256),w
  2339  048B  3A80               	xorlw	128
  2340  048C  00FF               	movwf	btemp+1
  2341  048D  3080               	movlw	128
  2342  048E  027F               	subwf	btemp+1,w
  2343  048F  1D03               	skipz
  2344  0490  2C93               	goto	u3305
  2345  0491  3004               	movlw	4
  2346  0492  0267               	subwf	main@i_447^(0+256),w
  2347  0493                     u3305:	
  2348  0493  1C03               	skipc
  2349  0494  2C96               	goto	u3301
  2350  0495  2C97               	goto	u3300
  2351  0496                     u3301:	
  2352  0496  2C98               	goto	l3080
  2353  0497                     u3300:	
  2354  0497  2CAE               	goto	l3086
  2355  0498                     l3080:	
  2356                           
  2357                           ;main.c: 318:             {;main.c: 319:                 motorcycle[i] = 0;
  2358  0498  1283               	bcf	3,5	;RP0=0, select bank2
  2359  0499  1703               	bsf	3,6	;RP1=1, select bank2
  2360  049A  0867               	movf	main@i_447^(0+256),w
  2361  049B  3E51               	addlw	(low (_motorcycle| 0))& (0+255)
  2362  049C  0084               	movwf	4
  2363  049D  1383               	bcf	3,7	;select IRP bank0
  2364  049E  0180               	clrf	0
  2365                           
  2366                           ;main.c: 320:                 car[i] = 0;
  2367  049F  0867               	movf	main@i_447^(0+256),w
  2368  04A0  3E4D               	addlw	(low (_car| 0))& (0+255)
  2369  04A1  0084               	movwf	4
  2370  04A2  0180               	clrf	0
  2371                           
  2372                           ;main.c: 321:                 truck[i] = 0;
  2373  04A3  0867               	movf	main@i_447^(0+256),w
  2374  04A4  3EAF               	addlw	(low (_truck| 0))& (0+255)
  2375  04A5  0084               	movwf	4
  2376  04A6  0180               	clrf	0
  2377  04A7                     l3082:	
  2378                           
  2379                           ;main.c: 322:             }
  2380  04A7  3001               	movlw	1
  2381  04A8  07E7               	addwf	main@i_447^(0+256),f
  2382  04A9  1803               	skipnc
  2383  04AA  0AE8               	incf	(main@i_447+1)^(0+256),f
  2384  04AB  3000               	movlw	0
  2385  04AC  07E8               	addwf	(main@i_447+1)^(0+256),f
  2386  04AD  2C8A               	goto	l3076
  2387  04AE                     l3086:	
  2388                           
  2389                           ;main.c: 327:         if ((dataFromGateway[1] & 0x7F) == 0x0A)
  2390  04AE  307F               	movlw	127
  2391  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  2392  04B0  1303               	bcf	3,6	;RP1=0, select bank1
  2393  04B1  0521               	andwf	(_dataFromGateway^(0+128)+1),w
  2394  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  2395  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  2396  04B4  00BD               	movwf	??_main
  2397  04B5  300A               	movlw	10
  2398  04B6  063D               	xorwf	??_main,w
  2399  04B7  1D03               	btfss	3,2
  2400  04B8  2CBA               	goto	u3311
  2401  04B9  2CBB               	goto	u3310
  2402  04BA                     u3311:	
  2403  04BA  288C               	goto	l2936
  2404  04BB                     u3310:	
  2405  04BB                     l3088:	
  2406                           
  2407                           ;main.c: 328:         {;main.c: 329:             temp = (char)map((ADC_Read(0) >> 2), 0,
      +                           255, -20, 60);
  2408  04BB  3000               	movlw	0
  2409  04BC  120A  158A  24A5  120A  118A  	fcall	_ADC_Read
  2410  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  2411  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  2412  04C3  0820               	movf	?_ADC_Read,w
  2413  04C4  00BD               	movwf	??_main
  2414  04C5  0821               	movf	?_ADC_Read+1,w
  2415  04C6  00BE               	movwf	??_main+1
  2416  04C7  0D3E               	rlf	??_main+1,w
  2417  04C8  0CBE               	rrf	??_main+1,f
  2418  04C9  0CBD               	rrf	??_main,f
  2419  04CA  0D3E               	rlf	??_main+1,w
  2420  04CB  0CBE               	rrf	??_main+1,f
  2421  04CC  0CBD               	rrf	??_main,f
  2422  04CD  083D               	movf	??_main,w
  2423  04CE  00B0               	movwf	map@x
  2424  04CF  083E               	movf	??_main+1,w
  2425  04D0  00B1               	movwf	map@x+1
  2426  04D1  3000               	movlw	0
  2427  04D2  00B2               	movwf	map@in_min
  2428  04D3  00B3               	movwf	map@in_min+1
  2429  04D4  30FF               	movlw	255
  2430  04D5  00B4               	movwf	map@in_max
  2431  04D6  3000               	movlw	0
  2432  04D7  00B5               	movwf	map@in_max+1
  2433  04D8  30EC               	movlw	236
  2434  04D9  00B6               	movwf	map@out_min
  2435  04DA  30FF               	movlw	255
  2436  04DB  00B7               	movwf	map@out_min+1
  2437  04DC  303C               	movlw	60
  2438  04DD  00B8               	movwf	map@out_max
  2439  04DE  3000               	movlw	0
  2440  04DF  00B9               	movwf	map@out_max+1
  2441  04E0  120A  158A  24F2  120A  118A  	fcall	_map
  2442  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  2443  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  2444  04E7  0830               	movf	?_map,w
  2445  04E8  00BF               	movwf	??_main+2
  2446  04E9  083F               	movf	??_main+2,w
  2447  04EA  1283               	bcf	3,5	;RP0=0, select bank2
  2448  04EB  1703               	bsf	3,6	;RP1=1, select bank2
  2449  04EC  00DE               	movwf	main@temp^(0+256)
  2450                           
  2451                           ;main.c: 330:             umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  2452  04ED  3001               	movlw	1
  2453  04EE  120A  158A  24A5  120A  118A  	fcall	_ADC_Read
  2454  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  2455  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  2456  04F5  0820               	movf	?_ADC_Read,w
  2457  04F6  00BD               	movwf	??_main
  2458  04F7  0821               	movf	?_ADC_Read+1,w
  2459  04F8  00BE               	movwf	??_main+1
  2460  04F9  0D3E               	rlf	??_main+1,w
  2461  04FA  0CBE               	rrf	??_main+1,f
  2462  04FB  0CBD               	rrf	??_main,f
  2463  04FC  0D3E               	rlf	??_main+1,w
  2464  04FD  0CBE               	rrf	??_main+1,f
  2465  04FE  0CBD               	rrf	??_main,f
  2466  04FF  083D               	movf	??_main,w
  2467  0500  00B0               	movwf	map@x
  2468  0501  083E               	movf	??_main+1,w
  2469  0502  00B1               	movwf	map@x+1
  2470  0503  3000               	movlw	0
  2471  0504  00B2               	movwf	map@in_min
  2472  0505  00B3               	movwf	map@in_min+1
  2473  0506  30FF               	movlw	255
  2474  0507  00B4               	movwf	map@in_max
  2475  0508  3000               	movlw	0
  2476  0509  00B5               	movwf	map@in_max+1
  2477  050A  3000               	movlw	0
  2478  050B  00B6               	movwf	map@out_min
  2479  050C  00B7               	movwf	map@out_min+1
  2480  050D  3064               	movlw	100
  2481  050E  00B8               	movwf	map@out_max
  2482  050F  3000               	movlw	0
  2483  0510  00B9               	movwf	map@out_max+1
  2484  0511  120A  158A  24F2  120A  118A  	fcall	_map
  2485  0516  1283               	bcf	3,5	;RP0=0, select bank0
  2486  0517  1303               	bcf	3,6	;RP1=0, select bank0
  2487  0518  0830               	movf	?_map,w
  2488  0519  00BF               	movwf	??_main+2
  2489  051A  083F               	movf	??_main+2,w
  2490  051B  1283               	bcf	3,5	;RP0=0, select bank2
  2491  051C  1703               	bsf	3,6	;RP1=1, select bank2
  2492  051D  00DF               	movwf	main@umidita^(0+256)
  2493                           
  2494                           ;main.c: 331:             pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  2495  051E  3005               	movlw	5
  2496  051F  120A  158A  24A5  120A  118A  	fcall	_ADC_Read
  2497  0524  1283               	bcf	3,5	;RP0=0, select bank0
  2498  0525  1303               	bcf	3,6	;RP1=0, select bank0
  2499  0526  0820               	movf	?_ADC_Read,w
  2500  0527  00BD               	movwf	??_main
  2501  0528  0821               	movf	?_ADC_Read+1,w
  2502  0529  00BE               	movwf	??_main+1
  2503  052A  0D3E               	rlf	??_main+1,w
  2504  052B  0CBE               	rrf	??_main+1,f
  2505  052C  0CBD               	rrf	??_main,f
  2506  052D  0D3E               	rlf	??_main+1,w
  2507  052E  0CBE               	rrf	??_main+1,f
  2508  052F  0CBD               	rrf	??_main,f
  2509  0530  083D               	movf	??_main,w
  2510  0531  00B0               	movwf	map@x
  2511  0532  083E               	movf	??_main+1,w
  2512  0533  00B1               	movwf	map@x+1
  2513  0534  3000               	movlw	0
  2514  0535  00B2               	movwf	map@in_min
  2515  0536  00B3               	movwf	map@in_min+1
  2516  0537  30FF               	movlw	255
  2517  0538  00B4               	movwf	map@in_max
  2518  0539  3000               	movlw	0
  2519  053A  00B5               	movwf	map@in_max+1
  2520  053B  3000               	movlw	0
  2521  053C  00B6               	movwf	map@out_min
  2522  053D  00B7               	movwf	map@out_min+1
  2523  053E  3064               	movlw	100
  2524  053F  00B8               	movwf	map@out_max
  2525  0540  3000               	movlw	0
  2526  0541  00B9               	movwf	map@out_max+1
  2527  0542  120A  158A  24F2  120A  118A  	fcall	_map
  2528  0547  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0548  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0549  0830               	movf	?_map,w
  2531  054A  00BF               	movwf	??_main+2
  2532  054B  083F               	movf	??_main+2,w
  2533  054C  1283               	bcf	3,5	;RP0=0, select bank2
  2534  054D  1703               	bsf	3,6	;RP1=1, select bank2
  2535  054E  00E0               	movwf	main@pressione^(0+256)
  2536  054F                     l3090:	
  2537                           
  2538                           ;main.c: 332:             sendByte(0x02, 0x00, temp);
  2539  054F  1283               	bcf	3,5	;RP0=0, select bank0
  2540  0550  1303               	bcf	3,6	;RP1=0, select bank0
  2541  0551  01B4               	clrf	sendByte@byte1
  2542  0552  1283               	bcf	3,5	;RP0=0, select bank2
  2543  0553  1703               	bsf	3,6	;RP1=1, select bank2
  2544  0554  085E               	movf	main@temp^(0+256),w
  2545  0555  1283               	bcf	3,5	;RP0=0, select bank0
  2546  0556  1303               	bcf	3,6	;RP1=0, select bank0
  2547  0557  00BD               	movwf	??_main
  2548  0558  083D               	movf	??_main,w
  2549  0559  00B5               	movwf	sendByte@valore
  2550  055A  3002               	movlw	2
  2551  055B  120A  158A  2561  120A  118A  	fcall	_sendByte
  2552  0560                     l3092:	
  2553                           
  2554                           ;main.c: 333:             sendByte(0x04, 0x00, umidita);
  2555  0560  1283               	bcf	3,5	;RP0=0, select bank0
  2556  0561  1303               	bcf	3,6	;RP1=0, select bank0
  2557  0562  01B4               	clrf	sendByte@byte1
  2558  0563  1283               	bcf	3,5	;RP0=0, select bank2
  2559  0564  1703               	bsf	3,6	;RP1=1, select bank2
  2560  0565  085F               	movf	main@umidita^(0+256),w
  2561  0566  1283               	bcf	3,5	;RP0=0, select bank0
  2562  0567  1303               	bcf	3,6	;RP1=0, select bank0
  2563  0568  00BD               	movwf	??_main
  2564  0569  083D               	movf	??_main,w
  2565  056A  00B5               	movwf	sendByte@valore
  2566  056B  3004               	movlw	4
  2567  056C  120A  158A  2561  120A  118A  	fcall	_sendByte
  2568  0571                     l3094:	
  2569                           
  2570                           ;main.c: 334:             sendByte(0x06, 0x00, pressione);
  2571  0571  1283               	bcf	3,5	;RP0=0, select bank0
  2572  0572  1303               	bcf	3,6	;RP1=0, select bank0
  2573  0573  01B4               	clrf	sendByte@byte1
  2574  0574  1283               	bcf	3,5	;RP0=0, select bank2
  2575  0575  1703               	bsf	3,6	;RP1=1, select bank2
  2576  0576  0860               	movf	main@pressione^(0+256),w
  2577  0577  1283               	bcf	3,5	;RP0=0, select bank0
  2578  0578  1303               	bcf	3,6	;RP1=0, select bank0
  2579  0579  00BD               	movwf	??_main
  2580  057A  083D               	movf	??_main,w
  2581  057B  00B5               	movwf	sendByte@valore
  2582  057C  3006               	movlw	6
  2583  057D  120A  158A  2561  120A  118A  	fcall	_sendByte
  2584  0582  288C               	goto	l2936
  2585  0583  120A  118A  280E   	ljmp	start
  2586  0586                     __end_of_main:	
  2587                           
  2588                           	psect	text1
  2589  0D61                     __ptext1:	
  2590 ;; *************** function _sendByte *****************
  2591 ;; Defined at:
  2592 ;;		line 399 in file "main.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;  byte0           1    wreg     unsigned char 
  2595 ;;  byte1           1   20[BANK0 ] unsigned char 
  2596 ;;  valore          1   21[BANK0 ] unsigned char 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  byte0           1   25[BANK0 ] unsigned char 
  2599 ;;  i               2   27[BANK0 ] int 
  2600 ;;  txByte          1   26[BANK0 ] PTR unsigned char 
  2601 ;;		 -> BuildByte@txByte(5), 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2611 ;;      Params:         0       2       0       0       0
  2612 ;;      Locals:         0       4       0       0       0
  2613 ;;      Temps:          0       3       0       0       0
  2614 ;;      Totals:         0       9       0       0       0
  2615 ;;Total ram usage:        9 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    4
  2618 ;; This function calls:
  2619 ;;		_BuildByte
  2620 ;;		_UART_Write_Text
  2621 ;; This function is called by:
  2622 ;;		_main
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function _sendByte
  2628  0D61                     _sendByte:	
  2629                           
  2630                           ;incstack = 0
  2631                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2632                           ;sendByte@byte0 stored from wreg
  2633  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  2634  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  2635  0D63  00B9               	movwf	sendByte@byte0
  2636  0D64                     l2848:	
  2637                           
  2638                           ;main.c: 399: void sendByte(char byte0, char byte1, char valore);main.c: 400: {;main.c: 
      +                          401:     char *txByte;;main.c: 402:     txByte = BuildByte(byte0, byte1, valore);
  2639  0D64  0834               	movf	sendByte@byte1,w
  2640  0D65  00B6               	movwf	??_sendByte
  2641  0D66  0836               	movf	??_sendByte,w
  2642  0D67  00A0               	movwf	BuildByte@byte1
  2643  0D68  0835               	movf	sendByte@valore,w
  2644  0D69  00B7               	movwf	??_sendByte+1
  2645  0D6A  0837               	movf	??_sendByte+1,w
  2646  0D6B  00A1               	movwf	BuildByte@valore
  2647  0D6C  0839               	movf	sendByte@byte0,w
  2648  0D6D  120A  118A  2674  120A  158A  	fcall	_BuildByte
  2649  0D72  1283               	bcf	3,5	;RP0=0, select bank0
  2650  0D73  1303               	bcf	3,6	;RP1=0, select bank0
  2651  0D74  00B8               	movwf	??_sendByte+2
  2652  0D75  0838               	movf	??_sendByte+2,w
  2653  0D76  00BA               	movwf	sendByte@txByte
  2654  0D77                     l2850:	
  2655                           
  2656                           ;main.c: 404:     for (int i = 0; i < 5; i++)
  2657  0D77  01BB               	clrf	sendByte@i
  2658  0D78  01BC               	clrf	sendByte@i+1
  2659  0D79                     l2856:	
  2660                           
  2661                           ;main.c: 405:     {;main.c: 406:         UART_Write_Text(txByte++);
  2662  0D79  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0D7A  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0D7B  083A               	movf	sendByte@txByte,w
  2665  0D7C  120A  158A  2480  120A  158A  	fcall	_UART_Write_Text
  2666  0D81                     l2858:	
  2667  0D81  3001               	movlw	1
  2668  0D82  1283               	bcf	3,5	;RP0=0, select bank0
  2669  0D83  1303               	bcf	3,6	;RP1=0, select bank0
  2670  0D84  00B6               	movwf	??_sendByte
  2671  0D85  0836               	movf	??_sendByte,w
  2672  0D86  07BA               	addwf	sendByte@txByte,f
  2673  0D87                     l2860:	
  2674                           
  2675                           ;main.c: 407:     }
  2676  0D87  3001               	movlw	1
  2677  0D88  07BB               	addwf	sendByte@i,f
  2678  0D89  1803               	skipnc
  2679  0D8A  0ABC               	incf	sendByte@i+1,f
  2680  0D8B  3000               	movlw	0
  2681  0D8C  07BC               	addwf	sendByte@i+1,f
  2682  0D8D                     l2862:	
  2683  0D8D  083C               	movf	sendByte@i+1,w
  2684  0D8E  3A80               	xorlw	128
  2685  0D8F  00FF               	movwf	btemp+1
  2686  0D90  3080               	movlw	128
  2687  0D91  027F               	subwf	btemp+1,w
  2688  0D92  1D03               	skipz
  2689  0D93  2D96               	goto	u2945
  2690  0D94  3005               	movlw	5
  2691  0D95  023B               	subwf	sendByte@i,w
  2692  0D96                     u2945:	
  2693  0D96  1C03               	skipc
  2694  0D97  2D99               	goto	u2941
  2695  0D98  2D9A               	goto	u2940
  2696  0D99                     u2941:	
  2697  0D99  2D79               	goto	l2856
  2698  0D9A                     u2940:	
  2699  0D9A                     l296:	
  2700  0D9A  0008               	return
  2701  0D9B                     __end_of_sendByte:	
  2702                           
  2703                           	psect	text2
  2704  0C80                     __ptext2:	
  2705 ;; *************** function _UART_Write_Text *****************
  2706 ;; Defined at:
  2707 ;;		line 382 in file "main.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  text            1    wreg     PTR unsigned char 
  2710 ;;		 -> BuildByte@txByte(5), 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  text            1    2[BANK0 ] PTR unsigned char 
  2713 ;;		 -> BuildByte@txByte(5), 
  2714 ;;  i               2    3[BANK0 ] int 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      void 
  2717 ;; Registers used:
  2718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2724 ;;      Params:         0       0       0       0       0
  2725 ;;      Locals:         0       3       0       0       0
  2726 ;;      Temps:          0       1       0       0       0
  2727 ;;      Totals:         0       4       0       0       0
  2728 ;;Total ram usage:        4 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    3
  2731 ;; This function calls:
  2732 ;;		_UART_TxChar
  2733 ;; This function is called by:
  2734 ;;		_sendByte
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           
  2739                           ;psect for function _UART_Write_Text
  2740  0C80                     _UART_Write_Text:	
  2741                           
  2742                           ;incstack = 0
  2743                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2744                           ;UART_Write_Text@text stored from wreg
  2745  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  2746  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  2747  0C82  00A2               	movwf	UART_Write_Text@text
  2748  0C83                     l2620:	
  2749                           
  2750                           ;main.c: 382: void UART_Write_Text(char *text);main.c: 383: {;main.c: 384:     int i;;ma
      +                          in.c: 385:     for (i = 0; text[i] != '\0'; i++)
  2751  0C83  01A3               	clrf	UART_Write_Text@i
  2752  0C84  01A4               	clrf	UART_Write_Text@i+1
  2753  0C85  2C99               	goto	l2626
  2754  0C86                     l2622:	
  2755                           
  2756                           ;main.c: 386:     {;main.c: 387:         UART_TxChar(text[i]);
  2757  0C86  0823               	movf	UART_Write_Text@i,w
  2758  0C87  0722               	addwf	UART_Write_Text@text,w
  2759  0C88  00A1               	movwf	??_UART_Write_Text
  2760  0C89  0821               	movf	??_UART_Write_Text,w
  2761  0C8A  0084               	movwf	4
  2762  0C8B  0800               	movf	0,w
  2763  0C8C  120A  158A  2423  120A  158A  	fcall	_UART_TxChar
  2764  0C91                     l2624:	
  2765                           
  2766                           ;main.c: 388:     }
  2767  0C91  3001               	movlw	1
  2768  0C92  1283               	bcf	3,5	;RP0=0, select bank0
  2769  0C93  1303               	bcf	3,6	;RP1=0, select bank0
  2770  0C94  07A3               	addwf	UART_Write_Text@i,f
  2771  0C95  1803               	skipnc
  2772  0C96  0AA4               	incf	UART_Write_Text@i+1,f
  2773  0C97  3000               	movlw	0
  2774  0C98  07A4               	addwf	UART_Write_Text@i+1,f
  2775  0C99                     l2626:	
  2776  0C99  0823               	movf	UART_Write_Text@i,w
  2777  0C9A  0722               	addwf	UART_Write_Text@text,w
  2778  0C9B  00A1               	movwf	??_UART_Write_Text
  2779  0C9C  0821               	movf	??_UART_Write_Text,w
  2780  0C9D  0084               	movwf	4
  2781  0C9E  1383               	bcf	3,7	;select IRP bank0
  2782  0C9F  0800               	movf	0,w
  2783  0CA0  1D03               	btfss	3,2
  2784  0CA1  2CA3               	goto	u2561
  2785  0CA2  2CA4               	goto	u2560
  2786  0CA3                     u2561:	
  2787  0CA3  2C86               	goto	l2622
  2788  0CA4                     u2560:	
  2789  0CA4                     l285:	
  2790  0CA4  0008               	return
  2791  0CA5                     __end_of_UART_Write_Text:	
  2792                           
  2793                           	psect	text3
  2794  0C23                     __ptext3:	
  2795 ;; *************** function _UART_TxChar *****************
  2796 ;; Defined at:
  2797 ;;		line 374 in file "main.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;  ch              1    wreg     unsigned char 
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;  ch              1    0[BANK0 ] unsigned char 
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2811 ;;      Params:         0       0       0       0       0
  2812 ;;      Locals:         0       1       0       0       0
  2813 ;;      Temps:          0       0       0       0       0
  2814 ;;      Totals:         0       1       0       0       0
  2815 ;;Total ram usage:        1 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    2
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_UART_Write_Text
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           
  2826                           ;psect for function _UART_TxChar
  2827  0C23                     _UART_TxChar:	
  2828                           
  2829                           ;incstack = 0
  2830                           ; Regs used in _UART_TxChar: [wreg]
  2831                           ;UART_TxChar@ch stored from wreg
  2832  0C23  1283               	bcf	3,5	;RP0=0, select bank0
  2833  0C24  1303               	bcf	3,6	;RP1=0, select bank0
  2834  0C25  00A0               	movwf	UART_TxChar@ch
  2835  0C26                     l2548:	
  2836  0C26                     l276:	
  2837                           ;main.c: 377:         ;
  2838                           
  2839                           
  2840                           ;main.c: 376:     while (!TXIF)
  2841  0C26  1E0C               	btfss	12,4	;volatile
  2842  0C27  2C29               	goto	u2451
  2843  0C28  2C2A               	goto	u2450
  2844  0C29                     u2451:	
  2845  0C29  2C26               	goto	l276
  2846  0C2A                     u2450:	
  2847  0C2A                     l278:	
  2848                           
  2849                           ;main.c: 378:     TXIF = 0;
  2850  0C2A  120C               	bcf	12,4	;volatile
  2851  0C2B                     l2550:	
  2852                           
  2853                           ;main.c: 379:     TXREG = ch;
  2854  0C2B  0820               	movf	UART_TxChar@ch,w
  2855  0C2C  0099               	movwf	25	;volatile
  2856  0C2D                     l279:	
  2857  0C2D  0008               	return
  2858  0C2E                     __end_of_UART_TxChar:	
  2859                           
  2860                           	psect	text4
  2861  0674                     __ptext4:	
  2862 ;; *************** function _BuildByte *****************
  2863 ;; Defined at:
  2864 ;;		line 2 in file "./CustomLib/Serial.h"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  byte0           1    wreg     unsigned char 
  2867 ;;  byte1           1    0[BANK0 ] unsigned char 
  2868 ;;  valore          1    1[BANK0 ] unsigned char 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  byte0           1    4[BANK0 ] unsigned char 
  2871 ;;  y               2   14[BANK0 ] int 
  2872 ;;  y               2   12[BANK0 ] int 
  2873 ;;  i               2   18[BANK0 ] int 
  2874 ;;  i               2   16[BANK0 ] int 
  2875 ;;  txByte          5    5[BANK0 ] unsigned char [5]
  2876 ;;  sommaColumn     1   11[BANK0 ] unsigned char 
  2877 ;;  sommaRow        1   10[BANK0 ] unsigned char 
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      PTR unsigned char 
  2880 ;; Registers used:
  2881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2887 ;;      Params:         0       2       0       0       0
  2888 ;;      Locals:         0      16       0       0       0
  2889 ;;      Temps:          0       2       0       0       0
  2890 ;;      Totals:         0      20       0       0       0
  2891 ;;Total ram usage:       20 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    2
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_sendByte
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           
  2902                           ;psect for function _BuildByte
  2903  0674                     _BuildByte:	
  2904                           
  2905                           ;incstack = 0
  2906                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2907                           ;BuildByte@byte0 stored from wreg
  2908  0674  1283               	bcf	3,5	;RP0=0, select bank0
  2909  0675  1303               	bcf	3,6	;RP1=0, select bank0
  2910  0676  00A4               	movwf	BuildByte@byte0
  2911  0677                     l2552:	
  2912                           
  2913                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2914  0677  0824               	movf	BuildByte@byte0,w
  2915  0678  397F               	andlw	127
  2916  0679  00A2               	movwf	??_BuildByte
  2917  067A  0822               	movf	??_BuildByte,w
  2918  067B  00A5               	movwf	BuildByte@txByte
  2919                           
  2920                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2921  067C  0820               	movf	BuildByte@byte1,w
  2922  067D  397F               	andlw	127
  2923  067E  00A2               	movwf	??_BuildByte
  2924  067F  0822               	movf	??_BuildByte,w
  2925  0680  00A6               	movwf	BuildByte@txByte+1
  2926                           
  2927                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2928  0681  0821               	movf	BuildByte@valore,w
  2929  0682  397F               	andlw	127
  2930  0683  00A2               	movwf	??_BuildByte
  2931  0684  0822               	movf	??_BuildByte,w
  2932  0685  00A7               	movwf	BuildByte@txByte+2
  2933  0686                     l2554:	
  2934                           
  2935                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2936  0686  0821               	movf	BuildByte@valore,w
  2937  0687  00A2               	movwf	??_BuildByte
  2938  0688  3007               	movlw	7
  2939  0689                     u2465:	
  2940  0689  1003               	clrc
  2941  068A  0CA2               	rrf	??_BuildByte,f
  2942  068B  3EFF               	addlw	-1
  2943  068C  1D03               	skipz
  2944  068D  2E89               	goto	u2465
  2945  068E  0822               	movf	??_BuildByte,w
  2946  068F  397F               	andlw	127
  2947  0690  00A3               	movwf	??_BuildByte+1
  2948  0691  0823               	movf	??_BuildByte+1,w
  2949  0692  00A8               	movwf	BuildByte@txByte+3
  2950  0693                     l2556:	
  2951                           
  2952                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2953  0693  01AA               	clrf	BuildByte@sommaRow
  2954  0694                     l2558:	
  2955                           
  2956                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2957  0694  01AB               	clrf	BuildByte@sommaColumn
  2958  0695                     l2560:	
  2959                           
  2960                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2961  0695  01B0               	clrf	BuildByte@i
  2962  0696  01B1               	clrf	BuildByte@i+1
  2963  0697                     l2566:	
  2964                           
  2965                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2966  0697  1283               	bcf	3,5	;RP0=0, select bank0
  2967  0698  1303               	bcf	3,6	;RP1=0, select bank0
  2968  0699  01AC               	clrf	BuildByte@y
  2969  069A  01AD               	clrf	BuildByte@y+1
  2970  069B                     l2572:	
  2971                           
  2972                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2973  069B  1283               	bcf	3,5	;RP0=0, select bank0
  2974  069C  1303               	bcf	3,6	;RP1=0, select bank0
  2975  069D  0830               	movf	BuildByte@i,w
  2976  069E  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2977  069F  0084               	movwf	4
  2978  06A0  1383               	bcf	3,7	;select IRP bank0
  2979  06A1  0800               	movf	0,w
  2980  06A2  00A2               	movwf	??_BuildByte
  2981  06A3  0A2C               	incf	BuildByte@y,w
  2982  06A4  2EA7               	goto	u2474
  2983  06A5                     u2475:	
  2984  06A5  1003               	clrc
  2985  06A6  0CA2               	rrf	??_BuildByte,f
  2986  06A7                     u2474:	
  2987  06A7  3EFF               	addlw	-1
  2988  06A8  1D03               	skipz
  2989  06A9  2EA5               	goto	u2475
  2990  06AA  0822               	movf	??_BuildByte,w
  2991  06AB  3901               	andlw	1
  2992  06AC  00A3               	movwf	??_BuildByte+1
  2993  06AD  0823               	movf	??_BuildByte+1,w
  2994  06AE  07AA               	addwf	BuildByte@sommaRow,f
  2995  06AF                     l2574:	
  2996                           
  2997                           ;./CustomLib/Serial.h: 18:         }
  2998  06AF  3001               	movlw	1
  2999  06B0  07AC               	addwf	BuildByte@y,f
  3000  06B1  1803               	skipnc
  3001  06B2  0AAD               	incf	BuildByte@y+1,f
  3002  06B3  3000               	movlw	0
  3003  06B4  07AD               	addwf	BuildByte@y+1,f
  3004  06B5                     l2576:	
  3005  06B5  082D               	movf	BuildByte@y+1,w
  3006  06B6  3A80               	xorlw	128
  3007  06B7  00FF               	movwf	btemp+1
  3008  06B8  3080               	movlw	128
  3009  06B9  027F               	subwf	btemp+1,w
  3010  06BA  1D03               	skipz
  3011  06BB  2EBE               	goto	u2485
  3012  06BC  3008               	movlw	8
  3013  06BD  022C               	subwf	BuildByte@y,w
  3014  06BE                     u2485:	
  3015  06BE  1C03               	skipc
  3016  06BF  2EC1               	goto	u2481
  3017  06C0  2EC2               	goto	u2480
  3018  06C1                     u2481:	
  3019  06C1  2E9B               	goto	l2572
  3020  06C2                     u2480:	
  3021  06C2                     l119:	
  3022                           
  3023                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  3024  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  3025  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  3026  06C4  1C2A               	btfss	BuildByte@sommaRow,0
  3027  06C5  2EC7               	goto	u2491
  3028  06C6  2EC8               	goto	u2490
  3029  06C7                     u2491:	
  3030  06C7  2ED0               	goto	l2580
  3031  06C8                     u2490:	
  3032  06C8                     l2578:	
  3033                           
  3034                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  3035  06C8  3080               	movlw	128
  3036  06C9  00A2               	movwf	??_BuildByte
  3037  06CA  0830               	movf	BuildByte@i,w
  3038  06CB  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3039  06CC  0084               	movwf	4
  3040  06CD  0822               	movf	??_BuildByte,w
  3041  06CE  1383               	bcf	3,7	;select IRP bank0
  3042  06CF  0780               	addwf	0,f
  3043  06D0                     l2580:	
  3044                           
  3045                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  3046  06D0  01AA               	clrf	BuildByte@sommaRow
  3047  06D1                     l2584:	
  3048                           ;./CustomLib/Serial.h: 23:         }
  3049                           
  3050                           
  3051                           ;./CustomLib/Serial.h: 28:     }
  3052  06D1  3001               	movlw	1
  3053  06D2  07B0               	addwf	BuildByte@i,f
  3054  06D3  1803               	skipnc
  3055  06D4  0AB1               	incf	BuildByte@i+1,f
  3056  06D5  3000               	movlw	0
  3057  06D6  07B1               	addwf	BuildByte@i+1,f
  3058  06D7                     l2586:	
  3059  06D7  0831               	movf	BuildByte@i+1,w
  3060  06D8  3A80               	xorlw	128
  3061  06D9  00FF               	movwf	btemp+1
  3062  06DA  3080               	movlw	128
  3063  06DB  027F               	subwf	btemp+1,w
  3064  06DC  1D03               	skipz
  3065  06DD  2EE0               	goto	u2505
  3066  06DE  3004               	movlw	4
  3067  06DF  0230               	subwf	BuildByte@i,w
  3068  06E0                     u2505:	
  3069  06E0  1C03               	skipc
  3070  06E1  2EE3               	goto	u2501
  3071  06E2  2EE4               	goto	u2500
  3072  06E3                     u2501:	
  3073  06E3  2E97               	goto	l2566
  3074  06E4                     u2500:	
  3075  06E4                     l2588:	
  3076                           
  3077                           ;./CustomLib/Serial.h: 30:     for (int i = 0; i < 8; i++)
  3078  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  3079  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  3080  06E6  01B2               	clrf	BuildByte@i_342
  3081  06E7  01B3               	clrf	BuildByte@i_342+1
  3082  06E8                     l2594:	
  3083                           
  3084                           ;./CustomLib/Serial.h: 31:     {;./CustomLib/Serial.h: 32:         for (int y = 0; y < 4
      +                          ; y++)
  3085  06E8  1283               	bcf	3,5	;RP0=0, select bank0
  3086  06E9  1303               	bcf	3,6	;RP1=0, select bank0
  3087  06EA  01AE               	clrf	BuildByte@y_343
  3088  06EB  01AF               	clrf	BuildByte@y_343+1
  3089  06EC                     l2600:	
  3090                           
  3091                           ;./CustomLib/Serial.h: 34:         {;./CustomLib/Serial.h: 35:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3092  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  3093  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  3094  06EE  082E               	movf	BuildByte@y_343,w
  3095  06EF  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3096  06F0  0084               	movwf	4
  3097  06F1  1383               	bcf	3,7	;select IRP bank0
  3098  06F2  0800               	movf	0,w
  3099  06F3  00A2               	movwf	??_BuildByte
  3100  06F4  0A32               	incf	BuildByte@i_342,w
  3101  06F5  2EF8               	goto	u2514
  3102  06F6                     u2515:	
  3103  06F6  1003               	clrc
  3104  06F7  0CA2               	rrf	??_BuildByte,f
  3105  06F8                     u2514:	
  3106  06F8  3EFF               	addlw	-1
  3107  06F9  1D03               	skipz
  3108  06FA  2EF6               	goto	u2515
  3109  06FB  0822               	movf	??_BuildByte,w
  3110  06FC  3901               	andlw	1
  3111  06FD  00A3               	movwf	??_BuildByte+1
  3112  06FE  0823               	movf	??_BuildByte+1,w
  3113  06FF  07AB               	addwf	BuildByte@sommaColumn,f
  3114  0700                     l2602:	
  3115                           
  3116                           ;./CustomLib/Serial.h: 36:         }
  3117  0700  3001               	movlw	1
  3118  0701  07AE               	addwf	BuildByte@y_343,f
  3119  0702  1803               	skipnc
  3120  0703  0AAF               	incf	BuildByte@y_343+1,f
  3121  0704  3000               	movlw	0
  3122  0705  07AF               	addwf	BuildByte@y_343+1,f
  3123  0706                     l2604:	
  3124  0706  082F               	movf	BuildByte@y_343+1,w
  3125  0707  3A80               	xorlw	128
  3126  0708  00FF               	movwf	btemp+1
  3127  0709  3080               	movlw	128
  3128  070A  027F               	subwf	btemp+1,w
  3129  070B  1D03               	skipz
  3130  070C  2F0F               	goto	u2525
  3131  070D  3004               	movlw	4
  3132  070E  022E               	subwf	BuildByte@y_343,w
  3133  070F                     u2525:	
  3134  070F  1C03               	skipc
  3135  0710  2F12               	goto	u2521
  3136  0711  2F13               	goto	u2520
  3137  0712                     u2521:	
  3138  0712  2EEC               	goto	l2600
  3139  0713                     u2520:	
  3140  0713                     l125:	
  3141                           
  3142                           ;./CustomLib/Serial.h: 37:         if (sommaColumn % 2 == 1)
  3143  0713  1283               	bcf	3,5	;RP0=0, select bank0
  3144  0714  1303               	bcf	3,6	;RP1=0, select bank0
  3145  0715  1C2B               	btfss	BuildByte@sommaColumn,0
  3146  0716  2F18               	goto	u2531
  3147  0717  2F19               	goto	u2530
  3148  0718                     u2531:	
  3149  0718  2F26               	goto	l2608
  3150  0719                     u2530:	
  3151  0719                     l2606:	
  3152                           
  3153                           ;./CustomLib/Serial.h: 38:         {;./CustomLib/Serial.h: 39:             txByte[4] += 
      +                          0x01 << i;
  3154  0719  3001               	movlw	1
  3155  071A  00A2               	movwf	??_BuildByte
  3156  071B  0A32               	incf	BuildByte@i_342,w
  3157  071C  2F1F               	goto	u2544
  3158  071D                     u2545:	
  3159  071D  1003               	clrc
  3160  071E  0DA2               	rlf	??_BuildByte,f
  3161  071F                     u2544:	
  3162  071F  3EFF               	addlw	-1
  3163  0720  1D03               	skipz
  3164  0721  2F1D               	goto	u2545
  3165  0722  0822               	movf	??_BuildByte,w
  3166  0723  00A3               	movwf	??_BuildByte+1
  3167  0724  0823               	movf	??_BuildByte+1,w
  3168  0725  07A9               	addwf	BuildByte@txByte+4,f
  3169  0726                     l2608:	
  3170                           
  3171                           ;./CustomLib/Serial.h: 40:             sommaColumn = 0;
  3172  0726  01AB               	clrf	BuildByte@sommaColumn
  3173  0727                     l2612:	
  3174                           ;./CustomLib/Serial.h: 41:         }
  3175                           
  3176                           
  3177                           ;./CustomLib/Serial.h: 46:     }
  3178  0727  3001               	movlw	1
  3179  0728  07B2               	addwf	BuildByte@i_342,f
  3180  0729  1803               	skipnc
  3181  072A  0AB3               	incf	BuildByte@i_342+1,f
  3182  072B  3000               	movlw	0
  3183  072C  07B3               	addwf	BuildByte@i_342+1,f
  3184  072D                     l2614:	
  3185  072D  0833               	movf	BuildByte@i_342+1,w
  3186  072E  3A80               	xorlw	128
  3187  072F  00FF               	movwf	btemp+1
  3188  0730  3080               	movlw	128
  3189  0731  027F               	subwf	btemp+1,w
  3190  0732  1D03               	skipz
  3191  0733  2F36               	goto	u2555
  3192  0734  3008               	movlw	8
  3193  0735  0232               	subwf	BuildByte@i_342,w
  3194  0736                     u2555:	
  3195  0736  1C03               	skipc
  3196  0737  2F39               	goto	u2551
  3197  0738  2F3A               	goto	u2550
  3198  0739                     u2551:	
  3199  0739  2EE8               	goto	l2594
  3200  073A                     u2550:	
  3201  073A                     l2616:	
  3202                           
  3203                           ;./CustomLib/Serial.h: 48:     return txByte;
  3204  073A  3025               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3205  073B                     l128:	
  3206  073B  0008               	return
  3207  073C                     __end_of_BuildByte:	
  3208                           
  3209                           	psect	text5
  3210  0CF2                     __ptext5:	
  3211 ;; *************** function _map *****************
  3212 ;; Defined at:
  3213 ;;		line 1 in file "./CustomLib/Conversions.h"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  x               2   16[BANK0 ] int 
  3216 ;;  in_min          2   18[BANK0 ] int 
  3217 ;;  in_max          2   20[BANK0 ] int 
  3218 ;;  out_min         2   22[BANK0 ] int 
  3219 ;;  out_max         2   24[BANK0 ] int 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;		None
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  2   16[BANK0 ] int 
  3224 ;; Registers used:
  3225 ;;		wreg, status,2, status,0, pclath, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3231 ;;      Params:         0      10       0       0       0
  3232 ;;      Locals:         0       0       0       0       0
  3233 ;;      Temps:          0       0       0       0       0
  3234 ;;      Totals:         0      10       0       0       0
  3235 ;;Total ram usage:       10 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    3
  3238 ;; This function calls:
  3239 ;;		___awdiv
  3240 ;;		___wmul
  3241 ;; This function is called by:
  3242 ;;		_main
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           
  3247                           ;psect for function _map
  3248  0CF2                     _map:	
  3249  0CF2                     l2764:	
  3250                           ;incstack = 0
  3251                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3252                           
  3253                           
  3254                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3255  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  3256  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  3257  0CF4  0832               	movf	map@in_min,w
  3258  0CF5  0234               	subwf	map@in_max,w
  3259  0CF6  00A7               	movwf	___awdiv@divisor
  3260  0CF7  0833               	movf	map@in_min+1,w
  3261  0CF8  1C03               	skipc
  3262  0CF9  0A33               	incf	map@in_min+1,w
  3263  0CFA  0235               	subwf	map@in_max+1,w
  3264  0CFB  00A8               	movwf	___awdiv@divisor+1
  3265  0CFC  0832               	movf	map@in_min,w
  3266  0CFD  0230               	subwf	map@x,w
  3267  0CFE  00A0               	movwf	___wmul@multiplier
  3268  0CFF  0833               	movf	map@in_min+1,w
  3269  0D00  1C03               	skipc
  3270  0D01  0A33               	incf	map@in_min+1,w
  3271  0D02  0231               	subwf	map@x+1,w
  3272  0D03  00A1               	movwf	___wmul@multiplier+1
  3273  0D04  0836               	movf	map@out_min,w
  3274  0D05  0238               	subwf	map@out_max,w
  3275  0D06  00A2               	movwf	___wmul@multiplicand
  3276  0D07  0837               	movf	map@out_min+1,w
  3277  0D08  1C03               	skipc
  3278  0D09  0A37               	incf	map@out_min+1,w
  3279  0D0A  0239               	subwf	map@out_max+1,w
  3280  0D0B  00A3               	movwf	___wmul@multiplicand+1
  3281  0D0C  120A  158A  24CB  120A  158A  	fcall	___wmul
  3282  0D11  1283               	bcf	3,5	;RP0=0, select bank0
  3283  0D12  1303               	bcf	3,6	;RP1=0, select bank0
  3284  0D13  0821               	movf	?___wmul+1,w
  3285  0D14  00AA               	movwf	___awdiv@dividend+1
  3286  0D15  0820               	movf	?___wmul,w
  3287  0D16  00A9               	movwf	___awdiv@dividend
  3288  0D17  120A  158A  268F  120A  158A  	fcall	___awdiv
  3289  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0D1D  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0D1E  0836               	movf	map@out_min,w
  3292  0D1F  0727               	addwf	?___awdiv,w
  3293  0D20  00B0               	movwf	?_map
  3294  0D21  0837               	movf	map@out_min+1,w
  3295  0D22  1803               	skipnc
  3296  0D23  0A37               	incf	map@out_min+1,w
  3297  0D24  0728               	addwf	?___awdiv+1,w
  3298  0D25  00B1               	movwf	?_map+1
  3299  0D26                     l83:	
  3300  0D26  0008               	return
  3301  0D27                     __end_of_map:	
  3302                           
  3303                           	psect	text6
  3304  0CCB                     __ptext6:	
  3305 ;; *************** function ___wmul *****************
  3306 ;; Defined at:
  3307 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3310 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  product         2    4[BANK0 ] unsigned int 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  2    0[BANK0 ] unsigned int 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2, status,0
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3322 ;;      Params:         0       4       0       0       0
  3323 ;;      Locals:         0       2       0       0       0
  3324 ;;      Temps:          0       0       0       0       0
  3325 ;;      Totals:         0       6       0       0       0
  3326 ;;Total ram usage:        6 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    2
  3329 ;; This function calls:
  3330 ;;		Nothing
  3331 ;; This function is called by:
  3332 ;;		_map
  3333 ;;		_main
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           
  3338                           ;psect for function ___wmul
  3339  0CCB                     ___wmul:	
  3340  0CCB                     l2628:	
  3341                           ;incstack = 0
  3342                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3343                           
  3344  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  3345  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  3346  0CCD  01A4               	clrf	___wmul@product
  3347  0CCE  01A5               	clrf	___wmul@product+1
  3348  0CCF                     l2630:	
  3349  0CCF  1C20               	btfss	___wmul@multiplier,0
  3350  0CD0  2CD2               	goto	u2571
  3351  0CD1  2CD3               	goto	u2570
  3352  0CD2                     u2571:	
  3353  0CD2  2CD9               	goto	l440
  3354  0CD3                     u2570:	
  3355  0CD3                     l2632:	
  3356  0CD3  0822               	movf	___wmul@multiplicand,w
  3357  0CD4  07A4               	addwf	___wmul@product,f
  3358  0CD5  1803               	skipnc
  3359  0CD6  0AA5               	incf	___wmul@product+1,f
  3360  0CD7  0823               	movf	___wmul@multiplicand+1,w
  3361  0CD8  07A5               	addwf	___wmul@product+1,f
  3362  0CD9                     l440:	
  3363  0CD9  3001               	movlw	1
  3364  0CDA                     u2585:	
  3365  0CDA  1003               	clrc
  3366  0CDB  0DA2               	rlf	___wmul@multiplicand,f
  3367  0CDC  0DA3               	rlf	___wmul@multiplicand+1,f
  3368  0CDD  3EFF               	addlw	-1
  3369  0CDE  1D03               	skipz
  3370  0CDF  2CDA               	goto	u2585
  3371  0CE0                     l2634:	
  3372  0CE0  3001               	movlw	1
  3373  0CE1                     u2595:	
  3374  0CE1  1003               	clrc
  3375  0CE2  0CA1               	rrf	___wmul@multiplier+1,f
  3376  0CE3  0CA0               	rrf	___wmul@multiplier,f
  3377  0CE4  3EFF               	addlw	-1
  3378  0CE5  1D03               	skipz
  3379  0CE6  2CE1               	goto	u2595
  3380  0CE7                     l2636:	
  3381  0CE7  0820               	movf	___wmul@multiplier,w
  3382  0CE8  0421               	iorwf	___wmul@multiplier+1,w
  3383  0CE9  1D03               	btfss	3,2
  3384  0CEA  2CEC               	goto	u2601
  3385  0CEB  2CED               	goto	u2600
  3386  0CEC                     u2601:	
  3387  0CEC  2CCF               	goto	l2630
  3388  0CED                     u2600:	
  3389  0CED                     l2638:	
  3390  0CED  0825               	movf	___wmul@product+1,w
  3391  0CEE  00A1               	movwf	?___wmul+1
  3392  0CEF  0824               	movf	___wmul@product,w
  3393  0CF0  00A0               	movwf	?___wmul
  3394  0CF1                     l442:	
  3395  0CF1  0008               	return
  3396  0CF2                     __end_of___wmul:	
  3397                           
  3398                           	psect	text7
  3399  0C2E                     __ptext7:	
  3400 ;; *************** function _init_ADC *****************
  3401 ;; Defined at:
  3402 ;;		line 343 in file "main.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;		None
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;		None
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  1    wreg      void 
  3409 ;; Registers used:
  3410 ;;		wreg, status,2
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3416 ;;      Params:         0       0       0       0       0
  3417 ;;      Locals:         0       0       0       0       0
  3418 ;;      Temps:          0       1       0       0       0
  3419 ;;      Totals:         0       1       0       0       0
  3420 ;;Total ram usage:        1 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    2
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		_main
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           
  3431                           ;psect for function _init_ADC
  3432  0C2E                     _init_ADC:	
  3433  0C2E                     l2768:	
  3434                           ;incstack = 0
  3435                           ; Regs used in _init_ADC: [wreg+status,2]
  3436                           
  3437                           
  3438                           ;main.c: 345:     TRISA = 0xE3;
  3439  0C2E  30E3               	movlw	227
  3440  0C2F  1683               	bsf	3,5	;RP0=1, select bank1
  3441  0C30  1303               	bcf	3,6	;RP1=0, select bank1
  3442  0C31  0085               	movwf	5	;volatile
  3443  0C32                     l2770:	
  3444                           
  3445                           ;main.c: 346:     ADCON0 = 0x00;
  3446  0C32  1283               	bcf	3,5	;RP0=0, select bank0
  3447  0C33  1303               	bcf	3,6	;RP1=0, select bank0
  3448  0C34  019F               	clrf	31	;volatile
  3449  0C35                     l2772:	
  3450                           
  3451                           ;main.c: 347:     ADCON1 = 0x80;
  3452  0C35  3080               	movlw	128
  3453  0C36  1683               	bsf	3,5	;RP0=1, select bank1
  3454  0C37  1303               	bcf	3,6	;RP1=0, select bank1
  3455  0C38  009F               	movwf	31	;volatile
  3456  0C39                     l2774:	
  3457                           
  3458                           ;main.c: 348:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3459  0C39  3019               	movlw	25
  3460  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0C3C  00A0               	movwf	??_init_ADC
  3463  0C3D                     u3327:	
  3464  0C3D  0BA0               	decfsz	??_init_ADC,f
  3465  0C3E  2C3D               	goto	u3327
  3466  0C3F  2C40               	nop2
  3467  0C40                     l264:	
  3468  0C40  0008               	return
  3469  0C41                     __end_of_init_ADC:	
  3470                           
  3471                           	psect	text8
  3472  0C69                     __ptext8:	
  3473 ;; *************** function ___bmul *****************
  3474 ;; Defined at:
  3475 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  multiplier      1    wreg     unsigned char 
  3478 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3481 ;;  product         1    2[BANK0 ] unsigned char 
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  1    wreg      unsigned char 
  3484 ;; Registers used:
  3485 ;;		wreg, status,2, status,0
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3491 ;;      Params:         0       1       0       0       0
  3492 ;;      Locals:         0       2       0       0       0
  3493 ;;      Temps:          0       1       0       0       0
  3494 ;;      Totals:         0       4       0       0       0
  3495 ;;Total ram usage:        4 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    2
  3498 ;; This function calls:
  3499 ;;		Nothing
  3500 ;; This function is called by:
  3501 ;;		_main
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           
  3506                           ;psect for function ___bmul
  3507  0C69                     ___bmul:	
  3508                           
  3509                           ;incstack = 0
  3510                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3511                           ;___bmul@multiplier stored from wreg
  3512  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  3513  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  3514  0C6B  00A3               	movwf	___bmul@multiplier
  3515  0C6C                     l2874:	
  3516  0C6C  01A2               	clrf	___bmul@product
  3517  0C6D                     l2876:	
  3518  0C6D  1C23               	btfss	___bmul@multiplier,0
  3519  0C6E  2C70               	goto	u2971
  3520  0C6F  2C71               	goto	u2970
  3521  0C70                     u2971:	
  3522  0C70  2C75               	goto	l2880
  3523  0C71                     u2970:	
  3524  0C71                     l2878:	
  3525  0C71  0820               	movf	___bmul@multiplicand,w
  3526  0C72  00A1               	movwf	??___bmul
  3527  0C73  0821               	movf	??___bmul,w
  3528  0C74  07A2               	addwf	___bmul@product,f
  3529  0C75                     l2880:	
  3530  0C75  1003               	clrc
  3531  0C76  0DA0               	rlf	___bmul@multiplicand,f
  3532  0C77                     l2882:	
  3533  0C77  1003               	clrc
  3534  0C78  0CA3               	rrf	___bmul@multiplier,f
  3535  0C79  0823               	movf	___bmul@multiplier,w
  3536  0C7A  1D03               	btfss	3,2
  3537  0C7B  2C7D               	goto	u2981
  3538  0C7C  2C7E               	goto	u2980
  3539  0C7D                     u2981:	
  3540  0C7D  2C6D               	goto	l2876
  3541  0C7E                     u2980:	
  3542  0C7E                     l2884:	
  3543  0C7E  0822               	movf	___bmul@product,w
  3544  0C7F                     l466:	
  3545  0C7F  0008               	return
  3546  0C80                     __end_of___bmul:	
  3547                           
  3548                           	psect	text9
  3549  0D27                     __ptext9:	
  3550 ;; *************** function _UART_Init *****************
  3551 ;; Defined at:
  3552 ;;		line 362 in file "main.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  baudrate        2   15[BANK0 ] int 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;		None
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		wreg, status,2, status,0, pclath, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3566 ;;      Params:         0       2       0       0       0
  3567 ;;      Locals:         0       0       0       0       0
  3568 ;;      Temps:          0       4       0       0       0
  3569 ;;      Totals:         0       6       0       0       0
  3570 ;;Total ram usage:        6 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    3
  3573 ;; This function calls:
  3574 ;;		___aldiv
  3575 ;; This function is called by:
  3576 ;;		_main
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           
  3581                           ;psect for function _UART_Init
  3582  0D27                     _UART_Init:	
  3583  0D27                     l2776:	
  3584                           ;incstack = 0
  3585                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3586                           
  3587                           
  3588                           ;main.c: 362: void UART_Init(int baudrate);main.c: 363: {;main.c: 364:     TRISCbits.TRI
      +                          SC6 = 0;
  3589  0D27  1683               	bsf	3,5	;RP0=1, select bank1
  3590  0D28  1303               	bcf	3,6	;RP1=0, select bank1
  3591  0D29  1307               	bcf	7,6	;volatile
  3592                           
  3593                           ;main.c: 365:     TXSTAbits.TXEN = 1;
  3594  0D2A  1698               	bsf	24,5	;volatile
  3595                           
  3596                           ;main.c: 366:     RCSTAbits.SPEN = 1;
  3597  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  3598  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  3599  0D2D  1798               	bsf	24,7	;volatile
  3600                           
  3601                           ;main.c: 367:     RCSTAbits.CREN = 1;
  3602  0D2E  1618               	bsf	24,4	;volatile
  3603  0D2F                     l2778:	
  3604                           
  3605                           ;main.c: 368:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  3606  0D2F  082F               	movf	UART_Init@baudrate,w
  3607  0D30  00B1               	movwf	??_UART_Init
  3608  0D31  0830               	movf	UART_Init@baudrate+1,w
  3609  0D32  00B2               	movwf	??_UART_Init+1
  3610  0D33  3000               	movlw	0
  3611  0D34  1BB2               	btfsc	??_UART_Init+1,7
  3612  0D35  30FF               	movlw	255
  3613  0D36  00B3               	movwf	??_UART_Init+2
  3614  0D37  00B4               	movwf	??_UART_Init+3
  3615  0D38  3006               	movlw	6
  3616  0D39                     u2905:	
  3617  0D39  1003               	clrc
  3618  0D3A  0DB1               	rlf	??_UART_Init,f
  3619  0D3B  0DB2               	rlf	??_UART_Init+1,f
  3620  0D3C  0DB3               	rlf	??_UART_Init+2,f
  3621  0D3D  0DB4               	rlf	??_UART_Init+3,f
  3622  0D3E                     u2900:	
  3623  0D3E  3EFF               	addlw	-1
  3624  0D3F  1D03               	skipz
  3625  0D40  2D39               	goto	u2905
  3626  0D41  0834               	movf	??_UART_Init+3,w
  3627  0D42  00A3               	movwf	___aldiv@divisor+3
  3628  0D43  0833               	movf	??_UART_Init+2,w
  3629  0D44  00A2               	movwf	___aldiv@divisor+2
  3630  0D45  0832               	movf	??_UART_Init+1,w
  3631  0D46  00A1               	movwf	___aldiv@divisor+1
  3632  0D47  0831               	movf	??_UART_Init,w
  3633  0D48  00A0               	movwf	___aldiv@divisor
  3634  0D49  3001               	movlw	1
  3635  0D4A  00A7               	movwf	___aldiv@dividend+3
  3636  0D4B  30E8               	movlw	232
  3637  0D4C  00A6               	movwf	___aldiv@dividend+2
  3638  0D4D  3048               	movlw	72
  3639  0D4E  00A5               	movwf	___aldiv@dividend+1
  3640  0D4F  3000               	movlw	0
  3641  0D50  00A4               	movwf	___aldiv@dividend
  3642  0D51  120A  158A  2763  120A  158A  	fcall	___aldiv
  3643  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  3644  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  3645  0D58  0820               	movf	?___aldiv,w
  3646  0D59  3EFF               	addlw	255
  3647  0D5A  1683               	bsf	3,5	;RP0=1, select bank1
  3648  0D5B  1303               	bcf	3,6	;RP1=0, select bank1
  3649  0D5C  0099               	movwf	25	;volatile
  3650  0D5D                     l2780:	
  3651                           
  3652                           ;main.c: 369:     INTCONbits.GIE = 1;
  3653  0D5D  178B               	bsf	11,7	;volatile
  3654  0D5E                     l2782:	
  3655                           
  3656                           ;main.c: 370:     INTCONbits.PEIE = 1;
  3657  0D5E  170B               	bsf	11,6	;volatile
  3658  0D5F                     l2784:	
  3659                           
  3660                           ;main.c: 371:     PIE1bits.RCIE = 1;
  3661  0D5F  168C               	bsf	12,5	;volatile
  3662  0D60                     l273:	
  3663  0D60  0008               	return
  3664  0D61                     __end_of_UART_Init:	
  3665                           
  3666                           	psect	text10
  3667  0F63                     __ptext10:	
  3668 ;; *************** function ___aldiv *****************
  3669 ;; Defined at:
  3670 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  divisor         4    0[BANK0 ] long 
  3673 ;;  dividend        4    4[BANK0 ] long 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  quotient        4   11[BANK0 ] long 
  3676 ;;  sign            1   10[BANK0 ] unsigned char 
  3677 ;;  counter         1    9[BANK0 ] unsigned char 
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  4    0[BANK0 ] long 
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3687 ;;      Params:         0       8       0       0       0
  3688 ;;      Locals:         0       6       0       0       0
  3689 ;;      Temps:          0       1       0       0       0
  3690 ;;      Totals:         0      15       0       0       0
  3691 ;;Total ram usage:       15 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    2
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		_UART_Init
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           
  3702                           ;psect for function ___aldiv
  3703  0F63                     ___aldiv:	
  3704  0F63                     l2642:	
  3705                           ;incstack = 0
  3706                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3707                           
  3708  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  3709  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  3710  0F65  01AA               	clrf	___aldiv@sign
  3711  0F66                     l2644:	
  3712  0F66  1FA3               	btfss	___aldiv@divisor+3,7
  3713  0F67  2F69               	goto	u2611
  3714  0F68  2F6A               	goto	u2610
  3715  0F69                     u2611:	
  3716  0F69  2F77               	goto	l505
  3717  0F6A                     u2610:	
  3718  0F6A                     l2646:	
  3719  0F6A  09A0               	comf	___aldiv@divisor,f
  3720  0F6B  09A1               	comf	___aldiv@divisor+1,f
  3721  0F6C  09A2               	comf	___aldiv@divisor+2,f
  3722  0F6D  09A3               	comf	___aldiv@divisor+3,f
  3723  0F6E  0AA0               	incf	___aldiv@divisor,f
  3724  0F6F  1903               	skipnz
  3725  0F70  0AA1               	incf	___aldiv@divisor+1,f
  3726  0F71  1903               	skipnz
  3727  0F72  0AA2               	incf	___aldiv@divisor+2,f
  3728  0F73  1903               	skipnz
  3729  0F74  0AA3               	incf	___aldiv@divisor+3,f
  3730  0F75  01AA               	clrf	___aldiv@sign
  3731  0F76  0AAA               	incf	___aldiv@sign,f
  3732  0F77                     l505:	
  3733  0F77  1FA7               	btfss	___aldiv@dividend+3,7
  3734  0F78  2F7A               	goto	u2621
  3735  0F79  2F7B               	goto	u2620
  3736  0F7A                     u2621:	
  3737  0F7A  2F8A               	goto	l2652
  3738  0F7B                     u2620:	
  3739  0F7B                     l2648:	
  3740  0F7B  09A4               	comf	___aldiv@dividend,f
  3741  0F7C  09A5               	comf	___aldiv@dividend+1,f
  3742  0F7D  09A6               	comf	___aldiv@dividend+2,f
  3743  0F7E  09A7               	comf	___aldiv@dividend+3,f
  3744  0F7F  0AA4               	incf	___aldiv@dividend,f
  3745  0F80  1903               	skipnz
  3746  0F81  0AA5               	incf	___aldiv@dividend+1,f
  3747  0F82  1903               	skipnz
  3748  0F83  0AA6               	incf	___aldiv@dividend+2,f
  3749  0F84  1903               	skipnz
  3750  0F85  0AA7               	incf	___aldiv@dividend+3,f
  3751  0F86                     l2650:	
  3752  0F86  3001               	movlw	1
  3753  0F87  00A8               	movwf	??___aldiv
  3754  0F88  0828               	movf	??___aldiv,w
  3755  0F89  06AA               	xorwf	___aldiv@sign,f
  3756  0F8A                     l2652:	
  3757  0F8A  3000               	movlw	0
  3758  0F8B  00AE               	movwf	___aldiv@quotient+3
  3759  0F8C  3000               	movlw	0
  3760  0F8D  00AD               	movwf	___aldiv@quotient+2
  3761  0F8E  3000               	movlw	0
  3762  0F8F  00AC               	movwf	___aldiv@quotient+1
  3763  0F90  3000               	movlw	0
  3764  0F91  00AB               	movwf	___aldiv@quotient
  3765  0F92                     l2654:	
  3766  0F92  0823               	movf	___aldiv@divisor+3,w
  3767  0F93  0422               	iorwf	___aldiv@divisor+2,w
  3768  0F94  0421               	iorwf	___aldiv@divisor+1,w
  3769  0F95  0420               	iorwf	___aldiv@divisor,w
  3770  0F96  1903               	skipnz
  3771  0F97  2F99               	goto	u2631
  3772  0F98  2F9A               	goto	u2630
  3773  0F99                     u2631:	
  3774  0F99  2FE7               	goto	l2674
  3775  0F9A                     u2630:	
  3776  0F9A                     l2656:	
  3777  0F9A  01A9               	clrf	___aldiv@counter
  3778  0F9B  0AA9               	incf	___aldiv@counter,f
  3779  0F9C  2FAA               	goto	l2660
  3780  0F9D                     l2658:	
  3781  0F9D  3001               	movlw	1
  3782  0F9E  00A8               	movwf	??___aldiv
  3783  0F9F                     u2645:	
  3784  0F9F  1003               	clrc
  3785  0FA0  0DA0               	rlf	___aldiv@divisor,f
  3786  0FA1  0DA1               	rlf	___aldiv@divisor+1,f
  3787  0FA2  0DA2               	rlf	___aldiv@divisor+2,f
  3788  0FA3  0DA3               	rlf	___aldiv@divisor+3,f
  3789  0FA4  0BA8               	decfsz	??___aldiv,f
  3790  0FA5  2F9F               	goto	u2645
  3791  0FA6  3001               	movlw	1
  3792  0FA7  00A8               	movwf	??___aldiv
  3793  0FA8  0828               	movf	??___aldiv,w
  3794  0FA9  07A9               	addwf	___aldiv@counter,f
  3795  0FAA                     l2660:	
  3796  0FAA  1FA3               	btfss	___aldiv@divisor+3,7
  3797  0FAB  2FAD               	goto	u2651
  3798  0FAC  2FAE               	goto	u2650
  3799  0FAD                     u2651:	
  3800  0FAD  2F9D               	goto	l2658
  3801  0FAE                     u2650:	
  3802  0FAE                     l2662:	
  3803  0FAE  3001               	movlw	1
  3804  0FAF  00A8               	movwf	??___aldiv
  3805  0FB0                     u2665:	
  3806  0FB0  1003               	clrc
  3807  0FB1  0DAB               	rlf	___aldiv@quotient,f
  3808  0FB2  0DAC               	rlf	___aldiv@quotient+1,f
  3809  0FB3  0DAD               	rlf	___aldiv@quotient+2,f
  3810  0FB4  0DAE               	rlf	___aldiv@quotient+3,f
  3811  0FB5  0BA8               	decfsz	??___aldiv,f
  3812  0FB6  2FB0               	goto	u2665
  3813  0FB7                     l2664:	
  3814  0FB7  0823               	movf	___aldiv@divisor+3,w
  3815  0FB8  0227               	subwf	___aldiv@dividend+3,w
  3816  0FB9  1D03               	skipz
  3817  0FBA  2FC5               	goto	u2675
  3818  0FBB  0822               	movf	___aldiv@divisor+2,w
  3819  0FBC  0226               	subwf	___aldiv@dividend+2,w
  3820  0FBD  1D03               	skipz
  3821  0FBE  2FC5               	goto	u2675
  3822  0FBF  0821               	movf	___aldiv@divisor+1,w
  3823  0FC0  0225               	subwf	___aldiv@dividend+1,w
  3824  0FC1  1D03               	skipz
  3825  0FC2  2FC5               	goto	u2675
  3826  0FC3  0820               	movf	___aldiv@divisor,w
  3827  0FC4  0224               	subwf	___aldiv@dividend,w
  3828  0FC5                     u2675:	
  3829  0FC5  1C03               	skipc
  3830  0FC6  2FC8               	goto	u2671
  3831  0FC7  2FC9               	goto	u2670
  3832  0FC8                     u2671:	
  3833  0FC8  2FD8               	goto	l2670
  3834  0FC9                     u2670:	
  3835  0FC9                     l2666:	
  3836  0FC9  0820               	movf	___aldiv@divisor,w
  3837  0FCA  02A4               	subwf	___aldiv@dividend,f
  3838  0FCB  0821               	movf	___aldiv@divisor+1,w
  3839  0FCC  1C03               	skipc
  3840  0FCD  0F21               	incfsz	___aldiv@divisor+1,w
  3841  0FCE  02A5               	subwf	___aldiv@dividend+1,f
  3842  0FCF  0822               	movf	___aldiv@divisor+2,w
  3843  0FD0  1C03               	skipc
  3844  0FD1  0F22               	incfsz	___aldiv@divisor+2,w
  3845  0FD2  02A6               	subwf	___aldiv@dividend+2,f
  3846  0FD3  0823               	movf	___aldiv@divisor+3,w
  3847  0FD4  1C03               	skipc
  3848  0FD5  0F23               	incfsz	___aldiv@divisor+3,w
  3849  0FD6  02A7               	subwf	___aldiv@dividend+3,f
  3850  0FD7                     l2668:	
  3851  0FD7  142B               	bsf	___aldiv@quotient,0
  3852  0FD8                     l2670:	
  3853  0FD8  3001               	movlw	1
  3854  0FD9                     u2685:	
  3855  0FD9  1003               	clrc
  3856  0FDA  0CA3               	rrf	___aldiv@divisor+3,f
  3857  0FDB  0CA2               	rrf	___aldiv@divisor+2,f
  3858  0FDC  0CA1               	rrf	___aldiv@divisor+1,f
  3859  0FDD  0CA0               	rrf	___aldiv@divisor,f
  3860  0FDE  3EFF               	addlw	-1
  3861  0FDF  1D03               	skipz
  3862  0FE0  2FD9               	goto	u2685
  3863  0FE1                     l2672:	
  3864  0FE1  3001               	movlw	1
  3865  0FE2  02A9               	subwf	___aldiv@counter,f
  3866  0FE3  1D03               	btfss	3,2
  3867  0FE4  2FE6               	goto	u2691
  3868  0FE5  2FE7               	goto	u2690
  3869  0FE6                     u2691:	
  3870  0FE6  2FAE               	goto	l2662
  3871  0FE7                     u2690:	
  3872  0FE7                     l2674:	
  3873  0FE7  082A               	movf	___aldiv@sign,w
  3874  0FE8  1903               	btfsc	3,2
  3875  0FE9  2FEB               	goto	u2701
  3876  0FEA  2FEC               	goto	u2700
  3877  0FEB                     u2701:	
  3878  0FEB  2FF7               	goto	l2678
  3879  0FEC                     u2700:	
  3880  0FEC                     l2676:	
  3881  0FEC  09AB               	comf	___aldiv@quotient,f
  3882  0FED  09AC               	comf	___aldiv@quotient+1,f
  3883  0FEE  09AD               	comf	___aldiv@quotient+2,f
  3884  0FEF  09AE               	comf	___aldiv@quotient+3,f
  3885  0FF0  0AAB               	incf	___aldiv@quotient,f
  3886  0FF1  1903               	skipnz
  3887  0FF2  0AAC               	incf	___aldiv@quotient+1,f
  3888  0FF3  1903               	skipnz
  3889  0FF4  0AAD               	incf	___aldiv@quotient+2,f
  3890  0FF5  1903               	skipnz
  3891  0FF6  0AAE               	incf	___aldiv@quotient+3,f
  3892  0FF7                     l2678:	
  3893  0FF7  082E               	movf	___aldiv@quotient+3,w
  3894  0FF8  00A3               	movwf	?___aldiv+3
  3895  0FF9  082D               	movf	___aldiv@quotient+2,w
  3896  0FFA  00A2               	movwf	?___aldiv+2
  3897  0FFB  082C               	movf	___aldiv@quotient+1,w
  3898  0FFC  00A1               	movwf	?___aldiv+1
  3899  0FFD  082B               	movf	___aldiv@quotient,w
  3900  0FFE  00A0               	movwf	?___aldiv
  3901  0FFF                     l515:	
  3902  0FFF  0008               	return
  3903  1000                     __end_of___aldiv:	
  3904                           
  3905                           	psect	text11
  3906  0C54                     __ptext11:	
  3907 ;; *************** function _SetDisplay *****************
  3908 ;; Defined at:
  3909 ;;		line 436 in file "main.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  d1              1    wreg     unsigned char 
  3912 ;;  d2              1    0[BANK0 ] unsigned char 
  3913 ;;  d3              1    1[BANK0 ] unsigned char 
  3914 ;;  value           1    2[BANK0 ] unsigned char 
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;  d1              1    3[BANK0 ] unsigned char 
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      void 
  3919 ;; Registers used:
  3920 ;;		wreg, status,0
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3926 ;;      Params:         0       3       0       0       0
  3927 ;;      Locals:         0       1       0       0       0
  3928 ;;      Temps:          0       0       0       0       0
  3929 ;;      Totals:         0       4       0       0       0
  3930 ;;Total ram usage:        4 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    2
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_main
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function _SetDisplay
  3942  0C54                     _SetDisplay:	
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in _SetDisplay: [wreg+status,0]
  3946                           ;SetDisplay@d1 stored from wreg
  3947  0C54  1283               	bcf	3,5	;RP0=0, select bank0
  3948  0C55  1303               	bcf	3,6	;RP1=0, select bank0
  3949  0C56  00A3               	movwf	SetDisplay@d1
  3950  0C57                     l2844:	
  3951                           
  3952                           ;main.c: 436: void SetDisplay(char d1, char d2, char d3, char value);main.c: 437: {;main
      +                          .c: 438:     PORTAbits.RA2 = d1;
  3953  0C57  0C23               	rrf	SetDisplay@d1,w
  3954  0C58  1C03               	skipc
  3955  0C59  1105               	bcf	5,2	;volatile
  3956  0C5A  1803               	skipnc
  3957  0C5B  1505               	bsf	5,2	;volatile
  3958                           
  3959                           ;main.c: 439:     PORTAbits.RA3 = d2;
  3960  0C5C  0C20               	rrf	SetDisplay@d2,w
  3961  0C5D  1C03               	skipc
  3962  0C5E  1185               	bcf	5,3	;volatile
  3963  0C5F  1803               	skipnc
  3964  0C60  1585               	bsf	5,3	;volatile
  3965                           
  3966                           ;main.c: 440:     PORTAbits.RA4 = d3;
  3967  0C61  0C21               	rrf	SetDisplay@d3,w
  3968  0C62  1C03               	skipc
  3969  0C63  1205               	bcf	5,4	;volatile
  3970  0C64  1803               	skipnc
  3971  0C65  1605               	bsf	5,4	;volatile
  3972  0C66                     l2846:	
  3973                           
  3974                           ;main.c: 441:     PORTD = value;
  3975  0C66  0822               	movf	SetDisplay@value,w
  3976  0C67  0088               	movwf	8	;volatile
  3977  0C68                     l305:	
  3978  0C68  0008               	return
  3979  0C69                     __end_of_SetDisplay:	
  3980                           
  3981                           	psect	text12
  3982  073C                     __ptext12:	
  3983 ;; *************** function _SetDefaultTimers *****************
  3984 ;; Defined at:
  3985 ;;		line 532 in file "main.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  rosso           2    0[BANK0 ] int 
  3988 ;;  verde           2    2[BANK0 ] int 
  3989 ;;  giallo          2    4[BANK0 ] int 
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;  i               2   14[BANK0 ] int 
  3992 ;;  l               2   12[BANK0 ] int 
  3993 ;; Return value:  Size  Location     Type
  3994 ;;                  1    wreg      void 
  3995 ;; Registers used:
  3996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3997 ;; Tracked objects:
  3998 ;;		On entry : 0/0
  3999 ;;		On exit  : 0/0
  4000 ;;		Unchanged: 0/0
  4001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4002 ;;      Params:         0       6       0       0       0
  4003 ;;      Locals:         0       4       0       0       0
  4004 ;;      Temps:          0       6       0       0       0
  4005 ;;      Totals:         0      16       0       0       0
  4006 ;;Total ram usage:       16 bytes
  4007 ;; Hardware stack levels used:    1
  4008 ;; Hardware stack levels required when called:    2
  4009 ;; This function calls:
  4010 ;;		Nothing
  4011 ;; This function is called by:
  4012 ;;		_main
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           
  4017                           ;psect for function _SetDefaultTimers
  4018  073C                     _SetDefaultTimers:	
  4019  073C                     l2786:	
  4020                           ;incstack = 0
  4021                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0+btemp+1]
  4022                           
  4023                           
  4024                           ;main.c: 532: void SetDefaultTimers(int rosso, int verde, int giallo);main.c: 533: {;mai
      +                          n.c: 534:     for (int l = 0; l < 16; l++)
  4025  073C  1283               	bcf	3,5	;RP0=0, select bank0
  4026  073D  1303               	bcf	3,6	;RP1=0, select bank0
  4027  073E  01AC               	clrf	SetDefaultTimers@l
  4028  073F  01AD               	clrf	SetDefaultTimers@l+1
  4029  0740                     l2792:	
  4030                           
  4031                           ;main.c: 535:     {;main.c: 536:         for (int i = 0; i < 3; i++)
  4032  0740  1283               	bcf	3,5	;RP0=0, select bank0
  4033  0741  1303               	bcf	3,6	;RP1=0, select bank0
  4034  0742  01AE               	clrf	SetDefaultTimers@i
  4035  0743  01AF               	clrf	SetDefaultTimers@i+1
  4036  0744  2FA2               	goto	l2806
  4037  0745                     l2798:	
  4038                           
  4039                           ;main.c: 541:                 (*(Semafori[l])).new_times[i] = rosso;
  4040  0745  082C               	movf	SetDefaultTimers@l,w
  4041  0746  00A6               	movwf	??_SetDefaultTimers
  4042  0747  0726               	addwf	??_SetDefaultTimers,w
  4043  0748  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  4044  0749  0084               	movwf	4
  4045  074A  1383               	bcf	3,7	;select IRP bank1
  4046  074B  0800               	movf	0,w
  4047  074C  00A7               	movwf	??_SetDefaultTimers+1
  4048  074D  0A84               	incf	4,f
  4049  074E  0800               	movf	0,w
  4050  074F  00A8               	movwf	??_SetDefaultTimers+2
  4051  0750  082E               	movf	SetDefaultTimers@i,w
  4052  0751  00A9               	movwf	??_SetDefaultTimers+3
  4053  0752  0729               	addwf	??_SetDefaultTimers+3,w
  4054  0753  0727               	addwf	??_SetDefaultTimers+1,w
  4055  0754  00AA               	movwf	??_SetDefaultTimers+4
  4056  0755  0828               	movf	??_SetDefaultTimers+2,w
  4057  0756  1803               	skipnc
  4058  0757  3E01               	addlw	1
  4059  0758  00AB               	movwf	??_SetDefaultTimers+5
  4060  0759  082A               	movf	??_SetDefaultTimers+4,w
  4061  075A  0084               	movwf	4
  4062  075B  1783               	bsf	3,7
  4063  075C  1C2B               	btfss	??_SetDefaultTimers+5,0
  4064  075D  1383               	bcf	3,7
  4065  075E  0820               	movf	SetDefaultTimers@rosso,w
  4066  075F  0080               	movwf	0
  4067  0760  0A84               	incf	4,f
  4068  0761  0821               	movf	SetDefaultTimers@rosso+1,w
  4069  0762  0080               	movwf	0
  4070                           
  4071                           ;main.c: 542:                 break;
  4072  0763  2FB4               	goto	l2808
  4073  0764                     l2800:	
  4074                           
  4075                           ;main.c: 544:                 (*(Semafori[l])).new_times[i] = verde;
  4076  0764  082C               	movf	SetDefaultTimers@l,w
  4077  0765  00A6               	movwf	??_SetDefaultTimers
  4078  0766  0726               	addwf	??_SetDefaultTimers,w
  4079  0767  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  4080  0768  0084               	movwf	4
  4081  0769  1383               	bcf	3,7	;select IRP bank1
  4082  076A  0800               	movf	0,w
  4083  076B  00A7               	movwf	??_SetDefaultTimers+1
  4084  076C  0A84               	incf	4,f
  4085  076D  0800               	movf	0,w
  4086  076E  00A8               	movwf	??_SetDefaultTimers+2
  4087  076F  082E               	movf	SetDefaultTimers@i,w
  4088  0770  00A9               	movwf	??_SetDefaultTimers+3
  4089  0771  0729               	addwf	??_SetDefaultTimers+3,w
  4090  0772  0727               	addwf	??_SetDefaultTimers+1,w
  4091  0773  00AA               	movwf	??_SetDefaultTimers+4
  4092  0774  0828               	movf	??_SetDefaultTimers+2,w
  4093  0775  1803               	skipnc
  4094  0776  3E01               	addlw	1
  4095  0777  00AB               	movwf	??_SetDefaultTimers+5
  4096  0778  082A               	movf	??_SetDefaultTimers+4,w
  4097  0779  0084               	movwf	4
  4098  077A  1783               	bsf	3,7
  4099  077B  1C2B               	btfss	??_SetDefaultTimers+5,0
  4100  077C  1383               	bcf	3,7
  4101  077D  0822               	movf	SetDefaultTimers@verde,w
  4102  077E  0080               	movwf	0
  4103  077F  0A84               	incf	4,f
  4104  0780  0823               	movf	SetDefaultTimers@verde+1,w
  4105  0781  0080               	movwf	0
  4106                           
  4107                           ;main.c: 545:                 break;
  4108  0782  2FB4               	goto	l2808
  4109  0783                     l2802:	
  4110                           
  4111                           ;main.c: 547:                 (*(Semafori[l])).new_times[i] = giallo;
  4112  0783  082C               	movf	SetDefaultTimers@l,w
  4113  0784  00A6               	movwf	??_SetDefaultTimers
  4114  0785  0726               	addwf	??_SetDefaultTimers,w
  4115  0786  3ECF               	addlw	(low (_Semafori| 0))& (0+255)
  4116  0787  0084               	movwf	4
  4117  0788  1383               	bcf	3,7	;select IRP bank1
  4118  0789  0800               	movf	0,w
  4119  078A  00A7               	movwf	??_SetDefaultTimers+1
  4120  078B  0A84               	incf	4,f
  4121  078C  0800               	movf	0,w
  4122  078D  00A8               	movwf	??_SetDefaultTimers+2
  4123  078E  082E               	movf	SetDefaultTimers@i,w
  4124  078F  00A9               	movwf	??_SetDefaultTimers+3
  4125  0790  0729               	addwf	??_SetDefaultTimers+3,w
  4126  0791  0727               	addwf	??_SetDefaultTimers+1,w
  4127  0792  00AA               	movwf	??_SetDefaultTimers+4
  4128  0793  0828               	movf	??_SetDefaultTimers+2,w
  4129  0794  1803               	skipnc
  4130  0795  3E01               	addlw	1
  4131  0796  00AB               	movwf	??_SetDefaultTimers+5
  4132  0797  082A               	movf	??_SetDefaultTimers+4,w
  4133  0798  0084               	movwf	4
  4134  0799  1783               	bsf	3,7
  4135  079A  1C2B               	btfss	??_SetDefaultTimers+5,0
  4136  079B  1383               	bcf	3,7
  4137  079C  0824               	movf	SetDefaultTimers@giallo,w
  4138  079D  0080               	movwf	0
  4139  079E  0A84               	incf	4,f
  4140  079F  0825               	movf	SetDefaultTimers@giallo+1,w
  4141  07A0  0080               	movwf	0
  4142                           
  4143                           ;main.c: 548:                 break;
  4144  07A1  2FB4               	goto	l2808
  4145  07A2                     l2806:	
  4146                           
  4147                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4148                           ; Switch size 1, requested type "simple"
  4149                           ; Number of cases is 1, Range of values is 0 to 0
  4150                           ; switch strategies available:
  4151                           ; Name         Instructions Cycles
  4152                           ; simple_byte            4     3 (average)
  4153                           ; direct_byte           11     8 (fixed)
  4154                           ; jumptable            260     6 (fixed)
  4155                           ;	Chosen strategy is simple_byte
  4156  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  4157  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  4158  07A4  082F               	movf	SetDefaultTimers@i+1,w
  4159  07A5  3A00               	xorlw	0	; case 0
  4160  07A6  1903               	skipnz
  4161  07A7  2FA9               	goto	l3192
  4162  07A8  2FB4               	goto	l2808
  4163  07A9                     l3192:	
  4164                           
  4165                           ; Switch size 1, requested type "simple"
  4166                           ; Number of cases is 3, Range of values is 0 to 2
  4167                           ; switch strategies available:
  4168                           ; Name         Instructions Cycles
  4169                           ; simple_byte           10     6 (average)
  4170                           ; direct_byte           17     8 (fixed)
  4171                           ; jumptable            260     6 (fixed)
  4172                           ;	Chosen strategy is simple_byte
  4173  07A9  082E               	movf	SetDefaultTimers@i,w
  4174  07AA  3A00               	xorlw	0	; case 0
  4175  07AB  1903               	skipnz
  4176  07AC  2F45               	goto	l2798
  4177  07AD  3A01               	xorlw	1	; case 1
  4178  07AE  1903               	skipnz
  4179  07AF  2F64               	goto	l2800
  4180  07B0  3A03               	xorlw	3	; case 2
  4181  07B1  1903               	skipnz
  4182  07B2  2F83               	goto	l2802
  4183  07B3  2FB4               	goto	l2808
  4184  07B4                     l2808:	
  4185                           
  4186                           ;main.c: 550:         }
  4187  07B4  3001               	movlw	1
  4188  07B5  07AE               	addwf	SetDefaultTimers@i,f
  4189  07B6  1803               	skipnc
  4190  07B7  0AAF               	incf	SetDefaultTimers@i+1,f
  4191  07B8  3000               	movlw	0
  4192  07B9  07AF               	addwf	SetDefaultTimers@i+1,f
  4193  07BA                     l2810:	
  4194  07BA  082F               	movf	SetDefaultTimers@i+1,w
  4195  07BB  3A80               	xorlw	128
  4196  07BC  00FF               	movwf	btemp+1
  4197  07BD  3080               	movlw	128
  4198  07BE  027F               	subwf	btemp+1,w
  4199  07BF  1D03               	skipz
  4200  07C0  2FC3               	goto	u2915
  4201  07C1  3003               	movlw	3
  4202  07C2  022E               	subwf	SetDefaultTimers@i,w
  4203  07C3                     u2915:	
  4204  07C3  1C03               	skipc
  4205  07C4  2FC6               	goto	u2911
  4206  07C5  2FC7               	goto	u2910
  4207  07C6                     u2911:	
  4208  07C6  2FA2               	goto	l2806
  4209  07C7                     u2910:	
  4210  07C7                     l2812:	
  4211                           
  4212                           ;main.c: 551:     }
  4213  07C7  3001               	movlw	1
  4214  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  4215  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  4216  07CA  07AC               	addwf	SetDefaultTimers@l,f
  4217  07CB  1803               	skipnc
  4218  07CC  0AAD               	incf	SetDefaultTimers@l+1,f
  4219  07CD  3000               	movlw	0
  4220  07CE  07AD               	addwf	SetDefaultTimers@l+1,f
  4221  07CF                     l2814:	
  4222  07CF  082D               	movf	SetDefaultTimers@l+1,w
  4223  07D0  3A80               	xorlw	128
  4224  07D1  00FF               	movwf	btemp+1
  4225  07D2  3080               	movlw	128
  4226  07D3  027F               	subwf	btemp+1,w
  4227  07D4  1D03               	skipz
  4228  07D5  2FD8               	goto	u2925
  4229  07D6  3010               	movlw	16
  4230  07D7  022C               	subwf	SetDefaultTimers@l,w
  4231  07D8                     u2925:	
  4232  07D8  1C03               	skipc
  4233  07D9  2FDB               	goto	u2921
  4234  07DA  2FDC               	goto	u2920
  4235  07DB                     u2921:	
  4236  07DB  2F40               	goto	l2792
  4237  07DC                     u2920:	
  4238  07DC                     l344:	
  4239  07DC  0008               	return
  4240  07DD                     __end_of_SetDefaultTimers:	
  4241                           
  4242                           	psect	text13
  4243  0D9B                     __ptext13:	
  4244 ;; *************** function _GetTime *****************
  4245 ;; Defined at:
  4246 ;;		line 410 in file "main.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  index           2    0[BANK0 ] int 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  time            2    5[BANK0 ] int 
  4251 ;;  shortInt        1    4[BANK0 ] struct .
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  2    0[BANK0 ] int 
  4254 ;; Registers used:
  4255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4261 ;;      Params:         0       2       0       0       0
  4262 ;;      Locals:         0       3       0       0       0
  4263 ;;      Temps:          0       2       0       0       0
  4264 ;;      Totals:         0       7       0       0       0
  4265 ;;Total ram usage:        7 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    2
  4268 ;; This function calls:
  4269 ;;		Nothing
  4270 ;; This function is called by:
  4271 ;;		_main
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           
  4276                           ;psect for function _GetTime
  4277  0D9B                     _GetTime:	
  4278  0D9B                     l2820:	
  4279                           ;incstack = 0
  4280                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4281                           
  4282                           
  4283                           ;main.c: 410: int GetTime(int index);main.c: 411: {;main.c: 412:     int time;;main.c: 4
      +                          16:     } shortInt;;main.c: 418:     shortInt.Val = dataFromGateway[index + 3] & 0x7F;
  4284  0D9B  1283               	bcf	3,5	;RP0=0, select bank0
  4285  0D9C  1303               	bcf	3,6	;RP1=0, select bank0
  4286  0D9D  0820               	movf	GetTime@index,w
  4287  0D9E  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4288  0D9F  0084               	movwf	4
  4289  0DA0  307F               	movlw	127
  4290  0DA1  1383               	bcf	3,7	;select IRP bank1
  4291  0DA2  0500               	andwf	0,w
  4292  0DA3  00A2               	movwf	??_GetTime
  4293  0DA4  0824               	movf	GetTime@shortInt,w
  4294  0DA5  0622               	xorwf	??_GetTime,w
  4295  0DA6  3980               	andlw	-128
  4296  0DA7  0622               	xorwf	??_GetTime,w
  4297  0DA8  00A4               	movwf	GetTime@shortInt
  4298  0DA9                     l2822:	
  4299                           
  4300                           ;main.c: 419:     time = shortInt.Val;
  4301  0DA9  0824               	movf	GetTime@shortInt,w
  4302  0DAA  397F               	andlw	127
  4303  0DAB  00A2               	movwf	??_GetTime
  4304  0DAC  01A3               	clrf	??_GetTime+1
  4305  0DAD  0822               	movf	??_GetTime,w
  4306  0DAE  00A5               	movwf	GetTime@time
  4307  0DAF  0823               	movf	??_GetTime+1,w
  4308  0DB0  00A6               	movwf	GetTime@time+1
  4309  0DB1                     l2824:	
  4310                           
  4311                           ;main.c: 420:     time = (time << 7) & 0x80;
  4312  0DB1  0826               	movf	GetTime@time+1,w
  4313  0DB2  00A3               	movwf	??_GetTime+1
  4314  0DB3  0825               	movf	GetTime@time,w
  4315  0DB4  00A2               	movwf	??_GetTime
  4316  0DB5  3007               	movlw	7
  4317  0DB6  00FF               	movwf	btemp+1
  4318  0DB7                     u2935:	
  4319  0DB7  1003               	clrc
  4320  0DB8  0DA2               	rlf	??_GetTime,f
  4321  0DB9  0DA3               	rlf	??_GetTime+1,f
  4322  0DBA  0BFF               	decfsz	btemp+1,f
  4323  0DBB  2DB7               	goto	u2935
  4324  0DBC  3080               	movlw	128
  4325  0DBD  0522               	andwf	??_GetTime,w
  4326  0DBE  00A5               	movwf	GetTime@time
  4327  0DBF  3000               	movlw	0
  4328  0DC0  0523               	andwf	??_GetTime+1,w
  4329  0DC1  00A6               	movwf	GetTime@time+1
  4330  0DC2                     l2826:	
  4331                           
  4332                           ;main.c: 422:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4333  0DC2  0820               	movf	GetTime@index,w
  4334  0DC3  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4335  0DC4  0084               	movwf	4
  4336  0DC5  307F               	movlw	127
  4337  0DC6  0500               	andwf	0,w
  4338  0DC7  00A2               	movwf	??_GetTime
  4339  0DC8  0824               	movf	GetTime@shortInt,w
  4340  0DC9  0622               	xorwf	??_GetTime,w
  4341  0DCA  3980               	andlw	-128
  4342  0DCB  0622               	xorwf	??_GetTime,w
  4343  0DCC  00A4               	movwf	GetTime@shortInt
  4344  0DCD                     l2828:	
  4345                           
  4346                           ;main.c: 423:     time = time | shortInt.Val;
  4347  0DCD  0824               	movf	GetTime@shortInt,w
  4348  0DCE  397F               	andlw	127
  4349  0DCF  00A2               	movwf	??_GetTime
  4350  0DD0  0825               	movf	GetTime@time,w
  4351  0DD1  0422               	iorwf	??_GetTime,w
  4352  0DD2  00A5               	movwf	GetTime@time
  4353  0DD3  0826               	movf	GetTime@time+1,w
  4354  0DD4  00A6               	movwf	GetTime@time+1
  4355  0DD5                     l2830:	
  4356                           
  4357                           ;main.c: 425:     return time;
  4358  0DD5  0826               	movf	GetTime@time+1,w
  4359  0DD6  00A1               	movwf	?_GetTime+1
  4360  0DD7  0825               	movf	GetTime@time,w
  4361  0DD8  00A0               	movwf	?_GetTime
  4362  0DD9                     l299:	
  4363  0DD9  0008               	return
  4364  0DDA                     __end_of_GetTime:	
  4365                           
  4366                           	psect	text14
  4367  0EF8                     __ptext14:	
  4368 ;; *************** function _GetDigits *****************
  4369 ;; Defined at:
  4370 ;;		line 428 in file "main.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  Time            2   16[BANK0 ] int 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg, status,2, status,0, pclath, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4384 ;;      Params:         0       2       0       0       0
  4385 ;;      Locals:         0       2       0       0       0
  4386 ;;      Temps:          0       3       0       0       0
  4387 ;;      Totals:         0       7       0       0       0
  4388 ;;Total ram usage:        7 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    3
  4391 ;; This function calls:
  4392 ;;		___awdiv
  4393 ;;		___awmod
  4394 ;; This function is called by:
  4395 ;;		_main
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           
  4400                           ;psect for function _GetDigits
  4401  0EF8                     _GetDigits:	
  4402  0EF8                     l2834:	
  4403                           ;incstack = 0
  4404                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  4405                           
  4406                           
  4407                           ;main.c: 428: void GetDigits(int Time);main.c: 429: {;main.c: 430:     countdown = Time;
  4408  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  4409  0EF9  1303               	bcf	3,6	;RP1=0, select bank0
  4410  0EFA  0830               	movf	GetDigits@Time,w
  4411  0EFB  00B2               	movwf	??_GetDigits
  4412  0EFC  0832               	movf	??_GetDigits,w
  4413  0EFD  00DA               	movwf	_countdown
  4414  0EFE                     l2836:	
  4415                           
  4416                           ;main.c: 431:     centinaia = countdown / 100;
  4417  0EFE  3064               	movlw	100
  4418  0EFF  00A7               	movwf	___awdiv@divisor
  4419  0F00  3000               	movlw	0
  4420  0F01  00A8               	movwf	___awdiv@divisor+1
  4421  0F02  085A               	movf	_countdown,w
  4422  0F03  00B2               	movwf	??_GetDigits
  4423  0F04  01B3               	clrf	??_GetDigits+1
  4424  0F05  0832               	movf	??_GetDigits,w
  4425  0F06  00A9               	movwf	___awdiv@dividend
  4426  0F07  0833               	movf	??_GetDigits+1,w
  4427  0F08  00AA               	movwf	___awdiv@dividend+1
  4428  0F09  120A  158A  268F  120A  158A  	fcall	___awdiv
  4429  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  4430  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  4431  0F10  0827               	movf	?___awdiv,w
  4432  0F11  00B4               	movwf	??_GetDigits+2
  4433  0F12  0834               	movf	??_GetDigits+2,w
  4434  0F13  00DD               	movwf	_centinaia
  4435  0F14                     l2838:	
  4436                           
  4437                           ;main.c: 432:     decine = (countdown % 100) / 10;
  4438  0F14  300A               	movlw	10
  4439  0F15  00A7               	movwf	___awdiv@divisor
  4440  0F16  3000               	movlw	0
  4441  0F17  00A8               	movwf	___awdiv@divisor+1
  4442  0F18  085A               	movf	_countdown,w
  4443  0F19  00B2               	movwf	??_GetDigits
  4444  0F1A  01B3               	clrf	??_GetDigits+1
  4445  0F1B  0832               	movf	??_GetDigits,w
  4446  0F1C  00A2               	movwf	___awmod@dividend
  4447  0F1D  0833               	movf	??_GetDigits+1,w
  4448  0F1E  00A3               	movwf	___awmod@dividend+1
  4449  0F1F  3064               	movlw	100
  4450  0F20  00A0               	movwf	___awmod@divisor
  4451  0F21  3000               	movlw	0
  4452  0F22  00A1               	movwf	___awmod@divisor+1
  4453  0F23  120A  158A  2634  120A  158A  	fcall	___awmod
  4454  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  4455  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  4456  0F2A  0821               	movf	?___awmod+1,w
  4457  0F2B  00AA               	movwf	___awdiv@dividend+1
  4458  0F2C  0820               	movf	?___awmod,w
  4459  0F2D  00A9               	movwf	___awdiv@dividend
  4460  0F2E  120A  158A  268F  120A  158A  	fcall	___awdiv
  4461  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  4462  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  4463  0F35  0827               	movf	?___awdiv,w
  4464  0F36  00B4               	movwf	??_GetDigits+2
  4465  0F37  0834               	movf	??_GetDigits+2,w
  4466  0F38  00DE               	movwf	_decine
  4467  0F39                     l2840:	
  4468                           
  4469                           ;main.c: 433:     unita = (countdown % 100) % 10;
  4470  0F39  085A               	movf	_countdown,w
  4471  0F3A  00B2               	movwf	??_GetDigits
  4472  0F3B  01B3               	clrf	??_GetDigits+1
  4473  0F3C  0832               	movf	??_GetDigits,w
  4474  0F3D  00A2               	movwf	___awmod@dividend
  4475  0F3E  0833               	movf	??_GetDigits+1,w
  4476  0F3F  00A3               	movwf	___awmod@dividend+1
  4477  0F40  3064               	movlw	100
  4478  0F41  00A0               	movwf	___awmod@divisor
  4479  0F42  3000               	movlw	0
  4480  0F43  00A1               	movwf	___awmod@divisor+1
  4481  0F44  120A  158A  2634  120A  158A  	fcall	___awmod
  4482  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  4483  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  4484  0F4B  0821               	movf	?___awmod+1,w
  4485  0F4C  00B6               	movwf	_GetDigits$1151+1
  4486  0F4D  0820               	movf	?___awmod,w
  4487  0F4E  00B5               	movwf	_GetDigits$1151
  4488  0F4F                     l2842:	
  4489                           
  4490                           ;main.c: 433:     unita = (countdown % 100) % 10;
  4491  0F4F  300A               	movlw	10
  4492  0F50  00A0               	movwf	___awmod@divisor
  4493  0F51  3000               	movlw	0
  4494  0F52  00A1               	movwf	___awmod@divisor+1
  4495  0F53  0836               	movf	_GetDigits$1151+1,w
  4496  0F54  00A3               	movwf	___awmod@dividend+1
  4497  0F55  0835               	movf	_GetDigits$1151,w
  4498  0F56  00A2               	movwf	___awmod@dividend
  4499  0F57  120A  158A  2634  120A  158A  	fcall	___awmod
  4500  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  4501  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  4502  0F5E  0820               	movf	?___awmod,w
  4503  0F5F  00B2               	movwf	??_GetDigits
  4504  0F60  0832               	movf	??_GetDigits,w
  4505  0F61  00DF               	movwf	_unita
  4506  0F62                     l302:	
  4507  0F62  0008               	return
  4508  0F63                     __end_of_GetDigits:	
  4509                           
  4510                           	psect	text15
  4511  0E34                     __ptext15:	
  4512 ;; *************** function ___awmod *****************
  4513 ;; Defined at:
  4514 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  divisor         2    0[BANK0 ] int 
  4517 ;;  dividend        2    2[BANK0 ] int 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  sign            1    6[BANK0 ] unsigned char 
  4520 ;;  counter         1    5[BANK0 ] unsigned char 
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  2    0[BANK0 ] int 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4530 ;;      Params:         0       4       0       0       0
  4531 ;;      Locals:         0       2       0       0       0
  4532 ;;      Temps:          0       1       0       0       0
  4533 ;;      Totals:         0       7       0       0       0
  4534 ;;Total ram usage:        7 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    2
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_main
  4541 ;;		_GetDigits
  4542 ;;		_intToString
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function ___awmod
  4548  0E34                     ___awmod:	
  4549  0E34                     l2726:	
  4550                           ;incstack = 0
  4551                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4552                           
  4553  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  4554  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  4555  0E36  01A6               	clrf	___awmod@sign
  4556  0E37                     l2728:	
  4557  0E37  1FA3               	btfss	___awmod@dividend+1,7
  4558  0E38  2E3A               	goto	u2811
  4559  0E39  2E3B               	goto	u2810
  4560  0E3A                     u2811:	
  4561  0E3A  2E42               	goto	l2734
  4562  0E3B                     u2810:	
  4563  0E3B                     l2730:	
  4564  0E3B  09A2               	comf	___awmod@dividend,f
  4565  0E3C  09A3               	comf	___awmod@dividend+1,f
  4566  0E3D  0AA2               	incf	___awmod@dividend,f
  4567  0E3E  1903               	skipnz
  4568  0E3F  0AA3               	incf	___awmod@dividend+1,f
  4569  0E40                     l2732:	
  4570  0E40  01A6               	clrf	___awmod@sign
  4571  0E41  0AA6               	incf	___awmod@sign,f
  4572  0E42                     l2734:	
  4573  0E42  1FA1               	btfss	___awmod@divisor+1,7
  4574  0E43  2E45               	goto	u2821
  4575  0E44  2E46               	goto	u2820
  4576  0E45                     u2821:	
  4577  0E45  2E4B               	goto	l2738
  4578  0E46                     u2820:	
  4579  0E46                     l2736:	
  4580  0E46  09A0               	comf	___awmod@divisor,f
  4581  0E47  09A1               	comf	___awmod@divisor+1,f
  4582  0E48  0AA0               	incf	___awmod@divisor,f
  4583  0E49  1903               	skipnz
  4584  0E4A  0AA1               	incf	___awmod@divisor+1,f
  4585  0E4B                     l2738:	
  4586  0E4B  0820               	movf	___awmod@divisor,w
  4587  0E4C  0421               	iorwf	___awmod@divisor+1,w
  4588  0E4D  1903               	btfsc	3,2
  4589  0E4E  2E50               	goto	u2831
  4590  0E4F  2E51               	goto	u2830
  4591  0E50                     u2831:	
  4592  0E50  2E80               	goto	l2756
  4593  0E51                     u2830:	
  4594  0E51                     l2740:	
  4595  0E51  01A5               	clrf	___awmod@counter
  4596  0E52  0AA5               	incf	___awmod@counter,f
  4597  0E53  2E5F               	goto	l2746
  4598  0E54                     l2742:	
  4599  0E54  3001               	movlw	1
  4600  0E55                     u2845:	
  4601  0E55  1003               	clrc
  4602  0E56  0DA0               	rlf	___awmod@divisor,f
  4603  0E57  0DA1               	rlf	___awmod@divisor+1,f
  4604  0E58  3EFF               	addlw	-1
  4605  0E59  1D03               	skipz
  4606  0E5A  2E55               	goto	u2845
  4607  0E5B                     l2744:	
  4608  0E5B  3001               	movlw	1
  4609  0E5C  00A4               	movwf	??___awmod
  4610  0E5D  0824               	movf	??___awmod,w
  4611  0E5E  07A5               	addwf	___awmod@counter,f
  4612  0E5F                     l2746:	
  4613  0E5F  1FA1               	btfss	___awmod@divisor+1,7
  4614  0E60  2E62               	goto	u2851
  4615  0E61  2E63               	goto	u2850
  4616  0E62                     u2851:	
  4617  0E62  2E54               	goto	l2742
  4618  0E63                     u2850:	
  4619  0E63                     l2748:	
  4620  0E63  0821               	movf	___awmod@divisor+1,w
  4621  0E64  0223               	subwf	___awmod@dividend+1,w
  4622  0E65  1D03               	skipz
  4623  0E66  2E69               	goto	u2865
  4624  0E67  0820               	movf	___awmod@divisor,w
  4625  0E68  0222               	subwf	___awmod@dividend,w
  4626  0E69                     u2865:	
  4627  0E69  1C03               	skipc
  4628  0E6A  2E6C               	goto	u2861
  4629  0E6B  2E6D               	goto	u2860
  4630  0E6C                     u2861:	
  4631  0E6C  2E73               	goto	l2752
  4632  0E6D                     u2860:	
  4633  0E6D                     l2750:	
  4634  0E6D  0820               	movf	___awmod@divisor,w
  4635  0E6E  02A2               	subwf	___awmod@dividend,f
  4636  0E6F  0821               	movf	___awmod@divisor+1,w
  4637  0E70  1C03               	skipc
  4638  0E71  03A3               	decf	___awmod@dividend+1,f
  4639  0E72  02A3               	subwf	___awmod@dividend+1,f
  4640  0E73                     l2752:	
  4641  0E73  3001               	movlw	1
  4642  0E74                     u2875:	
  4643  0E74  1003               	clrc
  4644  0E75  0CA1               	rrf	___awmod@divisor+1,f
  4645  0E76  0CA0               	rrf	___awmod@divisor,f
  4646  0E77  3EFF               	addlw	-1
  4647  0E78  1D03               	skipz
  4648  0E79  2E74               	goto	u2875
  4649  0E7A                     l2754:	
  4650  0E7A  3001               	movlw	1
  4651  0E7B  02A5               	subwf	___awmod@counter,f
  4652  0E7C  1D03               	btfss	3,2
  4653  0E7D  2E7F               	goto	u2881
  4654  0E7E  2E80               	goto	u2880
  4655  0E7F                     u2881:	
  4656  0E7F  2E63               	goto	l2748
  4657  0E80                     u2880:	
  4658  0E80                     l2756:	
  4659  0E80  0826               	movf	___awmod@sign,w
  4660  0E81  1903               	btfsc	3,2
  4661  0E82  2E84               	goto	u2891
  4662  0E83  2E85               	goto	u2890
  4663  0E84                     u2891:	
  4664  0E84  2E8A               	goto	l2760
  4665  0E85                     u2890:	
  4666  0E85                     l2758:	
  4667  0E85  09A2               	comf	___awmod@dividend,f
  4668  0E86  09A3               	comf	___awmod@dividend+1,f
  4669  0E87  0AA2               	incf	___awmod@dividend,f
  4670  0E88  1903               	skipnz
  4671  0E89  0AA3               	incf	___awmod@dividend+1,f
  4672  0E8A                     l2760:	
  4673  0E8A  0823               	movf	___awmod@dividend+1,w
  4674  0E8B  00A1               	movwf	?___awmod+1
  4675  0E8C  0822               	movf	___awmod@dividend,w
  4676  0E8D  00A0               	movwf	?___awmod
  4677  0E8E                     l606:	
  4678  0E8E  0008               	return
  4679  0E8F                     __end_of___awmod:	
  4680                           
  4681                           	psect	text16
  4682  0E8F                     __ptext16:	
  4683 ;; *************** function ___awdiv *****************
  4684 ;; Defined at:
  4685 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;  divisor         2    7[BANK0 ] int 
  4688 ;;  dividend        2    9[BANK0 ] int 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;  quotient        2   14[BANK0 ] int 
  4691 ;;  sign            1   13[BANK0 ] unsigned char 
  4692 ;;  counter         1   12[BANK0 ] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  2    7[BANK0 ] int 
  4695 ;; Registers used:
  4696 ;;		wreg, status,2, status,0
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4702 ;;      Params:         0       4       0       0       0
  4703 ;;      Locals:         0       4       0       0       0
  4704 ;;      Temps:          0       1       0       0       0
  4705 ;;      Totals:         0       9       0       0       0
  4706 ;;Total ram usage:        9 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    2
  4709 ;; This function calls:
  4710 ;;		Nothing
  4711 ;; This function is called by:
  4712 ;;		_map
  4713 ;;		_GetDigits
  4714 ;;		_intToString
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           
  4719                           ;psect for function ___awdiv
  4720  0E8F                     ___awdiv:	
  4721  0E8F                     l2682:	
  4722                           ;incstack = 0
  4723                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4724                           
  4725  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  4726  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  4727  0E91  01AD               	clrf	___awdiv@sign
  4728  0E92                     l2684:	
  4729  0E92  1FA8               	btfss	___awdiv@divisor+1,7
  4730  0E93  2E95               	goto	u2711
  4731  0E94  2E96               	goto	u2710
  4732  0E95                     u2711:	
  4733  0E95  2E9D               	goto	l2690
  4734  0E96                     u2710:	
  4735  0E96                     l2686:	
  4736  0E96  09A7               	comf	___awdiv@divisor,f
  4737  0E97  09A8               	comf	___awdiv@divisor+1,f
  4738  0E98  0AA7               	incf	___awdiv@divisor,f
  4739  0E99  1903               	skipnz
  4740  0E9A  0AA8               	incf	___awdiv@divisor+1,f
  4741  0E9B                     l2688:	
  4742  0E9B  01AD               	clrf	___awdiv@sign
  4743  0E9C  0AAD               	incf	___awdiv@sign,f
  4744  0E9D                     l2690:	
  4745  0E9D  1FAA               	btfss	___awdiv@dividend+1,7
  4746  0E9E  2EA0               	goto	u2721
  4747  0E9F  2EA1               	goto	u2720
  4748  0EA0                     u2721:	
  4749  0EA0  2EAA               	goto	l2696
  4750  0EA1                     u2720:	
  4751  0EA1                     l2692:	
  4752  0EA1  09A9               	comf	___awdiv@dividend,f
  4753  0EA2  09AA               	comf	___awdiv@dividend+1,f
  4754  0EA3  0AA9               	incf	___awdiv@dividend,f
  4755  0EA4  1903               	skipnz
  4756  0EA5  0AAA               	incf	___awdiv@dividend+1,f
  4757  0EA6                     l2694:	
  4758  0EA6  3001               	movlw	1
  4759  0EA7  00AB               	movwf	??___awdiv
  4760  0EA8  082B               	movf	??___awdiv,w
  4761  0EA9  06AD               	xorwf	___awdiv@sign,f
  4762  0EAA                     l2696:	
  4763  0EAA  01AE               	clrf	___awdiv@quotient
  4764  0EAB  01AF               	clrf	___awdiv@quotient+1
  4765  0EAC                     l2698:	
  4766  0EAC  0827               	movf	___awdiv@divisor,w
  4767  0EAD  0428               	iorwf	___awdiv@divisor+1,w
  4768  0EAE  1903               	btfsc	3,2
  4769  0EAF  2EB1               	goto	u2731
  4770  0EB0  2EB2               	goto	u2730
  4771  0EB1                     u2731:	
  4772  0EB1  2EE9               	goto	l2718
  4773  0EB2                     u2730:	
  4774  0EB2                     l2700:	
  4775  0EB2  01AC               	clrf	___awdiv@counter
  4776  0EB3  0AAC               	incf	___awdiv@counter,f
  4777  0EB4  2EC0               	goto	l2706
  4778  0EB5                     l2702:	
  4779  0EB5  3001               	movlw	1
  4780  0EB6                     u2745:	
  4781  0EB6  1003               	clrc
  4782  0EB7  0DA7               	rlf	___awdiv@divisor,f
  4783  0EB8  0DA8               	rlf	___awdiv@divisor+1,f
  4784  0EB9  3EFF               	addlw	-1
  4785  0EBA  1D03               	skipz
  4786  0EBB  2EB6               	goto	u2745
  4787  0EBC                     l2704:	
  4788  0EBC  3001               	movlw	1
  4789  0EBD  00AB               	movwf	??___awdiv
  4790  0EBE  082B               	movf	??___awdiv,w
  4791  0EBF  07AC               	addwf	___awdiv@counter,f
  4792  0EC0                     l2706:	
  4793  0EC0  1FA8               	btfss	___awdiv@divisor+1,7
  4794  0EC1  2EC3               	goto	u2751
  4795  0EC2  2EC4               	goto	u2750
  4796  0EC3                     u2751:	
  4797  0EC3  2EB5               	goto	l2702
  4798  0EC4                     u2750:	
  4799  0EC4                     l2708:	
  4800  0EC4  3001               	movlw	1
  4801  0EC5                     u2765:	
  4802  0EC5  1003               	clrc
  4803  0EC6  0DAE               	rlf	___awdiv@quotient,f
  4804  0EC7  0DAF               	rlf	___awdiv@quotient+1,f
  4805  0EC8  3EFF               	addlw	-1
  4806  0EC9  1D03               	skipz
  4807  0ECA  2EC5               	goto	u2765
  4808  0ECB  0828               	movf	___awdiv@divisor+1,w
  4809  0ECC  022A               	subwf	___awdiv@dividend+1,w
  4810  0ECD  1D03               	skipz
  4811  0ECE  2ED1               	goto	u2775
  4812  0ECF  0827               	movf	___awdiv@divisor,w
  4813  0ED0  0229               	subwf	___awdiv@dividend,w
  4814  0ED1                     u2775:	
  4815  0ED1  1C03               	skipc
  4816  0ED2  2ED4               	goto	u2771
  4817  0ED3  2ED5               	goto	u2770
  4818  0ED4                     u2771:	
  4819  0ED4  2EDC               	goto	l2714
  4820  0ED5                     u2770:	
  4821  0ED5                     l2710:	
  4822  0ED5  0827               	movf	___awdiv@divisor,w
  4823  0ED6  02A9               	subwf	___awdiv@dividend,f
  4824  0ED7  0828               	movf	___awdiv@divisor+1,w
  4825  0ED8  1C03               	skipc
  4826  0ED9  03AA               	decf	___awdiv@dividend+1,f
  4827  0EDA  02AA               	subwf	___awdiv@dividend+1,f
  4828  0EDB                     l2712:	
  4829  0EDB  142E               	bsf	___awdiv@quotient,0
  4830  0EDC                     l2714:	
  4831  0EDC  3001               	movlw	1
  4832  0EDD                     u2785:	
  4833  0EDD  1003               	clrc
  4834  0EDE  0CA8               	rrf	___awdiv@divisor+1,f
  4835  0EDF  0CA7               	rrf	___awdiv@divisor,f
  4836  0EE0  3EFF               	addlw	-1
  4837  0EE1  1D03               	skipz
  4838  0EE2  2EDD               	goto	u2785
  4839  0EE3                     l2716:	
  4840  0EE3  3001               	movlw	1
  4841  0EE4  02AC               	subwf	___awdiv@counter,f
  4842  0EE5  1D03               	btfss	3,2
  4843  0EE6  2EE8               	goto	u2791
  4844  0EE7  2EE9               	goto	u2790
  4845  0EE8                     u2791:	
  4846  0EE8  2EC4               	goto	l2708
  4847  0EE9                     u2790:	
  4848  0EE9                     l2718:	
  4849  0EE9  082D               	movf	___awdiv@sign,w
  4850  0EEA  1903               	btfsc	3,2
  4851  0EEB  2EED               	goto	u2801
  4852  0EEC  2EEE               	goto	u2800
  4853  0EED                     u2801:	
  4854  0EED  2EF3               	goto	l2722
  4855  0EEE                     u2800:	
  4856  0EEE                     l2720:	
  4857  0EEE  09AE               	comf	___awdiv@quotient,f
  4858  0EEF  09AF               	comf	___awdiv@quotient+1,f
  4859  0EF0  0AAE               	incf	___awdiv@quotient,f
  4860  0EF1  1903               	skipnz
  4861  0EF2  0AAF               	incf	___awdiv@quotient+1,f
  4862  0EF3                     l2722:	
  4863  0EF3  082F               	movf	___awdiv@quotient+1,w
  4864  0EF4  00A8               	movwf	?___awdiv+1
  4865  0EF5  082E               	movf	___awdiv@quotient,w
  4866  0EF6  00A7               	movwf	?___awdiv
  4867  0EF7                     l593:	
  4868  0EF7  0008               	return
  4869  0EF8                     __end_of___awdiv:	
  4870                           
  4871                           	psect	text17
  4872  0CA5                     __ptext17:	
  4873 ;; *************** function _ADC_Read *****************
  4874 ;; Defined at:
  4875 ;;		line 352 in file "main.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;  canale          1    wreg     unsigned char 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;  canale          1    3[BANK0 ] unsigned char 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  2    0[BANK0 ] int 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4889 ;;      Params:         0       2       0       0       0
  4890 ;;      Locals:         0       1       0       0       0
  4891 ;;      Temps:          0       1       0       0       0
  4892 ;;      Totals:         0       4       0       0       0
  4893 ;;Total ram usage:        4 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    2
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_main
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _ADC_Read
  4905  0CA5                     _ADC_Read:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  4909                           ;ADC_Read@canale stored from wreg
  4910  0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  4911  0CA6  1303               	bcf	3,6	;RP1=0, select bank0
  4912  0CA7  00A3               	movwf	ADC_Read@canale
  4913  0CA8                     l2864:	
  4914                           
  4915                           ;main.c: 352: int ADC_Read(char canale);main.c: 353: {;main.c: 354:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  4916  0CA8  0823               	movf	ADC_Read@canale,w
  4917  0CA9  00A2               	movwf	??_ADC_Read
  4918  0CAA  3002               	movlw	2
  4919  0CAB                     u2955:	
  4920  0CAB  1003               	clrc
  4921  0CAC  0DA2               	rlf	??_ADC_Read,f
  4922  0CAD  3EFF               	addlw	-1
  4923  0CAE  1D03               	skipz
  4924  0CAF  2CAB               	goto	u2955
  4925  0CB0  1003               	clrc
  4926  0CB1  0D22               	rlf	??_ADC_Read,w
  4927  0CB2  3801               	iorlw	1
  4928  0CB3  009F               	movwf	31	;volatile
  4929  0CB4                     l2866:	
  4930                           
  4931                           ;main.c: 355:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  4932  0CB4  3004               	movlw	4
  4933  0CB5  1283               	bcf	3,5	;RP0=0, select bank0
  4934  0CB6  1303               	bcf	3,6	;RP1=0, select bank0
  4935  0CB7  00A2               	movwf	??_ADC_Read
  4936  0CB8                     u3337:	
  4937  0CB8  0BA2               	decfsz	??_ADC_Read,f
  4938  0CB9  2CB8               	goto	u3337
  4939  0CBA  0000               	nop
  4940  0CBB                     l2868:	
  4941                           
  4942                           ;main.c: 356:     GO_nDONE = 1;
  4943  0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  4944  0CBC  1303               	bcf	3,6	;RP1=0, select bank0
  4945  0CBD  151F               	bsf	31,2	;volatile
  4946  0CBE                     l267:	
  4947                           ;main.c: 358:         ;
  4948                           
  4949                           
  4950                           ;main.c: 357:     while (GO_nDONE)
  4951  0CBE  191F               	btfsc	31,2	;volatile
  4952  0CBF  2CC1               	goto	u2961
  4953  0CC0  2CC2               	goto	u2960
  4954  0CC1                     u2961:	
  4955  0CC1  2CBE               	goto	l267
  4956  0CC2                     u2960:	
  4957  0CC2                     l2870:	
  4958                           
  4959                           ;main.c: 359:     return ADRESL + (ADRESH << 8);
  4960  0CC2  081E               	movf	30,w	;volatile
  4961  0CC3  00A1               	movwf	?_ADC_Read+1
  4962  0CC4  1683               	bsf	3,5	;RP0=1, select bank1
  4963  0CC5  1303               	bcf	3,6	;RP1=0, select bank1
  4964  0CC6  081E               	movf	30,w	;volatile
  4965  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  4966  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  4967  0CC9  00A0               	movwf	?_ADC_Read
  4968  0CCA                     l270:	
  4969  0CCA  0008               	return
  4970  0CCB                     __end_of_ADC_Read:	
  4971                           
  4972                           	psect	text18
  4973  0DDA                     __ptext18:	
  4974 ;; *************** function _ISR *****************
  4975 ;; Defined at:
  4976 ;;		line 553 in file "main.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;		None
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;		None
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  1    wreg      void 
  4983 ;; Registers used:
  4984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4990 ;;      Params:         0       0       0       0       0
  4991 ;;      Locals:         0       0       0       0       0
  4992 ;;      Temps:          4       0       0       0       0
  4993 ;;      Totals:         4       0       0       0       0
  4994 ;;Total ram usage:        4 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    1
  4997 ;; This function calls:
  4998 ;;		_UART_Read
  4999 ;;		_conteggioVeicoli
  5000 ;; This function is called by:
  5001 ;;		Interrupt level 1
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           
  5006                           ;psect for function _ISR
  5007  0DDA                     _ISR:	
  5008  0DDA                     i1l2424:	
  5009                           
  5010                           ;main.c: 556:     if (RCIF && readGateway.Bit == 0)
  5011  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  5012  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  5013  0DDC  1E8C               	btfss	12,5	;volatile
  5014  0DDD  2DDF               	goto	u238_21
  5015  0DDE  2DE0               	goto	u238_20
  5016  0DDF                     u238_21:	
  5017  0DDF  2DE9               	goto	i1l2432
  5018  0DE0                     u238_20:	
  5019  0DE0                     i1l2426:	
  5020  0DE0  1862               	btfsc	_readGateway,0
  5021  0DE1  2DE3               	goto	u239_21
  5022  0DE2  2DE4               	goto	u239_20
  5023  0DE3                     u239_21:	
  5024  0DE3  2DE9               	goto	i1l2432
  5025  0DE4                     u239_20:	
  5026  0DE4                     i1l2428:	
  5027                           
  5028                           ;main.c: 557:     {;main.c: 558:         readGateway.Bit = 1;
  5029  0DE4  1462               	bsf	_readGateway,0
  5030                           
  5031                           ;main.c: 559:         readGatewayDone.Bit = 0;
  5032  0DE5  1063               	bcf	_readGatewayDone,0
  5033                           
  5034                           ;main.c: 560:         readGatewayDone.Timeout = 0;
  5035  0DE6  10E3               	bcf	_readGatewayDone,1
  5036  0DE7                     i1l2430:	
  5037                           
  5038                           ;main.c: 561:         dataFromGatewayIndex = 0;
  5039  0DE7  01D9               	clrf	_dataFromGatewayIndex
  5040                           
  5041                           ;main.c: 562:         timerReadFromGateway = 0;
  5042  0DE8  01D8               	clrf	_timerReadFromGateway
  5043  0DE9                     i1l2432:	
  5044                           
  5045                           ;main.c: 564:     if (RCIF && readGateway.Bit == 1)
  5046  0DE9  1E8C               	btfss	12,5	;volatile
  5047  0DEA  2DEC               	goto	u240_21
  5048  0DEB  2DED               	goto	u240_20
  5049  0DEC                     u240_21:	
  5050  0DEC  2E04               	goto	i1l2442
  5051  0DED                     u240_20:	
  5052  0DED                     i1l2434:	
  5053  0DED  1C62               	btfss	_readGateway,0
  5054  0DEE  2DF0               	goto	u241_21
  5055  0DEF  2DF1               	goto	u241_20
  5056  0DF0                     u241_21:	
  5057  0DF0  2E04               	goto	i1l2442
  5058  0DF1                     u241_20:	
  5059  0DF1                     i1l2436:	
  5060                           
  5061                           ;main.c: 565:     {;main.c: 566:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  5062  0DF1  120A  158A  241A  120A  158A  	fcall	_UART_Read
  5063  0DF6  00F6               	movwf	??_ISR
  5064  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  5065  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  5066  0DF9  0859               	movf	_dataFromGatewayIndex,w
  5067  0DFA  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  5068  0DFB  0084               	movwf	4
  5069  0DFC  0876               	movf	??_ISR,w
  5070  0DFD  1383               	bcf	3,7	;select IRP bank1
  5071  0DFE  0080               	movwf	0
  5072  0DFF                     i1l2438:	
  5073                           
  5074                           ;main.c: 567:         dataFromGatewayIndex++;
  5075  0DFF  3001               	movlw	1
  5076  0E00  00F6               	movwf	??_ISR
  5077  0E01  0876               	movf	??_ISR,w
  5078  0E02  07D9               	addwf	_dataFromGatewayIndex,f
  5079  0E03                     i1l2440:	
  5080                           
  5081                           ;main.c: 568:         timerReadFromGateway = 0;
  5082  0E03  01D8               	clrf	_timerReadFromGateway
  5083  0E04                     i1l2442:	
  5084                           
  5085                           ;main.c: 573:     if (TMR0IF)
  5086  0E04  1D0B               	btfss	11,2	;volatile
  5087  0E05  2E07               	goto	u242_21
  5088  0E06  2E08               	goto	u242_20
  5089  0E07                     u242_21:	
  5090  0E07  2E12               	goto	i1l2450
  5091  0E08                     u242_20:	
  5092  0E08                     i1l2444:	
  5093                           
  5094                           ;main.c: 574:     {;main.c: 575:         TMR0IF = 0;
  5095  0E08  110B               	bcf	11,2	;volatile
  5096  0E09                     i1l2446:	
  5097                           
  5098                           ;main.c: 576:         conteggioVeicoli();
  5099  0E09  120A  118A  2586  120A  158A  	fcall	_conteggioVeicoli
  5100  0E0E                     i1l2448:	
  5101                           
  5102                           ;main.c: 577:         TMR0 = 6;
  5103  0E0E  3006               	movlw	6
  5104  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  5105  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  5106  0E11  0081               	movwf	1	;volatile
  5107  0E12                     i1l2450:	
  5108                           
  5109                           ;main.c: 580:     if (TMR1IF)
  5110  0E12  1C0C               	btfss	12,0	;volatile
  5111  0E13  2E15               	goto	u243_21
  5112  0E14  2E16               	goto	u243_20
  5113  0E15                     u243_21:	
  5114  0E15  2E2B               	goto	i1l354
  5115  0E16                     u243_20:	
  5116  0E16                     i1l2452:	
  5117                           
  5118                           ;main.c: 581:     {;main.c: 582:         TMR1IF = 0;
  5119  0E16  100C               	bcf	12,0	;volatile
  5120  0E17                     i1l2454:	
  5121                           
  5122                           ;main.c: 583:         count_lux++;
  5123  0E17  3001               	movlw	1
  5124  0E18  00F6               	movwf	??_ISR
  5125  0E19  0876               	movf	??_ISR,w
  5126  0E1A  07F4               	addwf	_count_lux,f
  5127  0E1B                     i1l2456:	
  5128                           
  5129                           ;main.c: 585:         if (count_lux >= 20)
  5130  0E1B  3014               	movlw	20
  5131  0E1C  0274               	subwf	_count_lux,w
  5132  0E1D  1C03               	skipc
  5133  0E1E  2E20               	goto	u244_21
  5134  0E1F  2E21               	goto	u244_20
  5135  0E20                     u244_21:	
  5136  0E20  2E27               	goto	i1l2464
  5137  0E21                     u244_20:	
  5138  0E21                     i1l2458:	
  5139                           
  5140                           ;main.c: 586:         {;main.c: 587:             secondPassed.Bit = 1;
  5141  0E21  1461               	bsf	_secondPassed,0
  5142  0E22                     i1l2460:	
  5143                           
  5144                           ;main.c: 588:             count_lux = 0;
  5145  0E22  01F4               	clrf	_count_lux
  5146  0E23                     i1l2462:	
  5147                           
  5148                           ;main.c: 589:             timerReadFromGateway++;
  5149  0E23  3001               	movlw	1
  5150  0E24  00F6               	movwf	??_ISR
  5151  0E25  0876               	movf	??_ISR,w
  5152  0E26  07D8               	addwf	_timerReadFromGateway,f
  5153  0E27                     i1l2464:	
  5154                           
  5155                           ;main.c: 592:         TMR1H = 60;
  5156  0E27  303C               	movlw	60
  5157  0E28  008F               	movwf	15	;volatile
  5158  0E29                     i1l2466:	
  5159                           
  5160                           ;main.c: 593:         TMR1L = 176;
  5161  0E29  30B0               	movlw	176
  5162  0E2A  008E               	movwf	14	;volatile
  5163  0E2B                     i1l354:	
  5164  0E2B  0879               	movf	??_ISR+3,w
  5165  0E2C  008A               	movwf	10
  5166  0E2D  0878               	movf	??_ISR+2,w
  5167  0E2E  0084               	movwf	4
  5168  0E2F  0E77               	swapf	(??_ISR+1)^(0+4294967168),w
  5169  0E30  0083               	movwf	3
  5170  0E31  0EFE               	swapf	btemp,f
  5171  0E32  0E7E               	swapf	btemp,w
  5172  0E33  0009               	retfie
  5173  0E34                     __end_of_ISR:	
  5174                           
  5175                           	psect	intentry
  5176  0004                     __pintentry:	
  5177                           ;incstack = 0
  5178                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5179                           
  5180  0004                     interrupt_function:	
  5181  007E                     saved_w	set	btemp
  5182  0004  00FE               	movwf	btemp
  5183  0005  0E03               	swapf	3,w
  5184  0006  00F7               	movwf	??_ISR+1
  5185  0007  0804               	movf	4,w
  5186  0008  00F8               	movwf	??_ISR+2
  5187  0009  080A               	movf	10,w
  5188  000A  00F9               	movwf	??_ISR+3
  5189  000B  120A  158A  2DDA   	ljmp	_ISR
  5190                           
  5191                           	psect	text19
  5192  0586                     __ptext19:	
  5193 ;; *************** function _conteggioVeicoli *****************
  5194 ;; Defined at:
  5195 ;;		line 444 in file "main.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;		None
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;		None
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      void 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5209 ;;      Params:         0       0       0       0       0
  5210 ;;      Locals:         0       0       0       0       0
  5211 ;;      Temps:          1       0       0       0       0
  5212 ;;      Totals:         1       0       0       0       0
  5213 ;;Total ram usage:        1 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		_ISR
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _conteggioVeicoli
  5224  0586                     _conteggioVeicoli:	
  5225  0586                     i1l2118:	
  5226                           ;incstack = 0
  5227                           ; Regs used in _conteggioVeicoli: [wreg+status,2+status,0]
  5228                           
  5229                           
  5230                           ;main.c: 447:     if (!PORTBbits.RB3)
  5231  0586  1283               	bcf	3,5	;RP0=0, select bank0
  5232  0587  1303               	bcf	3,6	;RP1=0, select bank0
  5233  0588  1986               	btfsc	6,3	;volatile
  5234  0589  2D8B               	goto	u183_21
  5235  058A  2D8C               	goto	u183_20
  5236  058B                     u183_21:	
  5237  058B  2D93               	goto	i1l308
  5238  058C                     u183_20:	
  5239  058C                     i1l2120:	
  5240                           
  5241                           ;main.c: 448:     {;main.c: 449:         count++;
  5242  058C  3001               	movlw	1
  5243  058D  07F0               	addwf	_count,f
  5244  058E  1803               	skipnc
  5245  058F  0AF1               	incf	_count+1,f
  5246  0590  3000               	movlw	0
  5247  0591  07F1               	addwf	_count+1,f
  5248                           
  5249                           ;main.c: 450:     }
  5250  0592  2DC2               	goto	i1l2136
  5251  0593                     i1l308:	
  5252                           ;main.c: 451:     else if (PORTBbits.RB3)
  5253                           
  5254  0593  1D86               	btfss	6,3	;volatile
  5255  0594  2D96               	goto	u184_21
  5256  0595  2D97               	goto	u184_20
  5257  0596                     u184_21:	
  5258  0596  2DC2               	goto	i1l2136
  5259  0597                     u184_20:	
  5260  0597                     i1l2122:	
  5261                           
  5262                           ;main.c: 452:     {;main.c: 453:         if (count >= 500)
  5263  0597  3001               	movlw	1
  5264  0598  0271               	subwf	_count+1,w
  5265  0599  30F4               	movlw	244
  5266  059A  1903               	skipnz
  5267  059B  0270               	subwf	_count,w
  5268  059C  1C03               	skipc
  5269  059D  2D9F               	goto	u185_21
  5270  059E  2DA0               	goto	u185_20
  5271  059F                     u185_21:	
  5272  059F  2DA4               	goto	i1l2126
  5273  05A0                     u185_20:	
  5274  05A0                     i1l2124:	
  5275                           
  5276                           ;main.c: 454:         {;main.c: 455:             motorcycle[0]++;
  5277  05A0  3001               	movlw	1
  5278  05A1  00F5               	movwf	??_conteggioVeicoli
  5279  05A2  0875               	movf	??_conteggioVeicoli,w
  5280  05A3  07D1               	addwf	_motorcycle,f
  5281  05A4                     i1l2126:	
  5282                           
  5283                           ;main.c: 457:         if (count >= 1500)
  5284  05A4  3005               	movlw	5
  5285  05A5  0271               	subwf	_count+1,w
  5286  05A6  30DC               	movlw	220
  5287  05A7  1903               	skipnz
  5288  05A8  0270               	subwf	_count,w
  5289  05A9  1C03               	skipc
  5290  05AA  2DAC               	goto	u186_21
  5291  05AB  2DAD               	goto	u186_20
  5292  05AC                     u186_21:	
  5293  05AC  2DB1               	goto	i1l2130
  5294  05AD                     u186_20:	
  5295  05AD                     i1l2128:	
  5296                           
  5297                           ;main.c: 458:         {;main.c: 459:             car[0]++;
  5298  05AD  3001               	movlw	1
  5299  05AE  00F5               	movwf	??_conteggioVeicoli
  5300  05AF  0875               	movf	??_conteggioVeicoli,w
  5301  05B0  07CD               	addwf	_car,f
  5302  05B1                     i1l2130:	
  5303                           
  5304                           ;main.c: 461:         if (count >= 3000)
  5305  05B1  300B               	movlw	11
  5306  05B2  0271               	subwf	_count+1,w
  5307  05B3  30B8               	movlw	184
  5308  05B4  1903               	skipnz
  5309  05B5  0270               	subwf	_count,w
  5310  05B6  1C03               	skipc
  5311  05B7  2DB9               	goto	u187_21
  5312  05B8  2DBA               	goto	u187_20
  5313  05B9                     u187_21:	
  5314  05B9  2DC0               	goto	i1l2134
  5315  05BA                     u187_20:	
  5316  05BA                     i1l2132:	
  5317                           
  5318                           ;main.c: 462:         {;main.c: 463:             truck[0]++;
  5319  05BA  3001               	movlw	1
  5320  05BB  00F5               	movwf	??_conteggioVeicoli
  5321  05BC  0875               	movf	??_conteggioVeicoli,w
  5322  05BD  1683               	bsf	3,5	;RP0=1, select bank1
  5323  05BE  1303               	bcf	3,6	;RP1=0, select bank1
  5324  05BF  07AF               	addwf	_truck^(0+128),f
  5325  05C0                     i1l2134:	
  5326                           
  5327                           ;main.c: 465:         count = 0;
  5328  05C0  01F0               	clrf	_count
  5329  05C1  01F1               	clrf	_count+1
  5330  05C2                     i1l2136:	
  5331                           
  5332                           ;main.c: 468:     if (!PORTBbits.RB4)
  5333  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  5334  05C3  1A06               	btfsc	6,4	;volatile
  5335  05C4  2DC6               	goto	u188_21
  5336  05C5  2DC7               	goto	u188_20
  5337  05C6                     u188_21:	
  5338  05C6  2DCE               	goto	i1l314
  5339  05C7                     u188_20:	
  5340  05C7                     i1l2138:	
  5341                           
  5342                           ;main.c: 469:     {;main.c: 470:         count++;
  5343  05C7  3001               	movlw	1
  5344  05C8  07F0               	addwf	_count,f
  5345  05C9  1803               	skipnc
  5346  05CA  0AF1               	incf	_count+1,f
  5347  05CB  3000               	movlw	0
  5348  05CC  07F1               	addwf	_count+1,f
  5349                           
  5350                           ;main.c: 471:     }
  5351  05CD  2DFD               	goto	i1l2154
  5352  05CE                     i1l314:	
  5353                           ;main.c: 472:     else if (PORTBbits.RB4)
  5354                           
  5355  05CE  1E06               	btfss	6,4	;volatile
  5356  05CF  2DD1               	goto	u189_21
  5357  05D0  2DD2               	goto	u189_20
  5358  05D1                     u189_21:	
  5359  05D1  2DFD               	goto	i1l2154
  5360  05D2                     u189_20:	
  5361  05D2                     i1l2140:	
  5362                           
  5363                           ;main.c: 473:     {;main.c: 474:         if (count >= 500)
  5364  05D2  3001               	movlw	1
  5365  05D3  0271               	subwf	_count+1,w
  5366  05D4  30F4               	movlw	244
  5367  05D5  1903               	skipnz
  5368  05D6  0270               	subwf	_count,w
  5369  05D7  1C03               	skipc
  5370  05D8  2DDA               	goto	u190_21
  5371  05D9  2DDB               	goto	u190_20
  5372  05DA                     u190_21:	
  5373  05DA  2DDF               	goto	i1l2144
  5374  05DB                     u190_20:	
  5375  05DB                     i1l2142:	
  5376                           
  5377                           ;main.c: 475:         {;main.c: 476:             motorcycle[1]++;
  5378  05DB  3001               	movlw	1
  5379  05DC  00F5               	movwf	??_conteggioVeicoli
  5380  05DD  0875               	movf	??_conteggioVeicoli,w
  5381  05DE  07D2               	addwf	_motorcycle+1,f
  5382  05DF                     i1l2144:	
  5383                           
  5384                           ;main.c: 478:         if (count >= 1500)
  5385  05DF  3005               	movlw	5
  5386  05E0  0271               	subwf	_count+1,w
  5387  05E1  30DC               	movlw	220
  5388  05E2  1903               	skipnz
  5389  05E3  0270               	subwf	_count,w
  5390  05E4  1C03               	skipc
  5391  05E5  2DE7               	goto	u191_21
  5392  05E6  2DE8               	goto	u191_20
  5393  05E7                     u191_21:	
  5394  05E7  2DEC               	goto	i1l2148
  5395  05E8                     u191_20:	
  5396  05E8                     i1l2146:	
  5397                           
  5398                           ;main.c: 479:         {;main.c: 480:             car[1]++;
  5399  05E8  3001               	movlw	1
  5400  05E9  00F5               	movwf	??_conteggioVeicoli
  5401  05EA  0875               	movf	??_conteggioVeicoli,w
  5402  05EB  07CE               	addwf	_car+1,f
  5403  05EC                     i1l2148:	
  5404                           
  5405                           ;main.c: 482:         if (count >= 3000)
  5406  05EC  300B               	movlw	11
  5407  05ED  0271               	subwf	_count+1,w
  5408  05EE  30B8               	movlw	184
  5409  05EF  1903               	skipnz
  5410  05F0  0270               	subwf	_count,w
  5411  05F1  1C03               	skipc
  5412  05F2  2DF4               	goto	u192_21
  5413  05F3  2DF5               	goto	u192_20
  5414  05F4                     u192_21:	
  5415  05F4  2DFB               	goto	i1l2152
  5416  05F5                     u192_20:	
  5417  05F5                     i1l2150:	
  5418                           
  5419                           ;main.c: 483:         {;main.c: 484:             truck[1]++;
  5420  05F5  3001               	movlw	1
  5421  05F6  00F5               	movwf	??_conteggioVeicoli
  5422  05F7  0875               	movf	??_conteggioVeicoli,w
  5423  05F8  1683               	bsf	3,5	;RP0=1, select bank1
  5424  05F9  1303               	bcf	3,6	;RP1=0, select bank1
  5425  05FA  07B0               	addwf	(_truck^(0+128)+1),f
  5426  05FB                     i1l2152:	
  5427                           
  5428                           ;main.c: 486:         count = 0;
  5429  05FB  01F0               	clrf	_count
  5430  05FC  01F1               	clrf	_count+1
  5431  05FD                     i1l2154:	
  5432                           
  5433                           ;main.c: 489:     if (!PORTBbits.RB5)
  5434  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  5435  05FE  1A86               	btfsc	6,5	;volatile
  5436  05FF  2E01               	goto	u193_21
  5437  0600  2E02               	goto	u193_20
  5438  0601                     u193_21:	
  5439  0601  2E09               	goto	i1l320
  5440  0602                     u193_20:	
  5441  0602                     i1l2156:	
  5442                           
  5443                           ;main.c: 490:     {;main.c: 491:         count++;
  5444  0602  3001               	movlw	1
  5445  0603  07F0               	addwf	_count,f
  5446  0604  1803               	skipnc
  5447  0605  0AF1               	incf	_count+1,f
  5448  0606  3000               	movlw	0
  5449  0607  07F1               	addwf	_count+1,f
  5450                           
  5451                           ;main.c: 492:     }
  5452  0608  2E38               	goto	i1l2172
  5453  0609                     i1l320:	
  5454                           ;main.c: 493:     else if (PORTBbits.RB5)
  5455                           
  5456  0609  1E86               	btfss	6,5	;volatile
  5457  060A  2E0C               	goto	u194_21
  5458  060B  2E0D               	goto	u194_20
  5459  060C                     u194_21:	
  5460  060C  2E38               	goto	i1l2172
  5461  060D                     u194_20:	
  5462  060D                     i1l2158:	
  5463                           
  5464                           ;main.c: 494:     {;main.c: 495:         if (count >= 500)
  5465  060D  3001               	movlw	1
  5466  060E  0271               	subwf	_count+1,w
  5467  060F  30F4               	movlw	244
  5468  0610  1903               	skipnz
  5469  0611  0270               	subwf	_count,w
  5470  0612  1C03               	skipc
  5471  0613  2E15               	goto	u195_21
  5472  0614  2E16               	goto	u195_20
  5473  0615                     u195_21:	
  5474  0615  2E1A               	goto	i1l2162
  5475  0616                     u195_20:	
  5476  0616                     i1l2160:	
  5477                           
  5478                           ;main.c: 496:         {;main.c: 497:             motorcycle[2]++;
  5479  0616  3001               	movlw	1
  5480  0617  00F5               	movwf	??_conteggioVeicoli
  5481  0618  0875               	movf	??_conteggioVeicoli,w
  5482  0619  07D3               	addwf	_motorcycle+2,f
  5483  061A                     i1l2162:	
  5484                           
  5485                           ;main.c: 499:         if (count >= 1500)
  5486  061A  3005               	movlw	5
  5487  061B  0271               	subwf	_count+1,w
  5488  061C  30DC               	movlw	220
  5489  061D  1903               	skipnz
  5490  061E  0270               	subwf	_count,w
  5491  061F  1C03               	skipc
  5492  0620  2E22               	goto	u196_21
  5493  0621  2E23               	goto	u196_20
  5494  0622                     u196_21:	
  5495  0622  2E27               	goto	i1l2166
  5496  0623                     u196_20:	
  5497  0623                     i1l2164:	
  5498                           
  5499                           ;main.c: 500:         {;main.c: 501:             car[2]++;
  5500  0623  3001               	movlw	1
  5501  0624  00F5               	movwf	??_conteggioVeicoli
  5502  0625  0875               	movf	??_conteggioVeicoli,w
  5503  0626  07CF               	addwf	_car+2,f
  5504  0627                     i1l2166:	
  5505                           
  5506                           ;main.c: 503:         if (count >= 3000)
  5507  0627  300B               	movlw	11
  5508  0628  0271               	subwf	_count+1,w
  5509  0629  30B8               	movlw	184
  5510  062A  1903               	skipnz
  5511  062B  0270               	subwf	_count,w
  5512  062C  1C03               	skipc
  5513  062D  2E2F               	goto	u197_21
  5514  062E  2E30               	goto	u197_20
  5515  062F                     u197_21:	
  5516  062F  2E36               	goto	i1l2170
  5517  0630                     u197_20:	
  5518  0630                     i1l2168:	
  5519                           
  5520                           ;main.c: 504:         {;main.c: 505:             truck[2]++;
  5521  0630  3001               	movlw	1
  5522  0631  00F5               	movwf	??_conteggioVeicoli
  5523  0632  0875               	movf	??_conteggioVeicoli,w
  5524  0633  1683               	bsf	3,5	;RP0=1, select bank1
  5525  0634  1303               	bcf	3,6	;RP1=0, select bank1
  5526  0635  07B1               	addwf	(_truck^(0+128)+2),f
  5527  0636                     i1l2170:	
  5528                           
  5529                           ;main.c: 507:         count = 0;
  5530  0636  01F0               	clrf	_count
  5531  0637  01F1               	clrf	_count+1
  5532  0638                     i1l2172:	
  5533                           
  5534                           ;main.c: 510:     if (!PORTAbits.RA5)
  5535  0638  1283               	bcf	3,5	;RP0=0, select bank0
  5536  0639  1A85               	btfsc	5,5	;volatile
  5537  063A  2E3C               	goto	u198_21
  5538  063B  2E3D               	goto	u198_20
  5539  063C                     u198_21:	
  5540  063C  2E44               	goto	i1l326
  5541  063D                     u198_20:	
  5542  063D                     i1l2174:	
  5543                           
  5544                           ;main.c: 511:     {;main.c: 512:         count++;
  5545  063D  3001               	movlw	1
  5546  063E  07F0               	addwf	_count,f
  5547  063F  1803               	skipnc
  5548  0640  0AF1               	incf	_count+1,f
  5549  0641  3000               	movlw	0
  5550  0642  07F1               	addwf	_count+1,f
  5551                           
  5552                           ;main.c: 513:     }
  5553  0643  2E73               	goto	i1l332
  5554  0644                     i1l326:	
  5555                           ;main.c: 514:     else if (PORTAbits.RA5)
  5556                           
  5557  0644  1E85               	btfss	5,5	;volatile
  5558  0645  2E47               	goto	u199_21
  5559  0646  2E48               	goto	u199_20
  5560  0647                     u199_21:	
  5561  0647  2E73               	goto	i1l332
  5562  0648                     u199_20:	
  5563  0648                     i1l2176:	
  5564                           
  5565                           ;main.c: 515:     {;main.c: 516:         if (count >= 500)
  5566  0648  3001               	movlw	1
  5567  0649  0271               	subwf	_count+1,w
  5568  064A  30F4               	movlw	244
  5569  064B  1903               	skipnz
  5570  064C  0270               	subwf	_count,w
  5571  064D  1C03               	skipc
  5572  064E  2E50               	goto	u200_21
  5573  064F  2E51               	goto	u200_20
  5574  0650                     u200_21:	
  5575  0650  2E55               	goto	i1l2180
  5576  0651                     u200_20:	
  5577  0651                     i1l2178:	
  5578                           
  5579                           ;main.c: 517:         {;main.c: 518:             motorcycle[3]++;
  5580  0651  3001               	movlw	1
  5581  0652  00F5               	movwf	??_conteggioVeicoli
  5582  0653  0875               	movf	??_conteggioVeicoli,w
  5583  0654  07D4               	addwf	_motorcycle+3,f
  5584  0655                     i1l2180:	
  5585                           
  5586                           ;main.c: 520:         if (count >= 1500)
  5587  0655  3005               	movlw	5
  5588  0656  0271               	subwf	_count+1,w
  5589  0657  30DC               	movlw	220
  5590  0658  1903               	skipnz
  5591  0659  0270               	subwf	_count,w
  5592  065A  1C03               	skipc
  5593  065B  2E5D               	goto	u201_21
  5594  065C  2E5E               	goto	u201_20
  5595  065D                     u201_21:	
  5596  065D  2E62               	goto	i1l2184
  5597  065E                     u201_20:	
  5598  065E                     i1l2182:	
  5599                           
  5600                           ;main.c: 521:         {;main.c: 522:             car[3]++;
  5601  065E  3001               	movlw	1
  5602  065F  00F5               	movwf	??_conteggioVeicoli
  5603  0660  0875               	movf	??_conteggioVeicoli,w
  5604  0661  07D0               	addwf	_car+3,f
  5605  0662                     i1l2184:	
  5606                           
  5607                           ;main.c: 524:         if (count >= 3000)
  5608  0662  300B               	movlw	11
  5609  0663  0271               	subwf	_count+1,w
  5610  0664  30B8               	movlw	184
  5611  0665  1903               	skipnz
  5612  0666  0270               	subwf	_count,w
  5613  0667  1C03               	skipc
  5614  0668  2E6A               	goto	u202_21
  5615  0669  2E6B               	goto	u202_20
  5616  066A                     u202_21:	
  5617  066A  2E71               	goto	i1l2188
  5618  066B                     u202_20:	
  5619  066B                     i1l2186:	
  5620                           
  5621                           ;main.c: 525:         {;main.c: 526:             truck[3]++;
  5622  066B  3001               	movlw	1
  5623  066C  00F5               	movwf	??_conteggioVeicoli
  5624  066D  0875               	movf	??_conteggioVeicoli,w
  5625  066E  1683               	bsf	3,5	;RP0=1, select bank1
  5626  066F  1303               	bcf	3,6	;RP1=0, select bank1
  5627  0670  07B2               	addwf	(_truck^(0+128)+3),f
  5628  0671                     i1l2188:	
  5629                           
  5630                           ;main.c: 528:         count = 0;
  5631  0671  01F0               	clrf	_count
  5632  0672  01F1               	clrf	_count+1
  5633  0673                     i1l332:	
  5634  0673  0008               	return
  5635  0674                     __end_of_conteggioVeicoli:	
  5636                           
  5637                           	psect	text20
  5638  0C1A                     __ptext20:	
  5639 ;; *************** function _UART_Read *****************
  5640 ;; Defined at:
  5641 ;;		line 391 in file "main.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;		None
  5644 ;; Auto vars:     Size  Location     Type
  5645 ;;		None
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  1    wreg      unsigned char 
  5648 ;; Registers used:
  5649 ;;		wreg
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/0
  5652 ;;		On exit  : 0/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5655 ;;      Params:         0       0       0       0       0
  5656 ;;      Locals:         0       0       0       0       0
  5657 ;;      Temps:          0       0       0       0       0
  5658 ;;      Totals:         0       0       0       0       0
  5659 ;;Total ram usage:        0 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; This function calls:
  5662 ;;		Nothing
  5663 ;; This function is called by:
  5664 ;;		_ISR
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _UART_Read
  5670  0C1A                     _UART_Read:	
  5671  0C1A                     i1l2112:	
  5672                           ;incstack = 0
  5673                           ; Regs used in _UART_Read: [wreg]
  5674                           
  5675  0C1A                     i1l288:	
  5676                           ;main.c: 394:         ;
  5677                           
  5678                           
  5679                           ;main.c: 393:     while (!RCIF)
  5680  0C1A  1283               	bcf	3,5	;RP0=0, select bank0
  5681  0C1B  1303               	bcf	3,6	;RP1=0, select bank0
  5682  0C1C  1E8C               	btfss	12,5	;volatile
  5683  0C1D  2C1F               	goto	u182_21
  5684  0C1E  2C20               	goto	u182_20
  5685  0C1F                     u182_21:	
  5686  0C1F  2C1A               	goto	i1l288
  5687  0C20                     u182_20:	
  5688  0C20                     i1l290:	
  5689                           
  5690                           ;main.c: 395:     RCIF = 0;
  5691  0C20  128C               	bcf	12,5	;volatile
  5692  0C21                     i1l2114:	
  5693                           
  5694                           ;main.c: 396:     return RCREG;
  5695  0C21  081A               	movf	26,w	;volatile
  5696  0C22                     i1l291:	
  5697  0C22  0008               	return
  5698  0C23                     __end_of_UART_Read:	
  5699  007E                     btemp	set	126	;btemp
  5700  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        32
    BSS         243
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     45      68
    BANK1            80      0      79
    BANK3            96      0      96
    BANK2            96     23      95

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _UART_Write_Text->_UART_TxChar
    _map->___awdiv
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                45    45      0   17483
                                             29 BANK0     16    16      0
                                              0 BANK2     23    23      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                             ___wmul
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             9     7      2    2616
                                             20 BANK0      9     7      2
                          _BuildByte
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      4     4      0     197
                                              1 BANK0      4     4      0
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (3) _UART_TxChar                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1141
                                              0 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4658
                                             16 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1926
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     171
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             15 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3     934
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    16    10      6     716
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              7     5      2     322
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             16 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0       0
                                              1 COMMON     4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (5) _conteggioVeicoli                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   ___wmul
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_Write_Text
       _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     17      5F      11       99.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2D      44       5       85.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     15C      12        0.0%
ABS                  0      0     15C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Jun 18 16:06:55 2020

                        pc 0002             ___bmul@product 0022                __CFG_CP$OFF 0000  
                       l83 0D26               ___awdiv@sign 002D                         _s0 00C3  
                       _s1 00B7                         _s2 01E4                         _s3 01D8  
                       _s4 01CC                         _s5 01C0                         _s6 01B4  
                       _s7 01A8                         _s8 019C                         _s9 0190  
                       fsr 0004        ___wmul@multiplicand 0022             _GetDigits$1151 0035  
              __CFG_LVP$ON 0000                        l125 0713                        l302 0F62  
                      l119 06C2                        l128 073B                        l224 0175  
                      l216 00BE                        l305 0C68                        l218 0093  
                      l251 03E2                        l229 028F                        l270 0CCA  
                      l344 07DC                        l264 0C40                        l440 0CD9  
                      l505 0F77                        l273 0D60                        l442 0CF1  
                      l267 0CBE                        l515 0FFF                        l276 0C26  
                      l285 0CA4                        l606 0E8E                        l278 0C2A  
                      l279 0C2D                        l296 0D9A                        l466 0C7F  
                      l299 0DD9                        l593 0EF7               __CFG_CPD$OFF 0000  
                      _ISR 0DDA                        _s10 014C                        _s11 0140  
                      _s12 0134                        _s13 0128                        _s14 011C  
                      _s15 0110                        _car 004D                        _map 0CF2  
                      fsr0 0004                        _str 00B3                        indf 0000  
             ___awmod@sign 0026               __CFG_FOSC$HS 0000                       ?_ISR 0075  
              main@colorId 015A                       l3000 0230                       l3010 0295  
                     l3002 027D                       l3020 02DE                       l3012 0299  
                     l3030 035B                       l3022 02E6                       l3014 02A1  
                     l3006 0286                       l3040 0383                       l3032 0360  
                     l3024 0317                       l3016 02A2                       l3050 03D8  
                     l3042 0398                       l3034 0365                       l3026 031A  
                     l3018 02DB                       l3060 03EB                       l3052 03DC  
                     l3036 0379                       l3028 0353                       l3070 047D  
                     l3062 03F8                       l3054 03E0                       l3038 037E  
                     l3046 03AD                       l2600 06EC                       l3080 0498  
                     l3064 03FC                       l3056 03E6                       l3048 03C0  
                     l2602 0700                       l3090 054F                       l3082 04A7  
                     l3074 0486                       l3058 03EA                       l2700 0EB2  
                     l2612 0727                       l2604 0706                       l2620 0C83  
                     l3092 0560                       l3076 048A                       l3068 040A  
                     l2710 0ED5                       l2702 0EB5                       l2630 0CCF  
                     l2614 072D                       l2606 0719                       l2550 0C2B  
                     l2622 0C86                       l3094 0571                       l3086 04AE  
                     l3190 03B5                       l2720 0EEE                       l2712 0EDB  
                     l2704 0EBC                       l3192 07A9                       l2800 0764  
                     l2632 0CD3                       l2616 073A                       l2608 0726  
                     l2560 0695                       l2552 0677                       l2624 0C91  
                     l3088 04BB                       l2722 0EF3                       l2714 0EDC  
                     l2706 0EC0                       l2730 0E3B                       l2810 07BA  
                     l2802 0783                       l2650 0F86                       l2642 0F63  
                     l2634 0CE0                       l2554 0686                       l2626 0C99  
                     l2716 0EE3                       l2708 0EC4                       l2740 0E51  
                     l2732 0E40                       l2820 0D9B                       l2812 07C7  
                     l2660 0FAA                       l2652 0F8A                       l2644 0F66  
                     l2636 0CE7                       l2628 0CCB                       l2580 06D0  
                     l2572 069B                       l2556 0693                       l2548 0C26  
                     l3188 00B6                       l2900 004A                       l2718 0EE9  
                     l2750 0E6D                       l2742 0E54                       l2734 0E42  
                     l2726 0E34                       l2830 0DD5                       l2822 0DA9  
                     l2814 07CF                       l2806 07A2                       l2670 0FD8  
                     l2662 0FAE                       l2654 0F92                       l2646 0F6A  
                     l2638 0CED                       l2574 06AF                       l2566 0697  
                     l2558 0694                       l2910 0057                       l2902 0050  
                     l2760 0E8A                       l2752 0E73                       l2744 0E5B  
                     l2736 0E46                       l2728 0E37                       l2840 0F39  
                     l2824 0DB1                       l2808 07B4                       l2672 0FE1  
                     l2664 0FB7                       l2656 0F9A                       l2648 0F7B  
                     l2584 06D1                       l2576 06B5                       l2920 007D  
                     l2912 005B                       l2904 0051                       l2690 0E9D  
                     l2682 0E8F                       l2754 0E7A                       l2746 0E5F  
                     l2738 0E4B                       l2842 0F4F                       l2834 0EF8  
                     l2826 0DC2                       l2666 0FC9                       l2658 0F9D  
                     l2674 0FE7                       l2770 0C32                       l2594 06E8  
                     l2586 06D7                       l2578 06C8                       l2850 0D77  
                     l2930 0089                       l2922 0081                       l2914 005D  
                     l2906 0053                       l2692 0EA1                       l2684 0E92  
                     l2748 0E63                       l2756 0E80                       l2836 0EFE  
                     l2828 0DCD                       l2844 0C57                       l2676 0FEC  
                     l2668 0FD7                       l2780 0D5D                       l2772 0C35  
                     l2764 0CF2                       l2588 06E4                       l2860 0D87  
                     l2940 0096                       l2932 0089                       l2924 0083  
                     l2916 0062                       l2908 0055                       l2870 0CC2  
                     l2694 0EA6                       l2686 0E96                       l2758 0E85  
                     l2838 0F14                       l2846 0C66                       l2678 0FF7  
                     l2782 0D5E                       l2774 0C39                       l2862 0D8D  
                     l2942 009C                       l2950 00A9                       l2934 0089  
                     l2926 0086                       l2918 006D                       ?_map 0030  
                     l2864 0CA8                       l2696 0EAA                       l2688 0E9B  
                     l2792 0740                       l2784 0D5F                       l2776 0D27  
                     l2880 0C75                       l2768 0C2E                       l2856 0D79  
                     l2848 0D64                       l2960 00CA                       l2952 00C2  
                     l2944 009F                       l2936 008C                       l2928 0089  
                     l2866 0CB4                       l2698 0EAC                       l2786 073C  
                     l2778 0D2F                       l2882 0C77                       l2874 0C6C  
                     l2858 0D81                       l2970 00F1                       l2962 00CC  
                     l2954 00C3                       l2946 00A5                       l2868 0CBB  
                     l2884 0C7E                       l2876 0C6D                       l2980 017B  
                     l2972 0116                       l2956 00C4                       l2798 0745  
                     l2878 0C71                       l2982 018C                       l2974 012B  
                     l2958 00C6                       l2992 01C7                       l2984 0192  
                     l2976 0160                       l2968 00D0                       l2994 01CB  
                     l2986 01B5                       l2978 0168                       l2988 01B9  
                     l2998 01D9                       u3000 0092                       u3001 0091  
                     u3010 009C                       u3011 009B                       u3100 01D8  
                     u3020 00A5                       u3101 01D7                       u3021 00A4  
                     u3110 0230                       u3030 00C2                       u3111 022F  
                     u3031 00C1                       u3200 0383                       u3120 0295  
                     u3040 00CA                       u3201 0382                       u3121 0294  
                     u3105 01D4                       u3041 00C9                       u3210 03DC  
                     u3130 0299                       u3211 03DB                       u3131 0298  
                     u3115 022C                       u2500 06E4                       u3300 0497  
                     u3220 03E0                       u3140 02DB                       u3060 0175  
                     u2501 06E3                       u3301 0496                       u3221 03DF  
                     u3141 02DA                       u3061 0174                       u3310 04BB  
                     u3230 03E6                       u3150 02E6                       u3070 017B  
                     u3311 04BA                       u3231 03E5                       u3151 02E5  
                     u3071 017A                       u3055 0107                       u2600 0CED  
                     u2520 0713                       u3240 03EA                       u3160 0317  
                     u3080 01B5                       u2601 0CEC                       u2521 0712  
                     u2505 06E0                       u3305 0493                       u3241 03E9  
                     u3161 0316                       u3081 01B4                       u3065 0171  
                     u2610 0F6A                       u2530 0719                       u2514 06F8  
                     u2450 0C2A                       u3250 03F8                       u3170 035B  
                     u3090 01C6                       u2611 0F69                       u2531 0718  
                     u2515 06F6                       u2451 0C29                       u3251 03F7  
                     u3171 035A                       u3091 01C5                       u2700 0FEC  
                     u2620 0F7B                       u3260 0409                       u3180 0365  
                     u2701 0FEB                       u2621 0F7A                       u2525 070F  
                     u3261 0408                       u3181 0364                       u3165 0313  
                     u2710 0E96                       u2630 0F9A                       u2550 073A  
                     u3190 037E                       u2711 0E95                       u2631 0F99  
                     u3327 0C3D                       u2551 0739                       u3191 037D  
                     u3095 01C2                       u2800 0EEE                       u2720 0EA1  
                     u2544 071F                       u2480 06C2                       u2560 0CA4  
                     u3337 0CB8                       u2801 0EED                       u2721 0EA0  
                     u2545 071D                       u2481 06C1                       u2465 0689  
                     u2561 0CA3                       u3265 0405                       u2730 0EB2  
                     u2810 0E3B                       u2650 0FAE                       u2570 0CD3  
                     u2490 06C8                       u2474 06A7                       u3274 0426  
                     u2731 0EB1                       u2811 0E3A                       u2651 0FAD  
                     u2571 0CD2                       u2555 0736                       u2491 06C7  
                     u2475 06A5                       u3275 0424                       u2820 0E46  
                     u2900 0D3E                       u3284 044D                       u2821 0E45  
                     u2645 0F9F                       u2485 06BE                       u3285 044B  
                     u2750 0EC4                       u2830 0E51                       u2910 07C7  
                     u2670 0FC9                       u3294 0474                       u2751 0EC3  
                     u2831 0E50                       u2911 07C6                       u2671 0FC8  
                     u3295 0472                       u2920 07DC                       u2745 0EB6  
                     u2921 07DB                       u2665 0FB0                       u2905 0D39  
                     u2585 0CDA                       u2770 0ED5                       u2850 0E63  
                     u2690 0FE7                       u2771 0ED4                       u2851 0E62  
                     u2915 07C3                       u2691 0FE6                       u2675 0FC5  
                     u2595 0CE1                       u2860 0E6D                       u2940 0D9A  
                     u2765 0EC5                       u2861 0E6C                       u2845 0E55  
                     u2925 07D8                       u2685 0FD9                       u2941 0D99  
                     u2790 0EE9                       u2791 0EE8                       u2775 0ED1  
                     u2935 0DB7                       u2960 0CC2                       u2880 0E80  
                     u2961 0CC1                       u2785 0EDD                       u2881 0E7F  
                     u2865 0E69                       u2945 0D96                       u2890 0E85  
                     u2970 0C71                       u2955 0CAB                       u2891 0E84  
                     u2875 0E74                       u2971 0C70                       u2980 0C7E  
                     _RCIF 0065                       u2981 0C7D                       _TMR0 0001  
                     _TXIF 0064               __CFG_WRT$OFF 0000                       _disp 005B  
                     _main 004A                       _time 0072                       map@x 0030  
                     btemp 007E           __end_of_ADC_Read 0CCB              __CFG_BOREN$ON 0000  
              main@umidita 015F                       start 000E            __end_of_GetTime 0DDA  
        ___bmul@multiplier 0023               main@endCiclo 0161    __end_of_UART_Write_Text 0CA5  
                    ??_ISR 0076  __size_of_conteggioVeicoli 00EE                      ??_map 003A  
          __end_of___aldiv 1000                      ?_main 0075            __end_of___awdiv 0EF8  
            __CFG_WDTE$OFF 0000            __end_of___awmod 0E8F            ___awdiv@divisor 0027  
                    _T1CON 0010                      i1l320 0609                      i1l314 05CE  
                    i1l332 0673                      i1l308 0593                      i1l326 0644  
                    i1l290 0C20                      i1l354 0E2B                      i1l291 0C22  
                    i1l288 0C1A            ___awdiv@counter 002C                      _RCREG 001A  
                    _TMR1H 000F                      _TMR1L 000E                      _SPBRG 0099  
                    _PORTD 0008                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087                      _TRISD 0088                      _TRISE 0089  
                    _TXREG 0019              __CFG_PWRTE$ON 0000         __size_of_UART_Init 003A  
       __size_of_UART_Read 0009            __end_of_display 0811                      _count 0070  
                    _unita 005F                      main@i 0165                      main@l 0169  
                    _truck 00AF                      pclath 000A                      status 0003  
                    wtemp0 007E            __initialization 0011               __end_of_main 0586  
       __size_of_GetDigits 006B                     ??_main 003D          SetDefaultTimers@i 002E  
        SetDefaultTimers@l 002C         __size_of_BuildByte 00C8                 _SetDisplay 0C54  
                   _ADCON0 001F                     _ADCON1 009F                     _ADRESH 001E  
                   _ADRESL 009E           ___awdiv@dividend 0029                     i1l2112 0C1A  
                   i1l2120 058C                     i1l2114 0C21                     i1l2130 05B1  
                   i1l2122 0597                     i1l2140 05D2                     i1l2132 05BA  
                   i1l2124 05A0                     i1l2150 05F5                     i1l2142 05DB  
                   i1l2134 05C0                     i1l2126 05A4                     i1l2118 0586  
                   u200_20 0651                     i1l2160 0616                     i1l2152 05FB  
                   i1l2144 05DF                     i1l2128 05AD                     i1l2136 05C2  
                   u200_21 0650                     i1l2170 0636                     i1l2162 061A  
                   i1l2146 05E8                     i1l2154 05FD                     i1l2138 05C7  
                   i1l2180 0655                     i1l2164 0623                     i1l2172 0638  
                   i1l2156 0602                     i1l2148 05EC                     i1l2182 065E  
                   i1l2174 063D                     i1l2166 0627                     i1l2158 060D  
                   i1l2430 0DE7                     i1l2184 0662                     u201_20 065E  
                   i1l2176 0648                     i1l2168 0630                     i1l2440 0E03  
                   i1l2432 0DE9                     i1l2424 0DDA                     u201_21 065D  
                   i1l2186 066B                     i1l2178 0651                     i1l2450 0E12  
                   i1l2434 0DED                     i1l2442 0E04                     i1l2426 0DE0  
                   i1l2188 0671                     i1l2460 0E22                     i1l2452 0E16  
                   i1l2444 0E08                     i1l2436 0DF1                     i1l2428 0DE4  
                   i1l2462 0E23                     i1l2454 0E17                     i1l2446 0E09  
                   i1l2438 0DFF                     u202_20 066B                     i1l2464 0E27  
                   i1l2456 0E1B                     i1l2448 0E0E                     u202_21 066A  
                   i1l2466 0E29                     i1l2458 0E21                     u240_20 0DED  
                   u240_21 0DEC                     u241_20 0DF1                     _INTCON 000B  
                   u241_21 0DF0                     u242_20 0E08                     u242_21 0E07  
                   u243_20 0E16                     u243_21 0E15                     u244_20 0E21  
                   u244_21 0E20                     u182_20 0C20                     u190_20 05DB  
                   u238_20 0DE0                     u182_21 0C1F                     u190_21 05DA  
                   u238_21 0DDF                     u191_20 05E8                     u183_20 058C  
                   u239_20 0DE4                     u191_21 05E7                     u183_21 058B  
                   u239_21 0DE3                     u192_20 05F5                     u184_20 0597  
                   u192_21 05F4                     u184_21 0596                     u193_20 0602  
                   u185_20 05A0                     u193_21 0601                     u185_21 059F  
                   u194_20 060D                     u186_20 05AD                     u194_21 060C  
                   u186_21 05AC                     u195_20 0616                     u187_20 05BA  
                   u195_21 0615                     u187_21 05B9                     u196_20 0623  
                   u188_20 05C7                     u196_21 0622                     u188_21 05C6  
                   u197_20 0630                     u189_20 05D2                     u197_21 062F  
                   u189_21 05D1                     u198_20 063D                     u198_21 063C  
                   u199_20 0648                     u199_21 0647                     _TMR0IF 005A  
                   _TMR1IF 0060                  ??_GetTime 0022               ?_UART_TxChar 0075  
        __end_of_UART_Init 0D61          __end_of_UART_Read 0C23                     ___bmul 0C69  
                ??___aldiv 0028            GetTime@shortInt 0024                     ___wmul 0CCB  
                ??___awdiv 002B                     _decine 005E                  ??___awmod 0024  
         ?_UART_Write_Text 0075           __end_of_init_ADC 0C41                     _cycled 0060  
         ___awdiv@quotient 002E            ___awmod@divisor 0020            ___awmod@counter 0025  
         __end_of_sendByte 0D9B              main@pressione 0160                  ?_ADC_Read 0020  
                   saved_w 007E    __end_of__initialization 0046          __end_of_GetDigits 0F63  
__size_of_SetDefaultTimers 00A1        ___bmul@multiplicand 0020             __pcstackCOMMON 0075  
        __end_of_BuildByte 073C               __pidataBANK1 07DD           _conteggioVeicoli 0586  
               ??_ADC_Read 0022     SetDefaultTimers@giallo 0024                ?_SetDisplay 0020  
            GetDigits@Time 0030       _dataFromGatewayIndex 0059       _timerReadFromGateway 0058  
               __pbssBANK0 004D                 __pbssBANK1 00A0                 __pbssBANK2 0110  
               __pbssBANK3 0190                 __pmaintext 004A                    ?___bmul 0020  
                  ?___wmul 0020              sendByte@byte0 0039              sendByte@byte1 0034  
               __pintentry 0004                 _colorIndex 0057                 __stringtab 0800  
                ?_init_ADC 0075                    _GetTime 0D9B            BuildByte@valore 0021  
          BuildByte@txByte 0025                  ?_sendByte 0034                 _n_semafori 0055  
     __size_of_UART_TxChar 000B                    ___aldiv 0F63            __size_of___bmul 0017  
                  ___awdiv 0E8F                    ___awmod 0E34        __size_of_SetDisplay 0015  
          __size_of___wmul 0027                    __ptext1 0D61                    __ptext2 0C80  
                  __ptext3 0C23                    __ptext4 0674                    __ptext5 0CF2  
                  __ptext6 0CCB                    __ptext7 0C2E                    __ptext8 0C69  
                  __ptext9 0D27             main@semaforoId 015C                    _comando 0073  
                  _display 0806               __size_of_ISR 005A               __size_of_map 0035  
         ___awmod@dividend 0022           ___aldiv@dividend 0024       BuildByte@sommaColumn 002B  
                  clrloop0 0C13       end_of_initialization 0046                 ??_init_ADC 0020  
           main@lux_select 0164                 ??_sendByte 0036           _SetDefaultTimers 073C  
                _RCSTAbits 0018           ___aldiv@quotient 002B                 _motorcycle 0051  
                _UART_Init 0D27                  _UART_Read 0C1A                  _PORTAbits 0005  
                _PORTBbits 0006               SetDisplay@d1 0023               SetDisplay@d2 0020  
             SetDisplay@d3 0021                  _TRISCbits 0087          __size_of_ADC_Read 0026  
 __end_of_conteggioVeicoli 0674                 map@out_max 0038                 map@out_min 0036  
                _TXSTAbits 0098                  _GetDigits 0EF8             __end_of___bmul 0C80  
           __end_of___wmul 0CF2                 ?_UART_Init 002F                 ?_UART_Read 0075  
                _BuildByte 0674          BuildByte@sommaRow 002A   __size_of_UART_Write_Text 0025  
      start_initialization 0011                __end_of_ISR 0E34               ??_SetDisplay 0023  
              __end_of_map 0D27                 ?_GetDigits 0030                   ??___bmul 0021  
           ADC_Read@canale 0023                   ??___wmul 0024                 init_fetch0 0C41  
              __pdataBANK1 00CF         __end_of_SetDisplay 0C69                 ?_BuildByte 0020  
              __pbssCOMMON 0070                  ___latbits 0002              __pcstackBANK0 0020  
            __pcstackBANK2 0158                   ?_GetTime 0020      SetDefaultTimers@verde 0022  
    SetDefaultTimers@rosso 0020          __size_of_init_ADC 0013                  _centinaia 005D  
        __size_of_sendByte 003A                   ?___aldiv 0020                   ?___awdiv 0027  
                 ?___awmod 0020                ??_UART_Init 0031                ??_UART_Read 0075  
           BuildByte@i_342 0032                  __pstrings 0800             BuildByte@y_343 002E  
           sendByte@valore 0035             sendByte@txByte 003A             BuildByte@byte0 0024  
           BuildByte@byte1 0020   __end_of_SetDefaultTimers 07DD                   _ADC_Read 0CA5  
                _count_lux 0074                  _countdown 005A              UART_TxChar@ch 0020  
        ??_UART_Write_Text 0021            ___aldiv@divisor 0020          interrupt_function 0004  
          ___aldiv@counter 0029             ___wmul@product 0024                  clear_ram0 0C12  
                 _PIE1bits 008C              ??_UART_TxChar 0020                ??_GetDigits 0032  
                 _GO_nDONE 00FA          UART_Init@baudrate 002F                ??_BuildByte 0022  
                map@in_max 0034                  map@in_min 0032                __stringbase 0805  
                main@i_445 016B                  main@i_446 016D                  main@i_447 0167  
        ___wmul@multiplier 0020                  main@index 0158               GetTime@index 0020  
        ?_conteggioVeicoli 0075               _secondPassed 0061         ??_conteggioVeicoli 0075  
         __size_of_GetTime 003F                   _Semafori 00CF                _readGateway 0062  
         __size_of___aldiv 009D        __end_of_UART_TxChar 0C2E           __size_of___awdiv 0069  
         __size_of___awmod 005B         __end_of__stringtab 0806                  sendByte@i 003B  
                 __ptext10 0F63                   __ptext11 0C54                   __ptext20 0C1A  
                 __ptext12 073C                   __ptext13 0D9B                   __ptext14 0EF8  
                 __ptext15 0E34                   __ptext16 0E8F                   __ptext17 0CA5  
                 __ptext18 0DDA                   __ptext19 0586                   _init_ADC 0C2E  
      UART_Write_Text@text 0022              __size_of_main 053C            _dataFromGateway 00A0  
                 _old_disp 005C                   _sendByte 0D61                   main@temp 015E  
                 main@time 0162                GetTime@time 0025                 _INTCONbits 000B  
                 init_ram0 0C45                   intlevel1 0000            _readGatewayDone 0063  
                stringcode 0800                _UART_TxChar 0C23            _UART_Write_Text 0C80  
               _OPTION_REG 0081            SetDisplay@value 0022                   stringdir 0800  
                 stringtab 0800          ?_SetDefaultTimers 0020               ___aldiv@sign 002A  
       ??_SetDefaultTimers 0026                 BuildByte@i 0030                 BuildByte@y 002C  
         UART_Write_Text@i 0023  
