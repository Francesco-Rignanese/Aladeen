

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Jun 21 09:59:02 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  07F9                     __pidataBANK0:	
   202                           
   203                           ;initializer for _n_semafori
   204  07F9  340F               	retlw	15
   205                           
   206                           	psect	idataBANK1
   207  0B94                     __pidataBANK1:	
   208                           
   209                           ;initializer for _Semafori
   210  0B94  34BB               	retlw	low (_s0| 0)
   211  0B95  3400               	retlw	high (_s0| 0)
   212  0B96  34AF               	retlw	low (_s1| 0)
   213  0B97  3400               	retlw	high (_s1| 0)
   214  0B98  34E4               	retlw	low (_s2| (0+256))
   215  0B99  3401               	retlw	high (_s2| (0+256))
   216  0B9A  34D8               	retlw	low (_s3| (0+256))
   217  0B9B  3401               	retlw	high (_s3| (0+256))
   218  0B9C  34CC               	retlw	low (_s4| (0+256))
   219  0B9D  3401               	retlw	high (_s4| (0+256))
   220  0B9E  34C0               	retlw	low (_s5| (0+256))
   221  0B9F  3401               	retlw	high (_s5| (0+256))
   222  0BA0  34B4               	retlw	low (_s6| (0+256))
   223  0BA1  3401               	retlw	high (_s6| (0+256))
   224  0BA2  34A8               	retlw	low (_s7| (0+256))
   225  0BA3  3401               	retlw	high (_s7| (0+256))
   226  0BA4  349C               	retlw	low (_s8| (0+256))
   227  0BA5  3401               	retlw	high (_s8| (0+256))
   228  0BA6  3490               	retlw	low (_s9| (0+256))
   229  0BA7  3401               	retlw	high (_s9| (0+256))
   230  0BA8  344C               	retlw	low (_s10| (0+256))
   231  0BA9  3401               	retlw	high (_s10| (0+256))
   232  0BAA  3440               	retlw	low (_s11| (0+256))
   233  0BAB  3401               	retlw	high (_s11| (0+256))
   234  0BAC  3434               	retlw	low (_s12| (0+256))
   235  0BAD  3401               	retlw	high (_s12| (0+256))
   236  0BAE  3428               	retlw	low (_s13| (0+256))
   237  0BAF  3401               	retlw	high (_s13| (0+256))
   238  0BB0  341C               	retlw	low (_s14| (0+256))
   239  0BB1  3401               	retlw	high (_s14| (0+256))
   240  0BB2  3410               	retlw	low (_s15| (0+256))
   241  0BB3  3401               	retlw	high (_s15| (0+256))
   242                           
   243                           	psect	strings
   244  0800                     __pstrings:	
   245  0800                     stringtab:	
   246  0800                     __stringtab:	
   247  0800                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250  0800                     stringdir:	
   251  0800  3008               	movlw	high stringdir
   252  0801  008A               	movwf	10
   253  0802  0804               	movf	4,w
   254  0803  0A84               	incf	4,f
   255  0804  0782               	addwf	2,f
   256  0805                     __stringbase:	
   257  0805  3400               	retlw	0
   258  0806                     __end_of__stringtab:	
   259  0806                     _display:	
   260  0806  343F               	retlw	63
   261  0807  3406               	retlw	6
   262  0808  345B               	retlw	91
   263  0809  344F               	retlw	79
   264  080A  3466               	retlw	102
   265  080B  346D               	retlw	109
   266  080C  347D               	retlw	125
   267  080D  3407               	retlw	7
   268  080E  347F               	retlw	127
   269  080F  346F               	retlw	111
   270  0810  3400               	retlw	0
   271  0811                     __end_of_display:	
   272  0006                     _PORTBbits	set	6
   273  0008                     _PORTD	set	8
   274  0005                     _PORTAbits	set	5
   275  001A                     _RCREG	set	26
   276  0019                     _TXREG	set	25
   277  000B                     _INTCONbits	set	11
   278  0018                     _RCSTAbits	set	24
   279  001E                     _ADRESH	set	30
   280  001F                     _ADCON0	set	31
   281  000E                     _TMR1L	set	14
   282  000F                     _TMR1H	set	15
   283  0010                     _T1CON	set	16
   284  0001                     _TMR0	set	1
   285  000B                     _INTCON	set	11
   286  0060                     _TMR1IF	set	96
   287  005A                     _TMR0IF	set	90
   288  0065                     _RCIF	set	101
   289  0064                     _TXIF	set	100
   290  00FA                     _GO_nDONE	set	250
   291  008C                     _PIE1bits	set	140
   292  0099                     _SPBRG	set	153
   293  0098                     _TXSTAbits	set	152
   294  0087                     _TRISCbits	set	135
   295  009E                     _ADRESL	set	158
   296  009F                     _ADCON1	set	159
   297  0085                     _TRISA	set	133
   298  0081                     _OPTION_REG	set	129
   299  0089                     _TRISE	set	137
   300  0088                     _TRISD	set	136
   301  0087                     _TRISC	set	135
   302  0086                     _TRISB	set	134
   303                           
   304                           ; #config settings
   305  0000                     
   306                           	psect	cinit
   307  0011                     start_initialization:	
   308  0011                     __initialization:	
   309                           
   310                           ; Initialize objects allocated to BANK1
   311  0011  1383               	bcf	3,7	;select IRP bank0
   312  0012  30E7               	movlw	low (__pdataBANK1+32)
   313  0013  00FD               	movwf	btemp+-1
   314  0014  300B               	movlw	high __pidataBANK1
   315  0015  00FE               	movwf	btemp
   316  0016  3094               	movlw	low __pidataBANK1
   317  0017  00FF               	movwf	btemp+1
   318  0018  30C7               	movlw	low __pdataBANK1
   319  0019  0084               	movwf	4
   320  001A  120A  158A  2359  120A  118A  	fcall	init_ram0
   321                           
   322                           ; Initialize objects allocated to BANK0
   323  001F  120A  118A  27F9  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   324  0024  00E4               	movwf	__pdataBANK0& (0+127)
   325                           
   326                           ; Clear objects allocated to BANK3
   327  0025  1783               	bsf	3,7	;select IRP bank2
   328  0026  3090               	movlw	low __pbssBANK3
   329  0027  0084               	movwf	4
   330  0028  30F0               	movlw	low (__pbssBANK3+96)
   331  0029  120A  158A  2326  120A  118A  	fcall	clear_ram0
   332                           
   333                           ; Clear objects allocated to BANK2
   334  002E  3010               	movlw	low __pbssBANK2
   335  002F  0084               	movwf	4
   336  0030  3058               	movlw	low (__pbssBANK2+72)
   337  0031  120A  158A  2326  120A  118A  	fcall	clear_ram0
   338                           
   339                           ; Clear objects allocated to BANK1
   340  0036  1383               	bcf	3,7	;select IRP bank0
   341  0037  30A0               	movlw	low __pbssBANK1
   342  0038  0084               	movwf	4
   343  0039  30C7               	movlw	low (__pbssBANK1+39)
   344  003A  120A  158A  2326  120A  118A  	fcall	clear_ram0
   345                           
   346                           ; Clear objects allocated to BANK0
   347  003F  304C               	movlw	low __pbssBANK0
   348  0040  0084               	movwf	4
   349  0041  3064               	movlw	low (__pbssBANK0+24)
   350  0042  120A  158A  2326  120A  118A  	fcall	clear_ram0
   351                           
   352                           ; Clear objects allocated to COMMON
   353  0047  01F0               	clrf	__pbssCOMMON& (0+127)
   354  0048  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   355  0049  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   356  004A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   357  004B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   358  004C                     end_of_initialization:	
   359                           ;End of C runtime variable initialization code
   360                           
   361  004C                     __end_of__initialization:	
   362  004C  0183               	clrf	3
   363  004D  120A  118A  2850   	ljmp	_main	;jump to C main() function
   364                           
   365                           	psect	bssCOMMON
   366  0070                     __pbssCOMMON:	
   367  0070                     _count:	
   368  0070                     	ds	2
   369  0072                     _time:	
   370  0072                     	ds	1
   371  0073                     _comando:	
   372  0073                     	ds	1
   373  0074                     _count_lux:	
   374  0074                     	ds	1
   375                           
   376                           	psect	bssBANK0
   377  004C                     __pbssBANK0:	
   378  004C                     _truck:	
   379  004C                     	ds	4
   380  0050                     _car:	
   381  0050                     	ds	4
   382  0054                     _motorcycle:	
   383  0054                     	ds	4
   384  0058                     _timerReadFromGateway:	
   385  0058                     	ds	1
   386  0059                     _dataFromGatewayIndex:	
   387  0059                     	ds	1
   388  005A                     _countdown:	
   389  005A                     	ds	1
   390  005B                     _disp:	
   391  005B                     	ds	1
   392  005C                     _old_disp:	
   393  005C                     	ds	1
   394  005D                     _centinaia:	
   395  005D                     	ds	1
   396  005E                     _decine:	
   397  005E                     	ds	1
   398  005F                     _unita:	
   399  005F                     	ds	1
   400  0060                     _cycled:	
   401  0060                     	ds	1
   402  0061                     _secondPassed:	
   403  0061                     	ds	1
   404  0062                     _readGateway:	
   405  0062                     	ds	1
   406  0063                     _readGatewayDone:	
   407  0063                     	ds	1
   408                           
   409                           	psect	dataBANK0
   410  0064                     __pdataBANK0:	
   411  0064                     _n_semafori:	
   412  0064                     	ds	1
   413                           
   414                           	psect	bssBANK1
   415  00A0                     __pbssBANK1:	
   416  00A0                     _dataFromGateway:	
   417  00A0                     	ds	15
   418  00AF                     _s1:	
   419  00AF                     	ds	12
   420  00BB                     _s0:	
   421  00BB                     	ds	12
   422                           
   423                           	psect	dataBANK1
   424  00C7                     __pdataBANK1:	
   425  00C7                     _Semafori:	
   426  00C7                     	ds	32
   427                           
   428                           	psect	bssBANK3
   429  0190                     __pbssBANK3:	
   430  0190                     _s9:	
   431  0190                     	ds	12
   432  019C                     _s8:	
   433  019C                     	ds	12
   434  01A8                     _s7:	
   435  01A8                     	ds	12
   436  01B4                     _s6:	
   437  01B4                     	ds	12
   438  01C0                     _s5:	
   439  01C0                     	ds	12
   440  01CC                     _s4:	
   441  01CC                     	ds	12
   442  01D8                     _s3:	
   443  01D8                     	ds	12
   444  01E4                     _s2:	
   445  01E4                     	ds	12
   446                           
   447                           	psect	bssBANK2
   448  0110                     __pbssBANK2:	
   449  0110                     _s15:	
   450  0110                     	ds	12
   451  011C                     _s14:	
   452  011C                     	ds	12
   453  0128                     _s13:	
   454  0128                     	ds	12
   455  0134                     _s12:	
   456  0134                     	ds	12
   457  0140                     _s11:	
   458  0140                     	ds	12
   459  014C                     _s10:	
   460  014C                     	ds	12
   461                           
   462                           	psect	inittext
   463  0B55                     init_fetch0:	
   464                           ;	Called with low address in FSR and high address in W
   465                           
   466  0B55  087E               	movf	btemp,w
   467  0B56  008A               	movwf	10
   468  0B57  087F               	movf	btemp+1,w
   469  0B58  0082               	movwf	2
   470  0B59                     init_ram0:	
   471                           ;Called with:
   472                           ;	high address of idata address in btemp 
   473                           ;	low address of idata address in btemp+1 
   474                           ;	low address of data in FSR
   475                           ;	high address + 1 of data in btemp-1
   476                           
   477  0B59  120A  158A  2355  120A  158A  	fcall	init_fetch0
   478  0B5E  0080               	movwf	0
   479  0B5F  0A84               	incf	4,f
   480  0B60  0804               	movf	4,w
   481  0B61  067D               	xorwf	btemp+-1,w
   482  0B62  1903               	btfsc	3,2
   483  0B63  3400               	retlw	0
   484  0B64  0AFF               	incf	btemp+1,f
   485  0B65  1903               	btfsc	3,2
   486  0B66  0AFE               	incf	btemp,f
   487  0B67  2B59               	goto	init_ram0
   488                           
   489                           	psect	clrtext
   490  0B26                     clear_ram0:	
   491                           ;	Called with FSR containing the base address, and
   492                           ;	W with the last address+1
   493                           
   494  0B26  0064               	clrwdt	;clear the watchdog before getting into this loop
   495  0B27                     clrloop0:	
   496  0B27  0180               	clrf	0	;clear RAM location pointed to by FSR
   497  0B28  0A84               	incf	4,f	;increment pointer
   498  0B29  0604               	xorwf	4,w	;XOR with final address
   499  0B2A  1903               	btfsc	3,2	;have we reached the end yet?
   500  0B2B  3400               	retlw	0	;all done for this memory range, return
   501  0B2C  0604               	xorwf	4,w	;XOR again to restore value
   502  0B2D  2B27               	goto	clrloop0	;do the next byte
   503                           
   504                           	psect	cstackBANK2
   505  0158                     __pcstackBANK2:	
   506  0158                     main@semaforoId:	
   507                           
   508                           ; 1 bytes @ 0x0
   509  0158                     	ds	1
   510  0159                     main@colorId:	
   511                           
   512                           ; 1 bytes @ 0x1
   513  0159                     	ds	1
   514  015A                     main@temp:	
   515                           
   516                           ; 1 bytes @ 0x2
   517  015A                     	ds	1
   518  015B                     main@umidita:	
   519                           
   520                           ; 1 bytes @ 0x3
   521  015B                     	ds	1
   522  015C                     main@pressione:	
   523                           
   524                           ; 1 bytes @ 0x4
   525  015C                     	ds	1
   526  015D                     main@endCiclo:	
   527                           
   528                           ; 1 bytes @ 0x5
   529  015D                     	ds	1
   530  015E                     main@tmp:	
   531                           
   532                           ; 1 bytes @ 0x6
   533  015E                     	ds	1
   534  015F                     main@lux_select:	
   535                           
   536                           ; 1 bytes @ 0x7
   537  015F                     	ds	1
   538  0160                     main@index:	
   539                           
   540                           ; 1 bytes @ 0x8
   541  0160                     	ds	1
   542  0161                     main@time:	
   543                           
   544                           ; 2 bytes @ 0x9
   545  0161                     	ds	2
   546  0163                     main@i_438:	
   547                           
   548                           ; 1 bytes @ 0xB
   549  0163                     	ds	1
   550  0164                     main@i_440:	
   551                           
   552                           ; 1 bytes @ 0xC
   553  0164                     	ds	1
   554  0165                     main@i_443:	
   555                           
   556                           ; 1 bytes @ 0xD
   557  0165                     	ds	1
   558  0166                     main@i:	
   559                           
   560                           ; 2 bytes @ 0xE
   561  0166                     	ds	2
   562  0168                     main@i_437:	
   563                           
   564                           ; 2 bytes @ 0x10
   565  0168                     	ds	2
   566  016A                     main@l:	
   567                           
   568                           ; 1 bytes @ 0x12
   569  016A                     	ds	1
   570  016B                     main@i_450:	
   571                           
   572                           ; 1 bytes @ 0x13
   573  016B                     	ds	1
   574  016C                     main@i_436:	
   575                           
   576                           ; 2 bytes @ 0x14
   577  016C                     	ds	2
   578                           
   579                           	psect	cstackCOMMON
   580  0075                     __pcstackCOMMON:	
   581  0075                     ?_init_ADC:	
   582  0075                     ?_bitParita:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0075                     ?_main:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0075                     ?_UART_TxChar:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0075                     ?_UART_Read:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0075                     ??_UART_Read:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0075                     ?_conteggioVeicoli:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0075                     ??_conteggioVeicoli:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0075                     ?_ISR:	
   604                           ; 1 bytes @ 0x0
   605                           
   606                           
   607                           ; 1 bytes @ 0x0
   608  0075                     	ds	1
   609  0076                     ??_ISR:	
   610                           
   611                           ; 1 bytes @ 0x1
   612  0076                     	ds	4
   613                           
   614                           	psect	cstackBANK0
   615  0020                     __pcstackBANK0:	
   616  0020                     ??_init_ADC:	
   617  0020                     ?_SetDefaultTimers:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0020                     ?_SetDisplay:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0020                     ?_BuildByte:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0020                     ?_bitChange:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0020                     ??_UART_TxChar:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0020                     ?___bmul:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0020                     ?_ADC_Read:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0020                     ?_GetTime:	
   639                           ; 2 bytes @ 0x0
   640                           
   641  0020                     ?___wmul:	
   642                           ; 2 bytes @ 0x0
   643                           
   644  0020                     ?___awmod:	
   645                           ; 2 bytes @ 0x0
   646                           
   647  0020                     ?___aldiv:	
   648                           ; 2 bytes @ 0x0
   649                           
   650  0020                     bitChange@n:	
   651                           ; 4 bytes @ 0x0
   652                           
   653  0020                     BuildByte@byte1:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0020                     UART_TxChar@ch:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0020                     SetDisplay@d2:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0020                     ___bmul@multiplicand:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0020                     SetDefaultTimers@rosso:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0020                     ___wmul@multiplier:	
   669                           ; 2 bytes @ 0x0
   670                           
   671  0020                     ___awmod@divisor:	
   672                           ; 2 bytes @ 0x0
   673                           
   674  0020                     ___aldiv@divisor:	
   675                           ; 2 bytes @ 0x0
   676                           
   677                           
   678                           ; 4 bytes @ 0x0
   679  0020                     	ds	1
   680  0021                     ??_bitChange:	
   681  0021                     ??___bmul:	
   682                           ; 1 bytes @ 0x1
   683                           
   684  0021                     BuildByte@valore:	
   685                           ; 1 bytes @ 0x1
   686                           
   687  0021                     SetDisplay@d3:	
   688                           ; 1 bytes @ 0x1
   689                           
   690                           
   691                           ; 1 bytes @ 0x1
   692  0021                     	ds	1
   693  0022                     ??_ADC_Read:	
   694  0022                     ??_GetTime:	
   695                           ; 1 bytes @ 0x2
   696                           
   697  0022                     ??_BuildByte:	
   698                           ; 1 bytes @ 0x2
   699                           
   700  0022                     SetDisplay@value:	
   701                           ; 1 bytes @ 0x2
   702                           
   703  0022                     ___bmul@product:	
   704                           ; 1 bytes @ 0x2
   705                           
   706  0022                     SetDefaultTimers@verde:	
   707                           ; 1 bytes @ 0x2
   708                           
   709  0022                     ___wmul@multiplicand:	
   710                           ; 2 bytes @ 0x2
   711                           
   712  0022                     ___awmod@dividend:	
   713                           ; 2 bytes @ 0x2
   714                           
   715                           
   716                           ; 2 bytes @ 0x2
   717  0022                     	ds	1
   718  0023                     ??_SetDisplay:	
   719  0023                     bitChange@dato:	
   720                           ; 1 bytes @ 0x3
   721                           
   722  0023                     ADC_Read@canale:	
   723                           ; 1 bytes @ 0x3
   724                           
   725  0023                     SetDisplay@d1:	
   726                           ; 1 bytes @ 0x3
   727                           
   728  0023                     ___bmul@multiplier:	
   729                           ; 1 bytes @ 0x3
   730                           
   731                           
   732                           ; 1 bytes @ 0x3
   733  0023                     	ds	1
   734  0024                     ??_bitParita:	
   735  0024                     ??___wmul:	
   736                           ; 1 bytes @ 0x4
   737                           
   738  0024                     ??___awmod:	
   739                           ; 1 bytes @ 0x4
   740                           
   741  0024                     BuildByte@byte0:	
   742                           ; 1 bytes @ 0x4
   743                           
   744  0024                     GetTime@index:	
   745                           ; 1 bytes @ 0x4
   746                           
   747  0024                     SetDefaultTimers@giallo:	
   748                           ; 1 bytes @ 0x4
   749                           
   750  0024                     ___wmul@product:	
   751                           ; 2 bytes @ 0x4
   752                           
   753  0024                     ___aldiv@dividend:	
   754                           ; 2 bytes @ 0x4
   755                           
   756                           
   757                           ; 4 bytes @ 0x4
   758  0024                     	ds	1
   759  0025                     GetTime@shortInt:	
   760  0025                     ___awmod@counter:	
   761                           ; 1 bytes @ 0x5
   762                           
   763  0025                     BuildByte@txByte:	
   764                           ; 1 bytes @ 0x5
   765                           
   766                           
   767                           ; 5 bytes @ 0x5
   768  0025                     	ds	1
   769  0026                     ??_SetDefaultTimers:	
   770  0026                     ___awmod@sign:	
   771                           ; 1 bytes @ 0x6
   772                           
   773  0026                     GetTime@time:	
   774                           ; 1 bytes @ 0x6
   775                           
   776                           
   777                           ; 2 bytes @ 0x6
   778  0026                     	ds	1
   779  0027                     ?___awdiv:	
   780  0027                     ___awdiv@divisor:	
   781                           ; 2 bytes @ 0x7
   782                           
   783                           
   784                           ; 2 bytes @ 0x7
   785  0027                     	ds	1
   786  0028                     ??___aldiv:	
   787  0028                     bitParita@sommaRow:	
   788                           ; 1 bytes @ 0x8
   789                           
   790                           
   791                           ; 1 bytes @ 0x8
   792  0028                     	ds	1
   793  0029                     bitParita@sommaColumn:	
   794  0029                     ___aldiv@counter:	
   795                           ; 1 bytes @ 0x9
   796                           
   797  0029                     ___awdiv@dividend:	
   798                           ; 1 bytes @ 0x9
   799                           
   800                           
   801                           ; 2 bytes @ 0x9
   802  0029                     	ds	1
   803  002A                     bitParita@errorColumn:	
   804  002A                     BuildByte@sommaRow:	
   805                           ; 1 bytes @ 0xA
   806                           
   807  002A                     ___aldiv@sign:	
   808                           ; 1 bytes @ 0xA
   809                           
   810                           
   811                           ; 1 bytes @ 0xA
   812  002A                     	ds	1
   813  002B                     ??___awdiv:	
   814  002B                     bitParita@error:	
   815                           ; 1 bytes @ 0xB
   816                           
   817  002B                     BuildByte@sommaColumn:	
   818                           ; 1 bytes @ 0xB
   819                           
   820  002B                     ___aldiv@quotient:	
   821                           ; 1 bytes @ 0xB
   822                           
   823                           
   824                           ; 4 bytes @ 0xB
   825  002B                     	ds	1
   826  002C                     bitParita@errorRow:	
   827  002C                     SetDefaultTimers@l:	
   828                           ; 1 bytes @ 0xC
   829                           
   830  002C                     ___awdiv@counter:	
   831                           ; 1 bytes @ 0xC
   832                           
   833  002C                     BuildByte@y:	
   834                           ; 1 bytes @ 0xC
   835                           
   836                           
   837                           ; 2 bytes @ 0xC
   838  002C                     	ds	1
   839  002D                     SetDefaultTimers@i:	
   840  002D                     ___awdiv@sign:	
   841                           ; 1 bytes @ 0xD
   842                           
   843  002D                     bitParita@y:	
   844                           ; 1 bytes @ 0xD
   845                           
   846                           
   847                           ; 2 bytes @ 0xD
   848  002D                     	ds	1
   849  002E                     BuildByte@y_343:	
   850  002E                     ___awdiv@quotient:	
   851                           ; 2 bytes @ 0xE
   852                           
   853                           
   854                           ; 2 bytes @ 0xE
   855  002E                     	ds	1
   856  002F                     ?_UART_Init:	
   857  002F                     bitParita@y_331:	
   858                           ; 1 bytes @ 0xF
   859                           
   860  002F                     UART_Init@baudrate:	
   861                           ; 2 bytes @ 0xF
   862                           
   863                           
   864                           ; 2 bytes @ 0xF
   865  002F                     	ds	1
   866  0030                     ?_GetDigits:	
   867  0030                     ?_map:	
   868                           ; 1 bytes @ 0x10
   869                           
   870  0030                     map@x:	
   871                           ; 2 bytes @ 0x10
   872                           
   873  0030                     BuildByte@i:	
   874                           ; 2 bytes @ 0x10
   875                           
   876  0030                     GetDigits@Time:	
   877                           ; 2 bytes @ 0x10
   878                           
   879                           
   880                           ; 2 bytes @ 0x10
   881  0030                     	ds	1
   882  0031                     ??_UART_Init:	
   883  0031                     bitParita@rx:	
   884                           ; 1 bytes @ 0x11
   885                           
   886                           
   887                           ; 1 bytes @ 0x11
   888  0031                     	ds	1
   889  0032                     ??_GetDigits:	
   890  0032                     map@in_min:	
   891                           ; 1 bytes @ 0x12
   892                           
   893  0032                     bitParita@i:	
   894                           ; 2 bytes @ 0x12
   895                           
   896  0032                     BuildByte@i_342:	
   897                           ; 2 bytes @ 0x12
   898                           
   899                           
   900                           ; 2 bytes @ 0x12
   901  0032                     	ds	2
   902  0034                     ?_sendByte:	
   903  0034                     sendByte@byte1:	
   904                           ; 1 bytes @ 0x14
   905                           
   906  0034                     map@in_max:	
   907                           ; 1 bytes @ 0x14
   908                           
   909  0034                     bitParita@i_330:	
   910                           ; 2 bytes @ 0x14
   911                           
   912                           
   913                           ; 2 bytes @ 0x14
   914  0034                     	ds	1
   915  0035                     sendByte@valore:	
   916  0035                     _GetDigits$1152:	
   917                           ; 1 bytes @ 0x15
   918                           
   919                           
   920                           ; 2 bytes @ 0x15
   921  0035                     	ds	1
   922  0036                     ??_sendByte:	
   923  0036                     map@out_min:	
   924                           ; 1 bytes @ 0x16
   925                           
   926                           
   927                           ; 2 bytes @ 0x16
   928  0036                     	ds	2
   929  0038                     map@out_max:	
   930                           
   931                           ; 2 bytes @ 0x18
   932  0038                     	ds	1
   933  0039                     sendByte@byte0:	
   934                           
   935                           ; 1 bytes @ 0x19
   936  0039                     	ds	1
   937  003A                     ??_map:	
   938  003A                     sendByte@txByte:	
   939                           ; 1 bytes @ 0x1A
   940                           
   941                           
   942                           ; 1 bytes @ 0x1A
   943  003A                     	ds	1
   944  003B                     sendByte@i:	
   945                           
   946                           ; 1 bytes @ 0x1B
   947  003B                     	ds	1
   948  003C                     ??_main:	
   949                           
   950                           ; 1 bytes @ 0x1C
   951  003C                     	ds	16
   952                           
   953                           	psect	maintext
   954  0050                     __pmaintext:	
   955 ;;
   956 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   957 ;;
   958 ;; *************** function _main *****************
   959 ;; Defined at:
   960 ;;		line 129 in file "main.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;		None
   963 ;; Auto vars:     Size  Location     Type
   964 ;;  i               1   19[BANK2 ] unsigned char 
   965 ;;  index           1    8[BANK2 ] unsigned char 
   966 ;;  colorId         1    1[BANK2 ] unsigned char 
   967 ;;  semaforoId      1    0[BANK2 ] unsigned char 
   968 ;;  i               1   13[BANK2 ] unsigned char 
   969 ;;  i               1   12[BANK2 ] unsigned char 
   970 ;;  i               1   11[BANK2 ] unsigned char 
   971 ;;  i               2   16[BANK2 ] int 
   972 ;;  i               2   20[BANK2 ] int 
   973 ;;  l               1   18[BANK2 ] unsigned char 
   974 ;;  tmp             1    6[BANK2 ] unsigned char 
   975 ;;  i               2   14[BANK2 ] int 
   976 ;;  time            2    9[BANK2 ] int 
   977 ;;  lux_select      1    7[BANK2 ] unsigned char 
   978 ;;  endCiclo        1    5[BANK2 ] struct .
   979 ;;  pressione       1    4[BANK2 ] unsigned char 
   980 ;;  umidita         1    3[BANK2 ] unsigned char 
   981 ;;  temp            1    2[BANK2 ] unsigned char 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   986 ;; Tracked objects:
   987 ;;		On entry : B00/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   991 ;;      Params:         0       0       0       0       0
   992 ;;      Locals:         0       0       0       0      22
   993 ;;      Temps:          0      16       0       0       0
   994 ;;      Totals:         0      16       0       0      22
   995 ;;Total ram usage:       38 bytes
   996 ;; Hardware stack levels required when called:    4
   997 ;; This function calls:
   998 ;;		_ADC_Read
   999 ;;		_GetDigits
  1000 ;;		_GetTime
  1001 ;;		_SetDefaultTimers
  1002 ;;		_SetDisplay
  1003 ;;		_UART_Init
  1004 ;;		___awmod
  1005 ;;		___bmul
  1006 ;;		_bitParita
  1007 ;;		_init_ADC
  1008 ;;		_map
  1009 ;;		_sendByte
  1010 ;; This function is called by:
  1011 ;;		Startup code after reset
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           
  1016                           ;psect for function _main
  1017  0050                     _main:	
  1018  0050                     l3102:	
  1019                           ;incstack = 0
  1020                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1021                           
  1022                           
  1023                           ;main.c: 131:     TRISB = 0x1F;
  1024  0050  301F               	movlw	31
  1025  0051  1683               	bsf	3,5	;RP0=1, select bank1
  1026  0052  1303               	bcf	3,6	;RP1=0, select bank1
  1027  0053  0086               	movwf	6	;volatile
  1028                           
  1029                           ;main.c: 132:     TRISC = 0x80;
  1030  0054  3080               	movlw	128
  1031  0055  0087               	movwf	7	;volatile
  1032  0056                     l3104:	
  1033                           
  1034                           ;main.c: 133:     TRISD = 0x00;
  1035  0056  0188               	clrf	8	;volatile
  1036  0057                     l3106:	
  1037                           
  1038                           ;main.c: 134:     TRISE = 0x01;
  1039  0057  3001               	movlw	1
  1040  0058  0089               	movwf	9	;volatile
  1041  0059                     l3108:	
  1042                           
  1043                           ;main.c: 135:     INTCON = 0xE0;
  1044  0059  30E0               	movlw	224
  1045  005A  008B               	movwf	11	;volatile
  1046  005B                     l3110:	
  1047                           
  1048                           ;main.c: 136:     OPTION_REG = 0x04;
  1049  005B  3004               	movlw	4
  1050  005C  0081               	movwf	1	;volatile
  1051  005D                     l3112:	
  1052                           
  1053                           ;main.c: 137:     TMR0 = 6;
  1054  005D  3006               	movlw	6
  1055  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1056  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1057  0060  0081               	movwf	1	;volatile
  1058  0061                     l3114:	
  1059                           
  1060                           ;main.c: 138:     T1CON = 0x31;
  1061  0061  3031               	movlw	49
  1062  0062  0090               	movwf	16	;volatile
  1063  0063                     l3116:	
  1064                           
  1065                           ;main.c: 144:     init_ADC();
  1066  0063  120A  158A  2342  120A  118A  	fcall	_init_ADC
  1067  0068                     l3118:	
  1068                           
  1069                           ;main.c: 145:     UART_Init(9600);
  1070  0068  3080               	movlw	128
  1071  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1072  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1073  006B  00AF               	movwf	UART_Init@baudrate
  1074  006C  3025               	movlw	37
  1075  006D  00B0               	movwf	UART_Init@baudrate+1
  1076  006E  120A  158A  2498  120A  118A  	fcall	_UART_Init
  1077  0073                     l3120:	
  1078                           
  1079                           ;main.c: 146:     SetDefaultTimers(2, 2, 2);
  1080  0073  3002               	movlw	2
  1081  0074  1283               	bcf	3,5	;RP0=0, select bank0
  1082  0075  1303               	bcf	3,6	;RP1=0, select bank0
  1083  0076  00A0               	movwf	SetDefaultTimers@rosso
  1084  0077  3000               	movlw	0
  1085  0078  00A1               	movwf	SetDefaultTimers@rosso+1
  1086  0079  3002               	movlw	2
  1087  007A  00A2               	movwf	SetDefaultTimers@verde
  1088  007B  3000               	movlw	0
  1089  007C  00A3               	movwf	SetDefaultTimers@verde+1
  1090  007D  3002               	movlw	2
  1091  007E  00A4               	movwf	SetDefaultTimers@giallo
  1092  007F  3000               	movlw	0
  1093  0080  00A5               	movwf	SetDefaultTimers@giallo+1
  1094  0081  120A  118A  276F  120A  118A  	fcall	_SetDefaultTimers
  1095  0086                     l3122:	
  1096                           
  1097                           ;main.c: 148:     TMR1H = 60;
  1098  0086  303C               	movlw	60
  1099  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1100  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1101  0089  008F               	movwf	15	;volatile
  1102  008A                     l3124:	
  1103                           
  1104                           ;main.c: 149:     TMR1L = 176;
  1105  008A  30B0               	movlw	176
  1106  008B  008E               	movwf	14	;volatile
  1107  008C                     l3126:	
  1108                           
  1109                           ;main.c: 151:     int time;;main.c: 152:     unsigned char lux_select = 0;
  1110  008C  1283               	bcf	3,5	;RP0=0, select bank2
  1111  008D  1703               	bsf	3,6	;RP1=1, select bank2
  1112  008E  01DF               	clrf	main@lux_select^(0+256)
  1113  008F                     l3128:	
  1114                           
  1115                           ;main.c: 153:     disp = 0;
  1116  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1117  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1118  0091  01DB               	clrf	_disp
  1119  0092                     l3130:	
  1120  0092                     l3132:	
  1121  0092                     l3134:	
  1122  0092                     l3136:	
  1123                           
  1124                           ;main.c: 157:     Bit endCiclo;;main.c: 158:     endCiclo.Bit = 1;
  1125  0092  1283               	bcf	3,5	;RP0=0, select bank2
  1126  0093  1703               	bsf	3,6	;RP1=1, select bank2
  1127  0094  145D               	bsf	main@endCiclo^(0+256),0
  1128  0095                     l3138:	
  1129                           
  1130                           ;main.c: 160:     for(int i=0; i<4;i++)
  1131  0095  01E6               	clrf	main@i^(0+256)
  1132  0096  01E7               	clrf	(main@i+1)^(0+256)
  1133  0097                     l3144:	
  1134                           
  1135                           ;main.c: 161:     {;main.c: 162:         motorcycle[i]=15;
  1136  0097  300F               	movlw	15
  1137  0098  1283               	bcf	3,5	;RP0=0, select bank0
  1138  0099  1303               	bcf	3,6	;RP1=0, select bank0
  1139  009A  00BC               	movwf	??_main
  1140  009B  1283               	bcf	3,5	;RP0=0, select bank2
  1141  009C  1703               	bsf	3,6	;RP1=1, select bank2
  1142  009D  0866               	movf	main@i^(0+256),w
  1143  009E  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1144  009F  0084               	movwf	4
  1145  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1146  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  1147  00A2  083C               	movf	??_main,w
  1148  00A3  1383               	bcf	3,7	;select IRP bank0
  1149  00A4  0080               	movwf	0
  1150                           
  1151                           ;main.c: 163:         car[i]=63;
  1152  00A5  303F               	movlw	63
  1153  00A6  00BC               	movwf	??_main
  1154  00A7  1283               	bcf	3,5	;RP0=0, select bank2
  1155  00A8  1703               	bsf	3,6	;RP1=1, select bank2
  1156  00A9  0866               	movf	main@i^(0+256),w
  1157  00AA  3E50               	addlw	(low (_car| 0))& (0+255)
  1158  00AB  0084               	movwf	4
  1159  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1160  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1161  00AE  083C               	movf	??_main,w
  1162  00AF  0080               	movwf	0
  1163                           
  1164                           ;main.c: 164:         truck[i]=255;
  1165  00B0  30FF               	movlw	255
  1166  00B1  00BC               	movwf	??_main
  1167  00B2  1283               	bcf	3,5	;RP0=0, select bank2
  1168  00B3  1703               	bsf	3,6	;RP1=1, select bank2
  1169  00B4  0866               	movf	main@i^(0+256),w
  1170  00B5  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1171  00B6  0084               	movwf	4
  1172  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1173  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1174  00B9  083C               	movf	??_main,w
  1175  00BA  0080               	movwf	0
  1176  00BB                     l3146:	
  1177                           
  1178                           ;main.c: 165:     }
  1179  00BB  3001               	movlw	1
  1180  00BC  1283               	bcf	3,5	;RP0=0, select bank2
  1181  00BD  1703               	bsf	3,6	;RP1=1, select bank2
  1182  00BE  07E6               	addwf	main@i^(0+256),f
  1183  00BF  1803               	skipnc
  1184  00C0  0AE7               	incf	(main@i+1)^(0+256),f
  1185  00C1  3000               	movlw	0
  1186  00C2  07E7               	addwf	(main@i+1)^(0+256),f
  1187  00C3                     l3148:	
  1188  00C3  0867               	movf	(main@i+1)^(0+256),w
  1189  00C4  3A80               	xorlw	128
  1190  00C5  00FF               	movwf	btemp+1
  1191  00C6  3080               	movlw	128
  1192  00C7  027F               	subwf	btemp+1,w
  1193  00C8  1D03               	skipz
  1194  00C9  28CC               	goto	u3295
  1195  00CA  3004               	movlw	4
  1196  00CB  0266               	subwf	main@i^(0+256),w
  1197  00CC                     u3295:	
  1198  00CC  1C03               	skipc
  1199  00CD  28CF               	goto	u3291
  1200  00CE  28D0               	goto	u3290
  1201  00CF                     u3291:	
  1202  00CF  2897               	goto	l3144
  1203  00D0                     u3290:	
  1204  00D0                     l213:	
  1205                           ;main.c: 166:     while (1)
  1206                           
  1207                           
  1208                           ;main.c: 167:     {;main.c: 169:         if (readGateway.Bit)
  1209  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  1210  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  1211  00D2  1C62               	btfss	_readGateway,0
  1212  00D3  28D5               	goto	u3301
  1213  00D4  28D6               	goto	u3300
  1214  00D5                     u3301:	
  1215  00D5  2AB3               	goto	l214
  1216  00D6                     u3300:	
  1217  00D6  2A9E               	goto	l3218
  1218  00D7                     l216:	
  1219                           ;main.c: 172:             {;main.c: 173:             case 0x08:
  1220                           
  1221                           
  1222                           ;main.c: 174:                 readGatewayDone.Bit = 1;
  1223  00D7  1463               	bsf	_readGatewayDone,0
  1224                           
  1225                           ;main.c: 175:                 readGateway.Bit = 0;
  1226  00D8  1062               	bcf	_readGateway,0
  1227  00D9                     l3152:	
  1228                           
  1229                           ;main.c: 177:                 for (int i = 0; i < 4; i++)
  1230  00D9  1283               	bcf	3,5	;RP0=0, select bank2
  1231  00DA  1703               	bsf	3,6	;RP1=1, select bank2
  1232  00DB  01EC               	clrf	main@i_436^(0+256)
  1233  00DC  01ED               	clrf	(main@i_436+1)^(0+256)
  1234  00DD                     l3154:	
  1235  00DD  086D               	movf	(main@i_436+1)^(0+256),w
  1236  00DE  3A80               	xorlw	128
  1237  00DF  00FF               	movwf	btemp+1
  1238  00E0  3080               	movlw	128
  1239  00E1  027F               	subwf	btemp+1,w
  1240  00E2  1D03               	skipz
  1241  00E3  28E6               	goto	u3315
  1242  00E4  3004               	movlw	4
  1243  00E5  026C               	subwf	main@i_436^(0+256),w
  1244  00E6                     u3315:	
  1245  00E6  1C03               	skipc
  1246  00E7  28E9               	goto	u3311
  1247  00E8  28EA               	goto	u3310
  1248  00E9                     u3311:	
  1249  00E9  28EB               	goto	l3158
  1250  00EA                     u3310:	
  1251  00EA  296A               	goto	l3164
  1252  00EB                     l3158:	
  1253                           
  1254                           ;main.c: 178:                 {;main.c: 179:                     sendByte((0x01 << (i + 
      +                          1))|0x01, 0x01, motorcycle[i]);
  1255  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1256  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1257  00ED  01B4               	clrf	sendByte@byte1
  1258  00EE  0AB4               	incf	sendByte@byte1,f
  1259  00EF  1283               	bcf	3,5	;RP0=0, select bank2
  1260  00F0  1703               	bsf	3,6	;RP1=1, select bank2
  1261  00F1  086C               	movf	main@i_436^(0+256),w
  1262  00F2  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1263  00F3  0084               	movwf	4
  1264  00F4  1383               	bcf	3,7	;select IRP bank0
  1265  00F5  0800               	movf	0,w
  1266  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  1267  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  1268  00F8  00BC               	movwf	??_main
  1269  00F9  083C               	movf	??_main,w
  1270  00FA  00B5               	movwf	sendByte@valore
  1271  00FB  3001               	movlw	1
  1272  00FC  00BD               	movwf	??_main+1
  1273  00FD  1283               	bcf	3,5	;RP0=0, select bank2
  1274  00FE  1703               	bsf	3,6	;RP1=1, select bank2
  1275  00FF  086C               	movf	main@i_436^(0+256),w
  1276  0100  3E01               	addlw	1
  1277  0101  3E01               	addlw	1
  1278  0102  1283               	bcf	3,5	;RP0=0, select bank0
  1279  0103  1303               	bcf	3,6	;RP1=0, select bank0
  1280  0104  2907               	goto	u3324
  1281  0105                     u3325:	
  1282  0105  1003               	clrc
  1283  0106  0DBD               	rlf	??_main+1,f
  1284  0107                     u3324:	
  1285  0107  3EFF               	addlw	-1
  1286  0108  1D03               	skipz
  1287  0109  2905               	goto	u3325
  1288  010A  083D               	movf	??_main+1,w
  1289  010B  3801               	iorlw	1
  1290  010C  120A  158A  2432  120A  118A  	fcall	_sendByte
  1291                           
  1292                           ;main.c: 180:                     sendByte((0x01 << (i + 1))|0x01, 0x10, car[i]);
  1293  0111  3010               	movlw	16
  1294  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1295  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1296  0114  00BC               	movwf	??_main
  1297  0115  083C               	movf	??_main,w
  1298  0116  00B4               	movwf	sendByte@byte1
  1299  0117  1283               	bcf	3,5	;RP0=0, select bank2
  1300  0118  1703               	bsf	3,6	;RP1=1, select bank2
  1301  0119  086C               	movf	main@i_436^(0+256),w
  1302  011A  3E50               	addlw	(low (_car| 0))& (0+255)
  1303  011B  0084               	movwf	4
  1304  011C  1383               	bcf	3,7	;select IRP bank0
  1305  011D  0800               	movf	0,w
  1306  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1307  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1308  0120  00BD               	movwf	??_main+1
  1309  0121  083D               	movf	??_main+1,w
  1310  0122  00B5               	movwf	sendByte@valore
  1311  0123  3001               	movlw	1
  1312  0124  00BE               	movwf	??_main+2
  1313  0125  1283               	bcf	3,5	;RP0=0, select bank2
  1314  0126  1703               	bsf	3,6	;RP1=1, select bank2
  1315  0127  086C               	movf	main@i_436^(0+256),w
  1316  0128  3E01               	addlw	1
  1317  0129  3E01               	addlw	1
  1318  012A  1283               	bcf	3,5	;RP0=0, select bank0
  1319  012B  1303               	bcf	3,6	;RP1=0, select bank0
  1320  012C  292F               	goto	u3334
  1321  012D                     u3335:	
  1322  012D  1003               	clrc
  1323  012E  0DBE               	rlf	??_main+2,f
  1324  012F                     u3334:	
  1325  012F  3EFF               	addlw	-1
  1326  0130  1D03               	skipz
  1327  0131  292D               	goto	u3335
  1328  0132  083E               	movf	??_main+2,w
  1329  0133  3801               	iorlw	1
  1330  0134  120A  158A  2432  120A  118A  	fcall	_sendByte
  1331                           
  1332                           ;main.c: 181:                     sendByte((0x01 << (i + 1))|0x01, 0x11, truck[i]);
  1333  0139  3011               	movlw	17
  1334  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1335  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1336  013C  00BC               	movwf	??_main
  1337  013D  083C               	movf	??_main,w
  1338  013E  00B4               	movwf	sendByte@byte1
  1339  013F  1283               	bcf	3,5	;RP0=0, select bank2
  1340  0140  1703               	bsf	3,6	;RP1=1, select bank2
  1341  0141  086C               	movf	main@i_436^(0+256),w
  1342  0142  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1343  0143  0084               	movwf	4
  1344  0144  1383               	bcf	3,7	;select IRP bank0
  1345  0145  0800               	movf	0,w
  1346  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1347  0147  1303               	bcf	3,6	;RP1=0, select bank0
  1348  0148  00BD               	movwf	??_main+1
  1349  0149  083D               	movf	??_main+1,w
  1350  014A  00B5               	movwf	sendByte@valore
  1351  014B  3001               	movlw	1
  1352  014C  00BE               	movwf	??_main+2
  1353  014D  1283               	bcf	3,5	;RP0=0, select bank2
  1354  014E  1703               	bsf	3,6	;RP1=1, select bank2
  1355  014F  086C               	movf	main@i_436^(0+256),w
  1356  0150  3E01               	addlw	1
  1357  0151  3E01               	addlw	1
  1358  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1359  0153  1303               	bcf	3,6	;RP1=0, select bank0
  1360  0154  2957               	goto	u3344
  1361  0155                     u3345:	
  1362  0155  1003               	clrc
  1363  0156  0DBE               	rlf	??_main+2,f
  1364  0157                     u3344:	
  1365  0157  3EFF               	addlw	-1
  1366  0158  1D03               	skipz
  1367  0159  2955               	goto	u3345
  1368  015A  083E               	movf	??_main+2,w
  1369  015B  3801               	iorlw	1
  1370  015C  120A  158A  2432  120A  118A  	fcall	_sendByte
  1371  0161                     l3160:	
  1372                           
  1373                           ;main.c: 182:                 }
  1374  0161  3001               	movlw	1
  1375  0162  1283               	bcf	3,5	;RP0=0, select bank2
  1376  0163  1703               	bsf	3,6	;RP1=1, select bank2
  1377  0164  07EC               	addwf	main@i_436^(0+256),f
  1378  0165  1803               	skipnc
  1379  0166  0AED               	incf	(main@i_436+1)^(0+256),f
  1380  0167  3000               	movlw	0
  1381  0168  07ED               	addwf	(main@i_436+1)^(0+256),f
  1382  0169  28DD               	goto	l3154
  1383  016A                     l3164:	
  1384                           
  1385                           ;main.c: 184:                 for (int i = 0; i < 4; i++)
  1386  016A  1283               	bcf	3,5	;RP0=0, select bank2
  1387  016B  1703               	bsf	3,6	;RP1=1, select bank2
  1388  016C  01E8               	clrf	main@i_437^(0+256)
  1389  016D  01E9               	clrf	(main@i_437+1)^(0+256)
  1390  016E                     l3166:	
  1391  016E  0869               	movf	(main@i_437+1)^(0+256),w
  1392  016F  3A80               	xorlw	128
  1393  0170  00FF               	movwf	btemp+1
  1394  0171  3080               	movlw	128
  1395  0172  027F               	subwf	btemp+1,w
  1396  0173  1D03               	skipz
  1397  0174  2977               	goto	u3355
  1398  0175  3004               	movlw	4
  1399  0176  0268               	subwf	main@i_437^(0+256),w
  1400  0177                     u3355:	
  1401  0177  1C03               	skipc
  1402  0178  297A               	goto	u3351
  1403  0179  297B               	goto	u3350
  1404  017A                     u3351:	
  1405  017A  297C               	goto	l3170
  1406  017B                     u3350:	
  1407  017B  2992               	goto	l3176
  1408  017C                     l3170:	
  1409                           
  1410                           ;main.c: 185:                 {;main.c: 186:                     motorcycle[i] = 0;
  1411  017C  1283               	bcf	3,5	;RP0=0, select bank2
  1412  017D  1703               	bsf	3,6	;RP1=1, select bank2
  1413  017E  0868               	movf	main@i_437^(0+256),w
  1414  017F  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1415  0180  0084               	movwf	4
  1416  0181  1383               	bcf	3,7	;select IRP bank0
  1417  0182  0180               	clrf	0
  1418                           
  1419                           ;main.c: 187:                     car[i] = 0;
  1420  0183  0868               	movf	main@i_437^(0+256),w
  1421  0184  3E50               	addlw	(low (_car| 0))& (0+255)
  1422  0185  0084               	movwf	4
  1423  0186  0180               	clrf	0
  1424                           
  1425                           ;main.c: 188:                     truck[i] = 0;
  1426  0187  0868               	movf	main@i_437^(0+256),w
  1427  0188  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1428  0189  0084               	movwf	4
  1429  018A  0180               	clrf	0
  1430  018B                     l3172:	
  1431                           
  1432                           ;main.c: 189:                 }
  1433  018B  3001               	movlw	1
  1434  018C  07E8               	addwf	main@i_437^(0+256),f
  1435  018D  1803               	skipnc
  1436  018E  0AE9               	incf	(main@i_437+1)^(0+256),f
  1437  018F  3000               	movlw	0
  1438  0190  07E9               	addwf	(main@i_437+1)^(0+256),f
  1439  0191  296E               	goto	l3166
  1440  0192                     l3176:	
  1441                           
  1442                           ;main.c: 191:                 for (unsigned char i = 0; i < 5; i++)
  1443  0192  1283               	bcf	3,5	;RP0=0, select bank2
  1444  0193  1703               	bsf	3,6	;RP1=1, select bank2
  1445  0194  01E3               	clrf	main@i_438^(0+256)
  1446  0195                     l3178:	
  1447  0195  3005               	movlw	5
  1448  0196  0263               	subwf	main@i_438^(0+256),w
  1449  0197  1C03               	skipc
  1450  0198  299A               	goto	u3361
  1451  0199  299B               	goto	u3360
  1452  019A                     u3361:	
  1453  019A  299C               	goto	l3182
  1454  019B                     u3360:	
  1455  019B  2AB3               	goto	l214
  1456  019C                     l3182:	
  1457                           
  1458                           ;main.c: 192:                 {;main.c: 193:                     dataFromGateway[i] = 0;
  1459  019C  0863               	movf	main@i_438^(0+256),w
  1460  019D  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1461  019E  0084               	movwf	4
  1462  019F  1383               	bcf	3,7	;select IRP bank1
  1463  01A0  0180               	clrf	0
  1464  01A1                     l3184:	
  1465                           
  1466                           ;main.c: 194:                 }
  1467  01A1  3001               	movlw	1
  1468  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1469  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1470  01A4  00BC               	movwf	??_main
  1471  01A5  083C               	movf	??_main,w
  1472  01A6  1283               	bcf	3,5	;RP0=0, select bank2
  1473  01A7  1703               	bsf	3,6	;RP1=1, select bank2
  1474  01A8  07E3               	addwf	main@i_438^(0+256),f
  1475  01A9  2995               	goto	l3178
  1476  01AA                     l224:	
  1477                           ;main.c: 196:             case 0x0A:
  1478                           
  1479                           
  1480                           ;main.c: 197:                 readGatewayDone.Bit = 1;
  1481  01AA  1463               	bsf	_readGatewayDone,0
  1482                           
  1483                           ;main.c: 198:                 readGateway.Bit = 0;
  1484  01AB  1062               	bcf	_readGateway,0
  1485  01AC                     l3188:	
  1486                           
  1487                           ;main.c: 200:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1488  01AC  3000               	movlw	0
  1489  01AD  120A  158A  23B4  120A  118A  	fcall	_ADC_Read
  1490  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1491  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1492  01B4  0820               	movf	?_ADC_Read,w
  1493  01B5  00BC               	movwf	??_main
  1494  01B6  0821               	movf	?_ADC_Read+1,w
  1495  01B7  00BD               	movwf	??_main+1
  1496  01B8  0D3D               	rlf	??_main+1,w
  1497  01B9  0CBD               	rrf	??_main+1,f
  1498  01BA  0CBC               	rrf	??_main,f
  1499  01BB  0D3D               	rlf	??_main+1,w
  1500  01BC  0CBD               	rrf	??_main+1,f
  1501  01BD  0CBC               	rrf	??_main,f
  1502  01BE  083C               	movf	??_main,w
  1503  01BF  00B0               	movwf	map@x
  1504  01C0  083D               	movf	??_main+1,w
  1505  01C1  00B1               	movwf	map@x+1
  1506  01C2  3000               	movlw	0
  1507  01C3  00B2               	movwf	map@in_min
  1508  01C4  00B3               	movwf	map@in_min+1
  1509  01C5  30FF               	movlw	255
  1510  01C6  00B4               	movwf	map@in_max
  1511  01C7  3000               	movlw	0
  1512  01C8  00B5               	movwf	map@in_max+1
  1513  01C9  30EC               	movlw	236
  1514  01CA  00B6               	movwf	map@out_min
  1515  01CB  30FF               	movlw	255
  1516  01CC  00B7               	movwf	map@out_min+1
  1517  01CD  303C               	movlw	60
  1518  01CE  00B8               	movwf	map@out_max
  1519  01CF  3000               	movlw	0
  1520  01D0  00B9               	movwf	map@out_max+1
  1521  01D1  120A  158A  2463  120A  118A  	fcall	_map
  1522  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1523  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1524  01D8  0830               	movf	?_map,w
  1525  01D9  00BE               	movwf	??_main+2
  1526  01DA  083E               	movf	??_main+2,w
  1527  01DB  1283               	bcf	3,5	;RP0=0, select bank2
  1528  01DC  1703               	bsf	3,6	;RP1=1, select bank2
  1529  01DD  00DA               	movwf	main@temp^(0+256)
  1530                           
  1531                           ;main.c: 201:                 umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  1532  01DE  3001               	movlw	1
  1533  01DF  120A  158A  23B4  120A  118A  	fcall	_ADC_Read
  1534  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  1535  01E5  1303               	bcf	3,6	;RP1=0, select bank0
  1536  01E6  0820               	movf	?_ADC_Read,w
  1537  01E7  00BC               	movwf	??_main
  1538  01E8  0821               	movf	?_ADC_Read+1,w
  1539  01E9  00BD               	movwf	??_main+1
  1540  01EA  0D3D               	rlf	??_main+1,w
  1541  01EB  0CBD               	rrf	??_main+1,f
  1542  01EC  0CBC               	rrf	??_main,f
  1543  01ED  0D3D               	rlf	??_main+1,w
  1544  01EE  0CBD               	rrf	??_main+1,f
  1545  01EF  0CBC               	rrf	??_main,f
  1546  01F0  083C               	movf	??_main,w
  1547  01F1  00B0               	movwf	map@x
  1548  01F2  083D               	movf	??_main+1,w
  1549  01F3  00B1               	movwf	map@x+1
  1550  01F4  3000               	movlw	0
  1551  01F5  00B2               	movwf	map@in_min
  1552  01F6  00B3               	movwf	map@in_min+1
  1553  01F7  30FF               	movlw	255
  1554  01F8  00B4               	movwf	map@in_max
  1555  01F9  3000               	movlw	0
  1556  01FA  00B5               	movwf	map@in_max+1
  1557  01FB  3000               	movlw	0
  1558  01FC  00B6               	movwf	map@out_min
  1559  01FD  00B7               	movwf	map@out_min+1
  1560  01FE  3064               	movlw	100
  1561  01FF  00B8               	movwf	map@out_max
  1562  0200  3000               	movlw	0
  1563  0201  00B9               	movwf	map@out_max+1
  1564  0202  120A  158A  2463  120A  118A  	fcall	_map
  1565  0207  1283               	bcf	3,5	;RP0=0, select bank0
  1566  0208  1303               	bcf	3,6	;RP1=0, select bank0
  1567  0209  0830               	movf	?_map,w
  1568  020A  00BE               	movwf	??_main+2
  1569  020B  083E               	movf	??_main+2,w
  1570  020C  1283               	bcf	3,5	;RP0=0, select bank2
  1571  020D  1703               	bsf	3,6	;RP1=1, select bank2
  1572  020E  00DB               	movwf	main@umidita^(0+256)
  1573                           
  1574                           ;main.c: 202:                 pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  1575  020F  3005               	movlw	5
  1576  0210  120A  158A  23B4  120A  118A  	fcall	_ADC_Read
  1577  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1578  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1579  0217  0820               	movf	?_ADC_Read,w
  1580  0218  00BC               	movwf	??_main
  1581  0219  0821               	movf	?_ADC_Read+1,w
  1582  021A  00BD               	movwf	??_main+1
  1583  021B  0D3D               	rlf	??_main+1,w
  1584  021C  0CBD               	rrf	??_main+1,f
  1585  021D  0CBC               	rrf	??_main,f
  1586  021E  0D3D               	rlf	??_main+1,w
  1587  021F  0CBD               	rrf	??_main+1,f
  1588  0220  0CBC               	rrf	??_main,f
  1589  0221  083C               	movf	??_main,w
  1590  0222  00B0               	movwf	map@x
  1591  0223  083D               	movf	??_main+1,w
  1592  0224  00B1               	movwf	map@x+1
  1593  0225  3000               	movlw	0
  1594  0226  00B2               	movwf	map@in_min
  1595  0227  00B3               	movwf	map@in_min+1
  1596  0228  30FF               	movlw	255
  1597  0229  00B4               	movwf	map@in_max
  1598  022A  3000               	movlw	0
  1599  022B  00B5               	movwf	map@in_max+1
  1600  022C  3000               	movlw	0
  1601  022D  00B6               	movwf	map@out_min
  1602  022E  00B7               	movwf	map@out_min+1
  1603  022F  3064               	movlw	100
  1604  0230  00B8               	movwf	map@out_max
  1605  0231  3000               	movlw	0
  1606  0232  00B9               	movwf	map@out_max+1
  1607  0233  120A  158A  2463  120A  118A  	fcall	_map
  1608  0238  1283               	bcf	3,5	;RP0=0, select bank0
  1609  0239  1303               	bcf	3,6	;RP1=0, select bank0
  1610  023A  0830               	movf	?_map,w
  1611  023B  00BE               	movwf	??_main+2
  1612  023C  083E               	movf	??_main+2,w
  1613  023D  1283               	bcf	3,5	;RP0=0, select bank2
  1614  023E  1703               	bsf	3,6	;RP1=1, select bank2
  1615  023F  00DC               	movwf	main@pressione^(0+256)
  1616  0240                     l3190:	
  1617                           
  1618                           ;main.c: 203:                 sendByte(0x02, 0x00, temp);
  1619  0240  1283               	bcf	3,5	;RP0=0, select bank0
  1620  0241  1303               	bcf	3,6	;RP1=0, select bank0
  1621  0242  01B4               	clrf	sendByte@byte1
  1622  0243  1283               	bcf	3,5	;RP0=0, select bank2
  1623  0244  1703               	bsf	3,6	;RP1=1, select bank2
  1624  0245  085A               	movf	main@temp^(0+256),w
  1625  0246  1283               	bcf	3,5	;RP0=0, select bank0
  1626  0247  1303               	bcf	3,6	;RP1=0, select bank0
  1627  0248  00BC               	movwf	??_main
  1628  0249  083C               	movf	??_main,w
  1629  024A  00B5               	movwf	sendByte@valore
  1630  024B  3002               	movlw	2
  1631  024C  120A  158A  2432  120A  118A  	fcall	_sendByte
  1632  0251                     l3192:	
  1633                           
  1634                           ;main.c: 204:                 sendByte(0x04, 0x00, umidita);
  1635  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1636  0252  1303               	bcf	3,6	;RP1=0, select bank0
  1637  0253  01B4               	clrf	sendByte@byte1
  1638  0254  1283               	bcf	3,5	;RP0=0, select bank2
  1639  0255  1703               	bsf	3,6	;RP1=1, select bank2
  1640  0256  085B               	movf	main@umidita^(0+256),w
  1641  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1642  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1643  0259  00BC               	movwf	??_main
  1644  025A  083C               	movf	??_main,w
  1645  025B  00B5               	movwf	sendByte@valore
  1646  025C  3004               	movlw	4
  1647  025D  120A  158A  2432  120A  118A  	fcall	_sendByte
  1648  0262                     l3194:	
  1649                           
  1650                           ;main.c: 205:                 sendByte(0x06, 0x00, pressione);
  1651  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1652  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1653  0264  01B4               	clrf	sendByte@byte1
  1654  0265  1283               	bcf	3,5	;RP0=0, select bank2
  1655  0266  1703               	bsf	3,6	;RP1=1, select bank2
  1656  0267  085C               	movf	main@pressione^(0+256),w
  1657  0268  1283               	bcf	3,5	;RP0=0, select bank0
  1658  0269  1303               	bcf	3,6	;RP1=0, select bank0
  1659  026A  00BC               	movwf	??_main
  1660  026B  083C               	movf	??_main,w
  1661  026C  00B5               	movwf	sendByte@valore
  1662  026D  3006               	movlw	6
  1663  026E  120A  158A  2432  120A  118A  	fcall	_sendByte
  1664  0273                     l3196:	
  1665                           
  1666                           ;main.c: 207:                 for (unsigned char i = 0; i < 5; i++)
  1667  0273  1283               	bcf	3,5	;RP0=0, select bank2
  1668  0274  1703               	bsf	3,6	;RP1=1, select bank2
  1669  0275  01E4               	clrf	main@i_440^(0+256)
  1670  0276                     l3198:	
  1671  0276  3005               	movlw	5
  1672  0277  0264               	subwf	main@i_440^(0+256),w
  1673  0278  1C03               	skipc
  1674  0279  2A7B               	goto	u3371
  1675  027A  2A7C               	goto	u3370
  1676  027B                     u3371:	
  1677  027B  2A7D               	goto	l3202
  1678  027C                     u3370:	
  1679  027C  2AB3               	goto	l214
  1680  027D                     l3202:	
  1681                           
  1682                           ;main.c: 208:                 {;main.c: 209:                     dataFromGateway[i] = 0;
  1683  027D  0864               	movf	main@i_440^(0+256),w
  1684  027E  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1685  027F  0084               	movwf	4
  1686  0280  1383               	bcf	3,7	;select IRP bank1
  1687  0281  0180               	clrf	0
  1688  0282                     l3204:	
  1689                           
  1690                           ;main.c: 210:                 }
  1691  0282  3001               	movlw	1
  1692  0283  1283               	bcf	3,5	;RP0=0, select bank0
  1693  0284  1303               	bcf	3,6	;RP1=0, select bank0
  1694  0285  00BC               	movwf	??_main
  1695  0286  083C               	movf	??_main,w
  1696  0287  1283               	bcf	3,5	;RP0=0, select bank2
  1697  0288  1703               	bsf	3,6	;RP1=1, select bank2
  1698  0289  07E4               	addwf	main@i_440^(0+256),f
  1699  028A  2A76               	goto	l3198
  1700  028B                     l3208:	
  1701                           
  1702                           ;main.c: 214:                 if (timerReadFromGateway >= 4)
  1703  028B  3004               	movlw	4
  1704  028C  0258               	subwf	_timerReadFromGateway,w
  1705  028D  1C03               	skipc
  1706  028E  2A90               	goto	u3381
  1707  028F  2A91               	goto	u3380
  1708  0290                     u3381:	
  1709  0290  2A94               	goto	l3212
  1710  0291                     u3380:	
  1711  0291                     l3210:	
  1712                           
  1713                           ;main.c: 215:                 {;main.c: 216:                     readGatewayDone.Bit = 1
      +                          ;
  1714  0291  1463               	bsf	_readGatewayDone,0
  1715                           
  1716                           ;main.c: 217:                     readGatewayDone.Timeout = 1;
  1717  0292  14E3               	bsf	_readGatewayDone,1
  1718                           
  1719                           ;main.c: 218:                     readGateway.Bit = 0;
  1720  0293  1062               	bcf	_readGateway,0
  1721  0294                     l3212:	
  1722                           
  1723                           ;main.c: 221:                 if (dataFromGatewayIndex >= 15)
  1724  0294  300F               	movlw	15
  1725  0295  0259               	subwf	_dataFromGatewayIndex,w
  1726  0296  1C03               	skipc
  1727  0297  2A99               	goto	u3391
  1728  0298  2A9A               	goto	u3390
  1729  0299                     u3391:	
  1730  0299  2AB3               	goto	l214
  1731  029A                     u3390:	
  1732  029A                     l3214:	
  1733                           
  1734                           ;main.c: 222:                 {;main.c: 223:                     readGatewayDone.Bit = 1
      +                          ;
  1735  029A  1463               	bsf	_readGatewayDone,0
  1736                           
  1737                           ;main.c: 224:                     readGatewayDone.Timeout = 0;
  1738  029B  10E3               	bcf	_readGatewayDone,1
  1739                           
  1740                           ;main.c: 225:                     readGateway.Bit = 0;
  1741  029C  1062               	bcf	_readGateway,0
  1742  029D  2AB3               	goto	l214
  1743  029E                     l3218:	
  1744  029E  1683               	bsf	3,5	;RP0=1, select bank1
  1745  029F  1303               	bcf	3,6	;RP1=0, select bank1
  1746  02A0  0820               	movf	_dataFromGateway^(0+128),w
  1747  02A1  397F               	andlw	127
  1748  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  1749  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  1750  02A4  00BC               	movwf	??_main
  1751  02A5  01BD               	clrf	??_main+1
  1752                           
  1753                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1754                           ; Switch size 1, requested type "simple"
  1755                           ; Number of cases is 1, Range of values is 0 to 0
  1756                           ; switch strategies available:
  1757                           ; Name         Instructions Cycles
  1758                           ; simple_byte            4     3 (average)
  1759                           ; direct_byte           11     8 (fixed)
  1760                           ; jumptable            260     6 (fixed)
  1761                           ;	Chosen strategy is simple_byte
  1762  02A6  083D               	movf	??_main+1,w
  1763  02A7  3A00               	xorlw	0	; case 0
  1764  02A8  1903               	skipnz
  1765  02A9  2AAB               	goto	l3438
  1766  02AA  2A8B               	goto	l3208
  1767  02AB                     l3438:	
  1768                           
  1769                           ; Switch size 1, requested type "simple"
  1770                           ; Number of cases is 2, Range of values is 8 to 10
  1771                           ; switch strategies available:
  1772                           ; Name         Instructions Cycles
  1773                           ; simple_byte            7     4 (average)
  1774                           ; direct_byte           20    11 (fixed)
  1775                           ; jumptable            263     9 (fixed)
  1776                           ;	Chosen strategy is simple_byte
  1777  02AB  083C               	movf	??_main,w
  1778  02AC  3A08               	xorlw	8	; case 8
  1779  02AD  1903               	skipnz
  1780  02AE  28D7               	goto	l216
  1781  02AF  3A02               	xorlw	2	; case 10
  1782  02B0  1903               	skipnz
  1783  02B1  29AA               	goto	l224
  1784  02B2  2A8B               	goto	l3208
  1785  02B3                     l214:	
  1786                           ;main.c: 229:         }
  1787                           
  1788                           
  1789                           ;main.c: 232:         if (readGatewayDone.Bit)
  1790  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  1791  02B4  1C63               	btfss	_readGatewayDone,0
  1792  02B5  2AB7               	goto	u3401
  1793  02B6  2AB8               	goto	u3400
  1794  02B7                     u3401:	
  1795  02B7  2B4F               	goto	l230
  1796  02B8                     u3400:	
  1797  02B8                     l3220:	
  1798                           
  1799                           ;main.c: 233:         {;main.c: 235:             readGateway.Bit = 0;
  1800  02B8  1062               	bcf	_readGateway,0
  1801  02B9                     l3222:	
  1802                           
  1803                           ;main.c: 236:             dataFromGatewayIndex = 0;
  1804  02B9  01D9               	clrf	_dataFromGatewayIndex
  1805  02BA                     l3224:	
  1806                           
  1807                           ;main.c: 237:             readGatewayDone.Bit = 0;
  1808  02BA  1063               	bcf	_readGatewayDone,0
  1809                           
  1810                           ;main.c: 238:             timerReadFromGateway = 0;
  1811  02BB  01D8               	clrf	_timerReadFromGateway
  1812  02BC                     l3226:	
  1813                           
  1814                           ;main.c: 241:             if (readGatewayDone.Timeout)
  1815  02BC  1CE3               	btfss	_readGatewayDone,1
  1816  02BD  2ABF               	goto	u3411
  1817  02BE  2AC0               	goto	u3410
  1818  02BF                     u3411:	
  1819  02BF  2AC2               	goto	l3230
  1820  02C0                     u3410:	
  1821  02C0                     l3228:	
  1822                           
  1823                           ;main.c: 242:             {;main.c: 243:                 readGatewayDone.Timeout = 0;
  1824  02C0  10E3               	bcf	_readGatewayDone,1
  1825                           
  1826                           ;main.c: 244:             }
  1827  02C1  2B4F               	goto	l230
  1828  02C2                     l3230:	
  1829                           
  1830                           ;main.c: 247:             {;main.c: 248:                 bitParita(dataFromGateway);
  1831  02C2  30A0               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1832  02C3  120A  118A  26A6  120A  118A  	fcall	_bitParita
  1833  02C8                     l3232:	
  1834                           
  1835                           ;main.c: 249:                 unsigned char tmp;;main.c: 250:                 for (unsig
      +                          ned char i = 0; i < 3; i++)
  1836  02C8  1283               	bcf	3,5	;RP0=0, select bank2
  1837  02C9  1703               	bsf	3,6	;RP1=1, select bank2
  1838  02CA  01E5               	clrf	main@i_443^(0+256)
  1839  02CB                     l3234:	
  1840  02CB  3003               	movlw	3
  1841  02CC  0265               	subwf	main@i_443^(0+256),w
  1842  02CD  1C03               	skipc
  1843  02CE  2AD0               	goto	u3421
  1844  02CF  2AD1               	goto	u3420
  1845  02D0                     u3421:	
  1846  02D0  2AD2               	goto	l3238
  1847  02D1                     u3420:	
  1848  02D1  2B4F               	goto	l230
  1849  02D2                     l3238:	
  1850                           
  1851                           ;main.c: 251:                 {;main.c: 252:                     unsigned char index = i
      +                           * 5;
  1852  02D2  3005               	movlw	5
  1853  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  1854  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  1855  02D5  00BC               	movwf	??_main
  1856  02D6  083C               	movf	??_main,w
  1857  02D7  00A0               	movwf	___bmul@multiplicand
  1858  02D8  1283               	bcf	3,5	;RP0=0, select bank2
  1859  02D9  1703               	bsf	3,6	;RP1=1, select bank2
  1860  02DA  0865               	movf	main@i_443^(0+256),w
  1861  02DB  120A  158A  237D  120A  118A  	fcall	___bmul
  1862  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  1863  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  1864  02E2  00BD               	movwf	??_main+1
  1865  02E3  083D               	movf	??_main+1,w
  1866  02E4  1283               	bcf	3,5	;RP0=0, select bank2
  1867  02E5  1703               	bsf	3,6	;RP1=1, select bank2
  1868  02E6  00E0               	movwf	main@index^(0+256)
  1869  02E7                     l3240:	
  1870                           
  1871                           ;main.c: 253:                     tmp = dataFromGateway[index];
  1872  02E7  0860               	movf	main@index^(0+256),w
  1873  02E8  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1874  02E9  0084               	movwf	4
  1875  02EA  1383               	bcf	3,7	;select IRP bank1
  1876  02EB  0800               	movf	0,w
  1877  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  1878  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  1879  02EE  00BC               	movwf	??_main
  1880  02EF  083C               	movf	??_main,w
  1881  02F0  1283               	bcf	3,5	;RP0=0, select bank2
  1882  02F1  1703               	bsf	3,6	;RP1=1, select bank2
  1883  02F2  00DE               	movwf	main@tmp^(0+256)
  1884  02F3                     l3242:	
  1885                           
  1886                           ;main.c: 254:                     unsigned char semaforoId = (tmp >> 1) & 0x0F;
  1887  02F3  085E               	movf	main@tmp^(0+256),w
  1888  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  1889  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  1890  02F6  00BC               	movwf	??_main
  1891  02F7  1003               	clrc
  1892  02F8  0C3C               	rrf	??_main,w
  1893  02F9  390F               	andlw	15
  1894  02FA  00BD               	movwf	??_main+1
  1895  02FB  083D               	movf	??_main+1,w
  1896  02FC  1283               	bcf	3,5	;RP0=0, select bank2
  1897  02FD  1703               	bsf	3,6	;RP1=1, select bank2
  1898  02FE  00D8               	movwf	main@semaforoId^(0+256)
  1899  02FF                     l3244:	
  1900                           
  1901                           ;main.c: 255:                     tmp = dataFromGateway[index];
  1902  02FF  0860               	movf	main@index^(0+256),w
  1903  0300  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1904  0301  0084               	movwf	4
  1905  0302  0800               	movf	0,w
  1906  0303  1283               	bcf	3,5	;RP0=0, select bank0
  1907  0304  1303               	bcf	3,6	;RP1=0, select bank0
  1908  0305  00BC               	movwf	??_main
  1909  0306  083C               	movf	??_main,w
  1910  0307  1283               	bcf	3,5	;RP0=0, select bank2
  1911  0308  1703               	bsf	3,6	;RP1=1, select bank2
  1912  0309  00DE               	movwf	main@tmp^(0+256)
  1913  030A                     l3246:	
  1914                           
  1915                           ;main.c: 256:                     unsigned char colorId = ((tmp >> 5) & 0x03) - 1;
  1916  030A  085E               	movf	main@tmp^(0+256),w
  1917  030B  1283               	bcf	3,5	;RP0=0, select bank0
  1918  030C  1303               	bcf	3,6	;RP1=0, select bank0
  1919  030D  00BC               	movwf	??_main
  1920  030E  3005               	movlw	5
  1921  030F                     u3435:	
  1922  030F  1003               	clrc
  1923  0310  0CBC               	rrf	??_main,f
  1924  0311  3EFF               	addlw	-1
  1925  0312  1D03               	skipz
  1926  0313  2B0F               	goto	u3435
  1927  0314  083C               	movf	??_main,w
  1928  0315  3903               	andlw	3
  1929  0316  3EFF               	addlw	255
  1930  0317  00BD               	movwf	??_main+1
  1931  0318  083D               	movf	??_main+1,w
  1932  0319  1283               	bcf	3,5	;RP0=0, select bank2
  1933  031A  1703               	bsf	3,6	;RP1=1, select bank2
  1934  031B  00D9               	movwf	main@colorId^(0+256)
  1935  031C                     l3248:	
  1936                           
  1937                           ;main.c: 258:                     (*(Semafori[semaforoId])).new_times[colorId] = GetTime
      +                          (index);
  1938  031C  0860               	movf	main@index^(0+256),w
  1939  031D  120A  158A  24D2  120A  118A  	fcall	_GetTime
  1940  0322  1283               	bcf	3,5	;RP0=0, select bank2
  1941  0323  1703               	bsf	3,6	;RP1=1, select bank2
  1942  0324  0858               	movf	main@semaforoId^(0+256),w
  1943  0325  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0326  1303               	bcf	3,6	;RP1=0, select bank0
  1945  0327  00BC               	movwf	??_main
  1946  0328  073C               	addwf	??_main,w
  1947  0329  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1948  032A  0084               	movwf	4
  1949  032B  1383               	bcf	3,7	;select IRP bank1
  1950  032C  0800               	movf	0,w
  1951  032D  00BD               	movwf	??_main+1
  1952  032E  0A84               	incf	4,f
  1953  032F  0800               	movf	0,w
  1954  0330  00BE               	movwf	??_main+2
  1955  0331  1283               	bcf	3,5	;RP0=0, select bank2
  1956  0332  1703               	bsf	3,6	;RP1=1, select bank2
  1957  0333  0859               	movf	main@colorId^(0+256),w
  1958  0334  1283               	bcf	3,5	;RP0=0, select bank0
  1959  0335  1303               	bcf	3,6	;RP1=0, select bank0
  1960  0336  00BF               	movwf	??_main+3
  1961  0337  073F               	addwf	??_main+3,w
  1962  0338  073D               	addwf	??_main+1,w
  1963  0339  00C0               	movwf	??_main+4
  1964  033A  083E               	movf	??_main+2,w
  1965  033B  1803               	skipnc
  1966  033C  3E01               	addlw	1
  1967  033D  00C1               	movwf	??_main+5
  1968  033E  0840               	movf	??_main+4,w
  1969  033F  0084               	movwf	4
  1970  0340  1783               	bsf	3,7
  1971  0341  1C41               	btfss	??_main+5,0
  1972  0342  1383               	bcf	3,7
  1973  0343  0820               	movf	?_GetTime,w
  1974  0344  0080               	movwf	0
  1975  0345  0A84               	incf	4,f
  1976  0346  0821               	movf	?_GetTime+1,w
  1977  0347  0080               	movwf	0
  1978  0348                     l3250:	
  1979                           
  1980                           ;main.c: 259:                 }
  1981  0348  3001               	movlw	1
  1982  0349  00BC               	movwf	??_main
  1983  034A  083C               	movf	??_main,w
  1984  034B  1283               	bcf	3,5	;RP0=0, select bank2
  1985  034C  1703               	bsf	3,6	;RP1=1, select bank2
  1986  034D  07E5               	addwf	main@i_443^(0+256),f
  1987  034E  2ACB               	goto	l3234
  1988  034F                     l230:	
  1989                           ;main.c: 261:         }
  1990                           
  1991                           
  1992                           ;main.c: 265:         if (endCiclo.Bit)
  1993  034F  1283               	bcf	3,5	;RP0=0, select bank2
  1994  0350  1703               	bsf	3,6	;RP1=1, select bank2
  1995  0351  1C5D               	btfss	main@endCiclo^(0+256),0
  1996  0352  2B54               	goto	u3441
  1997  0353  2B55               	goto	u3440
  1998  0354                     u3441:	
  1999  0354  2C46               	goto	l235
  2000  0355                     u3440:	
  2001  0355                     l3254:	
  2002                           
  2003                           ;main.c: 266:         {;main.c: 268:             for (unsigned char l = 0; l < 16; l++)
  2004  0355  01EA               	clrf	main@l^(0+256)
  2005  0356                     l3256:	
  2006  0356  3010               	movlw	16
  2007  0357  026A               	subwf	main@l^(0+256),w
  2008  0358  1C03               	skipc
  2009  0359  2B5B               	goto	u3451
  2010  035A  2B5C               	goto	u3450
  2011  035B                     u3451:	
  2012  035B  2B5D               	goto	l3260
  2013  035C                     u3450:	
  2014  035C  2C17               	goto	l3278
  2015  035D                     l3260:	
  2016                           
  2017                           ;main.c: 269:             {;main.c: 270:                 for (unsigned char i = 0; i < 3
      +                          ; i++)
  2018  035D  01EB               	clrf	main@i_450^(0+256)
  2019  035E                     l3262:	
  2020  035E  3003               	movlw	3
  2021  035F  026B               	subwf	main@i_450^(0+256),w
  2022  0360  1C03               	skipc
  2023  0361  2B63               	goto	u3461
  2024  0362  2B64               	goto	u3460
  2025  0363                     u3461:	
  2026  0363  2B65               	goto	l3266
  2027  0364                     u3460:	
  2028  0364  2C0E               	goto	l3274
  2029  0365                     l3266:	
  2030                           
  2031                           ;main.c: 271:                 {;main.c: 272:                     if ((*(Semafori[l])).ti
      +                          mes[i] != (*(Semafori[l])).new_times[i])
  2032  0365  086A               	movf	main@l^(0+256),w
  2033  0366  1283               	bcf	3,5	;RP0=0, select bank0
  2034  0367  1303               	bcf	3,6	;RP1=0, select bank0
  2035  0368  00BC               	movwf	??_main
  2036  0369  073C               	addwf	??_main,w
  2037  036A  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2038  036B  0084               	movwf	4
  2039  036C  1383               	bcf	3,7	;select IRP bank1
  2040  036D  0800               	movf	0,w
  2041  036E  00BD               	movwf	??_main+1
  2042  036F  0A84               	incf	4,f
  2043  0370  0800               	movf	0,w
  2044  0371  00BE               	movwf	??_main+2
  2045  0372  1283               	bcf	3,5	;RP0=0, select bank2
  2046  0373  1703               	bsf	3,6	;RP1=1, select bank2
  2047  0374  086B               	movf	main@i_450^(0+256),w
  2048  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2049  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2050  0377  00BF               	movwf	??_main+3
  2051  0378  073F               	addwf	??_main+3,w
  2052  0379  073D               	addwf	??_main+1,w
  2053  037A  00C0               	movwf	??_main+4
  2054  037B  083E               	movf	??_main+2,w
  2055  037C  1803               	skipnc
  2056  037D  3E01               	addlw	1
  2057  037E  00C1               	movwf	??_main+5
  2058  037F  0840               	movf	??_main+4,w
  2059  0380  0084               	movwf	4
  2060  0381  1783               	bsf	3,7
  2061  0382  1C41               	btfss	??_main+5,0
  2062  0383  1383               	bcf	3,7
  2063  0384  0800               	movf	0,w
  2064  0385  00C2               	movwf	??_main+6
  2065  0386  0A84               	incf	4,f
  2066  0387  0800               	movf	0,w
  2067  0388  00C3               	movwf	??_main+7
  2068  0389  1283               	bcf	3,5	;RP0=0, select bank2
  2069  038A  1703               	bsf	3,6	;RP1=1, select bank2
  2070  038B  086A               	movf	main@l^(0+256),w
  2071  038C  1283               	bcf	3,5	;RP0=0, select bank0
  2072  038D  1303               	bcf	3,6	;RP1=0, select bank0
  2073  038E  00C4               	movwf	??_main+8
  2074  038F  0744               	addwf	??_main+8,w
  2075  0390  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2076  0391  0084               	movwf	4
  2077  0392  1383               	bcf	3,7	;select IRP bank1
  2078  0393  0800               	movf	0,w
  2079  0394  00C5               	movwf	??_main+9
  2080  0395  0A84               	incf	4,f
  2081  0396  0800               	movf	0,w
  2082  0397  00C6               	movwf	??_main+10
  2083  0398  1283               	bcf	3,5	;RP0=0, select bank2
  2084  0399  1703               	bsf	3,6	;RP1=1, select bank2
  2085  039A  086B               	movf	main@i_450^(0+256),w
  2086  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2087  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2088  039D  00C7               	movwf	??_main+11
  2089  039E  0747               	addwf	??_main+11,w
  2090  039F  3E06               	addlw	6
  2091  03A0  0745               	addwf	??_main+9,w
  2092  03A1  00C8               	movwf	??_main+12
  2093  03A2  0846               	movf	??_main+10,w
  2094  03A3  1803               	skipnc
  2095  03A4  3E01               	addlw	1
  2096  03A5  00C9               	movwf	??_main+13
  2097  03A6  0848               	movf	??_main+12,w
  2098  03A7  0084               	movwf	4
  2099  03A8  1783               	bsf	3,7
  2100  03A9  1C49               	btfss	??_main+13,0
  2101  03AA  1383               	bcf	3,7
  2102  03AB  0800               	movf	0,w
  2103  03AC  00CA               	movwf	??_main+14
  2104  03AD  0A84               	incf	4,f
  2105  03AE  0800               	movf	0,w
  2106  03AF  00CB               	movwf	??_main+15
  2107  03B0  0843               	movf	??_main+7,w
  2108  03B1  064B               	xorwf	??_main+15,w
  2109  03B2  1D03               	skipz
  2110  03B3  2BB6               	goto	u3475
  2111  03B4  0842               	movf	??_main+6,w
  2112  03B5  064A               	xorwf	??_main+14,w
  2113  03B6                     u3475:	
  2114  03B6  1903               	skipnz
  2115  03B7  2BB9               	goto	u3471
  2116  03B8  2BBA               	goto	u3470
  2117  03B9                     u3471:	
  2118  03B9  2C07               	goto	l3270
  2119  03BA                     u3470:	
  2120  03BA                     l3268:	
  2121                           
  2122                           ;main.c: 273:                     {;main.c: 274:                         (*(Semafori[l])
      +                          ).times[i] = (*(Semafori[l])).new_times[i];
  2123  03BA  1283               	bcf	3,5	;RP0=0, select bank2
  2124  03BB  1703               	bsf	3,6	;RP1=1, select bank2
  2125  03BC  086A               	movf	main@l^(0+256),w
  2126  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  2127  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  2128  03BF  00BC               	movwf	??_main
  2129  03C0  073C               	addwf	??_main,w
  2130  03C1  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2131  03C2  0084               	movwf	4
  2132  03C3  1383               	bcf	3,7	;select IRP bank1
  2133  03C4  0800               	movf	0,w
  2134  03C5  00BD               	movwf	??_main+1
  2135  03C6  0A84               	incf	4,f
  2136  03C7  0800               	movf	0,w
  2137  03C8  00BE               	movwf	??_main+2
  2138  03C9  1283               	bcf	3,5	;RP0=0, select bank2
  2139  03CA  1703               	bsf	3,6	;RP1=1, select bank2
  2140  03CB  086B               	movf	main@i_450^(0+256),w
  2141  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  2142  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  2143  03CE  00BF               	movwf	??_main+3
  2144  03CF  073F               	addwf	??_main+3,w
  2145  03D0  073D               	addwf	??_main+1,w
  2146  03D1  00C0               	movwf	??_main+4
  2147  03D2  083E               	movf	??_main+2,w
  2148  03D3  1803               	skipnc
  2149  03D4  3E01               	addlw	1
  2150  03D5  00C1               	movwf	??_main+5
  2151  03D6  0840               	movf	??_main+4,w
  2152  03D7  0084               	movwf	4
  2153  03D8  1783               	bsf	3,7
  2154  03D9  1C41               	btfss	??_main+5,0
  2155  03DA  1383               	bcf	3,7
  2156  03DB  0800               	movf	0,w
  2157  03DC  00C2               	movwf	??_main+6
  2158  03DD  0A84               	incf	4,f
  2159  03DE  0800               	movf	0,w
  2160  03DF  00C3               	movwf	??_main+7
  2161  03E0  1283               	bcf	3,5	;RP0=0, select bank2
  2162  03E1  1703               	bsf	3,6	;RP1=1, select bank2
  2163  03E2  086A               	movf	main@l^(0+256),w
  2164  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2165  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2166  03E5  00C4               	movwf	??_main+8
  2167  03E6  0744               	addwf	??_main+8,w
  2168  03E7  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2169  03E8  0084               	movwf	4
  2170  03E9  1383               	bcf	3,7	;select IRP bank1
  2171  03EA  0800               	movf	0,w
  2172  03EB  00C5               	movwf	??_main+9
  2173  03EC  0A84               	incf	4,f
  2174  03ED  0800               	movf	0,w
  2175  03EE  00C6               	movwf	??_main+10
  2176  03EF  1283               	bcf	3,5	;RP0=0, select bank2
  2177  03F0  1703               	bsf	3,6	;RP1=1, select bank2
  2178  03F1  086B               	movf	main@i_450^(0+256),w
  2179  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2180  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  2181  03F4  00C7               	movwf	??_main+11
  2182  03F5  0747               	addwf	??_main+11,w
  2183  03F6  3E06               	addlw	6
  2184  03F7  0745               	addwf	??_main+9,w
  2185  03F8  00C8               	movwf	??_main+12
  2186  03F9  0846               	movf	??_main+10,w
  2187  03FA  1803               	skipnc
  2188  03FB  3E01               	addlw	1
  2189  03FC  00C9               	movwf	??_main+13
  2190  03FD  0848               	movf	??_main+12,w
  2191  03FE  0084               	movwf	4
  2192  03FF  1783               	bsf	3,7
  2193  0400  1C49               	btfss	??_main+13,0
  2194  0401  1383               	bcf	3,7
  2195  0402  0842               	movf	??_main+6,w
  2196  0403  0080               	movwf	0
  2197  0404  0A84               	incf	4,f
  2198  0405  0843               	movf	??_main+7,w
  2199  0406  0080               	movwf	0
  2200  0407                     l3270:	
  2201                           
  2202                           ;main.c: 276:                 }
  2203  0407  3001               	movlw	1
  2204  0408  00BC               	movwf	??_main
  2205  0409  083C               	movf	??_main,w
  2206  040A  1283               	bcf	3,5	;RP0=0, select bank2
  2207  040B  1703               	bsf	3,6	;RP1=1, select bank2
  2208  040C  07EB               	addwf	main@i_450^(0+256),f
  2209  040D  2B5E               	goto	l3262
  2210  040E                     l3274:	
  2211                           
  2212                           ;main.c: 277:             }
  2213  040E  3001               	movlw	1
  2214  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0411  00BC               	movwf	??_main
  2217  0412  083C               	movf	??_main,w
  2218  0413  1283               	bcf	3,5	;RP0=0, select bank2
  2219  0414  1703               	bsf	3,6	;RP1=1, select bank2
  2220  0415  07EA               	addwf	main@l^(0+256),f
  2221  0416  2B56               	goto	l3256
  2222  0417                     l3278:	
  2223                           
  2224                           ;main.c: 281:             {;main.c: 282:                 n_semafori = (n_semafori + 1) %
      +                           16;
  2225  0417  1303               	bcf	3,6	;RP1=0, select bank0
  2226  0418  0864               	movf	_n_semafori,w
  2227  0419  3E01               	addlw	1
  2228  041A  390F               	andlw	15
  2229  041B  00BC               	movwf	??_main
  2230  041C  083C               	movf	??_main,w
  2231  041D  00E4               	movwf	_n_semafori
  2232  041E                     l3280:	
  2233                           
  2234                           ;main.c: 283:             } while ((*(Semafori[n_semafori])).times[0] == 0 && n_semafori
      +                           > 0);
  2235  041E  0864               	movf	_n_semafori,w
  2236  041F  00BC               	movwf	??_main
  2237  0420  073C               	addwf	??_main,w
  2238  0421  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2239  0422  0084               	movwf	4
  2240  0423  1383               	bcf	3,7	;select IRP bank1
  2241  0424  0800               	movf	0,w
  2242  0425  00BD               	movwf	??_main+1
  2243  0426  0A84               	incf	4,f
  2244  0427  0800               	movf	0,w
  2245  0428  00BE               	movwf	??_main+2
  2246  0429  083D               	movf	??_main+1,w
  2247  042A  3E06               	addlw	6
  2248  042B  00BF               	movwf	??_main+3
  2249  042C  083E               	movf	??_main+2,w
  2250  042D  1803               	skipnc
  2251  042E  3E01               	addlw	1
  2252  042F  3E00               	addlw	0
  2253  0430  00C0               	movwf	??_main+4
  2254  0431  083F               	movf	??_main+3,w
  2255  0432  0084               	movwf	4
  2256  0433  1783               	bsf	3,7
  2257  0434  1C40               	btfss	??_main+4,0
  2258  0435  1383               	bcf	3,7
  2259  0436  0800               	movf	0,w
  2260  0437  00C1               	movwf	??_main+5
  2261  0438  0A84               	incf	4,f
  2262  0439  0800               	movf	0,w
  2263  043A  00C2               	movwf	??_main+6
  2264  043B  0841               	movf	??_main+5,w
  2265  043C  0442               	iorwf	??_main+6,w
  2266  043D  1D03               	btfss	3,2
  2267  043E  2C40               	goto	u3481
  2268  043F  2C41               	goto	u3480
  2269  0440                     u3481:	
  2270  0440  2C46               	goto	l235
  2271  0441                     u3480:	
  2272  0441                     l3282:	
  2273  0441  0864               	movf	_n_semafori,w
  2274  0442  1D03               	btfss	3,2
  2275  0443  2C45               	goto	u3491
  2276  0444  2C46               	goto	u3490
  2277  0445                     u3491:	
  2278  0445  2C17               	goto	l3278
  2279  0446                     u3490:	
  2280  0446                     l235:	
  2281                           ;main.c: 284:         }
  2282                           
  2283                           
  2284                           ;main.c: 288:         if (secondPassed.Bit && cycled.Bit)
  2285  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2286  0447  1C61               	btfss	_secondPassed,0
  2287  0448  2C4A               	goto	u3501
  2288  0449  2C4B               	goto	u3500
  2289  044A                     u3501:	
  2290  044A  2D10               	goto	l3304
  2291  044B                     u3500:	
  2292  044B                     l3284:	
  2293  044B  1C60               	btfss	_cycled,0
  2294  044C  2C4E               	goto	u3511
  2295  044D  2C4F               	goto	u3510
  2296  044E                     u3511:	
  2297  044E  2D10               	goto	l3304
  2298  044F                     u3510:	
  2299  044F                     l3286:	
  2300                           
  2301                           ;main.c: 289:         {;main.c: 290:             time++;
  2302  044F  3001               	movlw	1
  2303  0450  1283               	bcf	3,5	;RP0=0, select bank2
  2304  0451  1703               	bsf	3,6	;RP1=1, select bank2
  2305  0452  07E1               	addwf	main@time^(0+256),f
  2306  0453  1803               	skipnc
  2307  0454  0AE2               	incf	(main@time+1)^(0+256),f
  2308  0455  3000               	movlw	0
  2309  0456  07E2               	addwf	(main@time+1)^(0+256),f
  2310  0457                     l3288:	
  2311                           
  2312                           ;main.c: 291:             endCiclo.Bit = 0;
  2313  0457  105D               	bcf	main@endCiclo^(0+256),0
  2314  0458                     l3290:	
  2315                           
  2316                           ;main.c: 293:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  2317  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2318  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2319  045A  0864               	movf	_n_semafori,w
  2320  045B  00BC               	movwf	??_main
  2321  045C  073C               	addwf	??_main,w
  2322  045D  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2323  045E  0084               	movwf	4
  2324  045F  1383               	bcf	3,7	;select IRP bank1
  2325  0460  0800               	movf	0,w
  2326  0461  00BD               	movwf	??_main+1
  2327  0462  0A84               	incf	4,f
  2328  0463  0800               	movf	0,w
  2329  0464  00BE               	movwf	??_main+2
  2330  0465  1283               	bcf	3,5	;RP0=0, select bank2
  2331  0466  1703               	bsf	3,6	;RP1=1, select bank2
  2332  0467  085F               	movf	main@lux_select^(0+256),w
  2333  0468  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0469  1303               	bcf	3,6	;RP1=0, select bank0
  2335  046A  00BF               	movwf	??_main+3
  2336  046B  073F               	addwf	??_main+3,w
  2337  046C  3E06               	addlw	6
  2338  046D  073D               	addwf	??_main+1,w
  2339  046E  00C0               	movwf	??_main+4
  2340  046F  083E               	movf	??_main+2,w
  2341  0470  1803               	skipnc
  2342  0471  3E01               	addlw	1
  2343  0472  00C1               	movwf	??_main+5
  2344  0473  0840               	movf	??_main+4,w
  2345  0474  0084               	movwf	4
  2346  0475  1783               	bsf	3,7
  2347  0476  1C41               	btfss	??_main+5,0
  2348  0477  1383               	bcf	3,7
  2349  0478  0800               	movf	0,w
  2350  0479  00C2               	movwf	??_main+6
  2351  047A  0A84               	incf	4,f
  2352  047B  0800               	movf	0,w
  2353  047C  00C3               	movwf	??_main+7
  2354  047D  1283               	bcf	3,5	;RP0=0, select bank2
  2355  047E  1703               	bsf	3,6	;RP1=1, select bank2
  2356  047F  0861               	movf	main@time^(0+256),w
  2357  0480  1283               	bcf	3,5	;RP0=0, select bank0
  2358  0481  1303               	bcf	3,6	;RP1=0, select bank0
  2359  0482  0242               	subwf	??_main+6,w
  2360  0483  00C4               	movwf	??_main+8
  2361  0484  1283               	bcf	3,5	;RP0=0, select bank2
  2362  0485  1703               	bsf	3,6	;RP1=1, select bank2
  2363  0486  0862               	movf	(main@time+1)^(0+256),w
  2364  0487  1C03               	skipc
  2365  0488  0A62               	incf	(main@time+1)^(0+256),w
  2366  0489  1283               	bcf	3,5	;RP0=0, select bank0
  2367  048A  1303               	bcf	3,6	;RP1=0, select bank0
  2368  048B  0243               	subwf	??_main+7,w
  2369  048C  00C5               	movwf	??_main+9
  2370  048D  1FC5               	btfss	??_main+9,7
  2371  048E  2C90               	goto	u3521
  2372  048F  2C91               	goto	u3520
  2373  0490                     u3521:	
  2374  0490  2C98               	goto	l3296
  2375  0491                     u3520:	
  2376  0491                     l3292:	
  2377                           
  2378                           ;main.c: 294:             {;main.c: 295:                 endCiclo.Bit = 1;
  2379  0491  1283               	bcf	3,5	;RP0=0, select bank2
  2380  0492  1703               	bsf	3,6	;RP1=1, select bank2
  2381  0493  145D               	bsf	main@endCiclo^(0+256),0
  2382  0494                     l3294:	
  2383                           
  2384                           ;main.c: 296:                 time=1;
  2385  0494  3001               	movlw	1
  2386  0495  00E1               	movwf	main@time^(0+256)
  2387  0496  3000               	movlw	0
  2388  0497  00E2               	movwf	(main@time^(0+256)+1)
  2389  0498                     l3296:	
  2390                           
  2391                           ;main.c: 299:             if (lux_select == 2 && time >= (*Semafori[n_semafori]).times[2
      +                          ])
  2392  0498  3002               	movlw	2
  2393  0499  1283               	bcf	3,5	;RP0=0, select bank2
  2394  049A  1703               	bsf	3,6	;RP1=1, select bank2
  2395  049B  065F               	xorwf	main@lux_select^(0+256),w
  2396  049C  1D03               	btfss	3,2
  2397  049D  2C9F               	goto	u3531
  2398  049E  2CA0               	goto	u3530
  2399  049F                     u3531:	
  2400  049F  2CD6               	goto	l3302
  2401  04A0                     u3530:	
  2402  04A0                     l3298:	
  2403  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  2404  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  2405  04A2  0864               	movf	_n_semafori,w
  2406  04A3  00BC               	movwf	??_main
  2407  04A4  073C               	addwf	??_main,w
  2408  04A5  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2409  04A6  0084               	movwf	4
  2410  04A7  1383               	bcf	3,7	;select IRP bank1
  2411  04A8  0800               	movf	0,w
  2412  04A9  00BD               	movwf	??_main+1
  2413  04AA  0A84               	incf	4,f
  2414  04AB  0800               	movf	0,w
  2415  04AC  00BE               	movwf	??_main+2
  2416  04AD  083D               	movf	??_main+1,w
  2417  04AE  3E0A               	addlw	10
  2418  04AF  00BF               	movwf	??_main+3
  2419  04B0  083E               	movf	??_main+2,w
  2420  04B1  1803               	skipnc
  2421  04B2  3E01               	addlw	1
  2422  04B3  3E00               	addlw	0
  2423  04B4  00C0               	movwf	??_main+4
  2424  04B5  083F               	movf	??_main+3,w
  2425  04B6  0084               	movwf	4
  2426  04B7  1783               	bsf	3,7
  2427  04B8  1C40               	btfss	??_main+4,0
  2428  04B9  1383               	bcf	3,7
  2429  04BA  0800               	movf	0,w
  2430  04BB  00C1               	movwf	??_main+5
  2431  04BC  0A84               	incf	4,f
  2432  04BD  0800               	movf	0,w
  2433  04BE  00C2               	movwf	??_main+6
  2434  04BF  1283               	bcf	3,5	;RP0=0, select bank2
  2435  04C0  1703               	bsf	3,6	;RP1=1, select bank2
  2436  04C1  0862               	movf	(main@time+1)^(0+256),w
  2437  04C2  3A80               	xorlw	128
  2438  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  2439  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  2440  04C5  00C3               	movwf	??_main+7
  2441  04C6  0842               	movf	??_main+6,w
  2442  04C7  3A80               	xorlw	128
  2443  04C8  0243               	subwf	??_main+7,w
  2444  04C9  1D03               	skipz
  2445  04CA  2CCF               	goto	u3545
  2446  04CB  0841               	movf	??_main+5,w
  2447  04CC  1283               	bcf	3,5	;RP0=0, select bank2
  2448  04CD  1703               	bsf	3,6	;RP1=1, select bank2
  2449  04CE  0261               	subwf	main@time^(0+256),w
  2450  04CF                     u3545:	
  2451  04CF  1C03               	skipc
  2452  04D0  2CD2               	goto	u3541
  2453  04D1  2CD3               	goto	u3540
  2454  04D2                     u3541:	
  2455  04D2  2CD6               	goto	l3302
  2456  04D3                     u3540:	
  2457  04D3                     l3300:	
  2458                           
  2459                           ;main.c: 300:             {;main.c: 301:                 endCiclo.Bit = 1;
  2460  04D3  1283               	bcf	3,5	;RP0=0, select bank2
  2461  04D4  1703               	bsf	3,6	;RP1=1, select bank2
  2462  04D5  145D               	bsf	main@endCiclo^(0+256),0
  2463  04D6                     l3302:	
  2464                           
  2465                           ;main.c: 304:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  2466  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2467  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2468  04D8  0864               	movf	_n_semafori,w
  2469  04D9  00BC               	movwf	??_main
  2470  04DA  073C               	addwf	??_main,w
  2471  04DB  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2472  04DC  0084               	movwf	4
  2473  04DD  1383               	bcf	3,7	;select IRP bank1
  2474  04DE  0800               	movf	0,w
  2475  04DF  00BD               	movwf	??_main+1
  2476  04E0  0A84               	incf	4,f
  2477  04E1  0800               	movf	0,w
  2478  04E2  00BE               	movwf	??_main+2
  2479  04E3  1283               	bcf	3,5	;RP0=0, select bank2
  2480  04E4  1703               	bsf	3,6	;RP1=1, select bank2
  2481  04E5  085F               	movf	main@lux_select^(0+256),w
  2482  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  2483  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  2484  04E8  00BF               	movwf	??_main+3
  2485  04E9  073F               	addwf	??_main+3,w
  2486  04EA  3E06               	addlw	6
  2487  04EB  073D               	addwf	??_main+1,w
  2488  04EC  00C0               	movwf	??_main+4
  2489  04ED  083E               	movf	??_main+2,w
  2490  04EE  1803               	skipnc
  2491  04EF  3E01               	addlw	1
  2492  04F0  00C1               	movwf	??_main+5
  2493  04F1  0840               	movf	??_main+4,w
  2494  04F2  0084               	movwf	4
  2495  04F3  1783               	bsf	3,7
  2496  04F4  1C41               	btfss	??_main+5,0
  2497  04F5  1383               	bcf	3,7
  2498  04F6  0800               	movf	0,w
  2499  04F7  00C2               	movwf	??_main+6
  2500  04F8  0A84               	incf	4,f
  2501  04F9  0800               	movf	0,w
  2502  04FA  00C3               	movwf	??_main+7
  2503  04FB  1283               	bcf	3,5	;RP0=0, select bank2
  2504  04FC  1703               	bsf	3,6	;RP1=1, select bank2
  2505  04FD  0861               	movf	main@time^(0+256),w
  2506  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  2507  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  2508  0500  0242               	subwf	??_main+6,w
  2509  0501  00B0               	movwf	GetDigits@Time
  2510  0502  1283               	bcf	3,5	;RP0=0, select bank2
  2511  0503  1703               	bsf	3,6	;RP1=1, select bank2
  2512  0504  0862               	movf	(main@time+1)^(0+256),w
  2513  0505  1C03               	skipc
  2514  0506  0A62               	incf	(main@time+1)^(0+256),w
  2515  0507  1283               	bcf	3,5	;RP0=0, select bank0
  2516  0508  1303               	bcf	3,6	;RP1=0, select bank0
  2517  0509  0243               	subwf	??_main+7,w
  2518  050A  00B1               	movwf	GetDigits@Time+1
  2519  050B  120A  158A  2630  120A  118A  	fcall	_GetDigits
  2520  0510                     l3304:	
  2521                           
  2522                           ;main.c: 308:         if (disp != old_disp)
  2523  0510  1283               	bcf	3,5	;RP0=0, select bank0
  2524  0511  1303               	bcf	3,6	;RP1=0, select bank0
  2525  0512  085B               	movf	_disp,w
  2526  0513  065C               	xorwf	_old_disp,w
  2527  0514  1903               	skipnz
  2528  0515  2D17               	goto	u3551
  2529  0516  2D18               	goto	u3550
  2530  0517                     u3551:	
  2531  0517  2D94               	goto	l3326
  2532  0518                     u3550:	
  2533  0518                     l3306:	
  2534                           
  2535                           ;main.c: 309:         {;main.c: 310:             old_disp = disp;
  2536  0518  085B               	movf	_disp,w
  2537  0519  00BC               	movwf	??_main
  2538  051A  083C               	movf	??_main,w
  2539  051B  00DC               	movwf	_old_disp
  2540                           
  2541                           ;main.c: 311:             switch (disp)
  2542  051C  2D7E               	goto	l3324
  2543  051D                     l3308:	
  2544                           
  2545                           ;main.c: 314:                 if (centinaia > 0)
  2546  051D  085D               	movf	_centinaia,w
  2547  051E  1903               	btfsc	3,2
  2548  051F  2D21               	goto	u3561
  2549  0520  2D22               	goto	u3560
  2550  0521                     u3561:	
  2551  0521  2D94               	goto	l3326
  2552  0522                     u3560:	
  2553  0522                     l3310:	
  2554                           
  2555                           ;main.c: 315:                 {;main.c: 316:                     SetDisplay(1, 0, 0, dis
      +                          play[centinaia]);
  2556  0522  01A0               	clrf	SetDisplay@d2
  2557  0523  01A1               	clrf	SetDisplay@d3
  2558  0524  085D               	movf	_centinaia,w
  2559  0525  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2560  0526  0084               	movwf	4
  2561  0527  120A  158A  2000  120A  118A  	fcall	stringdir
  2562  052C  00BC               	movwf	??_main
  2563  052D  083C               	movf	??_main,w
  2564  052E  00A2               	movwf	SetDisplay@value
  2565  052F  3001               	movlw	1
  2566  0530  120A  158A  2368  120A  118A  	fcall	_SetDisplay
  2567  0535  2D94               	goto	l3326
  2568  0536                     l3312:	
  2569                           
  2570                           ;main.c: 320:                 if (decine > 0 || centinaia > 0)
  2571  0536  085E               	movf	_decine,w
  2572  0537  1D03               	btfss	3,2
  2573  0538  2D3A               	goto	u3571
  2574  0539  2D3B               	goto	u3570
  2575  053A                     u3571:	
  2576  053A  2D40               	goto	l3316
  2577  053B                     u3570:	
  2578  053B                     l3314:	
  2579  053B  085D               	movf	_centinaia,w
  2580  053C  1903               	btfsc	3,2
  2581  053D  2D3F               	goto	u3581
  2582  053E  2D40               	goto	u3580
  2583  053F                     u3581:	
  2584  053F  2D94               	goto	l3326
  2585  0540                     u3580:	
  2586  0540                     l3316:	
  2587                           
  2588                           ;main.c: 321:                 {;main.c: 322:                     SetDisplay(0, 1, 0, dis
      +                          play[decine]);
  2589  0540  01A0               	clrf	SetDisplay@d2
  2590  0541  0AA0               	incf	SetDisplay@d2,f
  2591  0542  01A1               	clrf	SetDisplay@d3
  2592  0543  085E               	movf	_decine,w
  2593  0544  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2594  0545  0084               	movwf	4
  2595  0546  120A  158A  2000  120A  118A  	fcall	stringdir
  2596  054B  00BC               	movwf	??_main
  2597  054C  083C               	movf	??_main,w
  2598  054D  00A2               	movwf	SetDisplay@value
  2599  054E  3000               	movlw	0
  2600  054F  120A  158A  2368  120A  118A  	fcall	_SetDisplay
  2601  0554  2D94               	goto	l3326
  2602  0555                     l3318:	
  2603                           
  2604                           ;main.c: 326:                 SetDisplay(0, 0, 1, display[unita]);
  2605  0555  01A0               	clrf	SetDisplay@d2
  2606  0556  01A1               	clrf	SetDisplay@d3
  2607  0557  0AA1               	incf	SetDisplay@d3,f
  2608  0558  085F               	movf	_unita,w
  2609  0559  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2610  055A  0084               	movwf	4
  2611  055B  120A  158A  2000  120A  118A  	fcall	stringdir
  2612  0560  00BC               	movwf	??_main
  2613  0561  083C               	movf	??_main,w
  2614  0562  00A2               	movwf	SetDisplay@value
  2615  0563  3000               	movlw	0
  2616  0564  120A  158A  2368  120A  118A  	fcall	_SetDisplay
  2617                           
  2618                           ;main.c: 327:                 break;
  2619  0569  2D94               	goto	l3326
  2620  056A                     l3320:	
  2621                           
  2622                           ;main.c: 329:                 SetDisplay(1, 0, 0, display[n_semafori]);
  2623  056A  01A0               	clrf	SetDisplay@d2
  2624  056B  01A1               	clrf	SetDisplay@d3
  2625  056C  0864               	movf	_n_semafori,w
  2626  056D  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2627  056E  0084               	movwf	4
  2628  056F  120A  158A  2000  120A  118A  	fcall	stringdir
  2629  0574  00BC               	movwf	??_main
  2630  0575  083C               	movf	??_main,w
  2631  0576  00A2               	movwf	SetDisplay@value
  2632  0577  3001               	movlw	1
  2633  0578  120A  158A  2368  120A  118A  	fcall	_SetDisplay
  2634                           
  2635                           ;main.c: 330:                 break;
  2636  057D  2D94               	goto	l3326
  2637  057E                     l3324:	
  2638  057E  085B               	movf	_disp,w
  2639  057F  00BC               	movwf	??_main
  2640  0580  01BD               	clrf	??_main+1
  2641                           
  2642                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2643                           ; Switch size 1, requested type "simple"
  2644                           ; Number of cases is 1, Range of values is 0 to 0
  2645                           ; switch strategies available:
  2646                           ; Name         Instructions Cycles
  2647                           ; simple_byte            4     3 (average)
  2648                           ; direct_byte           11     8 (fixed)
  2649                           ; jumptable            260     6 (fixed)
  2650                           ;	Chosen strategy is simple_byte
  2651  0581  083D               	movf	??_main+1,w
  2652  0582  3A00               	xorlw	0	; case 0
  2653  0583  1903               	skipnz
  2654  0584  2D86               	goto	l3440
  2655  0585  2D94               	goto	l3326
  2656  0586                     l3440:	
  2657                           
  2658                           ; Switch size 1, requested type "simple"
  2659                           ; Number of cases is 4, Range of values is 0 to 3
  2660                           ; switch strategies available:
  2661                           ; Name         Instructions Cycles
  2662                           ; simple_byte           13     7 (average)
  2663                           ; direct_byte           20     8 (fixed)
  2664                           ; jumptable            260     6 (fixed)
  2665                           ;	Chosen strategy is simple_byte
  2666  0586  083C               	movf	??_main,w
  2667  0587  3A00               	xorlw	0	; case 0
  2668  0588  1903               	skipnz
  2669  0589  2D1D               	goto	l3308
  2670  058A  3A01               	xorlw	1	; case 1
  2671  058B  1903               	skipnz
  2672  058C  2D36               	goto	l3312
  2673  058D  3A03               	xorlw	3	; case 2
  2674  058E  1903               	skipnz
  2675  058F  2D55               	goto	l3318
  2676  0590  3A01               	xorlw	1	; case 3
  2677  0591  1903               	skipnz
  2678  0592  2D6A               	goto	l3320
  2679  0593  2D94               	goto	l3326
  2680  0594                     l3326:	
  2681                           
  2682                           ;main.c: 333:         disp = (disp + 1) % 3;
  2683  0594  3003               	movlw	3
  2684  0595  1283               	bcf	3,5	;RP0=0, select bank0
  2685  0596  1303               	bcf	3,6	;RP1=0, select bank0
  2686  0597  00A0               	movwf	___awmod@divisor
  2687  0598  3000               	movlw	0
  2688  0599  00A1               	movwf	___awmod@divisor+1
  2689  059A  085B               	movf	_disp,w
  2690  059B  3E01               	addlw	1
  2691  059C  00A2               	movwf	___awmod@dividend
  2692  059D  3000               	movlw	0
  2693  059E  1803               	skipnc
  2694  059F  3001               	movlw	1
  2695  05A0  00A3               	movwf	___awmod@dividend+1
  2696  05A1  120A  158A  256C  120A  118A  	fcall	___awmod
  2697  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  2698  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  2699  05A8  0820               	movf	?___awmod,w
  2700  05A9  00BC               	movwf	??_main
  2701  05AA  083C               	movf	??_main,w
  2702  05AB  00DB               	movwf	_disp
  2703  05AC                     l3328:	
  2704                           
  2705                           ;main.c: 339:         if (secondPassed.Bit && cycled.Bit)
  2706  05AC  1C61               	btfss	_secondPassed,0
  2707  05AD  2DAF               	goto	u3591
  2708  05AE  2DB0               	goto	u3590
  2709  05AF                     u3591:	
  2710  05AF  2DB6               	goto	l259
  2711  05B0                     u3590:	
  2712  05B0                     l3330:	
  2713  05B0  1C60               	btfss	_cycled,0
  2714  05B1  2DB3               	goto	u3601
  2715  05B2  2DB4               	goto	u3600
  2716  05B3                     u3601:	
  2717  05B3  2DB6               	goto	l259
  2718  05B4                     u3600:	
  2719  05B4                     l3332:	
  2720                           
  2721                           ;main.c: 340:         {;main.c: 341:             secondPassed.Bit = 0;
  2722  05B4  1061               	bcf	_secondPassed,0
  2723                           
  2724                           ;main.c: 342:             cycled.Bit = 0;
  2725  05B5  1060               	bcf	_cycled,0
  2726  05B6                     l259:	
  2727                           ;main.c: 343:         }
  2728                           
  2729                           
  2730                           ;main.c: 345:         if (secondPassed.Bit && !cycled.Bit)
  2731  05B6  1C61               	btfss	_secondPassed,0
  2732  05B7  2DB9               	goto	u3611
  2733  05B8  2DBA               	goto	u3610
  2734  05B9                     u3611:	
  2735  05B9  28D0               	goto	l213
  2736  05BA                     u3610:	
  2737  05BA                     l3334:	
  2738  05BA  1860               	btfsc	_cycled,0
  2739  05BB  2DBD               	goto	u3621
  2740  05BC  2DBE               	goto	u3620
  2741  05BD                     u3621:	
  2742  05BD  28D0               	goto	l213
  2743  05BE                     u3620:	
  2744  05BE                     l3336:	
  2745                           
  2746                           ;main.c: 346:         {;main.c: 347:             cycled.Bit = 1;
  2747  05BE  1460               	bsf	_cycled,0
  2748  05BF  28D0               	goto	l213
  2749  05C0  120A  118A  280E   	ljmp	start
  2750  05C3                     __end_of_main:	
  2751                           
  2752                           	psect	text1
  2753  0C32                     __ptext1:	
  2754 ;; *************** function _sendByte *****************
  2755 ;; Defined at:
  2756 ;;		line 411 in file "main.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  byte0           1    wreg     unsigned char 
  2759 ;;  byte1           1   20[BANK0 ] unsigned char 
  2760 ;;  valore          1   21[BANK0 ] unsigned char 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  byte0           1   25[BANK0 ] unsigned char 
  2763 ;;  i               1   27[BANK0 ] unsigned char 
  2764 ;;  txByte          1   26[BANK0 ] PTR unsigned char 
  2765 ;;		 -> BuildByte@txByte(5), 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      void 
  2768 ;; Registers used:
  2769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2775 ;;      Params:         0       2       0       0       0
  2776 ;;      Locals:         0       3       0       0       0
  2777 ;;      Temps:          0       3       0       0       0
  2778 ;;      Totals:         0       8       0       0       0
  2779 ;;Total ram usage:        8 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    3
  2782 ;; This function calls:
  2783 ;;		_BuildByte
  2784 ;;		_UART_TxChar
  2785 ;; This function is called by:
  2786 ;;		_main
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           
  2791                           ;psect for function _sendByte
  2792  0C32                     _sendByte:	
  2793                           
  2794                           ;incstack = 0
  2795                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2796                           ;sendByte@byte0 stored from wreg
  2797  0C32  1283               	bcf	3,5	;RP0=0, select bank0
  2798  0C33  1303               	bcf	3,6	;RP1=0, select bank0
  2799  0C34  00B9               	movwf	sendByte@byte0
  2800  0C35                     l3022:	
  2801                           
  2802                           ;main.c: 411: void sendByte(char byte0, char byte1, char valore);main.c: 412: {;main.c: 
      +                          413:     char *txByte;;main.c: 414:     txByte = BuildByte(byte0, byte1, valore);
  2803  0C35  0834               	movf	sendByte@byte1,w
  2804  0C36  00B6               	movwf	??_sendByte
  2805  0C37  0836               	movf	??_sendByte,w
  2806  0C38  00A0               	movwf	BuildByte@byte1
  2807  0C39  0835               	movf	sendByte@valore,w
  2808  0C3A  00B7               	movwf	??_sendByte+1
  2809  0C3B  0837               	movf	??_sendByte+1,w
  2810  0C3C  00A1               	movwf	BuildByte@valore
  2811  0C3D  0839               	movf	sendByte@byte0,w
  2812  0C3E  120A  158A  2738  120A  158A  	fcall	_BuildByte
  2813  0C43  1283               	bcf	3,5	;RP0=0, select bank0
  2814  0C44  1303               	bcf	3,6	;RP1=0, select bank0
  2815  0C45  00B8               	movwf	??_sendByte+2
  2816  0C46  0838               	movf	??_sendByte+2,w
  2817  0C47  00BA               	movwf	sendByte@txByte
  2818  0C48                     l3024:	
  2819                           
  2820                           ;main.c: 416:     for (unsigned char i = 0; i < 5; i++)
  2821  0C48  01BB               	clrf	sendByte@i
  2822  0C49                     l3030:	
  2823                           
  2824                           ;main.c: 417:     {;main.c: 418:         UART_TxChar(*(txByte++));
  2825  0C49  083A               	movf	sendByte@txByte,w
  2826  0C4A  0084               	movwf	4
  2827  0C4B  1383               	bcf	3,7	;select IRP bank0
  2828  0C4C  0800               	movf	0,w
  2829  0C4D  120A  158A  2337  120A  158A  	fcall	_UART_TxChar
  2830  0C52                     l3032:	
  2831  0C52  3001               	movlw	1
  2832  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  2833  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  2834  0C55  00B6               	movwf	??_sendByte
  2835  0C56  0836               	movf	??_sendByte,w
  2836  0C57  07BA               	addwf	sendByte@txByte,f
  2837  0C58                     l3034:	
  2838                           
  2839                           ;main.c: 419:     }
  2840  0C58  3001               	movlw	1
  2841  0C59  00B6               	movwf	??_sendByte
  2842  0C5A  0836               	movf	??_sendByte,w
  2843  0C5B  07BB               	addwf	sendByte@i,f
  2844  0C5C                     l3036:	
  2845  0C5C  3005               	movlw	5
  2846  0C5D  023B               	subwf	sendByte@i,w
  2847  0C5E  1C03               	skipc
  2848  0C5F  2C61               	goto	u3221
  2849  0C60  2C62               	goto	u3220
  2850  0C61                     u3221:	
  2851  0C61  2C49               	goto	l3030
  2852  0C62                     u3220:	
  2853  0C62                     l298:	
  2854  0C62  0008               	return
  2855  0C63                     __end_of_sendByte:	
  2856                           
  2857                           	psect	text2
  2858  0B37                     __ptext2:	
  2859 ;; *************** function _UART_TxChar *****************
  2860 ;; Defined at:
  2861 ;;		line 386 in file "main.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;  ch              1    wreg     unsigned char 
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  ch              1    0[BANK0 ] unsigned char 
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  1    wreg      void 
  2868 ;; Registers used:
  2869 ;;		wreg
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2875 ;;      Params:         0       0       0       0       0
  2876 ;;      Locals:         0       1       0       0       0
  2877 ;;      Temps:          0       0       0       0       0
  2878 ;;      Totals:         0       1       0       0       0
  2879 ;;Total ram usage:        1 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    2
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		_sendByte
  2886 ;;		_UART_Write_Text
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           
  2891                           ;psect for function _UART_TxChar
  2892  0B37                     _UART_TxChar:	
  2893                           
  2894                           ;incstack = 0
  2895                           ; Regs used in _UART_TxChar: [wreg]
  2896                           ;UART_TxChar@ch stored from wreg
  2897  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  2898  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  2899  0B39  00A0               	movwf	UART_TxChar@ch
  2900  0B3A                     l2774:	
  2901  0B3A                     l278:	
  2902                           ;main.c: 389:         ;
  2903                           
  2904                           
  2905                           ;main.c: 388:     while (!TXIF)
  2906  0B3A  1E0C               	btfss	12,4	;volatile
  2907  0B3B  2B3D               	goto	u2761
  2908  0B3C  2B3E               	goto	u2760
  2909  0B3D                     u2761:	
  2910  0B3D  2B3A               	goto	l278
  2911  0B3E                     u2760:	
  2912  0B3E                     l280:	
  2913                           
  2914                           ;main.c: 390:     TXIF = 0;
  2915  0B3E  120C               	bcf	12,4	;volatile
  2916  0B3F                     l2776:	
  2917                           
  2918                           ;main.c: 391:     TXREG = ch;
  2919  0B3F  0820               	movf	UART_TxChar@ch,w
  2920  0B40  0099               	movwf	25	;volatile
  2921  0B41                     l281:	
  2922  0B41  0008               	return
  2923  0B42                     __end_of_UART_TxChar:	
  2924                           
  2925                           	psect	text3
  2926  0F38                     __ptext3:	
  2927 ;; *************** function _BuildByte *****************
  2928 ;; Defined at:
  2929 ;;		line 2 in file "./CustomLib/Serial.h"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  byte0           1    wreg     unsigned char 
  2932 ;;  byte1           1    0[BANK0 ] unsigned char 
  2933 ;;  valore          1    1[BANK0 ] unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  byte0           1    4[BANK0 ] unsigned char 
  2936 ;;  y               2   14[BANK0 ] int 
  2937 ;;  y               2   12[BANK0 ] int 
  2938 ;;  i               2   18[BANK0 ] int 
  2939 ;;  i               2   16[BANK0 ] int 
  2940 ;;  txByte          5    5[BANK0 ] unsigned char [5]
  2941 ;;  sommaColumn     1   11[BANK0 ] unsigned char 
  2942 ;;  sommaRow        1   10[BANK0 ] unsigned char 
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      PTR unsigned char 
  2945 ;; Registers used:
  2946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2952 ;;      Params:         0       2       0       0       0
  2953 ;;      Locals:         0      16       0       0       0
  2954 ;;      Temps:          0       2       0       0       0
  2955 ;;      Totals:         0      20       0       0       0
  2956 ;;Total ram usage:       20 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:    2
  2959 ;; This function calls:
  2960 ;;		Nothing
  2961 ;; This function is called by:
  2962 ;;		_sendByte
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           
  2967                           ;psect for function _BuildByte
  2968  0F38                     _BuildByte:	
  2969                           
  2970                           ;incstack = 0
  2971                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2972                           ;BuildByte@byte0 stored from wreg
  2973  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  2974  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  2975  0F3A  00A4               	movwf	BuildByte@byte0
  2976  0F3B                     l2706:	
  2977                           
  2978                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2979  0F3B  0824               	movf	BuildByte@byte0,w
  2980  0F3C  397F               	andlw	127
  2981  0F3D  00A2               	movwf	??_BuildByte
  2982  0F3E  0822               	movf	??_BuildByte,w
  2983  0F3F  00A5               	movwf	BuildByte@txByte
  2984                           
  2985                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2986  0F40  0820               	movf	BuildByte@byte1,w
  2987  0F41  397F               	andlw	127
  2988  0F42  00A2               	movwf	??_BuildByte
  2989  0F43  0822               	movf	??_BuildByte,w
  2990  0F44  00A6               	movwf	BuildByte@txByte+1
  2991                           
  2992                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2993  0F45  0821               	movf	BuildByte@valore,w
  2994  0F46  397F               	andlw	127
  2995  0F47  00A2               	movwf	??_BuildByte
  2996  0F48  0822               	movf	??_BuildByte,w
  2997  0F49  00A7               	movwf	BuildByte@txByte+2
  2998  0F4A                     l2708:	
  2999                           
  3000                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  3001  0F4A  0821               	movf	BuildByte@valore,w
  3002  0F4B  00A2               	movwf	??_BuildByte
  3003  0F4C  3007               	movlw	7
  3004  0F4D                     u2665:	
  3005  0F4D  1003               	clrc
  3006  0F4E  0CA2               	rrf	??_BuildByte,f
  3007  0F4F  3EFF               	addlw	-1
  3008  0F50  1D03               	skipz
  3009  0F51  2F4D               	goto	u2665
  3010  0F52  0822               	movf	??_BuildByte,w
  3011  0F53  397F               	andlw	127
  3012  0F54  00A3               	movwf	??_BuildByte+1
  3013  0F55  0823               	movf	??_BuildByte+1,w
  3014  0F56  00A8               	movwf	BuildByte@txByte+3
  3015  0F57                     l2710:	
  3016                           
  3017                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  3018  0F57  01AA               	clrf	BuildByte@sommaRow
  3019  0F58                     l2712:	
  3020                           
  3021                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  3022  0F58  01AB               	clrf	BuildByte@sommaColumn
  3023  0F59                     l2714:	
  3024                           
  3025                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  3026  0F59  01B0               	clrf	BuildByte@i
  3027  0F5A  01B1               	clrf	BuildByte@i+1
  3028  0F5B                     l2720:	
  3029                           
  3030                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  3031  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  3032  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  3033  0F5D  01AC               	clrf	BuildByte@y
  3034  0F5E  01AD               	clrf	BuildByte@y+1
  3035  0F5F                     l2726:	
  3036                           
  3037                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  3038  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  3039  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  3040  0F61  0830               	movf	BuildByte@i,w
  3041  0F62  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3042  0F63  0084               	movwf	4
  3043  0F64  1383               	bcf	3,7	;select IRP bank0
  3044  0F65  0800               	movf	0,w
  3045  0F66  00A2               	movwf	??_BuildByte
  3046  0F67  0A2C               	incf	BuildByte@y,w
  3047  0F68  2F6B               	goto	u2674
  3048  0F69                     u2675:	
  3049  0F69  1003               	clrc
  3050  0F6A  0CA2               	rrf	??_BuildByte,f
  3051  0F6B                     u2674:	
  3052  0F6B  3EFF               	addlw	-1
  3053  0F6C  1D03               	skipz
  3054  0F6D  2F69               	goto	u2675
  3055  0F6E  0822               	movf	??_BuildByte,w
  3056  0F6F  3901               	andlw	1
  3057  0F70  00A3               	movwf	??_BuildByte+1
  3058  0F71  0823               	movf	??_BuildByte+1,w
  3059  0F72  07AA               	addwf	BuildByte@sommaRow,f
  3060  0F73                     l2728:	
  3061                           
  3062                           ;./CustomLib/Serial.h: 18:         }
  3063  0F73  3001               	movlw	1
  3064  0F74  07AC               	addwf	BuildByte@y,f
  3065  0F75  1803               	skipnc
  3066  0F76  0AAD               	incf	BuildByte@y+1,f
  3067  0F77  3000               	movlw	0
  3068  0F78  07AD               	addwf	BuildByte@y+1,f
  3069  0F79                     l2730:	
  3070  0F79  082D               	movf	BuildByte@y+1,w
  3071  0F7A  3A80               	xorlw	128
  3072  0F7B  00FF               	movwf	btemp+1
  3073  0F7C  3080               	movlw	128
  3074  0F7D  027F               	subwf	btemp+1,w
  3075  0F7E  1D03               	skipz
  3076  0F7F  2F82               	goto	u2685
  3077  0F80  3008               	movlw	8
  3078  0F81  022C               	subwf	BuildByte@y,w
  3079  0F82                     u2685:	
  3080  0F82  1C03               	skipc
  3081  0F83  2F85               	goto	u2681
  3082  0F84  2F86               	goto	u2680
  3083  0F85                     u2681:	
  3084  0F85  2F5F               	goto	l2726
  3085  0F86                     u2680:	
  3086  0F86                     l119:	
  3087                           
  3088                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  3089  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  3090  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  3091  0F88  1C2A               	btfss	BuildByte@sommaRow,0
  3092  0F89  2F8B               	goto	u2691
  3093  0F8A  2F8C               	goto	u2690
  3094  0F8B                     u2691:	
  3095  0F8B  2F94               	goto	l2734
  3096  0F8C                     u2690:	
  3097  0F8C                     l2732:	
  3098                           
  3099                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  3100  0F8C  3080               	movlw	128
  3101  0F8D  00A2               	movwf	??_BuildByte
  3102  0F8E  0830               	movf	BuildByte@i,w
  3103  0F8F  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3104  0F90  0084               	movwf	4
  3105  0F91  0822               	movf	??_BuildByte,w
  3106  0F92  1383               	bcf	3,7	;select IRP bank0
  3107  0F93  0780               	addwf	0,f
  3108  0F94                     l2734:	
  3109                           
  3110                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  3111  0F94  01AA               	clrf	BuildByte@sommaRow
  3112  0F95                     l2738:	
  3113                           ;./CustomLib/Serial.h: 23:         }
  3114                           
  3115                           
  3116                           ;./CustomLib/Serial.h: 28:     }
  3117  0F95  3001               	movlw	1
  3118  0F96  07B0               	addwf	BuildByte@i,f
  3119  0F97  1803               	skipnc
  3120  0F98  0AB1               	incf	BuildByte@i+1,f
  3121  0F99  3000               	movlw	0
  3122  0F9A  07B1               	addwf	BuildByte@i+1,f
  3123  0F9B                     l2740:	
  3124  0F9B  0831               	movf	BuildByte@i+1,w
  3125  0F9C  3A80               	xorlw	128
  3126  0F9D  00FF               	movwf	btemp+1
  3127  0F9E  3080               	movlw	128
  3128  0F9F  027F               	subwf	btemp+1,w
  3129  0FA0  1D03               	skipz
  3130  0FA1  2FA4               	goto	u2705
  3131  0FA2  3004               	movlw	4
  3132  0FA3  0230               	subwf	BuildByte@i,w
  3133  0FA4                     u2705:	
  3134  0FA4  1C03               	skipc
  3135  0FA5  2FA7               	goto	u2701
  3136  0FA6  2FA8               	goto	u2700
  3137  0FA7                     u2701:	
  3138  0FA7  2F5B               	goto	l2720
  3139  0FA8                     u2700:	
  3140  0FA8                     l2742:	
  3141                           
  3142                           ;./CustomLib/Serial.h: 31:     for (int i = 0; i < 8; i++)
  3143  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  3144  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  3145  0FAA  01B2               	clrf	BuildByte@i_342
  3146  0FAB  01B3               	clrf	BuildByte@i_342+1
  3147  0FAC                     l2748:	
  3148                           
  3149                           ;./CustomLib/Serial.h: 32:     {;./CustomLib/Serial.h: 33:         for (int y = 0; y < 4
      +                          ; y++)
  3150  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  3151  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  3152  0FAE  01AE               	clrf	BuildByte@y_343
  3153  0FAF  01AF               	clrf	BuildByte@y_343+1
  3154  0FB0                     l2754:	
  3155                           
  3156                           ;./CustomLib/Serial.h: 35:         {;./CustomLib/Serial.h: 36:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3157  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  3158  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  3159  0FB2  082E               	movf	BuildByte@y_343,w
  3160  0FB3  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3161  0FB4  0084               	movwf	4
  3162  0FB5  1383               	bcf	3,7	;select IRP bank0
  3163  0FB6  0800               	movf	0,w
  3164  0FB7  00A2               	movwf	??_BuildByte
  3165  0FB8  0A32               	incf	BuildByte@i_342,w
  3166  0FB9  2FBC               	goto	u2714
  3167  0FBA                     u2715:	
  3168  0FBA  1003               	clrc
  3169  0FBB  0CA2               	rrf	??_BuildByte,f
  3170  0FBC                     u2714:	
  3171  0FBC  3EFF               	addlw	-1
  3172  0FBD  1D03               	skipz
  3173  0FBE  2FBA               	goto	u2715
  3174  0FBF  0822               	movf	??_BuildByte,w
  3175  0FC0  3901               	andlw	1
  3176  0FC1  00A3               	movwf	??_BuildByte+1
  3177  0FC2  0823               	movf	??_BuildByte+1,w
  3178  0FC3  07AB               	addwf	BuildByte@sommaColumn,f
  3179  0FC4                     l2756:	
  3180                           
  3181                           ;./CustomLib/Serial.h: 37:         }
  3182  0FC4  3001               	movlw	1
  3183  0FC5  07AE               	addwf	BuildByte@y_343,f
  3184  0FC6  1803               	skipnc
  3185  0FC7  0AAF               	incf	BuildByte@y_343+1,f
  3186  0FC8  3000               	movlw	0
  3187  0FC9  07AF               	addwf	BuildByte@y_343+1,f
  3188  0FCA                     l2758:	
  3189  0FCA  082F               	movf	BuildByte@y_343+1,w
  3190  0FCB  3A80               	xorlw	128
  3191  0FCC  00FF               	movwf	btemp+1
  3192  0FCD  3080               	movlw	128
  3193  0FCE  027F               	subwf	btemp+1,w
  3194  0FCF  1D03               	skipz
  3195  0FD0  2FD3               	goto	u2725
  3196  0FD1  3004               	movlw	4
  3197  0FD2  022E               	subwf	BuildByte@y_343,w
  3198  0FD3                     u2725:	
  3199  0FD3  1C03               	skipc
  3200  0FD4  2FD6               	goto	u2721
  3201  0FD5  2FD7               	goto	u2720
  3202  0FD6                     u2721:	
  3203  0FD6  2FB0               	goto	l2754
  3204  0FD7                     u2720:	
  3205  0FD7                     l125:	
  3206                           
  3207                           ;./CustomLib/Serial.h: 38:         if (sommaColumn % 2 == 1)
  3208  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  3209  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  3210  0FD9  1C2B               	btfss	BuildByte@sommaColumn,0
  3211  0FDA  2FDC               	goto	u2731
  3212  0FDB  2FDD               	goto	u2730
  3213  0FDC                     u2731:	
  3214  0FDC  2FEA               	goto	l2762
  3215  0FDD                     u2730:	
  3216  0FDD                     l2760:	
  3217                           
  3218                           ;./CustomLib/Serial.h: 39:         {;./CustomLib/Serial.h: 40:             txByte[4] += 
      +                          0x01 << i;
  3219  0FDD  3001               	movlw	1
  3220  0FDE  00A2               	movwf	??_BuildByte
  3221  0FDF  0A32               	incf	BuildByte@i_342,w
  3222  0FE0  2FE3               	goto	u2744
  3223  0FE1                     u2745:	
  3224  0FE1  1003               	clrc
  3225  0FE2  0DA2               	rlf	??_BuildByte,f
  3226  0FE3                     u2744:	
  3227  0FE3  3EFF               	addlw	-1
  3228  0FE4  1D03               	skipz
  3229  0FE5  2FE1               	goto	u2745
  3230  0FE6  0822               	movf	??_BuildByte,w
  3231  0FE7  00A3               	movwf	??_BuildByte+1
  3232  0FE8  0823               	movf	??_BuildByte+1,w
  3233  0FE9  07A9               	addwf	BuildByte@txByte+4,f
  3234  0FEA                     l2762:	
  3235                           
  3236                           ;./CustomLib/Serial.h: 41:             sommaColumn = 0;
  3237  0FEA  01AB               	clrf	BuildByte@sommaColumn
  3238  0FEB                     l2766:	
  3239                           ;./CustomLib/Serial.h: 42:         }
  3240                           
  3241                           
  3242                           ;./CustomLib/Serial.h: 47:     }
  3243  0FEB  3001               	movlw	1
  3244  0FEC  07B2               	addwf	BuildByte@i_342,f
  3245  0FED  1803               	skipnc
  3246  0FEE  0AB3               	incf	BuildByte@i_342+1,f
  3247  0FEF  3000               	movlw	0
  3248  0FF0  07B3               	addwf	BuildByte@i_342+1,f
  3249  0FF1                     l2768:	
  3250  0FF1  0833               	movf	BuildByte@i_342+1,w
  3251  0FF2  3A80               	xorlw	128
  3252  0FF3  00FF               	movwf	btemp+1
  3253  0FF4  3080               	movlw	128
  3254  0FF5  027F               	subwf	btemp+1,w
  3255  0FF6  1D03               	skipz
  3256  0FF7  2FFA               	goto	u2755
  3257  0FF8  3008               	movlw	8
  3258  0FF9  0232               	subwf	BuildByte@i_342,w
  3259  0FFA                     u2755:	
  3260  0FFA  1C03               	skipc
  3261  0FFB  2FFD               	goto	u2751
  3262  0FFC  2FFE               	goto	u2750
  3263  0FFD                     u2751:	
  3264  0FFD  2FAC               	goto	l2748
  3265  0FFE                     u2750:	
  3266  0FFE                     l2770:	
  3267                           
  3268                           ;./CustomLib/Serial.h: 49:     return txByte;
  3269  0FFE  3025               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3270  0FFF                     l128:	
  3271  0FFF  0008               	return
  3272  1000                     __end_of_BuildByte:	
  3273                           
  3274                           	psect	text4
  3275  0C63                     __ptext4:	
  3276 ;; *************** function _map *****************
  3277 ;; Defined at:
  3278 ;;		line 1 in file "./CustomLib/Conversions.h"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;  x               2   16[BANK0 ] int 
  3281 ;;  in_min          2   18[BANK0 ] int 
  3282 ;;  in_max          2   20[BANK0 ] int 
  3283 ;;  out_min         2   22[BANK0 ] int 
  3284 ;;  out_max         2   24[BANK0 ] int 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;		None
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  2   16[BANK0 ] int 
  3289 ;; Registers used:
  3290 ;;		wreg, status,2, status,0, pclath, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3296 ;;      Params:         0      10       0       0       0
  3297 ;;      Locals:         0       0       0       0       0
  3298 ;;      Temps:          0       0       0       0       0
  3299 ;;      Totals:         0      10       0       0       0
  3300 ;;Total ram usage:       10 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    3
  3303 ;; This function calls:
  3304 ;;		___awdiv
  3305 ;;		___wmul
  3306 ;; This function is called by:
  3307 ;;		_main
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           
  3312                           ;psect for function _map
  3313  0C63                     _map:	
  3314  0C63                     l2914:	
  3315                           ;incstack = 0
  3316                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3317                           
  3318                           
  3319                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3320  0C63  1283               	bcf	3,5	;RP0=0, select bank0
  3321  0C64  1303               	bcf	3,6	;RP1=0, select bank0
  3322  0C65  0832               	movf	map@in_min,w
  3323  0C66  0234               	subwf	map@in_max,w
  3324  0C67  00A7               	movwf	___awdiv@divisor
  3325  0C68  0833               	movf	map@in_min+1,w
  3326  0C69  1C03               	skipc
  3327  0C6A  0A33               	incf	map@in_min+1,w
  3328  0C6B  0235               	subwf	map@in_max+1,w
  3329  0C6C  00A8               	movwf	___awdiv@divisor+1
  3330  0C6D  0832               	movf	map@in_min,w
  3331  0C6E  0230               	subwf	map@x,w
  3332  0C6F  00A0               	movwf	___wmul@multiplier
  3333  0C70  0833               	movf	map@in_min+1,w
  3334  0C71  1C03               	skipc
  3335  0C72  0A33               	incf	map@in_min+1,w
  3336  0C73  0231               	subwf	map@x+1,w
  3337  0C74  00A1               	movwf	___wmul@multiplier+1
  3338  0C75  0836               	movf	map@out_min,w
  3339  0C76  0238               	subwf	map@out_max,w
  3340  0C77  00A2               	movwf	___wmul@multiplicand
  3341  0C78  0837               	movf	map@out_min+1,w
  3342  0C79  1C03               	skipc
  3343  0C7A  0A37               	incf	map@out_min+1,w
  3344  0C7B  0239               	subwf	map@out_max+1,w
  3345  0C7C  00A3               	movwf	___wmul@multiplicand+1
  3346  0C7D  120A  158A  23DA  120A  158A  	fcall	___wmul
  3347  0C82  1283               	bcf	3,5	;RP0=0, select bank0
  3348  0C83  1303               	bcf	3,6	;RP1=0, select bank0
  3349  0C84  0821               	movf	?___wmul+1,w
  3350  0C85  00AA               	movwf	___awdiv@dividend+1
  3351  0C86  0820               	movf	?___wmul,w
  3352  0C87  00A9               	movwf	___awdiv@dividend
  3353  0C88  120A  158A  25C7  120A  158A  	fcall	___awdiv
  3354  0C8D  1283               	bcf	3,5	;RP0=0, select bank0
  3355  0C8E  1303               	bcf	3,6	;RP1=0, select bank0
  3356  0C8F  0836               	movf	map@out_min,w
  3357  0C90  0727               	addwf	?___awdiv,w
  3358  0C91  00B0               	movwf	?_map
  3359  0C92  0837               	movf	map@out_min+1,w
  3360  0C93  1803               	skipnc
  3361  0C94  0A37               	incf	map@out_min+1,w
  3362  0C95  0728               	addwf	?___awdiv+1,w
  3363  0C96  00B1               	movwf	?_map+1
  3364  0C97                     l83:	
  3365  0C97  0008               	return
  3366  0C98                     __end_of_map:	
  3367                           
  3368                           	psect	text5
  3369  0BDA                     __ptext5:	
  3370 ;; *************** function ___wmul *****************
  3371 ;; Defined at:
  3372 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3375 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;  product         2    4[BANK0 ] unsigned int 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  2    0[BANK0 ] unsigned int 
  3380 ;; Registers used:
  3381 ;;		wreg, status,2, status,0
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3387 ;;      Params:         0       4       0       0       0
  3388 ;;      Locals:         0       2       0       0       0
  3389 ;;      Temps:          0       0       0       0       0
  3390 ;;      Totals:         0       6       0       0       0
  3391 ;;Total ram usage:        6 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:    2
  3394 ;; This function calls:
  3395 ;;		Nothing
  3396 ;; This function is called by:
  3397 ;;		_map
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           
  3402                           ;psect for function ___wmul
  3403  0BDA                     ___wmul:	
  3404  0BDA                     l2778:	
  3405                           ;incstack = 0
  3406                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3407                           
  3408  0BDA  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0BDB  1303               	bcf	3,6	;RP1=0, select bank0
  3410  0BDC  01A4               	clrf	___wmul@product
  3411  0BDD  01A5               	clrf	___wmul@product+1
  3412  0BDE                     l2780:	
  3413  0BDE  1C20               	btfss	___wmul@multiplier,0
  3414  0BDF  2BE1               	goto	u2771
  3415  0BE0  2BE2               	goto	u2770
  3416  0BE1                     u2771:	
  3417  0BE1  2BE8               	goto	l442
  3418  0BE2                     u2770:	
  3419  0BE2                     l2782:	
  3420  0BE2  0822               	movf	___wmul@multiplicand,w
  3421  0BE3  07A4               	addwf	___wmul@product,f
  3422  0BE4  1803               	skipnc
  3423  0BE5  0AA5               	incf	___wmul@product+1,f
  3424  0BE6  0823               	movf	___wmul@multiplicand+1,w
  3425  0BE7  07A5               	addwf	___wmul@product+1,f
  3426  0BE8                     l442:	
  3427  0BE8  3001               	movlw	1
  3428  0BE9                     u2785:	
  3429  0BE9  1003               	clrc
  3430  0BEA  0DA2               	rlf	___wmul@multiplicand,f
  3431  0BEB  0DA3               	rlf	___wmul@multiplicand+1,f
  3432  0BEC  3EFF               	addlw	-1
  3433  0BED  1D03               	skipz
  3434  0BEE  2BE9               	goto	u2785
  3435  0BEF                     l2784:	
  3436  0BEF  3001               	movlw	1
  3437  0BF0                     u2795:	
  3438  0BF0  1003               	clrc
  3439  0BF1  0CA1               	rrf	___wmul@multiplier+1,f
  3440  0BF2  0CA0               	rrf	___wmul@multiplier,f
  3441  0BF3  3EFF               	addlw	-1
  3442  0BF4  1D03               	skipz
  3443  0BF5  2BF0               	goto	u2795
  3444  0BF6                     l2786:	
  3445  0BF6  0820               	movf	___wmul@multiplier,w
  3446  0BF7  0421               	iorwf	___wmul@multiplier+1,w
  3447  0BF8  1D03               	btfss	3,2
  3448  0BF9  2BFB               	goto	u2801
  3449  0BFA  2BFC               	goto	u2800
  3450  0BFB                     u2801:	
  3451  0BFB  2BDE               	goto	l2780
  3452  0BFC                     u2800:	
  3453  0BFC                     l2788:	
  3454  0BFC  0825               	movf	___wmul@product+1,w
  3455  0BFD  00A1               	movwf	?___wmul+1
  3456  0BFE  0824               	movf	___wmul@product,w
  3457  0BFF  00A0               	movwf	?___wmul
  3458  0C00                     l444:	
  3459  0C00  0008               	return
  3460  0C01                     __end_of___wmul:	
  3461                           
  3462                           	psect	text6
  3463  0B42                     __ptext6:	
  3464 ;; *************** function _init_ADC *****************
  3465 ;; Defined at:
  3466 ;;		line 355 in file "main.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;		None
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;		None
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, status,2
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3480 ;;      Params:         0       0       0       0       0
  3481 ;;      Locals:         0       0       0       0       0
  3482 ;;      Temps:          0       1       0       0       0
  3483 ;;      Totals:         0       1       0       0       0
  3484 ;;Total ram usage:        1 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    2
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_main
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           
  3495                           ;psect for function _init_ADC
  3496  0B42                     _init_ADC:	
  3497  0B42                     l2970:	
  3498                           ;incstack = 0
  3499                           ; Regs used in _init_ADC: [wreg+status,2]
  3500                           
  3501                           
  3502                           ;main.c: 357:     TRISA = 0xE3;
  3503  0B42  30E3               	movlw	227
  3504  0B43  1683               	bsf	3,5	;RP0=1, select bank1
  3505  0B44  1303               	bcf	3,6	;RP1=0, select bank1
  3506  0B45  0085               	movwf	5	;volatile
  3507  0B46                     l2972:	
  3508                           
  3509                           ;main.c: 358:     ADCON0 = 0x00;
  3510  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  3511  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  3512  0B48  019F               	clrf	31	;volatile
  3513  0B49                     l2974:	
  3514                           
  3515                           ;main.c: 359:     ADCON1 = 0x80;
  3516  0B49  3080               	movlw	128
  3517  0B4A  1683               	bsf	3,5	;RP0=1, select bank1
  3518  0B4B  1303               	bcf	3,6	;RP1=0, select bank1
  3519  0B4C  009F               	movwf	31	;volatile
  3520  0B4D                     l2976:	
  3521                           
  3522                           ;main.c: 360:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3523  0B4D  3019               	movlw	25
  3524  0B4E  1283               	bcf	3,5	;RP0=0, select bank0
  3525  0B4F  1303               	bcf	3,6	;RP1=0, select bank0
  3526  0B50  00A0               	movwf	??_init_ADC
  3527  0B51                     u3647:	
  3528  0B51  0BA0               	decfsz	??_init_ADC,f
  3529  0B52  2B51               	goto	u3647
  3530  0B53  2B54               	nop2
  3531  0B54                     l266:	
  3532  0B54  0008               	return
  3533  0B55                     __end_of_init_ADC:	
  3534                           
  3535                           	psect	text7
  3536  06A6                     __ptext7:	
  3537 ;; *************** function _bitParita *****************
  3538 ;; Defined at:
  3539 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  rx              1    wreg     PTR unsigned char 
  3542 ;;		 -> dataFromGateway(15), 
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  rx              1   17[BANK0 ] PTR unsigned char 
  3545 ;;		 -> dataFromGateway(15), 
  3546 ;;  y               2   15[BANK0 ] int 
  3547 ;;  y               2   13[BANK0 ] int 
  3548 ;;  i               2   20[BANK0 ] int 
  3549 ;;  i               2   18[BANK0 ] int 
  3550 ;;  errorRow        1   12[BANK0 ] unsigned char 
  3551 ;;  error           1   11[BANK0 ] unsigned char 
  3552 ;;  errorColumn     1   10[BANK0 ] unsigned char 
  3553 ;;  sommaColumn     1    9[BANK0 ] unsigned char 
  3554 ;;  sommaRow        1    8[BANK0 ] unsigned char 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3564 ;;      Params:         0       0       0       0       0
  3565 ;;      Locals:         0      14       0       0       0
  3566 ;;      Temps:          0       4       0       0       0
  3567 ;;      Totals:         0      18       0       0       0
  3568 ;;Total ram usage:       18 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    3
  3571 ;; This function calls:
  3572 ;;		_bitChange
  3573 ;; This function is called by:
  3574 ;;		_main
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           
  3579                           ;psect for function _bitParita
  3580  06A6                     _bitParita:	
  3581                           
  3582                           ;incstack = 0
  3583                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3584                           ;bitParita@rx stored from wreg
  3585  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  3586  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  3587  06A8  00B1               	movwf	bitParita@rx
  3588  06A9                     l2918:	
  3589                           
  3590                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3591  06A9  01AB               	clrf	bitParita@error
  3592                           
  3593                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3594  06AA  01A8               	clrf	bitParita@sommaRow
  3595                           
  3596                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3597  06AB  01AC               	clrf	bitParita@errorRow
  3598                           
  3599                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  3600  06AC  01A9               	clrf	bitParita@sommaColumn
  3601                           
  3602                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  3603  06AD  01AA               	clrf	bitParita@errorColumn
  3604                           
  3605                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  3606  06AE  01B2               	clrf	bitParita@i
  3607  06AF  01B3               	clrf	bitParita@i+1
  3608  06B0                     l2924:	
  3609                           
  3610                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  3611  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  3612  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  3613  06B2  01AD               	clrf	bitParita@y
  3614  06B3  01AE               	clrf	bitParita@y+1
  3615  06B4                     l2930:	
  3616                           
  3617                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  3618  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  3619  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  3620  06B6  0832               	movf	bitParita@i,w
  3621  06B7  0731               	addwf	bitParita@rx,w
  3622  06B8  00A4               	movwf	??_bitParita
  3623  06B9  0824               	movf	??_bitParita,w
  3624  06BA  0084               	movwf	4
  3625  06BB  1383               	bcf	3,7	;select IRP bank0
  3626  06BC  0800               	movf	0,w
  3627  06BD  00A5               	movwf	??_bitParita+1
  3628  06BE  0A2D               	incf	bitParita@y,w
  3629  06BF  2EC2               	goto	u3104
  3630  06C0                     u3105:	
  3631  06C0  1003               	clrc
  3632  06C1  0CA5               	rrf	??_bitParita+1,f
  3633  06C2                     u3104:	
  3634  06C2  3EFF               	addlw	-1
  3635  06C3  1D03               	skipz
  3636  06C4  2EC0               	goto	u3105
  3637  06C5  0825               	movf	??_bitParita+1,w
  3638  06C6  3901               	andlw	1
  3639  06C7  00A6               	movwf	??_bitParita+2
  3640  06C8  0826               	movf	??_bitParita+2,w
  3641  06C9  07A8               	addwf	bitParita@sommaRow,f
  3642  06CA                     l2932:	
  3643                           
  3644                           ;./CustomLib/BitsFlow.h: 26:         }
  3645  06CA  3001               	movlw	1
  3646  06CB  07AD               	addwf	bitParita@y,f
  3647  06CC  1803               	skipnc
  3648  06CD  0AAE               	incf	bitParita@y+1,f
  3649  06CE  3000               	movlw	0
  3650  06CF  07AE               	addwf	bitParita@y+1,f
  3651  06D0                     l2934:	
  3652  06D0  082E               	movf	bitParita@y+1,w
  3653  06D1  3A80               	xorlw	128
  3654  06D2  00FF               	movwf	btemp+1
  3655  06D3  3080               	movlw	128
  3656  06D4  027F               	subwf	btemp+1,w
  3657  06D5  1D03               	skipz
  3658  06D6  2ED9               	goto	u3115
  3659  06D7  3008               	movlw	8
  3660  06D8  022D               	subwf	bitParita@y,w
  3661  06D9                     u3115:	
  3662  06D9  1C03               	skipc
  3663  06DA  2EDC               	goto	u3111
  3664  06DB  2EDD               	goto	u3110
  3665  06DC                     u3111:	
  3666  06DC  2EB4               	goto	l2930
  3667  06DD                     u3110:	
  3668  06DD                     l105:	
  3669                           
  3670                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  3671  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  3672  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  3673  06DF  1C28               	btfss	bitParita@sommaRow,0
  3674  06E0  2EE2               	goto	u3121
  3675  06E1  2EE3               	goto	u3120
  3676  06E2                     u3121:	
  3677  06E2  2EE9               	goto	l106
  3678  06E3                     u3120:	
  3679  06E3                     l2936:	
  3680                           
  3681                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  3682  06E3  01AB               	clrf	bitParita@error
  3683  06E4  0AAB               	incf	bitParita@error,f
  3684  06E5                     l2938:	
  3685                           
  3686                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  3687  06E5  0832               	movf	bitParita@i,w
  3688  06E6  00A4               	movwf	??_bitParita
  3689  06E7  0824               	movf	??_bitParita,w
  3690  06E8  00AC               	movwf	bitParita@errorRow
  3691  06E9                     l106:	
  3692                           ;./CustomLib/BitsFlow.h: 31:         }
  3693                           
  3694                           
  3695                           ;./CustomLib/BitsFlow.h: 32:     }
  3696  06E9  3001               	movlw	1
  3697  06EA  07B2               	addwf	bitParita@i,f
  3698  06EB  1803               	skipnc
  3699  06EC  0AB3               	incf	bitParita@i+1,f
  3700  06ED  3000               	movlw	0
  3701  06EE  07B3               	addwf	bitParita@i+1,f
  3702  06EF                     l2940:	
  3703  06EF  0833               	movf	bitParita@i+1,w
  3704  06F0  3A80               	xorlw	128
  3705  06F1  00FF               	movwf	btemp+1
  3706  06F2  3080               	movlw	128
  3707  06F3  027F               	subwf	btemp+1,w
  3708  06F4  1D03               	skipz
  3709  06F5  2EF8               	goto	u3135
  3710  06F6  3005               	movlw	5
  3711  06F7  0232               	subwf	bitParita@i,w
  3712  06F8                     u3135:	
  3713  06F8  1C03               	skipc
  3714  06F9  2EFB               	goto	u3131
  3715  06FA  2EFC               	goto	u3130
  3716  06FB                     u3131:	
  3717  06FB  2EB0               	goto	l2924
  3718  06FC                     u3130:	
  3719  06FC                     l2942:	
  3720                           
  3721                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  3722  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  3723  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  3724  06FE  01B4               	clrf	bitParita@i_330
  3725  06FF  01B5               	clrf	bitParita@i_330+1
  3726  0700                     l2948:	
  3727                           
  3728                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  3729  0700  1283               	bcf	3,5	;RP0=0, select bank0
  3730  0701  1303               	bcf	3,6	;RP1=0, select bank0
  3731  0702  01AF               	clrf	bitParita@y_331
  3732  0703  01B0               	clrf	bitParita@y_331+1
  3733  0704                     l2954:	
  3734                           
  3735                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  3736  0704  1283               	bcf	3,5	;RP0=0, select bank0
  3737  0705  1303               	bcf	3,6	;RP1=0, select bank0
  3738  0706  082F               	movf	bitParita@y_331,w
  3739  0707  0731               	addwf	bitParita@rx,w
  3740  0708  00A4               	movwf	??_bitParita
  3741  0709  0824               	movf	??_bitParita,w
  3742  070A  0084               	movwf	4
  3743  070B  1383               	bcf	3,7	;select IRP bank0
  3744  070C  0800               	movf	0,w
  3745  070D  00A5               	movwf	??_bitParita+1
  3746  070E  0A34               	incf	bitParita@i_330,w
  3747  070F  2F12               	goto	u3144
  3748  0710                     u3145:	
  3749  0710  1003               	clrc
  3750  0711  0CA5               	rrf	??_bitParita+1,f
  3751  0712                     u3144:	
  3752  0712  3EFF               	addlw	-1
  3753  0713  1D03               	skipz
  3754  0714  2F10               	goto	u3145
  3755  0715  0825               	movf	??_bitParita+1,w
  3756  0716  3901               	andlw	1
  3757  0717  00A6               	movwf	??_bitParita+2
  3758  0718  0826               	movf	??_bitParita+2,w
  3759  0719  07A9               	addwf	bitParita@sommaColumn,f
  3760  071A                     l2956:	
  3761                           
  3762                           ;./CustomLib/BitsFlow.h: 39:         }
  3763  071A  3001               	movlw	1
  3764  071B  07AF               	addwf	bitParita@y_331,f
  3765  071C  1803               	skipnc
  3766  071D  0AB0               	incf	bitParita@y_331+1,f
  3767  071E  3000               	movlw	0
  3768  071F  07B0               	addwf	bitParita@y_331+1,f
  3769  0720                     l2958:	
  3770  0720  0830               	movf	bitParita@y_331+1,w
  3771  0721  3A80               	xorlw	128
  3772  0722  00FF               	movwf	btemp+1
  3773  0723  3080               	movlw	128
  3774  0724  027F               	subwf	btemp+1,w
  3775  0725  1D03               	skipz
  3776  0726  2F29               	goto	u3155
  3777  0727  3004               	movlw	4
  3778  0728  022F               	subwf	bitParita@y_331,w
  3779  0729                     u3155:	
  3780  0729  1C03               	skipc
  3781  072A  2F2C               	goto	u3151
  3782  072B  2F2D               	goto	u3150
  3783  072C                     u3151:	
  3784  072C  2F04               	goto	l2954
  3785  072D                     u3150:	
  3786  072D                     l110:	
  3787                           
  3788                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  3789  072D  1283               	bcf	3,5	;RP0=0, select bank0
  3790  072E  1303               	bcf	3,6	;RP1=0, select bank0
  3791  072F  1C29               	btfss	bitParita@sommaColumn,0
  3792  0730  2F32               	goto	u3161
  3793  0731  2F33               	goto	u3160
  3794  0732                     u3161:	
  3795  0732  2F39               	goto	l111
  3796  0733                     u3160:	
  3797  0733                     l2960:	
  3798                           
  3799                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  3800  0733  01AB               	clrf	bitParita@error
  3801  0734  0AAB               	incf	bitParita@error,f
  3802  0735                     l2962:	
  3803                           
  3804                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  3805  0735  0834               	movf	bitParita@i_330,w
  3806  0736  00A4               	movwf	??_bitParita
  3807  0737  0824               	movf	??_bitParita,w
  3808  0738  00AA               	movwf	bitParita@errorColumn
  3809  0739                     l111:	
  3810                           ;./CustomLib/BitsFlow.h: 44:         }
  3811                           
  3812                           
  3813                           ;./CustomLib/BitsFlow.h: 45:     }
  3814  0739  3001               	movlw	1
  3815  073A  07B4               	addwf	bitParita@i_330,f
  3816  073B  1803               	skipnc
  3817  073C  0AB5               	incf	bitParita@i_330+1,f
  3818  073D  3000               	movlw	0
  3819  073E  07B5               	addwf	bitParita@i_330+1,f
  3820  073F                     l2964:	
  3821  073F  0835               	movf	bitParita@i_330+1,w
  3822  0740  3A80               	xorlw	128
  3823  0741  00FF               	movwf	btemp+1
  3824  0742  3080               	movlw	128
  3825  0743  027F               	subwf	btemp+1,w
  3826  0744  1D03               	skipz
  3827  0745  2F48               	goto	u3175
  3828  0746  3008               	movlw	8
  3829  0747  0234               	subwf	bitParita@i_330,w
  3830  0748                     u3175:	
  3831  0748  1C03               	skipc
  3832  0749  2F4B               	goto	u3171
  3833  074A  2F4C               	goto	u3170
  3834  074B                     u3171:	
  3835  074B  2F00               	goto	l2948
  3836  074C                     u3170:	
  3837  074C                     l2966:	
  3838                           
  3839                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  3840  074C  1283               	bcf	3,5	;RP0=0, select bank0
  3841  074D  1303               	bcf	3,6	;RP1=0, select bank0
  3842  074E  082B               	movf	bitParita@error,w
  3843  074F  1903               	btfsc	3,2
  3844  0750  2F52               	goto	u3181
  3845  0751  2F53               	goto	u3180
  3846  0752                     u3181:	
  3847  0752  2F6E               	goto	l113
  3848  0753                     u3180:	
  3849  0753                     l2968:	
  3850                           
  3851                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  3852  0753  082A               	movf	bitParita@errorColumn,w
  3853  0754  00A4               	movwf	??_bitParita
  3854  0755  0824               	movf	??_bitParita,w
  3855  0756  00A0               	movwf	bitChange@n
  3856  0757  082C               	movf	bitParita@errorRow,w
  3857  0758  0731               	addwf	bitParita@rx,w
  3858  0759  00A5               	movwf	??_bitParita+1
  3859  075A  0825               	movf	??_bitParita+1,w
  3860  075B  0084               	movwf	4
  3861  075C  1383               	bcf	3,7	;select IRP bank0
  3862  075D  0800               	movf	0,w
  3863  075E  120A  158A  2401  120A  118A  	fcall	_bitChange
  3864  0763  1283               	bcf	3,5	;RP0=0, select bank0
  3865  0764  1303               	bcf	3,6	;RP1=0, select bank0
  3866  0765  00A6               	movwf	??_bitParita+2
  3867  0766  082C               	movf	bitParita@errorRow,w
  3868  0767  0731               	addwf	bitParita@rx,w
  3869  0768  00A7               	movwf	??_bitParita+3
  3870  0769  0827               	movf	??_bitParita+3,w
  3871  076A  0084               	movwf	4
  3872  076B  0826               	movf	??_bitParita+2,w
  3873  076C  1383               	bcf	3,7	;select IRP bank0
  3874  076D  0080               	movwf	0
  3875  076E                     l113:	
  3876  076E  0008               	return
  3877  076F                     __end_of_bitParita:	
  3878                           
  3879                           	psect	text8
  3880  0C01                     __ptext8:	
  3881 ;; *************** function _bitChange *****************
  3882 ;; Defined at:
  3883 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  dato            1    wreg     unsigned char 
  3886 ;;  n               1    0[BANK0 ] unsigned char 
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  dato            1    3[BANK0 ] unsigned char 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      unsigned char 
  3891 ;; Registers used:
  3892 ;;		wreg, status,2, status,0
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3898 ;;      Params:         0       1       0       0       0
  3899 ;;      Locals:         0       1       0       0       0
  3900 ;;      Temps:          0       2       0       0       0
  3901 ;;      Totals:         0       4       0       0       0
  3902 ;;Total ram usage:        4 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    2
  3905 ;; This function calls:
  3906 ;;		Nothing
  3907 ;; This function is called by:
  3908 ;;		_bitParita
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           
  3913                           ;psect for function _bitChange
  3914  0C01                     _bitChange:	
  3915                           
  3916                           ;incstack = 0
  3917                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  3918                           ;bitChange@dato stored from wreg
  3919  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  3920  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  3921  0C03  00A3               	movwf	bitChange@dato
  3922  0C04                     l2694:	
  3923                           
  3924                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  3925  0C04  3001               	movlw	1
  3926  0C05  00A1               	movwf	??_bitChange
  3927  0C06  0A20               	incf	bitChange@n,w
  3928  0C07  2C0A               	goto	u2624
  3929  0C08                     u2625:	
  3930  0C08  1003               	clrc
  3931  0C09  0DA1               	rlf	??_bitChange,f
  3932  0C0A                     u2624:	
  3933  0C0A  3EFF               	addlw	-1
  3934  0C0B  1D03               	skipz
  3935  0C0C  2C08               	goto	u2625
  3936  0C0D  0821               	movf	??_bitChange,w
  3937  0C0E  0523               	andwf	bitChange@dato,w
  3938  0C0F  1903               	btfsc	3,2
  3939  0C10  2C12               	goto	u2631
  3940  0C11  2C13               	goto	u2630
  3941  0C12                     u2631:	
  3942  0C12  2C22               	goto	l2702
  3943  0C13                     u2630:	
  3944  0C13                     l2696:	
  3945                           
  3946                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  3947  0C13  3001               	movlw	1
  3948  0C14  00A1               	movwf	??_bitChange
  3949  0C15  0A20               	incf	bitChange@n,w
  3950  0C16  2C19               	goto	u2644
  3951  0C17                     u2645:	
  3952  0C17  1003               	clrc
  3953  0C18  0DA1               	rlf	??_bitChange,f
  3954  0C19                     u2644:	
  3955  0C19  3EFF               	addlw	-1
  3956  0C1A  1D03               	skipz
  3957  0C1B  2C17               	goto	u2645
  3958  0C1C  0821               	movf	??_bitChange,w
  3959  0C1D  00A2               	movwf	??_bitChange+1
  3960  0C1E  0822               	movf	??_bitChange+1,w
  3961  0C1F  04A3               	iorwf	bitChange@dato,f
  3962  0C20  0823               	movf	bitChange@dato,w
  3963  0C21  2C31               	goto	l98
  3964  0C22                     l2702:	
  3965                           
  3966                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  3967  0C22  3001               	movlw	1
  3968  0C23  00A1               	movwf	??_bitChange
  3969  0C24  0A20               	incf	bitChange@n,w
  3970  0C25  2C28               	goto	u2654
  3971  0C26                     u2655:	
  3972  0C26  1003               	clrc
  3973  0C27  0DA1               	rlf	??_bitChange,f
  3974  0C28                     u2654:	
  3975  0C28  3EFF               	addlw	-1
  3976  0C29  1D03               	skipz
  3977  0C2A  2C26               	goto	u2655
  3978  0C2B  0821               	movf	??_bitChange,w
  3979  0C2C  3AFF               	xorlw	255
  3980  0C2D  00A2               	movwf	??_bitChange+1
  3981  0C2E  0822               	movf	??_bitChange+1,w
  3982  0C2F  05A3               	andwf	bitChange@dato,f
  3983  0C30  0823               	movf	bitChange@dato,w
  3984  0C31                     l98:	
  3985  0C31  0008               	return
  3986  0C32                     __end_of_bitChange:	
  3987                           
  3988                           	psect	text9
  3989  0B7D                     __ptext9:	
  3990 ;; *************** function ___bmul *****************
  3991 ;; Defined at:
  3992 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;  multiplier      1    wreg     unsigned char 
  3995 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3998 ;;  product         1    2[BANK0 ] unsigned char 
  3999 ;; Return value:  Size  Location     Type
  4000 ;;                  1    wreg      unsigned char 
  4001 ;; Registers used:
  4002 ;;		wreg, status,2, status,0
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4008 ;;      Params:         0       1       0       0       0
  4009 ;;      Locals:         0       2       0       0       0
  4010 ;;      Temps:          0       1       0       0       0
  4011 ;;      Totals:         0       4       0       0       0
  4012 ;;Total ram usage:        4 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    2
  4015 ;; This function calls:
  4016 ;;		Nothing
  4017 ;; This function is called by:
  4018 ;;		_main
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function ___bmul
  4024  0B7D                     ___bmul:	
  4025                           
  4026                           ;incstack = 0
  4027                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4028                           ;___bmul@multiplier stored from wreg
  4029  0B7D  1283               	bcf	3,5	;RP0=0, select bank0
  4030  0B7E  1303               	bcf	3,6	;RP1=0, select bank0
  4031  0B7F  00A3               	movwf	___bmul@multiplier
  4032  0B80                     l3076:	
  4033  0B80  01A2               	clrf	___bmul@product
  4034  0B81                     l3078:	
  4035  0B81  1C23               	btfss	___bmul@multiplier,0
  4036  0B82  2B84               	goto	u3261
  4037  0B83  2B85               	goto	u3260
  4038  0B84                     u3261:	
  4039  0B84  2B89               	goto	l3082
  4040  0B85                     u3260:	
  4041  0B85                     l3080:	
  4042  0B85  0820               	movf	___bmul@multiplicand,w
  4043  0B86  00A1               	movwf	??___bmul
  4044  0B87  0821               	movf	??___bmul,w
  4045  0B88  07A2               	addwf	___bmul@product,f
  4046  0B89                     l3082:	
  4047  0B89  1003               	clrc
  4048  0B8A  0DA0               	rlf	___bmul@multiplicand,f
  4049  0B8B                     l3084:	
  4050  0B8B  1003               	clrc
  4051  0B8C  0CA3               	rrf	___bmul@multiplier,f
  4052  0B8D  0823               	movf	___bmul@multiplier,w
  4053  0B8E  1D03               	btfss	3,2
  4054  0B8F  2B91               	goto	u3271
  4055  0B90  2B92               	goto	u3270
  4056  0B91                     u3271:	
  4057  0B91  2B81               	goto	l3078
  4058  0B92                     u3270:	
  4059  0B92                     l3086:	
  4060  0B92  0822               	movf	___bmul@product,w
  4061  0B93                     l468:	
  4062  0B93  0008               	return
  4063  0B94                     __end_of___bmul:	
  4064                           
  4065                           	psect	text10
  4066  0C98                     __ptext10:	
  4067 ;; *************** function _UART_Init *****************
  4068 ;; Defined at:
  4069 ;;		line 374 in file "main.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  baudrate        2   15[BANK0 ] int 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg, status,2, status,0, pclath, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4083 ;;      Params:         0       2       0       0       0
  4084 ;;      Locals:         0       0       0       0       0
  4085 ;;      Temps:          0       4       0       0       0
  4086 ;;      Totals:         0       6       0       0       0
  4087 ;;Total ram usage:        6 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    3
  4090 ;; This function calls:
  4091 ;;		___aldiv
  4092 ;; This function is called by:
  4093 ;;		_main
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           
  4098                           ;psect for function _UART_Init
  4099  0C98                     _UART_Init:	
  4100  0C98                     l2978:	
  4101                           ;incstack = 0
  4102                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4103                           
  4104                           
  4105                           ;main.c: 374: void UART_Init(int baudrate);main.c: 375: {;main.c: 376:     TRISCbits.TRI
      +                          SC6 = 0;
  4106  0C98  1683               	bsf	3,5	;RP0=1, select bank1
  4107  0C99  1303               	bcf	3,6	;RP1=0, select bank1
  4108  0C9A  1307               	bcf	7,6	;volatile
  4109                           
  4110                           ;main.c: 377:     TXSTAbits.TXEN = 1;
  4111  0C9B  1698               	bsf	24,5	;volatile
  4112                           
  4113                           ;main.c: 378:     RCSTAbits.SPEN = 1;
  4114  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  4115  0C9D  1303               	bcf	3,6	;RP1=0, select bank0
  4116  0C9E  1798               	bsf	24,7	;volatile
  4117                           
  4118                           ;main.c: 379:     RCSTAbits.CREN = 1;
  4119  0C9F  1618               	bsf	24,4	;volatile
  4120  0CA0                     l2980:	
  4121                           
  4122                           ;main.c: 380:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4123  0CA0  082F               	movf	UART_Init@baudrate,w
  4124  0CA1  00B1               	movwf	??_UART_Init
  4125  0CA2  0830               	movf	UART_Init@baudrate+1,w
  4126  0CA3  00B2               	movwf	??_UART_Init+1
  4127  0CA4  3000               	movlw	0
  4128  0CA5  1BB2               	btfsc	??_UART_Init+1,7
  4129  0CA6  30FF               	movlw	255
  4130  0CA7  00B3               	movwf	??_UART_Init+2
  4131  0CA8  00B4               	movwf	??_UART_Init+3
  4132  0CA9  3006               	movlw	6
  4133  0CAA                     u3195:	
  4134  0CAA  1003               	clrc
  4135  0CAB  0DB1               	rlf	??_UART_Init,f
  4136  0CAC  0DB2               	rlf	??_UART_Init+1,f
  4137  0CAD  0DB3               	rlf	??_UART_Init+2,f
  4138  0CAE  0DB4               	rlf	??_UART_Init+3,f
  4139  0CAF                     u3190:	
  4140  0CAF  3EFF               	addlw	-1
  4141  0CB0  1D03               	skipz
  4142  0CB1  2CAA               	goto	u3195
  4143  0CB2  0834               	movf	??_UART_Init+3,w
  4144  0CB3  00A3               	movwf	___aldiv@divisor+3
  4145  0CB4  0833               	movf	??_UART_Init+2,w
  4146  0CB5  00A2               	movwf	___aldiv@divisor+2
  4147  0CB6  0832               	movf	??_UART_Init+1,w
  4148  0CB7  00A1               	movwf	___aldiv@divisor+1
  4149  0CB8  0831               	movf	??_UART_Init,w
  4150  0CB9  00A0               	movwf	___aldiv@divisor
  4151  0CBA  3001               	movlw	1
  4152  0CBB  00A7               	movwf	___aldiv@dividend+3
  4153  0CBC  30E8               	movlw	232
  4154  0CBD  00A6               	movwf	___aldiv@dividend+2
  4155  0CBE  3048               	movlw	72
  4156  0CBF  00A5               	movwf	___aldiv@dividend+1
  4157  0CC0  3000               	movlw	0
  4158  0CC1  00A4               	movwf	___aldiv@dividend
  4159  0CC2  120A  158A  269B  120A  158A  	fcall	___aldiv
  4160  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  4161  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  4162  0CC9  0820               	movf	?___aldiv,w
  4163  0CCA  3EFF               	addlw	255
  4164  0CCB  1683               	bsf	3,5	;RP0=1, select bank1
  4165  0CCC  1303               	bcf	3,6	;RP1=0, select bank1
  4166  0CCD  0099               	movwf	25	;volatile
  4167  0CCE                     l2982:	
  4168                           
  4169                           ;main.c: 381:     INTCONbits.GIE = 1;
  4170  0CCE  178B               	bsf	11,7	;volatile
  4171  0CCF                     l2984:	
  4172                           
  4173                           ;main.c: 382:     INTCONbits.PEIE = 1;
  4174  0CCF  170B               	bsf	11,6	;volatile
  4175  0CD0                     l2986:	
  4176                           
  4177                           ;main.c: 383:     PIE1bits.RCIE = 1;
  4178  0CD0  168C               	bsf	12,5	;volatile
  4179  0CD1                     l275:	
  4180  0CD1  0008               	return
  4181  0CD2                     __end_of_UART_Init:	
  4182                           
  4183                           	psect	text11
  4184  0E9B                     __ptext11:	
  4185 ;; *************** function ___aldiv *****************
  4186 ;; Defined at:
  4187 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;  divisor         4    0[BANK0 ] long 
  4190 ;;  dividend        4    4[BANK0 ] long 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  quotient        4   11[BANK0 ] long 
  4193 ;;  sign            1   10[BANK0 ] unsigned char 
  4194 ;;  counter         1    9[BANK0 ] unsigned char 
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  4    0[BANK0 ] long 
  4197 ;; Registers used:
  4198 ;;		wreg, status,2, status,0
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4204 ;;      Params:         0       8       0       0       0
  4205 ;;      Locals:         0       6       0       0       0
  4206 ;;      Temps:          0       1       0       0       0
  4207 ;;      Totals:         0      15       0       0       0
  4208 ;;Total ram usage:       15 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    2
  4211 ;; This function calls:
  4212 ;;		Nothing
  4213 ;; This function is called by:
  4214 ;;		_UART_Init
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           
  4219                           ;psect for function ___aldiv
  4220  0E9B                     ___aldiv:	
  4221  0E9B                     l2792:	
  4222                           ;incstack = 0
  4223                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4224                           
  4225  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  4226  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  4227  0E9D  01AA               	clrf	___aldiv@sign
  4228  0E9E                     l2794:	
  4229  0E9E  1FA3               	btfss	___aldiv@divisor+3,7
  4230  0E9F  2EA1               	goto	u2811
  4231  0EA0  2EA2               	goto	u2810
  4232  0EA1                     u2811:	
  4233  0EA1  2EAF               	goto	l507
  4234  0EA2                     u2810:	
  4235  0EA2                     l2796:	
  4236  0EA2  09A0               	comf	___aldiv@divisor,f
  4237  0EA3  09A1               	comf	___aldiv@divisor+1,f
  4238  0EA4  09A2               	comf	___aldiv@divisor+2,f
  4239  0EA5  09A3               	comf	___aldiv@divisor+3,f
  4240  0EA6  0AA0               	incf	___aldiv@divisor,f
  4241  0EA7  1903               	skipnz
  4242  0EA8  0AA1               	incf	___aldiv@divisor+1,f
  4243  0EA9  1903               	skipnz
  4244  0EAA  0AA2               	incf	___aldiv@divisor+2,f
  4245  0EAB  1903               	skipnz
  4246  0EAC  0AA3               	incf	___aldiv@divisor+3,f
  4247  0EAD  01AA               	clrf	___aldiv@sign
  4248  0EAE  0AAA               	incf	___aldiv@sign,f
  4249  0EAF                     l507:	
  4250  0EAF  1FA7               	btfss	___aldiv@dividend+3,7
  4251  0EB0  2EB2               	goto	u2821
  4252  0EB1  2EB3               	goto	u2820
  4253  0EB2                     u2821:	
  4254  0EB2  2EC2               	goto	l2802
  4255  0EB3                     u2820:	
  4256  0EB3                     l2798:	
  4257  0EB3  09A4               	comf	___aldiv@dividend,f
  4258  0EB4  09A5               	comf	___aldiv@dividend+1,f
  4259  0EB5  09A6               	comf	___aldiv@dividend+2,f
  4260  0EB6  09A7               	comf	___aldiv@dividend+3,f
  4261  0EB7  0AA4               	incf	___aldiv@dividend,f
  4262  0EB8  1903               	skipnz
  4263  0EB9  0AA5               	incf	___aldiv@dividend+1,f
  4264  0EBA  1903               	skipnz
  4265  0EBB  0AA6               	incf	___aldiv@dividend+2,f
  4266  0EBC  1903               	skipnz
  4267  0EBD  0AA7               	incf	___aldiv@dividend+3,f
  4268  0EBE                     l2800:	
  4269  0EBE  3001               	movlw	1
  4270  0EBF  00A8               	movwf	??___aldiv
  4271  0EC0  0828               	movf	??___aldiv,w
  4272  0EC1  06AA               	xorwf	___aldiv@sign,f
  4273  0EC2                     l2802:	
  4274  0EC2  3000               	movlw	0
  4275  0EC3  00AE               	movwf	___aldiv@quotient+3
  4276  0EC4  3000               	movlw	0
  4277  0EC5  00AD               	movwf	___aldiv@quotient+2
  4278  0EC6  3000               	movlw	0
  4279  0EC7  00AC               	movwf	___aldiv@quotient+1
  4280  0EC8  3000               	movlw	0
  4281  0EC9  00AB               	movwf	___aldiv@quotient
  4282  0ECA                     l2804:	
  4283  0ECA  0823               	movf	___aldiv@divisor+3,w
  4284  0ECB  0422               	iorwf	___aldiv@divisor+2,w
  4285  0ECC  0421               	iorwf	___aldiv@divisor+1,w
  4286  0ECD  0420               	iorwf	___aldiv@divisor,w
  4287  0ECE  1903               	skipnz
  4288  0ECF  2ED1               	goto	u2831
  4289  0ED0  2ED2               	goto	u2830
  4290  0ED1                     u2831:	
  4291  0ED1  2F1F               	goto	l2824
  4292  0ED2                     u2830:	
  4293  0ED2                     l2806:	
  4294  0ED2  01A9               	clrf	___aldiv@counter
  4295  0ED3  0AA9               	incf	___aldiv@counter,f
  4296  0ED4  2EE2               	goto	l2810
  4297  0ED5                     l2808:	
  4298  0ED5  3001               	movlw	1
  4299  0ED6  00A8               	movwf	??___aldiv
  4300  0ED7                     u2845:	
  4301  0ED7  1003               	clrc
  4302  0ED8  0DA0               	rlf	___aldiv@divisor,f
  4303  0ED9  0DA1               	rlf	___aldiv@divisor+1,f
  4304  0EDA  0DA2               	rlf	___aldiv@divisor+2,f
  4305  0EDB  0DA3               	rlf	___aldiv@divisor+3,f
  4306  0EDC  0BA8               	decfsz	??___aldiv,f
  4307  0EDD  2ED7               	goto	u2845
  4308  0EDE  3001               	movlw	1
  4309  0EDF  00A8               	movwf	??___aldiv
  4310  0EE0  0828               	movf	??___aldiv,w
  4311  0EE1  07A9               	addwf	___aldiv@counter,f
  4312  0EE2                     l2810:	
  4313  0EE2  1FA3               	btfss	___aldiv@divisor+3,7
  4314  0EE3  2EE5               	goto	u2851
  4315  0EE4  2EE6               	goto	u2850
  4316  0EE5                     u2851:	
  4317  0EE5  2ED5               	goto	l2808
  4318  0EE6                     u2850:	
  4319  0EE6                     l2812:	
  4320  0EE6  3001               	movlw	1
  4321  0EE7  00A8               	movwf	??___aldiv
  4322  0EE8                     u2865:	
  4323  0EE8  1003               	clrc
  4324  0EE9  0DAB               	rlf	___aldiv@quotient,f
  4325  0EEA  0DAC               	rlf	___aldiv@quotient+1,f
  4326  0EEB  0DAD               	rlf	___aldiv@quotient+2,f
  4327  0EEC  0DAE               	rlf	___aldiv@quotient+3,f
  4328  0EED  0BA8               	decfsz	??___aldiv,f
  4329  0EEE  2EE8               	goto	u2865
  4330  0EEF                     l2814:	
  4331  0EEF  0823               	movf	___aldiv@divisor+3,w
  4332  0EF0  0227               	subwf	___aldiv@dividend+3,w
  4333  0EF1  1D03               	skipz
  4334  0EF2  2EFD               	goto	u2875
  4335  0EF3  0822               	movf	___aldiv@divisor+2,w
  4336  0EF4  0226               	subwf	___aldiv@dividend+2,w
  4337  0EF5  1D03               	skipz
  4338  0EF6  2EFD               	goto	u2875
  4339  0EF7  0821               	movf	___aldiv@divisor+1,w
  4340  0EF8  0225               	subwf	___aldiv@dividend+1,w
  4341  0EF9  1D03               	skipz
  4342  0EFA  2EFD               	goto	u2875
  4343  0EFB  0820               	movf	___aldiv@divisor,w
  4344  0EFC  0224               	subwf	___aldiv@dividend,w
  4345  0EFD                     u2875:	
  4346  0EFD  1C03               	skipc
  4347  0EFE  2F00               	goto	u2871
  4348  0EFF  2F01               	goto	u2870
  4349  0F00                     u2871:	
  4350  0F00  2F10               	goto	l2820
  4351  0F01                     u2870:	
  4352  0F01                     l2816:	
  4353  0F01  0820               	movf	___aldiv@divisor,w
  4354  0F02  02A4               	subwf	___aldiv@dividend,f
  4355  0F03  0821               	movf	___aldiv@divisor+1,w
  4356  0F04  1C03               	skipc
  4357  0F05  0F21               	incfsz	___aldiv@divisor+1,w
  4358  0F06  02A5               	subwf	___aldiv@dividend+1,f
  4359  0F07  0822               	movf	___aldiv@divisor+2,w
  4360  0F08  1C03               	skipc
  4361  0F09  0F22               	incfsz	___aldiv@divisor+2,w
  4362  0F0A  02A6               	subwf	___aldiv@dividend+2,f
  4363  0F0B  0823               	movf	___aldiv@divisor+3,w
  4364  0F0C  1C03               	skipc
  4365  0F0D  0F23               	incfsz	___aldiv@divisor+3,w
  4366  0F0E  02A7               	subwf	___aldiv@dividend+3,f
  4367  0F0F                     l2818:	
  4368  0F0F  142B               	bsf	___aldiv@quotient,0
  4369  0F10                     l2820:	
  4370  0F10  3001               	movlw	1
  4371  0F11                     u2885:	
  4372  0F11  1003               	clrc
  4373  0F12  0CA3               	rrf	___aldiv@divisor+3,f
  4374  0F13  0CA2               	rrf	___aldiv@divisor+2,f
  4375  0F14  0CA1               	rrf	___aldiv@divisor+1,f
  4376  0F15  0CA0               	rrf	___aldiv@divisor,f
  4377  0F16  3EFF               	addlw	-1
  4378  0F17  1D03               	skipz
  4379  0F18  2F11               	goto	u2885
  4380  0F19                     l2822:	
  4381  0F19  3001               	movlw	1
  4382  0F1A  02A9               	subwf	___aldiv@counter,f
  4383  0F1B  1D03               	btfss	3,2
  4384  0F1C  2F1E               	goto	u2891
  4385  0F1D  2F1F               	goto	u2890
  4386  0F1E                     u2891:	
  4387  0F1E  2EE6               	goto	l2812
  4388  0F1F                     u2890:	
  4389  0F1F                     l2824:	
  4390  0F1F  082A               	movf	___aldiv@sign,w
  4391  0F20  1903               	btfsc	3,2
  4392  0F21  2F23               	goto	u2901
  4393  0F22  2F24               	goto	u2900
  4394  0F23                     u2901:	
  4395  0F23  2F2F               	goto	l2828
  4396  0F24                     u2900:	
  4397  0F24                     l2826:	
  4398  0F24  09AB               	comf	___aldiv@quotient,f
  4399  0F25  09AC               	comf	___aldiv@quotient+1,f
  4400  0F26  09AD               	comf	___aldiv@quotient+2,f
  4401  0F27  09AE               	comf	___aldiv@quotient+3,f
  4402  0F28  0AAB               	incf	___aldiv@quotient,f
  4403  0F29  1903               	skipnz
  4404  0F2A  0AAC               	incf	___aldiv@quotient+1,f
  4405  0F2B  1903               	skipnz
  4406  0F2C  0AAD               	incf	___aldiv@quotient+2,f
  4407  0F2D  1903               	skipnz
  4408  0F2E  0AAE               	incf	___aldiv@quotient+3,f
  4409  0F2F                     l2828:	
  4410  0F2F  082E               	movf	___aldiv@quotient+3,w
  4411  0F30  00A3               	movwf	?___aldiv+3
  4412  0F31  082D               	movf	___aldiv@quotient+2,w
  4413  0F32  00A2               	movwf	?___aldiv+2
  4414  0F33  082C               	movf	___aldiv@quotient+1,w
  4415  0F34  00A1               	movwf	?___aldiv+1
  4416  0F35  082B               	movf	___aldiv@quotient,w
  4417  0F36  00A0               	movwf	?___aldiv
  4418  0F37                     l517:	
  4419  0F37  0008               	return
  4420  0F38                     __end_of___aldiv:	
  4421                           
  4422                           	psect	text12
  4423  0B68                     __ptext12:	
  4424 ;; *************** function _SetDisplay *****************
  4425 ;; Defined at:
  4426 ;;		line 448 in file "main.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;  d1              1    wreg     unsigned char 
  4429 ;;  d2              1    0[BANK0 ] unsigned char 
  4430 ;;  d3              1    1[BANK0 ] unsigned char 
  4431 ;;  value           1    2[BANK0 ] unsigned char 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  d1              1    3[BANK0 ] unsigned char 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      void 
  4436 ;; Registers used:
  4437 ;;		wreg, status,0
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4443 ;;      Params:         0       3       0       0       0
  4444 ;;      Locals:         0       1       0       0       0
  4445 ;;      Temps:          0       0       0       0       0
  4446 ;;      Totals:         0       4       0       0       0
  4447 ;;Total ram usage:        4 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    2
  4450 ;; This function calls:
  4451 ;;		Nothing
  4452 ;; This function is called by:
  4453 ;;		_main
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           
  4458                           ;psect for function _SetDisplay
  4459  0B68                     _SetDisplay:	
  4460                           
  4461                           ;incstack = 0
  4462                           ; Regs used in _SetDisplay: [wreg+status,0]
  4463                           ;SetDisplay@d1 stored from wreg
  4464  0B68  1283               	bcf	3,5	;RP0=0, select bank0
  4465  0B69  1303               	bcf	3,6	;RP1=0, select bank0
  4466  0B6A  00A3               	movwf	SetDisplay@d1
  4467  0B6B                     l3072:	
  4468                           
  4469                           ;main.c: 448: void SetDisplay(char d1, char d2, char d3, char value);main.c: 449: {;main
      +                          .c: 450:     PORTAbits.RA2 = d1;
  4470  0B6B  0C23               	rrf	SetDisplay@d1,w
  4471  0B6C  1C03               	skipc
  4472  0B6D  1105               	bcf	5,2	;volatile
  4473  0B6E  1803               	skipnc
  4474  0B6F  1505               	bsf	5,2	;volatile
  4475                           
  4476                           ;main.c: 451:     PORTAbits.RA3 = d2;
  4477  0B70  0C20               	rrf	SetDisplay@d2,w
  4478  0B71  1C03               	skipc
  4479  0B72  1185               	bcf	5,3	;volatile
  4480  0B73  1803               	skipnc
  4481  0B74  1585               	bsf	5,3	;volatile
  4482                           
  4483                           ;main.c: 452:     PORTAbits.RA4 = d3;
  4484  0B75  0C21               	rrf	SetDisplay@d3,w
  4485  0B76  1C03               	skipc
  4486  0B77  1205               	bcf	5,4	;volatile
  4487  0B78  1803               	skipnc
  4488  0B79  1605               	bsf	5,4	;volatile
  4489  0B7A                     l3074:	
  4490                           
  4491                           ;main.c: 453:     PORTD = value;
  4492  0B7A  0822               	movf	SetDisplay@value,w
  4493  0B7B  0088               	movwf	8	;volatile
  4494  0B7C                     l307:	
  4495  0B7C  0008               	return
  4496  0B7D                     __end_of_SetDisplay:	
  4497                           
  4498                           	psect	text13
  4499  076F                     __ptext13:	
  4500 ;; *************** function _SetDefaultTimers *****************
  4501 ;; Defined at:
  4502 ;;		line 456 in file "main.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;  rosso           2    0[BANK0 ] int 
  4505 ;;  verde           2    2[BANK0 ] int 
  4506 ;;  giallo          2    4[BANK0 ] int 
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  i               1   13[BANK0 ] unsigned char 
  4509 ;;  l               1   12[BANK0 ] unsigned char 
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4519 ;;      Params:         0       6       0       0       0
  4520 ;;      Locals:         0       2       0       0       0
  4521 ;;      Temps:          0       6       0       0       0
  4522 ;;      Totals:         0      14       0       0       0
  4523 ;;Total ram usage:       14 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    2
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		_main
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           
  4534                           ;psect for function _SetDefaultTimers
  4535  076F                     _SetDefaultTimers:	
  4536  076F                     l2988:	
  4537                           ;incstack = 0
  4538                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4539                           
  4540                           
  4541                           ;main.c: 456: void SetDefaultTimers(int rosso, int verde, int giallo);main.c: 457: {;mai
      +                          n.c: 458:     for (unsigned char l = 0; l < 16; l++)
  4542  076F  1283               	bcf	3,5	;RP0=0, select bank0
  4543  0770  1303               	bcf	3,6	;RP1=0, select bank0
  4544  0771  01AC               	clrf	SetDefaultTimers@l
  4545  0772                     l2994:	
  4546                           
  4547                           ;main.c: 459:     {;main.c: 460:         for (unsigned char i = 0; i < 3; i++)
  4548  0772  01AD               	clrf	SetDefaultTimers@i
  4549  0773  2FD1               	goto	l3008
  4550  0774                     l3000:	
  4551                           
  4552                           ;main.c: 465:                 (*(Semafori[l])).new_times[i] = rosso;
  4553  0774  082C               	movf	SetDefaultTimers@l,w
  4554  0775  00A6               	movwf	??_SetDefaultTimers
  4555  0776  0726               	addwf	??_SetDefaultTimers,w
  4556  0777  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4557  0778  0084               	movwf	4
  4558  0779  1383               	bcf	3,7	;select IRP bank1
  4559  077A  0800               	movf	0,w
  4560  077B  00A7               	movwf	??_SetDefaultTimers+1
  4561  077C  0A84               	incf	4,f
  4562  077D  0800               	movf	0,w
  4563  077E  00A8               	movwf	??_SetDefaultTimers+2
  4564  077F  082D               	movf	SetDefaultTimers@i,w
  4565  0780  00A9               	movwf	??_SetDefaultTimers+3
  4566  0781  0729               	addwf	??_SetDefaultTimers+3,w
  4567  0782  0727               	addwf	??_SetDefaultTimers+1,w
  4568  0783  00AA               	movwf	??_SetDefaultTimers+4
  4569  0784  0828               	movf	??_SetDefaultTimers+2,w
  4570  0785  1803               	skipnc
  4571  0786  3E01               	addlw	1
  4572  0787  00AB               	movwf	??_SetDefaultTimers+5
  4573  0788  082A               	movf	??_SetDefaultTimers+4,w
  4574  0789  0084               	movwf	4
  4575  078A  1783               	bsf	3,7
  4576  078B  1C2B               	btfss	??_SetDefaultTimers+5,0
  4577  078C  1383               	bcf	3,7
  4578  078D  0820               	movf	SetDefaultTimers@rosso,w
  4579  078E  0080               	movwf	0
  4580  078F  0A84               	incf	4,f
  4581  0790  0821               	movf	SetDefaultTimers@rosso+1,w
  4582  0791  0080               	movwf	0
  4583                           
  4584                           ;main.c: 466:                 break;
  4585  0792  2FE4               	goto	l3010
  4586  0793                     l3002:	
  4587                           
  4588                           ;main.c: 468:                 (*(Semafori[l])).new_times[i] = verde;
  4589  0793  082C               	movf	SetDefaultTimers@l,w
  4590  0794  00A6               	movwf	??_SetDefaultTimers
  4591  0795  0726               	addwf	??_SetDefaultTimers,w
  4592  0796  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4593  0797  0084               	movwf	4
  4594  0798  1383               	bcf	3,7	;select IRP bank1
  4595  0799  0800               	movf	0,w
  4596  079A  00A7               	movwf	??_SetDefaultTimers+1
  4597  079B  0A84               	incf	4,f
  4598  079C  0800               	movf	0,w
  4599  079D  00A8               	movwf	??_SetDefaultTimers+2
  4600  079E  082D               	movf	SetDefaultTimers@i,w
  4601  079F  00A9               	movwf	??_SetDefaultTimers+3
  4602  07A0  0729               	addwf	??_SetDefaultTimers+3,w
  4603  07A1  0727               	addwf	??_SetDefaultTimers+1,w
  4604  07A2  00AA               	movwf	??_SetDefaultTimers+4
  4605  07A3  0828               	movf	??_SetDefaultTimers+2,w
  4606  07A4  1803               	skipnc
  4607  07A5  3E01               	addlw	1
  4608  07A6  00AB               	movwf	??_SetDefaultTimers+5
  4609  07A7  082A               	movf	??_SetDefaultTimers+4,w
  4610  07A8  0084               	movwf	4
  4611  07A9  1783               	bsf	3,7
  4612  07AA  1C2B               	btfss	??_SetDefaultTimers+5,0
  4613  07AB  1383               	bcf	3,7
  4614  07AC  0822               	movf	SetDefaultTimers@verde,w
  4615  07AD  0080               	movwf	0
  4616  07AE  0A84               	incf	4,f
  4617  07AF  0823               	movf	SetDefaultTimers@verde+1,w
  4618  07B0  0080               	movwf	0
  4619                           
  4620                           ;main.c: 469:                 break;
  4621  07B1  2FE4               	goto	l3010
  4622  07B2                     l3004:	
  4623                           
  4624                           ;main.c: 471:                 (*(Semafori[l])).new_times[i] = giallo;
  4625  07B2  082C               	movf	SetDefaultTimers@l,w
  4626  07B3  00A6               	movwf	??_SetDefaultTimers
  4627  07B4  0726               	addwf	??_SetDefaultTimers,w
  4628  07B5  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4629  07B6  0084               	movwf	4
  4630  07B7  1383               	bcf	3,7	;select IRP bank1
  4631  07B8  0800               	movf	0,w
  4632  07B9  00A7               	movwf	??_SetDefaultTimers+1
  4633  07BA  0A84               	incf	4,f
  4634  07BB  0800               	movf	0,w
  4635  07BC  00A8               	movwf	??_SetDefaultTimers+2
  4636  07BD  082D               	movf	SetDefaultTimers@i,w
  4637  07BE  00A9               	movwf	??_SetDefaultTimers+3
  4638  07BF  0729               	addwf	??_SetDefaultTimers+3,w
  4639  07C0  0727               	addwf	??_SetDefaultTimers+1,w
  4640  07C1  00AA               	movwf	??_SetDefaultTimers+4
  4641  07C2  0828               	movf	??_SetDefaultTimers+2,w
  4642  07C3  1803               	skipnc
  4643  07C4  3E01               	addlw	1
  4644  07C5  00AB               	movwf	??_SetDefaultTimers+5
  4645  07C6  082A               	movf	??_SetDefaultTimers+4,w
  4646  07C7  0084               	movwf	4
  4647  07C8  1783               	bsf	3,7
  4648  07C9  1C2B               	btfss	??_SetDefaultTimers+5,0
  4649  07CA  1383               	bcf	3,7
  4650  07CB  0824               	movf	SetDefaultTimers@giallo,w
  4651  07CC  0080               	movwf	0
  4652  07CD  0A84               	incf	4,f
  4653  07CE  0825               	movf	SetDefaultTimers@giallo+1,w
  4654  07CF  0080               	movwf	0
  4655                           
  4656                           ;main.c: 472:                 break;
  4657  07D0  2FE4               	goto	l3010
  4658  07D1                     l3008:	
  4659  07D1  082D               	movf	SetDefaultTimers@i,w
  4660  07D2  00A6               	movwf	??_SetDefaultTimers
  4661  07D3  01A7               	clrf	??_SetDefaultTimers+1
  4662                           
  4663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4664                           ; Switch size 1, requested type "simple"
  4665                           ; Number of cases is 1, Range of values is 0 to 0
  4666                           ; switch strategies available:
  4667                           ; Name         Instructions Cycles
  4668                           ; simple_byte            4     3 (average)
  4669                           ; direct_byte           11     8 (fixed)
  4670                           ; jumptable            260     6 (fixed)
  4671                           ;	Chosen strategy is simple_byte
  4672  07D4  0827               	movf	??_SetDefaultTimers+1,w
  4673  07D5  3A00               	xorlw	0	; case 0
  4674  07D6  1903               	skipnz
  4675  07D7  2FD9               	goto	l3442
  4676  07D8  2FE4               	goto	l3010
  4677  07D9                     l3442:	
  4678                           
  4679                           ; Switch size 1, requested type "simple"
  4680                           ; Number of cases is 3, Range of values is 0 to 2
  4681                           ; switch strategies available:
  4682                           ; Name         Instructions Cycles
  4683                           ; simple_byte           10     6 (average)
  4684                           ; direct_byte           17     8 (fixed)
  4685                           ; jumptable            260     6 (fixed)
  4686                           ;	Chosen strategy is simple_byte
  4687  07D9  0826               	movf	??_SetDefaultTimers,w
  4688  07DA  3A00               	xorlw	0	; case 0
  4689  07DB  1903               	skipnz
  4690  07DC  2F74               	goto	l3000
  4691  07DD  3A01               	xorlw	1	; case 1
  4692  07DE  1903               	skipnz
  4693  07DF  2F93               	goto	l3002
  4694  07E0  3A03               	xorlw	3	; case 2
  4695  07E1  1903               	skipnz
  4696  07E2  2FB2               	goto	l3004
  4697  07E3  2FE4               	goto	l3010
  4698  07E4                     l3010:	
  4699                           
  4700                           ;main.c: 474:         }
  4701  07E4  3001               	movlw	1
  4702  07E5  00A6               	movwf	??_SetDefaultTimers
  4703  07E6  0826               	movf	??_SetDefaultTimers,w
  4704  07E7  07AD               	addwf	SetDefaultTimers@i,f
  4705  07E8                     l3012:	
  4706  07E8  3003               	movlw	3
  4707  07E9  022D               	subwf	SetDefaultTimers@i,w
  4708  07EA  1C03               	skipc
  4709  07EB  2FED               	goto	u3201
  4710  07EC  2FEE               	goto	u3200
  4711  07ED                     u3201:	
  4712  07ED  2FD1               	goto	l3008
  4713  07EE                     u3200:	
  4714  07EE                     l3014:	
  4715                           
  4716                           ;main.c: 475:     }
  4717  07EE  3001               	movlw	1
  4718  07EF  00A6               	movwf	??_SetDefaultTimers
  4719  07F0  0826               	movf	??_SetDefaultTimers,w
  4720  07F1  07AC               	addwf	SetDefaultTimers@l,f
  4721  07F2                     l3016:	
  4722  07F2  3010               	movlw	16
  4723  07F3  022C               	subwf	SetDefaultTimers@l,w
  4724  07F4  1C03               	skipc
  4725  07F5  2FF7               	goto	u3211
  4726  07F6  2FF8               	goto	u3210
  4727  07F7                     u3211:	
  4728  07F7  2F72               	goto	l2994
  4729  07F8                     u3210:	
  4730  07F8                     l319:	
  4731  07F8  0008               	return
  4732  07F9                     __end_of_SetDefaultTimers:	
  4733                           
  4734                           	psect	text14
  4735  0CD2                     __ptext14:	
  4736 ;; *************** function _GetTime *****************
  4737 ;; Defined at:
  4738 ;;		line 422 in file "main.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  index           1    wreg     unsigned char 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  index           1    4[BANK0 ] unsigned char 
  4743 ;;  time            2    6[BANK0 ] int 
  4744 ;;  shortInt        1    5[BANK0 ] struct .
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  2    0[BANK0 ] int 
  4747 ;; Registers used:
  4748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4754 ;;      Params:         0       2       0       0       0
  4755 ;;      Locals:         0       4       0       0       0
  4756 ;;      Temps:          0       2       0       0       0
  4757 ;;      Totals:         0       8       0       0       0
  4758 ;;Total ram usage:        8 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    2
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_main
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           
  4769                           ;psect for function _GetTime
  4770  0CD2                     _GetTime:	
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4774                           ;GetTime@index stored from wreg
  4775  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  4776  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
  4777  0CD4  00A4               	movwf	GetTime@index
  4778  0CD5                     l3048:	
  4779                           
  4780                           ;main.c: 422: int GetTime(unsigned char index);main.c: 423: {;main.c: 424:     int time;
      +                          ;main.c: 428:     } shortInt;;main.c: 430:     shortInt.Val = dataFromGateway[index + 3]
      +                           & 0x7F;
  4781  0CD5  0824               	movf	GetTime@index,w
  4782  0CD6  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4783  0CD7  0084               	movwf	4
  4784  0CD8  307F               	movlw	127
  4785  0CD9  1383               	bcf	3,7	;select IRP bank1
  4786  0CDA  0500               	andwf	0,w
  4787  0CDB  00A2               	movwf	??_GetTime
  4788  0CDC  0825               	movf	GetTime@shortInt,w
  4789  0CDD  0622               	xorwf	??_GetTime,w
  4790  0CDE  3980               	andlw	-128
  4791  0CDF  0622               	xorwf	??_GetTime,w
  4792  0CE0  00A5               	movwf	GetTime@shortInt
  4793  0CE1                     l3050:	
  4794                           
  4795                           ;main.c: 431:     time = shortInt.Val;
  4796  0CE1  0825               	movf	GetTime@shortInt,w
  4797  0CE2  397F               	andlw	127
  4798  0CE3  00A2               	movwf	??_GetTime
  4799  0CE4  01A3               	clrf	??_GetTime+1
  4800  0CE5  0822               	movf	??_GetTime,w
  4801  0CE6  00A6               	movwf	GetTime@time
  4802  0CE7  0823               	movf	??_GetTime+1,w
  4803  0CE8  00A7               	movwf	GetTime@time+1
  4804  0CE9                     l3052:	
  4805                           
  4806                           ;main.c: 432:     time = (time << 7) & 0x80;
  4807  0CE9  0827               	movf	GetTime@time+1,w
  4808  0CEA  00A3               	movwf	??_GetTime+1
  4809  0CEB  0826               	movf	GetTime@time,w
  4810  0CEC  00A2               	movwf	??_GetTime
  4811  0CED  3007               	movlw	7
  4812  0CEE  00FF               	movwf	btemp+1
  4813  0CEF                     u3255:	
  4814  0CEF  1003               	clrc
  4815  0CF0  0DA2               	rlf	??_GetTime,f
  4816  0CF1  0DA3               	rlf	??_GetTime+1,f
  4817  0CF2  0BFF               	decfsz	btemp+1,f
  4818  0CF3  2CEF               	goto	u3255
  4819  0CF4  3080               	movlw	128
  4820  0CF5  0522               	andwf	??_GetTime,w
  4821  0CF6  00A6               	movwf	GetTime@time
  4822  0CF7  3000               	movlw	0
  4823  0CF8  0523               	andwf	??_GetTime+1,w
  4824  0CF9  00A7               	movwf	GetTime@time+1
  4825  0CFA                     l3054:	
  4826                           
  4827                           ;main.c: 434:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4828  0CFA  0824               	movf	GetTime@index,w
  4829  0CFB  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4830  0CFC  0084               	movwf	4
  4831  0CFD  307F               	movlw	127
  4832  0CFE  0500               	andwf	0,w
  4833  0CFF  00A2               	movwf	??_GetTime
  4834  0D00  0825               	movf	GetTime@shortInt,w
  4835  0D01  0622               	xorwf	??_GetTime,w
  4836  0D02  3980               	andlw	-128
  4837  0D03  0622               	xorwf	??_GetTime,w
  4838  0D04  00A5               	movwf	GetTime@shortInt
  4839  0D05                     l3056:	
  4840                           
  4841                           ;main.c: 435:     time = time | shortInt.Val;
  4842  0D05  0825               	movf	GetTime@shortInt,w
  4843  0D06  397F               	andlw	127
  4844  0D07  00A2               	movwf	??_GetTime
  4845  0D08  0826               	movf	GetTime@time,w
  4846  0D09  0422               	iorwf	??_GetTime,w
  4847  0D0A  00A6               	movwf	GetTime@time
  4848  0D0B  0827               	movf	GetTime@time+1,w
  4849  0D0C  00A7               	movwf	GetTime@time+1
  4850  0D0D                     l3058:	
  4851                           
  4852                           ;main.c: 437:     return time;
  4853  0D0D  0827               	movf	GetTime@time+1,w
  4854  0D0E  00A1               	movwf	?_GetTime+1
  4855  0D0F  0826               	movf	GetTime@time,w
  4856  0D10  00A0               	movwf	?_GetTime
  4857  0D11                     l301:	
  4858  0D11  0008               	return
  4859  0D12                     __end_of_GetTime:	
  4860                           
  4861                           	psect	text15
  4862  0E30                     __ptext15:	
  4863 ;; *************** function _GetDigits *****************
  4864 ;; Defined at:
  4865 ;;		line 440 in file "main.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;  Time            2   16[BANK0 ] int 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;		None
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0, pclath, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4879 ;;      Params:         0       2       0       0       0
  4880 ;;      Locals:         0       2       0       0       0
  4881 ;;      Temps:          0       3       0       0       0
  4882 ;;      Totals:         0       7       0       0       0
  4883 ;;Total ram usage:        7 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    3
  4886 ;; This function calls:
  4887 ;;		___awdiv
  4888 ;;		___awmod
  4889 ;; This function is called by:
  4890 ;;		_main
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _GetDigits
  4896  0E30                     _GetDigits:	
  4897  0E30                     l3062:	
  4898                           ;incstack = 0
  4899                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  4900                           
  4901                           
  4902                           ;main.c: 440: void GetDigits(int Time);main.c: 441: {;main.c: 442:     countdown = Time;
  4903  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  4904  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  4905  0E32  0830               	movf	GetDigits@Time,w
  4906  0E33  00B2               	movwf	??_GetDigits
  4907  0E34  0832               	movf	??_GetDigits,w
  4908  0E35  00DA               	movwf	_countdown
  4909  0E36                     l3064:	
  4910                           
  4911                           ;main.c: 443:     centinaia = countdown / 100;
  4912  0E36  3064               	movlw	100
  4913  0E37  00A7               	movwf	___awdiv@divisor
  4914  0E38  3000               	movlw	0
  4915  0E39  00A8               	movwf	___awdiv@divisor+1
  4916  0E3A  085A               	movf	_countdown,w
  4917  0E3B  00B2               	movwf	??_GetDigits
  4918  0E3C  01B3               	clrf	??_GetDigits+1
  4919  0E3D  0832               	movf	??_GetDigits,w
  4920  0E3E  00A9               	movwf	___awdiv@dividend
  4921  0E3F  0833               	movf	??_GetDigits+1,w
  4922  0E40  00AA               	movwf	___awdiv@dividend+1
  4923  0E41  120A  158A  25C7  120A  158A  	fcall	___awdiv
  4924  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  4925  0E47  1303               	bcf	3,6	;RP1=0, select bank0
  4926  0E48  0827               	movf	?___awdiv,w
  4927  0E49  00B4               	movwf	??_GetDigits+2
  4928  0E4A  0834               	movf	??_GetDigits+2,w
  4929  0E4B  00DD               	movwf	_centinaia
  4930  0E4C                     l3066:	
  4931                           
  4932                           ;main.c: 444:     decine = (countdown % 100) / 10;
  4933  0E4C  300A               	movlw	10
  4934  0E4D  00A7               	movwf	___awdiv@divisor
  4935  0E4E  3000               	movlw	0
  4936  0E4F  00A8               	movwf	___awdiv@divisor+1
  4937  0E50  085A               	movf	_countdown,w
  4938  0E51  00B2               	movwf	??_GetDigits
  4939  0E52  01B3               	clrf	??_GetDigits+1
  4940  0E53  0832               	movf	??_GetDigits,w
  4941  0E54  00A2               	movwf	___awmod@dividend
  4942  0E55  0833               	movf	??_GetDigits+1,w
  4943  0E56  00A3               	movwf	___awmod@dividend+1
  4944  0E57  3064               	movlw	100
  4945  0E58  00A0               	movwf	___awmod@divisor
  4946  0E59  3000               	movlw	0
  4947  0E5A  00A1               	movwf	___awmod@divisor+1
  4948  0E5B  120A  158A  256C  120A  158A  	fcall	___awmod
  4949  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  4950  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  4951  0E62  0821               	movf	?___awmod+1,w
  4952  0E63  00AA               	movwf	___awdiv@dividend+1
  4953  0E64  0820               	movf	?___awmod,w
  4954  0E65  00A9               	movwf	___awdiv@dividend
  4955  0E66  120A  158A  25C7  120A  158A  	fcall	___awdiv
  4956  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  4957  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  4958  0E6D  0827               	movf	?___awdiv,w
  4959  0E6E  00B4               	movwf	??_GetDigits+2
  4960  0E6F  0834               	movf	??_GetDigits+2,w
  4961  0E70  00DE               	movwf	_decine
  4962  0E71                     l3068:	
  4963                           
  4964                           ;main.c: 445:     unita = (countdown % 100) % 10;
  4965  0E71  085A               	movf	_countdown,w
  4966  0E72  00B2               	movwf	??_GetDigits
  4967  0E73  01B3               	clrf	??_GetDigits+1
  4968  0E74  0832               	movf	??_GetDigits,w
  4969  0E75  00A2               	movwf	___awmod@dividend
  4970  0E76  0833               	movf	??_GetDigits+1,w
  4971  0E77  00A3               	movwf	___awmod@dividend+1
  4972  0E78  3064               	movlw	100
  4973  0E79  00A0               	movwf	___awmod@divisor
  4974  0E7A  3000               	movlw	0
  4975  0E7B  00A1               	movwf	___awmod@divisor+1
  4976  0E7C  120A  158A  256C  120A  158A  	fcall	___awmod
  4977  0E81  1283               	bcf	3,5	;RP0=0, select bank0
  4978  0E82  1303               	bcf	3,6	;RP1=0, select bank0
  4979  0E83  0821               	movf	?___awmod+1,w
  4980  0E84  00B6               	movwf	_GetDigits$1152+1
  4981  0E85  0820               	movf	?___awmod,w
  4982  0E86  00B5               	movwf	_GetDigits$1152
  4983  0E87                     l3070:	
  4984                           
  4985                           ;main.c: 445:     unita = (countdown % 100) % 10;
  4986  0E87  300A               	movlw	10
  4987  0E88  00A0               	movwf	___awmod@divisor
  4988  0E89  3000               	movlw	0
  4989  0E8A  00A1               	movwf	___awmod@divisor+1
  4990  0E8B  0836               	movf	_GetDigits$1152+1,w
  4991  0E8C  00A3               	movwf	___awmod@dividend+1
  4992  0E8D  0835               	movf	_GetDigits$1152,w
  4993  0E8E  00A2               	movwf	___awmod@dividend
  4994  0E8F  120A  158A  256C  120A  158A  	fcall	___awmod
  4995  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  4996  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  4997  0E96  0820               	movf	?___awmod,w
  4998  0E97  00B2               	movwf	??_GetDigits
  4999  0E98  0832               	movf	??_GetDigits,w
  5000  0E99  00DF               	movwf	_unita
  5001  0E9A                     l304:	
  5002  0E9A  0008               	return
  5003  0E9B                     __end_of_GetDigits:	
  5004                           
  5005                           	psect	text16
  5006  0D6C                     __ptext16:	
  5007 ;; *************** function ___awmod *****************
  5008 ;; Defined at:
  5009 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  divisor         2    0[BANK0 ] int 
  5012 ;;  dividend        2    2[BANK0 ] int 
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;  sign            1    6[BANK0 ] unsigned char 
  5015 ;;  counter         1    5[BANK0 ] unsigned char 
  5016 ;; Return value:  Size  Location     Type
  5017 ;;                  2    0[BANK0 ] int 
  5018 ;; Registers used:
  5019 ;;		wreg, status,2, status,0
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5025 ;;      Params:         0       4       0       0       0
  5026 ;;      Locals:         0       2       0       0       0
  5027 ;;      Temps:          0       1       0       0       0
  5028 ;;      Totals:         0       7       0       0       0
  5029 ;;Total ram usage:        7 bytes
  5030 ;; Hardware stack levels used:    1
  5031 ;; Hardware stack levels required when called:    2
  5032 ;; This function calls:
  5033 ;;		Nothing
  5034 ;; This function is called by:
  5035 ;;		_main
  5036 ;;		_GetDigits
  5037 ;;		_intToString
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           
  5042                           ;psect for function ___awmod
  5043  0D6C                     ___awmod:	
  5044  0D6C                     l2876:	
  5045                           ;incstack = 0
  5046                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5047                           
  5048  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  5049  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  5050  0D6E  01A6               	clrf	___awmod@sign
  5051  0D6F                     l2878:	
  5052  0D6F  1FA3               	btfss	___awmod@dividend+1,7
  5053  0D70  2D72               	goto	u3011
  5054  0D71  2D73               	goto	u3010
  5055  0D72                     u3011:	
  5056  0D72  2D7A               	goto	l2884
  5057  0D73                     u3010:	
  5058  0D73                     l2880:	
  5059  0D73  09A2               	comf	___awmod@dividend,f
  5060  0D74  09A3               	comf	___awmod@dividend+1,f
  5061  0D75  0AA2               	incf	___awmod@dividend,f
  5062  0D76  1903               	skipnz
  5063  0D77  0AA3               	incf	___awmod@dividend+1,f
  5064  0D78                     l2882:	
  5065  0D78  01A6               	clrf	___awmod@sign
  5066  0D79  0AA6               	incf	___awmod@sign,f
  5067  0D7A                     l2884:	
  5068  0D7A  1FA1               	btfss	___awmod@divisor+1,7
  5069  0D7B  2D7D               	goto	u3021
  5070  0D7C  2D7E               	goto	u3020
  5071  0D7D                     u3021:	
  5072  0D7D  2D83               	goto	l2888
  5073  0D7E                     u3020:	
  5074  0D7E                     l2886:	
  5075  0D7E  09A0               	comf	___awmod@divisor,f
  5076  0D7F  09A1               	comf	___awmod@divisor+1,f
  5077  0D80  0AA0               	incf	___awmod@divisor,f
  5078  0D81  1903               	skipnz
  5079  0D82  0AA1               	incf	___awmod@divisor+1,f
  5080  0D83                     l2888:	
  5081  0D83  0820               	movf	___awmod@divisor,w
  5082  0D84  0421               	iorwf	___awmod@divisor+1,w
  5083  0D85  1903               	btfsc	3,2
  5084  0D86  2D88               	goto	u3031
  5085  0D87  2D89               	goto	u3030
  5086  0D88                     u3031:	
  5087  0D88  2DB8               	goto	l2906
  5088  0D89                     u3030:	
  5089  0D89                     l2890:	
  5090  0D89  01A5               	clrf	___awmod@counter
  5091  0D8A  0AA5               	incf	___awmod@counter,f
  5092  0D8B  2D97               	goto	l2896
  5093  0D8C                     l2892:	
  5094  0D8C  3001               	movlw	1
  5095  0D8D                     u3045:	
  5096  0D8D  1003               	clrc
  5097  0D8E  0DA0               	rlf	___awmod@divisor,f
  5098  0D8F  0DA1               	rlf	___awmod@divisor+1,f
  5099  0D90  3EFF               	addlw	-1
  5100  0D91  1D03               	skipz
  5101  0D92  2D8D               	goto	u3045
  5102  0D93                     l2894:	
  5103  0D93  3001               	movlw	1
  5104  0D94  00A4               	movwf	??___awmod
  5105  0D95  0824               	movf	??___awmod,w
  5106  0D96  07A5               	addwf	___awmod@counter,f
  5107  0D97                     l2896:	
  5108  0D97  1FA1               	btfss	___awmod@divisor+1,7
  5109  0D98  2D9A               	goto	u3051
  5110  0D99  2D9B               	goto	u3050
  5111  0D9A                     u3051:	
  5112  0D9A  2D8C               	goto	l2892
  5113  0D9B                     u3050:	
  5114  0D9B                     l2898:	
  5115  0D9B  0821               	movf	___awmod@divisor+1,w
  5116  0D9C  0223               	subwf	___awmod@dividend+1,w
  5117  0D9D  1D03               	skipz
  5118  0D9E  2DA1               	goto	u3065
  5119  0D9F  0820               	movf	___awmod@divisor,w
  5120  0DA0  0222               	subwf	___awmod@dividend,w
  5121  0DA1                     u3065:	
  5122  0DA1  1C03               	skipc
  5123  0DA2  2DA4               	goto	u3061
  5124  0DA3  2DA5               	goto	u3060
  5125  0DA4                     u3061:	
  5126  0DA4  2DAB               	goto	l2902
  5127  0DA5                     u3060:	
  5128  0DA5                     l2900:	
  5129  0DA5  0820               	movf	___awmod@divisor,w
  5130  0DA6  02A2               	subwf	___awmod@dividend,f
  5131  0DA7  0821               	movf	___awmod@divisor+1,w
  5132  0DA8  1C03               	skipc
  5133  0DA9  03A3               	decf	___awmod@dividend+1,f
  5134  0DAA  02A3               	subwf	___awmod@dividend+1,f
  5135  0DAB                     l2902:	
  5136  0DAB  3001               	movlw	1
  5137  0DAC                     u3075:	
  5138  0DAC  1003               	clrc
  5139  0DAD  0CA1               	rrf	___awmod@divisor+1,f
  5140  0DAE  0CA0               	rrf	___awmod@divisor,f
  5141  0DAF  3EFF               	addlw	-1
  5142  0DB0  1D03               	skipz
  5143  0DB1  2DAC               	goto	u3075
  5144  0DB2                     l2904:	
  5145  0DB2  3001               	movlw	1
  5146  0DB3  02A5               	subwf	___awmod@counter,f
  5147  0DB4  1D03               	btfss	3,2
  5148  0DB5  2DB7               	goto	u3081
  5149  0DB6  2DB8               	goto	u3080
  5150  0DB7                     u3081:	
  5151  0DB7  2D9B               	goto	l2898
  5152  0DB8                     u3080:	
  5153  0DB8                     l2906:	
  5154  0DB8  0826               	movf	___awmod@sign,w
  5155  0DB9  1903               	btfsc	3,2
  5156  0DBA  2DBC               	goto	u3091
  5157  0DBB  2DBD               	goto	u3090
  5158  0DBC                     u3091:	
  5159  0DBC  2DC2               	goto	l2910
  5160  0DBD                     u3090:	
  5161  0DBD                     l2908:	
  5162  0DBD  09A2               	comf	___awmod@dividend,f
  5163  0DBE  09A3               	comf	___awmod@dividend+1,f
  5164  0DBF  0AA2               	incf	___awmod@dividend,f
  5165  0DC0  1903               	skipnz
  5166  0DC1  0AA3               	incf	___awmod@dividend+1,f
  5167  0DC2                     l2910:	
  5168  0DC2  0823               	movf	___awmod@dividend+1,w
  5169  0DC3  00A1               	movwf	?___awmod+1
  5170  0DC4  0822               	movf	___awmod@dividend,w
  5171  0DC5  00A0               	movwf	?___awmod
  5172  0DC6                     l608:	
  5173  0DC6  0008               	return
  5174  0DC7                     __end_of___awmod:	
  5175                           
  5176                           	psect	text17
  5177  0DC7                     __ptext17:	
  5178 ;; *************** function ___awdiv *****************
  5179 ;; Defined at:
  5180 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  divisor         2    7[BANK0 ] int 
  5183 ;;  dividend        2    9[BANK0 ] int 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  quotient        2   14[BANK0 ] int 
  5186 ;;  sign            1   13[BANK0 ] unsigned char 
  5187 ;;  counter         1   12[BANK0 ] unsigned char 
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  2    7[BANK0 ] int 
  5190 ;; Registers used:
  5191 ;;		wreg, status,2, status,0
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5197 ;;      Params:         0       4       0       0       0
  5198 ;;      Locals:         0       4       0       0       0
  5199 ;;      Temps:          0       1       0       0       0
  5200 ;;      Totals:         0       9       0       0       0
  5201 ;;Total ram usage:        9 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    2
  5204 ;; This function calls:
  5205 ;;		Nothing
  5206 ;; This function is called by:
  5207 ;;		_map
  5208 ;;		_GetDigits
  5209 ;;		_intToString
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           
  5214                           ;psect for function ___awdiv
  5215  0DC7                     ___awdiv:	
  5216  0DC7                     l2832:	
  5217                           ;incstack = 0
  5218                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5219                           
  5220  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  5221  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  5222  0DC9  01AD               	clrf	___awdiv@sign
  5223  0DCA                     l2834:	
  5224  0DCA  1FA8               	btfss	___awdiv@divisor+1,7
  5225  0DCB  2DCD               	goto	u2911
  5226  0DCC  2DCE               	goto	u2910
  5227  0DCD                     u2911:	
  5228  0DCD  2DD5               	goto	l2840
  5229  0DCE                     u2910:	
  5230  0DCE                     l2836:	
  5231  0DCE  09A7               	comf	___awdiv@divisor,f
  5232  0DCF  09A8               	comf	___awdiv@divisor+1,f
  5233  0DD0  0AA7               	incf	___awdiv@divisor,f
  5234  0DD1  1903               	skipnz
  5235  0DD2  0AA8               	incf	___awdiv@divisor+1,f
  5236  0DD3                     l2838:	
  5237  0DD3  01AD               	clrf	___awdiv@sign
  5238  0DD4  0AAD               	incf	___awdiv@sign,f
  5239  0DD5                     l2840:	
  5240  0DD5  1FAA               	btfss	___awdiv@dividend+1,7
  5241  0DD6  2DD8               	goto	u2921
  5242  0DD7  2DD9               	goto	u2920
  5243  0DD8                     u2921:	
  5244  0DD8  2DE2               	goto	l2846
  5245  0DD9                     u2920:	
  5246  0DD9                     l2842:	
  5247  0DD9  09A9               	comf	___awdiv@dividend,f
  5248  0DDA  09AA               	comf	___awdiv@dividend+1,f
  5249  0DDB  0AA9               	incf	___awdiv@dividend,f
  5250  0DDC  1903               	skipnz
  5251  0DDD  0AAA               	incf	___awdiv@dividend+1,f
  5252  0DDE                     l2844:	
  5253  0DDE  3001               	movlw	1
  5254  0DDF  00AB               	movwf	??___awdiv
  5255  0DE0  082B               	movf	??___awdiv,w
  5256  0DE1  06AD               	xorwf	___awdiv@sign,f
  5257  0DE2                     l2846:	
  5258  0DE2  01AE               	clrf	___awdiv@quotient
  5259  0DE3  01AF               	clrf	___awdiv@quotient+1
  5260  0DE4                     l2848:	
  5261  0DE4  0827               	movf	___awdiv@divisor,w
  5262  0DE5  0428               	iorwf	___awdiv@divisor+1,w
  5263  0DE6  1903               	btfsc	3,2
  5264  0DE7  2DE9               	goto	u2931
  5265  0DE8  2DEA               	goto	u2930
  5266  0DE9                     u2931:	
  5267  0DE9  2E21               	goto	l2868
  5268  0DEA                     u2930:	
  5269  0DEA                     l2850:	
  5270  0DEA  01AC               	clrf	___awdiv@counter
  5271  0DEB  0AAC               	incf	___awdiv@counter,f
  5272  0DEC  2DF8               	goto	l2856
  5273  0DED                     l2852:	
  5274  0DED  3001               	movlw	1
  5275  0DEE                     u2945:	
  5276  0DEE  1003               	clrc
  5277  0DEF  0DA7               	rlf	___awdiv@divisor,f
  5278  0DF0  0DA8               	rlf	___awdiv@divisor+1,f
  5279  0DF1  3EFF               	addlw	-1
  5280  0DF2  1D03               	skipz
  5281  0DF3  2DEE               	goto	u2945
  5282  0DF4                     l2854:	
  5283  0DF4  3001               	movlw	1
  5284  0DF5  00AB               	movwf	??___awdiv
  5285  0DF6  082B               	movf	??___awdiv,w
  5286  0DF7  07AC               	addwf	___awdiv@counter,f
  5287  0DF8                     l2856:	
  5288  0DF8  1FA8               	btfss	___awdiv@divisor+1,7
  5289  0DF9  2DFB               	goto	u2951
  5290  0DFA  2DFC               	goto	u2950
  5291  0DFB                     u2951:	
  5292  0DFB  2DED               	goto	l2852
  5293  0DFC                     u2950:	
  5294  0DFC                     l2858:	
  5295  0DFC  3001               	movlw	1
  5296  0DFD                     u2965:	
  5297  0DFD  1003               	clrc
  5298  0DFE  0DAE               	rlf	___awdiv@quotient,f
  5299  0DFF  0DAF               	rlf	___awdiv@quotient+1,f
  5300  0E00  3EFF               	addlw	-1
  5301  0E01  1D03               	skipz
  5302  0E02  2DFD               	goto	u2965
  5303  0E03  0828               	movf	___awdiv@divisor+1,w
  5304  0E04  022A               	subwf	___awdiv@dividend+1,w
  5305  0E05  1D03               	skipz
  5306  0E06  2E09               	goto	u2975
  5307  0E07  0827               	movf	___awdiv@divisor,w
  5308  0E08  0229               	subwf	___awdiv@dividend,w
  5309  0E09                     u2975:	
  5310  0E09  1C03               	skipc
  5311  0E0A  2E0C               	goto	u2971
  5312  0E0B  2E0D               	goto	u2970
  5313  0E0C                     u2971:	
  5314  0E0C  2E14               	goto	l2864
  5315  0E0D                     u2970:	
  5316  0E0D                     l2860:	
  5317  0E0D  0827               	movf	___awdiv@divisor,w
  5318  0E0E  02A9               	subwf	___awdiv@dividend,f
  5319  0E0F  0828               	movf	___awdiv@divisor+1,w
  5320  0E10  1C03               	skipc
  5321  0E11  03AA               	decf	___awdiv@dividend+1,f
  5322  0E12  02AA               	subwf	___awdiv@dividend+1,f
  5323  0E13                     l2862:	
  5324  0E13  142E               	bsf	___awdiv@quotient,0
  5325  0E14                     l2864:	
  5326  0E14  3001               	movlw	1
  5327  0E15                     u2985:	
  5328  0E15  1003               	clrc
  5329  0E16  0CA8               	rrf	___awdiv@divisor+1,f
  5330  0E17  0CA7               	rrf	___awdiv@divisor,f
  5331  0E18  3EFF               	addlw	-1
  5332  0E19  1D03               	skipz
  5333  0E1A  2E15               	goto	u2985
  5334  0E1B                     l2866:	
  5335  0E1B  3001               	movlw	1
  5336  0E1C  02AC               	subwf	___awdiv@counter,f
  5337  0E1D  1D03               	btfss	3,2
  5338  0E1E  2E20               	goto	u2991
  5339  0E1F  2E21               	goto	u2990
  5340  0E20                     u2991:	
  5341  0E20  2DFC               	goto	l2858
  5342  0E21                     u2990:	
  5343  0E21                     l2868:	
  5344  0E21  082D               	movf	___awdiv@sign,w
  5345  0E22  1903               	btfsc	3,2
  5346  0E23  2E25               	goto	u3001
  5347  0E24  2E26               	goto	u3000
  5348  0E25                     u3001:	
  5349  0E25  2E2B               	goto	l2872
  5350  0E26                     u3000:	
  5351  0E26                     l2870:	
  5352  0E26  09AE               	comf	___awdiv@quotient,f
  5353  0E27  09AF               	comf	___awdiv@quotient+1,f
  5354  0E28  0AAE               	incf	___awdiv@quotient,f
  5355  0E29  1903               	skipnz
  5356  0E2A  0AAF               	incf	___awdiv@quotient+1,f
  5357  0E2B                     l2872:	
  5358  0E2B  082F               	movf	___awdiv@quotient+1,w
  5359  0E2C  00A8               	movwf	?___awdiv+1
  5360  0E2D  082E               	movf	___awdiv@quotient,w
  5361  0E2E  00A7               	movwf	?___awdiv
  5362  0E2F                     l595:	
  5363  0E2F  0008               	return
  5364  0E30                     __end_of___awdiv:	
  5365                           
  5366                           	psect	text18
  5367  0BB4                     __ptext18:	
  5368 ;; *************** function _ADC_Read *****************
  5369 ;; Defined at:
  5370 ;;		line 364 in file "main.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;  canale          1    wreg     unsigned char 
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;  canale          1    3[BANK0 ] unsigned char 
  5375 ;; Return value:  Size  Location     Type
  5376 ;;                  2    0[BANK0 ] int 
  5377 ;; Registers used:
  5378 ;;		wreg, status,2, status,0
  5379 ;; Tracked objects:
  5380 ;;		On entry : 0/0
  5381 ;;		On exit  : 0/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5384 ;;      Params:         0       2       0       0       0
  5385 ;;      Locals:         0       1       0       0       0
  5386 ;;      Temps:          0       1       0       0       0
  5387 ;;      Totals:         0       4       0       0       0
  5388 ;;Total ram usage:        4 bytes
  5389 ;; Hardware stack levels used:    1
  5390 ;; Hardware stack levels required when called:    2
  5391 ;; This function calls:
  5392 ;;		Nothing
  5393 ;; This function is called by:
  5394 ;;		_main
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           
  5399                           ;psect for function _ADC_Read
  5400  0BB4                     _ADC_Read:	
  5401                           
  5402                           ;incstack = 0
  5403                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5404                           ;ADC_Read@canale stored from wreg
  5405  0BB4  1283               	bcf	3,5	;RP0=0, select bank0
  5406  0BB5  1303               	bcf	3,6	;RP1=0, select bank0
  5407  0BB6  00A3               	movwf	ADC_Read@canale
  5408  0BB7                     l3038:	
  5409                           
  5410                           ;main.c: 364: int ADC_Read(char canale);main.c: 365: {;main.c: 366:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  5411  0BB7  0823               	movf	ADC_Read@canale,w
  5412  0BB8  00A2               	movwf	??_ADC_Read
  5413  0BB9  3002               	movlw	2
  5414  0BBA                     u3235:	
  5415  0BBA  1003               	clrc
  5416  0BBB  0DA2               	rlf	??_ADC_Read,f
  5417  0BBC  3EFF               	addlw	-1
  5418  0BBD  1D03               	skipz
  5419  0BBE  2BBA               	goto	u3235
  5420  0BBF  1003               	clrc
  5421  0BC0  0D22               	rlf	??_ADC_Read,w
  5422  0BC1  3801               	iorlw	1
  5423  0BC2  009F               	movwf	31	;volatile
  5424  0BC3                     l3040:	
  5425                           
  5426                           ;main.c: 367:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5427  0BC3  3004               	movlw	4
  5428  0BC4  1283               	bcf	3,5	;RP0=0, select bank0
  5429  0BC5  1303               	bcf	3,6	;RP1=0, select bank0
  5430  0BC6  00A2               	movwf	??_ADC_Read
  5431  0BC7                     u3657:	
  5432  0BC7  0BA2               	decfsz	??_ADC_Read,f
  5433  0BC8  2BC7               	goto	u3657
  5434  0BC9  0000               	nop
  5435  0BCA                     l3042:	
  5436                           
  5437                           ;main.c: 368:     GO_nDONE = 1;
  5438  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
  5439  0BCB  1303               	bcf	3,6	;RP1=0, select bank0
  5440  0BCC  151F               	bsf	31,2	;volatile
  5441  0BCD                     l269:	
  5442                           ;main.c: 370:         ;
  5443                           
  5444                           
  5445                           ;main.c: 369:     while (GO_nDONE)
  5446  0BCD  191F               	btfsc	31,2	;volatile
  5447  0BCE  2BD0               	goto	u3241
  5448  0BCF  2BD1               	goto	u3240
  5449  0BD0                     u3241:	
  5450  0BD0  2BCD               	goto	l269
  5451  0BD1                     u3240:	
  5452  0BD1                     l3044:	
  5453                           
  5454                           ;main.c: 371:     return ADRESL + (ADRESH << 8);
  5455  0BD1  081E               	movf	30,w	;volatile
  5456  0BD2  00A1               	movwf	?_ADC_Read+1
  5457  0BD3  1683               	bsf	3,5	;RP0=1, select bank1
  5458  0BD4  1303               	bcf	3,6	;RP1=0, select bank1
  5459  0BD5  081E               	movf	30,w	;volatile
  5460  0BD6  1283               	bcf	3,5	;RP0=0, select bank0
  5461  0BD7  1303               	bcf	3,6	;RP1=0, select bank0
  5462  0BD8  00A0               	movwf	?_ADC_Read
  5463  0BD9                     l272:	
  5464  0BD9  0008               	return
  5465  0BDA                     __end_of_ADC_Read:	
  5466                           
  5467                           	psect	text19
  5468  0D12                     __ptext19:	
  5469 ;; *************** function _ISR *****************
  5470 ;; Defined at:
  5471 ;;		line 566 in file "main.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;		None
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  1    wreg      void 
  5478 ;; Registers used:
  5479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5485 ;;      Params:         0       0       0       0       0
  5486 ;;      Locals:         0       0       0       0       0
  5487 ;;      Temps:          4       0       0       0       0
  5488 ;;      Totals:         4       0       0       0       0
  5489 ;;Total ram usage:        4 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    1
  5492 ;; This function calls:
  5493 ;;		_UART_Read
  5494 ;;		_conteggioVeicoli
  5495 ;; This function is called by:
  5496 ;;		Interrupt level 1
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           
  5501                           ;psect for function _ISR
  5502  0D12                     _ISR:	
  5503  0D12                     i1l2570:	
  5504                           
  5505                           ;main.c: 569:     if (RCIF && readGateway.Bit == 0)
  5506  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  5507  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  5508  0D14  1E8C               	btfss	12,5	;volatile
  5509  0D15  2D17               	goto	u255_21
  5510  0D16  2D18               	goto	u255_20
  5511  0D17                     u255_21:	
  5512  0D17  2D21               	goto	i1l2578
  5513  0D18                     u255_20:	
  5514  0D18                     i1l2572:	
  5515  0D18  1862               	btfsc	_readGateway,0
  5516  0D19  2D1B               	goto	u256_21
  5517  0D1A  2D1C               	goto	u256_20
  5518  0D1B                     u256_21:	
  5519  0D1B  2D21               	goto	i1l2578
  5520  0D1C                     u256_20:	
  5521  0D1C                     i1l2574:	
  5522                           
  5523                           ;main.c: 570:     {;main.c: 571:         readGateway.Bit = 1;
  5524  0D1C  1462               	bsf	_readGateway,0
  5525                           
  5526                           ;main.c: 572:         readGatewayDone.Bit = 0;
  5527  0D1D  1063               	bcf	_readGatewayDone,0
  5528                           
  5529                           ;main.c: 573:         readGatewayDone.Timeout = 0;
  5530  0D1E  10E3               	bcf	_readGatewayDone,1
  5531  0D1F                     i1l2576:	
  5532                           
  5533                           ;main.c: 574:         dataFromGatewayIndex = 0;
  5534  0D1F  01D9               	clrf	_dataFromGatewayIndex
  5535                           
  5536                           ;main.c: 575:         timerReadFromGateway = 0;
  5537  0D20  01D8               	clrf	_timerReadFromGateway
  5538  0D21                     i1l2578:	
  5539                           
  5540                           ;main.c: 577:     if (RCIF && readGateway.Bit == 1)
  5541  0D21  1E8C               	btfss	12,5	;volatile
  5542  0D22  2D24               	goto	u257_21
  5543  0D23  2D25               	goto	u257_20
  5544  0D24                     u257_21:	
  5545  0D24  2D3C               	goto	i1l2588
  5546  0D25                     u257_20:	
  5547  0D25                     i1l2580:	
  5548  0D25  1C62               	btfss	_readGateway,0
  5549  0D26  2D28               	goto	u258_21
  5550  0D27  2D29               	goto	u258_20
  5551  0D28                     u258_21:	
  5552  0D28  2D3C               	goto	i1l2588
  5553  0D29                     u258_20:	
  5554  0D29                     i1l2582:	
  5555                           
  5556                           ;main.c: 578:     {;main.c: 579:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  5557  0D29  120A  158A  232E  120A  158A  	fcall	_UART_Read
  5558  0D2E  00F6               	movwf	??_ISR
  5559  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  5560  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  5561  0D31  0859               	movf	_dataFromGatewayIndex,w
  5562  0D32  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  5563  0D33  0084               	movwf	4
  5564  0D34  0876               	movf	??_ISR,w
  5565  0D35  1383               	bcf	3,7	;select IRP bank1
  5566  0D36  0080               	movwf	0
  5567  0D37                     i1l2584:	
  5568                           
  5569                           ;main.c: 580:         dataFromGatewayIndex++;
  5570  0D37  3001               	movlw	1
  5571  0D38  00F6               	movwf	??_ISR
  5572  0D39  0876               	movf	??_ISR,w
  5573  0D3A  07D9               	addwf	_dataFromGatewayIndex,f
  5574  0D3B                     i1l2586:	
  5575                           
  5576                           ;main.c: 581:         timerReadFromGateway = 0;
  5577  0D3B  01D8               	clrf	_timerReadFromGateway
  5578  0D3C                     i1l2588:	
  5579                           
  5580                           ;main.c: 586:     if (TMR0IF)
  5581  0D3C  1D0B               	btfss	11,2	;volatile
  5582  0D3D  2D3F               	goto	u259_21
  5583  0D3E  2D40               	goto	u259_20
  5584  0D3F                     u259_21:	
  5585  0D3F  2D4A               	goto	i1l2596
  5586  0D40                     u259_20:	
  5587  0D40                     i1l2590:	
  5588                           
  5589                           ;main.c: 587:     {;main.c: 588:         TMR0IF = 0;
  5590  0D40  110B               	bcf	11,2	;volatile
  5591  0D41                     i1l2592:	
  5592                           
  5593                           ;main.c: 589:         conteggioVeicoli();
  5594  0D41  120A  118A  25C3  120A  158A  	fcall	_conteggioVeicoli
  5595  0D46                     i1l2594:	
  5596                           
  5597                           ;main.c: 590:         TMR0 = 6;
  5598  0D46  3006               	movlw	6
  5599  0D47  1283               	bcf	3,5	;RP0=0, select bank0
  5600  0D48  1303               	bcf	3,6	;RP1=0, select bank0
  5601  0D49  0081               	movwf	1	;volatile
  5602  0D4A                     i1l2596:	
  5603                           
  5604                           ;main.c: 593:     if (TMR1IF)
  5605  0D4A  1C0C               	btfss	12,0	;volatile
  5606  0D4B  2D4D               	goto	u260_21
  5607  0D4C  2D4E               	goto	u260_20
  5608  0D4D                     u260_21:	
  5609  0D4D  2D63               	goto	i1l356
  5610  0D4E                     u260_20:	
  5611  0D4E                     i1l2598:	
  5612                           
  5613                           ;main.c: 594:     {;main.c: 595:         TMR1IF = 0;
  5614  0D4E  100C               	bcf	12,0	;volatile
  5615  0D4F                     i1l2600:	
  5616                           
  5617                           ;main.c: 596:         count_lux++;
  5618  0D4F  3001               	movlw	1
  5619  0D50  00F6               	movwf	??_ISR
  5620  0D51  0876               	movf	??_ISR,w
  5621  0D52  07F4               	addwf	_count_lux,f
  5622  0D53                     i1l2602:	
  5623                           
  5624                           ;main.c: 598:         if (count_lux >= 20)
  5625  0D53  3014               	movlw	20
  5626  0D54  0274               	subwf	_count_lux,w
  5627  0D55  1C03               	skipc
  5628  0D56  2D58               	goto	u261_21
  5629  0D57  2D59               	goto	u261_20
  5630  0D58                     u261_21:	
  5631  0D58  2D5F               	goto	i1l2610
  5632  0D59                     u261_20:	
  5633  0D59                     i1l2604:	
  5634                           
  5635                           ;main.c: 599:         {;main.c: 600:             secondPassed.Bit = 1;
  5636  0D59  1461               	bsf	_secondPassed,0
  5637  0D5A                     i1l2606:	
  5638                           
  5639                           ;main.c: 601:             count_lux = 0;
  5640  0D5A  01F4               	clrf	_count_lux
  5641  0D5B                     i1l2608:	
  5642                           
  5643                           ;main.c: 602:             timerReadFromGateway++;
  5644  0D5B  3001               	movlw	1
  5645  0D5C  00F6               	movwf	??_ISR
  5646  0D5D  0876               	movf	??_ISR,w
  5647  0D5E  07D8               	addwf	_timerReadFromGateway,f
  5648  0D5F                     i1l2610:	
  5649                           
  5650                           ;main.c: 605:         TMR1H = 60;
  5651  0D5F  303C               	movlw	60
  5652  0D60  008F               	movwf	15	;volatile
  5653  0D61                     i1l2612:	
  5654                           
  5655                           ;main.c: 606:         TMR1L = 176;
  5656  0D61  30B0               	movlw	176
  5657  0D62  008E               	movwf	14	;volatile
  5658  0D63                     i1l356:	
  5659  0D63  0879               	movf	??_ISR+3,w
  5660  0D64  008A               	movwf	10
  5661  0D65  0878               	movf	??_ISR+2,w
  5662  0D66  0084               	movwf	4
  5663  0D67  0E77               	swapf	(??_ISR+1)^(0+4294967168),w
  5664  0D68  0083               	movwf	3
  5665  0D69  0EFE               	swapf	btemp,f
  5666  0D6A  0E7E               	swapf	btemp,w
  5667  0D6B  0009               	retfie
  5668  0D6C                     __end_of_ISR:	
  5669                           
  5670                           	psect	intentry
  5671  0004                     __pintentry:	
  5672                           ;incstack = 0
  5673                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5674                           
  5675  0004                     interrupt_function:	
  5676  007E                     saved_w	set	btemp
  5677  0004  00FE               	movwf	btemp
  5678  0005  0E03               	swapf	3,w
  5679  0006  00F7               	movwf	??_ISR+1
  5680  0007  0804               	movf	4,w
  5681  0008  00F8               	movwf	??_ISR+2
  5682  0009  080A               	movf	10,w
  5683  000A  00F9               	movwf	??_ISR+3
  5684  000B  120A  158A  2D12   	ljmp	_ISR
  5685                           
  5686                           	psect	text20
  5687  05C3                     __ptext20:	
  5688 ;; *************** function _conteggioVeicoli *****************
  5689 ;; Defined at:
  5690 ;;		line 478 in file "main.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;		None
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;		None
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      void 
  5697 ;; Registers used:
  5698 ;;		wreg, status,2, status,0
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5704 ;;      Params:         0       0       0       0       0
  5705 ;;      Locals:         0       0       0       0       0
  5706 ;;      Temps:          1       0       0       0       0
  5707 ;;      Totals:         1       0       0       0       0
  5708 ;;Total ram usage:        1 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; This function calls:
  5711 ;;		Nothing
  5712 ;; This function is called by:
  5713 ;;		_ISR
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           
  5718                           ;psect for function _conteggioVeicoli
  5719  05C3                     _conteggioVeicoli:	
  5720  05C3                     i1l2216:	
  5721                           ;incstack = 0
  5722                           ; Regs used in _conteggioVeicoli: [wreg+status,2+status,0]
  5723                           
  5724                           
  5725                           ;main.c: 481:     if (!PORTBbits.RB3)
  5726  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  5727  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  5728  05C5  1986               	btfsc	6,3	;volatile
  5729  05C6  2DC8               	goto	u197_21
  5730  05C7  2DC9               	goto	u197_20
  5731  05C8                     u197_21:	
  5732  05C8  2DD0               	goto	i1l322
  5733  05C9                     u197_20:	
  5734  05C9                     i1l2218:	
  5735                           
  5736                           ;main.c: 482:     {;main.c: 483:         count++;
  5737  05C9  3001               	movlw	1
  5738  05CA  07F0               	addwf	_count,f
  5739  05CB  1803               	skipnc
  5740  05CC  0AF1               	incf	_count+1,f
  5741  05CD  3000               	movlw	0
  5742  05CE  07F1               	addwf	_count+1,f
  5743                           
  5744                           ;main.c: 484:     }
  5745  05CF  2DFD               	goto	i1l2234
  5746  05D0                     i1l322:	
  5747                           ;main.c: 485:     else if (PORTBbits.RB3)
  5748                           
  5749  05D0  1D86               	btfss	6,3	;volatile
  5750  05D1  2DD3               	goto	u198_21
  5751  05D2  2DD4               	goto	u198_20
  5752  05D3                     u198_21:	
  5753  05D3  2DFD               	goto	i1l2234
  5754  05D4                     u198_20:	
  5755  05D4                     i1l2220:	
  5756                           
  5757                           ;main.c: 486:     {;main.c: 487:         if (count >= 500)
  5758  05D4  3001               	movlw	1
  5759  05D5  0271               	subwf	_count+1,w
  5760  05D6  30F4               	movlw	244
  5761  05D7  1903               	skipnz
  5762  05D8  0270               	subwf	_count,w
  5763  05D9  1C03               	skipc
  5764  05DA  2DDC               	goto	u199_21
  5765  05DB  2DDD               	goto	u199_20
  5766  05DC                     u199_21:	
  5767  05DC  2DE1               	goto	i1l2224
  5768  05DD                     u199_20:	
  5769  05DD                     i1l2222:	
  5770                           
  5771                           ;main.c: 488:         {;main.c: 489:             motorcycle[0]++;
  5772  05DD  3001               	movlw	1
  5773  05DE  00F5               	movwf	??_conteggioVeicoli
  5774  05DF  0875               	movf	??_conteggioVeicoli,w
  5775  05E0  07D4               	addwf	_motorcycle,f
  5776  05E1                     i1l2224:	
  5777                           
  5778                           ;main.c: 491:         if (count >= 1500)
  5779  05E1  3005               	movlw	5
  5780  05E2  0271               	subwf	_count+1,w
  5781  05E3  30DC               	movlw	220
  5782  05E4  1903               	skipnz
  5783  05E5  0270               	subwf	_count,w
  5784  05E6  1C03               	skipc
  5785  05E7  2DE9               	goto	u200_21
  5786  05E8  2DEA               	goto	u200_20
  5787  05E9                     u200_21:	
  5788  05E9  2DEE               	goto	i1l2228
  5789  05EA                     u200_20:	
  5790  05EA                     i1l2226:	
  5791                           
  5792                           ;main.c: 492:         {;main.c: 493:             car[0]++;
  5793  05EA  3001               	movlw	1
  5794  05EB  00F5               	movwf	??_conteggioVeicoli
  5795  05EC  0875               	movf	??_conteggioVeicoli,w
  5796  05ED  07D0               	addwf	_car,f
  5797  05EE                     i1l2228:	
  5798                           
  5799                           ;main.c: 495:         if (count >= 3000)
  5800  05EE  300B               	movlw	11
  5801  05EF  0271               	subwf	_count+1,w
  5802  05F0  30B8               	movlw	184
  5803  05F1  1903               	skipnz
  5804  05F2  0270               	subwf	_count,w
  5805  05F3  1C03               	skipc
  5806  05F4  2DF6               	goto	u201_21
  5807  05F5  2DF7               	goto	u201_20
  5808  05F6                     u201_21:	
  5809  05F6  2DFB               	goto	i1l2232
  5810  05F7                     u201_20:	
  5811  05F7                     i1l2230:	
  5812                           
  5813                           ;main.c: 496:         {;main.c: 497:             truck[0]++;
  5814  05F7  3001               	movlw	1
  5815  05F8  00F5               	movwf	??_conteggioVeicoli
  5816  05F9  0875               	movf	??_conteggioVeicoli,w
  5817  05FA  07CC               	addwf	_truck,f
  5818  05FB                     i1l2232:	
  5819                           
  5820                           ;main.c: 499:         count = 0;
  5821  05FB  01F0               	clrf	_count
  5822  05FC  01F1               	clrf	_count+1
  5823  05FD                     i1l2234:	
  5824                           
  5825                           ;main.c: 502:     if (!PORTBbits.RB4)
  5826  05FD  1A06               	btfsc	6,4	;volatile
  5827  05FE  2E00               	goto	u202_21
  5828  05FF  2E01               	goto	u202_20
  5829  0600                     u202_21:	
  5830  0600  2E08               	goto	i1l328
  5831  0601                     u202_20:	
  5832  0601                     i1l2236:	
  5833                           
  5834                           ;main.c: 503:     {;main.c: 504:         count++;
  5835  0601  3001               	movlw	1
  5836  0602  07F0               	addwf	_count,f
  5837  0603  1803               	skipnc
  5838  0604  0AF1               	incf	_count+1,f
  5839  0605  3000               	movlw	0
  5840  0606  07F1               	addwf	_count+1,f
  5841                           
  5842                           ;main.c: 505:     }
  5843  0607  2E35               	goto	i1l2252
  5844  0608                     i1l328:	
  5845                           ;main.c: 506:     else if (PORTBbits.RB4)
  5846                           
  5847  0608  1E06               	btfss	6,4	;volatile
  5848  0609  2E0B               	goto	u203_21
  5849  060A  2E0C               	goto	u203_20
  5850  060B                     u203_21:	
  5851  060B  2E35               	goto	i1l2252
  5852  060C                     u203_20:	
  5853  060C                     i1l2238:	
  5854                           
  5855                           ;main.c: 507:     {;main.c: 508:         if (count >= 500)
  5856  060C  3001               	movlw	1
  5857  060D  0271               	subwf	_count+1,w
  5858  060E  30F4               	movlw	244
  5859  060F  1903               	skipnz
  5860  0610  0270               	subwf	_count,w
  5861  0611  1C03               	skipc
  5862  0612  2E14               	goto	u204_21
  5863  0613  2E15               	goto	u204_20
  5864  0614                     u204_21:	
  5865  0614  2E19               	goto	i1l2242
  5866  0615                     u204_20:	
  5867  0615                     i1l2240:	
  5868                           
  5869                           ;main.c: 509:         {;main.c: 510:             motorcycle[1]++;
  5870  0615  3001               	movlw	1
  5871  0616  00F5               	movwf	??_conteggioVeicoli
  5872  0617  0875               	movf	??_conteggioVeicoli,w
  5873  0618  07D5               	addwf	_motorcycle+1,f
  5874  0619                     i1l2242:	
  5875                           
  5876                           ;main.c: 512:         if (count >= 1500)
  5877  0619  3005               	movlw	5
  5878  061A  0271               	subwf	_count+1,w
  5879  061B  30DC               	movlw	220
  5880  061C  1903               	skipnz
  5881  061D  0270               	subwf	_count,w
  5882  061E  1C03               	skipc
  5883  061F  2E21               	goto	u205_21
  5884  0620  2E22               	goto	u205_20
  5885  0621                     u205_21:	
  5886  0621  2E26               	goto	i1l2246
  5887  0622                     u205_20:	
  5888  0622                     i1l2244:	
  5889                           
  5890                           ;main.c: 513:         {;main.c: 514:             car[1]++;
  5891  0622  3001               	movlw	1
  5892  0623  00F5               	movwf	??_conteggioVeicoli
  5893  0624  0875               	movf	??_conteggioVeicoli,w
  5894  0625  07D1               	addwf	_car+1,f
  5895  0626                     i1l2246:	
  5896                           
  5897                           ;main.c: 516:         if (count >= 3000)
  5898  0626  300B               	movlw	11
  5899  0627  0271               	subwf	_count+1,w
  5900  0628  30B8               	movlw	184
  5901  0629  1903               	skipnz
  5902  062A  0270               	subwf	_count,w
  5903  062B  1C03               	skipc
  5904  062C  2E2E               	goto	u206_21
  5905  062D  2E2F               	goto	u206_20
  5906  062E                     u206_21:	
  5907  062E  2E33               	goto	i1l2250
  5908  062F                     u206_20:	
  5909  062F                     i1l2248:	
  5910                           
  5911                           ;main.c: 517:         {;main.c: 518:             truck[1]++;
  5912  062F  3001               	movlw	1
  5913  0630  00F5               	movwf	??_conteggioVeicoli
  5914  0631  0875               	movf	??_conteggioVeicoli,w
  5915  0632  07CD               	addwf	_truck+1,f
  5916  0633                     i1l2250:	
  5917                           
  5918                           ;main.c: 520:         count = 0;
  5919  0633  01F0               	clrf	_count
  5920  0634  01F1               	clrf	_count+1
  5921  0635                     i1l2252:	
  5922                           
  5923                           ;main.c: 523:     if (!PORTBbits.RB5)
  5924  0635  1A86               	btfsc	6,5	;volatile
  5925  0636  2E38               	goto	u207_21
  5926  0637  2E39               	goto	u207_20
  5927  0638                     u207_21:	
  5928  0638  2E40               	goto	i1l334
  5929  0639                     u207_20:	
  5930  0639                     i1l2254:	
  5931                           
  5932                           ;main.c: 524:     {;main.c: 525:         count++;
  5933  0639  3001               	movlw	1
  5934  063A  07F0               	addwf	_count,f
  5935  063B  1803               	skipnc
  5936  063C  0AF1               	incf	_count+1,f
  5937  063D  3000               	movlw	0
  5938  063E  07F1               	addwf	_count+1,f
  5939                           
  5940                           ;main.c: 526:     }
  5941  063F  2E6D               	goto	i1l2270
  5942  0640                     i1l334:	
  5943                           ;main.c: 527:     else if (PORTBbits.RB5)
  5944                           
  5945  0640  1E86               	btfss	6,5	;volatile
  5946  0641  2E43               	goto	u208_21
  5947  0642  2E44               	goto	u208_20
  5948  0643                     u208_21:	
  5949  0643  2E6D               	goto	i1l2270
  5950  0644                     u208_20:	
  5951  0644                     i1l2256:	
  5952                           
  5953                           ;main.c: 528:     {;main.c: 529:         if (count >= 500)
  5954  0644  3001               	movlw	1
  5955  0645  0271               	subwf	_count+1,w
  5956  0646  30F4               	movlw	244
  5957  0647  1903               	skipnz
  5958  0648  0270               	subwf	_count,w
  5959  0649  1C03               	skipc
  5960  064A  2E4C               	goto	u209_21
  5961  064B  2E4D               	goto	u209_20
  5962  064C                     u209_21:	
  5963  064C  2E51               	goto	i1l2260
  5964  064D                     u209_20:	
  5965  064D                     i1l2258:	
  5966                           
  5967                           ;main.c: 530:         {;main.c: 531:             motorcycle[2]++;
  5968  064D  3001               	movlw	1
  5969  064E  00F5               	movwf	??_conteggioVeicoli
  5970  064F  0875               	movf	??_conteggioVeicoli,w
  5971  0650  07D6               	addwf	_motorcycle+2,f
  5972  0651                     i1l2260:	
  5973                           
  5974                           ;main.c: 533:         if (count >= 1500)
  5975  0651  3005               	movlw	5
  5976  0652  0271               	subwf	_count+1,w
  5977  0653  30DC               	movlw	220
  5978  0654  1903               	skipnz
  5979  0655  0270               	subwf	_count,w
  5980  0656  1C03               	skipc
  5981  0657  2E59               	goto	u210_21
  5982  0658  2E5A               	goto	u210_20
  5983  0659                     u210_21:	
  5984  0659  2E5E               	goto	i1l2264
  5985  065A                     u210_20:	
  5986  065A                     i1l2262:	
  5987                           
  5988                           ;main.c: 534:         {;main.c: 535:             car[2]++;
  5989  065A  3001               	movlw	1
  5990  065B  00F5               	movwf	??_conteggioVeicoli
  5991  065C  0875               	movf	??_conteggioVeicoli,w
  5992  065D  07D2               	addwf	_car+2,f
  5993  065E                     i1l2264:	
  5994                           
  5995                           ;main.c: 537:         if (count >= 3000)
  5996  065E  300B               	movlw	11
  5997  065F  0271               	subwf	_count+1,w
  5998  0660  30B8               	movlw	184
  5999  0661  1903               	skipnz
  6000  0662  0270               	subwf	_count,w
  6001  0663  1C03               	skipc
  6002  0664  2E66               	goto	u211_21
  6003  0665  2E67               	goto	u211_20
  6004  0666                     u211_21:	
  6005  0666  2E6B               	goto	i1l2268
  6006  0667                     u211_20:	
  6007  0667                     i1l2266:	
  6008                           
  6009                           ;main.c: 538:         {;main.c: 539:             truck[2]++;
  6010  0667  3001               	movlw	1
  6011  0668  00F5               	movwf	??_conteggioVeicoli
  6012  0669  0875               	movf	??_conteggioVeicoli,w
  6013  066A  07CE               	addwf	_truck+2,f
  6014  066B                     i1l2268:	
  6015                           
  6016                           ;main.c: 541:         count = 0;
  6017  066B  01F0               	clrf	_count
  6018  066C  01F1               	clrf	_count+1
  6019  066D                     i1l2270:	
  6020                           
  6021                           ;main.c: 544:     if (!PORTAbits.RA5)
  6022  066D  1A85               	btfsc	5,5	;volatile
  6023  066E  2E70               	goto	u212_21
  6024  066F  2E71               	goto	u212_20
  6025  0670                     u212_21:	
  6026  0670  2E78               	goto	i1l340
  6027  0671                     u212_20:	
  6028  0671                     i1l2272:	
  6029                           
  6030                           ;main.c: 545:     {;main.c: 546:         count++;
  6031  0671  3001               	movlw	1
  6032  0672  07F0               	addwf	_count,f
  6033  0673  1803               	skipnc
  6034  0674  0AF1               	incf	_count+1,f
  6035  0675  3000               	movlw	0
  6036  0676  07F1               	addwf	_count+1,f
  6037                           
  6038                           ;main.c: 547:     }
  6039  0677  2EA5               	goto	i1l346
  6040  0678                     i1l340:	
  6041                           ;main.c: 548:     else if (PORTAbits.RA5)
  6042                           
  6043  0678  1E85               	btfss	5,5	;volatile
  6044  0679  2E7B               	goto	u213_21
  6045  067A  2E7C               	goto	u213_20
  6046  067B                     u213_21:	
  6047  067B  2EA5               	goto	i1l346
  6048  067C                     u213_20:	
  6049  067C                     i1l2274:	
  6050                           
  6051                           ;main.c: 549:     {;main.c: 550:         if (count >= 500)
  6052  067C  3001               	movlw	1
  6053  067D  0271               	subwf	_count+1,w
  6054  067E  30F4               	movlw	244
  6055  067F  1903               	skipnz
  6056  0680  0270               	subwf	_count,w
  6057  0681  1C03               	skipc
  6058  0682  2E84               	goto	u214_21
  6059  0683  2E85               	goto	u214_20
  6060  0684                     u214_21:	
  6061  0684  2E89               	goto	i1l2278
  6062  0685                     u214_20:	
  6063  0685                     i1l2276:	
  6064                           
  6065                           ;main.c: 551:         {;main.c: 552:             motorcycle[3]++;
  6066  0685  3001               	movlw	1
  6067  0686  00F5               	movwf	??_conteggioVeicoli
  6068  0687  0875               	movf	??_conteggioVeicoli,w
  6069  0688  07D7               	addwf	_motorcycle+3,f
  6070  0689                     i1l2278:	
  6071                           
  6072                           ;main.c: 554:         if (count >= 1500)
  6073  0689  3005               	movlw	5
  6074  068A  0271               	subwf	_count+1,w
  6075  068B  30DC               	movlw	220
  6076  068C  1903               	skipnz
  6077  068D  0270               	subwf	_count,w
  6078  068E  1C03               	skipc
  6079  068F  2E91               	goto	u215_21
  6080  0690  2E92               	goto	u215_20
  6081  0691                     u215_21:	
  6082  0691  2E96               	goto	i1l2282
  6083  0692                     u215_20:	
  6084  0692                     i1l2280:	
  6085                           
  6086                           ;main.c: 555:         {;main.c: 556:             car[3]++;
  6087  0692  3001               	movlw	1
  6088  0693  00F5               	movwf	??_conteggioVeicoli
  6089  0694  0875               	movf	??_conteggioVeicoli,w
  6090  0695  07D3               	addwf	_car+3,f
  6091  0696                     i1l2282:	
  6092                           
  6093                           ;main.c: 558:         if (count >= 3000)
  6094  0696  300B               	movlw	11
  6095  0697  0271               	subwf	_count+1,w
  6096  0698  30B8               	movlw	184
  6097  0699  1903               	skipnz
  6098  069A  0270               	subwf	_count,w
  6099  069B  1C03               	skipc
  6100  069C  2E9E               	goto	u216_21
  6101  069D  2E9F               	goto	u216_20
  6102  069E                     u216_21:	
  6103  069E  2EA3               	goto	i1l2286
  6104  069F                     u216_20:	
  6105  069F                     i1l2284:	
  6106                           
  6107                           ;main.c: 559:         {;main.c: 560:             truck[3]++;
  6108  069F  3001               	movlw	1
  6109  06A0  00F5               	movwf	??_conteggioVeicoli
  6110  06A1  0875               	movf	??_conteggioVeicoli,w
  6111  06A2  07CF               	addwf	_truck+3,f
  6112  06A3                     i1l2286:	
  6113                           
  6114                           ;main.c: 562:         count = 0;
  6115  06A3  01F0               	clrf	_count
  6116  06A4  01F1               	clrf	_count+1
  6117  06A5                     i1l346:	
  6118  06A5  0008               	return
  6119  06A6                     __end_of_conteggioVeicoli:	
  6120                           
  6121                           	psect	text21
  6122  0B2E                     __ptext21:	
  6123 ;; *************** function _UART_Read *****************
  6124 ;; Defined at:
  6125 ;;		line 403 in file "main.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;		None
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;		None
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  1    wreg      unsigned char 
  6132 ;; Registers used:
  6133 ;;		wreg
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6139 ;;      Params:         0       0       0       0       0
  6140 ;;      Locals:         0       0       0       0       0
  6141 ;;      Temps:          0       0       0       0       0
  6142 ;;      Totals:         0       0       0       0       0
  6143 ;;Total ram usage:        0 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; This function calls:
  6146 ;;		Nothing
  6147 ;; This function is called by:
  6148 ;;		_ISR
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           
  6153                           ;psect for function _UART_Read
  6154  0B2E                     _UART_Read:	
  6155  0B2E                     i1l2210:	
  6156                           ;incstack = 0
  6157                           ; Regs used in _UART_Read: [wreg]
  6158                           
  6159  0B2E                     i1l290:	
  6160                           ;main.c: 406:         ;
  6161                           
  6162                           
  6163                           ;main.c: 405:     while (!RCIF)
  6164  0B2E  1283               	bcf	3,5	;RP0=0, select bank0
  6165  0B2F  1303               	bcf	3,6	;RP1=0, select bank0
  6166  0B30  1E8C               	btfss	12,5	;volatile
  6167  0B31  2B33               	goto	u196_21
  6168  0B32  2B34               	goto	u196_20
  6169  0B33                     u196_21:	
  6170  0B33  2B2E               	goto	i1l290
  6171  0B34                     u196_20:	
  6172  0B34                     i1l292:	
  6173                           
  6174                           ;main.c: 407:     RCIF = 0;
  6175  0B34  128C               	bcf	12,5	;volatile
  6176  0B35                     i1l2212:	
  6177                           
  6178                           ;main.c: 408:     return RCREG;
  6179  0B35  081A               	movf	26,w	;volatile
  6180  0B36                     i1l293:	
  6181  0B36  0008               	return
  6182  0B37                     __end_of_UART_Read:	
  6183  007E                     btemp	set	126	;btemp
  6184  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        33
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     44      69
    BANK1            80      0      71
    BANK3            96      0      96
    BANK2            96     22      94

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   16907
                                             28 BANK0     16    16      0
                                              0 BANK2     22    22      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                          _bitParita
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    2447
                                             20 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1138
                                              0 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4368
                                             16 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1636
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1113
                                              4 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     276
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             15 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3    1204
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    14     8      6     716
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              8     6      2     232
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             16 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              1 COMMON     4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   _bitParita
     _bitChange
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     16      5E      11       97.9%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     154      12        0.0%
ABS                  0      0     154       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Jun 21 09:59:02 2020

                        pc 0002             ___bmul@product 0022                __CFG_CP$OFF 0000  
                       l83 0C97                         l98 0C31               ___awdiv@sign 002D  
                       _s0 00BB                         _s1 00AF                         _s2 01E4  
                       _s3 01D8                         _s4 01CC                         _s5 01C0  
                       _s6 01B4                         _s7 01A8                         _s8 019C  
                       _s9 0190                         fsr 0004        ___wmul@multiplicand 0022  
           _GetDigits$1152 0035                __CFG_LVP$ON 0000                        l110 072D  
                      l111 0739                        l113 076E                        l105 06DD  
                      l106 06E9                        l301 0D11                        l125 0FD7  
                      l213 00D0                        l230 034F                        l214 02B3  
                      l119 0F86                        l304 0E9A                        l128 0FFF  
                      l224 01AA                        l216 00D7                        l307 0B7C  
                      l235 0446                        l319 07F8                        l272 0BD9  
                      l280 0B3E                        l281 0B41                        l266 0B54  
                      l442 0BE8                        l507 0EAF                        l275 0CD1  
                      l259 05B6                        l444 0C00                        l269 0BCD  
                      l517 0F37                        l278 0B3A                        l608 0DC6  
                      l298 0C62                        l468 0B93                        l595 0E2F  
             __CFG_CPD$OFF 0000                        _ISR 0D12                        _s10 014C  
                      _s11 0140                        _s12 0134                        _s13 0128  
                      _s14 011C                        _s15 0110                        _car 0050  
                      _map 0C63                        fsr0 0004                        indf 0000  
             ___awmod@sign 0026               __CFG_FOSC$HS 0000                       ?_ISR 0075  
              main@colorId 0159                       l3000 0774                       l3002 0793  
                     l3010 07E4                       l3012 07E8                       l3004 07B2  
                     l3014 07EE                       l3030 0C49                       l3022 0C35  
                     l3110 005B                       l3102 0050                       l3040 0BC3  
                     l3016 07F2                       l3008 07D1                       l3032 0C52  
                     l3024 0C48                       l3120 0073                       l3112 005D  
                     l3104 0056                       l3042 0BCA                       l3050 0CE1  
                     l3034 0C58                       l3210 0291                       l3202 027D  
                     l3130 0092                       l3122 0086                       l3114 0061  
                     l3106 0057                       l3044 0BD1                       l3052 0CE9  
                     l3036 0C5C                       l3300 04D3                       l3220 02B8  
                     l3212 0294                       l3204 0282                       l3132 0092  
                     l3124 008A                       l3116 0063                       l3108 0059  
                     l3038 0BB7                       l3070 0E87                       l3062 0E30  
                     l3054 0CFA                       l3310 0522                       l3302 04D6  
                     l3230 02C2                       l3222 02B9                       l3214 029A  
                     l3134 0092                       l3126 008C                       l3118 0068  
                     l3064 0E36                       l3056 0D05                       l3048 0CD5  
                     l3072 0B6B                       l3080 0B85                       l3320 056A  
                     l3312 0536                       l3304 0510                       l3240 02E7  
                     l3232 02C8                       l3224 02BA                       l3208 028B  
                     l3160 0161                       l3152 00D9                       l3144 0097  
                     l3136 0092                       l3128 008F                       l3066 0E4C  
                     l3058 0D0D                       l3074 0B7A                       l3082 0B89  
                     l3330 05B0                       l3314 053B                       l3306 0518  
                     l3250 0348                       l3242 02F3                       l3234 02CB  
                     l3226 02BC                       l3170 017C                       l3154 00DD  
                     l3218 029E                       l3146 00BB                       l3138 0095  
                     l3068 0E71                       l3084 0B8B                       l3076 0B80  
                     l3332 05B4                       l3316 0540                       l3308 051D  
                     l3324 057E                       l3260 035D                       l3244 02FF  
                     l3228 02C0                       l3172 018B                       l3164 016A  
                     l3148 00C3                       l3086 0B92                       l3078 0B81  
                     l2702 0C22                       l2710 0F57                       l3334 05BA  
                     l3318 0555                       l3326 0594                       l3270 0407  
                     l3262 035E                       l3254 0355                       l3246 030A  
                     l3238 02D2                       l3190 0240                       l3182 019C  
                     l3166 016E                       l3158 00EB                       l2800 0EBE  
                     l2720 0F5B                       l2712 0F58                       l3336 05BE  
                     l3328 05AC                       l3440 0586                       l3280 041E  
                     l3256 0356                       l3248 031C                       l3192 0251  
                     l3184 01A1                       l3176 0192                       l3442 07D9  
                     l2810 0EE2                       l2802 0EC2                       l2730 0F79  
                     l2714 0F59                       l2706 0F3B                       l3290 0458  
                     l3282 0441                       l3274 040E                       l3266 0365  
                     l3194 0262                       l3178 0195                       l2900 0DA5  
                     l2820 0F10                       l2812 0EE6                       l2804 0ECA  
                     l2740 0F9B                       l2732 0F8C                       l2708 0F4A  
                     l3292 0491                       l3284 044B                       l3268 03BA  
                     l3196 0273                       l3188 01AC                       l2910 0DC2  
                     l2902 0DAB                       l2822 0F19                       l2814 0EEF  
                     l2806 0ED2                       l2742 0FA8                       l2734 0F94  
                     l2726 0F5F                       l3294 0494                       l3286 044F  
                     l3278 0417                       l3438 02AB                       l3198 0276  
                     l2840 0DD5                       l2832 0DC7                       l2904 0DB2  
                     l2816 0F01                       l2808 0ED5                       l2824 0F1F  
                     l2760 0FDD                       l2728 0F73                       l3296 0498  
                     l3288 0457                       l2850 0DEA                       l2842 0DD9  
                     l2834 0DCA                       l2906 0DB8                       l2826 0F24  
                     l2818 0F0F                       l2930 06B4                       l2914 0C63  
                     l2770 0FFE                       l2762 0FEA                       l2754 0FB0  
                     l2738 0F95                       l3298 04A0                       l2860 0E0D  
                     l2852 0DED                       l2844 0DDE                       l2836 0DCE  
                     l2908 0DBD                       l2828 0F2F                       l2940 06EF  
                     l2932 06CA                       l2924 06B0                       l2780 0BDE  
                     l2756 0FC4                       l2748 0FAC                       l2870 0E26  
                     l2862 0E13                       l2854 0DF4                       l2846 0DE2  
                     l2838 0DD3                       l2694 0C04                       l2942 06FC  
                     l2934 06D0                       l2918 06A9                       l2782 0BE2  
                     l2766 0FEB                       l2758 0FCA                       l2774 0B3A  
                     ?_map 0030                       l2872 0E2B                       l2864 0E14  
                     l2856 0DF8                       l2848 0DE4                       l2880 0D73  
                     l2792 0E9B                       l2696 0C13                       l2960 0733  
                     l2936 06E3                       l2784 0BEF                       l2768 0FF1  
                     l2776 0B3F                       l2866 0E1B                       l2858 0DFC  
                     l2890 0D89                       l2882 0D78                       l2794 0E9E  
                     l2962 0735                       l2954 0704                       l2938 06E5  
                     l2970 0B42                       l2786 0BF6                       l2778 0BDA  
                     l2868 0E21                       l2892 0D8C                       l2884 0D7A  
                     l2876 0D6C                       l2796 0EA2                       l2980 0CA0  
                     l2964 073F                       l2956 071A                       l2948 0700  
                     l2972 0B46                       l2788 0BFC                       l2894 0D93  
                     l2886 0D7E                       l2878 0D6F                       l2798 0EB3  
                     l2982 0CCE                       l2966 074C                       l2958 0720  
                     l2974 0B49                       l2896 0D97                       l2888 0D83  
                     l2984 0CCF                       l2968 0753                       l2976 0B4D  
                     l2898 0D9B                       l2994 0772                       l2986 0CD0  
                     l2978 0C98                       l2988 076F                       u3000 0E26  
                     u3001 0E25                       u3010 0D73                       u3011 0D72  
                     u3020 0D7E                       u3021 0D7D                       u3030 0D89  
                     u3110 06DD                       u3031 0D88                       u3111 06DC  
                     u3200 07EE                       u3120 06E3                       u3104 06C2  
                     u3201 07ED                       u3121 06E2                       u3105 06C0  
                     u3050 0D9B                       u3210 07F8                       u3130 06FC  
                     u3051 0D9A                       u3211 07F7                       u3131 06FB  
                     u3115 06D9                       u3060 0DA5                       u3220 0C62  
                     u3300 00D6                       u3061 0DA4                       u3045 0D8D  
                     u3221 0C61                       u3301 00D5                       u3150 072D  
                     u3310 00EA                       u3151 072C                       u3135 06F8  
                     u3311 00E9                       u3240 0BD1                       u3080 0DB8  
                     u3160 0733                       u3144 0712                       u3400 02B8  
                     u3241 0BD0                       u3081 0DB7                       u3065 0DA1  
                     u3161 0732                       u3145 0710                       u3401 02B7  
                     u3090 0DBD                       u3170 074C                       u3410 02C0  
                     u3235 0BBA                       u3091 0DBC                       u3075 0DAC  
                     u3171 074B                       u3155 0729                       u3411 02BF  
                     u3315 00E6                       u3260 0B85                       u3180 0753  
                     u2700 0FA8                       u3500 044B                       u3420 02D1  
                     u3324 0107                       u3261 0B84                       u3181 0752  
                     u2701 0FA7                       u3501 044A                       u3421 02D0  
                     u3325 0105                       u3190 0CAF                       u3270 0B92  
                     u2630 0C13                       u3510 044F                       u3350 017B  
                     u3334 012F                       u3255 0CEF                       u3271 0B91  
                     u2631 0C12                       u3175 0748                       u3511 044E  
                     u3351 017A                       u3335 012D                       u2624 0C0A  
                     u2800 0BFC                       u2720 0FD7                       u3600 05B4  
                     u3520 0491                       u3440 0355                       u3360 019B  
                     u3344 0157                       u2625 0C08                       u2801 0BFB  
                     u2721 0FD6                       u2705 0FA4                       u3601 05B3  
                     u3521 0490                       u3441 0354                       u3361 019A  
                     u3345 0155                       u2810 0EA2                       u2730 0FDD  
                     u2714 0FBC                       u3610 05BA                       u3530 04A0  
                     u3450 035C                       u3370 027C                       u3290 00D0  
                     u2811 0EA1                       u3195 0CAA                       u2731 0FDC  
                     u2715 0FBA                       u3611 05B9                       u3531 049F  
                     u3451 035B                       u3435 030F                       u3371 027B  
                     u3355 0177                       u3291 00CF                       u2900 0F24  
                     u2820 0EB3                       u2644 0C19                       u3620 05BE  
                     u3540 04D3                       u3460 0364                       u3380 0291  
                     u2901 0F23                       u2821 0EB2                       u2645 0C17  
                     u2725 0FD3                       u3621 05BD                       u3541 04D2  
                     u3461 0363                       u3381 0290                       u2910 0DCE  
                     u2830 0ED2                       u2654 0C28                       u2750 0FFE  
                     u3550 0518                       u3470 03BA                       u3390 029A  
                     u2911 0DCD                       u2831 0ED1                       u2655 0C26  
                     u2751 0FFD                       u3551 0517                       u3471 03B9  
                     u3391 0299                       u3295 00CC                       u2920 0DD9  
                     u2744 0FE3                       u2680 0F86                       u2760 0B3E  
                     u3560 0522                       u3480 0441                       u2921 0DD8  
                     u2745 0FE1                       u2681 0F85                       u2665 0F4D  
                     u2761 0B3D                       u3561 0521                       u3545 04CF  
                     u3481 0440                       u2930 0DEA                       u2850 0EE6  
                     u2770 0BE2                       u2690 0F8C                       u2674 0F6B  
                     u3570 053B                       u3490 0446                       u2931 0DE9  
                     u2851 0EE5                       u2771 0BE1                       u2755 0FFA  
                     u2691 0F8B                       u2675 0F69                       u3571 053A  
                     u3491 0445                       u3475 03B6                       u3580 0540  
                     u2845 0ED7                       u2685 0F82                       u3581 053F  
                     u2950 0DFC                       u2870 0F01                       u3590 05B0  
                     u2951 0DFB                       u2871 0F00                       u3647 0B51  
                     u3591 05AF                       u3657 0BC7                       u2945 0DEE  
                     u2865 0EE8                       u2785 0BE9                       u2970 0E0D  
                     u2890 0F1F                       u2971 0E0C                       u2891 0F1E  
                     u2875 0EFD                       u2795 0BF0                       _RCIF 0065  
                     u2965 0DFD                       u2885 0F11                       u2990 0E21  
                     u2991 0E20                       u2975 0E09                       u2985 0E15  
                     _TMR0 0001                       _TXIF 0064               __CFG_WRT$OFF 0000  
                     _disp 005B                       _main 0050                       _time 0072  
                     map@x 0030                       btemp 007E           __end_of_ADC_Read 0BDA  
            __CFG_BOREN$ON 0000                main@umidita 015B                       start 000E  
          __end_of_GetTime 0D12          ___bmul@multiplier 0023               main@endCiclo 015D  
                    ??_ISR 0076  __size_of_conteggioVeicoli 00E3                      ??_map 003A  
          __end_of___aldiv 0F38                      ?_main 0075            __end_of___awdiv 0E30  
            __CFG_WDTE$OFF 0000            __end_of___awmod 0DC7            ___awdiv@divisor 0027  
                    _T1CON 0010       bitParita@errorColumn 002A                      i1l322 05D0  
                    i1l340 0678                      i1l334 0640                      i1l328 0608  
                    i1l290 0B2E                      i1l346 06A5                      i1l292 0B34  
                    i1l356 0D63                      i1l293 0B36            ___awdiv@counter 002C  
                    _RCREG 001A                      _TMR1H 000F                      _TMR1L 000E  
                    _SPBRG 0099                      _PORTD 0008                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087                      _TRISD 0088  
                    _TRISE 0089                      _TXREG 0019              __CFG_PWRTE$ON 0000  
       __size_of_UART_Init 003A         __size_of_UART_Read 0009            __end_of_display 0811  
                    _count 0070                      _unita 005F                      main@i 0166  
                    main@l 016A                      _truck 004C                      pclath 000A  
                    status 0003                      wtemp0 007E            __initialization 0011  
             __end_of_main 05C3         __size_of_GetDigits 006B                     ??_main 003C  
        SetDefaultTimers@i 002D          SetDefaultTimers@l 002C         __size_of_BuildByte 00C8  
               _SetDisplay 0B68              bitChange@dato 0023                     _ADCON0 001F  
                   _ADCON1 009F                     _ADRESH 001E                     _ADRESL 009E  
         ___awdiv@dividend 0029                     i1l2210 0B2E                     i1l2212 0B35  
                   i1l2220 05D4                     i1l2230 05F7                     i1l2222 05DD  
                   i1l2240 0615                     i1l2232 05FB                     u200_20 05EA  
                   i1l2224 05E1                     i1l2216 05C3                     u200_21 05E9  
                   i1l2250 0633                     i1l2242 0619                     i1l2226 05EA  
                   i1l2234 05FD                     i1l2218 05C9                     i1l2260 0651  
                   i1l2244 0622                     i1l2252 0635                     i1l2236 0601  
                   i1l2228 05EE                     i1l2262 065A                     i1l2270 066D  
                   i1l2254 0639                     i1l2246 0626                     i1l2238 060C  
                   i1l2280 0692                     i1l2272 0671                     i1l2264 065E  
                   i1l2256 0644                     i1l2248 062F                     u201_20 05F7  
                   i1l2600 0D4F                     u201_21 05F6                     i1l2282 0696  
                   i1l2274 067C                     i1l2266 0667                     i1l2258 064D  
                   i1l2610 0D5F                     i1l2602 0D53                     i1l2284 069F  
                   i1l2276 0685                     i1l2268 066B                     i1l2612 0D61  
                   i1l2604 0D59                     i1l2286 06A3                     i1l2278 0689  
                   i1l2606 0D5A                     u210_20 065A                     u202_20 0601  
                   i1l2608 0D5B                     u210_21 0659                     u202_21 0600  
                   i1l2570 0D12                     i1l2580 0D25                     i1l2572 0D18  
                   i1l2590 0D40                     i1l2582 0D29                     i1l2574 0D1C  
                   u211_20 0667                     u203_20 060C                     i1l2592 0D41  
                   i1l2584 0D37                     i1l2576 0D1F                     u211_21 0666  
                   u203_21 060B                     i1l2594 0D46                     i1l2586 0D3B  
                   i1l2578 0D21                     i1l2596 0D4A                     i1l2588 0D3C  
                   i1l2598 0D4E                     u212_20 0671                     u204_20 0615  
                   u212_21 0670                     u204_21 0614                     u213_20 067C  
                   u205_20 0622                     u213_21 067B                     u205_21 0621  
                   u214_20 0685                     u206_20 062F                     u214_21 0684  
                   u206_21 062E                     u215_20 0692                     u207_20 0639  
                   u215_21 0691                     u207_21 0638                     u216_20 069F  
                   u208_20 0644                     u216_21 069E                     u208_21 0643  
                   u209_20 064D                     _INTCON 000B                     u209_21 064C  
                   u260_20 0D4E                     u260_21 0D4D                     u261_20 0D59  
                   u261_21 0D58                     u255_20 0D18                     u255_21 0D17  
                   u256_20 0D1C                     u256_21 0D1B                     u257_20 0D25  
                   u257_21 0D24                     u258_20 0D29                     u258_21 0D28  
                   u259_20 0D40                     u259_21 0D3F                     u196_20 0B34  
                   u196_21 0B33                     u197_20 05C9                     u197_21 05C8  
                   u198_20 05D4                     u198_21 05D3                     u199_20 05DD  
                   u199_21 05DC                     _TMR0IF 005A                     _TMR1IF 0060  
                ??_GetTime 0022               ?_UART_TxChar 0075          __end_of_UART_Init 0CD2  
        __end_of_UART_Read 0B37                     ___bmul 0B7D                  ??___aldiv 0028  
          GetTime@shortInt 0025                     ___wmul 0BDA                  ??___awdiv 002B  
                   _decine 005E                  ??___awmod 0024           __end_of_init_ADC 0B55  
                   _cycled 0060           ___awdiv@quotient 002E            ___awmod@divisor 0020  
          ___awmod@counter 0025           __end_of_sendByte 0C63              main@pressione 015C  
                ?_ADC_Read 0020                     saved_w 007E    __end_of__initialization 004C  
        __end_of_GetDigits 0E9B       bitParita@sommaColumn 0029  __size_of_SetDefaultTimers 008A  
      ___bmul@multiplicand 0020             __pcstackCOMMON 0075          __end_of_BuildByte 1000  
             __pidataBANK0 07F9               __pidataBANK1 0B94         __size_of_bitChange 0031  
         _conteggioVeicoli 05C3         __size_of_bitParita 00C9                 ??_ADC_Read 0022  
   SetDefaultTimers@giallo 0024                ?_SetDisplay 0020              GetDigits@Time 0030  
     _dataFromGatewayIndex 0059       _timerReadFromGateway 0058                 __pbssBANK0 004C  
               __pbssBANK1 00A0                 __pbssBANK2 0110                 __pbssBANK3 0190  
               __pmaintext 0050                    ?___bmul 0020                    ?___wmul 0020  
            sendByte@byte0 0039              sendByte@byte1 0034                 __pintentry 0004  
        __end_of_bitChange 0C32                 __stringtab 0800          __end_of_bitParita 076F  
                ?_init_ADC 0075                    _GetTime 0CD2            BuildByte@valore 0021  
          BuildByte@txByte 0025                  ?_sendByte 0034                 bitChange@n 0020  
               _n_semafori 0064       __size_of_UART_TxChar 000B                    ___aldiv 0E9B  
          __size_of___bmul 0017                    ___awdiv 0DC7                    ___awmod 0D6C  
      __size_of_SetDisplay 0015            __size_of___wmul 0027                    __ptext1 0C32  
                  __ptext2 0B37                    __ptext3 0F38                    __ptext4 0C63  
                  __ptext5 0BDA                    __ptext6 0B42                    __ptext7 06A6  
                  __ptext8 0C01                    __ptext9 0B7D             main@semaforoId 0158  
                  _comando 0073                    _display 0806               __size_of_ISR 005A  
               bitParita@i 0032                 bitParita@y 002D               __size_of_map 0035  
         ___awmod@dividend 0022           ___aldiv@dividend 0024       BuildByte@sommaColumn 002B  
                  clrloop0 0B27                    main@tmp 015E       end_of_initialization 004C  
               ??_init_ADC 0020             main@lux_select 015F                 ??_sendByte 0036  
         _SetDefaultTimers 076F                  _RCSTAbits 0018           ___aldiv@quotient 002B  
               _motorcycle 0054                  _UART_Init 0C98                  _UART_Read 0B2E  
                _PORTAbits 0005                  _PORTBbits 0006               SetDisplay@d1 0023  
             SetDisplay@d2 0020               SetDisplay@d3 0021                  _TRISCbits 0087  
        __size_of_ADC_Read 0026   __end_of_conteggioVeicoli 06A6                 map@out_max 0038  
        bitParita@errorRow 002C                 map@out_min 0036                  _TXSTAbits 0098  
                _GetDigits 0E30          bitParita@sommaRow 0028             __end_of___bmul 0B94  
           __end_of___wmul 0C01                 ?_UART_Init 002F                 ?_UART_Read 0075  
                _BuildByte 0F38          BuildByte@sommaRow 002A        start_initialization 0011  
              __end_of_ISR 0D6C               ??_SetDisplay 0023                __end_of_map 0C98  
               ?_GetDigits 0030                   ??___bmul 0021             ADC_Read@canale 0023  
                 ??___wmul 0024                 init_fetch0 0B55                __pdataBANK0 0064  
              __pdataBANK1 00C7         __end_of_SetDisplay 0B7D                 ?_BuildByte 0020  
              __pbssCOMMON 0070                  ___latbits 0002              __pcstackBANK0 0020  
            __pcstackBANK2 0158                   ?_GetTime 0020                  _bitChange 0C01  
    SetDefaultTimers@verde 0022      SetDefaultTimers@rosso 0020          __size_of_init_ADC 0013  
                _bitParita 06A6                  _centinaia 005D          __size_of_sendByte 0031  
                 ?___aldiv 0020                   ?___awdiv 0027                   ?___awmod 0020  
              ??_UART_Init 0031                ??_UART_Read 0075             BuildByte@i_342 0032  
                __pstrings 0800             BuildByte@y_343 002E             sendByte@valore 0035  
           sendByte@txByte 003A             BuildByte@byte0 0024             BuildByte@byte1 0020  
 __end_of_SetDefaultTimers 07F9                   _ADC_Read 0BB4                  _count_lux 0074  
                _countdown 005A              UART_TxChar@ch 0020            ___aldiv@divisor 0020  
        interrupt_function 0004            ___aldiv@counter 0029                 ?_bitChange 0020  
           ___wmul@product 0024                  clear_ram0 0B26                   _PIE1bits 008C  
            ??_UART_TxChar 0020                 ?_bitParita 0075                ??_GetDigits 0032  
                 _GO_nDONE 00FA          UART_Init@baudrate 002F                ??_BuildByte 0022  
                map@in_max 0034                  map@in_min 0032                __stringbase 0805  
                main@i_440 0164                  main@i_450 016B                  main@i_443 0165  
                main@i_436 016C                  main@i_437 0168                  main@i_438 0163  
        ___wmul@multiplier 0020                  main@index 0160               GetTime@index 0024  
        ?_conteggioVeicoli 0075               _secondPassed 0061         ??_conteggioVeicoli 0075  
         __size_of_GetTime 0040                   _Semafori 00C7             bitParita@i_330 0034  
              _readGateway 0062             bitParita@y_331 002F           __size_of___aldiv 009D  
      __end_of_UART_TxChar 0B42           __size_of___awdiv 0069           __size_of___awmod 005B  
           bitParita@error 002B         __end_of__stringtab 0806                  sendByte@i 003B  
                 __ptext10 0C98                   __ptext11 0E9B                   __ptext20 05C3  
                 __ptext12 0B68                   __ptext21 0B2E                   __ptext13 076F  
                 __ptext14 0CD2                   __ptext15 0E30                   __ptext16 0D6C  
                 __ptext17 0DC7                   __ptext18 0BB4                   __ptext19 0D12  
                 _init_ADC 0B42                bitParita@rx 0031                ??_bitChange 0021  
            __size_of_main 0573            _dataFromGateway 00A0                   _old_disp 005C  
              ??_bitParita 0024                   _sendByte 0C32                   main@temp 015A  
                 main@time 0161                GetTime@time 0026                 _INTCONbits 000B  
                 init_ram0 0B59                   intlevel1 0000            _readGatewayDone 0063  
                stringcode 0800                _UART_TxChar 0B37                 _OPTION_REG 0081  
          SetDisplay@value 0022                   stringdir 0800                   stringtab 0800  
        ?_SetDefaultTimers 0020               ___aldiv@sign 002A         ??_SetDefaultTimers 0026  
               BuildByte@i 0030                 BuildByte@y 002C  
