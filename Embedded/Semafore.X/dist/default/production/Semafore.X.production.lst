

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Jun 20 21:37:56 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  0003                     __pidataBANK0:	
   202                           
   203                           ;initializer for _n_semafori
   204  0003  340F               	retlw	15
   205                           
   206                           	psect	idataBANK1
   207  0BD2                     __pidataBANK1:	
   208                           
   209                           ;initializer for _Semafori
   210  0BD2  34BB               	retlw	low (_s0| 0)
   211  0BD3  3400               	retlw	high (_s0| 0)
   212  0BD4  34AF               	retlw	low (_s1| 0)
   213  0BD5  3400               	retlw	high (_s1| 0)
   214  0BD6  34E4               	retlw	low (_s2| (0+256))
   215  0BD7  3401               	retlw	high (_s2| (0+256))
   216  0BD8  34D8               	retlw	low (_s3| (0+256))
   217  0BD9  3401               	retlw	high (_s3| (0+256))
   218  0BDA  34CC               	retlw	low (_s4| (0+256))
   219  0BDB  3401               	retlw	high (_s4| (0+256))
   220  0BDC  34C0               	retlw	low (_s5| (0+256))
   221  0BDD  3401               	retlw	high (_s5| (0+256))
   222  0BDE  34B4               	retlw	low (_s6| (0+256))
   223  0BDF  3401               	retlw	high (_s6| (0+256))
   224  0BE0  34A8               	retlw	low (_s7| (0+256))
   225  0BE1  3401               	retlw	high (_s7| (0+256))
   226  0BE2  349C               	retlw	low (_s8| (0+256))
   227  0BE3  3401               	retlw	high (_s8| (0+256))
   228  0BE4  3490               	retlw	low (_s9| (0+256))
   229  0BE5  3401               	retlw	high (_s9| (0+256))
   230  0BE6  344C               	retlw	low (_s10| (0+256))
   231  0BE7  3401               	retlw	high (_s10| (0+256))
   232  0BE8  3440               	retlw	low (_s11| (0+256))
   233  0BE9  3401               	retlw	high (_s11| (0+256))
   234  0BEA  3434               	retlw	low (_s12| (0+256))
   235  0BEB  3401               	retlw	high (_s12| (0+256))
   236  0BEC  3428               	retlw	low (_s13| (0+256))
   237  0BED  3401               	retlw	high (_s13| (0+256))
   238  0BEE  341C               	retlw	low (_s14| (0+256))
   239  0BEF  3401               	retlw	high (_s14| (0+256))
   240  0BF0  3410               	retlw	low (_s15| (0+256))
   241  0BF1  3401               	retlw	high (_s15| (0+256))
   242                           
   243                           	psect	strings
   244  0800                     __pstrings:	
   245  0800                     stringtab:	
   246  0800                     __stringtab:	
   247  0800                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250  0800                     stringdir:	
   251  0800  3008               	movlw	high stringdir
   252  0801  008A               	movwf	10
   253  0802  0804               	movf	4,w
   254  0803  0A84               	incf	4,f
   255  0804  0782               	addwf	2,f
   256  0805                     __stringbase:	
   257  0805  3400               	retlw	0
   258  0806                     __end_of__stringtab:	
   259  0806                     _display:	
   260  0806  343F               	retlw	63
   261  0807  3406               	retlw	6
   262  0808  345B               	retlw	91
   263  0809  344F               	retlw	79
   264  080A  3466               	retlw	102
   265  080B  346D               	retlw	109
   266  080C  347D               	retlw	125
   267  080D  3407               	retlw	7
   268  080E  347F               	retlw	127
   269  080F  346F               	retlw	111
   270  0810  3400               	retlw	0
   271  0811                     __end_of_display:	
   272  0006                     _PORTBbits	set	6
   273  0008                     _PORTD	set	8
   274  0005                     _PORTAbits	set	5
   275  001A                     _RCREG	set	26
   276  0019                     _TXREG	set	25
   277  000B                     _INTCONbits	set	11
   278  0018                     _RCSTAbits	set	24
   279  001E                     _ADRESH	set	30
   280  001F                     _ADCON0	set	31
   281  000E                     _TMR1L	set	14
   282  000F                     _TMR1H	set	15
   283  0010                     _T1CON	set	16
   284  0001                     _TMR0	set	1
   285  000B                     _INTCON	set	11
   286  0060                     _TMR1IF	set	96
   287  005A                     _TMR0IF	set	90
   288  0065                     _RCIF	set	101
   289  0064                     _TXIF	set	100
   290  00FA                     _GO_nDONE	set	250
   291  008C                     _PIE1bits	set	140
   292  0099                     _SPBRG	set	153
   293  0098                     _TXSTAbits	set	152
   294  0087                     _TRISCbits	set	135
   295  009E                     _ADRESL	set	158
   296  009F                     _ADCON1	set	159
   297  0085                     _TRISA	set	133
   298  0081                     _OPTION_REG	set	129
   299  0089                     _TRISE	set	137
   300  0088                     _TRISD	set	136
   301  0087                     _TRISC	set	135
   302  0086                     _TRISB	set	134
   303                           
   304                           ; #config settings
   305  0000                     
   306                           	psect	cinit
   307  0011                     start_initialization:	
   308  0011                     __initialization:	
   309                           
   310                           ; Initialize objects allocated to BANK1
   311  0011  1383               	bcf	3,7	;select IRP bank0
   312  0012  30E7               	movlw	low (__pdataBANK1+32)
   313  0013  00FD               	movwf	btemp+-1
   314  0014  300B               	movlw	high __pidataBANK1
   315  0015  00FE               	movwf	btemp
   316  0016  30D2               	movlw	low __pidataBANK1
   317  0017  00FF               	movwf	btemp+1
   318  0018  30C7               	movlw	low __pdataBANK1
   319  0019  0084               	movwf	4
   320  001A  120A  158A  2397  120A  118A  	fcall	init_ram0
   321                           
   322                           ; Initialize objects allocated to BANK0
   323  001F  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   324  0024  00E4               	movwf	__pdataBANK0& (0+127)
   325                           
   326                           ; Clear objects allocated to BANK3
   327  0025  1783               	bsf	3,7	;select IRP bank2
   328  0026  3090               	movlw	low __pbssBANK3
   329  0027  0084               	movwf	4
   330  0028  30F0               	movlw	low (__pbssBANK3+96)
   331  0029  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   332                           
   333                           ; Clear objects allocated to BANK2
   334  002E  3010               	movlw	low __pbssBANK2
   335  002F  0084               	movwf	4
   336  0030  3058               	movlw	low (__pbssBANK2+72)
   337  0031  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   338                           
   339                           ; Clear objects allocated to BANK1
   340  0036  1383               	bcf	3,7	;select IRP bank0
   341  0037  30A0               	movlw	low __pbssBANK1
   342  0038  0084               	movwf	4
   343  0039  30C7               	movlw	low (__pbssBANK1+39)
   344  003A  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   345                           
   346                           ; Clear objects allocated to BANK0
   347  003F  304C               	movlw	low __pbssBANK0
   348  0040  0084               	movwf	4
   349  0041  3064               	movlw	low (__pbssBANK0+24)
   350  0042  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   351                           
   352                           ; Clear objects allocated to COMMON
   353  0047  01F0               	clrf	__pbssCOMMON& (0+127)
   354  0048  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   355  0049  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   356  004A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   357  004B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   358  004C                     end_of_initialization:	
   359                           ;End of C runtime variable initialization code
   360                           
   361  004C                     __end_of__initialization:	
   362  004C  0183               	clrf	3
   363  004D  120A  118A  2850   	ljmp	_main	;jump to C main() function
   364                           
   365                           	psect	bssCOMMON
   366  0070                     __pbssCOMMON:	
   367  0070                     _count:	
   368  0070                     	ds	2
   369  0072                     _time:	
   370  0072                     	ds	1
   371  0073                     _comando:	
   372  0073                     	ds	1
   373  0074                     _count_lux:	
   374  0074                     	ds	1
   375                           
   376                           	psect	bssBANK0
   377  004C                     __pbssBANK0:	
   378  004C                     _truck:	
   379  004C                     	ds	4
   380  0050                     _car:	
   381  0050                     	ds	4
   382  0054                     _motorcycle:	
   383  0054                     	ds	4
   384  0058                     _timerReadFromGateway:	
   385  0058                     	ds	1
   386  0059                     _dataFromGatewayIndex:	
   387  0059                     	ds	1
   388  005A                     _countdown:	
   389  005A                     	ds	1
   390  005B                     _disp:	
   391  005B                     	ds	1
   392  005C                     _old_disp:	
   393  005C                     	ds	1
   394  005D                     _centinaia:	
   395  005D                     	ds	1
   396  005E                     _decine:	
   397  005E                     	ds	1
   398  005F                     _unita:	
   399  005F                     	ds	1
   400  0060                     _cycled:	
   401  0060                     	ds	1
   402  0061                     _secondPassed:	
   403  0061                     	ds	1
   404  0062                     _readGateway:	
   405  0062                     	ds	1
   406  0063                     _readGatewayDone:	
   407  0063                     	ds	1
   408                           
   409                           	psect	dataBANK0
   410  0064                     __pdataBANK0:	
   411  0064                     _n_semafori:	
   412  0064                     	ds	1
   413                           
   414                           	psect	bssBANK1
   415  00A0                     __pbssBANK1:	
   416  00A0                     _dataFromGateway:	
   417  00A0                     	ds	15
   418  00AF                     _s1:	
   419  00AF                     	ds	12
   420  00BB                     _s0:	
   421  00BB                     	ds	12
   422                           
   423                           	psect	dataBANK1
   424  00C7                     __pdataBANK1:	
   425  00C7                     _Semafori:	
   426  00C7                     	ds	32
   427                           
   428                           	psect	bssBANK3
   429  0190                     __pbssBANK3:	
   430  0190                     _s9:	
   431  0190                     	ds	12
   432  019C                     _s8:	
   433  019C                     	ds	12
   434  01A8                     _s7:	
   435  01A8                     	ds	12
   436  01B4                     _s6:	
   437  01B4                     	ds	12
   438  01C0                     _s5:	
   439  01C0                     	ds	12
   440  01CC                     _s4:	
   441  01CC                     	ds	12
   442  01D8                     _s3:	
   443  01D8                     	ds	12
   444  01E4                     _s2:	
   445  01E4                     	ds	12
   446                           
   447                           	psect	bssBANK2
   448  0110                     __pbssBANK2:	
   449  0110                     _s15:	
   450  0110                     	ds	12
   451  011C                     _s14:	
   452  011C                     	ds	12
   453  0128                     _s13:	
   454  0128                     	ds	12
   455  0134                     _s12:	
   456  0134                     	ds	12
   457  0140                     _s11:	
   458  0140                     	ds	12
   459  014C                     _s10:	
   460  014C                     	ds	12
   461                           
   462                           	psect	inittext
   463  0B93                     init_fetch0:	
   464                           ;	Called with low address in FSR and high address in W
   465                           
   466  0B93  087E               	movf	btemp,w
   467  0B94  008A               	movwf	10
   468  0B95  087F               	movf	btemp+1,w
   469  0B96  0082               	movwf	2
   470  0B97                     init_ram0:	
   471                           ;Called with:
   472                           ;	high address of idata address in btemp 
   473                           ;	low address of idata address in btemp+1 
   474                           ;	low address of data in FSR
   475                           ;	high address + 1 of data in btemp-1
   476                           
   477  0B97  120A  158A  2393  120A  158A  	fcall	init_fetch0
   478  0B9C  0080               	movwf	0
   479  0B9D  0A84               	incf	4,f
   480  0B9E  0804               	movf	4,w
   481  0B9F  067D               	xorwf	btemp+-1,w
   482  0BA0  1903               	btfsc	3,2
   483  0BA1  3400               	retlw	0
   484  0BA2  0AFF               	incf	btemp+1,f
   485  0BA3  1903               	btfsc	3,2
   486  0BA4  0AFE               	incf	btemp,f
   487  0BA5  2B97               	goto	init_ram0
   488                           
   489                           	psect	clrtext
   490  07F8                     clear_ram0:	
   491                           ;	Called with FSR containing the base address, and
   492                           ;	W with the last address+1
   493                           
   494  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   495  07F9                     clrloop0:	
   496  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   497  07FA  0A84               	incf	4,f	;increment pointer
   498  07FB  0604               	xorwf	4,w	;XOR with final address
   499  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   500  07FD  3400               	retlw	0	;all done for this memory range, return
   501  07FE  0604               	xorwf	4,w	;XOR again to restore value
   502  07FF  2FF9               	goto	clrloop0	;do the next byte
   503                           
   504                           	psect	cstackBANK2
   505  0158                     __pcstackBANK2:	
   506  0158                     main@semaforoId:	
   507                           
   508                           ; 1 bytes @ 0x0
   509  0158                     	ds	1
   510  0159                     main@colorId:	
   511                           
   512                           ; 1 bytes @ 0x1
   513  0159                     	ds	1
   514  015A                     main@temp:	
   515                           
   516                           ; 1 bytes @ 0x2
   517  015A                     	ds	1
   518  015B                     main@umidita:	
   519                           
   520                           ; 1 bytes @ 0x3
   521  015B                     	ds	1
   522  015C                     main@pressione:	
   523                           
   524                           ; 1 bytes @ 0x4
   525  015C                     	ds	1
   526  015D                     main@endCiclo:	
   527                           
   528                           ; 1 bytes @ 0x5
   529  015D                     	ds	1
   530  015E                     main@tmp:	
   531                           
   532                           ; 1 bytes @ 0x6
   533  015E                     	ds	1
   534  015F                     main@lux_select:	
   535                           
   536                           ; 1 bytes @ 0x7
   537  015F                     	ds	1
   538  0160                     main@index:	
   539                           
   540                           ; 1 bytes @ 0x8
   541  0160                     	ds	1
   542  0161                     main@time:	
   543                           
   544                           ; 2 bytes @ 0x9
   545  0161                     	ds	2
   546  0163                     main@i_437:	
   547                           
   548                           ; 1 bytes @ 0xB
   549  0163                     	ds	1
   550  0164                     main@i_439:	
   551                           
   552                           ; 1 bytes @ 0xC
   553  0164                     	ds	1
   554  0165                     main@i_442:	
   555                           
   556                           ; 1 bytes @ 0xD
   557  0165                     	ds	1
   558  0166                     main@i_436:	
   559                           
   560                           ; 2 bytes @ 0xE
   561  0166                     	ds	2
   562  0168                     main@l:	
   563                           
   564                           ; 1 bytes @ 0x10
   565  0168                     	ds	1
   566  0169                     main@i_449:	
   567                           
   568                           ; 1 bytes @ 0x11
   569  0169                     	ds	1
   570  016A                     main@i:	
   571                           
   572                           ; 2 bytes @ 0x12
   573  016A                     	ds	2
   574                           
   575                           	psect	cstackCOMMON
   576  0075                     __pcstackCOMMON:	
   577  0075                     ?_init_ADC:	
   578  0075                     ?_bitParita:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0075                     ?_main:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0075                     ?_UART_TxChar:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0075                     ?_UART_Read:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0075                     ??_UART_Read:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0075                     ?_conteggioVeicoli:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0075                     ??_conteggioVeicoli:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0075                     ?_ISR:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 1 bytes @ 0x0
   604  0075                     	ds	1
   605  0076                     ??_ISR:	
   606                           
   607                           ; 1 bytes @ 0x1
   608  0076                     	ds	4
   609                           
   610                           	psect	cstackBANK0
   611  0020                     __pcstackBANK0:	
   612  0020                     ??_init_ADC:	
   613  0020                     ?_SetDefaultTimers:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0020                     ?_SetDisplay:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0020                     ?_BuildByte:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0020                     ?_bitChange:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0020                     ??_UART_TxChar:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0020                     ?___bmul:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0020                     ?_ADC_Read:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0020                     ?_GetTime:	
   635                           ; 2 bytes @ 0x0
   636                           
   637  0020                     ?___wmul:	
   638                           ; 2 bytes @ 0x0
   639                           
   640  0020                     ?___awmod:	
   641                           ; 2 bytes @ 0x0
   642                           
   643  0020                     ?___aldiv:	
   644                           ; 2 bytes @ 0x0
   645                           
   646  0020                     bitChange@n:	
   647                           ; 4 bytes @ 0x0
   648                           
   649  0020                     BuildByte@byte1:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0020                     UART_TxChar@ch:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0020                     SetDisplay@d2:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0020                     ___bmul@multiplicand:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0020                     SetDefaultTimers@rosso:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0020                     ___wmul@multiplier:	
   665                           ; 2 bytes @ 0x0
   666                           
   667  0020                     ___awmod@divisor:	
   668                           ; 2 bytes @ 0x0
   669                           
   670  0020                     ___aldiv@divisor:	
   671                           ; 2 bytes @ 0x0
   672                           
   673                           
   674                           ; 4 bytes @ 0x0
   675  0020                     	ds	1
   676  0021                     ??_bitChange:	
   677  0021                     ??___bmul:	
   678                           ; 1 bytes @ 0x1
   679                           
   680  0021                     BuildByte@valore:	
   681                           ; 1 bytes @ 0x1
   682                           
   683  0021                     SetDisplay@d3:	
   684                           ; 1 bytes @ 0x1
   685                           
   686                           
   687                           ; 1 bytes @ 0x1
   688  0021                     	ds	1
   689  0022                     ??_ADC_Read:	
   690  0022                     ??_GetTime:	
   691                           ; 1 bytes @ 0x2
   692                           
   693  0022                     ??_BuildByte:	
   694                           ; 1 bytes @ 0x2
   695                           
   696  0022                     SetDisplay@value:	
   697                           ; 1 bytes @ 0x2
   698                           
   699  0022                     ___bmul@product:	
   700                           ; 1 bytes @ 0x2
   701                           
   702  0022                     SetDefaultTimers@verde:	
   703                           ; 1 bytes @ 0x2
   704                           
   705  0022                     ___wmul@multiplicand:	
   706                           ; 2 bytes @ 0x2
   707                           
   708  0022                     ___awmod@dividend:	
   709                           ; 2 bytes @ 0x2
   710                           
   711                           
   712                           ; 2 bytes @ 0x2
   713  0022                     	ds	1
   714  0023                     ??_SetDisplay:	
   715  0023                     bitChange@dato:	
   716                           ; 1 bytes @ 0x3
   717                           
   718  0023                     ADC_Read@canale:	
   719                           ; 1 bytes @ 0x3
   720                           
   721  0023                     SetDisplay@d1:	
   722                           ; 1 bytes @ 0x3
   723                           
   724  0023                     ___bmul@multiplier:	
   725                           ; 1 bytes @ 0x3
   726                           
   727                           
   728                           ; 1 bytes @ 0x3
   729  0023                     	ds	1
   730  0024                     ??_bitParita:	
   731  0024                     ??___wmul:	
   732                           ; 1 bytes @ 0x4
   733                           
   734  0024                     ??___awmod:	
   735                           ; 1 bytes @ 0x4
   736                           
   737  0024                     BuildByte@byte0:	
   738                           ; 1 bytes @ 0x4
   739                           
   740  0024                     GetTime@index:	
   741                           ; 1 bytes @ 0x4
   742                           
   743  0024                     SetDefaultTimers@giallo:	
   744                           ; 1 bytes @ 0x4
   745                           
   746  0024                     ___wmul@product:	
   747                           ; 2 bytes @ 0x4
   748                           
   749  0024                     ___aldiv@dividend:	
   750                           ; 2 bytes @ 0x4
   751                           
   752                           
   753                           ; 4 bytes @ 0x4
   754  0024                     	ds	1
   755  0025                     GetTime@shortInt:	
   756  0025                     ___awmod@counter:	
   757                           ; 1 bytes @ 0x5
   758                           
   759  0025                     BuildByte@txByte:	
   760                           ; 1 bytes @ 0x5
   761                           
   762                           
   763                           ; 5 bytes @ 0x5
   764  0025                     	ds	1
   765  0026                     ??_SetDefaultTimers:	
   766  0026                     ___awmod@sign:	
   767                           ; 1 bytes @ 0x6
   768                           
   769  0026                     GetTime@time:	
   770                           ; 1 bytes @ 0x6
   771                           
   772                           
   773                           ; 2 bytes @ 0x6
   774  0026                     	ds	1
   775  0027                     ?___awdiv:	
   776  0027                     ___awdiv@divisor:	
   777                           ; 2 bytes @ 0x7
   778                           
   779                           
   780                           ; 2 bytes @ 0x7
   781  0027                     	ds	1
   782  0028                     ??___aldiv:	
   783  0028                     bitParita@sommaRow:	
   784                           ; 1 bytes @ 0x8
   785                           
   786                           
   787                           ; 1 bytes @ 0x8
   788  0028                     	ds	1
   789  0029                     bitParita@sommaColumn:	
   790  0029                     ___aldiv@counter:	
   791                           ; 1 bytes @ 0x9
   792                           
   793  0029                     ___awdiv@dividend:	
   794                           ; 1 bytes @ 0x9
   795                           
   796                           
   797                           ; 2 bytes @ 0x9
   798  0029                     	ds	1
   799  002A                     bitParita@errorColumn:	
   800  002A                     BuildByte@sommaRow:	
   801                           ; 1 bytes @ 0xA
   802                           
   803  002A                     ___aldiv@sign:	
   804                           ; 1 bytes @ 0xA
   805                           
   806                           
   807                           ; 1 bytes @ 0xA
   808  002A                     	ds	1
   809  002B                     ??___awdiv:	
   810  002B                     bitParita@error:	
   811                           ; 1 bytes @ 0xB
   812                           
   813  002B                     BuildByte@sommaColumn:	
   814                           ; 1 bytes @ 0xB
   815                           
   816  002B                     ___aldiv@quotient:	
   817                           ; 1 bytes @ 0xB
   818                           
   819                           
   820                           ; 4 bytes @ 0xB
   821  002B                     	ds	1
   822  002C                     bitParita@errorRow:	
   823  002C                     SetDefaultTimers@l:	
   824                           ; 1 bytes @ 0xC
   825                           
   826  002C                     ___awdiv@counter:	
   827                           ; 1 bytes @ 0xC
   828                           
   829  002C                     BuildByte@y:	
   830                           ; 1 bytes @ 0xC
   831                           
   832                           
   833                           ; 2 bytes @ 0xC
   834  002C                     	ds	1
   835  002D                     SetDefaultTimers@i:	
   836  002D                     ___awdiv@sign:	
   837                           ; 1 bytes @ 0xD
   838                           
   839  002D                     bitParita@y:	
   840                           ; 1 bytes @ 0xD
   841                           
   842                           
   843                           ; 2 bytes @ 0xD
   844  002D                     	ds	1
   845  002E                     BuildByte@y_343:	
   846  002E                     ___awdiv@quotient:	
   847                           ; 2 bytes @ 0xE
   848                           
   849                           
   850                           ; 2 bytes @ 0xE
   851  002E                     	ds	1
   852  002F                     ?_UART_Init:	
   853  002F                     bitParita@y_331:	
   854                           ; 1 bytes @ 0xF
   855                           
   856  002F                     UART_Init@baudrate:	
   857                           ; 2 bytes @ 0xF
   858                           
   859                           
   860                           ; 2 bytes @ 0xF
   861  002F                     	ds	1
   862  0030                     ?_GetDigits:	
   863  0030                     ?_map:	
   864                           ; 1 bytes @ 0x10
   865                           
   866  0030                     map@x:	
   867                           ; 2 bytes @ 0x10
   868                           
   869  0030                     BuildByte@i:	
   870                           ; 2 bytes @ 0x10
   871                           
   872  0030                     GetDigits@Time:	
   873                           ; 2 bytes @ 0x10
   874                           
   875                           
   876                           ; 2 bytes @ 0x10
   877  0030                     	ds	1
   878  0031                     ??_UART_Init:	
   879  0031                     bitParita@rx:	
   880                           ; 1 bytes @ 0x11
   881                           
   882                           
   883                           ; 1 bytes @ 0x11
   884  0031                     	ds	1
   885  0032                     ??_GetDigits:	
   886  0032                     map@in_min:	
   887                           ; 1 bytes @ 0x12
   888                           
   889  0032                     bitParita@i:	
   890                           ; 2 bytes @ 0x12
   891                           
   892  0032                     BuildByte@i_342:	
   893                           ; 2 bytes @ 0x12
   894                           
   895                           
   896                           ; 2 bytes @ 0x12
   897  0032                     	ds	2
   898  0034                     ?_sendByte:	
   899  0034                     sendByte@byte1:	
   900                           ; 1 bytes @ 0x14
   901                           
   902  0034                     map@in_max:	
   903                           ; 1 bytes @ 0x14
   904                           
   905  0034                     bitParita@i_330:	
   906                           ; 2 bytes @ 0x14
   907                           
   908                           
   909                           ; 2 bytes @ 0x14
   910  0034                     	ds	1
   911  0035                     sendByte@valore:	
   912  0035                     _GetDigits$1151:	
   913                           ; 1 bytes @ 0x15
   914                           
   915                           
   916                           ; 2 bytes @ 0x15
   917  0035                     	ds	1
   918  0036                     ??_sendByte:	
   919  0036                     map@out_min:	
   920                           ; 1 bytes @ 0x16
   921                           
   922                           
   923                           ; 2 bytes @ 0x16
   924  0036                     	ds	2
   925  0038                     map@out_max:	
   926                           
   927                           ; 2 bytes @ 0x18
   928  0038                     	ds	1
   929  0039                     sendByte@byte0:	
   930                           
   931                           ; 1 bytes @ 0x19
   932  0039                     	ds	1
   933  003A                     ??_map:	
   934  003A                     sendByte@txByte:	
   935                           ; 1 bytes @ 0x1A
   936                           
   937                           
   938                           ; 1 bytes @ 0x1A
   939  003A                     	ds	1
   940  003B                     sendByte@i:	
   941                           
   942                           ; 1 bytes @ 0x1B
   943  003B                     	ds	1
   944  003C                     ??_main:	
   945                           
   946                           ; 1 bytes @ 0x1C
   947  003C                     	ds	16
   948                           
   949                           	psect	maintext
   950  0050                     __pmaintext:	
   951 ;;
   952 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   953 ;;
   954 ;; *************** function _main *****************
   955 ;; Defined at:
   956 ;;		line 129 in file "main.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;		None
   959 ;; Auto vars:     Size  Location     Type
   960 ;;  i               1   17[BANK2 ] unsigned char 
   961 ;;  index           1    8[BANK2 ] unsigned char 
   962 ;;  colorId         1    1[BANK2 ] unsigned char 
   963 ;;  semaforoId      1    0[BANK2 ] unsigned char 
   964 ;;  i               1   13[BANK2 ] unsigned char 
   965 ;;  i               1   12[BANK2 ] unsigned char 
   966 ;;  i               1   11[BANK2 ] unsigned char 
   967 ;;  i               2   14[BANK2 ] int 
   968 ;;  i               2   18[BANK2 ] int 
   969 ;;  l               1   16[BANK2 ] unsigned char 
   970 ;;  tmp             1    6[BANK2 ] unsigned char 
   971 ;;  time            2    9[BANK2 ] int 
   972 ;;  lux_select      1    7[BANK2 ] unsigned char 
   973 ;;  endCiclo        1    5[BANK2 ] struct .
   974 ;;  pressione       1    4[BANK2 ] unsigned char 
   975 ;;  umidita         1    3[BANK2 ] unsigned char 
   976 ;;  temp            1    2[BANK2 ] unsigned char 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : B00/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   986 ;;      Params:         0       0       0       0       0
   987 ;;      Locals:         0       0       0       0      20
   988 ;;      Temps:          0      16       0       0       0
   989 ;;      Totals:         0      16       0       0      20
   990 ;;Total ram usage:       36 bytes
   991 ;; Hardware stack levels required when called:    4
   992 ;; This function calls:
   993 ;;		_ADC_Read
   994 ;;		_GetDigits
   995 ;;		_GetTime
   996 ;;		_SetDefaultTimers
   997 ;;		_SetDisplay
   998 ;;		_UART_Init
   999 ;;		___awmod
  1000 ;;		___bmul
  1001 ;;		_bitParita
  1002 ;;		_init_ADC
  1003 ;;		_map
  1004 ;;		_sendByte
  1005 ;; This function is called by:
  1006 ;;		Startup code after reset
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           
  1011                           ;psect for function _main
  1012  0050                     _main:	
  1013  0050                     l3080:	
  1014                           ;incstack = 0
  1015                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1016                           
  1017                           
  1018                           ;main.c: 131:     TRISB = 0x1F;
  1019  0050  301F               	movlw	31
  1020  0051  1683               	bsf	3,5	;RP0=1, select bank1
  1021  0052  1303               	bcf	3,6	;RP1=0, select bank1
  1022  0053  0086               	movwf	6	;volatile
  1023                           
  1024                           ;main.c: 132:     TRISC = 0x80;
  1025  0054  3080               	movlw	128
  1026  0055  0087               	movwf	7	;volatile
  1027  0056                     l3082:	
  1028                           
  1029                           ;main.c: 133:     TRISD = 0x00;
  1030  0056  0188               	clrf	8	;volatile
  1031  0057                     l3084:	
  1032                           
  1033                           ;main.c: 134:     TRISE = 0x01;
  1034  0057  3001               	movlw	1
  1035  0058  0089               	movwf	9	;volatile
  1036  0059                     l3086:	
  1037                           
  1038                           ;main.c: 135:     INTCON = 0xE0;
  1039  0059  30E0               	movlw	224
  1040  005A  008B               	movwf	11	;volatile
  1041  005B                     l3088:	
  1042                           
  1043                           ;main.c: 136:     OPTION_REG = 0x04;
  1044  005B  3004               	movlw	4
  1045  005C  0081               	movwf	1	;volatile
  1046  005D                     l3090:	
  1047                           
  1048                           ;main.c: 137:     TMR0 = 6;
  1049  005D  3006               	movlw	6
  1050  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1051  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1052  0060  0081               	movwf	1	;volatile
  1053  0061                     l3092:	
  1054                           
  1055                           ;main.c: 138:     T1CON = 0x31;
  1056  0061  3031               	movlw	49
  1057  0062  0090               	movwf	16	;volatile
  1058  0063                     l3094:	
  1059                           
  1060                           ;main.c: 144:     init_ADC();
  1061  0063  120A  158A  2380  120A  118A  	fcall	_init_ADC
  1062  0068                     l3096:	
  1063                           
  1064                           ;main.c: 145:     UART_Init(9600);
  1065  0068  3080               	movlw	128
  1066  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1067  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1068  006B  00AF               	movwf	UART_Init@baudrate
  1069  006C  3025               	movlw	37
  1070  006D  00B0               	movwf	UART_Init@baudrate+1
  1071  006E  120A  158A  24D6  120A  118A  	fcall	_UART_Init
  1072  0073                     l3098:	
  1073                           
  1074                           ;main.c: 146:     SetDefaultTimers(2, 2, 2);
  1075  0073  3002               	movlw	2
  1076  0074  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0075  1303               	bcf	3,6	;RP1=0, select bank0
  1078  0076  00A0               	movwf	SetDefaultTimers@rosso
  1079  0077  3000               	movlw	0
  1080  0078  00A1               	movwf	SetDefaultTimers@rosso+1
  1081  0079  3002               	movlw	2
  1082  007A  00A2               	movwf	SetDefaultTimers@verde
  1083  007B  3000               	movlw	0
  1084  007C  00A3               	movwf	SetDefaultTimers@verde+1
  1085  007D  3002               	movlw	2
  1086  007E  00A4               	movwf	SetDefaultTimers@giallo
  1087  007F  3000               	movlw	0
  1088  0080  00A5               	movwf	SetDefaultTimers@giallo+1
  1089  0081  120A  158A  26D9  120A  118A  	fcall	_SetDefaultTimers
  1090  0086                     l3100:	
  1091                           
  1092                           ;main.c: 148:     TMR1H = 60;
  1093  0086  303C               	movlw	60
  1094  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1095  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1096  0089  008F               	movwf	15	;volatile
  1097  008A                     l3102:	
  1098                           
  1099                           ;main.c: 149:     TMR1L = 176;
  1100  008A  30B0               	movlw	176
  1101  008B  008E               	movwf	14	;volatile
  1102  008C                     l3104:	
  1103                           
  1104                           ;main.c: 151:     int time;;main.c: 152:     unsigned char lux_select = 0;
  1105  008C  1283               	bcf	3,5	;RP0=0, select bank2
  1106  008D  1703               	bsf	3,6	;RP1=1, select bank2
  1107  008E  01DF               	clrf	main@lux_select^(0+256)
  1108  008F                     l3106:	
  1109                           
  1110                           ;main.c: 153:     disp = 0;
  1111  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1112  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1113  0091  01DB               	clrf	_disp
  1114  0092                     l3108:	
  1115  0092                     l3110:	
  1116  0092                     l3112:	
  1117  0092                     l3114:	
  1118                           
  1119                           ;main.c: 157:     Bit endCiclo;;main.c: 158:     endCiclo.Bit = 1;
  1120  0092  1283               	bcf	3,5	;RP0=0, select bank2
  1121  0093  1703               	bsf	3,6	;RP1=1, select bank2
  1122  0094  145D               	bsf	main@endCiclo^(0+256),0
  1123  0095                     l3116:	
  1124                           
  1125                           ;main.c: 161:     {;main.c: 163:         if (readGateway.Bit)
  1126  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1127  0096  1C62               	btfss	_readGateway,0
  1128  0097  2899               	goto	u3271
  1129  0098  289A               	goto	u3270
  1130  0099                     u3271:	
  1131  0099  2A74               	goto	l212
  1132  009A                     u3270:	
  1133  009A  2A5F               	goto	l3186
  1134  009B                     l214:	
  1135                           ;main.c: 166:             {;main.c: 167:             case 0x08:
  1136                           
  1137                           
  1138                           ;main.c: 168:                 readGatewayDone.Bit = 1;
  1139  009B  1463               	bsf	_readGatewayDone,0
  1140                           
  1141                           ;main.c: 169:                 readGateway.Bit = 0;
  1142  009C  1062               	bcf	_readGateway,0
  1143  009D                     l3120:	
  1144                           
  1145                           ;main.c: 171:                 for (int i = 0; i < 4; i++)
  1146  009D  1283               	bcf	3,5	;RP0=0, select bank2
  1147  009E  1703               	bsf	3,6	;RP1=1, select bank2
  1148  009F  01EA               	clrf	main@i^(0+256)
  1149  00A0  01EB               	clrf	(main@i+1)^(0+256)
  1150  00A1                     l3122:	
  1151  00A1  086B               	movf	(main@i+1)^(0+256),w
  1152  00A2  3A80               	xorlw	128
  1153  00A3  00FF               	movwf	btemp+1
  1154  00A4  3080               	movlw	128
  1155  00A5  027F               	subwf	btemp+1,w
  1156  00A6  1D03               	skipz
  1157  00A7  28AA               	goto	u3285
  1158  00A8  3004               	movlw	4
  1159  00A9  026A               	subwf	main@i^(0+256),w
  1160  00AA                     u3285:	
  1161  00AA  1C03               	skipc
  1162  00AB  28AD               	goto	u3281
  1163  00AC  28AE               	goto	u3280
  1164  00AD                     u3281:	
  1165  00AD  28AF               	goto	l3126
  1166  00AE                     u3280:	
  1167  00AE  292B               	goto	l3132
  1168  00AF                     l3126:	
  1169                           
  1170                           ;main.c: 172:                 {;main.c: 173:                     sendByte((0x01 << (i + 
      +                          1)), 0x01, motorcycle[i]);
  1171  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  1172  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  1173  00B1  01B4               	clrf	sendByte@byte1
  1174  00B2  0AB4               	incf	sendByte@byte1,f
  1175  00B3  1283               	bcf	3,5	;RP0=0, select bank2
  1176  00B4  1703               	bsf	3,6	;RP1=1, select bank2
  1177  00B5  086A               	movf	main@i^(0+256),w
  1178  00B6  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1179  00B7  0084               	movwf	4
  1180  00B8  1383               	bcf	3,7	;select IRP bank0
  1181  00B9  0800               	movf	0,w
  1182  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1183  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1184  00BC  00BC               	movwf	??_main
  1185  00BD  083C               	movf	??_main,w
  1186  00BE  00B5               	movwf	sendByte@valore
  1187  00BF  3001               	movlw	1
  1188  00C0  00BD               	movwf	??_main+1
  1189  00C1  1283               	bcf	3,5	;RP0=0, select bank2
  1190  00C2  1703               	bsf	3,6	;RP1=1, select bank2
  1191  00C3  086A               	movf	main@i^(0+256),w
  1192  00C4  3E01               	addlw	1
  1193  00C5  3E01               	addlw	1
  1194  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1195  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  1196  00C8  28CB               	goto	u3294
  1197  00C9                     u3295:	
  1198  00C9  1003               	clrc
  1199  00CA  0DBD               	rlf	??_main+1,f
  1200  00CB                     u3294:	
  1201  00CB  3EFF               	addlw	-1
  1202  00CC  1D03               	skipz
  1203  00CD  28C9               	goto	u3295
  1204  00CE  083D               	movf	??_main+1,w
  1205  00CF  120A  158A  2470  120A  118A  	fcall	_sendByte
  1206                           
  1207                           ;main.c: 174:                     sendByte((0x01 << (i + 1)), 0x10, car[i]);
  1208  00D4  3010               	movlw	16
  1209  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1210  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1211  00D7  00BC               	movwf	??_main
  1212  00D8  083C               	movf	??_main,w
  1213  00D9  00B4               	movwf	sendByte@byte1
  1214  00DA  1283               	bcf	3,5	;RP0=0, select bank2
  1215  00DB  1703               	bsf	3,6	;RP1=1, select bank2
  1216  00DC  086A               	movf	main@i^(0+256),w
  1217  00DD  3E50               	addlw	(low (_car| 0))& (0+255)
  1218  00DE  0084               	movwf	4
  1219  00DF  1383               	bcf	3,7	;select IRP bank0
  1220  00E0  0800               	movf	0,w
  1221  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  1222  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  1223  00E3  00BD               	movwf	??_main+1
  1224  00E4  083D               	movf	??_main+1,w
  1225  00E5  00B5               	movwf	sendByte@valore
  1226  00E6  3001               	movlw	1
  1227  00E7  00BE               	movwf	??_main+2
  1228  00E8  1283               	bcf	3,5	;RP0=0, select bank2
  1229  00E9  1703               	bsf	3,6	;RP1=1, select bank2
  1230  00EA  086A               	movf	main@i^(0+256),w
  1231  00EB  3E01               	addlw	1
  1232  00EC  3E01               	addlw	1
  1233  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1234  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  1235  00EF  28F2               	goto	u3304
  1236  00F0                     u3305:	
  1237  00F0  1003               	clrc
  1238  00F1  0DBE               	rlf	??_main+2,f
  1239  00F2                     u3304:	
  1240  00F2  3EFF               	addlw	-1
  1241  00F3  1D03               	skipz
  1242  00F4  28F0               	goto	u3305
  1243  00F5  083E               	movf	??_main+2,w
  1244  00F6  120A  158A  2470  120A  118A  	fcall	_sendByte
  1245                           
  1246                           ;main.c: 175:                     sendByte((0x01 << (i + 1)), 0x11, truck[i]);
  1247  00FB  3011               	movlw	17
  1248  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1249  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  1250  00FE  00BC               	movwf	??_main
  1251  00FF  083C               	movf	??_main,w
  1252  0100  00B4               	movwf	sendByte@byte1
  1253  0101  1283               	bcf	3,5	;RP0=0, select bank2
  1254  0102  1703               	bsf	3,6	;RP1=1, select bank2
  1255  0103  086A               	movf	main@i^(0+256),w
  1256  0104  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1257  0105  0084               	movwf	4
  1258  0106  1383               	bcf	3,7	;select IRP bank0
  1259  0107  0800               	movf	0,w
  1260  0108  1283               	bcf	3,5	;RP0=0, select bank0
  1261  0109  1303               	bcf	3,6	;RP1=0, select bank0
  1262  010A  00BD               	movwf	??_main+1
  1263  010B  083D               	movf	??_main+1,w
  1264  010C  00B5               	movwf	sendByte@valore
  1265  010D  3001               	movlw	1
  1266  010E  00BE               	movwf	??_main+2
  1267  010F  1283               	bcf	3,5	;RP0=0, select bank2
  1268  0110  1703               	bsf	3,6	;RP1=1, select bank2
  1269  0111  086A               	movf	main@i^(0+256),w
  1270  0112  3E01               	addlw	1
  1271  0113  3E01               	addlw	1
  1272  0114  1283               	bcf	3,5	;RP0=0, select bank0
  1273  0115  1303               	bcf	3,6	;RP1=0, select bank0
  1274  0116  2919               	goto	u3314
  1275  0117                     u3315:	
  1276  0117  1003               	clrc
  1277  0118  0DBE               	rlf	??_main+2,f
  1278  0119                     u3314:	
  1279  0119  3EFF               	addlw	-1
  1280  011A  1D03               	skipz
  1281  011B  2917               	goto	u3315
  1282  011C  083E               	movf	??_main+2,w
  1283  011D  120A  158A  2470  120A  118A  	fcall	_sendByte
  1284  0122                     l3128:	
  1285                           
  1286                           ;main.c: 176:                 }
  1287  0122  3001               	movlw	1
  1288  0123  1283               	bcf	3,5	;RP0=0, select bank2
  1289  0124  1703               	bsf	3,6	;RP1=1, select bank2
  1290  0125  07EA               	addwf	main@i^(0+256),f
  1291  0126  1803               	skipnc
  1292  0127  0AEB               	incf	(main@i+1)^(0+256),f
  1293  0128  3000               	movlw	0
  1294  0129  07EB               	addwf	(main@i+1)^(0+256),f
  1295  012A  28A1               	goto	l3122
  1296  012B                     l3132:	
  1297                           
  1298                           ;main.c: 178:                 for (int i = 0; i < 4; i++)
  1299  012B  1283               	bcf	3,5	;RP0=0, select bank2
  1300  012C  1703               	bsf	3,6	;RP1=1, select bank2
  1301  012D  01E6               	clrf	main@i_436^(0+256)
  1302  012E  01E7               	clrf	(main@i_436+1)^(0+256)
  1303  012F                     l3134:	
  1304  012F  0867               	movf	(main@i_436+1)^(0+256),w
  1305  0130  3A80               	xorlw	128
  1306  0131  00FF               	movwf	btemp+1
  1307  0132  3080               	movlw	128
  1308  0133  027F               	subwf	btemp+1,w
  1309  0134  1D03               	skipz
  1310  0135  2938               	goto	u3325
  1311  0136  3004               	movlw	4
  1312  0137  0266               	subwf	main@i_436^(0+256),w
  1313  0138                     u3325:	
  1314  0138  1C03               	skipc
  1315  0139  293B               	goto	u3321
  1316  013A  293C               	goto	u3320
  1317  013B                     u3321:	
  1318  013B  293D               	goto	l3138
  1319  013C                     u3320:	
  1320  013C  2953               	goto	l3144
  1321  013D                     l3138:	
  1322                           
  1323                           ;main.c: 179:                 {;main.c: 180:                     motorcycle[i] = 0;
  1324  013D  1283               	bcf	3,5	;RP0=0, select bank2
  1325  013E  1703               	bsf	3,6	;RP1=1, select bank2
  1326  013F  0866               	movf	main@i_436^(0+256),w
  1327  0140  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1328  0141  0084               	movwf	4
  1329  0142  1383               	bcf	3,7	;select IRP bank0
  1330  0143  0180               	clrf	0
  1331                           
  1332                           ;main.c: 181:                     car[i] = 0;
  1333  0144  0866               	movf	main@i_436^(0+256),w
  1334  0145  3E50               	addlw	(low (_car| 0))& (0+255)
  1335  0146  0084               	movwf	4
  1336  0147  0180               	clrf	0
  1337                           
  1338                           ;main.c: 182:                     truck[i] = 0;
  1339  0148  0866               	movf	main@i_436^(0+256),w
  1340  0149  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1341  014A  0084               	movwf	4
  1342  014B  0180               	clrf	0
  1343  014C                     l3140:	
  1344                           
  1345                           ;main.c: 183:                 }
  1346  014C  3001               	movlw	1
  1347  014D  07E6               	addwf	main@i_436^(0+256),f
  1348  014E  1803               	skipnc
  1349  014F  0AE7               	incf	(main@i_436+1)^(0+256),f
  1350  0150  3000               	movlw	0
  1351  0151  07E7               	addwf	(main@i_436+1)^(0+256),f
  1352  0152  292F               	goto	l3134
  1353  0153                     l3144:	
  1354                           
  1355                           ;main.c: 185:                 for (unsigned char i = 0; i < 5; i++)
  1356  0153  1283               	bcf	3,5	;RP0=0, select bank2
  1357  0154  1703               	bsf	3,6	;RP1=1, select bank2
  1358  0155  01E3               	clrf	main@i_437^(0+256)
  1359  0156                     l3146:	
  1360  0156  3005               	movlw	5
  1361  0157  0263               	subwf	main@i_437^(0+256),w
  1362  0158  1C03               	skipc
  1363  0159  295B               	goto	u3331
  1364  015A  295C               	goto	u3330
  1365  015B                     u3331:	
  1366  015B  295D               	goto	l3150
  1367  015C                     u3330:	
  1368  015C  2A74               	goto	l212
  1369  015D                     l3150:	
  1370                           
  1371                           ;main.c: 186:                 {;main.c: 187:                     dataFromGateway[i] = 0;
  1372  015D  0863               	movf	main@i_437^(0+256),w
  1373  015E  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1374  015F  0084               	movwf	4
  1375  0160  1383               	bcf	3,7	;select IRP bank1
  1376  0161  0180               	clrf	0
  1377  0162                     l3152:	
  1378                           
  1379                           ;main.c: 188:                 }
  1380  0162  3001               	movlw	1
  1381  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1382  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1383  0165  00BC               	movwf	??_main
  1384  0166  083C               	movf	??_main,w
  1385  0167  1283               	bcf	3,5	;RP0=0, select bank2
  1386  0168  1703               	bsf	3,6	;RP1=1, select bank2
  1387  0169  07E3               	addwf	main@i_437^(0+256),f
  1388  016A  2956               	goto	l3146
  1389  016B                     l222:	
  1390                           ;main.c: 190:             case 0x0A:
  1391                           
  1392                           
  1393                           ;main.c: 191:                 readGatewayDone.Bit = 1;
  1394  016B  1463               	bsf	_readGatewayDone,0
  1395                           
  1396                           ;main.c: 192:                 readGateway.Bit = 0;
  1397  016C  1062               	bcf	_readGateway,0
  1398  016D                     l3156:	
  1399                           
  1400                           ;main.c: 194:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1401  016D  3000               	movlw	0
  1402  016E  120A  158A  23F2  120A  118A  	fcall	_ADC_Read
  1403  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1404  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1405  0175  0820               	movf	?_ADC_Read,w
  1406  0176  00BC               	movwf	??_main
  1407  0177  0821               	movf	?_ADC_Read+1,w
  1408  0178  00BD               	movwf	??_main+1
  1409  0179  0D3D               	rlf	??_main+1,w
  1410  017A  0CBD               	rrf	??_main+1,f
  1411  017B  0CBC               	rrf	??_main,f
  1412  017C  0D3D               	rlf	??_main+1,w
  1413  017D  0CBD               	rrf	??_main+1,f
  1414  017E  0CBC               	rrf	??_main,f
  1415  017F  083C               	movf	??_main,w
  1416  0180  00B0               	movwf	map@x
  1417  0181  083D               	movf	??_main+1,w
  1418  0182  00B1               	movwf	map@x+1
  1419  0183  3000               	movlw	0
  1420  0184  00B2               	movwf	map@in_min
  1421  0185  00B3               	movwf	map@in_min+1
  1422  0186  30FF               	movlw	255
  1423  0187  00B4               	movwf	map@in_max
  1424  0188  3000               	movlw	0
  1425  0189  00B5               	movwf	map@in_max+1
  1426  018A  30EC               	movlw	236
  1427  018B  00B6               	movwf	map@out_min
  1428  018C  30FF               	movlw	255
  1429  018D  00B7               	movwf	map@out_min+1
  1430  018E  303C               	movlw	60
  1431  018F  00B8               	movwf	map@out_max
  1432  0190  3000               	movlw	0
  1433  0191  00B9               	movwf	map@out_max+1
  1434  0192  120A  158A  24A1  120A  118A  	fcall	_map
  1435  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1436  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1437  0199  0830               	movf	?_map,w
  1438  019A  00BE               	movwf	??_main+2
  1439  019B  083E               	movf	??_main+2,w
  1440  019C  1283               	bcf	3,5	;RP0=0, select bank2
  1441  019D  1703               	bsf	3,6	;RP1=1, select bank2
  1442  019E  00DA               	movwf	main@temp^(0+256)
  1443                           
  1444                           ;main.c: 195:                 umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  1445  019F  3001               	movlw	1
  1446  01A0  120A  158A  23F2  120A  118A  	fcall	_ADC_Read
  1447  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1448  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1449  01A7  0820               	movf	?_ADC_Read,w
  1450  01A8  00BC               	movwf	??_main
  1451  01A9  0821               	movf	?_ADC_Read+1,w
  1452  01AA  00BD               	movwf	??_main+1
  1453  01AB  0D3D               	rlf	??_main+1,w
  1454  01AC  0CBD               	rrf	??_main+1,f
  1455  01AD  0CBC               	rrf	??_main,f
  1456  01AE  0D3D               	rlf	??_main+1,w
  1457  01AF  0CBD               	rrf	??_main+1,f
  1458  01B0  0CBC               	rrf	??_main,f
  1459  01B1  083C               	movf	??_main,w
  1460  01B2  00B0               	movwf	map@x
  1461  01B3  083D               	movf	??_main+1,w
  1462  01B4  00B1               	movwf	map@x+1
  1463  01B5  3000               	movlw	0
  1464  01B6  00B2               	movwf	map@in_min
  1465  01B7  00B3               	movwf	map@in_min+1
  1466  01B8  30FF               	movlw	255
  1467  01B9  00B4               	movwf	map@in_max
  1468  01BA  3000               	movlw	0
  1469  01BB  00B5               	movwf	map@in_max+1
  1470  01BC  3000               	movlw	0
  1471  01BD  00B6               	movwf	map@out_min
  1472  01BE  00B7               	movwf	map@out_min+1
  1473  01BF  3064               	movlw	100
  1474  01C0  00B8               	movwf	map@out_max
  1475  01C1  3000               	movlw	0
  1476  01C2  00B9               	movwf	map@out_max+1
  1477  01C3  120A  158A  24A1  120A  118A  	fcall	_map
  1478  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1479  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1480  01CA  0830               	movf	?_map,w
  1481  01CB  00BE               	movwf	??_main+2
  1482  01CC  083E               	movf	??_main+2,w
  1483  01CD  1283               	bcf	3,5	;RP0=0, select bank2
  1484  01CE  1703               	bsf	3,6	;RP1=1, select bank2
  1485  01CF  00DB               	movwf	main@umidita^(0+256)
  1486                           
  1487                           ;main.c: 196:                 pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  1488  01D0  3005               	movlw	5
  1489  01D1  120A  158A  23F2  120A  118A  	fcall	_ADC_Read
  1490  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1491  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1492  01D8  0820               	movf	?_ADC_Read,w
  1493  01D9  00BC               	movwf	??_main
  1494  01DA  0821               	movf	?_ADC_Read+1,w
  1495  01DB  00BD               	movwf	??_main+1
  1496  01DC  0D3D               	rlf	??_main+1,w
  1497  01DD  0CBD               	rrf	??_main+1,f
  1498  01DE  0CBC               	rrf	??_main,f
  1499  01DF  0D3D               	rlf	??_main+1,w
  1500  01E0  0CBD               	rrf	??_main+1,f
  1501  01E1  0CBC               	rrf	??_main,f
  1502  01E2  083C               	movf	??_main,w
  1503  01E3  00B0               	movwf	map@x
  1504  01E4  083D               	movf	??_main+1,w
  1505  01E5  00B1               	movwf	map@x+1
  1506  01E6  3000               	movlw	0
  1507  01E7  00B2               	movwf	map@in_min
  1508  01E8  00B3               	movwf	map@in_min+1
  1509  01E9  30FF               	movlw	255
  1510  01EA  00B4               	movwf	map@in_max
  1511  01EB  3000               	movlw	0
  1512  01EC  00B5               	movwf	map@in_max+1
  1513  01ED  3000               	movlw	0
  1514  01EE  00B6               	movwf	map@out_min
  1515  01EF  00B7               	movwf	map@out_min+1
  1516  01F0  3064               	movlw	100
  1517  01F1  00B8               	movwf	map@out_max
  1518  01F2  3000               	movlw	0
  1519  01F3  00B9               	movwf	map@out_max+1
  1520  01F4  120A  158A  24A1  120A  118A  	fcall	_map
  1521  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  1522  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  1523  01FB  0830               	movf	?_map,w
  1524  01FC  00BE               	movwf	??_main+2
  1525  01FD  083E               	movf	??_main+2,w
  1526  01FE  1283               	bcf	3,5	;RP0=0, select bank2
  1527  01FF  1703               	bsf	3,6	;RP1=1, select bank2
  1528  0200  00DC               	movwf	main@pressione^(0+256)
  1529  0201                     l3158:	
  1530                           
  1531                           ;main.c: 197:                 sendByte(0x02, 0x00, temp);
  1532  0201  1283               	bcf	3,5	;RP0=0, select bank0
  1533  0202  1303               	bcf	3,6	;RP1=0, select bank0
  1534  0203  01B4               	clrf	sendByte@byte1
  1535  0204  1283               	bcf	3,5	;RP0=0, select bank2
  1536  0205  1703               	bsf	3,6	;RP1=1, select bank2
  1537  0206  085A               	movf	main@temp^(0+256),w
  1538  0207  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0208  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0209  00BC               	movwf	??_main
  1541  020A  083C               	movf	??_main,w
  1542  020B  00B5               	movwf	sendByte@valore
  1543  020C  3002               	movlw	2
  1544  020D  120A  158A  2470  120A  118A  	fcall	_sendByte
  1545  0212                     l3160:	
  1546                           
  1547                           ;main.c: 198:                 sendByte(0x04, 0x00, umidita);
  1548  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1549  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1550  0214  01B4               	clrf	sendByte@byte1
  1551  0215  1283               	bcf	3,5	;RP0=0, select bank2
  1552  0216  1703               	bsf	3,6	;RP1=1, select bank2
  1553  0217  085B               	movf	main@umidita^(0+256),w
  1554  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1555  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1556  021A  00BC               	movwf	??_main
  1557  021B  083C               	movf	??_main,w
  1558  021C  00B5               	movwf	sendByte@valore
  1559  021D  3004               	movlw	4
  1560  021E  120A  158A  2470  120A  118A  	fcall	_sendByte
  1561  0223                     l3162:	
  1562                           
  1563                           ;main.c: 199:                 sendByte(0x06, 0x00, pressione);
  1564  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0224  1303               	bcf	3,6	;RP1=0, select bank0
  1566  0225  01B4               	clrf	sendByte@byte1
  1567  0226  1283               	bcf	3,5	;RP0=0, select bank2
  1568  0227  1703               	bsf	3,6	;RP1=1, select bank2
  1569  0228  085C               	movf	main@pressione^(0+256),w
  1570  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1571  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1572  022B  00BC               	movwf	??_main
  1573  022C  083C               	movf	??_main,w
  1574  022D  00B5               	movwf	sendByte@valore
  1575  022E  3006               	movlw	6
  1576  022F  120A  158A  2470  120A  118A  	fcall	_sendByte
  1577  0234                     l3164:	
  1578                           
  1579                           ;main.c: 201:                 for (unsigned char i = 0; i < 5; i++)
  1580  0234  1283               	bcf	3,5	;RP0=0, select bank2
  1581  0235  1703               	bsf	3,6	;RP1=1, select bank2
  1582  0236  01E4               	clrf	main@i_439^(0+256)
  1583  0237                     l3166:	
  1584  0237  3005               	movlw	5
  1585  0238  0264               	subwf	main@i_439^(0+256),w
  1586  0239  1C03               	skipc
  1587  023A  2A3C               	goto	u3341
  1588  023B  2A3D               	goto	u3340
  1589  023C                     u3341:	
  1590  023C  2A3E               	goto	l3170
  1591  023D                     u3340:	
  1592  023D  2A74               	goto	l212
  1593  023E                     l3170:	
  1594                           
  1595                           ;main.c: 202:                 {;main.c: 203:                     dataFromGateway[i] = 0;
  1596  023E  0864               	movf	main@i_439^(0+256),w
  1597  023F  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1598  0240  0084               	movwf	4
  1599  0241  1383               	bcf	3,7	;select IRP bank1
  1600  0242  0180               	clrf	0
  1601  0243                     l3172:	
  1602                           
  1603                           ;main.c: 204:                 }
  1604  0243  3001               	movlw	1
  1605  0244  1283               	bcf	3,5	;RP0=0, select bank0
  1606  0245  1303               	bcf	3,6	;RP1=0, select bank0
  1607  0246  00BC               	movwf	??_main
  1608  0247  083C               	movf	??_main,w
  1609  0248  1283               	bcf	3,5	;RP0=0, select bank2
  1610  0249  1703               	bsf	3,6	;RP1=1, select bank2
  1611  024A  07E4               	addwf	main@i_439^(0+256),f
  1612  024B  2A37               	goto	l3166
  1613  024C                     l3176:	
  1614                           
  1615                           ;main.c: 208:                 if (timerReadFromGateway >= 4)
  1616  024C  3004               	movlw	4
  1617  024D  0258               	subwf	_timerReadFromGateway,w
  1618  024E  1C03               	skipc
  1619  024F  2A51               	goto	u3351
  1620  0250  2A52               	goto	u3350
  1621  0251                     u3351:	
  1622  0251  2A55               	goto	l3180
  1623  0252                     u3350:	
  1624  0252                     l3178:	
  1625                           
  1626                           ;main.c: 209:                 {;main.c: 210:                     readGatewayDone.Bit = 1
      +                          ;
  1627  0252  1463               	bsf	_readGatewayDone,0
  1628                           
  1629                           ;main.c: 211:                     readGatewayDone.Timeout = 1;
  1630  0253  14E3               	bsf	_readGatewayDone,1
  1631                           
  1632                           ;main.c: 212:                     readGateway.Bit = 0;
  1633  0254  1062               	bcf	_readGateway,0
  1634  0255                     l3180:	
  1635                           
  1636                           ;main.c: 215:                 if (dataFromGatewayIndex >= 15)
  1637  0255  300F               	movlw	15
  1638  0256  0259               	subwf	_dataFromGatewayIndex,w
  1639  0257  1C03               	skipc
  1640  0258  2A5A               	goto	u3361
  1641  0259  2A5B               	goto	u3360
  1642  025A                     u3361:	
  1643  025A  2A74               	goto	l212
  1644  025B                     u3360:	
  1645  025B                     l3182:	
  1646                           
  1647                           ;main.c: 216:                 {;main.c: 217:                     readGatewayDone.Bit = 1
      +                          ;
  1648  025B  1463               	bsf	_readGatewayDone,0
  1649                           
  1650                           ;main.c: 218:                     readGatewayDone.Timeout = 0;
  1651  025C  10E3               	bcf	_readGatewayDone,1
  1652                           
  1653                           ;main.c: 219:                     readGateway.Bit = 0;
  1654  025D  1062               	bcf	_readGateway,0
  1655  025E  2A74               	goto	l212
  1656  025F                     l3186:	
  1657  025F  1683               	bsf	3,5	;RP0=1, select bank1
  1658  0260  1303               	bcf	3,6	;RP1=0, select bank1
  1659  0261  0820               	movf	_dataFromGateway^(0+128),w
  1660  0262  397F               	andlw	127
  1661  0263  1283               	bcf	3,5	;RP0=0, select bank0
  1662  0264  1303               	bcf	3,6	;RP1=0, select bank0
  1663  0265  00BC               	movwf	??_main
  1664  0266  01BD               	clrf	??_main+1
  1665                           
  1666                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1667                           ; Switch size 1, requested type "simple"
  1668                           ; Number of cases is 1, Range of values is 0 to 0
  1669                           ; switch strategies available:
  1670                           ; Name         Instructions Cycles
  1671                           ; simple_byte            4     3 (average)
  1672                           ; direct_byte           11     8 (fixed)
  1673                           ; jumptable            260     6 (fixed)
  1674                           ;	Chosen strategy is simple_byte
  1675  0267  083D               	movf	??_main+1,w
  1676  0268  3A00               	xorlw	0	; case 0
  1677  0269  1903               	skipnz
  1678  026A  2A6C               	goto	l3406
  1679  026B  2A4C               	goto	l3176
  1680  026C                     l3406:	
  1681                           
  1682                           ; Switch size 1, requested type "simple"
  1683                           ; Number of cases is 2, Range of values is 8 to 10
  1684                           ; switch strategies available:
  1685                           ; Name         Instructions Cycles
  1686                           ; simple_byte            7     4 (average)
  1687                           ; direct_byte           20    11 (fixed)
  1688                           ; jumptable            263     9 (fixed)
  1689                           ;	Chosen strategy is simple_byte
  1690  026C  083C               	movf	??_main,w
  1691  026D  3A08               	xorlw	8	; case 8
  1692  026E  1903               	skipnz
  1693  026F  289B               	goto	l214
  1694  0270  3A02               	xorlw	2	; case 10
  1695  0271  1903               	skipnz
  1696  0272  296B               	goto	l222
  1697  0273  2A4C               	goto	l3176
  1698  0274                     l212:	
  1699                           ;main.c: 223:         }
  1700                           
  1701                           
  1702                           ;main.c: 226:         if (readGatewayDone.Bit)
  1703  0274  1303               	bcf	3,6	;RP1=0, select bank0
  1704  0275  1C63               	btfss	_readGatewayDone,0
  1705  0276  2A78               	goto	u3371
  1706  0277  2A79               	goto	u3370
  1707  0278                     u3371:	
  1708  0278  2B10               	goto	l228
  1709  0279                     u3370:	
  1710  0279                     l3188:	
  1711                           
  1712                           ;main.c: 227:         {;main.c: 229:             readGateway.Bit = 0;
  1713  0279  1062               	bcf	_readGateway,0
  1714  027A                     l3190:	
  1715                           
  1716                           ;main.c: 230:             dataFromGatewayIndex = 0;
  1717  027A  01D9               	clrf	_dataFromGatewayIndex
  1718  027B                     l3192:	
  1719                           
  1720                           ;main.c: 231:             readGatewayDone.Bit = 0;
  1721  027B  1063               	bcf	_readGatewayDone,0
  1722                           
  1723                           ;main.c: 232:             timerReadFromGateway = 0;
  1724  027C  01D8               	clrf	_timerReadFromGateway
  1725  027D                     l3194:	
  1726                           
  1727                           ;main.c: 235:             if (readGatewayDone.Timeout)
  1728  027D  1CE3               	btfss	_readGatewayDone,1
  1729  027E  2A80               	goto	u3381
  1730  027F  2A81               	goto	u3380
  1731  0280                     u3381:	
  1732  0280  2A83               	goto	l3198
  1733  0281                     u3380:	
  1734  0281                     l3196:	
  1735                           
  1736                           ;main.c: 236:             {;main.c: 237:                 readGatewayDone.Timeout = 0;
  1737  0281  10E3               	bcf	_readGatewayDone,1
  1738                           
  1739                           ;main.c: 238:             }
  1740  0282  2B10               	goto	l228
  1741  0283                     l3198:	
  1742                           
  1743                           ;main.c: 241:             {;main.c: 242:                 bitParita(dataFromGateway);
  1744  0283  30A0               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1745  0284  120A  118A  2667  120A  118A  	fcall	_bitParita
  1746  0289                     l3200:	
  1747                           
  1748                           ;main.c: 243:                 unsigned char tmp;;main.c: 244:                 for (unsig
      +                          ned char i = 0; i < 3; i++)
  1749  0289  1283               	bcf	3,5	;RP0=0, select bank2
  1750  028A  1703               	bsf	3,6	;RP1=1, select bank2
  1751  028B  01E5               	clrf	main@i_442^(0+256)
  1752  028C                     l3202:	
  1753  028C  3003               	movlw	3
  1754  028D  0265               	subwf	main@i_442^(0+256),w
  1755  028E  1C03               	skipc
  1756  028F  2A91               	goto	u3391
  1757  0290  2A92               	goto	u3390
  1758  0291                     u3391:	
  1759  0291  2A93               	goto	l3206
  1760  0292                     u3390:	
  1761  0292  2B10               	goto	l228
  1762  0293                     l3206:	
  1763                           
  1764                           ;main.c: 245:                 {;main.c: 246:                     unsigned char index = i
      +                           * 5;
  1765  0293  3005               	movlw	5
  1766  0294  1283               	bcf	3,5	;RP0=0, select bank0
  1767  0295  1303               	bcf	3,6	;RP1=0, select bank0
  1768  0296  00BC               	movwf	??_main
  1769  0297  083C               	movf	??_main,w
  1770  0298  00A0               	movwf	___bmul@multiplicand
  1771  0299  1283               	bcf	3,5	;RP0=0, select bank2
  1772  029A  1703               	bsf	3,6	;RP1=1, select bank2
  1773  029B  0865               	movf	main@i_442^(0+256),w
  1774  029C  120A  158A  23BB  120A  118A  	fcall	___bmul
  1775  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  1776  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  1777  02A3  00BD               	movwf	??_main+1
  1778  02A4  083D               	movf	??_main+1,w
  1779  02A5  1283               	bcf	3,5	;RP0=0, select bank2
  1780  02A6  1703               	bsf	3,6	;RP1=1, select bank2
  1781  02A7  00E0               	movwf	main@index^(0+256)
  1782  02A8                     l3208:	
  1783                           
  1784                           ;main.c: 247:                     tmp = dataFromGateway[index];
  1785  02A8  0860               	movf	main@index^(0+256),w
  1786  02A9  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1787  02AA  0084               	movwf	4
  1788  02AB  1383               	bcf	3,7	;select IRP bank1
  1789  02AC  0800               	movf	0,w
  1790  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  1791  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  1792  02AF  00BC               	movwf	??_main
  1793  02B0  083C               	movf	??_main,w
  1794  02B1  1283               	bcf	3,5	;RP0=0, select bank2
  1795  02B2  1703               	bsf	3,6	;RP1=1, select bank2
  1796  02B3  00DE               	movwf	main@tmp^(0+256)
  1797  02B4                     l3210:	
  1798                           
  1799                           ;main.c: 248:                     unsigned char semaforoId = (tmp >> 1) & 0x0F;
  1800  02B4  085E               	movf	main@tmp^(0+256),w
  1801  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  1802  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  1803  02B7  00BC               	movwf	??_main
  1804  02B8  1003               	clrc
  1805  02B9  0C3C               	rrf	??_main,w
  1806  02BA  390F               	andlw	15
  1807  02BB  00BD               	movwf	??_main+1
  1808  02BC  083D               	movf	??_main+1,w
  1809  02BD  1283               	bcf	3,5	;RP0=0, select bank2
  1810  02BE  1703               	bsf	3,6	;RP1=1, select bank2
  1811  02BF  00D8               	movwf	main@semaforoId^(0+256)
  1812  02C0                     l3212:	
  1813                           
  1814                           ;main.c: 249:                     tmp = dataFromGateway[index];
  1815  02C0  0860               	movf	main@index^(0+256),w
  1816  02C1  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1817  02C2  0084               	movwf	4
  1818  02C3  0800               	movf	0,w
  1819  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  1820  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  1821  02C6  00BC               	movwf	??_main
  1822  02C7  083C               	movf	??_main,w
  1823  02C8  1283               	bcf	3,5	;RP0=0, select bank2
  1824  02C9  1703               	bsf	3,6	;RP1=1, select bank2
  1825  02CA  00DE               	movwf	main@tmp^(0+256)
  1826  02CB                     l3214:	
  1827                           
  1828                           ;main.c: 250:                     unsigned char colorId = ((tmp >> 5) & 0x03) - 1;
  1829  02CB  085E               	movf	main@tmp^(0+256),w
  1830  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  1831  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  1832  02CE  00BC               	movwf	??_main
  1833  02CF  3005               	movlw	5
  1834  02D0                     u3405:	
  1835  02D0  1003               	clrc
  1836  02D1  0CBC               	rrf	??_main,f
  1837  02D2  3EFF               	addlw	-1
  1838  02D3  1D03               	skipz
  1839  02D4  2AD0               	goto	u3405
  1840  02D5  083C               	movf	??_main,w
  1841  02D6  3903               	andlw	3
  1842  02D7  3EFF               	addlw	255
  1843  02D8  00BD               	movwf	??_main+1
  1844  02D9  083D               	movf	??_main+1,w
  1845  02DA  1283               	bcf	3,5	;RP0=0, select bank2
  1846  02DB  1703               	bsf	3,6	;RP1=1, select bank2
  1847  02DC  00D9               	movwf	main@colorId^(0+256)
  1848  02DD                     l3216:	
  1849                           
  1850                           ;main.c: 252:                     (*(Semafori[semaforoId])).new_times[colorId] = GetTime
      +                          (index);
  1851  02DD  0860               	movf	main@index^(0+256),w
  1852  02DE  120A  158A  2510  120A  118A  	fcall	_GetTime
  1853  02E3  1283               	bcf	3,5	;RP0=0, select bank2
  1854  02E4  1703               	bsf	3,6	;RP1=1, select bank2
  1855  02E5  0858               	movf	main@semaforoId^(0+256),w
  1856  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1857  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1858  02E8  00BC               	movwf	??_main
  1859  02E9  073C               	addwf	??_main,w
  1860  02EA  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1861  02EB  0084               	movwf	4
  1862  02EC  1383               	bcf	3,7	;select IRP bank1
  1863  02ED  0800               	movf	0,w
  1864  02EE  00BD               	movwf	??_main+1
  1865  02EF  0A84               	incf	4,f
  1866  02F0  0800               	movf	0,w
  1867  02F1  00BE               	movwf	??_main+2
  1868  02F2  1283               	bcf	3,5	;RP0=0, select bank2
  1869  02F3  1703               	bsf	3,6	;RP1=1, select bank2
  1870  02F4  0859               	movf	main@colorId^(0+256),w
  1871  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  1872  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  1873  02F7  00BF               	movwf	??_main+3
  1874  02F8  073F               	addwf	??_main+3,w
  1875  02F9  073D               	addwf	??_main+1,w
  1876  02FA  00C0               	movwf	??_main+4
  1877  02FB  083E               	movf	??_main+2,w
  1878  02FC  1803               	skipnc
  1879  02FD  3E01               	addlw	1
  1880  02FE  00C1               	movwf	??_main+5
  1881  02FF  0840               	movf	??_main+4,w
  1882  0300  0084               	movwf	4
  1883  0301  1783               	bsf	3,7
  1884  0302  1C41               	btfss	??_main+5,0
  1885  0303  1383               	bcf	3,7
  1886  0304  0820               	movf	?_GetTime,w
  1887  0305  0080               	movwf	0
  1888  0306  0A84               	incf	4,f
  1889  0307  0821               	movf	?_GetTime+1,w
  1890  0308  0080               	movwf	0
  1891  0309                     l3218:	
  1892                           
  1893                           ;main.c: 253:                 }
  1894  0309  3001               	movlw	1
  1895  030A  00BC               	movwf	??_main
  1896  030B  083C               	movf	??_main,w
  1897  030C  1283               	bcf	3,5	;RP0=0, select bank2
  1898  030D  1703               	bsf	3,6	;RP1=1, select bank2
  1899  030E  07E5               	addwf	main@i_442^(0+256),f
  1900  030F  2A8C               	goto	l3202
  1901  0310                     l228:	
  1902                           ;main.c: 255:         }
  1903                           
  1904                           
  1905                           ;main.c: 259:         if (endCiclo.Bit)
  1906  0310  1283               	bcf	3,5	;RP0=0, select bank2
  1907  0311  1703               	bsf	3,6	;RP1=1, select bank2
  1908  0312  1C5D               	btfss	main@endCiclo^(0+256),0
  1909  0313  2B15               	goto	u3411
  1910  0314  2B16               	goto	u3410
  1911  0315                     u3411:	
  1912  0315  2C07               	goto	l233
  1913  0316                     u3410:	
  1914  0316                     l3222:	
  1915                           
  1916                           ;main.c: 260:         {;main.c: 262:             for (unsigned char l = 0; l < 16; l++)
  1917  0316  01E8               	clrf	main@l^(0+256)
  1918  0317                     l3224:	
  1919  0317  3010               	movlw	16
  1920  0318  0268               	subwf	main@l^(0+256),w
  1921  0319  1C03               	skipc
  1922  031A  2B1C               	goto	u3421
  1923  031B  2B1D               	goto	u3420
  1924  031C                     u3421:	
  1925  031C  2B1E               	goto	l3228
  1926  031D                     u3420:	
  1927  031D  2BD8               	goto	l3246
  1928  031E                     l3228:	
  1929                           
  1930                           ;main.c: 263:             {;main.c: 264:                 for (unsigned char i = 0; i < 3
      +                          ; i++)
  1931  031E  01E9               	clrf	main@i_449^(0+256)
  1932  031F                     l3230:	
  1933  031F  3003               	movlw	3
  1934  0320  0269               	subwf	main@i_449^(0+256),w
  1935  0321  1C03               	skipc
  1936  0322  2B24               	goto	u3431
  1937  0323  2B25               	goto	u3430
  1938  0324                     u3431:	
  1939  0324  2B26               	goto	l3234
  1940  0325                     u3430:	
  1941  0325  2BCF               	goto	l3242
  1942  0326                     l3234:	
  1943                           
  1944                           ;main.c: 265:                 {;main.c: 266:                     if ((*(Semafori[l])).ti
      +                          mes[i] != (*(Semafori[l])).new_times[i])
  1945  0326  0868               	movf	main@l^(0+256),w
  1946  0327  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0328  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0329  00BC               	movwf	??_main
  1949  032A  073C               	addwf	??_main,w
  1950  032B  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1951  032C  0084               	movwf	4
  1952  032D  1383               	bcf	3,7	;select IRP bank1
  1953  032E  0800               	movf	0,w
  1954  032F  00BD               	movwf	??_main+1
  1955  0330  0A84               	incf	4,f
  1956  0331  0800               	movf	0,w
  1957  0332  00BE               	movwf	??_main+2
  1958  0333  1283               	bcf	3,5	;RP0=0, select bank2
  1959  0334  1703               	bsf	3,6	;RP1=1, select bank2
  1960  0335  0869               	movf	main@i_449^(0+256),w
  1961  0336  1283               	bcf	3,5	;RP0=0, select bank0
  1962  0337  1303               	bcf	3,6	;RP1=0, select bank0
  1963  0338  00BF               	movwf	??_main+3
  1964  0339  073F               	addwf	??_main+3,w
  1965  033A  073D               	addwf	??_main+1,w
  1966  033B  00C0               	movwf	??_main+4
  1967  033C  083E               	movf	??_main+2,w
  1968  033D  1803               	skipnc
  1969  033E  3E01               	addlw	1
  1970  033F  00C1               	movwf	??_main+5
  1971  0340  0840               	movf	??_main+4,w
  1972  0341  0084               	movwf	4
  1973  0342  1783               	bsf	3,7
  1974  0343  1C41               	btfss	??_main+5,0
  1975  0344  1383               	bcf	3,7
  1976  0345  0800               	movf	0,w
  1977  0346  00C2               	movwf	??_main+6
  1978  0347  0A84               	incf	4,f
  1979  0348  0800               	movf	0,w
  1980  0349  00C3               	movwf	??_main+7
  1981  034A  1283               	bcf	3,5	;RP0=0, select bank2
  1982  034B  1703               	bsf	3,6	;RP1=1, select bank2
  1983  034C  0868               	movf	main@l^(0+256),w
  1984  034D  1283               	bcf	3,5	;RP0=0, select bank0
  1985  034E  1303               	bcf	3,6	;RP1=0, select bank0
  1986  034F  00C4               	movwf	??_main+8
  1987  0350  0744               	addwf	??_main+8,w
  1988  0351  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1989  0352  0084               	movwf	4
  1990  0353  1383               	bcf	3,7	;select IRP bank1
  1991  0354  0800               	movf	0,w
  1992  0355  00C5               	movwf	??_main+9
  1993  0356  0A84               	incf	4,f
  1994  0357  0800               	movf	0,w
  1995  0358  00C6               	movwf	??_main+10
  1996  0359  1283               	bcf	3,5	;RP0=0, select bank2
  1997  035A  1703               	bsf	3,6	;RP1=1, select bank2
  1998  035B  0869               	movf	main@i_449^(0+256),w
  1999  035C  1283               	bcf	3,5	;RP0=0, select bank0
  2000  035D  1303               	bcf	3,6	;RP1=0, select bank0
  2001  035E  00C7               	movwf	??_main+11
  2002  035F  0747               	addwf	??_main+11,w
  2003  0360  3E06               	addlw	6
  2004  0361  0745               	addwf	??_main+9,w
  2005  0362  00C8               	movwf	??_main+12
  2006  0363  0846               	movf	??_main+10,w
  2007  0364  1803               	skipnc
  2008  0365  3E01               	addlw	1
  2009  0366  00C9               	movwf	??_main+13
  2010  0367  0848               	movf	??_main+12,w
  2011  0368  0084               	movwf	4
  2012  0369  1783               	bsf	3,7
  2013  036A  1C49               	btfss	??_main+13,0
  2014  036B  1383               	bcf	3,7
  2015  036C  0800               	movf	0,w
  2016  036D  00CA               	movwf	??_main+14
  2017  036E  0A84               	incf	4,f
  2018  036F  0800               	movf	0,w
  2019  0370  00CB               	movwf	??_main+15
  2020  0371  0843               	movf	??_main+7,w
  2021  0372  064B               	xorwf	??_main+15,w
  2022  0373  1D03               	skipz
  2023  0374  2B77               	goto	u3445
  2024  0375  0842               	movf	??_main+6,w
  2025  0376  064A               	xorwf	??_main+14,w
  2026  0377                     u3445:	
  2027  0377  1903               	skipnz
  2028  0378  2B7A               	goto	u3441
  2029  0379  2B7B               	goto	u3440
  2030  037A                     u3441:	
  2031  037A  2BC8               	goto	l3238
  2032  037B                     u3440:	
  2033  037B                     l3236:	
  2034                           
  2035                           ;main.c: 267:                     {;main.c: 268:                         (*(Semafori[l])
      +                          ).times[i] = (*(Semafori[l])).new_times[i];
  2036  037B  1283               	bcf	3,5	;RP0=0, select bank2
  2037  037C  1703               	bsf	3,6	;RP1=1, select bank2
  2038  037D  0868               	movf	main@l^(0+256),w
  2039  037E  1283               	bcf	3,5	;RP0=0, select bank0
  2040  037F  1303               	bcf	3,6	;RP1=0, select bank0
  2041  0380  00BC               	movwf	??_main
  2042  0381  073C               	addwf	??_main,w
  2043  0382  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2044  0383  0084               	movwf	4
  2045  0384  1383               	bcf	3,7	;select IRP bank1
  2046  0385  0800               	movf	0,w
  2047  0386  00BD               	movwf	??_main+1
  2048  0387  0A84               	incf	4,f
  2049  0388  0800               	movf	0,w
  2050  0389  00BE               	movwf	??_main+2
  2051  038A  1283               	bcf	3,5	;RP0=0, select bank2
  2052  038B  1703               	bsf	3,6	;RP1=1, select bank2
  2053  038C  0869               	movf	main@i_449^(0+256),w
  2054  038D  1283               	bcf	3,5	;RP0=0, select bank0
  2055  038E  1303               	bcf	3,6	;RP1=0, select bank0
  2056  038F  00BF               	movwf	??_main+3
  2057  0390  073F               	addwf	??_main+3,w
  2058  0391  073D               	addwf	??_main+1,w
  2059  0392  00C0               	movwf	??_main+4
  2060  0393  083E               	movf	??_main+2,w
  2061  0394  1803               	skipnc
  2062  0395  3E01               	addlw	1
  2063  0396  00C1               	movwf	??_main+5
  2064  0397  0840               	movf	??_main+4,w
  2065  0398  0084               	movwf	4
  2066  0399  1783               	bsf	3,7
  2067  039A  1C41               	btfss	??_main+5,0
  2068  039B  1383               	bcf	3,7
  2069  039C  0800               	movf	0,w
  2070  039D  00C2               	movwf	??_main+6
  2071  039E  0A84               	incf	4,f
  2072  039F  0800               	movf	0,w
  2073  03A0  00C3               	movwf	??_main+7
  2074  03A1  1283               	bcf	3,5	;RP0=0, select bank2
  2075  03A2  1703               	bsf	3,6	;RP1=1, select bank2
  2076  03A3  0868               	movf	main@l^(0+256),w
  2077  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  2078  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  2079  03A6  00C4               	movwf	??_main+8
  2080  03A7  0744               	addwf	??_main+8,w
  2081  03A8  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2082  03A9  0084               	movwf	4
  2083  03AA  1383               	bcf	3,7	;select IRP bank1
  2084  03AB  0800               	movf	0,w
  2085  03AC  00C5               	movwf	??_main+9
  2086  03AD  0A84               	incf	4,f
  2087  03AE  0800               	movf	0,w
  2088  03AF  00C6               	movwf	??_main+10
  2089  03B0  1283               	bcf	3,5	;RP0=0, select bank2
  2090  03B1  1703               	bsf	3,6	;RP1=1, select bank2
  2091  03B2  0869               	movf	main@i_449^(0+256),w
  2092  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  2093  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  2094  03B5  00C7               	movwf	??_main+11
  2095  03B6  0747               	addwf	??_main+11,w
  2096  03B7  3E06               	addlw	6
  2097  03B8  0745               	addwf	??_main+9,w
  2098  03B9  00C8               	movwf	??_main+12
  2099  03BA  0846               	movf	??_main+10,w
  2100  03BB  1803               	skipnc
  2101  03BC  3E01               	addlw	1
  2102  03BD  00C9               	movwf	??_main+13
  2103  03BE  0848               	movf	??_main+12,w
  2104  03BF  0084               	movwf	4
  2105  03C0  1783               	bsf	3,7
  2106  03C1  1C49               	btfss	??_main+13,0
  2107  03C2  1383               	bcf	3,7
  2108  03C3  0842               	movf	??_main+6,w
  2109  03C4  0080               	movwf	0
  2110  03C5  0A84               	incf	4,f
  2111  03C6  0843               	movf	??_main+7,w
  2112  03C7  0080               	movwf	0
  2113  03C8                     l3238:	
  2114                           
  2115                           ;main.c: 270:                 }
  2116  03C8  3001               	movlw	1
  2117  03C9  00BC               	movwf	??_main
  2118  03CA  083C               	movf	??_main,w
  2119  03CB  1283               	bcf	3,5	;RP0=0, select bank2
  2120  03CC  1703               	bsf	3,6	;RP1=1, select bank2
  2121  03CD  07E9               	addwf	main@i_449^(0+256),f
  2122  03CE  2B1F               	goto	l3230
  2123  03CF                     l3242:	
  2124                           
  2125                           ;main.c: 271:             }
  2126  03CF  3001               	movlw	1
  2127  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  2128  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  2129  03D2  00BC               	movwf	??_main
  2130  03D3  083C               	movf	??_main,w
  2131  03D4  1283               	bcf	3,5	;RP0=0, select bank2
  2132  03D5  1703               	bsf	3,6	;RP1=1, select bank2
  2133  03D6  07E8               	addwf	main@l^(0+256),f
  2134  03D7  2B17               	goto	l3224
  2135  03D8                     l3246:	
  2136                           
  2137                           ;main.c: 275:             {;main.c: 276:                 n_semafori = (n_semafori + 1) %
      +                           16;
  2138  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  2139  03D9  0864               	movf	_n_semafori,w
  2140  03DA  3E01               	addlw	1
  2141  03DB  390F               	andlw	15
  2142  03DC  00BC               	movwf	??_main
  2143  03DD  083C               	movf	??_main,w
  2144  03DE  00E4               	movwf	_n_semafori
  2145  03DF                     l3248:	
  2146                           
  2147                           ;main.c: 277:             } while ((*(Semafori[n_semafori])).times[0] == 0 && n_semafori
      +                           > 0);
  2148  03DF  0864               	movf	_n_semafori,w
  2149  03E0  00BC               	movwf	??_main
  2150  03E1  073C               	addwf	??_main,w
  2151  03E2  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2152  03E3  0084               	movwf	4
  2153  03E4  1383               	bcf	3,7	;select IRP bank1
  2154  03E5  0800               	movf	0,w
  2155  03E6  00BD               	movwf	??_main+1
  2156  03E7  0A84               	incf	4,f
  2157  03E8  0800               	movf	0,w
  2158  03E9  00BE               	movwf	??_main+2
  2159  03EA  083D               	movf	??_main+1,w
  2160  03EB  3E06               	addlw	6
  2161  03EC  00BF               	movwf	??_main+3
  2162  03ED  083E               	movf	??_main+2,w
  2163  03EE  1803               	skipnc
  2164  03EF  3E01               	addlw	1
  2165  03F0  3E00               	addlw	0
  2166  03F1  00C0               	movwf	??_main+4
  2167  03F2  083F               	movf	??_main+3,w
  2168  03F3  0084               	movwf	4
  2169  03F4  1783               	bsf	3,7
  2170  03F5  1C40               	btfss	??_main+4,0
  2171  03F6  1383               	bcf	3,7
  2172  03F7  0800               	movf	0,w
  2173  03F8  00C1               	movwf	??_main+5
  2174  03F9  0A84               	incf	4,f
  2175  03FA  0800               	movf	0,w
  2176  03FB  00C2               	movwf	??_main+6
  2177  03FC  0841               	movf	??_main+5,w
  2178  03FD  0442               	iorwf	??_main+6,w
  2179  03FE  1D03               	btfss	3,2
  2180  03FF  2C01               	goto	u3451
  2181  0400  2C02               	goto	u3450
  2182  0401                     u3451:	
  2183  0401  2C07               	goto	l233
  2184  0402                     u3450:	
  2185  0402                     l3250:	
  2186  0402  0864               	movf	_n_semafori,w
  2187  0403  1D03               	btfss	3,2
  2188  0404  2C06               	goto	u3461
  2189  0405  2C07               	goto	u3460
  2190  0406                     u3461:	
  2191  0406  2BD8               	goto	l3246
  2192  0407                     u3460:	
  2193  0407                     l233:	
  2194                           ;main.c: 278:         }
  2195                           
  2196                           
  2197                           ;main.c: 282:         if (secondPassed.Bit && cycled.Bit)
  2198  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2199  0408  1C61               	btfss	_secondPassed,0
  2200  0409  2C0B               	goto	u3471
  2201  040A  2C0C               	goto	u3470
  2202  040B                     u3471:	
  2203  040B  2CD1               	goto	l3272
  2204  040C                     u3470:	
  2205  040C                     l3252:	
  2206  040C  1C60               	btfss	_cycled,0
  2207  040D  2C0F               	goto	u3481
  2208  040E  2C10               	goto	u3480
  2209  040F                     u3481:	
  2210  040F  2CD1               	goto	l3272
  2211  0410                     u3480:	
  2212  0410                     l3254:	
  2213                           
  2214                           ;main.c: 283:         {;main.c: 284:             time++;
  2215  0410  3001               	movlw	1
  2216  0411  1283               	bcf	3,5	;RP0=0, select bank2
  2217  0412  1703               	bsf	3,6	;RP1=1, select bank2
  2218  0413  07E1               	addwf	main@time^(0+256),f
  2219  0414  1803               	skipnc
  2220  0415  0AE2               	incf	(main@time+1)^(0+256),f
  2221  0416  3000               	movlw	0
  2222  0417  07E2               	addwf	(main@time+1)^(0+256),f
  2223  0418                     l3256:	
  2224                           
  2225                           ;main.c: 285:             endCiclo.Bit = 0;
  2226  0418  105D               	bcf	main@endCiclo^(0+256),0
  2227  0419                     l3258:	
  2228                           
  2229                           ;main.c: 287:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  2230  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2231  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2232  041B  0864               	movf	_n_semafori,w
  2233  041C  00BC               	movwf	??_main
  2234  041D  073C               	addwf	??_main,w
  2235  041E  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2236  041F  0084               	movwf	4
  2237  0420  1383               	bcf	3,7	;select IRP bank1
  2238  0421  0800               	movf	0,w
  2239  0422  00BD               	movwf	??_main+1
  2240  0423  0A84               	incf	4,f
  2241  0424  0800               	movf	0,w
  2242  0425  00BE               	movwf	??_main+2
  2243  0426  1283               	bcf	3,5	;RP0=0, select bank2
  2244  0427  1703               	bsf	3,6	;RP1=1, select bank2
  2245  0428  085F               	movf	main@lux_select^(0+256),w
  2246  0429  1283               	bcf	3,5	;RP0=0, select bank0
  2247  042A  1303               	bcf	3,6	;RP1=0, select bank0
  2248  042B  00BF               	movwf	??_main+3
  2249  042C  073F               	addwf	??_main+3,w
  2250  042D  3E06               	addlw	6
  2251  042E  073D               	addwf	??_main+1,w
  2252  042F  00C0               	movwf	??_main+4
  2253  0430  083E               	movf	??_main+2,w
  2254  0431  1803               	skipnc
  2255  0432  3E01               	addlw	1
  2256  0433  00C1               	movwf	??_main+5
  2257  0434  0840               	movf	??_main+4,w
  2258  0435  0084               	movwf	4
  2259  0436  1783               	bsf	3,7
  2260  0437  1C41               	btfss	??_main+5,0
  2261  0438  1383               	bcf	3,7
  2262  0439  0800               	movf	0,w
  2263  043A  00C2               	movwf	??_main+6
  2264  043B  0A84               	incf	4,f
  2265  043C  0800               	movf	0,w
  2266  043D  00C3               	movwf	??_main+7
  2267  043E  1283               	bcf	3,5	;RP0=0, select bank2
  2268  043F  1703               	bsf	3,6	;RP1=1, select bank2
  2269  0440  0861               	movf	main@time^(0+256),w
  2270  0441  1283               	bcf	3,5	;RP0=0, select bank0
  2271  0442  1303               	bcf	3,6	;RP1=0, select bank0
  2272  0443  0242               	subwf	??_main+6,w
  2273  0444  00C4               	movwf	??_main+8
  2274  0445  1283               	bcf	3,5	;RP0=0, select bank2
  2275  0446  1703               	bsf	3,6	;RP1=1, select bank2
  2276  0447  0862               	movf	(main@time+1)^(0+256),w
  2277  0448  1C03               	skipc
  2278  0449  0A62               	incf	(main@time+1)^(0+256),w
  2279  044A  1283               	bcf	3,5	;RP0=0, select bank0
  2280  044B  1303               	bcf	3,6	;RP1=0, select bank0
  2281  044C  0243               	subwf	??_main+7,w
  2282  044D  00C5               	movwf	??_main+9
  2283  044E  1FC5               	btfss	??_main+9,7
  2284  044F  2C51               	goto	u3491
  2285  0450  2C52               	goto	u3490
  2286  0451                     u3491:	
  2287  0451  2C59               	goto	l3264
  2288  0452                     u3490:	
  2289  0452                     l3260:	
  2290                           
  2291                           ;main.c: 288:             {;main.c: 289:                 endCiclo.Bit = 1;
  2292  0452  1283               	bcf	3,5	;RP0=0, select bank2
  2293  0453  1703               	bsf	3,6	;RP1=1, select bank2
  2294  0454  145D               	bsf	main@endCiclo^(0+256),0
  2295  0455                     l3262:	
  2296                           
  2297                           ;main.c: 290:                 time=1;
  2298  0455  3001               	movlw	1
  2299  0456  00E1               	movwf	main@time^(0+256)
  2300  0457  3000               	movlw	0
  2301  0458  00E2               	movwf	(main@time^(0+256)+1)
  2302  0459                     l3264:	
  2303                           
  2304                           ;main.c: 293:             if (lux_select == 2 && time >= (*Semafori[n_semafori]).times[2
      +                          ])
  2305  0459  3002               	movlw	2
  2306  045A  1283               	bcf	3,5	;RP0=0, select bank2
  2307  045B  1703               	bsf	3,6	;RP1=1, select bank2
  2308  045C  065F               	xorwf	main@lux_select^(0+256),w
  2309  045D  1D03               	btfss	3,2
  2310  045E  2C60               	goto	u3501
  2311  045F  2C61               	goto	u3500
  2312  0460                     u3501:	
  2313  0460  2C97               	goto	l3270
  2314  0461                     u3500:	
  2315  0461                     l3266:	
  2316  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2317  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2318  0463  0864               	movf	_n_semafori,w
  2319  0464  00BC               	movwf	??_main
  2320  0465  073C               	addwf	??_main,w
  2321  0466  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2322  0467  0084               	movwf	4
  2323  0468  1383               	bcf	3,7	;select IRP bank1
  2324  0469  0800               	movf	0,w
  2325  046A  00BD               	movwf	??_main+1
  2326  046B  0A84               	incf	4,f
  2327  046C  0800               	movf	0,w
  2328  046D  00BE               	movwf	??_main+2
  2329  046E  083D               	movf	??_main+1,w
  2330  046F  3E0A               	addlw	10
  2331  0470  00BF               	movwf	??_main+3
  2332  0471  083E               	movf	??_main+2,w
  2333  0472  1803               	skipnc
  2334  0473  3E01               	addlw	1
  2335  0474  3E00               	addlw	0
  2336  0475  00C0               	movwf	??_main+4
  2337  0476  083F               	movf	??_main+3,w
  2338  0477  0084               	movwf	4
  2339  0478  1783               	bsf	3,7
  2340  0479  1C40               	btfss	??_main+4,0
  2341  047A  1383               	bcf	3,7
  2342  047B  0800               	movf	0,w
  2343  047C  00C1               	movwf	??_main+5
  2344  047D  0A84               	incf	4,f
  2345  047E  0800               	movf	0,w
  2346  047F  00C2               	movwf	??_main+6
  2347  0480  1283               	bcf	3,5	;RP0=0, select bank2
  2348  0481  1703               	bsf	3,6	;RP1=1, select bank2
  2349  0482  0862               	movf	(main@time+1)^(0+256),w
  2350  0483  3A80               	xorlw	128
  2351  0484  1283               	bcf	3,5	;RP0=0, select bank0
  2352  0485  1303               	bcf	3,6	;RP1=0, select bank0
  2353  0486  00C3               	movwf	??_main+7
  2354  0487  0842               	movf	??_main+6,w
  2355  0488  3A80               	xorlw	128
  2356  0489  0243               	subwf	??_main+7,w
  2357  048A  1D03               	skipz
  2358  048B  2C90               	goto	u3515
  2359  048C  0841               	movf	??_main+5,w
  2360  048D  1283               	bcf	3,5	;RP0=0, select bank2
  2361  048E  1703               	bsf	3,6	;RP1=1, select bank2
  2362  048F  0261               	subwf	main@time^(0+256),w
  2363  0490                     u3515:	
  2364  0490  1C03               	skipc
  2365  0491  2C93               	goto	u3511
  2366  0492  2C94               	goto	u3510
  2367  0493                     u3511:	
  2368  0493  2C97               	goto	l3270
  2369  0494                     u3510:	
  2370  0494                     l3268:	
  2371                           
  2372                           ;main.c: 294:             {;main.c: 295:                 endCiclo.Bit = 1;
  2373  0494  1283               	bcf	3,5	;RP0=0, select bank2
  2374  0495  1703               	bsf	3,6	;RP1=1, select bank2
  2375  0496  145D               	bsf	main@endCiclo^(0+256),0
  2376  0497                     l3270:	
  2377                           
  2378                           ;main.c: 298:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  2379  0497  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0498  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0499  0864               	movf	_n_semafori,w
  2382  049A  00BC               	movwf	??_main
  2383  049B  073C               	addwf	??_main,w
  2384  049C  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2385  049D  0084               	movwf	4
  2386  049E  1383               	bcf	3,7	;select IRP bank1
  2387  049F  0800               	movf	0,w
  2388  04A0  00BD               	movwf	??_main+1
  2389  04A1  0A84               	incf	4,f
  2390  04A2  0800               	movf	0,w
  2391  04A3  00BE               	movwf	??_main+2
  2392  04A4  1283               	bcf	3,5	;RP0=0, select bank2
  2393  04A5  1703               	bsf	3,6	;RP1=1, select bank2
  2394  04A6  085F               	movf	main@lux_select^(0+256),w
  2395  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  2396  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  2397  04A9  00BF               	movwf	??_main+3
  2398  04AA  073F               	addwf	??_main+3,w
  2399  04AB  3E06               	addlw	6
  2400  04AC  073D               	addwf	??_main+1,w
  2401  04AD  00C0               	movwf	??_main+4
  2402  04AE  083E               	movf	??_main+2,w
  2403  04AF  1803               	skipnc
  2404  04B0  3E01               	addlw	1
  2405  04B1  00C1               	movwf	??_main+5
  2406  04B2  0840               	movf	??_main+4,w
  2407  04B3  0084               	movwf	4
  2408  04B4  1783               	bsf	3,7
  2409  04B5  1C41               	btfss	??_main+5,0
  2410  04B6  1383               	bcf	3,7
  2411  04B7  0800               	movf	0,w
  2412  04B8  00C2               	movwf	??_main+6
  2413  04B9  0A84               	incf	4,f
  2414  04BA  0800               	movf	0,w
  2415  04BB  00C3               	movwf	??_main+7
  2416  04BC  1283               	bcf	3,5	;RP0=0, select bank2
  2417  04BD  1703               	bsf	3,6	;RP1=1, select bank2
  2418  04BE  0861               	movf	main@time^(0+256),w
  2419  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  2420  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  2421  04C1  0242               	subwf	??_main+6,w
  2422  04C2  00B0               	movwf	GetDigits@Time
  2423  04C3  1283               	bcf	3,5	;RP0=0, select bank2
  2424  04C4  1703               	bsf	3,6	;RP1=1, select bank2
  2425  04C5  0862               	movf	(main@time+1)^(0+256),w
  2426  04C6  1C03               	skipc
  2427  04C7  0A62               	incf	(main@time+1)^(0+256),w
  2428  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2429  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  2430  04CA  0243               	subwf	??_main+7,w
  2431  04CB  00B1               	movwf	GetDigits@Time+1
  2432  04CC  120A  158A  266E  120A  118A  	fcall	_GetDigits
  2433  04D1                     l3272:	
  2434                           
  2435                           ;main.c: 302:         if (disp != old_disp)
  2436  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  2437  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  2438  04D3  085B               	movf	_disp,w
  2439  04D4  065C               	xorwf	_old_disp,w
  2440  04D5  1903               	skipnz
  2441  04D6  2CD8               	goto	u3521
  2442  04D7  2CD9               	goto	u3520
  2443  04D8                     u3521:	
  2444  04D8  2D55               	goto	l3294
  2445  04D9                     u3520:	
  2446  04D9                     l3274:	
  2447                           
  2448                           ;main.c: 303:         {;main.c: 304:             old_disp = disp;
  2449  04D9  085B               	movf	_disp,w
  2450  04DA  00BC               	movwf	??_main
  2451  04DB  083C               	movf	??_main,w
  2452  04DC  00DC               	movwf	_old_disp
  2453                           
  2454                           ;main.c: 305:             switch (disp)
  2455  04DD  2D3F               	goto	l3292
  2456  04DE                     l3276:	
  2457                           
  2458                           ;main.c: 308:                 if (centinaia > 0)
  2459  04DE  085D               	movf	_centinaia,w
  2460  04DF  1903               	btfsc	3,2
  2461  04E0  2CE2               	goto	u3531
  2462  04E1  2CE3               	goto	u3530
  2463  04E2                     u3531:	
  2464  04E2  2D55               	goto	l3294
  2465  04E3                     u3530:	
  2466  04E3                     l3278:	
  2467                           
  2468                           ;main.c: 309:                 {;main.c: 310:                     SetDisplay(1, 0, 0, dis
      +                          play[centinaia]);
  2469  04E3  01A0               	clrf	SetDisplay@d2
  2470  04E4  01A1               	clrf	SetDisplay@d3
  2471  04E5  085D               	movf	_centinaia,w
  2472  04E6  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2473  04E7  0084               	movwf	4
  2474  04E8  120A  158A  2000  120A  118A  	fcall	stringdir
  2475  04ED  00BC               	movwf	??_main
  2476  04EE  083C               	movf	??_main,w
  2477  04EF  00A2               	movwf	SetDisplay@value
  2478  04F0  3001               	movlw	1
  2479  04F1  120A  158A  23A6  120A  118A  	fcall	_SetDisplay
  2480  04F6  2D55               	goto	l3294
  2481  04F7                     l3280:	
  2482                           
  2483                           ;main.c: 314:                 if (decine > 0 || centinaia > 0)
  2484  04F7  085E               	movf	_decine,w
  2485  04F8  1D03               	btfss	3,2
  2486  04F9  2CFB               	goto	u3541
  2487  04FA  2CFC               	goto	u3540
  2488  04FB                     u3541:	
  2489  04FB  2D01               	goto	l3284
  2490  04FC                     u3540:	
  2491  04FC                     l3282:	
  2492  04FC  085D               	movf	_centinaia,w
  2493  04FD  1903               	btfsc	3,2
  2494  04FE  2D00               	goto	u3551
  2495  04FF  2D01               	goto	u3550
  2496  0500                     u3551:	
  2497  0500  2D55               	goto	l3294
  2498  0501                     u3550:	
  2499  0501                     l3284:	
  2500                           
  2501                           ;main.c: 315:                 {;main.c: 316:                     SetDisplay(0, 1, 0, dis
      +                          play[decine]);
  2502  0501  01A0               	clrf	SetDisplay@d2
  2503  0502  0AA0               	incf	SetDisplay@d2,f
  2504  0503  01A1               	clrf	SetDisplay@d3
  2505  0504  085E               	movf	_decine,w
  2506  0505  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2507  0506  0084               	movwf	4
  2508  0507  120A  158A  2000  120A  118A  	fcall	stringdir
  2509  050C  00BC               	movwf	??_main
  2510  050D  083C               	movf	??_main,w
  2511  050E  00A2               	movwf	SetDisplay@value
  2512  050F  3000               	movlw	0
  2513  0510  120A  158A  23A6  120A  118A  	fcall	_SetDisplay
  2514  0515  2D55               	goto	l3294
  2515  0516                     l3286:	
  2516                           
  2517                           ;main.c: 320:                 SetDisplay(0, 0, 1, display[unita]);
  2518  0516  01A0               	clrf	SetDisplay@d2
  2519  0517  01A1               	clrf	SetDisplay@d3
  2520  0518  0AA1               	incf	SetDisplay@d3,f
  2521  0519  085F               	movf	_unita,w
  2522  051A  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2523  051B  0084               	movwf	4
  2524  051C  120A  158A  2000  120A  118A  	fcall	stringdir
  2525  0521  00BC               	movwf	??_main
  2526  0522  083C               	movf	??_main,w
  2527  0523  00A2               	movwf	SetDisplay@value
  2528  0524  3000               	movlw	0
  2529  0525  120A  158A  23A6  120A  118A  	fcall	_SetDisplay
  2530                           
  2531                           ;main.c: 321:                 break;
  2532  052A  2D55               	goto	l3294
  2533  052B                     l3288:	
  2534                           
  2535                           ;main.c: 323:                 SetDisplay(1, 0, 0, display[n_semafori]);
  2536  052B  01A0               	clrf	SetDisplay@d2
  2537  052C  01A1               	clrf	SetDisplay@d3
  2538  052D  0864               	movf	_n_semafori,w
  2539  052E  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2540  052F  0084               	movwf	4
  2541  0530  120A  158A  2000  120A  118A  	fcall	stringdir
  2542  0535  00BC               	movwf	??_main
  2543  0536  083C               	movf	??_main,w
  2544  0537  00A2               	movwf	SetDisplay@value
  2545  0538  3001               	movlw	1
  2546  0539  120A  158A  23A6  120A  118A  	fcall	_SetDisplay
  2547                           
  2548                           ;main.c: 324:                 break;
  2549  053E  2D55               	goto	l3294
  2550  053F                     l3292:	
  2551  053F  085B               	movf	_disp,w
  2552  0540  00BC               	movwf	??_main
  2553  0541  01BD               	clrf	??_main+1
  2554                           
  2555                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2556                           ; Switch size 1, requested type "simple"
  2557                           ; Number of cases is 1, Range of values is 0 to 0
  2558                           ; switch strategies available:
  2559                           ; Name         Instructions Cycles
  2560                           ; simple_byte            4     3 (average)
  2561                           ; direct_byte           11     8 (fixed)
  2562                           ; jumptable            260     6 (fixed)
  2563                           ;	Chosen strategy is simple_byte
  2564  0542  083D               	movf	??_main+1,w
  2565  0543  3A00               	xorlw	0	; case 0
  2566  0544  1903               	skipnz
  2567  0545  2D47               	goto	l3408
  2568  0546  2D55               	goto	l3294
  2569  0547                     l3408:	
  2570                           
  2571                           ; Switch size 1, requested type "simple"
  2572                           ; Number of cases is 4, Range of values is 0 to 3
  2573                           ; switch strategies available:
  2574                           ; Name         Instructions Cycles
  2575                           ; simple_byte           13     7 (average)
  2576                           ; direct_byte           20     8 (fixed)
  2577                           ; jumptable            260     6 (fixed)
  2578                           ;	Chosen strategy is simple_byte
  2579  0547  083C               	movf	??_main,w
  2580  0548  3A00               	xorlw	0	; case 0
  2581  0549  1903               	skipnz
  2582  054A  2CDE               	goto	l3276
  2583  054B  3A01               	xorlw	1	; case 1
  2584  054C  1903               	skipnz
  2585  054D  2CF7               	goto	l3280
  2586  054E  3A03               	xorlw	3	; case 2
  2587  054F  1903               	skipnz
  2588  0550  2D16               	goto	l3286
  2589  0551  3A01               	xorlw	1	; case 3
  2590  0552  1903               	skipnz
  2591  0553  2D2B               	goto	l3288
  2592  0554  2D55               	goto	l3294
  2593  0555                     l3294:	
  2594                           
  2595                           ;main.c: 327:         disp = (disp + 1) % 3;
  2596  0555  3003               	movlw	3
  2597  0556  1283               	bcf	3,5	;RP0=0, select bank0
  2598  0557  1303               	bcf	3,6	;RP1=0, select bank0
  2599  0558  00A0               	movwf	___awmod@divisor
  2600  0559  3000               	movlw	0
  2601  055A  00A1               	movwf	___awmod@divisor+1
  2602  055B  085B               	movf	_disp,w
  2603  055C  3E01               	addlw	1
  2604  055D  00A2               	movwf	___awmod@dividend
  2605  055E  3000               	movlw	0
  2606  055F  1803               	skipnc
  2607  0560  3001               	movlw	1
  2608  0561  00A3               	movwf	___awmod@dividend+1
  2609  0562  120A  158A  25AA  120A  118A  	fcall	___awmod
  2610  0567  1283               	bcf	3,5	;RP0=0, select bank0
  2611  0568  1303               	bcf	3,6	;RP1=0, select bank0
  2612  0569  0820               	movf	?___awmod,w
  2613  056A  00BC               	movwf	??_main
  2614  056B  083C               	movf	??_main,w
  2615  056C  00DB               	movwf	_disp
  2616  056D                     l3296:	
  2617                           
  2618                           ;main.c: 333:         if (secondPassed.Bit && cycled.Bit)
  2619  056D  1C61               	btfss	_secondPassed,0
  2620  056E  2D70               	goto	u3561
  2621  056F  2D71               	goto	u3560
  2622  0570                     u3561:	
  2623  0570  2D77               	goto	l257
  2624  0571                     u3560:	
  2625  0571                     l3298:	
  2626  0571  1C60               	btfss	_cycled,0
  2627  0572  2D74               	goto	u3571
  2628  0573  2D75               	goto	u3570
  2629  0574                     u3571:	
  2630  0574  2D77               	goto	l257
  2631  0575                     u3570:	
  2632  0575                     l3300:	
  2633                           
  2634                           ;main.c: 334:         {;main.c: 335:             secondPassed.Bit = 0;
  2635  0575  1061               	bcf	_secondPassed,0
  2636                           
  2637                           ;main.c: 336:             cycled.Bit = 0;
  2638  0576  1060               	bcf	_cycled,0
  2639  0577                     l257:	
  2640                           ;main.c: 337:         }
  2641                           
  2642                           
  2643                           ;main.c: 339:         if (secondPassed.Bit && !cycled.Bit)
  2644  0577  1C61               	btfss	_secondPassed,0
  2645  0578  2D7A               	goto	u3581
  2646  0579  2D7B               	goto	u3580
  2647  057A                     u3581:	
  2648  057A  2895               	goto	l3116
  2649  057B                     u3580:	
  2650  057B                     l3302:	
  2651  057B  1860               	btfsc	_cycled,0
  2652  057C  2D7E               	goto	u3591
  2653  057D  2D7F               	goto	u3590
  2654  057E                     u3591:	
  2655  057E  2895               	goto	l3116
  2656  057F                     u3590:	
  2657  057F                     l3304:	
  2658                           
  2659                           ;main.c: 340:         {;main.c: 341:             cycled.Bit = 1;
  2660  057F  1460               	bsf	_cycled,0
  2661  0580  2895               	goto	l3116
  2662  0581  120A  118A  280E   	ljmp	start
  2663  0584                     __end_of_main:	
  2664                           
  2665                           	psect	text1
  2666  0C70                     __ptext1:	
  2667 ;; *************** function _sendByte *****************
  2668 ;; Defined at:
  2669 ;;		line 405 in file "main.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  byte0           1    wreg     unsigned char 
  2672 ;;  byte1           1   20[BANK0 ] unsigned char 
  2673 ;;  valore          1   21[BANK0 ] unsigned char 
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  byte0           1   25[BANK0 ] unsigned char 
  2676 ;;  i               1   27[BANK0 ] unsigned char 
  2677 ;;  txByte          1   26[BANK0 ] PTR unsigned char 
  2678 ;;		 -> BuildByte@txByte(5), 
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2688 ;;      Params:         0       2       0       0       0
  2689 ;;      Locals:         0       3       0       0       0
  2690 ;;      Temps:          0       3       0       0       0
  2691 ;;      Totals:         0       8       0       0       0
  2692 ;;Total ram usage:        8 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    3
  2695 ;; This function calls:
  2696 ;;		_BuildByte
  2697 ;;		_UART_TxChar
  2698 ;; This function is called by:
  2699 ;;		_main
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           
  2704                           ;psect for function _sendByte
  2705  0C70                     _sendByte:	
  2706                           
  2707                           ;incstack = 0
  2708                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2709                           ;sendByte@byte0 stored from wreg
  2710  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  2711  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  2712  0C72  00B9               	movwf	sendByte@byte0
  2713  0C73                     l3000:	
  2714                           
  2715                           ;main.c: 405: void sendByte(char byte0, char byte1, char valore);main.c: 406: {;main.c: 
      +                          407:     char *txByte;;main.c: 408:     txByte = BuildByte(byte0, byte1, valore);
  2716  0C73  0834               	movf	sendByte@byte1,w
  2717  0C74  00B6               	movwf	??_sendByte
  2718  0C75  0836               	movf	??_sendByte,w
  2719  0C76  00A0               	movwf	BuildByte@byte1
  2720  0C77  0835               	movf	sendByte@valore,w
  2721  0C78  00B7               	movwf	??_sendByte+1
  2722  0C79  0837               	movf	??_sendByte+1,w
  2723  0C7A  00A1               	movwf	BuildByte@valore
  2724  0C7B  0839               	movf	sendByte@byte0,w
  2725  0C7C  120A  118A  2730  120A  158A  	fcall	_BuildByte
  2726  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  2727  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  2728  0C83  00B8               	movwf	??_sendByte+2
  2729  0C84  0838               	movf	??_sendByte+2,w
  2730  0C85  00BA               	movwf	sendByte@txByte
  2731  0C86                     l3002:	
  2732                           
  2733                           ;main.c: 410:     for (unsigned char i = 0; i < 5; i++)
  2734  0C86  01BB               	clrf	sendByte@i
  2735  0C87                     l3008:	
  2736                           
  2737                           ;main.c: 411:     {;main.c: 412:         UART_TxChar(*(txByte++));
  2738  0C87  083A               	movf	sendByte@txByte,w
  2739  0C88  0084               	movwf	4
  2740  0C89  1383               	bcf	3,7	;select IRP bank0
  2741  0C8A  0800               	movf	0,w
  2742  0C8B  120A  158A  2375  120A  158A  	fcall	_UART_TxChar
  2743  0C90                     l3010:	
  2744  0C90  3001               	movlw	1
  2745  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  2746  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  2747  0C93  00B6               	movwf	??_sendByte
  2748  0C94  0836               	movf	??_sendByte,w
  2749  0C95  07BA               	addwf	sendByte@txByte,f
  2750  0C96                     l3012:	
  2751                           
  2752                           ;main.c: 413:     }
  2753  0C96  3001               	movlw	1
  2754  0C97  00B6               	movwf	??_sendByte
  2755  0C98  0836               	movf	??_sendByte,w
  2756  0C99  07BB               	addwf	sendByte@i,f
  2757  0C9A                     l3014:	
  2758  0C9A  3005               	movlw	5
  2759  0C9B  023B               	subwf	sendByte@i,w
  2760  0C9C  1C03               	skipc
  2761  0C9D  2C9F               	goto	u3201
  2762  0C9E  2CA0               	goto	u3200
  2763  0C9F                     u3201:	
  2764  0C9F  2C87               	goto	l3008
  2765  0CA0                     u3200:	
  2766  0CA0                     l296:	
  2767  0CA0  0008               	return
  2768  0CA1                     __end_of_sendByte:	
  2769                           
  2770                           	psect	text2
  2771  0B75                     __ptext2:	
  2772 ;; *************** function _UART_TxChar *****************
  2773 ;; Defined at:
  2774 ;;		line 380 in file "main.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;  ch              1    wreg     unsigned char 
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;  ch              1    0[BANK0 ] unsigned char 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		wreg
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2788 ;;      Params:         0       0       0       0       0
  2789 ;;      Locals:         0       1       0       0       0
  2790 ;;      Temps:          0       0       0       0       0
  2791 ;;      Totals:         0       1       0       0       0
  2792 ;;Total ram usage:        1 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    2
  2795 ;; This function calls:
  2796 ;;		Nothing
  2797 ;; This function is called by:
  2798 ;;		_sendByte
  2799 ;;		_UART_Write_Text
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           
  2804                           ;psect for function _UART_TxChar
  2805  0B75                     _UART_TxChar:	
  2806                           
  2807                           ;incstack = 0
  2808                           ; Regs used in _UART_TxChar: [wreg]
  2809                           ;UART_TxChar@ch stored from wreg
  2810  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  2811  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  2812  0B77  00A0               	movwf	UART_TxChar@ch
  2813  0B78                     l2752:	
  2814  0B78                     l276:	
  2815                           ;main.c: 383:         ;
  2816                           
  2817                           
  2818                           ;main.c: 382:     while (!TXIF)
  2819  0B78  1E0C               	btfss	12,4	;volatile
  2820  0B79  2B7B               	goto	u2741
  2821  0B7A  2B7C               	goto	u2740
  2822  0B7B                     u2741:	
  2823  0B7B  2B78               	goto	l276
  2824  0B7C                     u2740:	
  2825  0B7C                     l278:	
  2826                           
  2827                           ;main.c: 384:     TXIF = 0;
  2828  0B7C  120C               	bcf	12,4	;volatile
  2829  0B7D                     l2754:	
  2830                           
  2831                           ;main.c: 385:     TXREG = ch;
  2832  0B7D  0820               	movf	UART_TxChar@ch,w
  2833  0B7E  0099               	movwf	25	;volatile
  2834  0B7F                     l279:	
  2835  0B7F  0008               	return
  2836  0B80                     __end_of_UART_TxChar:	
  2837                           
  2838                           	psect	text3
  2839  0730                     __ptext3:	
  2840 ;; *************** function _BuildByte *****************
  2841 ;; Defined at:
  2842 ;;		line 2 in file "./CustomLib/Serial.h"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  byte0           1    wreg     unsigned char 
  2845 ;;  byte1           1    0[BANK0 ] unsigned char 
  2846 ;;  valore          1    1[BANK0 ] unsigned char 
  2847 ;; Auto vars:     Size  Location     Type
  2848 ;;  byte0           1    4[BANK0 ] unsigned char 
  2849 ;;  y               2   14[BANK0 ] int 
  2850 ;;  y               2   12[BANK0 ] int 
  2851 ;;  i               2   18[BANK0 ] int 
  2852 ;;  i               2   16[BANK0 ] int 
  2853 ;;  txByte          5    5[BANK0 ] unsigned char [5]
  2854 ;;  sommaColumn     1   11[BANK0 ] unsigned char 
  2855 ;;  sommaRow        1   10[BANK0 ] unsigned char 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      PTR unsigned char 
  2858 ;; Registers used:
  2859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2865 ;;      Params:         0       2       0       0       0
  2866 ;;      Locals:         0      16       0       0       0
  2867 ;;      Temps:          0       2       0       0       0
  2868 ;;      Totals:         0      20       0       0       0
  2869 ;;Total ram usage:       20 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    2
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_sendByte
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           
  2880                           ;psect for function _BuildByte
  2881  0730                     _BuildByte:	
  2882                           
  2883                           ;incstack = 0
  2884                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2885                           ;BuildByte@byte0 stored from wreg
  2886  0730  1283               	bcf	3,5	;RP0=0, select bank0
  2887  0731  1303               	bcf	3,6	;RP1=0, select bank0
  2888  0732  00A4               	movwf	BuildByte@byte0
  2889  0733                     l2684:	
  2890                           
  2891                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2892  0733  0824               	movf	BuildByte@byte0,w
  2893  0734  397F               	andlw	127
  2894  0735  00A2               	movwf	??_BuildByte
  2895  0736  0822               	movf	??_BuildByte,w
  2896  0737  00A5               	movwf	BuildByte@txByte
  2897                           
  2898                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2899  0738  0820               	movf	BuildByte@byte1,w
  2900  0739  397F               	andlw	127
  2901  073A  00A2               	movwf	??_BuildByte
  2902  073B  0822               	movf	??_BuildByte,w
  2903  073C  00A6               	movwf	BuildByte@txByte+1
  2904                           
  2905                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2906  073D  0821               	movf	BuildByte@valore,w
  2907  073E  397F               	andlw	127
  2908  073F  00A2               	movwf	??_BuildByte
  2909  0740  0822               	movf	??_BuildByte,w
  2910  0741  00A7               	movwf	BuildByte@txByte+2
  2911  0742                     l2686:	
  2912                           
  2913                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2914  0742  0821               	movf	BuildByte@valore,w
  2915  0743  00A2               	movwf	??_BuildByte
  2916  0744  3007               	movlw	7
  2917  0745                     u2645:	
  2918  0745  1003               	clrc
  2919  0746  0CA2               	rrf	??_BuildByte,f
  2920  0747  3EFF               	addlw	-1
  2921  0748  1D03               	skipz
  2922  0749  2F45               	goto	u2645
  2923  074A  0822               	movf	??_BuildByte,w
  2924  074B  397F               	andlw	127
  2925  074C  00A3               	movwf	??_BuildByte+1
  2926  074D  0823               	movf	??_BuildByte+1,w
  2927  074E  00A8               	movwf	BuildByte@txByte+3
  2928  074F                     l2688:	
  2929                           
  2930                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2931  074F  01AA               	clrf	BuildByte@sommaRow
  2932  0750                     l2690:	
  2933                           
  2934                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2935  0750  01AB               	clrf	BuildByte@sommaColumn
  2936  0751                     l2692:	
  2937                           
  2938                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2939  0751  01B0               	clrf	BuildByte@i
  2940  0752  01B1               	clrf	BuildByte@i+1
  2941  0753                     l2698:	
  2942                           
  2943                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2944  0753  1283               	bcf	3,5	;RP0=0, select bank0
  2945  0754  1303               	bcf	3,6	;RP1=0, select bank0
  2946  0755  01AC               	clrf	BuildByte@y
  2947  0756  01AD               	clrf	BuildByte@y+1
  2948  0757                     l2704:	
  2949                           
  2950                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2951  0757  1283               	bcf	3,5	;RP0=0, select bank0
  2952  0758  1303               	bcf	3,6	;RP1=0, select bank0
  2953  0759  0830               	movf	BuildByte@i,w
  2954  075A  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2955  075B  0084               	movwf	4
  2956  075C  1383               	bcf	3,7	;select IRP bank0
  2957  075D  0800               	movf	0,w
  2958  075E  00A2               	movwf	??_BuildByte
  2959  075F  0A2C               	incf	BuildByte@y,w
  2960  0760  2F63               	goto	u2654
  2961  0761                     u2655:	
  2962  0761  1003               	clrc
  2963  0762  0CA2               	rrf	??_BuildByte,f
  2964  0763                     u2654:	
  2965  0763  3EFF               	addlw	-1
  2966  0764  1D03               	skipz
  2967  0765  2F61               	goto	u2655
  2968  0766  0822               	movf	??_BuildByte,w
  2969  0767  3901               	andlw	1
  2970  0768  00A3               	movwf	??_BuildByte+1
  2971  0769  0823               	movf	??_BuildByte+1,w
  2972  076A  07AA               	addwf	BuildByte@sommaRow,f
  2973  076B                     l2706:	
  2974                           
  2975                           ;./CustomLib/Serial.h: 18:         }
  2976  076B  3001               	movlw	1
  2977  076C  07AC               	addwf	BuildByte@y,f
  2978  076D  1803               	skipnc
  2979  076E  0AAD               	incf	BuildByte@y+1,f
  2980  076F  3000               	movlw	0
  2981  0770  07AD               	addwf	BuildByte@y+1,f
  2982  0771                     l2708:	
  2983  0771  082D               	movf	BuildByte@y+1,w
  2984  0772  3A80               	xorlw	128
  2985  0773  00FF               	movwf	btemp+1
  2986  0774  3080               	movlw	128
  2987  0775  027F               	subwf	btemp+1,w
  2988  0776  1D03               	skipz
  2989  0777  2F7A               	goto	u2665
  2990  0778  3008               	movlw	8
  2991  0779  022C               	subwf	BuildByte@y,w
  2992  077A                     u2665:	
  2993  077A  1C03               	skipc
  2994  077B  2F7D               	goto	u2661
  2995  077C  2F7E               	goto	u2660
  2996  077D                     u2661:	
  2997  077D  2F57               	goto	l2704
  2998  077E                     u2660:	
  2999  077E                     l119:	
  3000                           
  3001                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  3002  077E  1283               	bcf	3,5	;RP0=0, select bank0
  3003  077F  1303               	bcf	3,6	;RP1=0, select bank0
  3004  0780  1C2A               	btfss	BuildByte@sommaRow,0
  3005  0781  2F83               	goto	u2671
  3006  0782  2F84               	goto	u2670
  3007  0783                     u2671:	
  3008  0783  2F8C               	goto	l2712
  3009  0784                     u2670:	
  3010  0784                     l2710:	
  3011                           
  3012                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  3013  0784  3080               	movlw	128
  3014  0785  00A2               	movwf	??_BuildByte
  3015  0786  0830               	movf	BuildByte@i,w
  3016  0787  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3017  0788  0084               	movwf	4
  3018  0789  0822               	movf	??_BuildByte,w
  3019  078A  1383               	bcf	3,7	;select IRP bank0
  3020  078B  0780               	addwf	0,f
  3021  078C                     l2712:	
  3022                           
  3023                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  3024  078C  01AA               	clrf	BuildByte@sommaRow
  3025  078D                     l2716:	
  3026                           ;./CustomLib/Serial.h: 23:         }
  3027                           
  3028                           
  3029                           ;./CustomLib/Serial.h: 28:     }
  3030  078D  3001               	movlw	1
  3031  078E  07B0               	addwf	BuildByte@i,f
  3032  078F  1803               	skipnc
  3033  0790  0AB1               	incf	BuildByte@i+1,f
  3034  0791  3000               	movlw	0
  3035  0792  07B1               	addwf	BuildByte@i+1,f
  3036  0793                     l2718:	
  3037  0793  0831               	movf	BuildByte@i+1,w
  3038  0794  3A80               	xorlw	128
  3039  0795  00FF               	movwf	btemp+1
  3040  0796  3080               	movlw	128
  3041  0797  027F               	subwf	btemp+1,w
  3042  0798  1D03               	skipz
  3043  0799  2F9C               	goto	u2685
  3044  079A  3004               	movlw	4
  3045  079B  0230               	subwf	BuildByte@i,w
  3046  079C                     u2685:	
  3047  079C  1C03               	skipc
  3048  079D  2F9F               	goto	u2681
  3049  079E  2FA0               	goto	u2680
  3050  079F                     u2681:	
  3051  079F  2F53               	goto	l2698
  3052  07A0                     u2680:	
  3053  07A0                     l2720:	
  3054                           
  3055                           ;./CustomLib/Serial.h: 31:     for (int i = 0; i < 8; i++)
  3056  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  3057  07A1  1303               	bcf	3,6	;RP1=0, select bank0
  3058  07A2  01B2               	clrf	BuildByte@i_342
  3059  07A3  01B3               	clrf	BuildByte@i_342+1
  3060  07A4                     l2726:	
  3061                           
  3062                           ;./CustomLib/Serial.h: 32:     {;./CustomLib/Serial.h: 33:         for (int y = 0; y < 4
      +                          ; y++)
  3063  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  3064  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  3065  07A6  01AE               	clrf	BuildByte@y_343
  3066  07A7  01AF               	clrf	BuildByte@y_343+1
  3067  07A8                     l2732:	
  3068                           
  3069                           ;./CustomLib/Serial.h: 35:         {;./CustomLib/Serial.h: 36:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3070  07A8  1283               	bcf	3,5	;RP0=0, select bank0
  3071  07A9  1303               	bcf	3,6	;RP1=0, select bank0
  3072  07AA  082E               	movf	BuildByte@y_343,w
  3073  07AB  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3074  07AC  0084               	movwf	4
  3075  07AD  1383               	bcf	3,7	;select IRP bank0
  3076  07AE  0800               	movf	0,w
  3077  07AF  00A2               	movwf	??_BuildByte
  3078  07B0  0A32               	incf	BuildByte@i_342,w
  3079  07B1  2FB4               	goto	u2694
  3080  07B2                     u2695:	
  3081  07B2  1003               	clrc
  3082  07B3  0CA2               	rrf	??_BuildByte,f
  3083  07B4                     u2694:	
  3084  07B4  3EFF               	addlw	-1
  3085  07B5  1D03               	skipz
  3086  07B6  2FB2               	goto	u2695
  3087  07B7  0822               	movf	??_BuildByte,w
  3088  07B8  3901               	andlw	1
  3089  07B9  00A3               	movwf	??_BuildByte+1
  3090  07BA  0823               	movf	??_BuildByte+1,w
  3091  07BB  07AB               	addwf	BuildByte@sommaColumn,f
  3092  07BC                     l2734:	
  3093                           
  3094                           ;./CustomLib/Serial.h: 37:         }
  3095  07BC  3001               	movlw	1
  3096  07BD  07AE               	addwf	BuildByte@y_343,f
  3097  07BE  1803               	skipnc
  3098  07BF  0AAF               	incf	BuildByte@y_343+1,f
  3099  07C0  3000               	movlw	0
  3100  07C1  07AF               	addwf	BuildByte@y_343+1,f
  3101  07C2                     l2736:	
  3102  07C2  082F               	movf	BuildByte@y_343+1,w
  3103  07C3  3A80               	xorlw	128
  3104  07C4  00FF               	movwf	btemp+1
  3105  07C5  3080               	movlw	128
  3106  07C6  027F               	subwf	btemp+1,w
  3107  07C7  1D03               	skipz
  3108  07C8  2FCB               	goto	u2705
  3109  07C9  3004               	movlw	4
  3110  07CA  022E               	subwf	BuildByte@y_343,w
  3111  07CB                     u2705:	
  3112  07CB  1C03               	skipc
  3113  07CC  2FCE               	goto	u2701
  3114  07CD  2FCF               	goto	u2700
  3115  07CE                     u2701:	
  3116  07CE  2FA8               	goto	l2732
  3117  07CF                     u2700:	
  3118  07CF                     l125:	
  3119                           
  3120                           ;./CustomLib/Serial.h: 38:         if (sommaColumn % 2 == 1)
  3121  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  3122  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  3123  07D1  1C2B               	btfss	BuildByte@sommaColumn,0
  3124  07D2  2FD4               	goto	u2711
  3125  07D3  2FD5               	goto	u2710
  3126  07D4                     u2711:	
  3127  07D4  2FE2               	goto	l2740
  3128  07D5                     u2710:	
  3129  07D5                     l2738:	
  3130                           
  3131                           ;./CustomLib/Serial.h: 39:         {;./CustomLib/Serial.h: 40:             txByte[4] += 
      +                          0x01 << i;
  3132  07D5  3001               	movlw	1
  3133  07D6  00A2               	movwf	??_BuildByte
  3134  07D7  0A32               	incf	BuildByte@i_342,w
  3135  07D8  2FDB               	goto	u2724
  3136  07D9                     u2725:	
  3137  07D9  1003               	clrc
  3138  07DA  0DA2               	rlf	??_BuildByte,f
  3139  07DB                     u2724:	
  3140  07DB  3EFF               	addlw	-1
  3141  07DC  1D03               	skipz
  3142  07DD  2FD9               	goto	u2725
  3143  07DE  0822               	movf	??_BuildByte,w
  3144  07DF  00A3               	movwf	??_BuildByte+1
  3145  07E0  0823               	movf	??_BuildByte+1,w
  3146  07E1  07A9               	addwf	BuildByte@txByte+4,f
  3147  07E2                     l2740:	
  3148                           
  3149                           ;./CustomLib/Serial.h: 41:             sommaColumn = 0;
  3150  07E2  01AB               	clrf	BuildByte@sommaColumn
  3151  07E3                     l2744:	
  3152                           ;./CustomLib/Serial.h: 42:         }
  3153                           
  3154                           
  3155                           ;./CustomLib/Serial.h: 47:     }
  3156  07E3  3001               	movlw	1
  3157  07E4  07B2               	addwf	BuildByte@i_342,f
  3158  07E5  1803               	skipnc
  3159  07E6  0AB3               	incf	BuildByte@i_342+1,f
  3160  07E7  3000               	movlw	0
  3161  07E8  07B3               	addwf	BuildByte@i_342+1,f
  3162  07E9                     l2746:	
  3163  07E9  0833               	movf	BuildByte@i_342+1,w
  3164  07EA  3A80               	xorlw	128
  3165  07EB  00FF               	movwf	btemp+1
  3166  07EC  3080               	movlw	128
  3167  07ED  027F               	subwf	btemp+1,w
  3168  07EE  1D03               	skipz
  3169  07EF  2FF2               	goto	u2735
  3170  07F0  3008               	movlw	8
  3171  07F1  0232               	subwf	BuildByte@i_342,w
  3172  07F2                     u2735:	
  3173  07F2  1C03               	skipc
  3174  07F3  2FF5               	goto	u2731
  3175  07F4  2FF6               	goto	u2730
  3176  07F5                     u2731:	
  3177  07F5  2FA4               	goto	l2726
  3178  07F6                     u2730:	
  3179  07F6                     l2748:	
  3180                           
  3181                           ;./CustomLib/Serial.h: 49:     return txByte;
  3182  07F6  3025               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3183  07F7                     l128:	
  3184  07F7  0008               	return
  3185  07F8                     __end_of_BuildByte:	
  3186                           
  3187                           	psect	text4
  3188  0CA1                     __ptext4:	
  3189 ;; *************** function _map *****************
  3190 ;; Defined at:
  3191 ;;		line 1 in file "./CustomLib/Conversions.h"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  x               2   16[BANK0 ] int 
  3194 ;;  in_min          2   18[BANK0 ] int 
  3195 ;;  in_max          2   20[BANK0 ] int 
  3196 ;;  out_min         2   22[BANK0 ] int 
  3197 ;;  out_max         2   24[BANK0 ] int 
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;		None
  3200 ;; Return value:  Size  Location     Type
  3201 ;;                  2   16[BANK0 ] int 
  3202 ;; Registers used:
  3203 ;;		wreg, status,2, status,0, pclath, cstack
  3204 ;; Tracked objects:
  3205 ;;		On entry : 0/0
  3206 ;;		On exit  : 0/0
  3207 ;;		Unchanged: 0/0
  3208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3209 ;;      Params:         0      10       0       0       0
  3210 ;;      Locals:         0       0       0       0       0
  3211 ;;      Temps:          0       0       0       0       0
  3212 ;;      Totals:         0      10       0       0       0
  3213 ;;Total ram usage:       10 bytes
  3214 ;; Hardware stack levels used:    1
  3215 ;; Hardware stack levels required when called:    3
  3216 ;; This function calls:
  3217 ;;		___awdiv
  3218 ;;		___wmul
  3219 ;; This function is called by:
  3220 ;;		_main
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _map
  3226  0CA1                     _map:	
  3227  0CA1                     l2892:	
  3228                           ;incstack = 0
  3229                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3230                           
  3231                           
  3232                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3233  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  3234  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  3235  0CA3  0832               	movf	map@in_min,w
  3236  0CA4  0234               	subwf	map@in_max,w
  3237  0CA5  00A7               	movwf	___awdiv@divisor
  3238  0CA6  0833               	movf	map@in_min+1,w
  3239  0CA7  1C03               	skipc
  3240  0CA8  0A33               	incf	map@in_min+1,w
  3241  0CA9  0235               	subwf	map@in_max+1,w
  3242  0CAA  00A8               	movwf	___awdiv@divisor+1
  3243  0CAB  0832               	movf	map@in_min,w
  3244  0CAC  0230               	subwf	map@x,w
  3245  0CAD  00A0               	movwf	___wmul@multiplier
  3246  0CAE  0833               	movf	map@in_min+1,w
  3247  0CAF  1C03               	skipc
  3248  0CB0  0A33               	incf	map@in_min+1,w
  3249  0CB1  0231               	subwf	map@x+1,w
  3250  0CB2  00A1               	movwf	___wmul@multiplier+1
  3251  0CB3  0836               	movf	map@out_min,w
  3252  0CB4  0238               	subwf	map@out_max,w
  3253  0CB5  00A2               	movwf	___wmul@multiplicand
  3254  0CB6  0837               	movf	map@out_min+1,w
  3255  0CB7  1C03               	skipc
  3256  0CB8  0A37               	incf	map@out_min+1,w
  3257  0CB9  0239               	subwf	map@out_max+1,w
  3258  0CBA  00A3               	movwf	___wmul@multiplicand+1
  3259  0CBB  120A  158A  2418  120A  158A  	fcall	___wmul
  3260  0CC0  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0CC1  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0CC2  0821               	movf	?___wmul+1,w
  3263  0CC3  00AA               	movwf	___awdiv@dividend+1
  3264  0CC4  0820               	movf	?___wmul,w
  3265  0CC5  00A9               	movwf	___awdiv@dividend
  3266  0CC6  120A  158A  2605  120A  158A  	fcall	___awdiv
  3267  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  3268  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  3269  0CCD  0836               	movf	map@out_min,w
  3270  0CCE  0727               	addwf	?___awdiv,w
  3271  0CCF  00B0               	movwf	?_map
  3272  0CD0  0837               	movf	map@out_min+1,w
  3273  0CD1  1803               	skipnc
  3274  0CD2  0A37               	incf	map@out_min+1,w
  3275  0CD3  0728               	addwf	?___awdiv+1,w
  3276  0CD4  00B1               	movwf	?_map+1
  3277  0CD5                     l83:	
  3278  0CD5  0008               	return
  3279  0CD6                     __end_of_map:	
  3280                           
  3281                           	psect	text5
  3282  0C18                     __ptext5:	
  3283 ;; *************** function ___wmul *****************
  3284 ;; Defined at:
  3285 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3288 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;  product         2    4[BANK0 ] unsigned int 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  2    0[BANK0 ] unsigned int 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3300 ;;      Params:         0       4       0       0       0
  3301 ;;      Locals:         0       2       0       0       0
  3302 ;;      Temps:          0       0       0       0       0
  3303 ;;      Totals:         0       6       0       0       0
  3304 ;;Total ram usage:        6 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    2
  3307 ;; This function calls:
  3308 ;;		Nothing
  3309 ;; This function is called by:
  3310 ;;		_map
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           
  3315                           ;psect for function ___wmul
  3316  0C18                     ___wmul:	
  3317  0C18                     l2756:	
  3318                           ;incstack = 0
  3319                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3320                           
  3321  0C18  1283               	bcf	3,5	;RP0=0, select bank0
  3322  0C19  1303               	bcf	3,6	;RP1=0, select bank0
  3323  0C1A  01A4               	clrf	___wmul@product
  3324  0C1B  01A5               	clrf	___wmul@product+1
  3325  0C1C                     l2758:	
  3326  0C1C  1C20               	btfss	___wmul@multiplier,0
  3327  0C1D  2C1F               	goto	u2751
  3328  0C1E  2C20               	goto	u2750
  3329  0C1F                     u2751:	
  3330  0C1F  2C26               	goto	l440
  3331  0C20                     u2750:	
  3332  0C20                     l2760:	
  3333  0C20  0822               	movf	___wmul@multiplicand,w
  3334  0C21  07A4               	addwf	___wmul@product,f
  3335  0C22  1803               	skipnc
  3336  0C23  0AA5               	incf	___wmul@product+1,f
  3337  0C24  0823               	movf	___wmul@multiplicand+1,w
  3338  0C25  07A5               	addwf	___wmul@product+1,f
  3339  0C26                     l440:	
  3340  0C26  3001               	movlw	1
  3341  0C27                     u2765:	
  3342  0C27  1003               	clrc
  3343  0C28  0DA2               	rlf	___wmul@multiplicand,f
  3344  0C29  0DA3               	rlf	___wmul@multiplicand+1,f
  3345  0C2A  3EFF               	addlw	-1
  3346  0C2B  1D03               	skipz
  3347  0C2C  2C27               	goto	u2765
  3348  0C2D                     l2762:	
  3349  0C2D  3001               	movlw	1
  3350  0C2E                     u2775:	
  3351  0C2E  1003               	clrc
  3352  0C2F  0CA1               	rrf	___wmul@multiplier+1,f
  3353  0C30  0CA0               	rrf	___wmul@multiplier,f
  3354  0C31  3EFF               	addlw	-1
  3355  0C32  1D03               	skipz
  3356  0C33  2C2E               	goto	u2775
  3357  0C34                     l2764:	
  3358  0C34  0820               	movf	___wmul@multiplier,w
  3359  0C35  0421               	iorwf	___wmul@multiplier+1,w
  3360  0C36  1D03               	btfss	3,2
  3361  0C37  2C39               	goto	u2781
  3362  0C38  2C3A               	goto	u2780
  3363  0C39                     u2781:	
  3364  0C39  2C1C               	goto	l2758
  3365  0C3A                     u2780:	
  3366  0C3A                     l2766:	
  3367  0C3A  0825               	movf	___wmul@product+1,w
  3368  0C3B  00A1               	movwf	?___wmul+1
  3369  0C3C  0824               	movf	___wmul@product,w
  3370  0C3D  00A0               	movwf	?___wmul
  3371  0C3E                     l442:	
  3372  0C3E  0008               	return
  3373  0C3F                     __end_of___wmul:	
  3374                           
  3375                           	psect	text6
  3376  0B80                     __ptext6:	
  3377 ;; *************** function _init_ADC *****************
  3378 ;; Defined at:
  3379 ;;		line 349 in file "main.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, status,2
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3393 ;;      Params:         0       0       0       0       0
  3394 ;;      Locals:         0       0       0       0       0
  3395 ;;      Temps:          0       1       0       0       0
  3396 ;;      Totals:         0       1       0       0       0
  3397 ;;Total ram usage:        1 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:    2
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		_main
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           
  3408                           ;psect for function _init_ADC
  3409  0B80                     _init_ADC:	
  3410  0B80                     l2948:	
  3411                           ;incstack = 0
  3412                           ; Regs used in _init_ADC: [wreg+status,2]
  3413                           
  3414                           
  3415                           ;main.c: 351:     TRISA = 0xE3;
  3416  0B80  30E3               	movlw	227
  3417  0B81  1683               	bsf	3,5	;RP0=1, select bank1
  3418  0B82  1303               	bcf	3,6	;RP1=0, select bank1
  3419  0B83  0085               	movwf	5	;volatile
  3420  0B84                     l2950:	
  3421                           
  3422                           ;main.c: 352:     ADCON0 = 0x00;
  3423  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  3424  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  3425  0B86  019F               	clrf	31	;volatile
  3426  0B87                     l2952:	
  3427                           
  3428                           ;main.c: 353:     ADCON1 = 0x80;
  3429  0B87  3080               	movlw	128
  3430  0B88  1683               	bsf	3,5	;RP0=1, select bank1
  3431  0B89  1303               	bcf	3,6	;RP1=0, select bank1
  3432  0B8A  009F               	movwf	31	;volatile
  3433  0B8B                     l2954:	
  3434                           
  3435                           ;main.c: 354:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3436  0B8B  3019               	movlw	25
  3437  0B8C  1283               	bcf	3,5	;RP0=0, select bank0
  3438  0B8D  1303               	bcf	3,6	;RP1=0, select bank0
  3439  0B8E  00A0               	movwf	??_init_ADC
  3440  0B8F                     u3617:	
  3441  0B8F  0BA0               	decfsz	??_init_ADC,f
  3442  0B90  2B8F               	goto	u3617
  3443  0B91  2B92               	nop2
  3444  0B92                     l264:	
  3445  0B92  0008               	return
  3446  0B93                     __end_of_init_ADC:	
  3447                           
  3448                           	psect	text7
  3449  0667                     __ptext7:	
  3450 ;; *************** function _bitParita *****************
  3451 ;; Defined at:
  3452 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;  rx              1    wreg     PTR unsigned char 
  3455 ;;		 -> dataFromGateway(15), 
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;  rx              1   17[BANK0 ] PTR unsigned char 
  3458 ;;		 -> dataFromGateway(15), 
  3459 ;;  y               2   15[BANK0 ] int 
  3460 ;;  y               2   13[BANK0 ] int 
  3461 ;;  i               2   20[BANK0 ] int 
  3462 ;;  i               2   18[BANK0 ] int 
  3463 ;;  errorRow        1   12[BANK0 ] unsigned char 
  3464 ;;  error           1   11[BANK0 ] unsigned char 
  3465 ;;  errorColumn     1   10[BANK0 ] unsigned char 
  3466 ;;  sommaColumn     1    9[BANK0 ] unsigned char 
  3467 ;;  sommaRow        1    8[BANK0 ] unsigned char 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      void 
  3470 ;; Registers used:
  3471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3477 ;;      Params:         0       0       0       0       0
  3478 ;;      Locals:         0      14       0       0       0
  3479 ;;      Temps:          0       4       0       0       0
  3480 ;;      Totals:         0      18       0       0       0
  3481 ;;Total ram usage:       18 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    3
  3484 ;; This function calls:
  3485 ;;		_bitChange
  3486 ;; This function is called by:
  3487 ;;		_main
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           
  3492                           ;psect for function _bitParita
  3493  0667                     _bitParita:	
  3494                           
  3495                           ;incstack = 0
  3496                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3497                           ;bitParita@rx stored from wreg
  3498  0667  1283               	bcf	3,5	;RP0=0, select bank0
  3499  0668  1303               	bcf	3,6	;RP1=0, select bank0
  3500  0669  00B1               	movwf	bitParita@rx
  3501  066A                     l2896:	
  3502                           
  3503                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3504  066A  01AB               	clrf	bitParita@error
  3505                           
  3506                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3507  066B  01A8               	clrf	bitParita@sommaRow
  3508                           
  3509                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3510  066C  01AC               	clrf	bitParita@errorRow
  3511                           
  3512                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  3513  066D  01A9               	clrf	bitParita@sommaColumn
  3514                           
  3515                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  3516  066E  01AA               	clrf	bitParita@errorColumn
  3517                           
  3518                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  3519  066F  01B2               	clrf	bitParita@i
  3520  0670  01B3               	clrf	bitParita@i+1
  3521  0671                     l2902:	
  3522                           
  3523                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  3524  0671  1283               	bcf	3,5	;RP0=0, select bank0
  3525  0672  1303               	bcf	3,6	;RP1=0, select bank0
  3526  0673  01AD               	clrf	bitParita@y
  3527  0674  01AE               	clrf	bitParita@y+1
  3528  0675                     l2908:	
  3529                           
  3530                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  3531  0675  1283               	bcf	3,5	;RP0=0, select bank0
  3532  0676  1303               	bcf	3,6	;RP1=0, select bank0
  3533  0677  0832               	movf	bitParita@i,w
  3534  0678  0731               	addwf	bitParita@rx,w
  3535  0679  00A4               	movwf	??_bitParita
  3536  067A  0824               	movf	??_bitParita,w
  3537  067B  0084               	movwf	4
  3538  067C  1383               	bcf	3,7	;select IRP bank0
  3539  067D  0800               	movf	0,w
  3540  067E  00A5               	movwf	??_bitParita+1
  3541  067F  0A2D               	incf	bitParita@y,w
  3542  0680  2E83               	goto	u3084
  3543  0681                     u3085:	
  3544  0681  1003               	clrc
  3545  0682  0CA5               	rrf	??_bitParita+1,f
  3546  0683                     u3084:	
  3547  0683  3EFF               	addlw	-1
  3548  0684  1D03               	skipz
  3549  0685  2E81               	goto	u3085
  3550  0686  0825               	movf	??_bitParita+1,w
  3551  0687  3901               	andlw	1
  3552  0688  00A6               	movwf	??_bitParita+2
  3553  0689  0826               	movf	??_bitParita+2,w
  3554  068A  07A8               	addwf	bitParita@sommaRow,f
  3555  068B                     l2910:	
  3556                           
  3557                           ;./CustomLib/BitsFlow.h: 26:         }
  3558  068B  3001               	movlw	1
  3559  068C  07AD               	addwf	bitParita@y,f
  3560  068D  1803               	skipnc
  3561  068E  0AAE               	incf	bitParita@y+1,f
  3562  068F  3000               	movlw	0
  3563  0690  07AE               	addwf	bitParita@y+1,f
  3564  0691                     l2912:	
  3565  0691  082E               	movf	bitParita@y+1,w
  3566  0692  3A80               	xorlw	128
  3567  0693  00FF               	movwf	btemp+1
  3568  0694  3080               	movlw	128
  3569  0695  027F               	subwf	btemp+1,w
  3570  0696  1D03               	skipz
  3571  0697  2E9A               	goto	u3095
  3572  0698  3008               	movlw	8
  3573  0699  022D               	subwf	bitParita@y,w
  3574  069A                     u3095:	
  3575  069A  1C03               	skipc
  3576  069B  2E9D               	goto	u3091
  3577  069C  2E9E               	goto	u3090
  3578  069D                     u3091:	
  3579  069D  2E75               	goto	l2908
  3580  069E                     u3090:	
  3581  069E                     l105:	
  3582                           
  3583                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  3584  069E  1283               	bcf	3,5	;RP0=0, select bank0
  3585  069F  1303               	bcf	3,6	;RP1=0, select bank0
  3586  06A0  1C28               	btfss	bitParita@sommaRow,0
  3587  06A1  2EA3               	goto	u3101
  3588  06A2  2EA4               	goto	u3100
  3589  06A3                     u3101:	
  3590  06A3  2EAA               	goto	l106
  3591  06A4                     u3100:	
  3592  06A4                     l2914:	
  3593                           
  3594                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  3595  06A4  01AB               	clrf	bitParita@error
  3596  06A5  0AAB               	incf	bitParita@error,f
  3597  06A6                     l2916:	
  3598                           
  3599                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  3600  06A6  0832               	movf	bitParita@i,w
  3601  06A7  00A4               	movwf	??_bitParita
  3602  06A8  0824               	movf	??_bitParita,w
  3603  06A9  00AC               	movwf	bitParita@errorRow
  3604  06AA                     l106:	
  3605                           ;./CustomLib/BitsFlow.h: 31:         }
  3606                           
  3607                           
  3608                           ;./CustomLib/BitsFlow.h: 32:     }
  3609  06AA  3001               	movlw	1
  3610  06AB  07B2               	addwf	bitParita@i,f
  3611  06AC  1803               	skipnc
  3612  06AD  0AB3               	incf	bitParita@i+1,f
  3613  06AE  3000               	movlw	0
  3614  06AF  07B3               	addwf	bitParita@i+1,f
  3615  06B0                     l2918:	
  3616  06B0  0833               	movf	bitParita@i+1,w
  3617  06B1  3A80               	xorlw	128
  3618  06B2  00FF               	movwf	btemp+1
  3619  06B3  3080               	movlw	128
  3620  06B4  027F               	subwf	btemp+1,w
  3621  06B5  1D03               	skipz
  3622  06B6  2EB9               	goto	u3115
  3623  06B7  3005               	movlw	5
  3624  06B8  0232               	subwf	bitParita@i,w
  3625  06B9                     u3115:	
  3626  06B9  1C03               	skipc
  3627  06BA  2EBC               	goto	u3111
  3628  06BB  2EBD               	goto	u3110
  3629  06BC                     u3111:	
  3630  06BC  2E71               	goto	l2902
  3631  06BD                     u3110:	
  3632  06BD                     l2920:	
  3633                           
  3634                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  3635  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  3636  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  3637  06BF  01B4               	clrf	bitParita@i_330
  3638  06C0  01B5               	clrf	bitParita@i_330+1
  3639  06C1                     l2926:	
  3640                           
  3641                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  3642  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  3643  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  3644  06C3  01AF               	clrf	bitParita@y_331
  3645  06C4  01B0               	clrf	bitParita@y_331+1
  3646  06C5                     l2932:	
  3647                           
  3648                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  3649  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  3650  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  3651  06C7  082F               	movf	bitParita@y_331,w
  3652  06C8  0731               	addwf	bitParita@rx,w
  3653  06C9  00A4               	movwf	??_bitParita
  3654  06CA  0824               	movf	??_bitParita,w
  3655  06CB  0084               	movwf	4
  3656  06CC  1383               	bcf	3,7	;select IRP bank0
  3657  06CD  0800               	movf	0,w
  3658  06CE  00A5               	movwf	??_bitParita+1
  3659  06CF  0A34               	incf	bitParita@i_330,w
  3660  06D0  2ED3               	goto	u3124
  3661  06D1                     u3125:	
  3662  06D1  1003               	clrc
  3663  06D2  0CA5               	rrf	??_bitParita+1,f
  3664  06D3                     u3124:	
  3665  06D3  3EFF               	addlw	-1
  3666  06D4  1D03               	skipz
  3667  06D5  2ED1               	goto	u3125
  3668  06D6  0825               	movf	??_bitParita+1,w
  3669  06D7  3901               	andlw	1
  3670  06D8  00A6               	movwf	??_bitParita+2
  3671  06D9  0826               	movf	??_bitParita+2,w
  3672  06DA  07A9               	addwf	bitParita@sommaColumn,f
  3673  06DB                     l2934:	
  3674                           
  3675                           ;./CustomLib/BitsFlow.h: 39:         }
  3676  06DB  3001               	movlw	1
  3677  06DC  07AF               	addwf	bitParita@y_331,f
  3678  06DD  1803               	skipnc
  3679  06DE  0AB0               	incf	bitParita@y_331+1,f
  3680  06DF  3000               	movlw	0
  3681  06E0  07B0               	addwf	bitParita@y_331+1,f
  3682  06E1                     l2936:	
  3683  06E1  0830               	movf	bitParita@y_331+1,w
  3684  06E2  3A80               	xorlw	128
  3685  06E3  00FF               	movwf	btemp+1
  3686  06E4  3080               	movlw	128
  3687  06E5  027F               	subwf	btemp+1,w
  3688  06E6  1D03               	skipz
  3689  06E7  2EEA               	goto	u3135
  3690  06E8  3004               	movlw	4
  3691  06E9  022F               	subwf	bitParita@y_331,w
  3692  06EA                     u3135:	
  3693  06EA  1C03               	skipc
  3694  06EB  2EED               	goto	u3131
  3695  06EC  2EEE               	goto	u3130
  3696  06ED                     u3131:	
  3697  06ED  2EC5               	goto	l2932
  3698  06EE                     u3130:	
  3699  06EE                     l110:	
  3700                           
  3701                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  3702  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  3703  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  3704  06F0  1C29               	btfss	bitParita@sommaColumn,0
  3705  06F1  2EF3               	goto	u3141
  3706  06F2  2EF4               	goto	u3140
  3707  06F3                     u3141:	
  3708  06F3  2EFA               	goto	l111
  3709  06F4                     u3140:	
  3710  06F4                     l2938:	
  3711                           
  3712                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  3713  06F4  01AB               	clrf	bitParita@error
  3714  06F5  0AAB               	incf	bitParita@error,f
  3715  06F6                     l2940:	
  3716                           
  3717                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  3718  06F6  0834               	movf	bitParita@i_330,w
  3719  06F7  00A4               	movwf	??_bitParita
  3720  06F8  0824               	movf	??_bitParita,w
  3721  06F9  00AA               	movwf	bitParita@errorColumn
  3722  06FA                     l111:	
  3723                           ;./CustomLib/BitsFlow.h: 44:         }
  3724                           
  3725                           
  3726                           ;./CustomLib/BitsFlow.h: 45:     }
  3727  06FA  3001               	movlw	1
  3728  06FB  07B4               	addwf	bitParita@i_330,f
  3729  06FC  1803               	skipnc
  3730  06FD  0AB5               	incf	bitParita@i_330+1,f
  3731  06FE  3000               	movlw	0
  3732  06FF  07B5               	addwf	bitParita@i_330+1,f
  3733  0700                     l2942:	
  3734  0700  0835               	movf	bitParita@i_330+1,w
  3735  0701  3A80               	xorlw	128
  3736  0702  00FF               	movwf	btemp+1
  3737  0703  3080               	movlw	128
  3738  0704  027F               	subwf	btemp+1,w
  3739  0705  1D03               	skipz
  3740  0706  2F09               	goto	u3155
  3741  0707  3008               	movlw	8
  3742  0708  0234               	subwf	bitParita@i_330,w
  3743  0709                     u3155:	
  3744  0709  1C03               	skipc
  3745  070A  2F0C               	goto	u3151
  3746  070B  2F0D               	goto	u3150
  3747  070C                     u3151:	
  3748  070C  2EC1               	goto	l2926
  3749  070D                     u3150:	
  3750  070D                     l2944:	
  3751                           
  3752                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  3753  070D  1283               	bcf	3,5	;RP0=0, select bank0
  3754  070E  1303               	bcf	3,6	;RP1=0, select bank0
  3755  070F  082B               	movf	bitParita@error,w
  3756  0710  1903               	btfsc	3,2
  3757  0711  2F13               	goto	u3161
  3758  0712  2F14               	goto	u3160
  3759  0713                     u3161:	
  3760  0713  2F2F               	goto	l113
  3761  0714                     u3160:	
  3762  0714                     l2946:	
  3763                           
  3764                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  3765  0714  082A               	movf	bitParita@errorColumn,w
  3766  0715  00A4               	movwf	??_bitParita
  3767  0716  0824               	movf	??_bitParita,w
  3768  0717  00A0               	movwf	bitChange@n
  3769  0718  082C               	movf	bitParita@errorRow,w
  3770  0719  0731               	addwf	bitParita@rx,w
  3771  071A  00A5               	movwf	??_bitParita+1
  3772  071B  0825               	movf	??_bitParita+1,w
  3773  071C  0084               	movwf	4
  3774  071D  1383               	bcf	3,7	;select IRP bank0
  3775  071E  0800               	movf	0,w
  3776  071F  120A  158A  243F  120A  118A  	fcall	_bitChange
  3777  0724  1283               	bcf	3,5	;RP0=0, select bank0
  3778  0725  1303               	bcf	3,6	;RP1=0, select bank0
  3779  0726  00A6               	movwf	??_bitParita+2
  3780  0727  082C               	movf	bitParita@errorRow,w
  3781  0728  0731               	addwf	bitParita@rx,w
  3782  0729  00A7               	movwf	??_bitParita+3
  3783  072A  0827               	movf	??_bitParita+3,w
  3784  072B  0084               	movwf	4
  3785  072C  0826               	movf	??_bitParita+2,w
  3786  072D  1383               	bcf	3,7	;select IRP bank0
  3787  072E  0080               	movwf	0
  3788  072F                     l113:	
  3789  072F  0008               	return
  3790  0730                     __end_of_bitParita:	
  3791                           
  3792                           	psect	text8
  3793  0C3F                     __ptext8:	
  3794 ;; *************** function _bitChange *****************
  3795 ;; Defined at:
  3796 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  dato            1    wreg     unsigned char 
  3799 ;;  n               1    0[BANK0 ] unsigned char 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  dato            1    3[BANK0 ] unsigned char 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      unsigned char 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3811 ;;      Params:         0       1       0       0       0
  3812 ;;      Locals:         0       1       0       0       0
  3813 ;;      Temps:          0       2       0       0       0
  3814 ;;      Totals:         0       4       0       0       0
  3815 ;;Total ram usage:        4 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    2
  3818 ;; This function calls:
  3819 ;;		Nothing
  3820 ;; This function is called by:
  3821 ;;		_bitParita
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           
  3826                           ;psect for function _bitChange
  3827  0C3F                     _bitChange:	
  3828                           
  3829                           ;incstack = 0
  3830                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  3831                           ;bitChange@dato stored from wreg
  3832  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  3833  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  3834  0C41  00A3               	movwf	bitChange@dato
  3835  0C42                     l2672:	
  3836                           
  3837                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  3838  0C42  3001               	movlw	1
  3839  0C43  00A1               	movwf	??_bitChange
  3840  0C44  0A20               	incf	bitChange@n,w
  3841  0C45  2C48               	goto	u2604
  3842  0C46                     u2605:	
  3843  0C46  1003               	clrc
  3844  0C47  0DA1               	rlf	??_bitChange,f
  3845  0C48                     u2604:	
  3846  0C48  3EFF               	addlw	-1
  3847  0C49  1D03               	skipz
  3848  0C4A  2C46               	goto	u2605
  3849  0C4B  0821               	movf	??_bitChange,w
  3850  0C4C  0523               	andwf	bitChange@dato,w
  3851  0C4D  1903               	btfsc	3,2
  3852  0C4E  2C50               	goto	u2611
  3853  0C4F  2C51               	goto	u2610
  3854  0C50                     u2611:	
  3855  0C50  2C60               	goto	l2680
  3856  0C51                     u2610:	
  3857  0C51                     l2674:	
  3858                           
  3859                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  3860  0C51  3001               	movlw	1
  3861  0C52  00A1               	movwf	??_bitChange
  3862  0C53  0A20               	incf	bitChange@n,w
  3863  0C54  2C57               	goto	u2624
  3864  0C55                     u2625:	
  3865  0C55  1003               	clrc
  3866  0C56  0DA1               	rlf	??_bitChange,f
  3867  0C57                     u2624:	
  3868  0C57  3EFF               	addlw	-1
  3869  0C58  1D03               	skipz
  3870  0C59  2C55               	goto	u2625
  3871  0C5A  0821               	movf	??_bitChange,w
  3872  0C5B  00A2               	movwf	??_bitChange+1
  3873  0C5C  0822               	movf	??_bitChange+1,w
  3874  0C5D  04A3               	iorwf	bitChange@dato,f
  3875  0C5E  0823               	movf	bitChange@dato,w
  3876  0C5F  2C6F               	goto	l98
  3877  0C60                     l2680:	
  3878                           
  3879                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  3880  0C60  3001               	movlw	1
  3881  0C61  00A1               	movwf	??_bitChange
  3882  0C62  0A20               	incf	bitChange@n,w
  3883  0C63  2C66               	goto	u2634
  3884  0C64                     u2635:	
  3885  0C64  1003               	clrc
  3886  0C65  0DA1               	rlf	??_bitChange,f
  3887  0C66                     u2634:	
  3888  0C66  3EFF               	addlw	-1
  3889  0C67  1D03               	skipz
  3890  0C68  2C64               	goto	u2635
  3891  0C69  0821               	movf	??_bitChange,w
  3892  0C6A  3AFF               	xorlw	255
  3893  0C6B  00A2               	movwf	??_bitChange+1
  3894  0C6C  0822               	movf	??_bitChange+1,w
  3895  0C6D  05A3               	andwf	bitChange@dato,f
  3896  0C6E  0823               	movf	bitChange@dato,w
  3897  0C6F                     l98:	
  3898  0C6F  0008               	return
  3899  0C70                     __end_of_bitChange:	
  3900                           
  3901                           	psect	text9
  3902  0BBB                     __ptext9:	
  3903 ;; *************** function ___bmul *****************
  3904 ;; Defined at:
  3905 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;  multiplier      1    wreg     unsigned char 
  3908 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3911 ;;  product         1    2[BANK0 ] unsigned char 
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  1    wreg      unsigned char 
  3914 ;; Registers used:
  3915 ;;		wreg, status,2, status,0
  3916 ;; Tracked objects:
  3917 ;;		On entry : 0/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3921 ;;      Params:         0       1       0       0       0
  3922 ;;      Locals:         0       2       0       0       0
  3923 ;;      Temps:          0       1       0       0       0
  3924 ;;      Totals:         0       4       0       0       0
  3925 ;;Total ram usage:        4 bytes
  3926 ;; Hardware stack levels used:    1
  3927 ;; Hardware stack levels required when called:    2
  3928 ;; This function calls:
  3929 ;;		Nothing
  3930 ;; This function is called by:
  3931 ;;		_main
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           
  3936                           ;psect for function ___bmul
  3937  0BBB                     ___bmul:	
  3938                           
  3939                           ;incstack = 0
  3940                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3941                           ;___bmul@multiplier stored from wreg
  3942  0BBB  1283               	bcf	3,5	;RP0=0, select bank0
  3943  0BBC  1303               	bcf	3,6	;RP1=0, select bank0
  3944  0BBD  00A3               	movwf	___bmul@multiplier
  3945  0BBE                     l3054:	
  3946  0BBE  01A2               	clrf	___bmul@product
  3947  0BBF                     l3056:	
  3948  0BBF  1C23               	btfss	___bmul@multiplier,0
  3949  0BC0  2BC2               	goto	u3241
  3950  0BC1  2BC3               	goto	u3240
  3951  0BC2                     u3241:	
  3952  0BC2  2BC7               	goto	l3060
  3953  0BC3                     u3240:	
  3954  0BC3                     l3058:	
  3955  0BC3  0820               	movf	___bmul@multiplicand,w
  3956  0BC4  00A1               	movwf	??___bmul
  3957  0BC5  0821               	movf	??___bmul,w
  3958  0BC6  07A2               	addwf	___bmul@product,f
  3959  0BC7                     l3060:	
  3960  0BC7  1003               	clrc
  3961  0BC8  0DA0               	rlf	___bmul@multiplicand,f
  3962  0BC9                     l3062:	
  3963  0BC9  1003               	clrc
  3964  0BCA  0CA3               	rrf	___bmul@multiplier,f
  3965  0BCB  0823               	movf	___bmul@multiplier,w
  3966  0BCC  1D03               	btfss	3,2
  3967  0BCD  2BCF               	goto	u3251
  3968  0BCE  2BD0               	goto	u3250
  3969  0BCF                     u3251:	
  3970  0BCF  2BBF               	goto	l3056
  3971  0BD0                     u3250:	
  3972  0BD0                     l3064:	
  3973  0BD0  0822               	movf	___bmul@product,w
  3974  0BD1                     l466:	
  3975  0BD1  0008               	return
  3976  0BD2                     __end_of___bmul:	
  3977                           
  3978                           	psect	text10
  3979  0CD6                     __ptext10:	
  3980 ;; *************** function _UART_Init *****************
  3981 ;; Defined at:
  3982 ;;		line 368 in file "main.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;  baudrate        2   15[BANK0 ] int 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;		None
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  1    wreg      void 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0, pclath, cstack
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3996 ;;      Params:         0       2       0       0       0
  3997 ;;      Locals:         0       0       0       0       0
  3998 ;;      Temps:          0       4       0       0       0
  3999 ;;      Totals:         0       6       0       0       0
  4000 ;;Total ram usage:        6 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; Hardware stack levels required when called:    3
  4003 ;; This function calls:
  4004 ;;		___aldiv
  4005 ;; This function is called by:
  4006 ;;		_main
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           
  4011                           ;psect for function _UART_Init
  4012  0CD6                     _UART_Init:	
  4013  0CD6                     l2956:	
  4014                           ;incstack = 0
  4015                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4016                           
  4017                           
  4018                           ;main.c: 368: void UART_Init(int baudrate);main.c: 369: {;main.c: 370:     TRISCbits.TRI
      +                          SC6 = 0;
  4019  0CD6  1683               	bsf	3,5	;RP0=1, select bank1
  4020  0CD7  1303               	bcf	3,6	;RP1=0, select bank1
  4021  0CD8  1307               	bcf	7,6	;volatile
  4022                           
  4023                           ;main.c: 371:     TXSTAbits.TXEN = 1;
  4024  0CD9  1698               	bsf	24,5	;volatile
  4025                           
  4026                           ;main.c: 372:     RCSTAbits.SPEN = 1;
  4027  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  4028  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  4029  0CDC  1798               	bsf	24,7	;volatile
  4030                           
  4031                           ;main.c: 373:     RCSTAbits.CREN = 1;
  4032  0CDD  1618               	bsf	24,4	;volatile
  4033  0CDE                     l2958:	
  4034                           
  4035                           ;main.c: 374:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4036  0CDE  082F               	movf	UART_Init@baudrate,w
  4037  0CDF  00B1               	movwf	??_UART_Init
  4038  0CE0  0830               	movf	UART_Init@baudrate+1,w
  4039  0CE1  00B2               	movwf	??_UART_Init+1
  4040  0CE2  3000               	movlw	0
  4041  0CE3  1BB2               	btfsc	??_UART_Init+1,7
  4042  0CE4  30FF               	movlw	255
  4043  0CE5  00B3               	movwf	??_UART_Init+2
  4044  0CE6  00B4               	movwf	??_UART_Init+3
  4045  0CE7  3006               	movlw	6
  4046  0CE8                     u3175:	
  4047  0CE8  1003               	clrc
  4048  0CE9  0DB1               	rlf	??_UART_Init,f
  4049  0CEA  0DB2               	rlf	??_UART_Init+1,f
  4050  0CEB  0DB3               	rlf	??_UART_Init+2,f
  4051  0CEC  0DB4               	rlf	??_UART_Init+3,f
  4052  0CED                     u3170:	
  4053  0CED  3EFF               	addlw	-1
  4054  0CEE  1D03               	skipz
  4055  0CEF  2CE8               	goto	u3175
  4056  0CF0  0834               	movf	??_UART_Init+3,w
  4057  0CF1  00A3               	movwf	___aldiv@divisor+3
  4058  0CF2  0833               	movf	??_UART_Init+2,w
  4059  0CF3  00A2               	movwf	___aldiv@divisor+2
  4060  0CF4  0832               	movf	??_UART_Init+1,w
  4061  0CF5  00A1               	movwf	___aldiv@divisor+1
  4062  0CF6  0831               	movf	??_UART_Init,w
  4063  0CF7  00A0               	movwf	___aldiv@divisor
  4064  0CF8  3001               	movlw	1
  4065  0CF9  00A7               	movwf	___aldiv@dividend+3
  4066  0CFA  30E8               	movlw	232
  4067  0CFB  00A6               	movwf	___aldiv@dividend+2
  4068  0CFC  3048               	movlw	72
  4069  0CFD  00A5               	movwf	___aldiv@dividend+1
  4070  0CFE  3000               	movlw	0
  4071  0CFF  00A4               	movwf	___aldiv@dividend
  4072  0D00  120A  158A  2763  120A  158A  	fcall	___aldiv
  4073  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  4074  0D06  1303               	bcf	3,6	;RP1=0, select bank0
  4075  0D07  0820               	movf	?___aldiv,w
  4076  0D08  3EFF               	addlw	255
  4077  0D09  1683               	bsf	3,5	;RP0=1, select bank1
  4078  0D0A  1303               	bcf	3,6	;RP1=0, select bank1
  4079  0D0B  0099               	movwf	25	;volatile
  4080  0D0C                     l2960:	
  4081                           
  4082                           ;main.c: 375:     INTCONbits.GIE = 1;
  4083  0D0C  178B               	bsf	11,7	;volatile
  4084  0D0D                     l2962:	
  4085                           
  4086                           ;main.c: 376:     INTCONbits.PEIE = 1;
  4087  0D0D  170B               	bsf	11,6	;volatile
  4088  0D0E                     l2964:	
  4089                           
  4090                           ;main.c: 377:     PIE1bits.RCIE = 1;
  4091  0D0E  168C               	bsf	12,5	;volatile
  4092  0D0F                     l273:	
  4093  0D0F  0008               	return
  4094  0D10                     __end_of_UART_Init:	
  4095                           
  4096                           	psect	text11
  4097  0F63                     __ptext11:	
  4098 ;; *************** function ___aldiv *****************
  4099 ;; Defined at:
  4100 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  divisor         4    0[BANK0 ] long 
  4103 ;;  dividend        4    4[BANK0 ] long 
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  quotient        4   11[BANK0 ] long 
  4106 ;;  sign            1   10[BANK0 ] unsigned char 
  4107 ;;  counter         1    9[BANK0 ] unsigned char 
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  4    0[BANK0 ] long 
  4110 ;; Registers used:
  4111 ;;		wreg, status,2, status,0
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4117 ;;      Params:         0       8       0       0       0
  4118 ;;      Locals:         0       6       0       0       0
  4119 ;;      Temps:          0       1       0       0       0
  4120 ;;      Totals:         0      15       0       0       0
  4121 ;;Total ram usage:       15 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    2
  4124 ;; This function calls:
  4125 ;;		Nothing
  4126 ;; This function is called by:
  4127 ;;		_UART_Init
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           
  4132                           ;psect for function ___aldiv
  4133  0F63                     ___aldiv:	
  4134  0F63                     l2770:	
  4135                           ;incstack = 0
  4136                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4137                           
  4138  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  4139  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  4140  0F65  01AA               	clrf	___aldiv@sign
  4141  0F66                     l2772:	
  4142  0F66  1FA3               	btfss	___aldiv@divisor+3,7
  4143  0F67  2F69               	goto	u2791
  4144  0F68  2F6A               	goto	u2790
  4145  0F69                     u2791:	
  4146  0F69  2F77               	goto	l505
  4147  0F6A                     u2790:	
  4148  0F6A                     l2774:	
  4149  0F6A  09A0               	comf	___aldiv@divisor,f
  4150  0F6B  09A1               	comf	___aldiv@divisor+1,f
  4151  0F6C  09A2               	comf	___aldiv@divisor+2,f
  4152  0F6D  09A3               	comf	___aldiv@divisor+3,f
  4153  0F6E  0AA0               	incf	___aldiv@divisor,f
  4154  0F6F  1903               	skipnz
  4155  0F70  0AA1               	incf	___aldiv@divisor+1,f
  4156  0F71  1903               	skipnz
  4157  0F72  0AA2               	incf	___aldiv@divisor+2,f
  4158  0F73  1903               	skipnz
  4159  0F74  0AA3               	incf	___aldiv@divisor+3,f
  4160  0F75  01AA               	clrf	___aldiv@sign
  4161  0F76  0AAA               	incf	___aldiv@sign,f
  4162  0F77                     l505:	
  4163  0F77  1FA7               	btfss	___aldiv@dividend+3,7
  4164  0F78  2F7A               	goto	u2801
  4165  0F79  2F7B               	goto	u2800
  4166  0F7A                     u2801:	
  4167  0F7A  2F8A               	goto	l2780
  4168  0F7B                     u2800:	
  4169  0F7B                     l2776:	
  4170  0F7B  09A4               	comf	___aldiv@dividend,f
  4171  0F7C  09A5               	comf	___aldiv@dividend+1,f
  4172  0F7D  09A6               	comf	___aldiv@dividend+2,f
  4173  0F7E  09A7               	comf	___aldiv@dividend+3,f
  4174  0F7F  0AA4               	incf	___aldiv@dividend,f
  4175  0F80  1903               	skipnz
  4176  0F81  0AA5               	incf	___aldiv@dividend+1,f
  4177  0F82  1903               	skipnz
  4178  0F83  0AA6               	incf	___aldiv@dividend+2,f
  4179  0F84  1903               	skipnz
  4180  0F85  0AA7               	incf	___aldiv@dividend+3,f
  4181  0F86                     l2778:	
  4182  0F86  3001               	movlw	1
  4183  0F87  00A8               	movwf	??___aldiv
  4184  0F88  0828               	movf	??___aldiv,w
  4185  0F89  06AA               	xorwf	___aldiv@sign,f
  4186  0F8A                     l2780:	
  4187  0F8A  3000               	movlw	0
  4188  0F8B  00AE               	movwf	___aldiv@quotient+3
  4189  0F8C  3000               	movlw	0
  4190  0F8D  00AD               	movwf	___aldiv@quotient+2
  4191  0F8E  3000               	movlw	0
  4192  0F8F  00AC               	movwf	___aldiv@quotient+1
  4193  0F90  3000               	movlw	0
  4194  0F91  00AB               	movwf	___aldiv@quotient
  4195  0F92                     l2782:	
  4196  0F92  0823               	movf	___aldiv@divisor+3,w
  4197  0F93  0422               	iorwf	___aldiv@divisor+2,w
  4198  0F94  0421               	iorwf	___aldiv@divisor+1,w
  4199  0F95  0420               	iorwf	___aldiv@divisor,w
  4200  0F96  1903               	skipnz
  4201  0F97  2F99               	goto	u2811
  4202  0F98  2F9A               	goto	u2810
  4203  0F99                     u2811:	
  4204  0F99  2FE7               	goto	l2802
  4205  0F9A                     u2810:	
  4206  0F9A                     l2784:	
  4207  0F9A  01A9               	clrf	___aldiv@counter
  4208  0F9B  0AA9               	incf	___aldiv@counter,f
  4209  0F9C  2FAA               	goto	l2788
  4210  0F9D                     l2786:	
  4211  0F9D  3001               	movlw	1
  4212  0F9E  00A8               	movwf	??___aldiv
  4213  0F9F                     u2825:	
  4214  0F9F  1003               	clrc
  4215  0FA0  0DA0               	rlf	___aldiv@divisor,f
  4216  0FA1  0DA1               	rlf	___aldiv@divisor+1,f
  4217  0FA2  0DA2               	rlf	___aldiv@divisor+2,f
  4218  0FA3  0DA3               	rlf	___aldiv@divisor+3,f
  4219  0FA4  0BA8               	decfsz	??___aldiv,f
  4220  0FA5  2F9F               	goto	u2825
  4221  0FA6  3001               	movlw	1
  4222  0FA7  00A8               	movwf	??___aldiv
  4223  0FA8  0828               	movf	??___aldiv,w
  4224  0FA9  07A9               	addwf	___aldiv@counter,f
  4225  0FAA                     l2788:	
  4226  0FAA  1FA3               	btfss	___aldiv@divisor+3,7
  4227  0FAB  2FAD               	goto	u2831
  4228  0FAC  2FAE               	goto	u2830
  4229  0FAD                     u2831:	
  4230  0FAD  2F9D               	goto	l2786
  4231  0FAE                     u2830:	
  4232  0FAE                     l2790:	
  4233  0FAE  3001               	movlw	1
  4234  0FAF  00A8               	movwf	??___aldiv
  4235  0FB0                     u2845:	
  4236  0FB0  1003               	clrc
  4237  0FB1  0DAB               	rlf	___aldiv@quotient,f
  4238  0FB2  0DAC               	rlf	___aldiv@quotient+1,f
  4239  0FB3  0DAD               	rlf	___aldiv@quotient+2,f
  4240  0FB4  0DAE               	rlf	___aldiv@quotient+3,f
  4241  0FB5  0BA8               	decfsz	??___aldiv,f
  4242  0FB6  2FB0               	goto	u2845
  4243  0FB7                     l2792:	
  4244  0FB7  0823               	movf	___aldiv@divisor+3,w
  4245  0FB8  0227               	subwf	___aldiv@dividend+3,w
  4246  0FB9  1D03               	skipz
  4247  0FBA  2FC5               	goto	u2855
  4248  0FBB  0822               	movf	___aldiv@divisor+2,w
  4249  0FBC  0226               	subwf	___aldiv@dividend+2,w
  4250  0FBD  1D03               	skipz
  4251  0FBE  2FC5               	goto	u2855
  4252  0FBF  0821               	movf	___aldiv@divisor+1,w
  4253  0FC0  0225               	subwf	___aldiv@dividend+1,w
  4254  0FC1  1D03               	skipz
  4255  0FC2  2FC5               	goto	u2855
  4256  0FC3  0820               	movf	___aldiv@divisor,w
  4257  0FC4  0224               	subwf	___aldiv@dividend,w
  4258  0FC5                     u2855:	
  4259  0FC5  1C03               	skipc
  4260  0FC6  2FC8               	goto	u2851
  4261  0FC7  2FC9               	goto	u2850
  4262  0FC8                     u2851:	
  4263  0FC8  2FD8               	goto	l2798
  4264  0FC9                     u2850:	
  4265  0FC9                     l2794:	
  4266  0FC9  0820               	movf	___aldiv@divisor,w
  4267  0FCA  02A4               	subwf	___aldiv@dividend,f
  4268  0FCB  0821               	movf	___aldiv@divisor+1,w
  4269  0FCC  1C03               	skipc
  4270  0FCD  0F21               	incfsz	___aldiv@divisor+1,w
  4271  0FCE  02A5               	subwf	___aldiv@dividend+1,f
  4272  0FCF  0822               	movf	___aldiv@divisor+2,w
  4273  0FD0  1C03               	skipc
  4274  0FD1  0F22               	incfsz	___aldiv@divisor+2,w
  4275  0FD2  02A6               	subwf	___aldiv@dividend+2,f
  4276  0FD3  0823               	movf	___aldiv@divisor+3,w
  4277  0FD4  1C03               	skipc
  4278  0FD5  0F23               	incfsz	___aldiv@divisor+3,w
  4279  0FD6  02A7               	subwf	___aldiv@dividend+3,f
  4280  0FD7                     l2796:	
  4281  0FD7  142B               	bsf	___aldiv@quotient,0
  4282  0FD8                     l2798:	
  4283  0FD8  3001               	movlw	1
  4284  0FD9                     u2865:	
  4285  0FD9  1003               	clrc
  4286  0FDA  0CA3               	rrf	___aldiv@divisor+3,f
  4287  0FDB  0CA2               	rrf	___aldiv@divisor+2,f
  4288  0FDC  0CA1               	rrf	___aldiv@divisor+1,f
  4289  0FDD  0CA0               	rrf	___aldiv@divisor,f
  4290  0FDE  3EFF               	addlw	-1
  4291  0FDF  1D03               	skipz
  4292  0FE0  2FD9               	goto	u2865
  4293  0FE1                     l2800:	
  4294  0FE1  3001               	movlw	1
  4295  0FE2  02A9               	subwf	___aldiv@counter,f
  4296  0FE3  1D03               	btfss	3,2
  4297  0FE4  2FE6               	goto	u2871
  4298  0FE5  2FE7               	goto	u2870
  4299  0FE6                     u2871:	
  4300  0FE6  2FAE               	goto	l2790
  4301  0FE7                     u2870:	
  4302  0FE7                     l2802:	
  4303  0FE7  082A               	movf	___aldiv@sign,w
  4304  0FE8  1903               	btfsc	3,2
  4305  0FE9  2FEB               	goto	u2881
  4306  0FEA  2FEC               	goto	u2880
  4307  0FEB                     u2881:	
  4308  0FEB  2FF7               	goto	l2806
  4309  0FEC                     u2880:	
  4310  0FEC                     l2804:	
  4311  0FEC  09AB               	comf	___aldiv@quotient,f
  4312  0FED  09AC               	comf	___aldiv@quotient+1,f
  4313  0FEE  09AD               	comf	___aldiv@quotient+2,f
  4314  0FEF  09AE               	comf	___aldiv@quotient+3,f
  4315  0FF0  0AAB               	incf	___aldiv@quotient,f
  4316  0FF1  1903               	skipnz
  4317  0FF2  0AAC               	incf	___aldiv@quotient+1,f
  4318  0FF3  1903               	skipnz
  4319  0FF4  0AAD               	incf	___aldiv@quotient+2,f
  4320  0FF5  1903               	skipnz
  4321  0FF6  0AAE               	incf	___aldiv@quotient+3,f
  4322  0FF7                     l2806:	
  4323  0FF7  082E               	movf	___aldiv@quotient+3,w
  4324  0FF8  00A3               	movwf	?___aldiv+3
  4325  0FF9  082D               	movf	___aldiv@quotient+2,w
  4326  0FFA  00A2               	movwf	?___aldiv+2
  4327  0FFB  082C               	movf	___aldiv@quotient+1,w
  4328  0FFC  00A1               	movwf	?___aldiv+1
  4329  0FFD  082B               	movf	___aldiv@quotient,w
  4330  0FFE  00A0               	movwf	?___aldiv
  4331  0FFF                     l515:	
  4332  0FFF  0008               	return
  4333  1000                     __end_of___aldiv:	
  4334                           
  4335                           	psect	text12
  4336  0BA6                     __ptext12:	
  4337 ;; *************** function _SetDisplay *****************
  4338 ;; Defined at:
  4339 ;;		line 442 in file "main.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  d1              1    wreg     unsigned char 
  4342 ;;  d2              1    0[BANK0 ] unsigned char 
  4343 ;;  d3              1    1[BANK0 ] unsigned char 
  4344 ;;  value           1    2[BANK0 ] unsigned char 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  d1              1    3[BANK0 ] unsigned char 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      void 
  4349 ;; Registers used:
  4350 ;;		wreg, status,0
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4356 ;;      Params:         0       3       0       0       0
  4357 ;;      Locals:         0       1       0       0       0
  4358 ;;      Temps:          0       0       0       0       0
  4359 ;;      Totals:         0       4       0       0       0
  4360 ;;Total ram usage:        4 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    2
  4363 ;; This function calls:
  4364 ;;		Nothing
  4365 ;; This function is called by:
  4366 ;;		_main
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           
  4371                           ;psect for function _SetDisplay
  4372  0BA6                     _SetDisplay:	
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _SetDisplay: [wreg+status,0]
  4376                           ;SetDisplay@d1 stored from wreg
  4377  0BA6  1283               	bcf	3,5	;RP0=0, select bank0
  4378  0BA7  1303               	bcf	3,6	;RP1=0, select bank0
  4379  0BA8  00A3               	movwf	SetDisplay@d1
  4380  0BA9                     l3050:	
  4381                           
  4382                           ;main.c: 442: void SetDisplay(char d1, char d2, char d3, char value);main.c: 443: {;main
      +                          .c: 444:     PORTAbits.RA2 = d1;
  4383  0BA9  0C23               	rrf	SetDisplay@d1,w
  4384  0BAA  1C03               	skipc
  4385  0BAB  1105               	bcf	5,2	;volatile
  4386  0BAC  1803               	skipnc
  4387  0BAD  1505               	bsf	5,2	;volatile
  4388                           
  4389                           ;main.c: 445:     PORTAbits.RA3 = d2;
  4390  0BAE  0C20               	rrf	SetDisplay@d2,w
  4391  0BAF  1C03               	skipc
  4392  0BB0  1185               	bcf	5,3	;volatile
  4393  0BB1  1803               	skipnc
  4394  0BB2  1585               	bsf	5,3	;volatile
  4395                           
  4396                           ;main.c: 446:     PORTAbits.RA4 = d3;
  4397  0BB3  0C21               	rrf	SetDisplay@d3,w
  4398  0BB4  1C03               	skipc
  4399  0BB5  1205               	bcf	5,4	;volatile
  4400  0BB6  1803               	skipnc
  4401  0BB7  1605               	bsf	5,4	;volatile
  4402  0BB8                     l3052:	
  4403                           
  4404                           ;main.c: 447:     PORTD = value;
  4405  0BB8  0822               	movf	SetDisplay@value,w
  4406  0BB9  0088               	movwf	8	;volatile
  4407  0BBA                     l305:	
  4408  0BBA  0008               	return
  4409  0BBB                     __end_of_SetDisplay:	
  4410                           
  4411                           	psect	text13
  4412  0ED9                     __ptext13:	
  4413 ;; *************** function _SetDefaultTimers *****************
  4414 ;; Defined at:
  4415 ;;		line 450 in file "main.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;  rosso           2    0[BANK0 ] int 
  4418 ;;  verde           2    2[BANK0 ] int 
  4419 ;;  giallo          2    4[BANK0 ] int 
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  i               1   13[BANK0 ] unsigned char 
  4422 ;;  l               1   12[BANK0 ] unsigned char 
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  1    wreg      void 
  4425 ;; Registers used:
  4426 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4432 ;;      Params:         0       6       0       0       0
  4433 ;;      Locals:         0       2       0       0       0
  4434 ;;      Temps:          0       6       0       0       0
  4435 ;;      Totals:         0      14       0       0       0
  4436 ;;Total ram usage:       14 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; Hardware stack levels required when called:    2
  4439 ;; This function calls:
  4440 ;;		Nothing
  4441 ;; This function is called by:
  4442 ;;		_main
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           
  4447                           ;psect for function _SetDefaultTimers
  4448  0ED9                     _SetDefaultTimers:	
  4449  0ED9                     l2966:	
  4450                           ;incstack = 0
  4451                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4452                           
  4453                           
  4454                           ;main.c: 450: void SetDefaultTimers(int rosso, int verde, int giallo);main.c: 451: {;mai
      +                          n.c: 452:     for (unsigned char l = 0; l < 16; l++)
  4455  0ED9  1283               	bcf	3,5	;RP0=0, select bank0
  4456  0EDA  1303               	bcf	3,6	;RP1=0, select bank0
  4457  0EDB  01AC               	clrf	SetDefaultTimers@l
  4458  0EDC                     l2972:	
  4459                           
  4460                           ;main.c: 453:     {;main.c: 454:         for (unsigned char i = 0; i < 3; i++)
  4461  0EDC  01AD               	clrf	SetDefaultTimers@i
  4462  0EDD  2F3B               	goto	l2986
  4463  0EDE                     l2978:	
  4464                           
  4465                           ;main.c: 459:                 (*(Semafori[l])).new_times[i] = rosso;
  4466  0EDE  082C               	movf	SetDefaultTimers@l,w
  4467  0EDF  00A6               	movwf	??_SetDefaultTimers
  4468  0EE0  0726               	addwf	??_SetDefaultTimers,w
  4469  0EE1  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4470  0EE2  0084               	movwf	4
  4471  0EE3  1383               	bcf	3,7	;select IRP bank1
  4472  0EE4  0800               	movf	0,w
  4473  0EE5  00A7               	movwf	??_SetDefaultTimers+1
  4474  0EE6  0A84               	incf	4,f
  4475  0EE7  0800               	movf	0,w
  4476  0EE8  00A8               	movwf	??_SetDefaultTimers+2
  4477  0EE9  082D               	movf	SetDefaultTimers@i,w
  4478  0EEA  00A9               	movwf	??_SetDefaultTimers+3
  4479  0EEB  0729               	addwf	??_SetDefaultTimers+3,w
  4480  0EEC  0727               	addwf	??_SetDefaultTimers+1,w
  4481  0EED  00AA               	movwf	??_SetDefaultTimers+4
  4482  0EEE  0828               	movf	??_SetDefaultTimers+2,w
  4483  0EEF  1803               	skipnc
  4484  0EF0  3E01               	addlw	1
  4485  0EF1  00AB               	movwf	??_SetDefaultTimers+5
  4486  0EF2  082A               	movf	??_SetDefaultTimers+4,w
  4487  0EF3  0084               	movwf	4
  4488  0EF4  1783               	bsf	3,7
  4489  0EF5  1C2B               	btfss	??_SetDefaultTimers+5,0
  4490  0EF6  1383               	bcf	3,7
  4491  0EF7  0820               	movf	SetDefaultTimers@rosso,w
  4492  0EF8  0080               	movwf	0
  4493  0EF9  0A84               	incf	4,f
  4494  0EFA  0821               	movf	SetDefaultTimers@rosso+1,w
  4495  0EFB  0080               	movwf	0
  4496                           
  4497                           ;main.c: 460:                 break;
  4498  0EFC  2F4E               	goto	l2988
  4499  0EFD                     l2980:	
  4500                           
  4501                           ;main.c: 462:                 (*(Semafori[l])).new_times[i] = verde;
  4502  0EFD  082C               	movf	SetDefaultTimers@l,w
  4503  0EFE  00A6               	movwf	??_SetDefaultTimers
  4504  0EFF  0726               	addwf	??_SetDefaultTimers,w
  4505  0F00  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4506  0F01  0084               	movwf	4
  4507  0F02  1383               	bcf	3,7	;select IRP bank1
  4508  0F03  0800               	movf	0,w
  4509  0F04  00A7               	movwf	??_SetDefaultTimers+1
  4510  0F05  0A84               	incf	4,f
  4511  0F06  0800               	movf	0,w
  4512  0F07  00A8               	movwf	??_SetDefaultTimers+2
  4513  0F08  082D               	movf	SetDefaultTimers@i,w
  4514  0F09  00A9               	movwf	??_SetDefaultTimers+3
  4515  0F0A  0729               	addwf	??_SetDefaultTimers+3,w
  4516  0F0B  0727               	addwf	??_SetDefaultTimers+1,w
  4517  0F0C  00AA               	movwf	??_SetDefaultTimers+4
  4518  0F0D  0828               	movf	??_SetDefaultTimers+2,w
  4519  0F0E  1803               	skipnc
  4520  0F0F  3E01               	addlw	1
  4521  0F10  00AB               	movwf	??_SetDefaultTimers+5
  4522  0F11  082A               	movf	??_SetDefaultTimers+4,w
  4523  0F12  0084               	movwf	4
  4524  0F13  1783               	bsf	3,7
  4525  0F14  1C2B               	btfss	??_SetDefaultTimers+5,0
  4526  0F15  1383               	bcf	3,7
  4527  0F16  0822               	movf	SetDefaultTimers@verde,w
  4528  0F17  0080               	movwf	0
  4529  0F18  0A84               	incf	4,f
  4530  0F19  0823               	movf	SetDefaultTimers@verde+1,w
  4531  0F1A  0080               	movwf	0
  4532                           
  4533                           ;main.c: 463:                 break;
  4534  0F1B  2F4E               	goto	l2988
  4535  0F1C                     l2982:	
  4536                           
  4537                           ;main.c: 465:                 (*(Semafori[l])).new_times[i] = giallo;
  4538  0F1C  082C               	movf	SetDefaultTimers@l,w
  4539  0F1D  00A6               	movwf	??_SetDefaultTimers
  4540  0F1E  0726               	addwf	??_SetDefaultTimers,w
  4541  0F1F  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4542  0F20  0084               	movwf	4
  4543  0F21  1383               	bcf	3,7	;select IRP bank1
  4544  0F22  0800               	movf	0,w
  4545  0F23  00A7               	movwf	??_SetDefaultTimers+1
  4546  0F24  0A84               	incf	4,f
  4547  0F25  0800               	movf	0,w
  4548  0F26  00A8               	movwf	??_SetDefaultTimers+2
  4549  0F27  082D               	movf	SetDefaultTimers@i,w
  4550  0F28  00A9               	movwf	??_SetDefaultTimers+3
  4551  0F29  0729               	addwf	??_SetDefaultTimers+3,w
  4552  0F2A  0727               	addwf	??_SetDefaultTimers+1,w
  4553  0F2B  00AA               	movwf	??_SetDefaultTimers+4
  4554  0F2C  0828               	movf	??_SetDefaultTimers+2,w
  4555  0F2D  1803               	skipnc
  4556  0F2E  3E01               	addlw	1
  4557  0F2F  00AB               	movwf	??_SetDefaultTimers+5
  4558  0F30  082A               	movf	??_SetDefaultTimers+4,w
  4559  0F31  0084               	movwf	4
  4560  0F32  1783               	bsf	3,7
  4561  0F33  1C2B               	btfss	??_SetDefaultTimers+5,0
  4562  0F34  1383               	bcf	3,7
  4563  0F35  0824               	movf	SetDefaultTimers@giallo,w
  4564  0F36  0080               	movwf	0
  4565  0F37  0A84               	incf	4,f
  4566  0F38  0825               	movf	SetDefaultTimers@giallo+1,w
  4567  0F39  0080               	movwf	0
  4568                           
  4569                           ;main.c: 466:                 break;
  4570  0F3A  2F4E               	goto	l2988
  4571  0F3B                     l2986:	
  4572  0F3B  082D               	movf	SetDefaultTimers@i,w
  4573  0F3C  00A6               	movwf	??_SetDefaultTimers
  4574  0F3D  01A7               	clrf	??_SetDefaultTimers+1
  4575                           
  4576                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4577                           ; Switch size 1, requested type "simple"
  4578                           ; Number of cases is 1, Range of values is 0 to 0
  4579                           ; switch strategies available:
  4580                           ; Name         Instructions Cycles
  4581                           ; simple_byte            4     3 (average)
  4582                           ; direct_byte           11     8 (fixed)
  4583                           ; jumptable            260     6 (fixed)
  4584                           ;	Chosen strategy is simple_byte
  4585  0F3E  0827               	movf	??_SetDefaultTimers+1,w
  4586  0F3F  3A00               	xorlw	0	; case 0
  4587  0F40  1903               	skipnz
  4588  0F41  2F43               	goto	l3410
  4589  0F42  2F4E               	goto	l2988
  4590  0F43                     l3410:	
  4591                           
  4592                           ; Switch size 1, requested type "simple"
  4593                           ; Number of cases is 3, Range of values is 0 to 2
  4594                           ; switch strategies available:
  4595                           ; Name         Instructions Cycles
  4596                           ; simple_byte           10     6 (average)
  4597                           ; direct_byte           17     8 (fixed)
  4598                           ; jumptable            260     6 (fixed)
  4599                           ;	Chosen strategy is simple_byte
  4600  0F43  0826               	movf	??_SetDefaultTimers,w
  4601  0F44  3A00               	xorlw	0	; case 0
  4602  0F45  1903               	skipnz
  4603  0F46  2EDE               	goto	l2978
  4604  0F47  3A01               	xorlw	1	; case 1
  4605  0F48  1903               	skipnz
  4606  0F49  2EFD               	goto	l2980
  4607  0F4A  3A03               	xorlw	3	; case 2
  4608  0F4B  1903               	skipnz
  4609  0F4C  2F1C               	goto	l2982
  4610  0F4D  2F4E               	goto	l2988
  4611  0F4E                     l2988:	
  4612                           
  4613                           ;main.c: 468:         }
  4614  0F4E  3001               	movlw	1
  4615  0F4F  00A6               	movwf	??_SetDefaultTimers
  4616  0F50  0826               	movf	??_SetDefaultTimers,w
  4617  0F51  07AD               	addwf	SetDefaultTimers@i,f
  4618  0F52                     l2990:	
  4619  0F52  3003               	movlw	3
  4620  0F53  022D               	subwf	SetDefaultTimers@i,w
  4621  0F54  1C03               	skipc
  4622  0F55  2F57               	goto	u3181
  4623  0F56  2F58               	goto	u3180
  4624  0F57                     u3181:	
  4625  0F57  2F3B               	goto	l2986
  4626  0F58                     u3180:	
  4627  0F58                     l2992:	
  4628                           
  4629                           ;main.c: 469:     }
  4630  0F58  3001               	movlw	1
  4631  0F59  00A6               	movwf	??_SetDefaultTimers
  4632  0F5A  0826               	movf	??_SetDefaultTimers,w
  4633  0F5B  07AC               	addwf	SetDefaultTimers@l,f
  4634  0F5C                     l2994:	
  4635  0F5C  3010               	movlw	16
  4636  0F5D  022C               	subwf	SetDefaultTimers@l,w
  4637  0F5E  1C03               	skipc
  4638  0F5F  2F61               	goto	u3191
  4639  0F60  2F62               	goto	u3190
  4640  0F61                     u3191:	
  4641  0F61  2EDC               	goto	l2972
  4642  0F62                     u3190:	
  4643  0F62                     l317:	
  4644  0F62  0008               	return
  4645  0F63                     __end_of_SetDefaultTimers:	
  4646                           
  4647                           	psect	text14
  4648  0D10                     __ptext14:	
  4649 ;; *************** function _GetTime *****************
  4650 ;; Defined at:
  4651 ;;		line 416 in file "main.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;  index           1    wreg     unsigned char 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  index           1    4[BANK0 ] unsigned char 
  4656 ;;  time            2    6[BANK0 ] int 
  4657 ;;  shortInt        1    5[BANK0 ] struct .
  4658 ;; Return value:  Size  Location     Type
  4659 ;;                  2    0[BANK0 ] int 
  4660 ;; Registers used:
  4661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4667 ;;      Params:         0       2       0       0       0
  4668 ;;      Locals:         0       4       0       0       0
  4669 ;;      Temps:          0       2       0       0       0
  4670 ;;      Totals:         0       8       0       0       0
  4671 ;;Total ram usage:        8 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    2
  4674 ;; This function calls:
  4675 ;;		Nothing
  4676 ;; This function is called by:
  4677 ;;		_main
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           
  4682                           ;psect for function _GetTime
  4683  0D10                     _GetTime:	
  4684                           
  4685                           ;incstack = 0
  4686                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4687                           ;GetTime@index stored from wreg
  4688  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  4689  0D11  1303               	bcf	3,6	;RP1=0, select bank0
  4690  0D12  00A4               	movwf	GetTime@index
  4691  0D13                     l3026:	
  4692                           
  4693                           ;main.c: 416: int GetTime(unsigned char index);main.c: 417: {;main.c: 418:     int time;
      +                          ;main.c: 422:     } shortInt;;main.c: 424:     shortInt.Val = dataFromGateway[index + 3]
      +                           & 0x7F;
  4694  0D13  0824               	movf	GetTime@index,w
  4695  0D14  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4696  0D15  0084               	movwf	4
  4697  0D16  307F               	movlw	127
  4698  0D17  1383               	bcf	3,7	;select IRP bank1
  4699  0D18  0500               	andwf	0,w
  4700  0D19  00A2               	movwf	??_GetTime
  4701  0D1A  0825               	movf	GetTime@shortInt,w
  4702  0D1B  0622               	xorwf	??_GetTime,w
  4703  0D1C  3980               	andlw	-128
  4704  0D1D  0622               	xorwf	??_GetTime,w
  4705  0D1E  00A5               	movwf	GetTime@shortInt
  4706  0D1F                     l3028:	
  4707                           
  4708                           ;main.c: 425:     time = shortInt.Val;
  4709  0D1F  0825               	movf	GetTime@shortInt,w
  4710  0D20  397F               	andlw	127
  4711  0D21  00A2               	movwf	??_GetTime
  4712  0D22  01A3               	clrf	??_GetTime+1
  4713  0D23  0822               	movf	??_GetTime,w
  4714  0D24  00A6               	movwf	GetTime@time
  4715  0D25  0823               	movf	??_GetTime+1,w
  4716  0D26  00A7               	movwf	GetTime@time+1
  4717  0D27                     l3030:	
  4718                           
  4719                           ;main.c: 426:     time = (time << 7) & 0x80;
  4720  0D27  0827               	movf	GetTime@time+1,w
  4721  0D28  00A3               	movwf	??_GetTime+1
  4722  0D29  0826               	movf	GetTime@time,w
  4723  0D2A  00A2               	movwf	??_GetTime
  4724  0D2B  3007               	movlw	7
  4725  0D2C  00FF               	movwf	btemp+1
  4726  0D2D                     u3235:	
  4727  0D2D  1003               	clrc
  4728  0D2E  0DA2               	rlf	??_GetTime,f
  4729  0D2F  0DA3               	rlf	??_GetTime+1,f
  4730  0D30  0BFF               	decfsz	btemp+1,f
  4731  0D31  2D2D               	goto	u3235
  4732  0D32  3080               	movlw	128
  4733  0D33  0522               	andwf	??_GetTime,w
  4734  0D34  00A6               	movwf	GetTime@time
  4735  0D35  3000               	movlw	0
  4736  0D36  0523               	andwf	??_GetTime+1,w
  4737  0D37  00A7               	movwf	GetTime@time+1
  4738  0D38                     l3032:	
  4739                           
  4740                           ;main.c: 428:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4741  0D38  0824               	movf	GetTime@index,w
  4742  0D39  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4743  0D3A  0084               	movwf	4
  4744  0D3B  307F               	movlw	127
  4745  0D3C  0500               	andwf	0,w
  4746  0D3D  00A2               	movwf	??_GetTime
  4747  0D3E  0825               	movf	GetTime@shortInt,w
  4748  0D3F  0622               	xorwf	??_GetTime,w
  4749  0D40  3980               	andlw	-128
  4750  0D41  0622               	xorwf	??_GetTime,w
  4751  0D42  00A5               	movwf	GetTime@shortInt
  4752  0D43                     l3034:	
  4753                           
  4754                           ;main.c: 429:     time = time | shortInt.Val;
  4755  0D43  0825               	movf	GetTime@shortInt,w
  4756  0D44  397F               	andlw	127
  4757  0D45  00A2               	movwf	??_GetTime
  4758  0D46  0826               	movf	GetTime@time,w
  4759  0D47  0422               	iorwf	??_GetTime,w
  4760  0D48  00A6               	movwf	GetTime@time
  4761  0D49  0827               	movf	GetTime@time+1,w
  4762  0D4A  00A7               	movwf	GetTime@time+1
  4763  0D4B                     l3036:	
  4764                           
  4765                           ;main.c: 431:     return time;
  4766  0D4B  0827               	movf	GetTime@time+1,w
  4767  0D4C  00A1               	movwf	?_GetTime+1
  4768  0D4D  0826               	movf	GetTime@time,w
  4769  0D4E  00A0               	movwf	?_GetTime
  4770  0D4F                     l299:	
  4771  0D4F  0008               	return
  4772  0D50                     __end_of_GetTime:	
  4773                           
  4774                           	psect	text15
  4775  0E6E                     __ptext15:	
  4776 ;; *************** function _GetDigits *****************
  4777 ;; Defined at:
  4778 ;;		line 434 in file "main.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;  Time            2   16[BANK0 ] int 
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;		None
  4783 ;; Return value:  Size  Location     Type
  4784 ;;                  1    wreg      void 
  4785 ;; Registers used:
  4786 ;;		wreg, status,2, status,0, pclath, cstack
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4792 ;;      Params:         0       2       0       0       0
  4793 ;;      Locals:         0       2       0       0       0
  4794 ;;      Temps:          0       3       0       0       0
  4795 ;;      Totals:         0       7       0       0       0
  4796 ;;Total ram usage:        7 bytes
  4797 ;; Hardware stack levels used:    1
  4798 ;; Hardware stack levels required when called:    3
  4799 ;; This function calls:
  4800 ;;		___awdiv
  4801 ;;		___awmod
  4802 ;; This function is called by:
  4803 ;;		_main
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807                           
  4808                           ;psect for function _GetDigits
  4809  0E6E                     _GetDigits:	
  4810  0E6E                     l3040:	
  4811                           ;incstack = 0
  4812                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  4813                           
  4814                           
  4815                           ;main.c: 434: void GetDigits(int Time);main.c: 435: {;main.c: 436:     countdown = Time;
  4816  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
  4817  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
  4818  0E70  0830               	movf	GetDigits@Time,w
  4819  0E71  00B2               	movwf	??_GetDigits
  4820  0E72  0832               	movf	??_GetDigits,w
  4821  0E73  00DA               	movwf	_countdown
  4822  0E74                     l3042:	
  4823                           
  4824                           ;main.c: 437:     centinaia = countdown / 100;
  4825  0E74  3064               	movlw	100
  4826  0E75  00A7               	movwf	___awdiv@divisor
  4827  0E76  3000               	movlw	0
  4828  0E77  00A8               	movwf	___awdiv@divisor+1
  4829  0E78  085A               	movf	_countdown,w
  4830  0E79  00B2               	movwf	??_GetDigits
  4831  0E7A  01B3               	clrf	??_GetDigits+1
  4832  0E7B  0832               	movf	??_GetDigits,w
  4833  0E7C  00A9               	movwf	___awdiv@dividend
  4834  0E7D  0833               	movf	??_GetDigits+1,w
  4835  0E7E  00AA               	movwf	___awdiv@dividend+1
  4836  0E7F  120A  158A  2605  120A  158A  	fcall	___awdiv
  4837  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  4838  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  4839  0E86  0827               	movf	?___awdiv,w
  4840  0E87  00B4               	movwf	??_GetDigits+2
  4841  0E88  0834               	movf	??_GetDigits+2,w
  4842  0E89  00DD               	movwf	_centinaia
  4843  0E8A                     l3044:	
  4844                           
  4845                           ;main.c: 438:     decine = (countdown % 100) / 10;
  4846  0E8A  300A               	movlw	10
  4847  0E8B  00A7               	movwf	___awdiv@divisor
  4848  0E8C  3000               	movlw	0
  4849  0E8D  00A8               	movwf	___awdiv@divisor+1
  4850  0E8E  085A               	movf	_countdown,w
  4851  0E8F  00B2               	movwf	??_GetDigits
  4852  0E90  01B3               	clrf	??_GetDigits+1
  4853  0E91  0832               	movf	??_GetDigits,w
  4854  0E92  00A2               	movwf	___awmod@dividend
  4855  0E93  0833               	movf	??_GetDigits+1,w
  4856  0E94  00A3               	movwf	___awmod@dividend+1
  4857  0E95  3064               	movlw	100
  4858  0E96  00A0               	movwf	___awmod@divisor
  4859  0E97  3000               	movlw	0
  4860  0E98  00A1               	movwf	___awmod@divisor+1
  4861  0E99  120A  158A  25AA  120A  158A  	fcall	___awmod
  4862  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  4863  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  4864  0EA0  0821               	movf	?___awmod+1,w
  4865  0EA1  00AA               	movwf	___awdiv@dividend+1
  4866  0EA2  0820               	movf	?___awmod,w
  4867  0EA3  00A9               	movwf	___awdiv@dividend
  4868  0EA4  120A  158A  2605  120A  158A  	fcall	___awdiv
  4869  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  4870  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  4871  0EAB  0827               	movf	?___awdiv,w
  4872  0EAC  00B4               	movwf	??_GetDigits+2
  4873  0EAD  0834               	movf	??_GetDigits+2,w
  4874  0EAE  00DE               	movwf	_decine
  4875  0EAF                     l3046:	
  4876                           
  4877                           ;main.c: 439:     unita = (countdown % 100) % 10;
  4878  0EAF  085A               	movf	_countdown,w
  4879  0EB0  00B2               	movwf	??_GetDigits
  4880  0EB1  01B3               	clrf	??_GetDigits+1
  4881  0EB2  0832               	movf	??_GetDigits,w
  4882  0EB3  00A2               	movwf	___awmod@dividend
  4883  0EB4  0833               	movf	??_GetDigits+1,w
  4884  0EB5  00A3               	movwf	___awmod@dividend+1
  4885  0EB6  3064               	movlw	100
  4886  0EB7  00A0               	movwf	___awmod@divisor
  4887  0EB8  3000               	movlw	0
  4888  0EB9  00A1               	movwf	___awmod@divisor+1
  4889  0EBA  120A  158A  25AA  120A  158A  	fcall	___awmod
  4890  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  4891  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  4892  0EC1  0821               	movf	?___awmod+1,w
  4893  0EC2  00B6               	movwf	_GetDigits$1151+1
  4894  0EC3  0820               	movf	?___awmod,w
  4895  0EC4  00B5               	movwf	_GetDigits$1151
  4896  0EC5                     l3048:	
  4897                           
  4898                           ;main.c: 439:     unita = (countdown % 100) % 10;
  4899  0EC5  300A               	movlw	10
  4900  0EC6  00A0               	movwf	___awmod@divisor
  4901  0EC7  3000               	movlw	0
  4902  0EC8  00A1               	movwf	___awmod@divisor+1
  4903  0EC9  0836               	movf	_GetDigits$1151+1,w
  4904  0ECA  00A3               	movwf	___awmod@dividend+1
  4905  0ECB  0835               	movf	_GetDigits$1151,w
  4906  0ECC  00A2               	movwf	___awmod@dividend
  4907  0ECD  120A  158A  25AA  120A  158A  	fcall	___awmod
  4908  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  4909  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  4910  0ED4  0820               	movf	?___awmod,w
  4911  0ED5  00B2               	movwf	??_GetDigits
  4912  0ED6  0832               	movf	??_GetDigits,w
  4913  0ED7  00DF               	movwf	_unita
  4914  0ED8                     l302:	
  4915  0ED8  0008               	return
  4916  0ED9                     __end_of_GetDigits:	
  4917                           
  4918                           	psect	text16
  4919  0DAA                     __ptext16:	
  4920 ;; *************** function ___awmod *****************
  4921 ;; Defined at:
  4922 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;  divisor         2    0[BANK0 ] int 
  4925 ;;  dividend        2    2[BANK0 ] int 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  sign            1    6[BANK0 ] unsigned char 
  4928 ;;  counter         1    5[BANK0 ] unsigned char 
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  2    0[BANK0 ] int 
  4931 ;; Registers used:
  4932 ;;		wreg, status,2, status,0
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4938 ;;      Params:         0       4       0       0       0
  4939 ;;      Locals:         0       2       0       0       0
  4940 ;;      Temps:          0       1       0       0       0
  4941 ;;      Totals:         0       7       0       0       0
  4942 ;;Total ram usage:        7 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:    2
  4945 ;; This function calls:
  4946 ;;		Nothing
  4947 ;; This function is called by:
  4948 ;;		_main
  4949 ;;		_GetDigits
  4950 ;;		_intToString
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           
  4955                           ;psect for function ___awmod
  4956  0DAA                     ___awmod:	
  4957  0DAA                     l2854:	
  4958                           ;incstack = 0
  4959                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4960                           
  4961  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  4962  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  4963  0DAC  01A6               	clrf	___awmod@sign
  4964  0DAD                     l2856:	
  4965  0DAD  1FA3               	btfss	___awmod@dividend+1,7
  4966  0DAE  2DB0               	goto	u2991
  4967  0DAF  2DB1               	goto	u2990
  4968  0DB0                     u2991:	
  4969  0DB0  2DB8               	goto	l2862
  4970  0DB1                     u2990:	
  4971  0DB1                     l2858:	
  4972  0DB1  09A2               	comf	___awmod@dividend,f
  4973  0DB2  09A3               	comf	___awmod@dividend+1,f
  4974  0DB3  0AA2               	incf	___awmod@dividend,f
  4975  0DB4  1903               	skipnz
  4976  0DB5  0AA3               	incf	___awmod@dividend+1,f
  4977  0DB6                     l2860:	
  4978  0DB6  01A6               	clrf	___awmod@sign
  4979  0DB7  0AA6               	incf	___awmod@sign,f
  4980  0DB8                     l2862:	
  4981  0DB8  1FA1               	btfss	___awmod@divisor+1,7
  4982  0DB9  2DBB               	goto	u3001
  4983  0DBA  2DBC               	goto	u3000
  4984  0DBB                     u3001:	
  4985  0DBB  2DC1               	goto	l2866
  4986  0DBC                     u3000:	
  4987  0DBC                     l2864:	
  4988  0DBC  09A0               	comf	___awmod@divisor,f
  4989  0DBD  09A1               	comf	___awmod@divisor+1,f
  4990  0DBE  0AA0               	incf	___awmod@divisor,f
  4991  0DBF  1903               	skipnz
  4992  0DC0  0AA1               	incf	___awmod@divisor+1,f
  4993  0DC1                     l2866:	
  4994  0DC1  0820               	movf	___awmod@divisor,w
  4995  0DC2  0421               	iorwf	___awmod@divisor+1,w
  4996  0DC3  1903               	btfsc	3,2
  4997  0DC4  2DC6               	goto	u3011
  4998  0DC5  2DC7               	goto	u3010
  4999  0DC6                     u3011:	
  5000  0DC6  2DF6               	goto	l2884
  5001  0DC7                     u3010:	
  5002  0DC7                     l2868:	
  5003  0DC7  01A5               	clrf	___awmod@counter
  5004  0DC8  0AA5               	incf	___awmod@counter,f
  5005  0DC9  2DD5               	goto	l2874
  5006  0DCA                     l2870:	
  5007  0DCA  3001               	movlw	1
  5008  0DCB                     u3025:	
  5009  0DCB  1003               	clrc
  5010  0DCC  0DA0               	rlf	___awmod@divisor,f
  5011  0DCD  0DA1               	rlf	___awmod@divisor+1,f
  5012  0DCE  3EFF               	addlw	-1
  5013  0DCF  1D03               	skipz
  5014  0DD0  2DCB               	goto	u3025
  5015  0DD1                     l2872:	
  5016  0DD1  3001               	movlw	1
  5017  0DD2  00A4               	movwf	??___awmod
  5018  0DD3  0824               	movf	??___awmod,w
  5019  0DD4  07A5               	addwf	___awmod@counter,f
  5020  0DD5                     l2874:	
  5021  0DD5  1FA1               	btfss	___awmod@divisor+1,7
  5022  0DD6  2DD8               	goto	u3031
  5023  0DD7  2DD9               	goto	u3030
  5024  0DD8                     u3031:	
  5025  0DD8  2DCA               	goto	l2870
  5026  0DD9                     u3030:	
  5027  0DD9                     l2876:	
  5028  0DD9  0821               	movf	___awmod@divisor+1,w
  5029  0DDA  0223               	subwf	___awmod@dividend+1,w
  5030  0DDB  1D03               	skipz
  5031  0DDC  2DDF               	goto	u3045
  5032  0DDD  0820               	movf	___awmod@divisor,w
  5033  0DDE  0222               	subwf	___awmod@dividend,w
  5034  0DDF                     u3045:	
  5035  0DDF  1C03               	skipc
  5036  0DE0  2DE2               	goto	u3041
  5037  0DE1  2DE3               	goto	u3040
  5038  0DE2                     u3041:	
  5039  0DE2  2DE9               	goto	l2880
  5040  0DE3                     u3040:	
  5041  0DE3                     l2878:	
  5042  0DE3  0820               	movf	___awmod@divisor,w
  5043  0DE4  02A2               	subwf	___awmod@dividend,f
  5044  0DE5  0821               	movf	___awmod@divisor+1,w
  5045  0DE6  1C03               	skipc
  5046  0DE7  03A3               	decf	___awmod@dividend+1,f
  5047  0DE8  02A3               	subwf	___awmod@dividend+1,f
  5048  0DE9                     l2880:	
  5049  0DE9  3001               	movlw	1
  5050  0DEA                     u3055:	
  5051  0DEA  1003               	clrc
  5052  0DEB  0CA1               	rrf	___awmod@divisor+1,f
  5053  0DEC  0CA0               	rrf	___awmod@divisor,f
  5054  0DED  3EFF               	addlw	-1
  5055  0DEE  1D03               	skipz
  5056  0DEF  2DEA               	goto	u3055
  5057  0DF0                     l2882:	
  5058  0DF0  3001               	movlw	1
  5059  0DF1  02A5               	subwf	___awmod@counter,f
  5060  0DF2  1D03               	btfss	3,2
  5061  0DF3  2DF5               	goto	u3061
  5062  0DF4  2DF6               	goto	u3060
  5063  0DF5                     u3061:	
  5064  0DF5  2DD9               	goto	l2876
  5065  0DF6                     u3060:	
  5066  0DF6                     l2884:	
  5067  0DF6  0826               	movf	___awmod@sign,w
  5068  0DF7  1903               	btfsc	3,2
  5069  0DF8  2DFA               	goto	u3071
  5070  0DF9  2DFB               	goto	u3070
  5071  0DFA                     u3071:	
  5072  0DFA  2E00               	goto	l2888
  5073  0DFB                     u3070:	
  5074  0DFB                     l2886:	
  5075  0DFB  09A2               	comf	___awmod@dividend,f
  5076  0DFC  09A3               	comf	___awmod@dividend+1,f
  5077  0DFD  0AA2               	incf	___awmod@dividend,f
  5078  0DFE  1903               	skipnz
  5079  0DFF  0AA3               	incf	___awmod@dividend+1,f
  5080  0E00                     l2888:	
  5081  0E00  0823               	movf	___awmod@dividend+1,w
  5082  0E01  00A1               	movwf	?___awmod+1
  5083  0E02  0822               	movf	___awmod@dividend,w
  5084  0E03  00A0               	movwf	?___awmod
  5085  0E04                     l606:	
  5086  0E04  0008               	return
  5087  0E05                     __end_of___awmod:	
  5088                           
  5089                           	psect	text17
  5090  0E05                     __ptext17:	
  5091 ;; *************** function ___awdiv *****************
  5092 ;; Defined at:
  5093 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;  divisor         2    7[BANK0 ] int 
  5096 ;;  dividend        2    9[BANK0 ] int 
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  quotient        2   14[BANK0 ] int 
  5099 ;;  sign            1   13[BANK0 ] unsigned char 
  5100 ;;  counter         1   12[BANK0 ] unsigned char 
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  2    7[BANK0 ] int 
  5103 ;; Registers used:
  5104 ;;		wreg, status,2, status,0
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5110 ;;      Params:         0       4       0       0       0
  5111 ;;      Locals:         0       4       0       0       0
  5112 ;;      Temps:          0       1       0       0       0
  5113 ;;      Totals:         0       9       0       0       0
  5114 ;;Total ram usage:        9 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    2
  5117 ;; This function calls:
  5118 ;;		Nothing
  5119 ;; This function is called by:
  5120 ;;		_map
  5121 ;;		_GetDigits
  5122 ;;		_intToString
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           
  5127                           ;psect for function ___awdiv
  5128  0E05                     ___awdiv:	
  5129  0E05                     l2810:	
  5130                           ;incstack = 0
  5131                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5132                           
  5133  0E05  1283               	bcf	3,5	;RP0=0, select bank0
  5134  0E06  1303               	bcf	3,6	;RP1=0, select bank0
  5135  0E07  01AD               	clrf	___awdiv@sign
  5136  0E08                     l2812:	
  5137  0E08  1FA8               	btfss	___awdiv@divisor+1,7
  5138  0E09  2E0B               	goto	u2891
  5139  0E0A  2E0C               	goto	u2890
  5140  0E0B                     u2891:	
  5141  0E0B  2E13               	goto	l2818
  5142  0E0C                     u2890:	
  5143  0E0C                     l2814:	
  5144  0E0C  09A7               	comf	___awdiv@divisor,f
  5145  0E0D  09A8               	comf	___awdiv@divisor+1,f
  5146  0E0E  0AA7               	incf	___awdiv@divisor,f
  5147  0E0F  1903               	skipnz
  5148  0E10  0AA8               	incf	___awdiv@divisor+1,f
  5149  0E11                     l2816:	
  5150  0E11  01AD               	clrf	___awdiv@sign
  5151  0E12  0AAD               	incf	___awdiv@sign,f
  5152  0E13                     l2818:	
  5153  0E13  1FAA               	btfss	___awdiv@dividend+1,7
  5154  0E14  2E16               	goto	u2901
  5155  0E15  2E17               	goto	u2900
  5156  0E16                     u2901:	
  5157  0E16  2E20               	goto	l2824
  5158  0E17                     u2900:	
  5159  0E17                     l2820:	
  5160  0E17  09A9               	comf	___awdiv@dividend,f
  5161  0E18  09AA               	comf	___awdiv@dividend+1,f
  5162  0E19  0AA9               	incf	___awdiv@dividend,f
  5163  0E1A  1903               	skipnz
  5164  0E1B  0AAA               	incf	___awdiv@dividend+1,f
  5165  0E1C                     l2822:	
  5166  0E1C  3001               	movlw	1
  5167  0E1D  00AB               	movwf	??___awdiv
  5168  0E1E  082B               	movf	??___awdiv,w
  5169  0E1F  06AD               	xorwf	___awdiv@sign,f
  5170  0E20                     l2824:	
  5171  0E20  01AE               	clrf	___awdiv@quotient
  5172  0E21  01AF               	clrf	___awdiv@quotient+1
  5173  0E22                     l2826:	
  5174  0E22  0827               	movf	___awdiv@divisor,w
  5175  0E23  0428               	iorwf	___awdiv@divisor+1,w
  5176  0E24  1903               	btfsc	3,2
  5177  0E25  2E27               	goto	u2911
  5178  0E26  2E28               	goto	u2910
  5179  0E27                     u2911:	
  5180  0E27  2E5F               	goto	l2846
  5181  0E28                     u2910:	
  5182  0E28                     l2828:	
  5183  0E28  01AC               	clrf	___awdiv@counter
  5184  0E29  0AAC               	incf	___awdiv@counter,f
  5185  0E2A  2E36               	goto	l2834
  5186  0E2B                     l2830:	
  5187  0E2B  3001               	movlw	1
  5188  0E2C                     u2925:	
  5189  0E2C  1003               	clrc
  5190  0E2D  0DA7               	rlf	___awdiv@divisor,f
  5191  0E2E  0DA8               	rlf	___awdiv@divisor+1,f
  5192  0E2F  3EFF               	addlw	-1
  5193  0E30  1D03               	skipz
  5194  0E31  2E2C               	goto	u2925
  5195  0E32                     l2832:	
  5196  0E32  3001               	movlw	1
  5197  0E33  00AB               	movwf	??___awdiv
  5198  0E34  082B               	movf	??___awdiv,w
  5199  0E35  07AC               	addwf	___awdiv@counter,f
  5200  0E36                     l2834:	
  5201  0E36  1FA8               	btfss	___awdiv@divisor+1,7
  5202  0E37  2E39               	goto	u2931
  5203  0E38  2E3A               	goto	u2930
  5204  0E39                     u2931:	
  5205  0E39  2E2B               	goto	l2830
  5206  0E3A                     u2930:	
  5207  0E3A                     l2836:	
  5208  0E3A  3001               	movlw	1
  5209  0E3B                     u2945:	
  5210  0E3B  1003               	clrc
  5211  0E3C  0DAE               	rlf	___awdiv@quotient,f
  5212  0E3D  0DAF               	rlf	___awdiv@quotient+1,f
  5213  0E3E  3EFF               	addlw	-1
  5214  0E3F  1D03               	skipz
  5215  0E40  2E3B               	goto	u2945
  5216  0E41  0828               	movf	___awdiv@divisor+1,w
  5217  0E42  022A               	subwf	___awdiv@dividend+1,w
  5218  0E43  1D03               	skipz
  5219  0E44  2E47               	goto	u2955
  5220  0E45  0827               	movf	___awdiv@divisor,w
  5221  0E46  0229               	subwf	___awdiv@dividend,w
  5222  0E47                     u2955:	
  5223  0E47  1C03               	skipc
  5224  0E48  2E4A               	goto	u2951
  5225  0E49  2E4B               	goto	u2950
  5226  0E4A                     u2951:	
  5227  0E4A  2E52               	goto	l2842
  5228  0E4B                     u2950:	
  5229  0E4B                     l2838:	
  5230  0E4B  0827               	movf	___awdiv@divisor,w
  5231  0E4C  02A9               	subwf	___awdiv@dividend,f
  5232  0E4D  0828               	movf	___awdiv@divisor+1,w
  5233  0E4E  1C03               	skipc
  5234  0E4F  03AA               	decf	___awdiv@dividend+1,f
  5235  0E50  02AA               	subwf	___awdiv@dividend+1,f
  5236  0E51                     l2840:	
  5237  0E51  142E               	bsf	___awdiv@quotient,0
  5238  0E52                     l2842:	
  5239  0E52  3001               	movlw	1
  5240  0E53                     u2965:	
  5241  0E53  1003               	clrc
  5242  0E54  0CA8               	rrf	___awdiv@divisor+1,f
  5243  0E55  0CA7               	rrf	___awdiv@divisor,f
  5244  0E56  3EFF               	addlw	-1
  5245  0E57  1D03               	skipz
  5246  0E58  2E53               	goto	u2965
  5247  0E59                     l2844:	
  5248  0E59  3001               	movlw	1
  5249  0E5A  02AC               	subwf	___awdiv@counter,f
  5250  0E5B  1D03               	btfss	3,2
  5251  0E5C  2E5E               	goto	u2971
  5252  0E5D  2E5F               	goto	u2970
  5253  0E5E                     u2971:	
  5254  0E5E  2E3A               	goto	l2836
  5255  0E5F                     u2970:	
  5256  0E5F                     l2846:	
  5257  0E5F  082D               	movf	___awdiv@sign,w
  5258  0E60  1903               	btfsc	3,2
  5259  0E61  2E63               	goto	u2981
  5260  0E62  2E64               	goto	u2980
  5261  0E63                     u2981:	
  5262  0E63  2E69               	goto	l2850
  5263  0E64                     u2980:	
  5264  0E64                     l2848:	
  5265  0E64  09AE               	comf	___awdiv@quotient,f
  5266  0E65  09AF               	comf	___awdiv@quotient+1,f
  5267  0E66  0AAE               	incf	___awdiv@quotient,f
  5268  0E67  1903               	skipnz
  5269  0E68  0AAF               	incf	___awdiv@quotient+1,f
  5270  0E69                     l2850:	
  5271  0E69  082F               	movf	___awdiv@quotient+1,w
  5272  0E6A  00A8               	movwf	?___awdiv+1
  5273  0E6B  082E               	movf	___awdiv@quotient,w
  5274  0E6C  00A7               	movwf	?___awdiv
  5275  0E6D                     l593:	
  5276  0E6D  0008               	return
  5277  0E6E                     __end_of___awdiv:	
  5278                           
  5279                           	psect	text18
  5280  0BF2                     __ptext18:	
  5281 ;; *************** function _ADC_Read *****************
  5282 ;; Defined at:
  5283 ;;		line 358 in file "main.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  canale          1    wreg     unsigned char 
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  canale          1    3[BANK0 ] unsigned char 
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  2    0[BANK0 ] int 
  5290 ;; Registers used:
  5291 ;;		wreg, status,2, status,0
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5297 ;;      Params:         0       2       0       0       0
  5298 ;;      Locals:         0       1       0       0       0
  5299 ;;      Temps:          0       1       0       0       0
  5300 ;;      Totals:         0       4       0       0       0
  5301 ;;Total ram usage:        4 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    2
  5304 ;; This function calls:
  5305 ;;		Nothing
  5306 ;; This function is called by:
  5307 ;;		_main
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           
  5312                           ;psect for function _ADC_Read
  5313  0BF2                     _ADC_Read:	
  5314                           
  5315                           ;incstack = 0
  5316                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5317                           ;ADC_Read@canale stored from wreg
  5318  0BF2  1283               	bcf	3,5	;RP0=0, select bank0
  5319  0BF3  1303               	bcf	3,6	;RP1=0, select bank0
  5320  0BF4  00A3               	movwf	ADC_Read@canale
  5321  0BF5                     l3016:	
  5322                           
  5323                           ;main.c: 358: int ADC_Read(char canale);main.c: 359: {;main.c: 360:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  5324  0BF5  0823               	movf	ADC_Read@canale,w
  5325  0BF6  00A2               	movwf	??_ADC_Read
  5326  0BF7  3002               	movlw	2
  5327  0BF8                     u3215:	
  5328  0BF8  1003               	clrc
  5329  0BF9  0DA2               	rlf	??_ADC_Read,f
  5330  0BFA  3EFF               	addlw	-1
  5331  0BFB  1D03               	skipz
  5332  0BFC  2BF8               	goto	u3215
  5333  0BFD  1003               	clrc
  5334  0BFE  0D22               	rlf	??_ADC_Read,w
  5335  0BFF  3801               	iorlw	1
  5336  0C00  009F               	movwf	31	;volatile
  5337  0C01                     l3018:	
  5338                           
  5339                           ;main.c: 361:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5340  0C01  3004               	movlw	4
  5341  0C02  1283               	bcf	3,5	;RP0=0, select bank0
  5342  0C03  1303               	bcf	3,6	;RP1=0, select bank0
  5343  0C04  00A2               	movwf	??_ADC_Read
  5344  0C05                     u3627:	
  5345  0C05  0BA2               	decfsz	??_ADC_Read,f
  5346  0C06  2C05               	goto	u3627
  5347  0C07  0000               	nop
  5348  0C08                     l3020:	
  5349                           
  5350                           ;main.c: 362:     GO_nDONE = 1;
  5351  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  5352  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  5353  0C0A  151F               	bsf	31,2	;volatile
  5354  0C0B                     l267:	
  5355                           ;main.c: 364:         ;
  5356                           
  5357                           
  5358                           ;main.c: 363:     while (GO_nDONE)
  5359  0C0B  191F               	btfsc	31,2	;volatile
  5360  0C0C  2C0E               	goto	u3221
  5361  0C0D  2C0F               	goto	u3220
  5362  0C0E                     u3221:	
  5363  0C0E  2C0B               	goto	l267
  5364  0C0F                     u3220:	
  5365  0C0F                     l3022:	
  5366                           
  5367                           ;main.c: 365:     return ADRESL + (ADRESH << 8);
  5368  0C0F  081E               	movf	30,w	;volatile
  5369  0C10  00A1               	movwf	?_ADC_Read+1
  5370  0C11  1683               	bsf	3,5	;RP0=1, select bank1
  5371  0C12  1303               	bcf	3,6	;RP1=0, select bank1
  5372  0C13  081E               	movf	30,w	;volatile
  5373  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  5374  0C15  1303               	bcf	3,6	;RP1=0, select bank0
  5375  0C16  00A0               	movwf	?_ADC_Read
  5376  0C17                     l270:	
  5377  0C17  0008               	return
  5378  0C18                     __end_of_ADC_Read:	
  5379                           
  5380                           	psect	text19
  5381  0D50                     __ptext19:	
  5382 ;; *************** function _ISR *****************
  5383 ;; Defined at:
  5384 ;;		line 560 in file "main.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;		None
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;		None
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5398 ;;      Params:         0       0       0       0       0
  5399 ;;      Locals:         0       0       0       0       0
  5400 ;;      Temps:          4       0       0       0       0
  5401 ;;      Totals:         4       0       0       0       0
  5402 ;;Total ram usage:        4 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    1
  5405 ;; This function calls:
  5406 ;;		_UART_Read
  5407 ;;		_conteggioVeicoli
  5408 ;; This function is called by:
  5409 ;;		Interrupt level 1
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           
  5414                           ;psect for function _ISR
  5415  0D50                     _ISR:	
  5416  0D50                     i1l2548:	
  5417                           
  5418                           ;main.c: 563:     if (RCIF && readGateway.Bit == 0)
  5419  0D50  1283               	bcf	3,5	;RP0=0, select bank0
  5420  0D51  1303               	bcf	3,6	;RP1=0, select bank0
  5421  0D52  1E8C               	btfss	12,5	;volatile
  5422  0D53  2D55               	goto	u253_21
  5423  0D54  2D56               	goto	u253_20
  5424  0D55                     u253_21:	
  5425  0D55  2D5F               	goto	i1l2556
  5426  0D56                     u253_20:	
  5427  0D56                     i1l2550:	
  5428  0D56  1862               	btfsc	_readGateway,0
  5429  0D57  2D59               	goto	u254_21
  5430  0D58  2D5A               	goto	u254_20
  5431  0D59                     u254_21:	
  5432  0D59  2D5F               	goto	i1l2556
  5433  0D5A                     u254_20:	
  5434  0D5A                     i1l2552:	
  5435                           
  5436                           ;main.c: 564:     {;main.c: 565:         readGateway.Bit = 1;
  5437  0D5A  1462               	bsf	_readGateway,0
  5438                           
  5439                           ;main.c: 566:         readGatewayDone.Bit = 0;
  5440  0D5B  1063               	bcf	_readGatewayDone,0
  5441                           
  5442                           ;main.c: 567:         readGatewayDone.Timeout = 0;
  5443  0D5C  10E3               	bcf	_readGatewayDone,1
  5444  0D5D                     i1l2554:	
  5445                           
  5446                           ;main.c: 568:         dataFromGatewayIndex = 0;
  5447  0D5D  01D9               	clrf	_dataFromGatewayIndex
  5448                           
  5449                           ;main.c: 569:         timerReadFromGateway = 0;
  5450  0D5E  01D8               	clrf	_timerReadFromGateway
  5451  0D5F                     i1l2556:	
  5452                           
  5453                           ;main.c: 571:     if (RCIF && readGateway.Bit == 1)
  5454  0D5F  1E8C               	btfss	12,5	;volatile
  5455  0D60  2D62               	goto	u255_21
  5456  0D61  2D63               	goto	u255_20
  5457  0D62                     u255_21:	
  5458  0D62  2D7A               	goto	i1l2566
  5459  0D63                     u255_20:	
  5460  0D63                     i1l2558:	
  5461  0D63  1C62               	btfss	_readGateway,0
  5462  0D64  2D66               	goto	u256_21
  5463  0D65  2D67               	goto	u256_20
  5464  0D66                     u256_21:	
  5465  0D66  2D7A               	goto	i1l2566
  5466  0D67                     u256_20:	
  5467  0D67                     i1l2560:	
  5468                           
  5469                           ;main.c: 572:     {;main.c: 573:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  5470  0D67  120A  158A  236C  120A  158A  	fcall	_UART_Read
  5471  0D6C  00F6               	movwf	??_ISR
  5472  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  5473  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  5474  0D6F  0859               	movf	_dataFromGatewayIndex,w
  5475  0D70  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  5476  0D71  0084               	movwf	4
  5477  0D72  0876               	movf	??_ISR,w
  5478  0D73  1383               	bcf	3,7	;select IRP bank1
  5479  0D74  0080               	movwf	0
  5480  0D75                     i1l2562:	
  5481                           
  5482                           ;main.c: 574:         dataFromGatewayIndex++;
  5483  0D75  3001               	movlw	1
  5484  0D76  00F6               	movwf	??_ISR
  5485  0D77  0876               	movf	??_ISR,w
  5486  0D78  07D9               	addwf	_dataFromGatewayIndex,f
  5487  0D79                     i1l2564:	
  5488                           
  5489                           ;main.c: 575:         timerReadFromGateway = 0;
  5490  0D79  01D8               	clrf	_timerReadFromGateway
  5491  0D7A                     i1l2566:	
  5492                           
  5493                           ;main.c: 580:     if (TMR0IF)
  5494  0D7A  1D0B               	btfss	11,2	;volatile
  5495  0D7B  2D7D               	goto	u257_21
  5496  0D7C  2D7E               	goto	u257_20
  5497  0D7D                     u257_21:	
  5498  0D7D  2D88               	goto	i1l2574
  5499  0D7E                     u257_20:	
  5500  0D7E                     i1l2568:	
  5501                           
  5502                           ;main.c: 581:     {;main.c: 582:         TMR0IF = 0;
  5503  0D7E  110B               	bcf	11,2	;volatile
  5504  0D7F                     i1l2570:	
  5505                           
  5506                           ;main.c: 583:         conteggioVeicoli();
  5507  0D7F  120A  118A  2584  120A  158A  	fcall	_conteggioVeicoli
  5508  0D84                     i1l2572:	
  5509                           
  5510                           ;main.c: 584:         TMR0 = 6;
  5511  0D84  3006               	movlw	6
  5512  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  5513  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  5514  0D87  0081               	movwf	1	;volatile
  5515  0D88                     i1l2574:	
  5516                           
  5517                           ;main.c: 587:     if (TMR1IF)
  5518  0D88  1C0C               	btfss	12,0	;volatile
  5519  0D89  2D8B               	goto	u258_21
  5520  0D8A  2D8C               	goto	u258_20
  5521  0D8B                     u258_21:	
  5522  0D8B  2DA1               	goto	i1l354
  5523  0D8C                     u258_20:	
  5524  0D8C                     i1l2576:	
  5525                           
  5526                           ;main.c: 588:     {;main.c: 589:         TMR1IF = 0;
  5527  0D8C  100C               	bcf	12,0	;volatile
  5528  0D8D                     i1l2578:	
  5529                           
  5530                           ;main.c: 590:         count_lux++;
  5531  0D8D  3001               	movlw	1
  5532  0D8E  00F6               	movwf	??_ISR
  5533  0D8F  0876               	movf	??_ISR,w
  5534  0D90  07F4               	addwf	_count_lux,f
  5535  0D91                     i1l2580:	
  5536                           
  5537                           ;main.c: 592:         if (count_lux >= 20)
  5538  0D91  3014               	movlw	20
  5539  0D92  0274               	subwf	_count_lux,w
  5540  0D93  1C03               	skipc
  5541  0D94  2D96               	goto	u259_21
  5542  0D95  2D97               	goto	u259_20
  5543  0D96                     u259_21:	
  5544  0D96  2D9D               	goto	i1l2588
  5545  0D97                     u259_20:	
  5546  0D97                     i1l2582:	
  5547                           
  5548                           ;main.c: 593:         {;main.c: 594:             secondPassed.Bit = 1;
  5549  0D97  1461               	bsf	_secondPassed,0
  5550  0D98                     i1l2584:	
  5551                           
  5552                           ;main.c: 595:             count_lux = 0;
  5553  0D98  01F4               	clrf	_count_lux
  5554  0D99                     i1l2586:	
  5555                           
  5556                           ;main.c: 596:             timerReadFromGateway++;
  5557  0D99  3001               	movlw	1
  5558  0D9A  00F6               	movwf	??_ISR
  5559  0D9B  0876               	movf	??_ISR,w
  5560  0D9C  07D8               	addwf	_timerReadFromGateway,f
  5561  0D9D                     i1l2588:	
  5562                           
  5563                           ;main.c: 599:         TMR1H = 60;
  5564  0D9D  303C               	movlw	60
  5565  0D9E  008F               	movwf	15	;volatile
  5566  0D9F                     i1l2590:	
  5567                           
  5568                           ;main.c: 600:         TMR1L = 176;
  5569  0D9F  30B0               	movlw	176
  5570  0DA0  008E               	movwf	14	;volatile
  5571  0DA1                     i1l354:	
  5572  0DA1  0879               	movf	??_ISR+3,w
  5573  0DA2  008A               	movwf	10
  5574  0DA3  0878               	movf	??_ISR+2,w
  5575  0DA4  0084               	movwf	4
  5576  0DA5  0E77               	swapf	(??_ISR+1)^(0+4294967168),w
  5577  0DA6  0083               	movwf	3
  5578  0DA7  0EFE               	swapf	btemp,f
  5579  0DA8  0E7E               	swapf	btemp,w
  5580  0DA9  0009               	retfie
  5581  0DAA                     __end_of_ISR:	
  5582                           
  5583                           	psect	intentry
  5584  0004                     __pintentry:	
  5585                           ;incstack = 0
  5586                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5587                           
  5588  0004                     interrupt_function:	
  5589  007E                     saved_w	set	btemp
  5590  0004  00FE               	movwf	btemp
  5591  0005  0E03               	swapf	3,w
  5592  0006  00F7               	movwf	??_ISR+1
  5593  0007  0804               	movf	4,w
  5594  0008  00F8               	movwf	??_ISR+2
  5595  0009  080A               	movf	10,w
  5596  000A  00F9               	movwf	??_ISR+3
  5597  000B  120A  158A  2D50   	ljmp	_ISR
  5598                           
  5599                           	psect	text20
  5600  0584                     __ptext20:	
  5601 ;; *************** function _conteggioVeicoli *****************
  5602 ;; Defined at:
  5603 ;;		line 472 in file "main.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;		None
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;		None
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5617 ;;      Params:         0       0       0       0       0
  5618 ;;      Locals:         0       0       0       0       0
  5619 ;;      Temps:          1       0       0       0       0
  5620 ;;      Totals:         1       0       0       0       0
  5621 ;;Total ram usage:        1 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; This function calls:
  5624 ;;		Nothing
  5625 ;; This function is called by:
  5626 ;;		_ISR
  5627 ;; This function uses a non-reentrant model
  5628 ;;
  5629                           
  5630                           
  5631                           ;psect for function _conteggioVeicoli
  5632  0584                     _conteggioVeicoli:	
  5633  0584                     i1l2204:	
  5634                           ;incstack = 0
  5635                           ; Regs used in _conteggioVeicoli: [wreg+status,2+status,0]
  5636                           
  5637                           
  5638                           ;main.c: 475:     if (!PORTBbits.RB3)
  5639  0584  1283               	bcf	3,5	;RP0=0, select bank0
  5640  0585  1303               	bcf	3,6	;RP1=0, select bank0
  5641  0586  1986               	btfsc	6,3	;volatile
  5642  0587  2D89               	goto	u196_21
  5643  0588  2D8A               	goto	u196_20
  5644  0589                     u196_21:	
  5645  0589  2D91               	goto	i1l320
  5646  058A                     u196_20:	
  5647  058A                     i1l2206:	
  5648                           
  5649                           ;main.c: 476:     {;main.c: 477:         count++;
  5650  058A  3001               	movlw	1
  5651  058B  07F0               	addwf	_count,f
  5652  058C  1803               	skipnc
  5653  058D  0AF1               	incf	_count+1,f
  5654  058E  3000               	movlw	0
  5655  058F  07F1               	addwf	_count+1,f
  5656                           
  5657                           ;main.c: 478:     }
  5658  0590  2DBE               	goto	i1l2222
  5659  0591                     i1l320:	
  5660                           ;main.c: 479:     else if (PORTBbits.RB3)
  5661                           
  5662  0591  1D86               	btfss	6,3	;volatile
  5663  0592  2D94               	goto	u197_21
  5664  0593  2D95               	goto	u197_20
  5665  0594                     u197_21:	
  5666  0594  2DBE               	goto	i1l2222
  5667  0595                     u197_20:	
  5668  0595                     i1l2208:	
  5669                           
  5670                           ;main.c: 480:     {;main.c: 481:         if (count >= 500)
  5671  0595  3001               	movlw	1
  5672  0596  0271               	subwf	_count+1,w
  5673  0597  30F4               	movlw	244
  5674  0598  1903               	skipnz
  5675  0599  0270               	subwf	_count,w
  5676  059A  1C03               	skipc
  5677  059B  2D9D               	goto	u198_21
  5678  059C  2D9E               	goto	u198_20
  5679  059D                     u198_21:	
  5680  059D  2DA2               	goto	i1l2212
  5681  059E                     u198_20:	
  5682  059E                     i1l2210:	
  5683                           
  5684                           ;main.c: 482:         {;main.c: 483:             motorcycle[0]++;
  5685  059E  3001               	movlw	1
  5686  059F  00F5               	movwf	??_conteggioVeicoli
  5687  05A0  0875               	movf	??_conteggioVeicoli,w
  5688  05A1  07D4               	addwf	_motorcycle,f
  5689  05A2                     i1l2212:	
  5690                           
  5691                           ;main.c: 485:         if (count >= 1500)
  5692  05A2  3005               	movlw	5
  5693  05A3  0271               	subwf	_count+1,w
  5694  05A4  30DC               	movlw	220
  5695  05A5  1903               	skipnz
  5696  05A6  0270               	subwf	_count,w
  5697  05A7  1C03               	skipc
  5698  05A8  2DAA               	goto	u199_21
  5699  05A9  2DAB               	goto	u199_20
  5700  05AA                     u199_21:	
  5701  05AA  2DAF               	goto	i1l2216
  5702  05AB                     u199_20:	
  5703  05AB                     i1l2214:	
  5704                           
  5705                           ;main.c: 486:         {;main.c: 487:             car[0]++;
  5706  05AB  3001               	movlw	1
  5707  05AC  00F5               	movwf	??_conteggioVeicoli
  5708  05AD  0875               	movf	??_conteggioVeicoli,w
  5709  05AE  07D0               	addwf	_car,f
  5710  05AF                     i1l2216:	
  5711                           
  5712                           ;main.c: 489:         if (count >= 3000)
  5713  05AF  300B               	movlw	11
  5714  05B0  0271               	subwf	_count+1,w
  5715  05B1  30B8               	movlw	184
  5716  05B2  1903               	skipnz
  5717  05B3  0270               	subwf	_count,w
  5718  05B4  1C03               	skipc
  5719  05B5  2DB7               	goto	u200_21
  5720  05B6  2DB8               	goto	u200_20
  5721  05B7                     u200_21:	
  5722  05B7  2DBC               	goto	i1l2220
  5723  05B8                     u200_20:	
  5724  05B8                     i1l2218:	
  5725                           
  5726                           ;main.c: 490:         {;main.c: 491:             truck[0]++;
  5727  05B8  3001               	movlw	1
  5728  05B9  00F5               	movwf	??_conteggioVeicoli
  5729  05BA  0875               	movf	??_conteggioVeicoli,w
  5730  05BB  07CC               	addwf	_truck,f
  5731  05BC                     i1l2220:	
  5732                           
  5733                           ;main.c: 493:         count = 0;
  5734  05BC  01F0               	clrf	_count
  5735  05BD  01F1               	clrf	_count+1
  5736  05BE                     i1l2222:	
  5737                           
  5738                           ;main.c: 496:     if (!PORTBbits.RB4)
  5739  05BE  1A06               	btfsc	6,4	;volatile
  5740  05BF  2DC1               	goto	u201_21
  5741  05C0  2DC2               	goto	u201_20
  5742  05C1                     u201_21:	
  5743  05C1  2DC9               	goto	i1l326
  5744  05C2                     u201_20:	
  5745  05C2                     i1l2224:	
  5746                           
  5747                           ;main.c: 497:     {;main.c: 498:         count++;
  5748  05C2  3001               	movlw	1
  5749  05C3  07F0               	addwf	_count,f
  5750  05C4  1803               	skipnc
  5751  05C5  0AF1               	incf	_count+1,f
  5752  05C6  3000               	movlw	0
  5753  05C7  07F1               	addwf	_count+1,f
  5754                           
  5755                           ;main.c: 499:     }
  5756  05C8  2DF6               	goto	i1l2240
  5757  05C9                     i1l326:	
  5758                           ;main.c: 500:     else if (PORTBbits.RB4)
  5759                           
  5760  05C9  1E06               	btfss	6,4	;volatile
  5761  05CA  2DCC               	goto	u202_21
  5762  05CB  2DCD               	goto	u202_20
  5763  05CC                     u202_21:	
  5764  05CC  2DF6               	goto	i1l2240
  5765  05CD                     u202_20:	
  5766  05CD                     i1l2226:	
  5767                           
  5768                           ;main.c: 501:     {;main.c: 502:         if (count >= 500)
  5769  05CD  3001               	movlw	1
  5770  05CE  0271               	subwf	_count+1,w
  5771  05CF  30F4               	movlw	244
  5772  05D0  1903               	skipnz
  5773  05D1  0270               	subwf	_count,w
  5774  05D2  1C03               	skipc
  5775  05D3  2DD5               	goto	u203_21
  5776  05D4  2DD6               	goto	u203_20
  5777  05D5                     u203_21:	
  5778  05D5  2DDA               	goto	i1l2230
  5779  05D6                     u203_20:	
  5780  05D6                     i1l2228:	
  5781                           
  5782                           ;main.c: 503:         {;main.c: 504:             motorcycle[1]++;
  5783  05D6  3001               	movlw	1
  5784  05D7  00F5               	movwf	??_conteggioVeicoli
  5785  05D8  0875               	movf	??_conteggioVeicoli,w
  5786  05D9  07D5               	addwf	_motorcycle+1,f
  5787  05DA                     i1l2230:	
  5788                           
  5789                           ;main.c: 506:         if (count >= 1500)
  5790  05DA  3005               	movlw	5
  5791  05DB  0271               	subwf	_count+1,w
  5792  05DC  30DC               	movlw	220
  5793  05DD  1903               	skipnz
  5794  05DE  0270               	subwf	_count,w
  5795  05DF  1C03               	skipc
  5796  05E0  2DE2               	goto	u204_21
  5797  05E1  2DE3               	goto	u204_20
  5798  05E2                     u204_21:	
  5799  05E2  2DE7               	goto	i1l2234
  5800  05E3                     u204_20:	
  5801  05E3                     i1l2232:	
  5802                           
  5803                           ;main.c: 507:         {;main.c: 508:             car[1]++;
  5804  05E3  3001               	movlw	1
  5805  05E4  00F5               	movwf	??_conteggioVeicoli
  5806  05E5  0875               	movf	??_conteggioVeicoli,w
  5807  05E6  07D1               	addwf	_car+1,f
  5808  05E7                     i1l2234:	
  5809                           
  5810                           ;main.c: 510:         if (count >= 3000)
  5811  05E7  300B               	movlw	11
  5812  05E8  0271               	subwf	_count+1,w
  5813  05E9  30B8               	movlw	184
  5814  05EA  1903               	skipnz
  5815  05EB  0270               	subwf	_count,w
  5816  05EC  1C03               	skipc
  5817  05ED  2DEF               	goto	u205_21
  5818  05EE  2DF0               	goto	u205_20
  5819  05EF                     u205_21:	
  5820  05EF  2DF4               	goto	i1l2238
  5821  05F0                     u205_20:	
  5822  05F0                     i1l2236:	
  5823                           
  5824                           ;main.c: 511:         {;main.c: 512:             truck[1]++;
  5825  05F0  3001               	movlw	1
  5826  05F1  00F5               	movwf	??_conteggioVeicoli
  5827  05F2  0875               	movf	??_conteggioVeicoli,w
  5828  05F3  07CD               	addwf	_truck+1,f
  5829  05F4                     i1l2238:	
  5830                           
  5831                           ;main.c: 514:         count = 0;
  5832  05F4  01F0               	clrf	_count
  5833  05F5  01F1               	clrf	_count+1
  5834  05F6                     i1l2240:	
  5835                           
  5836                           ;main.c: 517:     if (!PORTBbits.RB5)
  5837  05F6  1A86               	btfsc	6,5	;volatile
  5838  05F7  2DF9               	goto	u206_21
  5839  05F8  2DFA               	goto	u206_20
  5840  05F9                     u206_21:	
  5841  05F9  2E01               	goto	i1l332
  5842  05FA                     u206_20:	
  5843  05FA                     i1l2242:	
  5844                           
  5845                           ;main.c: 518:     {;main.c: 519:         count++;
  5846  05FA  3001               	movlw	1
  5847  05FB  07F0               	addwf	_count,f
  5848  05FC  1803               	skipnc
  5849  05FD  0AF1               	incf	_count+1,f
  5850  05FE  3000               	movlw	0
  5851  05FF  07F1               	addwf	_count+1,f
  5852                           
  5853                           ;main.c: 520:     }
  5854  0600  2E2E               	goto	i1l2258
  5855  0601                     i1l332:	
  5856                           ;main.c: 521:     else if (PORTBbits.RB5)
  5857                           
  5858  0601  1E86               	btfss	6,5	;volatile
  5859  0602  2E04               	goto	u207_21
  5860  0603  2E05               	goto	u207_20
  5861  0604                     u207_21:	
  5862  0604  2E2E               	goto	i1l2258
  5863  0605                     u207_20:	
  5864  0605                     i1l2244:	
  5865                           
  5866                           ;main.c: 522:     {;main.c: 523:         if (count >= 500)
  5867  0605  3001               	movlw	1
  5868  0606  0271               	subwf	_count+1,w
  5869  0607  30F4               	movlw	244
  5870  0608  1903               	skipnz
  5871  0609  0270               	subwf	_count,w
  5872  060A  1C03               	skipc
  5873  060B  2E0D               	goto	u208_21
  5874  060C  2E0E               	goto	u208_20
  5875  060D                     u208_21:	
  5876  060D  2E12               	goto	i1l2248
  5877  060E                     u208_20:	
  5878  060E                     i1l2246:	
  5879                           
  5880                           ;main.c: 524:         {;main.c: 525:             motorcycle[2]++;
  5881  060E  3001               	movlw	1
  5882  060F  00F5               	movwf	??_conteggioVeicoli
  5883  0610  0875               	movf	??_conteggioVeicoli,w
  5884  0611  07D6               	addwf	_motorcycle+2,f
  5885  0612                     i1l2248:	
  5886                           
  5887                           ;main.c: 527:         if (count >= 1500)
  5888  0612  3005               	movlw	5
  5889  0613  0271               	subwf	_count+1,w
  5890  0614  30DC               	movlw	220
  5891  0615  1903               	skipnz
  5892  0616  0270               	subwf	_count,w
  5893  0617  1C03               	skipc
  5894  0618  2E1A               	goto	u209_21
  5895  0619  2E1B               	goto	u209_20
  5896  061A                     u209_21:	
  5897  061A  2E1F               	goto	i1l2252
  5898  061B                     u209_20:	
  5899  061B                     i1l2250:	
  5900                           
  5901                           ;main.c: 528:         {;main.c: 529:             car[2]++;
  5902  061B  3001               	movlw	1
  5903  061C  00F5               	movwf	??_conteggioVeicoli
  5904  061D  0875               	movf	??_conteggioVeicoli,w
  5905  061E  07D2               	addwf	_car+2,f
  5906  061F                     i1l2252:	
  5907                           
  5908                           ;main.c: 531:         if (count >= 3000)
  5909  061F  300B               	movlw	11
  5910  0620  0271               	subwf	_count+1,w
  5911  0621  30B8               	movlw	184
  5912  0622  1903               	skipnz
  5913  0623  0270               	subwf	_count,w
  5914  0624  1C03               	skipc
  5915  0625  2E27               	goto	u210_21
  5916  0626  2E28               	goto	u210_20
  5917  0627                     u210_21:	
  5918  0627  2E2C               	goto	i1l2256
  5919  0628                     u210_20:	
  5920  0628                     i1l2254:	
  5921                           
  5922                           ;main.c: 532:         {;main.c: 533:             truck[2]++;
  5923  0628  3001               	movlw	1
  5924  0629  00F5               	movwf	??_conteggioVeicoli
  5925  062A  0875               	movf	??_conteggioVeicoli,w
  5926  062B  07CE               	addwf	_truck+2,f
  5927  062C                     i1l2256:	
  5928                           
  5929                           ;main.c: 535:         count = 0;
  5930  062C  01F0               	clrf	_count
  5931  062D  01F1               	clrf	_count+1
  5932  062E                     i1l2258:	
  5933                           
  5934                           ;main.c: 538:     if (!PORTAbits.RA5)
  5935  062E  1A85               	btfsc	5,5	;volatile
  5936  062F  2E31               	goto	u211_21
  5937  0630  2E32               	goto	u211_20
  5938  0631                     u211_21:	
  5939  0631  2E39               	goto	i1l338
  5940  0632                     u211_20:	
  5941  0632                     i1l2260:	
  5942                           
  5943                           ;main.c: 539:     {;main.c: 540:         count++;
  5944  0632  3001               	movlw	1
  5945  0633  07F0               	addwf	_count,f
  5946  0634  1803               	skipnc
  5947  0635  0AF1               	incf	_count+1,f
  5948  0636  3000               	movlw	0
  5949  0637  07F1               	addwf	_count+1,f
  5950                           
  5951                           ;main.c: 541:     }
  5952  0638  2E66               	goto	i1l344
  5953  0639                     i1l338:	
  5954                           ;main.c: 542:     else if (PORTAbits.RA5)
  5955                           
  5956  0639  1E85               	btfss	5,5	;volatile
  5957  063A  2E3C               	goto	u212_21
  5958  063B  2E3D               	goto	u212_20
  5959  063C                     u212_21:	
  5960  063C  2E66               	goto	i1l344
  5961  063D                     u212_20:	
  5962  063D                     i1l2262:	
  5963                           
  5964                           ;main.c: 543:     {;main.c: 544:         if (count >= 500)
  5965  063D  3001               	movlw	1
  5966  063E  0271               	subwf	_count+1,w
  5967  063F  30F4               	movlw	244
  5968  0640  1903               	skipnz
  5969  0641  0270               	subwf	_count,w
  5970  0642  1C03               	skipc
  5971  0643  2E45               	goto	u213_21
  5972  0644  2E46               	goto	u213_20
  5973  0645                     u213_21:	
  5974  0645  2E4A               	goto	i1l2266
  5975  0646                     u213_20:	
  5976  0646                     i1l2264:	
  5977                           
  5978                           ;main.c: 545:         {;main.c: 546:             motorcycle[3]++;
  5979  0646  3001               	movlw	1
  5980  0647  00F5               	movwf	??_conteggioVeicoli
  5981  0648  0875               	movf	??_conteggioVeicoli,w
  5982  0649  07D7               	addwf	_motorcycle+3,f
  5983  064A                     i1l2266:	
  5984                           
  5985                           ;main.c: 548:         if (count >= 1500)
  5986  064A  3005               	movlw	5
  5987  064B  0271               	subwf	_count+1,w
  5988  064C  30DC               	movlw	220
  5989  064D  1903               	skipnz
  5990  064E  0270               	subwf	_count,w
  5991  064F  1C03               	skipc
  5992  0650  2E52               	goto	u214_21
  5993  0651  2E53               	goto	u214_20
  5994  0652                     u214_21:	
  5995  0652  2E57               	goto	i1l2270
  5996  0653                     u214_20:	
  5997  0653                     i1l2268:	
  5998                           
  5999                           ;main.c: 549:         {;main.c: 550:             car[3]++;
  6000  0653  3001               	movlw	1
  6001  0654  00F5               	movwf	??_conteggioVeicoli
  6002  0655  0875               	movf	??_conteggioVeicoli,w
  6003  0656  07D3               	addwf	_car+3,f
  6004  0657                     i1l2270:	
  6005                           
  6006                           ;main.c: 552:         if (count >= 3000)
  6007  0657  300B               	movlw	11
  6008  0658  0271               	subwf	_count+1,w
  6009  0659  30B8               	movlw	184
  6010  065A  1903               	skipnz
  6011  065B  0270               	subwf	_count,w
  6012  065C  1C03               	skipc
  6013  065D  2E5F               	goto	u215_21
  6014  065E  2E60               	goto	u215_20
  6015  065F                     u215_21:	
  6016  065F  2E64               	goto	i1l2274
  6017  0660                     u215_20:	
  6018  0660                     i1l2272:	
  6019                           
  6020                           ;main.c: 553:         {;main.c: 554:             truck[3]++;
  6021  0660  3001               	movlw	1
  6022  0661  00F5               	movwf	??_conteggioVeicoli
  6023  0662  0875               	movf	??_conteggioVeicoli,w
  6024  0663  07CF               	addwf	_truck+3,f
  6025  0664                     i1l2274:	
  6026                           
  6027                           ;main.c: 556:         count = 0;
  6028  0664  01F0               	clrf	_count
  6029  0665  01F1               	clrf	_count+1
  6030  0666                     i1l344:	
  6031  0666  0008               	return
  6032  0667                     __end_of_conteggioVeicoli:	
  6033                           
  6034                           	psect	text21
  6035  0B6C                     __ptext21:	
  6036 ;; *************** function _UART_Read *****************
  6037 ;; Defined at:
  6038 ;;		line 397 in file "main.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;		None
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  1    wreg      unsigned char 
  6045 ;; Registers used:
  6046 ;;		wreg
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6052 ;;      Params:         0       0       0       0       0
  6053 ;;      Locals:         0       0       0       0       0
  6054 ;;      Temps:          0       0       0       0       0
  6055 ;;      Totals:         0       0       0       0       0
  6056 ;;Total ram usage:        0 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; This function calls:
  6059 ;;		Nothing
  6060 ;; This function is called by:
  6061 ;;		_ISR
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _UART_Read
  6067  0B6C                     _UART_Read:	
  6068  0B6C                     i1l2198:	
  6069                           ;incstack = 0
  6070                           ; Regs used in _UART_Read: [wreg]
  6071                           
  6072  0B6C                     i1l288:	
  6073                           ;main.c: 400:         ;
  6074                           
  6075                           
  6076                           ;main.c: 399:     while (!RCIF)
  6077  0B6C  1283               	bcf	3,5	;RP0=0, select bank0
  6078  0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  6079  0B6E  1E8C               	btfss	12,5	;volatile
  6080  0B6F  2B71               	goto	u195_21
  6081  0B70  2B72               	goto	u195_20
  6082  0B71                     u195_21:	
  6083  0B71  2B6C               	goto	i1l288
  6084  0B72                     u195_20:	
  6085  0B72                     i1l290:	
  6086                           
  6087                           ;main.c: 401:     RCIF = 0;
  6088  0B72  128C               	bcf	12,5	;volatile
  6089  0B73                     i1l2200:	
  6090                           
  6091                           ;main.c: 402:     return RCREG;
  6092  0B73  081A               	movf	26,w	;volatile
  6093  0B74                     i1l291:	
  6094  0B74  0008               	return
  6095  0B75                     __end_of_UART_Read:	
  6096  007E                     btemp	set	126	;btemp
  6097  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        33
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     44      69
    BANK1            80      0      71
    BANK3            96      0      96
    BANK2            96     20      92

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   16746
                                             28 BANK0     16    16      0
                                              0 BANK2     20    20      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                          _bitParita
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    2447
                                             20 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1138
                                              0 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4368
                                             16 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1636
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1113
                                              4 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     276
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             15 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3    1204
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    14     8      6     716
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              8     6      2     232
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             16 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              1 COMMON     4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   _bitParita
     _bitChange
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     14      5C      11       95.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     152      12        0.0%
ABS                  0      0     152       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Jun 20 21:37:56 2020

                        pc 0002             ___bmul@product 0022                __CFG_CP$OFF 0000  
                       l83 0CD5                         l98 0C6F               ___awdiv@sign 002D  
                       _s0 00BB                         _s1 00AF                         _s2 01E4  
                       _s3 01D8                         _s4 01CC                         _s5 01C0  
                       _s6 01B4                         _s7 01A8                         _s8 019C  
                       _s9 0190                         fsr 0004        ___wmul@multiplicand 0022  
           _GetDigits$1151 0035                __CFG_LVP$ON 0000                        l110 06EE  
                      l111 06FA                        l113 072F                        l105 069E  
                      l106 06AA                        l212 0274                        l125 07CF  
                      l302 0ED8                        l222 016B                        l214 009B  
                      l119 077E                        l128 07F7                        l305 0BBA  
                      l233 0407                        l228 0310                        l317 0F62  
                      l270 0C17                        l264 0B92                        l440 0C26  
                      l505 0F77                        l273 0D0F                        l257 0577  
                      l442 0C3E                        l267 0C0B                        l515 0FFF  
                      l276 0B78                        l606 0E04                        l278 0B7C  
                      l279 0B7F                        l296 0CA0                        l466 0BD1  
                      l299 0D4F                        l593 0E6D               __CFG_CPD$OFF 0000  
                      _ISR 0D50                        _s10 014C                        _s11 0140  
                      _s12 0134                        _s13 0128                        _s14 011C  
                      _s15 0110                        _car 0050                        _map 0CA1  
                      fsr0 0004                        indf 0000               ___awmod@sign 0026  
             __CFG_FOSC$HS 0000                       ?_ISR 0075                main@colorId 0159  
                     l3000 0C73                       l3010 0C90                       l3002 0C86  
                     l3020 0C08                       l3012 0C96                       l3100 0086  
                     l3022 0C0F                       l3030 0D27                       l3014 0C9A  
                     l3110 0092                       l3102 008A                       l3016 0BF5  
                     l3040 0E6E                       l3032 0D38                       l3008 0C87  
                     l3200 0289                       l3120 009D                       l3112 0092  
                     l3104 008C                       l3018 0C01                       l3042 0E74  
                     l3034 0D43                       l3026 0D13                       l3050 0BA9  
                     l3210 02B4                       l3202 028C                       l3122 00A1  
                     l3114 0092                       l3106 008F                       l3044 0E8A  
                     l3036 0D4B                       l3028 0D1F                       l3052 0BB8  
                     l3060 0BC7                       l3300 0575                       l3212 02C0  
                     l3140 014C                       l3132 012B                       l3116 0095  
                     l3108 0092                       l3046 0EAF                       l3062 0BC9  
                     l3054 0BBE                       l3302 057B                       l3230 031F  
                     l3222 0316                       l3214 02CB                       l3206 0293  
                     l3150 015D                       l3134 012F                       l3126 00AF  
                     l3048 0EC5                       l3064 0BD0                       l3056 0BBF  
                     l3304 057F                       l3224 0317                       l3216 02DD  
                     l3208 02A8                       l3160 0212                       l3152 0162  
                     l3144 0153                       l3128 0122                       l3080 0050  
                     l3410 0F43                       l3058 0BC3                       l3250 0402  
                     l3242 03CF                       l3234 0326                       l3218 0309  
                     l3170 023E                       l3162 0223                       l3146 0156  
                     l3138 013D                       l3090 005D                       l3082 0056  
                     l3260 0452                       l3252 040C                       l3236 037B  
                     l3228 031E                       l3180 0255                       l3172 0243  
                     l3164 0234                       l3156 016D                       l3092 0061  
                     l3084 0057                       l2710 0784                       l3270 0497  
                     l3262 0455                       l3254 0410                       l3238 03C8  
                     l3246 03D8                       l3190 027A                       l3406 026C  
                     l3182 025B                       l3166 0237                       l3158 0201  
                     l3094 0063                       l3086 0059                       l2800 0FE1  
                     l2720 07A0                       l2712 078C                       l2704 0757  
                     l3408 0547                       l3280 04F7                       l3264 0459  
                     l3256 0418                       l3272 04D1                       l3248 03DF  
                     l3192 027B                       l3176 024C                       l3096 0068  
                     l3088 005B                       l2810 0E05                       l2802 0FE7  
                     l2706 076B                       l3282 04FC                       l3274 04D9  
                     l3266 0461                       l3258 0419                       l3194 027D  
                     l3178 0252                       l3186 025F                       l3098 0073  
                     l2820 0E17                       l2812 0E08                       l2804 0FEC  
                     l2740 07E2                       l2732 07A8                       l2716 078D  
                     l2708 0771                       l3284 0501                       l3276 04DE  
                     l3292 053F                       l3268 0494                       l3196 0281  
                     l3188 0279                       l2830 0E2B                       l2822 0E1C  
                     l2814 0E0C                       l2806 0FF7                       l2910 068B  
                     l2902 0671                       l2734 07BC                       l2726 07A4  
                     l2718 0793                       l3286 0516                       l3278 04E3  
                     l3294 0555                       l3198 0283                       l2840 0E51  
                     l2832 0E32                       l2824 0E20                       l2816 0E11  
                     l2680 0C60                       l2672 0C42                       l2920 06BD  
                     l2912 0691                       l2760 0C20                       l2744 07E3  
                     l2736 07C2                       l2752 0B78                       l3296 056D  
                     l3288 052B                       l2850 0E69                       l2842 0E52  
                     l2834 0E36                       l2826 0E22                       l2818 0E13  
                     l2770 0F63                       l2674 0C51                       l2914 06A4  
                     l2762 0C2D                       l2746 07E9                       l2738 07D5  
                     l2690 0750                       l2754 0B7D                       l3298 0571  
                     l2844 0E59                       l2836 0E3A                       l2828 0E28  
                     l2860 0DB6                       l2780 0F8A                       l2772 0F66  
                     l2940 06F6                       l2932 06C5                       l2916 06A6  
                     l2908 0675                       l2764 0C34                       l2756 0C18  
                     l2748 07F6                       l2692 0751                       l2684 0733  
                     l2838 0E4B                       l2846 0E5F                       l2870 0DCA  
                     l2862 0DB8                       l2854 0DAA                       l2790 0FAE  
                     l2782 0F92                       l2774 0F6A                       l2942 0700  
                     l2934 06DB                       l2926 06C1                       l2918 06B0  
                     l2950 0B84                       l2766 0C3A                       l2758 0C1C  
                     l2686 0742                       ?_map 0030                       l2848 0E64  
                     l2880 0DE9                       l2872 0DD1                       l2864 0DBC  
                     l2856 0DAD                       l2792 0FB7                       l2784 0F9A  
                     l2776 0F7B                       l2960 0D0C                       l2944 070D  
                     l2936 06E1                       l2952 0B87                       l2688 074F  
                     l2882 0DF0                       l2874 0DD5                       l2866 0DC1  
                     l2858 0DB1                       l2794 0FC9                       l2786 0F9D  
                     l2778 0F86                       l2962 0D0D                       l2946 0714  
                     l2938 06F4                       l2954 0B8B                       l2698 0753  
                     l2876 0DD9                       l2868 0DC7                       l2884 0DF6  
                     l2980 0EFD                       l2972 0EDC                       l2796 0FD7  
                     l2788 0FAA                       l2964 0D0E                       l2956 0CD6  
                     l2948 0B80                       l2892 0CA1                       l2886 0DFB  
                     l2878 0DE3                       l2990 0F52                       l2982 0F1C  
                     l2966 0ED9                       l2798 0FD8                       l2958 0CDE  
                     l2888 0E00                       l2992 0F58                       l2896 066A  
                     l2994 0F5C                       l2978 0EDE                       l2986 0F3B  
                     l2988 0F4E                       u3000 0DBC                       u3001 0DBB  
                     u3010 0DC7                       u3011 0DC6                       u3100 06A4  
                     u3101 06A3                       u3030 0DD9                       u3110 06BD  
                     u3031 0DD8                       u3111 06BC                       u3040 0DE3  
                     u3200 0CA0                       u3041 0DE2                       u3025 0DCB  
                     u3201 0C9F                       u3130 06EE                       u3131 06ED  
                     u3115 06B9                       u3220 0C0F                       u3060 0DF6  
                     u3140 06F4                       u3124 06D3                       u3221 0C0E  
                     u3061 0DF5                       u3045 0DDF                       u3141 06F3  
                     u3125 06D1                       u3070 0DFB                       u3150 070D  
                     u3215 0BF8                       u3071 0DFA                       u3055 0DEA  
                     u3151 070C                       u3135 06EA                       u3240 0BC3  
                     u3160 0714                       u3320 013C                       u3304 00F2  
                     u3241 0BC2                       u3161 0713                       u3321 013B  
                     u3305 00F0                       u3170 0CED                       u3250 0BD0  
                     u2610 0C51                       u3090 069E                       u3410 0316  
                     u3330 015C                       u3314 0119                       u3235 0D2D  
                     u3251 0BCF                       u2611 0C50                       u3155 0709  
                     u3091 069D                       u3411 0315                       u3331 015B  
                     u3315 0117                       u3180 0F58                       u2604 0C48  
                     u3084 0683                       u2700 07CF                       u3500 0461  
                     u3420 031D                       u3340 023D                       u3181 0F57  
                     u2605 0C46                       u3085 0681                       u2701 07CE  
                     u3501 0460                       u3421 031C                       u3405 02D0  
                     u3341 023C                       u3325 0138                       u3190 0F62  
                     u2710 07D5                       u3510 0494                       u3430 0325  
                     u3350 0252                       u3270 009A                       u3191 0F61  
                     u3175 0CE8                       u3095 069A                       u2711 07D4  
                     u3511 0493                       u3431 0324                       u3351 0251  
                     u3271 0099                       u2800 0F7B                       u2624 0C57  
                     u3520 04D9                       u3440 037B                       u3360 025B  
                     u3280 00AE                       u2801 0F7A                       u2625 0C55  
                     u2705 07CB                       u3521 04D8                       u3441 037A  
                     u3361 025A                       u3281 00AD                       u2810 0F9A  
                     u2634 0C66                       u2730 07F6                       u3530 04E3  
                     u3450 0402                       u3370 0279                       u2811 0F99  
                     u2635 0C64                       u2731 07F5                       u3531 04E2  
                     u3515 0490                       u3451 0401                       u3371 0278  
                     u2900 0E17                       u2724 07DB                       u2660 077E  
                     u2740 0B7C                       u3540 04FC                       u3460 0407  
                     u3380 0281                       u2901 0E16                       u2725 07D9  
                     u2661 077D                       u2645 0745                       u2741 0B7B  
                     u3541 04FB                       u3461 0406                       u3445 0377  
                     u3381 0280                       u3285 00AA                       u2910 0E28  
                     u2830 0FAE                       u2750 0C20                       u2670 0784  
                     u2654 0763                       u3550 0501                       u3470 040C  
                     u3390 0292                       u3294 00CB                       u2911 0E27  
                     u2831 0FAD                       u2751 0C1F                       u2735 07F2  
                     u2671 0783                       u2655 0761                       u3551 0500  
                     u3471 040B                       u3391 0291                       u3295 00C9  
                     u2680 07A0                       u3560 0571                       u3480 0410  
                     u2825 0F9F                       u3617 0B8F                       u2681 079F  
                     u2665 077A                       u3561 0570                       u3481 040F  
                     u2930 0E3A                       u2850 0FC9                       u3570 0575  
                     u3490 0452                       u3627 0C05                       u2931 0E39  
                     u2851 0FC8                       u3571 0574                       u3491 0451  
                     u2780 0C3A                       u3580 057B                       u2925 0E2C  
                     u2845 0FB0                       u2781 0C39                       u2765 0C27  
                     u2685 079C                       u3581 057A                       u2950 0E4B  
                     u2870 0FE7                       u2790 0F6A                       u2694 07B4  
                     u3590 057F                       u2951 0E4A                       u2871 0FE6  
                     u2855 0FC5                       u2791 0F69                       u2775 0C2E  
                     u2695 07B2                       u3591 057E                       u2880 0FEC  
                     u2945 0E3B                       u2881 0FEB                       u2865 0FD9  
                     u2970 0E5F                       u2890 0E0C                       u2971 0E5E  
                     u2955 0E47                       u2891 0E0B                       u2980 0E64  
                     _RCIF 0065                       u2981 0E63                       u2965 0E53  
                     u2990 0DB1                       u2991 0DB0                       _TMR0 0001  
                     _TXIF 0064               __CFG_WRT$OFF 0000                       _disp 005B  
                     _main 0050                       _time 0072                       map@x 0030  
                     btemp 007E           __end_of_ADC_Read 0C18              __CFG_BOREN$ON 0000  
              main@umidita 015B                       start 000E            __end_of_GetTime 0D50  
        ___bmul@multiplier 0023               main@endCiclo 015D                      ??_ISR 0076  
__size_of_conteggioVeicoli 00E3                      ??_map 003A            __end_of___aldiv 1000  
                    ?_main 0075            __end_of___awdiv 0E6E              __CFG_WDTE$OFF 0000  
          __end_of___awmod 0E05            ___awdiv@divisor 0027                      _T1CON 0010  
     bitParita@errorColumn 002A                      i1l320 0591                      i1l332 0601  
                    i1l326 05C9                      i1l344 0666                      i1l290 0B72  
                    i1l338 0639                      i1l354 0DA1                      i1l291 0B74  
                    i1l288 0B6C            ___awdiv@counter 002C                      _RCREG 001A  
                    _TMR1H 000F                      _TMR1L 000E                      _SPBRG 0099  
                    _PORTD 0008                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087                      _TRISD 0088                      _TRISE 0089  
                    _TXREG 0019              __CFG_PWRTE$ON 0000         __size_of_UART_Init 003A  
       __size_of_UART_Read 0009            __end_of_display 0811                      _count 0070  
                    _unita 005F                      main@i 016A                      main@l 0168  
                    _truck 004C                      pclath 000A                      status 0003  
                    wtemp0 007E            __initialization 0011               __end_of_main 0584  
       __size_of_GetDigits 006B                     ??_main 003C          SetDefaultTimers@i 002D  
        SetDefaultTimers@l 002C         __size_of_BuildByte 00C8                 _SetDisplay 0BA6  
            bitChange@dato 0023                     _ADCON0 001F                     _ADCON1 009F  
                   _ADRESH 001E                     _ADRESL 009E           ___awdiv@dividend 0029  
                   i1l2200 0B73                     i1l2210 059E                     i1l2220 05BC  
                   i1l2212 05A2                     i1l2204 0584                     i1l2230 05DA  
                   i1l2214 05AB                     i1l2222 05BE                     i1l2206 058A  
                   i1l2232 05E3                     i1l2240 05F6                     i1l2224 05C2  
                   u200_20 05B8                     i1l2216 05AF                     i1l2208 0595  
                   u200_21 05B7                     i1l2250 061B                     i1l2242 05FA  
                   i1l2234 05E7                     i1l2226 05CD                     i1l2218 05B8  
                   i1l2260 0632                     i1l2252 061F                     i1l2244 0605  
                   i1l2236 05F0                     i1l2228 05D6                     i1l2270 0657  
                   i1l2262 063D                     i1l2254 0628                     i1l2246 060E  
                   i1l2238 05F4                     i1l2272 0660                     i1l2264 0646  
                   i1l2256 062C                     i1l2248 0612                     u201_20 05C2  
                   u201_21 05C1                     i1l2274 0664                     i1l2266 064A  
                   i1l2258 062E                     i1l2268 0653                     i1l2198 0B6C  
                   i1l2550 0D56                     u210_20 0628                     u202_20 05CD  
                   i1l2560 0D67                     i1l2552 0D5A                     u210_21 0627  
                   u202_21 05CC                     i1l2570 0D7F                     i1l2562 0D75  
                   i1l2554 0D5D                     i1l2580 0D91                     i1l2572 0D84  
                   i1l2564 0D79                     i1l2556 0D5F                     i1l2548 0D50  
                   i1l2590 0D9F                     i1l2582 0D97                     i1l2574 0D88  
                   i1l2558 0D63                     i1l2566 0D7A                     u211_20 0632  
                   u203_20 05D6                     i1l2584 0D98                     i1l2576 0D8C  
                   i1l2568 0D7E                     u211_21 0631                     u203_21 05D5  
                   i1l2586 0D99                     i1l2578 0D8D                     i1l2588 0D9D  
                   u212_20 063D                     u204_20 05E3                     u212_21 063C  
                   u204_21 05E2                     u213_20 0646                     u205_20 05F0  
                   u213_21 0645                     u205_21 05EF                     u214_20 0653  
                   u206_20 05FA                     u214_21 0652                     u206_21 05F9  
                   u215_20 0660                     u207_20 0605                     u215_21 065F  
                   u207_21 0604                     u208_20 060E                     u208_21 060D  
                   u209_20 061B                     _INTCON 000B                     u209_21 061A  
                   u253_20 0D56                     u253_21 0D55                     u254_20 0D5A  
                   u254_21 0D59                     u255_20 0D63                     u255_21 0D62  
                   u256_20 0D67                     u256_21 0D66                     u257_20 0D7E  
                   u257_21 0D7D                     u258_20 0D8C                     u258_21 0D8B  
                   u195_20 0B72                     u259_20 0D97                     u195_21 0B71  
                   u259_21 0D96                     u196_20 058A                     u196_21 0589  
                   u197_20 0595                     u197_21 0594                     u198_20 059E  
                   u198_21 059D                     u199_20 05AB                     u199_21 05AA  
                   _TMR0IF 005A                     _TMR1IF 0060                  ??_GetTime 0022  
             ?_UART_TxChar 0075          __end_of_UART_Init 0D10          __end_of_UART_Read 0B75  
                   ___bmul 0BBB                  ??___aldiv 0028            GetTime@shortInt 0025  
                   ___wmul 0C18                  ??___awdiv 002B                     _decine 005E  
                ??___awmod 0024           __end_of_init_ADC 0B93                     _cycled 0060  
         ___awdiv@quotient 002E            ___awmod@divisor 0020            ___awmod@counter 0025  
         __end_of_sendByte 0CA1              main@pressione 015C                  ?_ADC_Read 0020  
                   saved_w 007E    __end_of__initialization 004C          __end_of_GetDigits 0ED9  
     bitParita@sommaColumn 0029  __size_of_SetDefaultTimers 008A        ___bmul@multiplicand 0020  
           __pcstackCOMMON 0075          __end_of_BuildByte 07F8               __pidataBANK0 0003  
             __pidataBANK1 0BD2         __size_of_bitChange 0031           _conteggioVeicoli 0584  
       __size_of_bitParita 00C9                 ??_ADC_Read 0022     SetDefaultTimers@giallo 0024  
              ?_SetDisplay 0020              GetDigits@Time 0030       _dataFromGatewayIndex 0059  
     _timerReadFromGateway 0058                 __pbssBANK0 004C                 __pbssBANK1 00A0  
               __pbssBANK2 0110                 __pbssBANK3 0190                 __pmaintext 0050  
                  ?___bmul 0020                    ?___wmul 0020              sendByte@byte0 0039  
            sendByte@byte1 0034                 __pintentry 0004          __end_of_bitChange 0C70  
               __stringtab 0800          __end_of_bitParita 0730                  ?_init_ADC 0075  
                  _GetTime 0D10            BuildByte@valore 0021            BuildByte@txByte 0025  
                ?_sendByte 0034                 bitChange@n 0020                 _n_semafori 0064  
     __size_of_UART_TxChar 000B                    ___aldiv 0F63            __size_of___bmul 0017  
                  ___awdiv 0E05                    ___awmod 0DAA        __size_of_SetDisplay 0015  
          __size_of___wmul 0027                    __ptext1 0C70                    __ptext2 0B75  
                  __ptext3 0730                    __ptext4 0CA1                    __ptext5 0C18  
                  __ptext6 0B80                    __ptext7 0667                    __ptext8 0C3F  
                  __ptext9 0BBB             main@semaforoId 0158                    _comando 0073  
                  _display 0806               __size_of_ISR 005A                 bitParita@i 0032  
               bitParita@y 002D               __size_of_map 0035           ___awmod@dividend 0022  
         ___aldiv@dividend 0024       BuildByte@sommaColumn 002B                    clrloop0 07F9  
                  main@tmp 015E       end_of_initialization 004C                 ??_init_ADC 0020  
           main@lux_select 015F                 ??_sendByte 0036           _SetDefaultTimers 0ED9  
                _RCSTAbits 0018           ___aldiv@quotient 002B                 _motorcycle 0054  
                _UART_Init 0CD6                  _UART_Read 0B6C                  _PORTAbits 0005  
                _PORTBbits 0006               SetDisplay@d1 0023               SetDisplay@d2 0020  
             SetDisplay@d3 0021                  _TRISCbits 0087          __size_of_ADC_Read 0026  
 __end_of_conteggioVeicoli 0667                 map@out_max 0038          bitParita@errorRow 002C  
               map@out_min 0036                  _TXSTAbits 0098                  _GetDigits 0E6E  
        bitParita@sommaRow 0028             __end_of___bmul 0BD2             __end_of___wmul 0C3F  
               ?_UART_Init 002F                 ?_UART_Read 0075                  _BuildByte 0730  
        BuildByte@sommaRow 002A        start_initialization 0011                __end_of_ISR 0DAA  
             ??_SetDisplay 0023                __end_of_map 0CD6                 ?_GetDigits 0030  
                 ??___bmul 0021             ADC_Read@canale 0023                   ??___wmul 0024  
               init_fetch0 0B93                __pdataBANK0 0064                __pdataBANK1 00C7  
       __end_of_SetDisplay 0BBB                 ?_BuildByte 0020                __pbssCOMMON 0070  
                ___latbits 0002              __pcstackBANK0 0020              __pcstackBANK2 0158  
                 ?_GetTime 0020                  _bitChange 0C3F      SetDefaultTimers@verde 0022  
    SetDefaultTimers@rosso 0020          __size_of_init_ADC 0013                  _bitParita 0667  
                _centinaia 005D          __size_of_sendByte 0031                   ?___aldiv 0020  
                 ?___awdiv 0027                   ?___awmod 0020                ??_UART_Init 0031  
              ??_UART_Read 0075             BuildByte@i_342 0032                  __pstrings 0800  
           BuildByte@y_343 002E             sendByte@valore 0035             sendByte@txByte 003A  
           BuildByte@byte0 0024             BuildByte@byte1 0020   __end_of_SetDefaultTimers 0F63  
                 _ADC_Read 0BF2                  _count_lux 0074                  _countdown 005A  
            UART_TxChar@ch 0020            ___aldiv@divisor 0020          interrupt_function 0004  
          ___aldiv@counter 0029                 ?_bitChange 0020             ___wmul@product 0024  
                clear_ram0 07F8                   _PIE1bits 008C              ??_UART_TxChar 0020  
               ?_bitParita 0075                ??_GetDigits 0032                   _GO_nDONE 00FA  
        UART_Init@baudrate 002F                ??_BuildByte 0022                  map@in_max 0034  
                map@in_min 0032                __stringbase 0805                  main@i_442 0165  
                main@i_436 0166                  main@i_437 0163                  main@i_439 0164  
                main@i_449 0169          ___wmul@multiplier 0020                  main@index 0160  
             GetTime@index 0024          ?_conteggioVeicoli 0075               _secondPassed 0061  
       ??_conteggioVeicoli 0075           __size_of_GetTime 0040                   _Semafori 00C7  
           bitParita@i_330 0034                _readGateway 0062             bitParita@y_331 002F  
         __size_of___aldiv 009D        __end_of_UART_TxChar 0B80           __size_of___awdiv 0069  
         __size_of___awmod 005B             bitParita@error 002B         __end_of__stringtab 0806  
                sendByte@i 003B                   __ptext10 0CD6                   __ptext11 0F63  
                 __ptext20 0584                   __ptext12 0BA6                   __ptext21 0B6C  
                 __ptext13 0ED9                   __ptext14 0D10                   __ptext15 0E6E  
                 __ptext16 0DAA                   __ptext17 0E05                   __ptext18 0BF2  
                 __ptext19 0D50                   _init_ADC 0B80                bitParita@rx 0031  
              ??_bitChange 0021              __size_of_main 0534            _dataFromGateway 00A0  
                 _old_disp 005C                ??_bitParita 0024                   _sendByte 0C70  
                 main@temp 015A                   main@time 0161                GetTime@time 0026  
               _INTCONbits 000B                   init_ram0 0B97                   intlevel1 0000  
          _readGatewayDone 0063                  stringcode 0800                _UART_TxChar 0B75  
               _OPTION_REG 0081            SetDisplay@value 0022                   stringdir 0800  
                 stringtab 0800          ?_SetDefaultTimers 0020               ___aldiv@sign 002A  
       ??_SetDefaultTimers 0026                 BuildByte@i 0030                 BuildByte@y 002C  
