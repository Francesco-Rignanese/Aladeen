

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Jun 20 19:18:50 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  07FD                     __pidataBANK0:	
   202                           
   203                           ;initializer for _n_semafori
   204  07FD  340F               	retlw	15
   205                           
   206                           	psect	idataBANK1
   207  0C0F                     __pidataBANK1:	
   208                           
   209                           ;initializer for _Semafori
   210  0C0F  34BB               	retlw	low (_s0| 0)
   211  0C10  3400               	retlw	high (_s0| 0)
   212  0C11  34AF               	retlw	low (_s1| 0)
   213  0C12  3400               	retlw	high (_s1| 0)
   214  0C13  34E4               	retlw	low (_s2| (0+256))
   215  0C14  3401               	retlw	high (_s2| (0+256))
   216  0C15  34D8               	retlw	low (_s3| (0+256))
   217  0C16  3401               	retlw	high (_s3| (0+256))
   218  0C17  34CC               	retlw	low (_s4| (0+256))
   219  0C18  3401               	retlw	high (_s4| (0+256))
   220  0C19  34C0               	retlw	low (_s5| (0+256))
   221  0C1A  3401               	retlw	high (_s5| (0+256))
   222  0C1B  34B4               	retlw	low (_s6| (0+256))
   223  0C1C  3401               	retlw	high (_s6| (0+256))
   224  0C1D  34A8               	retlw	low (_s7| (0+256))
   225  0C1E  3401               	retlw	high (_s7| (0+256))
   226  0C1F  349C               	retlw	low (_s8| (0+256))
   227  0C20  3401               	retlw	high (_s8| (0+256))
   228  0C21  3490               	retlw	low (_s9| (0+256))
   229  0C22  3401               	retlw	high (_s9| (0+256))
   230  0C23  344C               	retlw	low (_s10| (0+256))
   231  0C24  3401               	retlw	high (_s10| (0+256))
   232  0C25  3440               	retlw	low (_s11| (0+256))
   233  0C26  3401               	retlw	high (_s11| (0+256))
   234  0C27  3434               	retlw	low (_s12| (0+256))
   235  0C28  3401               	retlw	high (_s12| (0+256))
   236  0C29  3428               	retlw	low (_s13| (0+256))
   237  0C2A  3401               	retlw	high (_s13| (0+256))
   238  0C2B  341C               	retlw	low (_s14| (0+256))
   239  0C2C  3401               	retlw	high (_s14| (0+256))
   240  0C2D  3410               	retlw	low (_s15| (0+256))
   241  0C2E  3401               	retlw	high (_s15| (0+256))
   242                           
   243                           	psect	strings
   244  0800                     __pstrings:	
   245  0800                     stringtab:	
   246  0800                     __stringtab:	
   247  0800                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250  0800                     stringdir:	
   251  0800  3008               	movlw	high stringdir
   252  0801  008A               	movwf	10
   253  0802  0804               	movf	4,w
   254  0803  0A84               	incf	4,f
   255  0804  0782               	addwf	2,f
   256  0805                     __stringbase:	
   257  0805  3400               	retlw	0
   258  0806                     __end_of__stringtab:	
   259  0806                     _display:	
   260  0806  343F               	retlw	63
   261  0807  3406               	retlw	6
   262  0808  345B               	retlw	91
   263  0809  344F               	retlw	79
   264  080A  3466               	retlw	102
   265  080B  346D               	retlw	109
   266  080C  347D               	retlw	125
   267  080D  3407               	retlw	7
   268  080E  347F               	retlw	127
   269  080F  346F               	retlw	111
   270  0810  3400               	retlw	0
   271  0811                     __end_of_display:	
   272  0006                     _PORTBbits	set	6
   273  0008                     _PORTD	set	8
   274  0005                     _PORTAbits	set	5
   275  001A                     _RCREG	set	26
   276  0019                     _TXREG	set	25
   277  000B                     _INTCONbits	set	11
   278  0018                     _RCSTAbits	set	24
   279  001E                     _ADRESH	set	30
   280  001F                     _ADCON0	set	31
   281  000E                     _TMR1L	set	14
   282  000F                     _TMR1H	set	15
   283  0010                     _T1CON	set	16
   284  0001                     _TMR0	set	1
   285  000B                     _INTCON	set	11
   286  0060                     _TMR1IF	set	96
   287  005A                     _TMR0IF	set	90
   288  0065                     _RCIF	set	101
   289  0064                     _TXIF	set	100
   290  00FA                     _GO_nDONE	set	250
   291  008C                     _PIE1bits	set	140
   292  0099                     _SPBRG	set	153
   293  0098                     _TXSTAbits	set	152
   294  0087                     _TRISCbits	set	135
   295  009E                     _ADRESL	set	158
   296  009F                     _ADCON1	set	159
   297  0085                     _TRISA	set	133
   298  0081                     _OPTION_REG	set	129
   299  0089                     _TRISE	set	137
   300  0088                     _TRISD	set	136
   301  0087                     _TRISC	set	135
   302  0086                     _TRISB	set	134
   303                           
   304                           ; #config settings
   305  0000                     
   306                           	psect	cinit
   307  0011                     start_initialization:	
   308  0011                     __initialization:	
   309                           
   310                           ; Initialize objects allocated to BANK1
   311  0011  1383               	bcf	3,7	;select IRP bank0
   312  0012  30E7               	movlw	low (__pdataBANK1+32)
   313  0013  00FD               	movwf	btemp+-1
   314  0014  300C               	movlw	high __pidataBANK1
   315  0015  00FE               	movwf	btemp
   316  0016  300F               	movlw	low __pidataBANK1
   317  0017  00FF               	movwf	btemp+1
   318  0018  30C7               	movlw	low __pdataBANK1
   319  0019  0084               	movwf	4
   320  001A  120A  158A  23D4  120A  118A  	fcall	init_ram0
   321                           
   322                           ; Initialize objects allocated to BANK0
   323  001F  120A  118A  27FD  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   324  0024  00E4               	movwf	__pdataBANK0& (0+127)
   325                           
   326                           ; Clear objects allocated to BANK3
   327  0025  1783               	bsf	3,7	;select IRP bank2
   328  0026  3090               	movlw	low __pbssBANK3
   329  0027  0084               	movwf	4
   330  0028  30F0               	movlw	low (__pbssBANK3+96)
   331  0029  120A  158A  23A1  120A  118A  	fcall	clear_ram0
   332                           
   333                           ; Clear objects allocated to BANK2
   334  002E  3010               	movlw	low __pbssBANK2
   335  002F  0084               	movwf	4
   336  0030  3058               	movlw	low (__pbssBANK2+72)
   337  0031  120A  158A  23A1  120A  118A  	fcall	clear_ram0
   338                           
   339                           ; Clear objects allocated to BANK1
   340  0036  1383               	bcf	3,7	;select IRP bank0
   341  0037  30A0               	movlw	low __pbssBANK1
   342  0038  0084               	movwf	4
   343  0039  30C7               	movlw	low (__pbssBANK1+39)
   344  003A  120A  158A  23A1  120A  118A  	fcall	clear_ram0
   345                           
   346                           ; Clear objects allocated to BANK0
   347  003F  304C               	movlw	low __pbssBANK0
   348  0040  0084               	movwf	4
   349  0041  3064               	movlw	low (__pbssBANK0+24)
   350  0042  120A  158A  23A1  120A  118A  	fcall	clear_ram0
   351                           
   352                           ; Clear objects allocated to COMMON
   353  0047  01F0               	clrf	__pbssCOMMON& (0+127)
   354  0048  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   355  0049  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   356  004A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   357  004B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   358  004C                     end_of_initialization:	
   359                           ;End of C runtime variable initialization code
   360                           
   361  004C                     __end_of__initialization:	
   362  004C  0183               	clrf	3
   363  004D  120A  118A  2850   	ljmp	_main	;jump to C main() function
   364                           
   365                           	psect	bssCOMMON
   366  0070                     __pbssCOMMON:	
   367  0070                     _count:	
   368  0070                     	ds	2
   369  0072                     _time:	
   370  0072                     	ds	1
   371  0073                     _comando:	
   372  0073                     	ds	1
   373  0074                     _count_lux:	
   374  0074                     	ds	1
   375                           
   376                           	psect	bssBANK0
   377  004C                     __pbssBANK0:	
   378  004C                     _truck:	
   379  004C                     	ds	4
   380  0050                     _car:	
   381  0050                     	ds	4
   382  0054                     _motorcycle:	
   383  0054                     	ds	4
   384  0058                     _timerReadFromGateway:	
   385  0058                     	ds	1
   386  0059                     _dataFromGatewayIndex:	
   387  0059                     	ds	1
   388  005A                     _countdown:	
   389  005A                     	ds	1
   390  005B                     _disp:	
   391  005B                     	ds	1
   392  005C                     _old_disp:	
   393  005C                     	ds	1
   394  005D                     _centinaia:	
   395  005D                     	ds	1
   396  005E                     _decine:	
   397  005E                     	ds	1
   398  005F                     _unita:	
   399  005F                     	ds	1
   400  0060                     _cycled:	
   401  0060                     	ds	1
   402  0061                     _secondPassed:	
   403  0061                     	ds	1
   404  0062                     _readGateway:	
   405  0062                     	ds	1
   406  0063                     _readGatewayDone:	
   407  0063                     	ds	1
   408                           
   409                           	psect	dataBANK0
   410  0064                     __pdataBANK0:	
   411  0064                     _n_semafori:	
   412  0064                     	ds	1
   413                           
   414                           	psect	bssBANK1
   415  00A0                     __pbssBANK1:	
   416  00A0                     _dataFromGateway:	
   417  00A0                     	ds	15
   418  00AF                     _s1:	
   419  00AF                     	ds	12
   420  00BB                     _s0:	
   421  00BB                     	ds	12
   422                           
   423                           	psect	dataBANK1
   424  00C7                     __pdataBANK1:	
   425  00C7                     _Semafori:	
   426  00C7                     	ds	32
   427                           
   428                           	psect	bssBANK3
   429  0190                     __pbssBANK3:	
   430  0190                     _s9:	
   431  0190                     	ds	12
   432  019C                     _s8:	
   433  019C                     	ds	12
   434  01A8                     _s7:	
   435  01A8                     	ds	12
   436  01B4                     _s6:	
   437  01B4                     	ds	12
   438  01C0                     _s5:	
   439  01C0                     	ds	12
   440  01CC                     _s4:	
   441  01CC                     	ds	12
   442  01D8                     _s3:	
   443  01D8                     	ds	12
   444  01E4                     _s2:	
   445  01E4                     	ds	12
   446                           
   447                           	psect	bssBANK2
   448  0110                     __pbssBANK2:	
   449  0110                     _s15:	
   450  0110                     	ds	12
   451  011C                     _s14:	
   452  011C                     	ds	12
   453  0128                     _s13:	
   454  0128                     	ds	12
   455  0134                     _s12:	
   456  0134                     	ds	12
   457  0140                     _s11:	
   458  0140                     	ds	12
   459  014C                     _s10:	
   460  014C                     	ds	12
   461                           
   462                           	psect	inittext
   463  0BD0                     init_fetch0:	
   464                           ;	Called with low address in FSR and high address in W
   465                           
   466  0BD0  087E               	movf	btemp,w
   467  0BD1  008A               	movwf	10
   468  0BD2  087F               	movf	btemp+1,w
   469  0BD3  0082               	movwf	2
   470  0BD4                     init_ram0:	
   471                           ;Called with:
   472                           ;	high address of idata address in btemp 
   473                           ;	low address of idata address in btemp+1 
   474                           ;	low address of data in FSR
   475                           ;	high address + 1 of data in btemp-1
   476                           
   477  0BD4  120A  158A  23D0  120A  158A  	fcall	init_fetch0
   478  0BD9  0080               	movwf	0
   479  0BDA  0A84               	incf	4,f
   480  0BDB  0804               	movf	4,w
   481  0BDC  067D               	xorwf	btemp+-1,w
   482  0BDD  1903               	btfsc	3,2
   483  0BDE  3400               	retlw	0
   484  0BDF  0AFF               	incf	btemp+1,f
   485  0BE0  1903               	btfsc	3,2
   486  0BE1  0AFE               	incf	btemp,f
   487  0BE2  2BD4               	goto	init_ram0
   488                           
   489                           	psect	clrtext
   490  0BA1                     clear_ram0:	
   491                           ;	Called with FSR containing the base address, and
   492                           ;	W with the last address+1
   493                           
   494  0BA1  0064               	clrwdt	;clear the watchdog before getting into this loop
   495  0BA2                     clrloop0:	
   496  0BA2  0180               	clrf	0	;clear RAM location pointed to by FSR
   497  0BA3  0A84               	incf	4,f	;increment pointer
   498  0BA4  0604               	xorwf	4,w	;XOR with final address
   499  0BA5  1903               	btfsc	3,2	;have we reached the end yet?
   500  0BA6  3400               	retlw	0	;all done for this memory range, return
   501  0BA7  0604               	xorwf	4,w	;XOR again to restore value
   502  0BA8  2BA2               	goto	clrloop0	;do the next byte
   503                           
   504                           	psect	cstackBANK2
   505  0158                     __pcstackBANK2:	
   506  0158                     	ds	2
   507  015A                     main@semaforoId:	
   508                           
   509                           ; 1 bytes @ 0x2
   510  015A                     	ds	1
   511  015B                     main@colorId:	
   512                           
   513                           ; 1 bytes @ 0x3
   514  015B                     	ds	1
   515  015C                     main@temp:	
   516                           
   517                           ; 1 bytes @ 0x4
   518  015C                     	ds	1
   519  015D                     main@endCiclo:	
   520                           
   521                           ; 1 bytes @ 0x5
   522  015D                     	ds	1
   523  015E                     main@tmp:	
   524                           
   525                           ; 1 bytes @ 0x6
   526  015E                     	ds	1
   527  015F                     main@time:	
   528                           
   529                           ; 2 bytes @ 0x7
   530  015F                     	ds	2
   531  0161                     main@lux_select:	
   532                           
   533                           ; 1 bytes @ 0x9
   534  0161                     	ds	1
   535  0162                     main@index:	
   536                           
   537                           ; 1 bytes @ 0xA
   538  0162                     	ds	1
   539  0163                     main@i_437:	
   540                           
   541                           ; 1 bytes @ 0xB
   542  0163                     	ds	1
   543  0164                     main@i_439:	
   544                           
   545                           ; 1 bytes @ 0xC
   546  0164                     	ds	1
   547  0165                     main@i_442:	
   548                           
   549                           ; 1 bytes @ 0xD
   550  0165                     	ds	1
   551  0166                     main@i_436:	
   552                           
   553                           ; 2 bytes @ 0xE
   554  0166                     	ds	2
   555  0168                     main@l:	
   556                           
   557                           ; 1 bytes @ 0x10
   558  0168                     	ds	1
   559  0169                     main@i_449:	
   560                           
   561                           ; 1 bytes @ 0x11
   562  0169                     	ds	1
   563  016A                     main@i:	
   564                           
   565                           ; 2 bytes @ 0x12
   566  016A                     	ds	2
   567                           
   568                           	psect	cstackCOMMON
   569  0075                     __pcstackCOMMON:	
   570  0075                     ?_init_ADC:	
   571  0075                     ?_bitParita:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0075                     ?_main:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0075                     ?_UART_TxChar:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0075                     ?_UART_Read:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0075                     ??_UART_Read:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0075                     ?_conteggioVeicoli:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0075                     ??_conteggioVeicoli:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0075                     ?_ISR:	
   593                           ; 1 bytes @ 0x0
   594                           
   595                           
   596                           ; 1 bytes @ 0x0
   597  0075                     	ds	1
   598  0076                     ??_ISR:	
   599                           
   600                           ; 1 bytes @ 0x1
   601  0076                     	ds	4
   602                           
   603                           	psect	cstackBANK0
   604  0020                     __pcstackBANK0:	
   605  0020                     ??_init_ADC:	
   606  0020                     ?_SetDefaultTimers:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0020                     ?_SetDisplay:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0020                     ?_BuildByte:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0020                     ?_bitChange:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0020                     ??_UART_TxChar:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0020                     ?___bmul:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0020                     ?_ADC_Read:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0020                     ?_GetTime:	
   628                           ; 2 bytes @ 0x0
   629                           
   630  0020                     ?___wmul:	
   631                           ; 2 bytes @ 0x0
   632                           
   633  0020                     ?___awmod:	
   634                           ; 2 bytes @ 0x0
   635                           
   636  0020                     ?___aldiv:	
   637                           ; 2 bytes @ 0x0
   638                           
   639  0020                     bitChange@n:	
   640                           ; 4 bytes @ 0x0
   641                           
   642  0020                     BuildByte@byte1:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0020                     UART_TxChar@ch:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0020                     SetDisplay@d2:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0020                     ___bmul@multiplicand:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0020                     SetDefaultTimers@rosso:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0020                     ___wmul@multiplier:	
   658                           ; 2 bytes @ 0x0
   659                           
   660  0020                     ___awmod@divisor:	
   661                           ; 2 bytes @ 0x0
   662                           
   663  0020                     ___aldiv@divisor:	
   664                           ; 2 bytes @ 0x0
   665                           
   666                           
   667                           ; 4 bytes @ 0x0
   668  0020                     	ds	1
   669  0021                     ??_bitChange:	
   670  0021                     ??___bmul:	
   671                           ; 1 bytes @ 0x1
   672                           
   673  0021                     BuildByte@valore:	
   674                           ; 1 bytes @ 0x1
   675                           
   676  0021                     SetDisplay@d3:	
   677                           ; 1 bytes @ 0x1
   678                           
   679                           
   680                           ; 1 bytes @ 0x1
   681  0021                     	ds	1
   682  0022                     ??_ADC_Read:	
   683  0022                     ??_GetTime:	
   684                           ; 1 bytes @ 0x2
   685                           
   686  0022                     ??_BuildByte:	
   687                           ; 1 bytes @ 0x2
   688                           
   689  0022                     SetDisplay@value:	
   690                           ; 1 bytes @ 0x2
   691                           
   692  0022                     ___bmul@product:	
   693                           ; 1 bytes @ 0x2
   694                           
   695  0022                     SetDefaultTimers@verde:	
   696                           ; 1 bytes @ 0x2
   697                           
   698  0022                     ___wmul@multiplicand:	
   699                           ; 2 bytes @ 0x2
   700                           
   701  0022                     ___awmod@dividend:	
   702                           ; 2 bytes @ 0x2
   703                           
   704                           
   705                           ; 2 bytes @ 0x2
   706  0022                     	ds	1
   707  0023                     ??_SetDisplay:	
   708  0023                     bitChange@dato:	
   709                           ; 1 bytes @ 0x3
   710                           
   711  0023                     ADC_Read@canale:	
   712                           ; 1 bytes @ 0x3
   713                           
   714  0023                     SetDisplay@d1:	
   715                           ; 1 bytes @ 0x3
   716                           
   717  0023                     ___bmul@multiplier:	
   718                           ; 1 bytes @ 0x3
   719                           
   720                           
   721                           ; 1 bytes @ 0x3
   722  0023                     	ds	1
   723  0024                     ??_bitParita:	
   724  0024                     ??___wmul:	
   725                           ; 1 bytes @ 0x4
   726                           
   727  0024                     ??___awmod:	
   728                           ; 1 bytes @ 0x4
   729                           
   730  0024                     BuildByte@byte0:	
   731                           ; 1 bytes @ 0x4
   732                           
   733  0024                     GetTime@index:	
   734                           ; 1 bytes @ 0x4
   735                           
   736  0024                     SetDefaultTimers@giallo:	
   737                           ; 1 bytes @ 0x4
   738                           
   739  0024                     ___wmul@product:	
   740                           ; 2 bytes @ 0x4
   741                           
   742  0024                     ___aldiv@dividend:	
   743                           ; 2 bytes @ 0x4
   744                           
   745                           
   746                           ; 4 bytes @ 0x4
   747  0024                     	ds	1
   748  0025                     GetTime@shortInt:	
   749  0025                     ___awmod@counter:	
   750                           ; 1 bytes @ 0x5
   751                           
   752  0025                     BuildByte@txByte:	
   753                           ; 1 bytes @ 0x5
   754                           
   755                           
   756                           ; 5 bytes @ 0x5
   757  0025                     	ds	1
   758  0026                     ??_SetDefaultTimers:	
   759  0026                     ___awmod@sign:	
   760                           ; 1 bytes @ 0x6
   761                           
   762  0026                     GetTime@time:	
   763                           ; 1 bytes @ 0x6
   764                           
   765                           
   766                           ; 2 bytes @ 0x6
   767  0026                     	ds	1
   768  0027                     ?___awdiv:	
   769  0027                     ___awdiv@divisor:	
   770                           ; 2 bytes @ 0x7
   771                           
   772                           
   773                           ; 2 bytes @ 0x7
   774  0027                     	ds	1
   775  0028                     ??___aldiv:	
   776  0028                     bitParita@sommaRow:	
   777                           ; 1 bytes @ 0x8
   778                           
   779                           
   780                           ; 1 bytes @ 0x8
   781  0028                     	ds	1
   782  0029                     bitParita@sommaColumn:	
   783  0029                     ___aldiv@counter:	
   784                           ; 1 bytes @ 0x9
   785                           
   786  0029                     ___awdiv@dividend:	
   787                           ; 1 bytes @ 0x9
   788                           
   789                           
   790                           ; 2 bytes @ 0x9
   791  0029                     	ds	1
   792  002A                     bitParita@errorColumn:	
   793  002A                     BuildByte@sommaRow:	
   794                           ; 1 bytes @ 0xA
   795                           
   796  002A                     ___aldiv@sign:	
   797                           ; 1 bytes @ 0xA
   798                           
   799                           
   800                           ; 1 bytes @ 0xA
   801  002A                     	ds	1
   802  002B                     ??___awdiv:	
   803  002B                     bitParita@error:	
   804                           ; 1 bytes @ 0xB
   805                           
   806  002B                     BuildByte@sommaColumn:	
   807                           ; 1 bytes @ 0xB
   808                           
   809  002B                     ___aldiv@quotient:	
   810                           ; 1 bytes @ 0xB
   811                           
   812                           
   813                           ; 4 bytes @ 0xB
   814  002B                     	ds	1
   815  002C                     bitParita@errorRow:	
   816  002C                     SetDefaultTimers@l:	
   817                           ; 1 bytes @ 0xC
   818                           
   819  002C                     ___awdiv@counter:	
   820                           ; 1 bytes @ 0xC
   821                           
   822  002C                     BuildByte@y:	
   823                           ; 1 bytes @ 0xC
   824                           
   825                           
   826                           ; 2 bytes @ 0xC
   827  002C                     	ds	1
   828  002D                     SetDefaultTimers@i:	
   829  002D                     ___awdiv@sign:	
   830                           ; 1 bytes @ 0xD
   831                           
   832  002D                     bitParita@y:	
   833                           ; 1 bytes @ 0xD
   834                           
   835                           
   836                           ; 2 bytes @ 0xD
   837  002D                     	ds	1
   838  002E                     BuildByte@y_343:	
   839  002E                     ___awdiv@quotient:	
   840                           ; 2 bytes @ 0xE
   841                           
   842                           
   843                           ; 2 bytes @ 0xE
   844  002E                     	ds	1
   845  002F                     ?_UART_Init:	
   846  002F                     bitParita@y_331:	
   847                           ; 1 bytes @ 0xF
   848                           
   849  002F                     UART_Init@baudrate:	
   850                           ; 2 bytes @ 0xF
   851                           
   852                           
   853                           ; 2 bytes @ 0xF
   854  002F                     	ds	1
   855  0030                     ?_GetDigits:	
   856  0030                     ?_map:	
   857                           ; 1 bytes @ 0x10
   858                           
   859  0030                     map@x:	
   860                           ; 2 bytes @ 0x10
   861                           
   862  0030                     BuildByte@i:	
   863                           ; 2 bytes @ 0x10
   864                           
   865  0030                     GetDigits@Time:	
   866                           ; 2 bytes @ 0x10
   867                           
   868                           
   869                           ; 2 bytes @ 0x10
   870  0030                     	ds	1
   871  0031                     ??_UART_Init:	
   872  0031                     bitParita@rx:	
   873                           ; 1 bytes @ 0x11
   874                           
   875                           
   876                           ; 1 bytes @ 0x11
   877  0031                     	ds	1
   878  0032                     ??_GetDigits:	
   879  0032                     map@in_min:	
   880                           ; 1 bytes @ 0x12
   881                           
   882  0032                     bitParita@i:	
   883                           ; 2 bytes @ 0x12
   884                           
   885  0032                     BuildByte@i_342:	
   886                           ; 2 bytes @ 0x12
   887                           
   888                           
   889                           ; 2 bytes @ 0x12
   890  0032                     	ds	2
   891  0034                     ?_sendByte:	
   892  0034                     sendByte@byte1:	
   893                           ; 1 bytes @ 0x14
   894                           
   895  0034                     map@in_max:	
   896                           ; 1 bytes @ 0x14
   897                           
   898  0034                     bitParita@i_330:	
   899                           ; 2 bytes @ 0x14
   900                           
   901                           
   902                           ; 2 bytes @ 0x14
   903  0034                     	ds	1
   904  0035                     sendByte@valore:	
   905  0035                     _GetDigits$1151:	
   906                           ; 1 bytes @ 0x15
   907                           
   908                           
   909                           ; 2 bytes @ 0x15
   910  0035                     	ds	1
   911  0036                     ??_sendByte:	
   912  0036                     map@out_min:	
   913                           ; 1 bytes @ 0x16
   914                           
   915                           
   916                           ; 2 bytes @ 0x16
   917  0036                     	ds	2
   918  0038                     map@out_max:	
   919                           
   920                           ; 2 bytes @ 0x18
   921  0038                     	ds	1
   922  0039                     sendByte@byte0:	
   923                           
   924                           ; 1 bytes @ 0x19
   925  0039                     	ds	1
   926  003A                     ??_map:	
   927  003A                     sendByte@txByte:	
   928                           ; 1 bytes @ 0x1A
   929                           
   930                           
   931                           ; 1 bytes @ 0x1A
   932  003A                     	ds	1
   933  003B                     sendByte@i:	
   934                           
   935                           ; 1 bytes @ 0x1B
   936  003B                     	ds	1
   937  003C                     ??_main:	
   938                           
   939                           ; 1 bytes @ 0x1C
   940  003C                     	ds	16
   941                           
   942                           	psect	maintext
   943  0050                     __pmaintext:	
   944 ;;
   945 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   946 ;;
   947 ;; *************** function _main *****************
   948 ;; Defined at:
   949 ;;		line 129 in file "debug.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;		None
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  i               1   17[BANK2 ] unsigned char 
   954 ;;  index           1   10[BANK2 ] unsigned char 
   955 ;;  colorId         1    3[BANK2 ] unsigned char 
   956 ;;  semaforoId      1    2[BANK2 ] unsigned char 
   957 ;;  i               1   13[BANK2 ] unsigned char 
   958 ;;  i               1   12[BANK2 ] unsigned char 
   959 ;;  i               1   11[BANK2 ] unsigned char 
   960 ;;  i               2   14[BANK2 ] int 
   961 ;;  i               2   18[BANK2 ] int 
   962 ;;  l               1   16[BANK2 ] unsigned char 
   963 ;;  tmp             1    6[BANK2 ] unsigned char 
   964 ;;  time            2    7[BANK2 ] int 
   965 ;;  lux_select      1    9[BANK2 ] unsigned char 
   966 ;;  endCiclo        1    5[BANK2 ] struct .
   967 ;;  temp            1    4[BANK2 ] unsigned char 
   968 ;;  pressione       1    0        unsigned char 
   969 ;;  umidita         1    0        unsigned char 
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      void 
   972 ;; Registers used:
   973 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   974 ;; Tracked objects:
   975 ;;		On entry : B00/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   979 ;;      Params:         0       0       0       0       0
   980 ;;      Locals:         0       0       0       0      20
   981 ;;      Temps:          0      16       0       0       0
   982 ;;      Totals:         0      16       0       0      20
   983 ;;Total ram usage:       36 bytes
   984 ;; Hardware stack levels required when called:    4
   985 ;; This function calls:
   986 ;;		_ADC_Read
   987 ;;		_GetDigits
   988 ;;		_GetTime
   989 ;;		_SetDefaultTimers
   990 ;;		_SetDisplay
   991 ;;		_UART_Init
   992 ;;		___awmod
   993 ;;		___bmul
   994 ;;		_bitParita
   995 ;;		_init_ADC
   996 ;;		_map
   997 ;;		_sendByte
   998 ;; This function is called by:
   999 ;;		Startup code after reset
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           
  1004                           ;psect for function _main
  1005  0050                     _main:	
  1006  0050                     l3078:	
  1007                           ;incstack = 0
  1008                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1009                           
  1010                           
  1011                           ;debug.c: 131:     TRISB = 0x1F;
  1012  0050  301F               	movlw	31
  1013  0051  1683               	bsf	3,5	;RP0=1, select bank1
  1014  0052  1303               	bcf	3,6	;RP1=0, select bank1
  1015  0053  0086               	movwf	6	;volatile
  1016                           
  1017                           ;debug.c: 132:     TRISC = 0x80;
  1018  0054  3080               	movlw	128
  1019  0055  0087               	movwf	7	;volatile
  1020  0056                     l3080:	
  1021                           
  1022                           ;debug.c: 133:     TRISD = 0x00;
  1023  0056  0188               	clrf	8	;volatile
  1024  0057                     l3082:	
  1025                           
  1026                           ;debug.c: 134:     TRISE = 0x01;
  1027  0057  3001               	movlw	1
  1028  0058  0089               	movwf	9	;volatile
  1029  0059                     l3084:	
  1030                           
  1031                           ;debug.c: 135:     INTCON = 0xE0;
  1032  0059  30E0               	movlw	224
  1033  005A  008B               	movwf	11	;volatile
  1034  005B                     l3086:	
  1035                           
  1036                           ;debug.c: 136:     OPTION_REG = 0x04;
  1037  005B  3004               	movlw	4
  1038  005C  0081               	movwf	1	;volatile
  1039  005D                     l3088:	
  1040                           
  1041                           ;debug.c: 137:     TMR0 = 6;
  1042  005D  3006               	movlw	6
  1043  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1044  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1045  0060  0081               	movwf	1	;volatile
  1046  0061                     l3090:	
  1047                           
  1048                           ;debug.c: 138:     T1CON = 0x31;
  1049  0061  3031               	movlw	49
  1050  0062  0090               	movwf	16	;volatile
  1051  0063                     l3092:	
  1052                           
  1053                           ;debug.c: 144:     init_ADC();
  1054  0063  120A  158A  23BD  120A  118A  	fcall	_init_ADC
  1055  0068                     l3094:	
  1056                           
  1057                           ;debug.c: 145:     UART_Init(9600);
  1058  0068  3080               	movlw	128
  1059  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1060  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1061  006B  00AF               	movwf	UART_Init@baudrate
  1062  006C  3025               	movlw	37
  1063  006D  00B0               	movwf	UART_Init@baudrate+1
  1064  006E  120A  118A  27C3  120A  118A  	fcall	_UART_Init
  1065  0073                     l3096:	
  1066                           
  1067                           ;debug.c: 146:     SetDefaultTimers(2, 2, 2);
  1068  0073  3002               	movlw	2
  1069  0074  1283               	bcf	3,5	;RP0=0, select bank0
  1070  0075  1303               	bcf	3,6	;RP1=0, select bank0
  1071  0076  00A0               	movwf	SetDefaultTimers@rosso
  1072  0077  3000               	movlw	0
  1073  0078  00A1               	movwf	SetDefaultTimers@rosso+1
  1074  0079  3002               	movlw	2
  1075  007A  00A2               	movwf	SetDefaultTimers@verde
  1076  007B  3000               	movlw	0
  1077  007C  00A3               	movwf	SetDefaultTimers@verde+1
  1078  007D  3002               	movlw	2
  1079  007E  00A4               	movwf	SetDefaultTimers@giallo
  1080  007F  3000               	movlw	0
  1081  0080  00A5               	movwf	SetDefaultTimers@giallo+1
  1082  0081  120A  158A  26D9  120A  118A  	fcall	_SetDefaultTimers
  1083  0086                     l3098:	
  1084                           
  1085                           ;debug.c: 148:     TMR1H = 60;
  1086  0086  303C               	movlw	60
  1087  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1089  0089  008F               	movwf	15	;volatile
  1090  008A                     l3100:	
  1091                           
  1092                           ;debug.c: 149:     TMR1L = 176;
  1093  008A  30B0               	movlw	176
  1094  008B  008E               	movwf	14	;volatile
  1095  008C                     l3102:	
  1096                           
  1097                           ;debug.c: 151:     int time;;debug.c: 152:     unsigned char lux_select = 0;
  1098  008C  1283               	bcf	3,5	;RP0=0, select bank2
  1099  008D  1703               	bsf	3,6	;RP1=1, select bank2
  1100  008E  01E1               	clrf	main@lux_select^(0+256)
  1101  008F                     l3104:	
  1102                           
  1103                           ;debug.c: 153:     disp = 0;
  1104  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1105  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1106  0091  01DB               	clrf	_disp
  1107  0092                     l3106:	
  1108  0092                     l3108:	
  1109  0092                     l3110:	
  1110  0092                     l3112:	
  1111                           
  1112                           ;debug.c: 157:     Bit endCiclo;;debug.c: 158:     endCiclo.Bit = 1;
  1113  0092  1283               	bcf	3,5	;RP0=0, select bank2
  1114  0093  1703               	bsf	3,6	;RP1=1, select bank2
  1115  0094  145D               	bsf	main@endCiclo^(0+256),0
  1116  0095                     l3114:	
  1117                           
  1118                           ;debug.c: 161:     {;debug.c: 163:         if (readGateway.Bit)
  1119  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1120  0096  1C62               	btfss	_readGateway,0
  1121  0097  2899               	goto	u3271
  1122  0098  289A               	goto	u3270
  1123  0099                     u3271:	
  1124  0099  2A42               	goto	l212
  1125  009A                     u3270:	
  1126  009A  2A2D               	goto	l3180
  1127  009B                     l214:	
  1128                           ;debug.c: 166:             {;debug.c: 167:             case 0x08:
  1129                           
  1130                           
  1131                           ;debug.c: 168:                 readGatewayDone.Bit = 1;
  1132  009B  1463               	bsf	_readGatewayDone,0
  1133                           
  1134                           ;debug.c: 169:                 readGateway.Bit = 0;
  1135  009C  1062               	bcf	_readGateway,0
  1136  009D                     l3118:	
  1137                           
  1138                           ;debug.c: 172:                 for (int i = 0; i < 4; i++)
  1139  009D  1283               	bcf	3,5	;RP0=0, select bank2
  1140  009E  1703               	bsf	3,6	;RP1=1, select bank2
  1141  009F  01EA               	clrf	main@i^(0+256)
  1142  00A0  01EB               	clrf	(main@i+1)^(0+256)
  1143  00A1                     l3120:	
  1144  00A1  086B               	movf	(main@i+1)^(0+256),w
  1145  00A2  3A80               	xorlw	128
  1146  00A3  00FF               	movwf	btemp+1
  1147  00A4  3080               	movlw	128
  1148  00A5  027F               	subwf	btemp+1,w
  1149  00A6  1D03               	skipz
  1150  00A7  28AA               	goto	u3285
  1151  00A8  3004               	movlw	4
  1152  00A9  026A               	subwf	main@i^(0+256),w
  1153  00AA                     u3285:	
  1154  00AA  1C03               	skipc
  1155  00AB  28AD               	goto	u3281
  1156  00AC  28AE               	goto	u3280
  1157  00AD                     u3281:	
  1158  00AD  28AF               	goto	l3124
  1159  00AE                     u3280:	
  1160  00AE  292B               	goto	l3130
  1161  00AF                     l3124:	
  1162                           
  1163                           ;debug.c: 173:                 {;debug.c: 174:                     sendByte((0x01 << (i 
      +                          + 1)), 0x01, motorcycle[i]);
  1164  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  1165  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  1166  00B1  01B4               	clrf	sendByte@byte1
  1167  00B2  0AB4               	incf	sendByte@byte1,f
  1168  00B3  1283               	bcf	3,5	;RP0=0, select bank2
  1169  00B4  1703               	bsf	3,6	;RP1=1, select bank2
  1170  00B5  086A               	movf	main@i^(0+256),w
  1171  00B6  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1172  00B7  0084               	movwf	4
  1173  00B8  1383               	bcf	3,7	;select IRP bank0
  1174  00B9  0800               	movf	0,w
  1175  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1176  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1177  00BC  00BC               	movwf	??_main
  1178  00BD  083C               	movf	??_main,w
  1179  00BE  00B5               	movwf	sendByte@valore
  1180  00BF  3001               	movlw	1
  1181  00C0  00BD               	movwf	??_main+1
  1182  00C1  1283               	bcf	3,5	;RP0=0, select bank2
  1183  00C2  1703               	bsf	3,6	;RP1=1, select bank2
  1184  00C3  086A               	movf	main@i^(0+256),w
  1185  00C4  3E01               	addlw	1
  1186  00C5  3E01               	addlw	1
  1187  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1188  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  1189  00C8  28CB               	goto	u3294
  1190  00C9                     u3295:	
  1191  00C9  1003               	clrc
  1192  00CA  0DBD               	rlf	??_main+1,f
  1193  00CB                     u3294:	
  1194  00CB  3EFF               	addlw	-1
  1195  00CC  1D03               	skipz
  1196  00CD  28C9               	goto	u3295
  1197  00CE  083D               	movf	??_main+1,w
  1198  00CF  120A  158A  247C  120A  118A  	fcall	_sendByte
  1199                           
  1200                           ;debug.c: 175:                     sendByte((0x01 << (i + 1)), 0x10, car[i]);
  1201  00D4  3010               	movlw	16
  1202  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1203  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1204  00D7  00BC               	movwf	??_main
  1205  00D8  083C               	movf	??_main,w
  1206  00D9  00B4               	movwf	sendByte@byte1
  1207  00DA  1283               	bcf	3,5	;RP0=0, select bank2
  1208  00DB  1703               	bsf	3,6	;RP1=1, select bank2
  1209  00DC  086A               	movf	main@i^(0+256),w
  1210  00DD  3E50               	addlw	(low (_car| 0))& (0+255)
  1211  00DE  0084               	movwf	4
  1212  00DF  1383               	bcf	3,7	;select IRP bank0
  1213  00E0  0800               	movf	0,w
  1214  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  1215  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  1216  00E3  00BD               	movwf	??_main+1
  1217  00E4  083D               	movf	??_main+1,w
  1218  00E5  00B5               	movwf	sendByte@valore
  1219  00E6  3001               	movlw	1
  1220  00E7  00BE               	movwf	??_main+2
  1221  00E8  1283               	bcf	3,5	;RP0=0, select bank2
  1222  00E9  1703               	bsf	3,6	;RP1=1, select bank2
  1223  00EA  086A               	movf	main@i^(0+256),w
  1224  00EB  3E01               	addlw	1
  1225  00EC  3E01               	addlw	1
  1226  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1227  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  1228  00EF  28F2               	goto	u3304
  1229  00F0                     u3305:	
  1230  00F0  1003               	clrc
  1231  00F1  0DBE               	rlf	??_main+2,f
  1232  00F2                     u3304:	
  1233  00F2  3EFF               	addlw	-1
  1234  00F3  1D03               	skipz
  1235  00F4  28F0               	goto	u3305
  1236  00F5  083E               	movf	??_main+2,w
  1237  00F6  120A  158A  247C  120A  118A  	fcall	_sendByte
  1238                           
  1239                           ;debug.c: 176:                     sendByte((0x01 << (i + 1)), 0x11, truck[i]);
  1240  00FB  3011               	movlw	17
  1241  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1242  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  1243  00FE  00BC               	movwf	??_main
  1244  00FF  083C               	movf	??_main,w
  1245  0100  00B4               	movwf	sendByte@byte1
  1246  0101  1283               	bcf	3,5	;RP0=0, select bank2
  1247  0102  1703               	bsf	3,6	;RP1=1, select bank2
  1248  0103  086A               	movf	main@i^(0+256),w
  1249  0104  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1250  0105  0084               	movwf	4
  1251  0106  1383               	bcf	3,7	;select IRP bank0
  1252  0107  0800               	movf	0,w
  1253  0108  1283               	bcf	3,5	;RP0=0, select bank0
  1254  0109  1303               	bcf	3,6	;RP1=0, select bank0
  1255  010A  00BD               	movwf	??_main+1
  1256  010B  083D               	movf	??_main+1,w
  1257  010C  00B5               	movwf	sendByte@valore
  1258  010D  3001               	movlw	1
  1259  010E  00BE               	movwf	??_main+2
  1260  010F  1283               	bcf	3,5	;RP0=0, select bank2
  1261  0110  1703               	bsf	3,6	;RP1=1, select bank2
  1262  0111  086A               	movf	main@i^(0+256),w
  1263  0112  3E01               	addlw	1
  1264  0113  3E01               	addlw	1
  1265  0114  1283               	bcf	3,5	;RP0=0, select bank0
  1266  0115  1303               	bcf	3,6	;RP1=0, select bank0
  1267  0116  2919               	goto	u3314
  1268  0117                     u3315:	
  1269  0117  1003               	clrc
  1270  0118  0DBE               	rlf	??_main+2,f
  1271  0119                     u3314:	
  1272  0119  3EFF               	addlw	-1
  1273  011A  1D03               	skipz
  1274  011B  2917               	goto	u3315
  1275  011C  083E               	movf	??_main+2,w
  1276  011D  120A  158A  247C  120A  118A  	fcall	_sendByte
  1277  0122                     l3126:	
  1278                           
  1279                           ;debug.c: 177:                 }
  1280  0122  3001               	movlw	1
  1281  0123  1283               	bcf	3,5	;RP0=0, select bank2
  1282  0124  1703               	bsf	3,6	;RP1=1, select bank2
  1283  0125  07EA               	addwf	main@i^(0+256),f
  1284  0126  1803               	skipnc
  1285  0127  0AEB               	incf	(main@i+1)^(0+256),f
  1286  0128  3000               	movlw	0
  1287  0129  07EB               	addwf	(main@i+1)^(0+256),f
  1288  012A  28A1               	goto	l3120
  1289  012B                     l3130:	
  1290                           
  1291                           ;debug.c: 178:                 for (int i = 0; i < 4; i++)
  1292  012B  1283               	bcf	3,5	;RP0=0, select bank2
  1293  012C  1703               	bsf	3,6	;RP1=1, select bank2
  1294  012D  01E6               	clrf	main@i_436^(0+256)
  1295  012E  01E7               	clrf	(main@i_436+1)^(0+256)
  1296  012F                     l3132:	
  1297  012F  0867               	movf	(main@i_436+1)^(0+256),w
  1298  0130  3A80               	xorlw	128
  1299  0131  00FF               	movwf	btemp+1
  1300  0132  3080               	movlw	128
  1301  0133  027F               	subwf	btemp+1,w
  1302  0134  1D03               	skipz
  1303  0135  2938               	goto	u3325
  1304  0136  3004               	movlw	4
  1305  0137  0266               	subwf	main@i_436^(0+256),w
  1306  0138                     u3325:	
  1307  0138  1C03               	skipc
  1308  0139  293B               	goto	u3321
  1309  013A  293C               	goto	u3320
  1310  013B                     u3321:	
  1311  013B  293D               	goto	l3136
  1312  013C                     u3320:	
  1313  013C  2953               	goto	l3142
  1314  013D                     l3136:	
  1315                           
  1316                           ;debug.c: 179:                 {;debug.c: 180:                     motorcycle[i] = 0;
  1317  013D  1283               	bcf	3,5	;RP0=0, select bank2
  1318  013E  1703               	bsf	3,6	;RP1=1, select bank2
  1319  013F  0866               	movf	main@i_436^(0+256),w
  1320  0140  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  1321  0141  0084               	movwf	4
  1322  0142  1383               	bcf	3,7	;select IRP bank0
  1323  0143  0180               	clrf	0
  1324                           
  1325                           ;debug.c: 181:                     car[i] = 0;
  1326  0144  0866               	movf	main@i_436^(0+256),w
  1327  0145  3E50               	addlw	(low (_car| 0))& (0+255)
  1328  0146  0084               	movwf	4
  1329  0147  0180               	clrf	0
  1330                           
  1331                           ;debug.c: 182:                     truck[i] = 0;
  1332  0148  0866               	movf	main@i_436^(0+256),w
  1333  0149  3E4C               	addlw	(low (_truck| 0))& (0+255)
  1334  014A  0084               	movwf	4
  1335  014B  0180               	clrf	0
  1336  014C                     l3138:	
  1337                           
  1338                           ;debug.c: 183:                 }
  1339  014C  3001               	movlw	1
  1340  014D  07E6               	addwf	main@i_436^(0+256),f
  1341  014E  1803               	skipnc
  1342  014F  0AE7               	incf	(main@i_436+1)^(0+256),f
  1343  0150  3000               	movlw	0
  1344  0151  07E7               	addwf	(main@i_436+1)^(0+256),f
  1345  0152  292F               	goto	l3132
  1346  0153                     l3142:	
  1347                           
  1348                           ;debug.c: 184:                 for (unsigned char i = 0; i < 5; i++)
  1349  0153  1283               	bcf	3,5	;RP0=0, select bank2
  1350  0154  1703               	bsf	3,6	;RP1=1, select bank2
  1351  0155  01E3               	clrf	main@i_437^(0+256)
  1352  0156                     l3144:	
  1353  0156  3005               	movlw	5
  1354  0157  0263               	subwf	main@i_437^(0+256),w
  1355  0158  1C03               	skipc
  1356  0159  295B               	goto	u3331
  1357  015A  295C               	goto	u3330
  1358  015B                     u3331:	
  1359  015B  295D               	goto	l3148
  1360  015C                     u3330:	
  1361  015C  2A42               	goto	l212
  1362  015D                     l3148:	
  1363                           
  1364                           ;debug.c: 185:                 {;debug.c: 186:                     dataFromGateway[i] = 
      +                          0;
  1365  015D  0863               	movf	main@i_437^(0+256),w
  1366  015E  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1367  015F  0084               	movwf	4
  1368  0160  1383               	bcf	3,7	;select IRP bank1
  1369  0161  0180               	clrf	0
  1370  0162                     l3150:	
  1371                           
  1372                           ;debug.c: 187:                 }
  1373  0162  3001               	movlw	1
  1374  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1375  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1376  0165  00BC               	movwf	??_main
  1377  0166  083C               	movf	??_main,w
  1378  0167  1283               	bcf	3,5	;RP0=0, select bank2
  1379  0168  1703               	bsf	3,6	;RP1=1, select bank2
  1380  0169  07E3               	addwf	main@i_437^(0+256),f
  1381  016A  2956               	goto	l3144
  1382  016B                     l222:	
  1383                           ;debug.c: 191:             case 0x0A:
  1384                           
  1385                           
  1386                           ;debug.c: 192:                 readGatewayDone.Bit = 1;
  1387  016B  1463               	bsf	_readGatewayDone,0
  1388                           
  1389                           ;debug.c: 193:                 readGateway.Bit = 0;
  1390  016C  1062               	bcf	_readGateway,0
  1391  016D                     l3154:	
  1392                           
  1393                           ;debug.c: 196:                 temp = (char)map((ADC_Read(0) >> 2), 0, 255, -20, 60);
  1394  016D  3000               	movlw	0
  1395  016E  120A  158A  242F  120A  118A  	fcall	_ADC_Read
  1396  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1398  0175  0820               	movf	?_ADC_Read,w
  1399  0176  00BC               	movwf	??_main
  1400  0177  0821               	movf	?_ADC_Read+1,w
  1401  0178  00BD               	movwf	??_main+1
  1402  0179  0D3D               	rlf	??_main+1,w
  1403  017A  0CBD               	rrf	??_main+1,f
  1404  017B  0CBC               	rrf	??_main,f
  1405  017C  0D3D               	rlf	??_main+1,w
  1406  017D  0CBD               	rrf	??_main+1,f
  1407  017E  0CBC               	rrf	??_main,f
  1408  017F  083C               	movf	??_main,w
  1409  0180  00B0               	movwf	map@x
  1410  0181  083D               	movf	??_main+1,w
  1411  0182  00B1               	movwf	map@x+1
  1412  0183  3000               	movlw	0
  1413  0184  00B2               	movwf	map@in_min
  1414  0185  00B3               	movwf	map@in_min+1
  1415  0186  30FF               	movlw	255
  1416  0187  00B4               	movwf	map@in_max
  1417  0188  3000               	movlw	0
  1418  0189  00B5               	movwf	map@in_max+1
  1419  018A  30EC               	movlw	236
  1420  018B  00B6               	movwf	map@out_min
  1421  018C  30FF               	movlw	255
  1422  018D  00B7               	movwf	map@out_min+1
  1423  018E  303C               	movlw	60
  1424  018F  00B8               	movwf	map@out_max
  1425  0190  3000               	movlw	0
  1426  0191  00B9               	movwf	map@out_max+1
  1427  0192  120A  158A  24DB  120A  118A  	fcall	_map
  1428  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1430  0199  0830               	movf	?_map,w
  1431  019A  00BE               	movwf	??_main+2
  1432  019B  083E               	movf	??_main+2,w
  1433  019C  1283               	bcf	3,5	;RP0=0, select bank2
  1434  019D  1703               	bsf	3,6	;RP1=1, select bank2
  1435  019E  00DC               	movwf	main@temp^(0+256)
  1436  019F  3001               	movlw	1
  1437  01A0  120A  158A  242F  120A  118A  	fcall	_ADC_Read
  1438  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1439  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1440  01A7  0820               	movf	?_ADC_Read,w
  1441  01A8  00BC               	movwf	??_main
  1442  01A9  0821               	movf	?_ADC_Read+1,w
  1443  01AA  00BD               	movwf	??_main+1
  1444  01AB  0D3D               	rlf	??_main+1,w
  1445  01AC  0CBD               	rrf	??_main+1,f
  1446  01AD  0CBC               	rrf	??_main,f
  1447  01AE  0D3D               	rlf	??_main+1,w
  1448  01AF  0CBD               	rrf	??_main+1,f
  1449  01B0  0CBC               	rrf	??_main,f
  1450  01B1  083C               	movf	??_main,w
  1451  01B2  00B0               	movwf	map@x
  1452  01B3  083D               	movf	??_main+1,w
  1453  01B4  00B1               	movwf	map@x+1
  1454  01B5  3000               	movlw	0
  1455  01B6  00B2               	movwf	map@in_min
  1456  01B7  00B3               	movwf	map@in_min+1
  1457  01B8  30FF               	movlw	255
  1458  01B9  00B4               	movwf	map@in_max
  1459  01BA  3000               	movlw	0
  1460  01BB  00B5               	movwf	map@in_max+1
  1461  01BC  3000               	movlw	0
  1462  01BD  00B6               	movwf	map@out_min
  1463  01BE  00B7               	movwf	map@out_min+1
  1464  01BF  3064               	movlw	100
  1465  01C0  00B8               	movwf	map@out_max
  1466  01C1  3000               	movlw	0
  1467  01C2  00B9               	movwf	map@out_max+1
  1468  01C3  120A  158A  24DB  120A  118A  	fcall	_map
  1469  01C8  3005               	movlw	5
  1470  01C9  120A  158A  242F  120A  118A  	fcall	_ADC_Read
  1471  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  1472  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  1473  01D0  0820               	movf	?_ADC_Read,w
  1474  01D1  00BC               	movwf	??_main
  1475  01D2  0821               	movf	?_ADC_Read+1,w
  1476  01D3  00BD               	movwf	??_main+1
  1477  01D4  0D3D               	rlf	??_main+1,w
  1478  01D5  0CBD               	rrf	??_main+1,f
  1479  01D6  0CBC               	rrf	??_main,f
  1480  01D7  0D3D               	rlf	??_main+1,w
  1481  01D8  0CBD               	rrf	??_main+1,f
  1482  01D9  0CBC               	rrf	??_main,f
  1483  01DA  083C               	movf	??_main,w
  1484  01DB  00B0               	movwf	map@x
  1485  01DC  083D               	movf	??_main+1,w
  1486  01DD  00B1               	movwf	map@x+1
  1487  01DE  3000               	movlw	0
  1488  01DF  00B2               	movwf	map@in_min
  1489  01E0  00B3               	movwf	map@in_min+1
  1490  01E1  30FF               	movlw	255
  1491  01E2  00B4               	movwf	map@in_max
  1492  01E3  3000               	movlw	0
  1493  01E4  00B5               	movwf	map@in_max+1
  1494  01E5  3000               	movlw	0
  1495  01E6  00B6               	movwf	map@out_min
  1496  01E7  00B7               	movwf	map@out_min+1
  1497  01E8  3064               	movlw	100
  1498  01E9  00B8               	movwf	map@out_max
  1499  01EA  3000               	movlw	0
  1500  01EB  00B9               	movwf	map@out_max+1
  1501  01EC  120A  158A  24DB  120A  118A  	fcall	_map
  1502  01F1                     l3156:	
  1503                           
  1504                           ;debug.c: 199:                 sendByte(0x02, 0x00, temp);
  1505  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1506  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1507  01F3  01B4               	clrf	sendByte@byte1
  1508  01F4  1283               	bcf	3,5	;RP0=0, select bank2
  1509  01F5  1703               	bsf	3,6	;RP1=1, select bank2
  1510  01F6  085C               	movf	main@temp^(0+256),w
  1511  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  1512  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  1513  01F9  00BC               	movwf	??_main
  1514  01FA  083C               	movf	??_main,w
  1515  01FB  00B5               	movwf	sendByte@valore
  1516  01FC  3002               	movlw	2
  1517  01FD  120A  158A  247C  120A  118A  	fcall	_sendByte
  1518  0202                     l3158:	
  1519                           
  1520                           ;debug.c: 202:                 for (unsigned char i = 0; i < 5; i++)
  1521  0202  1283               	bcf	3,5	;RP0=0, select bank2
  1522  0203  1703               	bsf	3,6	;RP1=1, select bank2
  1523  0204  01E4               	clrf	main@i_439^(0+256)
  1524  0205                     l3160:	
  1525  0205  3005               	movlw	5
  1526  0206  0264               	subwf	main@i_439^(0+256),w
  1527  0207  1C03               	skipc
  1528  0208  2A0A               	goto	u3341
  1529  0209  2A0B               	goto	u3340
  1530  020A                     u3341:	
  1531  020A  2A0C               	goto	l3164
  1532  020B                     u3340:	
  1533  020B  2A42               	goto	l212
  1534  020C                     l3164:	
  1535                           
  1536                           ;debug.c: 203:                 {;debug.c: 204:                     dataFromGateway[i] = 
      +                          0;
  1537  020C  0864               	movf	main@i_439^(0+256),w
  1538  020D  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1539  020E  0084               	movwf	4
  1540  020F  1383               	bcf	3,7	;select IRP bank1
  1541  0210  0180               	clrf	0
  1542  0211                     l3166:	
  1543                           
  1544                           ;debug.c: 205:                 }
  1545  0211  3001               	movlw	1
  1546  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1547  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1548  0214  00BC               	movwf	??_main
  1549  0215  083C               	movf	??_main,w
  1550  0216  1283               	bcf	3,5	;RP0=0, select bank2
  1551  0217  1703               	bsf	3,6	;RP1=1, select bank2
  1552  0218  07E4               	addwf	main@i_439^(0+256),f
  1553  0219  2A05               	goto	l3160
  1554  021A                     l3170:	
  1555                           
  1556                           ;debug.c: 210:                 if (timerReadFromGateway >= 4)
  1557  021A  3004               	movlw	4
  1558  021B  0258               	subwf	_timerReadFromGateway,w
  1559  021C  1C03               	skipc
  1560  021D  2A1F               	goto	u3351
  1561  021E  2A20               	goto	u3350
  1562  021F                     u3351:	
  1563  021F  2A23               	goto	l3174
  1564  0220                     u3350:	
  1565  0220                     l3172:	
  1566                           
  1567                           ;debug.c: 211:                 {;debug.c: 212:                     readGatewayDone.Bit =
      +                           1;
  1568  0220  1463               	bsf	_readGatewayDone,0
  1569                           
  1570                           ;debug.c: 213:                     readGatewayDone.Timeout = 1;
  1571  0221  14E3               	bsf	_readGatewayDone,1
  1572                           
  1573                           ;debug.c: 214:                     readGateway.Bit = 0;
  1574  0222  1062               	bcf	_readGateway,0
  1575  0223                     l3174:	
  1576                           
  1577                           ;debug.c: 217:                 if (dataFromGatewayIndex >= 15)
  1578  0223  300F               	movlw	15
  1579  0224  0259               	subwf	_dataFromGatewayIndex,w
  1580  0225  1C03               	skipc
  1581  0226  2A28               	goto	u3361
  1582  0227  2A29               	goto	u3360
  1583  0228                     u3361:	
  1584  0228  2A42               	goto	l212
  1585  0229                     u3360:	
  1586  0229                     l3176:	
  1587                           
  1588                           ;debug.c: 218:                 {;debug.c: 219:                     readGatewayDone.Bit =
      +                           1;
  1589  0229  1463               	bsf	_readGatewayDone,0
  1590                           
  1591                           ;debug.c: 220:                     readGatewayDone.Timeout = 0;
  1592  022A  10E3               	bcf	_readGatewayDone,1
  1593                           
  1594                           ;debug.c: 221:                     readGateway.Bit = 0;
  1595  022B  1062               	bcf	_readGateway,0
  1596  022C  2A42               	goto	l212
  1597  022D                     l3180:	
  1598  022D  1683               	bsf	3,5	;RP0=1, select bank1
  1599  022E  1303               	bcf	3,6	;RP1=0, select bank1
  1600  022F  0820               	movf	_dataFromGateway^(0+128),w
  1601  0230  397F               	andlw	127
  1602  0231  1283               	bcf	3,5	;RP0=0, select bank0
  1603  0232  1303               	bcf	3,6	;RP1=0, select bank0
  1604  0233  00BC               	movwf	??_main
  1605  0234  01BD               	clrf	??_main+1
  1606                           
  1607                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1608                           ; Switch size 1, requested type "simple"
  1609                           ; Number of cases is 1, Range of values is 0 to 0
  1610                           ; switch strategies available:
  1611                           ; Name         Instructions Cycles
  1612                           ; simple_byte            4     3 (average)
  1613                           ; direct_byte           11     8 (fixed)
  1614                           ; jumptable            260     6 (fixed)
  1615                           ;	Chosen strategy is simple_byte
  1616  0235  083D               	movf	??_main+1,w
  1617  0236  3A00               	xorlw	0	; case 0
  1618  0237  1903               	skipnz
  1619  0238  2A3A               	goto	l3402
  1620  0239  2A1A               	goto	l3170
  1621  023A                     l3402:	
  1622                           
  1623                           ; Switch size 1, requested type "simple"
  1624                           ; Number of cases is 2, Range of values is 8 to 10
  1625                           ; switch strategies available:
  1626                           ; Name         Instructions Cycles
  1627                           ; simple_byte            7     4 (average)
  1628                           ; direct_byte           20    11 (fixed)
  1629                           ; jumptable            263     9 (fixed)
  1630                           ;	Chosen strategy is simple_byte
  1631  023A  083C               	movf	??_main,w
  1632  023B  3A08               	xorlw	8	; case 8
  1633  023C  1903               	skipnz
  1634  023D  289B               	goto	l214
  1635  023E  3A02               	xorlw	2	; case 10
  1636  023F  1903               	skipnz
  1637  0240  296B               	goto	l222
  1638  0241  2A1A               	goto	l3170
  1639  0242                     l212:	
  1640                           ;debug.c: 225:         }
  1641                           
  1642                           
  1643                           ;debug.c: 228:         if (readGatewayDone.Bit)
  1644  0242  1303               	bcf	3,6	;RP1=0, select bank0
  1645  0243  1C63               	btfss	_readGatewayDone,0
  1646  0244  2A46               	goto	u3371
  1647  0245  2A47               	goto	u3370
  1648  0246                     u3371:	
  1649  0246  2ADE               	goto	l228
  1650  0247                     u3370:	
  1651  0247                     l3182:	
  1652                           
  1653                           ;debug.c: 229:         {;debug.c: 231:             readGateway.Bit = 0;
  1654  0247  1062               	bcf	_readGateway,0
  1655  0248                     l3184:	
  1656                           
  1657                           ;debug.c: 232:             dataFromGatewayIndex = 0;
  1658  0248  01D9               	clrf	_dataFromGatewayIndex
  1659  0249                     l3186:	
  1660                           
  1661                           ;debug.c: 233:             readGatewayDone.Bit = 0;
  1662  0249  1063               	bcf	_readGatewayDone,0
  1663                           
  1664                           ;debug.c: 234:             timerReadFromGateway = 0;
  1665  024A  01D8               	clrf	_timerReadFromGateway
  1666  024B                     l3188:	
  1667                           
  1668                           ;debug.c: 237:             if (readGatewayDone.Timeout)
  1669  024B  1CE3               	btfss	_readGatewayDone,1
  1670  024C  2A4E               	goto	u3381
  1671  024D  2A4F               	goto	u3380
  1672  024E                     u3381:	
  1673  024E  2A51               	goto	l3192
  1674  024F                     u3380:	
  1675  024F                     l3190:	
  1676                           
  1677                           ;debug.c: 238:             {;debug.c: 239:                 readGatewayDone.Timeout = 0;
  1678  024F  10E3               	bcf	_readGatewayDone,1
  1679                           
  1680                           ;debug.c: 240:             }
  1681  0250  2ADE               	goto	l228
  1682  0251                     l3192:	
  1683                           
  1684                           ;debug.c: 243:             {;debug.c: 244:                 bitParita(dataFromGateway);
  1685  0251  30A0               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1686  0252  120A  118A  2632  120A  118A  	fcall	_bitParita
  1687  0257                     l3194:	
  1688                           
  1689                           ;debug.c: 245:                 unsigned char tmp;;debug.c: 246:                 for (uns
      +                          igned char i = 0; i < 3; i++)
  1690  0257  1283               	bcf	3,5	;RP0=0, select bank2
  1691  0258  1703               	bsf	3,6	;RP1=1, select bank2
  1692  0259  01E5               	clrf	main@i_442^(0+256)
  1693  025A                     l3196:	
  1694  025A  3003               	movlw	3
  1695  025B  0265               	subwf	main@i_442^(0+256),w
  1696  025C  1C03               	skipc
  1697  025D  2A5F               	goto	u3391
  1698  025E  2A60               	goto	u3390
  1699  025F                     u3391:	
  1700  025F  2A61               	goto	l3200
  1701  0260                     u3390:	
  1702  0260  2ADE               	goto	l228
  1703  0261                     l3200:	
  1704                           
  1705                           ;debug.c: 247:                 {;debug.c: 248:                     unsigned char index =
      +                           i * 5;
  1706  0261  3005               	movlw	5
  1707  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1708  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1709  0264  00BC               	movwf	??_main
  1710  0265  083C               	movf	??_main,w
  1711  0266  00A0               	movwf	___bmul@multiplicand
  1712  0267  1283               	bcf	3,5	;RP0=0, select bank2
  1713  0268  1703               	bsf	3,6	;RP1=1, select bank2
  1714  0269  0865               	movf	main@i_442^(0+256),w
  1715  026A  120A  158A  23F8  120A  118A  	fcall	___bmul
  1716  026F  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0270  1303               	bcf	3,6	;RP1=0, select bank0
  1718  0271  00BD               	movwf	??_main+1
  1719  0272  083D               	movf	??_main+1,w
  1720  0273  1283               	bcf	3,5	;RP0=0, select bank2
  1721  0274  1703               	bsf	3,6	;RP1=1, select bank2
  1722  0275  00E2               	movwf	main@index^(0+256)
  1723  0276                     l3202:	
  1724                           
  1725                           ;debug.c: 249:                     tmp = dataFromGateway[index];
  1726  0276  0862               	movf	main@index^(0+256),w
  1727  0277  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1728  0278  0084               	movwf	4
  1729  0279  1383               	bcf	3,7	;select IRP bank1
  1730  027A  0800               	movf	0,w
  1731  027B  1283               	bcf	3,5	;RP0=0, select bank0
  1732  027C  1303               	bcf	3,6	;RP1=0, select bank0
  1733  027D  00BC               	movwf	??_main
  1734  027E  083C               	movf	??_main,w
  1735  027F  1283               	bcf	3,5	;RP0=0, select bank2
  1736  0280  1703               	bsf	3,6	;RP1=1, select bank2
  1737  0281  00DE               	movwf	main@tmp^(0+256)
  1738  0282                     l3204:	
  1739                           
  1740                           ;debug.c: 250:                     unsigned char semaforoId = (tmp >> 1) & 0x0F;
  1741  0282  085E               	movf	main@tmp^(0+256),w
  1742  0283  1283               	bcf	3,5	;RP0=0, select bank0
  1743  0284  1303               	bcf	3,6	;RP1=0, select bank0
  1744  0285  00BC               	movwf	??_main
  1745  0286  1003               	clrc
  1746  0287  0C3C               	rrf	??_main,w
  1747  0288  390F               	andlw	15
  1748  0289  00BD               	movwf	??_main+1
  1749  028A  083D               	movf	??_main+1,w
  1750  028B  1283               	bcf	3,5	;RP0=0, select bank2
  1751  028C  1703               	bsf	3,6	;RP1=1, select bank2
  1752  028D  00DA               	movwf	main@semaforoId^(0+256)
  1753  028E                     l3206:	
  1754                           
  1755                           ;debug.c: 251:                     tmp = dataFromGateway[index];
  1756  028E  0862               	movf	main@index^(0+256),w
  1757  028F  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1758  0290  0084               	movwf	4
  1759  0291  0800               	movf	0,w
  1760  0292  1283               	bcf	3,5	;RP0=0, select bank0
  1761  0293  1303               	bcf	3,6	;RP1=0, select bank0
  1762  0294  00BC               	movwf	??_main
  1763  0295  083C               	movf	??_main,w
  1764  0296  1283               	bcf	3,5	;RP0=0, select bank2
  1765  0297  1703               	bsf	3,6	;RP1=1, select bank2
  1766  0298  00DE               	movwf	main@tmp^(0+256)
  1767  0299                     l3208:	
  1768                           
  1769                           ;debug.c: 252:                     unsigned char colorId = ((tmp >> 5) & 0x03) - 1;
  1770  0299  085E               	movf	main@tmp^(0+256),w
  1771  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1772  029B  1303               	bcf	3,6	;RP1=0, select bank0
  1773  029C  00BC               	movwf	??_main
  1774  029D  3005               	movlw	5
  1775  029E                     u3405:	
  1776  029E  1003               	clrc
  1777  029F  0CBC               	rrf	??_main,f
  1778  02A0  3EFF               	addlw	-1
  1779  02A1  1D03               	skipz
  1780  02A2  2A9E               	goto	u3405
  1781  02A3  083C               	movf	??_main,w
  1782  02A4  3903               	andlw	3
  1783  02A5  3EFF               	addlw	255
  1784  02A6  00BD               	movwf	??_main+1
  1785  02A7  083D               	movf	??_main+1,w
  1786  02A8  1283               	bcf	3,5	;RP0=0, select bank2
  1787  02A9  1703               	bsf	3,6	;RP1=1, select bank2
  1788  02AA  00DB               	movwf	main@colorId^(0+256)
  1789  02AB                     l3210:	
  1790                           
  1791                           ;debug.c: 254:                     (*(Semafori[semaforoId])).new_times[colorId] = GetTim
      +                          e(index);
  1792  02AB  0862               	movf	main@index^(0+256),w
  1793  02AC  120A  158A  2510  120A  118A  	fcall	_GetTime
  1794  02B1  1283               	bcf	3,5	;RP0=0, select bank2
  1795  02B2  1703               	bsf	3,6	;RP1=1, select bank2
  1796  02B3  085A               	movf	main@semaforoId^(0+256),w
  1797  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  1798  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  1799  02B6  00BC               	movwf	??_main
  1800  02B7  073C               	addwf	??_main,w
  1801  02B8  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1802  02B9  0084               	movwf	4
  1803  02BA  1383               	bcf	3,7	;select IRP bank1
  1804  02BB  0800               	movf	0,w
  1805  02BC  00BD               	movwf	??_main+1
  1806  02BD  0A84               	incf	4,f
  1807  02BE  0800               	movf	0,w
  1808  02BF  00BE               	movwf	??_main+2
  1809  02C0  1283               	bcf	3,5	;RP0=0, select bank2
  1810  02C1  1703               	bsf	3,6	;RP1=1, select bank2
  1811  02C2  085B               	movf	main@colorId^(0+256),w
  1812  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  1813  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  1814  02C5  00BF               	movwf	??_main+3
  1815  02C6  073F               	addwf	??_main+3,w
  1816  02C7  073D               	addwf	??_main+1,w
  1817  02C8  00C0               	movwf	??_main+4
  1818  02C9  083E               	movf	??_main+2,w
  1819  02CA  1803               	skipnc
  1820  02CB  3E01               	addlw	1
  1821  02CC  00C1               	movwf	??_main+5
  1822  02CD  0840               	movf	??_main+4,w
  1823  02CE  0084               	movwf	4
  1824  02CF  1783               	bsf	3,7
  1825  02D0  1C41               	btfss	??_main+5,0
  1826  02D1  1383               	bcf	3,7
  1827  02D2  0820               	movf	?_GetTime,w
  1828  02D3  0080               	movwf	0
  1829  02D4  0A84               	incf	4,f
  1830  02D5  0821               	movf	?_GetTime+1,w
  1831  02D6  0080               	movwf	0
  1832  02D7                     l3212:	
  1833                           
  1834                           ;debug.c: 255:                 }
  1835  02D7  3001               	movlw	1
  1836  02D8  00BC               	movwf	??_main
  1837  02D9  083C               	movf	??_main,w
  1838  02DA  1283               	bcf	3,5	;RP0=0, select bank2
  1839  02DB  1703               	bsf	3,6	;RP1=1, select bank2
  1840  02DC  07E5               	addwf	main@i_442^(0+256),f
  1841  02DD  2A5A               	goto	l3196
  1842  02DE                     l228:	
  1843                           ;debug.c: 257:         }
  1844                           
  1845                           
  1846                           ;debug.c: 261:         if (endCiclo.Bit)
  1847  02DE  1283               	bcf	3,5	;RP0=0, select bank2
  1848  02DF  1703               	bsf	3,6	;RP1=1, select bank2
  1849  02E0  1C5D               	btfss	main@endCiclo^(0+256),0
  1850  02E1  2AE3               	goto	u3411
  1851  02E2  2AE4               	goto	u3410
  1852  02E3                     u3411:	
  1853  02E3  2BD5               	goto	l233
  1854  02E4                     u3410:	
  1855  02E4                     l3216:	
  1856                           
  1857                           ;debug.c: 262:         {;debug.c: 264:             for (unsigned char l = 0; l < 16; l++
      +                          )
  1858  02E4  01E8               	clrf	main@l^(0+256)
  1859  02E5                     l3218:	
  1860  02E5  3010               	movlw	16
  1861  02E6  0268               	subwf	main@l^(0+256),w
  1862  02E7  1C03               	skipc
  1863  02E8  2AEA               	goto	u3421
  1864  02E9  2AEB               	goto	u3420
  1865  02EA                     u3421:	
  1866  02EA  2AEC               	goto	l3222
  1867  02EB                     u3420:	
  1868  02EB  2BA6               	goto	l3240
  1869  02EC                     l3222:	
  1870                           
  1871                           ;debug.c: 265:             {;debug.c: 266:                 for (unsigned char i = 0; i <
      +                           3; i++)
  1872  02EC  01E9               	clrf	main@i_449^(0+256)
  1873  02ED                     l3224:	
  1874  02ED  3003               	movlw	3
  1875  02EE  0269               	subwf	main@i_449^(0+256),w
  1876  02EF  1C03               	skipc
  1877  02F0  2AF2               	goto	u3431
  1878  02F1  2AF3               	goto	u3430
  1879  02F2                     u3431:	
  1880  02F2  2AF4               	goto	l3228
  1881  02F3                     u3430:	
  1882  02F3  2B9D               	goto	l3236
  1883  02F4                     l3228:	
  1884                           
  1885                           ;debug.c: 267:                 {;debug.c: 268:                     if ((*(Semafori[l])).
      +                          times[i] != (*(Semafori[l])).new_times[i])
  1886  02F4  0868               	movf	main@l^(0+256),w
  1887  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  1888  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  1889  02F7  00BC               	movwf	??_main
  1890  02F8  073C               	addwf	??_main,w
  1891  02F9  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1892  02FA  0084               	movwf	4
  1893  02FB  1383               	bcf	3,7	;select IRP bank1
  1894  02FC  0800               	movf	0,w
  1895  02FD  00BD               	movwf	??_main+1
  1896  02FE  0A84               	incf	4,f
  1897  02FF  0800               	movf	0,w
  1898  0300  00BE               	movwf	??_main+2
  1899  0301  1283               	bcf	3,5	;RP0=0, select bank2
  1900  0302  1703               	bsf	3,6	;RP1=1, select bank2
  1901  0303  0869               	movf	main@i_449^(0+256),w
  1902  0304  1283               	bcf	3,5	;RP0=0, select bank0
  1903  0305  1303               	bcf	3,6	;RP1=0, select bank0
  1904  0306  00BF               	movwf	??_main+3
  1905  0307  073F               	addwf	??_main+3,w
  1906  0308  073D               	addwf	??_main+1,w
  1907  0309  00C0               	movwf	??_main+4
  1908  030A  083E               	movf	??_main+2,w
  1909  030B  1803               	skipnc
  1910  030C  3E01               	addlw	1
  1911  030D  00C1               	movwf	??_main+5
  1912  030E  0840               	movf	??_main+4,w
  1913  030F  0084               	movwf	4
  1914  0310  1783               	bsf	3,7
  1915  0311  1C41               	btfss	??_main+5,0
  1916  0312  1383               	bcf	3,7
  1917  0313  0800               	movf	0,w
  1918  0314  00C2               	movwf	??_main+6
  1919  0315  0A84               	incf	4,f
  1920  0316  0800               	movf	0,w
  1921  0317  00C3               	movwf	??_main+7
  1922  0318  1283               	bcf	3,5	;RP0=0, select bank2
  1923  0319  1703               	bsf	3,6	;RP1=1, select bank2
  1924  031A  0868               	movf	main@l^(0+256),w
  1925  031B  1283               	bcf	3,5	;RP0=0, select bank0
  1926  031C  1303               	bcf	3,6	;RP1=0, select bank0
  1927  031D  00C4               	movwf	??_main+8
  1928  031E  0744               	addwf	??_main+8,w
  1929  031F  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1930  0320  0084               	movwf	4
  1931  0321  1383               	bcf	3,7	;select IRP bank1
  1932  0322  0800               	movf	0,w
  1933  0323  00C5               	movwf	??_main+9
  1934  0324  0A84               	incf	4,f
  1935  0325  0800               	movf	0,w
  1936  0326  00C6               	movwf	??_main+10
  1937  0327  1283               	bcf	3,5	;RP0=0, select bank2
  1938  0328  1703               	bsf	3,6	;RP1=1, select bank2
  1939  0329  0869               	movf	main@i_449^(0+256),w
  1940  032A  1283               	bcf	3,5	;RP0=0, select bank0
  1941  032B  1303               	bcf	3,6	;RP1=0, select bank0
  1942  032C  00C7               	movwf	??_main+11
  1943  032D  0747               	addwf	??_main+11,w
  1944  032E  3E06               	addlw	6
  1945  032F  0745               	addwf	??_main+9,w
  1946  0330  00C8               	movwf	??_main+12
  1947  0331  0846               	movf	??_main+10,w
  1948  0332  1803               	skipnc
  1949  0333  3E01               	addlw	1
  1950  0334  00C9               	movwf	??_main+13
  1951  0335  0848               	movf	??_main+12,w
  1952  0336  0084               	movwf	4
  1953  0337  1783               	bsf	3,7
  1954  0338  1C49               	btfss	??_main+13,0
  1955  0339  1383               	bcf	3,7
  1956  033A  0800               	movf	0,w
  1957  033B  00CA               	movwf	??_main+14
  1958  033C  0A84               	incf	4,f
  1959  033D  0800               	movf	0,w
  1960  033E  00CB               	movwf	??_main+15
  1961  033F  0843               	movf	??_main+7,w
  1962  0340  064B               	xorwf	??_main+15,w
  1963  0341  1D03               	skipz
  1964  0342  2B45               	goto	u3445
  1965  0343  0842               	movf	??_main+6,w
  1966  0344  064A               	xorwf	??_main+14,w
  1967  0345                     u3445:	
  1968  0345  1903               	skipnz
  1969  0346  2B48               	goto	u3441
  1970  0347  2B49               	goto	u3440
  1971  0348                     u3441:	
  1972  0348  2B96               	goto	l3232
  1973  0349                     u3440:	
  1974  0349                     l3230:	
  1975                           
  1976                           ;debug.c: 269:                     {;debug.c: 270:                         (*(Semafori[l
      +                          ])).times[i] = (*(Semafori[l])).new_times[i];
  1977  0349  1283               	bcf	3,5	;RP0=0, select bank2
  1978  034A  1703               	bsf	3,6	;RP1=1, select bank2
  1979  034B  0868               	movf	main@l^(0+256),w
  1980  034C  1283               	bcf	3,5	;RP0=0, select bank0
  1981  034D  1303               	bcf	3,6	;RP1=0, select bank0
  1982  034E  00BC               	movwf	??_main
  1983  034F  073C               	addwf	??_main,w
  1984  0350  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1985  0351  0084               	movwf	4
  1986  0352  1383               	bcf	3,7	;select IRP bank1
  1987  0353  0800               	movf	0,w
  1988  0354  00BD               	movwf	??_main+1
  1989  0355  0A84               	incf	4,f
  1990  0356  0800               	movf	0,w
  1991  0357  00BE               	movwf	??_main+2
  1992  0358  1283               	bcf	3,5	;RP0=0, select bank2
  1993  0359  1703               	bsf	3,6	;RP1=1, select bank2
  1994  035A  0869               	movf	main@i_449^(0+256),w
  1995  035B  1283               	bcf	3,5	;RP0=0, select bank0
  1996  035C  1303               	bcf	3,6	;RP1=0, select bank0
  1997  035D  00BF               	movwf	??_main+3
  1998  035E  073F               	addwf	??_main+3,w
  1999  035F  073D               	addwf	??_main+1,w
  2000  0360  00C0               	movwf	??_main+4
  2001  0361  083E               	movf	??_main+2,w
  2002  0362  1803               	skipnc
  2003  0363  3E01               	addlw	1
  2004  0364  00C1               	movwf	??_main+5
  2005  0365  0840               	movf	??_main+4,w
  2006  0366  0084               	movwf	4
  2007  0367  1783               	bsf	3,7
  2008  0368  1C41               	btfss	??_main+5,0
  2009  0369  1383               	bcf	3,7
  2010  036A  0800               	movf	0,w
  2011  036B  00C2               	movwf	??_main+6
  2012  036C  0A84               	incf	4,f
  2013  036D  0800               	movf	0,w
  2014  036E  00C3               	movwf	??_main+7
  2015  036F  1283               	bcf	3,5	;RP0=0, select bank2
  2016  0370  1703               	bsf	3,6	;RP1=1, select bank2
  2017  0371  0868               	movf	main@l^(0+256),w
  2018  0372  1283               	bcf	3,5	;RP0=0, select bank0
  2019  0373  1303               	bcf	3,6	;RP1=0, select bank0
  2020  0374  00C4               	movwf	??_main+8
  2021  0375  0744               	addwf	??_main+8,w
  2022  0376  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2023  0377  0084               	movwf	4
  2024  0378  1383               	bcf	3,7	;select IRP bank1
  2025  0379  0800               	movf	0,w
  2026  037A  00C5               	movwf	??_main+9
  2027  037B  0A84               	incf	4,f
  2028  037C  0800               	movf	0,w
  2029  037D  00C6               	movwf	??_main+10
  2030  037E  1283               	bcf	3,5	;RP0=0, select bank2
  2031  037F  1703               	bsf	3,6	;RP1=1, select bank2
  2032  0380  0869               	movf	main@i_449^(0+256),w
  2033  0381  1283               	bcf	3,5	;RP0=0, select bank0
  2034  0382  1303               	bcf	3,6	;RP1=0, select bank0
  2035  0383  00C7               	movwf	??_main+11
  2036  0384  0747               	addwf	??_main+11,w
  2037  0385  3E06               	addlw	6
  2038  0386  0745               	addwf	??_main+9,w
  2039  0387  00C8               	movwf	??_main+12
  2040  0388  0846               	movf	??_main+10,w
  2041  0389  1803               	skipnc
  2042  038A  3E01               	addlw	1
  2043  038B  00C9               	movwf	??_main+13
  2044  038C  0848               	movf	??_main+12,w
  2045  038D  0084               	movwf	4
  2046  038E  1783               	bsf	3,7
  2047  038F  1C49               	btfss	??_main+13,0
  2048  0390  1383               	bcf	3,7
  2049  0391  0842               	movf	??_main+6,w
  2050  0392  0080               	movwf	0
  2051  0393  0A84               	incf	4,f
  2052  0394  0843               	movf	??_main+7,w
  2053  0395  0080               	movwf	0
  2054  0396                     l3232:	
  2055                           
  2056                           ;debug.c: 272:                 }
  2057  0396  3001               	movlw	1
  2058  0397  00BC               	movwf	??_main
  2059  0398  083C               	movf	??_main,w
  2060  0399  1283               	bcf	3,5	;RP0=0, select bank2
  2061  039A  1703               	bsf	3,6	;RP1=1, select bank2
  2062  039B  07E9               	addwf	main@i_449^(0+256),f
  2063  039C  2AED               	goto	l3224
  2064  039D                     l3236:	
  2065                           
  2066                           ;debug.c: 273:             }
  2067  039D  3001               	movlw	1
  2068  039E  1283               	bcf	3,5	;RP0=0, select bank0
  2069  039F  1303               	bcf	3,6	;RP1=0, select bank0
  2070  03A0  00BC               	movwf	??_main
  2071  03A1  083C               	movf	??_main,w
  2072  03A2  1283               	bcf	3,5	;RP0=0, select bank2
  2073  03A3  1703               	bsf	3,6	;RP1=1, select bank2
  2074  03A4  07E8               	addwf	main@l^(0+256),f
  2075  03A5  2AE5               	goto	l3218
  2076  03A6                     l3240:	
  2077                           
  2078                           ;debug.c: 277:             {;debug.c: 278:                 n_semafori = (n_semafori + 1)
      +                           % 16;
  2079  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2080  03A7  0864               	movf	_n_semafori,w
  2081  03A8  3E01               	addlw	1
  2082  03A9  390F               	andlw	15
  2083  03AA  00BC               	movwf	??_main
  2084  03AB  083C               	movf	??_main,w
  2085  03AC  00E4               	movwf	_n_semafori
  2086  03AD                     l3242:	
  2087                           
  2088                           ;debug.c: 279:             } while ((*(Semafori[n_semafori])).times[0] == 0 && n_semafor
      +                          i > 0);
  2089  03AD  0864               	movf	_n_semafori,w
  2090  03AE  00BC               	movwf	??_main
  2091  03AF  073C               	addwf	??_main,w
  2092  03B0  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2093  03B1  0084               	movwf	4
  2094  03B2  1383               	bcf	3,7	;select IRP bank1
  2095  03B3  0800               	movf	0,w
  2096  03B4  00BD               	movwf	??_main+1
  2097  03B5  0A84               	incf	4,f
  2098  03B6  0800               	movf	0,w
  2099  03B7  00BE               	movwf	??_main+2
  2100  03B8  083D               	movf	??_main+1,w
  2101  03B9  3E06               	addlw	6
  2102  03BA  00BF               	movwf	??_main+3
  2103  03BB  083E               	movf	??_main+2,w
  2104  03BC  1803               	skipnc
  2105  03BD  3E01               	addlw	1
  2106  03BE  3E00               	addlw	0
  2107  03BF  00C0               	movwf	??_main+4
  2108  03C0  083F               	movf	??_main+3,w
  2109  03C1  0084               	movwf	4
  2110  03C2  1783               	bsf	3,7
  2111  03C3  1C40               	btfss	??_main+4,0
  2112  03C4  1383               	bcf	3,7
  2113  03C5  0800               	movf	0,w
  2114  03C6  00C1               	movwf	??_main+5
  2115  03C7  0A84               	incf	4,f
  2116  03C8  0800               	movf	0,w
  2117  03C9  00C2               	movwf	??_main+6
  2118  03CA  0841               	movf	??_main+5,w
  2119  03CB  0442               	iorwf	??_main+6,w
  2120  03CC  1D03               	btfss	3,2
  2121  03CD  2BCF               	goto	u3451
  2122  03CE  2BD0               	goto	u3450
  2123  03CF                     u3451:	
  2124  03CF  2BD5               	goto	l233
  2125  03D0                     u3450:	
  2126  03D0                     l3244:	
  2127  03D0  0864               	movf	_n_semafori,w
  2128  03D1  1D03               	btfss	3,2
  2129  03D2  2BD4               	goto	u3461
  2130  03D3  2BD5               	goto	u3460
  2131  03D4                     u3461:	
  2132  03D4  2BA6               	goto	l3240
  2133  03D5                     u3460:	
  2134  03D5                     l233:	
  2135                           ;debug.c: 280:         }
  2136                           
  2137                           
  2138                           ;debug.c: 284:         if (secondPassed.Bit && cycled.Bit)
  2139  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  2140  03D6  1C61               	btfss	_secondPassed,0
  2141  03D7  2BD9               	goto	u3471
  2142  03D8  2BDA               	goto	u3470
  2143  03D9                     u3471:	
  2144  03D9  2C9B               	goto	l3264
  2145  03DA                     u3470:	
  2146  03DA                     l3246:	
  2147  03DA  1C60               	btfss	_cycled,0
  2148  03DB  2BDD               	goto	u3481
  2149  03DC  2BDE               	goto	u3480
  2150  03DD                     u3481:	
  2151  03DD  2C9B               	goto	l3264
  2152  03DE                     u3480:	
  2153  03DE                     l3248:	
  2154                           
  2155                           ;debug.c: 285:         {;debug.c: 286:             time++;
  2156  03DE  3001               	movlw	1
  2157  03DF  1283               	bcf	3,5	;RP0=0, select bank2
  2158  03E0  1703               	bsf	3,6	;RP1=1, select bank2
  2159  03E1  07DF               	addwf	main@time^(0+256),f
  2160  03E2  1803               	skipnc
  2161  03E3  0AE0               	incf	(main@time+1)^(0+256),f
  2162  03E4  3000               	movlw	0
  2163  03E5  07E0               	addwf	(main@time+1)^(0+256),f
  2164  03E6                     l3250:	
  2165                           
  2166                           ;debug.c: 287:             endCiclo.Bit = 0;
  2167  03E6  105D               	bcf	main@endCiclo^(0+256),0
  2168  03E7                     l3252:	
  2169                           
  2170                           ;debug.c: 289:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  2171  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  2172  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  2173  03E9  0864               	movf	_n_semafori,w
  2174  03EA  00BC               	movwf	??_main
  2175  03EB  073C               	addwf	??_main,w
  2176  03EC  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2177  03ED  0084               	movwf	4
  2178  03EE  1383               	bcf	3,7	;select IRP bank1
  2179  03EF  0800               	movf	0,w
  2180  03F0  00BD               	movwf	??_main+1
  2181  03F1  0A84               	incf	4,f
  2182  03F2  0800               	movf	0,w
  2183  03F3  00BE               	movwf	??_main+2
  2184  03F4  1283               	bcf	3,5	;RP0=0, select bank2
  2185  03F5  1703               	bsf	3,6	;RP1=1, select bank2
  2186  03F6  0861               	movf	main@lux_select^(0+256),w
  2187  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2188  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2189  03F9  00BF               	movwf	??_main+3
  2190  03FA  073F               	addwf	??_main+3,w
  2191  03FB  3E06               	addlw	6
  2192  03FC  073D               	addwf	??_main+1,w
  2193  03FD  00C0               	movwf	??_main+4
  2194  03FE  083E               	movf	??_main+2,w
  2195  03FF  1803               	skipnc
  2196  0400  3E01               	addlw	1
  2197  0401  00C1               	movwf	??_main+5
  2198  0402  0840               	movf	??_main+4,w
  2199  0403  0084               	movwf	4
  2200  0404  1783               	bsf	3,7
  2201  0405  1C41               	btfss	??_main+5,0
  2202  0406  1383               	bcf	3,7
  2203  0407  0800               	movf	0,w
  2204  0408  00C2               	movwf	??_main+6
  2205  0409  0A84               	incf	4,f
  2206  040A  0800               	movf	0,w
  2207  040B  00C3               	movwf	??_main+7
  2208  040C  1283               	bcf	3,5	;RP0=0, select bank2
  2209  040D  1703               	bsf	3,6	;RP1=1, select bank2
  2210  040E  085F               	movf	main@time^(0+256),w
  2211  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2212  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2213  0411  0242               	subwf	??_main+6,w
  2214  0412  00C4               	movwf	??_main+8
  2215  0413  1283               	bcf	3,5	;RP0=0, select bank2
  2216  0414  1703               	bsf	3,6	;RP1=1, select bank2
  2217  0415  0860               	movf	(main@time+1)^(0+256),w
  2218  0416  1C03               	skipc
  2219  0417  0A60               	incf	(main@time+1)^(0+256),w
  2220  0418  1283               	bcf	3,5	;RP0=0, select bank0
  2221  0419  1303               	bcf	3,6	;RP1=0, select bank0
  2222  041A  0243               	subwf	??_main+7,w
  2223  041B  00C5               	movwf	??_main+9
  2224  041C  1FC5               	btfss	??_main+9,7
  2225  041D  2C1F               	goto	u3491
  2226  041E  2C20               	goto	u3490
  2227  041F                     u3491:	
  2228  041F  2C23               	goto	l3256
  2229  0420                     u3490:	
  2230  0420                     l3254:	
  2231                           
  2232                           ;debug.c: 290:             {;debug.c: 291:                 endCiclo.Bit = 1;
  2233  0420  1283               	bcf	3,5	;RP0=0, select bank2
  2234  0421  1703               	bsf	3,6	;RP1=1, select bank2
  2235  0422  145D               	bsf	main@endCiclo^(0+256),0
  2236  0423                     l3256:	
  2237                           
  2238                           ;debug.c: 294:             if (lux_select == 2 && time >= (*Semafori[n_semafori]).times[
      +                          2])
  2239  0423  3002               	movlw	2
  2240  0424  1283               	bcf	3,5	;RP0=0, select bank2
  2241  0425  1703               	bsf	3,6	;RP1=1, select bank2
  2242  0426  0661               	xorwf	main@lux_select^(0+256),w
  2243  0427  1D03               	btfss	3,2
  2244  0428  2C2A               	goto	u3501
  2245  0429  2C2B               	goto	u3500
  2246  042A                     u3501:	
  2247  042A  2C61               	goto	l3262
  2248  042B                     u3500:	
  2249  042B                     l3258:	
  2250  042B  1283               	bcf	3,5	;RP0=0, select bank0
  2251  042C  1303               	bcf	3,6	;RP1=0, select bank0
  2252  042D  0864               	movf	_n_semafori,w
  2253  042E  00BC               	movwf	??_main
  2254  042F  073C               	addwf	??_main,w
  2255  0430  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2256  0431  0084               	movwf	4
  2257  0432  1383               	bcf	3,7	;select IRP bank1
  2258  0433  0800               	movf	0,w
  2259  0434  00BD               	movwf	??_main+1
  2260  0435  0A84               	incf	4,f
  2261  0436  0800               	movf	0,w
  2262  0437  00BE               	movwf	??_main+2
  2263  0438  083D               	movf	??_main+1,w
  2264  0439  3E0A               	addlw	10
  2265  043A  00BF               	movwf	??_main+3
  2266  043B  083E               	movf	??_main+2,w
  2267  043C  1803               	skipnc
  2268  043D  3E01               	addlw	1
  2269  043E  3E00               	addlw	0
  2270  043F  00C0               	movwf	??_main+4
  2271  0440  083F               	movf	??_main+3,w
  2272  0441  0084               	movwf	4
  2273  0442  1783               	bsf	3,7
  2274  0443  1C40               	btfss	??_main+4,0
  2275  0444  1383               	bcf	3,7
  2276  0445  0800               	movf	0,w
  2277  0446  00C1               	movwf	??_main+5
  2278  0447  0A84               	incf	4,f
  2279  0448  0800               	movf	0,w
  2280  0449  00C2               	movwf	??_main+6
  2281  044A  1283               	bcf	3,5	;RP0=0, select bank2
  2282  044B  1703               	bsf	3,6	;RP1=1, select bank2
  2283  044C  0860               	movf	(main@time+1)^(0+256),w
  2284  044D  3A80               	xorlw	128
  2285  044E  1283               	bcf	3,5	;RP0=0, select bank0
  2286  044F  1303               	bcf	3,6	;RP1=0, select bank0
  2287  0450  00C3               	movwf	??_main+7
  2288  0451  0842               	movf	??_main+6,w
  2289  0452  3A80               	xorlw	128
  2290  0453  0243               	subwf	??_main+7,w
  2291  0454  1D03               	skipz
  2292  0455  2C5A               	goto	u3515
  2293  0456  0841               	movf	??_main+5,w
  2294  0457  1283               	bcf	3,5	;RP0=0, select bank2
  2295  0458  1703               	bsf	3,6	;RP1=1, select bank2
  2296  0459  025F               	subwf	main@time^(0+256),w
  2297  045A                     u3515:	
  2298  045A  1C03               	skipc
  2299  045B  2C5D               	goto	u3511
  2300  045C  2C5E               	goto	u3510
  2301  045D                     u3511:	
  2302  045D  2C61               	goto	l3262
  2303  045E                     u3510:	
  2304  045E                     l3260:	
  2305                           
  2306                           ;debug.c: 295:             {;debug.c: 296:                 endCiclo.Bit = 1;
  2307  045E  1283               	bcf	3,5	;RP0=0, select bank2
  2308  045F  1703               	bsf	3,6	;RP1=1, select bank2
  2309  0460  145D               	bsf	main@endCiclo^(0+256),0
  2310  0461                     l3262:	
  2311                           
  2312                           ;debug.c: 299:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  2313  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2314  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2315  0463  0864               	movf	_n_semafori,w
  2316  0464  00BC               	movwf	??_main
  2317  0465  073C               	addwf	??_main,w
  2318  0466  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  2319  0467  0084               	movwf	4
  2320  0468  1383               	bcf	3,7	;select IRP bank1
  2321  0469  0800               	movf	0,w
  2322  046A  00BD               	movwf	??_main+1
  2323  046B  0A84               	incf	4,f
  2324  046C  0800               	movf	0,w
  2325  046D  00BE               	movwf	??_main+2
  2326  046E  1283               	bcf	3,5	;RP0=0, select bank2
  2327  046F  1703               	bsf	3,6	;RP1=1, select bank2
  2328  0470  0861               	movf	main@lux_select^(0+256),w
  2329  0471  1283               	bcf	3,5	;RP0=0, select bank0
  2330  0472  1303               	bcf	3,6	;RP1=0, select bank0
  2331  0473  00BF               	movwf	??_main+3
  2332  0474  073F               	addwf	??_main+3,w
  2333  0475  3E06               	addlw	6
  2334  0476  073D               	addwf	??_main+1,w
  2335  0477  00C0               	movwf	??_main+4
  2336  0478  083E               	movf	??_main+2,w
  2337  0479  1803               	skipnc
  2338  047A  3E01               	addlw	1
  2339  047B  00C1               	movwf	??_main+5
  2340  047C  0840               	movf	??_main+4,w
  2341  047D  0084               	movwf	4
  2342  047E  1783               	bsf	3,7
  2343  047F  1C41               	btfss	??_main+5,0
  2344  0480  1383               	bcf	3,7
  2345  0481  0800               	movf	0,w
  2346  0482  00C2               	movwf	??_main+6
  2347  0483  0A84               	incf	4,f
  2348  0484  0800               	movf	0,w
  2349  0485  00C3               	movwf	??_main+7
  2350  0486  1283               	bcf	3,5	;RP0=0, select bank2
  2351  0487  1703               	bsf	3,6	;RP1=1, select bank2
  2352  0488  085F               	movf	main@time^(0+256),w
  2353  0489  1283               	bcf	3,5	;RP0=0, select bank0
  2354  048A  1303               	bcf	3,6	;RP1=0, select bank0
  2355  048B  0242               	subwf	??_main+6,w
  2356  048C  00B0               	movwf	GetDigits@Time
  2357  048D  1283               	bcf	3,5	;RP0=0, select bank2
  2358  048E  1703               	bsf	3,6	;RP1=1, select bank2
  2359  048F  0860               	movf	(main@time+1)^(0+256),w
  2360  0490  1C03               	skipc
  2361  0491  0A60               	incf	(main@time+1)^(0+256),w
  2362  0492  1283               	bcf	3,5	;RP0=0, select bank0
  2363  0493  1303               	bcf	3,6	;RP1=0, select bank0
  2364  0494  0243               	subwf	??_main+7,w
  2365  0495  00B1               	movwf	GetDigits@Time+1
  2366  0496  120A  158A  266E  120A  118A  	fcall	_GetDigits
  2367  049B                     l3264:	
  2368                           
  2369                           ;debug.c: 303:         if (disp != old_disp)
  2370  049B  1283               	bcf	3,5	;RP0=0, select bank0
  2371  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2372  049D  085B               	movf	_disp,w
  2373  049E  065C               	xorwf	_old_disp,w
  2374  049F  1903               	skipnz
  2375  04A0  2CA2               	goto	u3521
  2376  04A1  2CA3               	goto	u3520
  2377  04A2                     u3521:	
  2378  04A2  2D1F               	goto	l3286
  2379  04A3                     u3520:	
  2380  04A3                     l3266:	
  2381                           
  2382                           ;debug.c: 304:         {;debug.c: 305:             old_disp = disp;
  2383  04A3  085B               	movf	_disp,w
  2384  04A4  00BC               	movwf	??_main
  2385  04A5  083C               	movf	??_main,w
  2386  04A6  00DC               	movwf	_old_disp
  2387                           
  2388                           ;debug.c: 306:             switch (disp)
  2389  04A7  2D09               	goto	l3284
  2390  04A8                     l3268:	
  2391                           
  2392                           ;debug.c: 309:                 if (centinaia > 0)
  2393  04A8  085D               	movf	_centinaia,w
  2394  04A9  1903               	btfsc	3,2
  2395  04AA  2CAC               	goto	u3531
  2396  04AB  2CAD               	goto	u3530
  2397  04AC                     u3531:	
  2398  04AC  2D1F               	goto	l3286
  2399  04AD                     u3530:	
  2400  04AD                     l3270:	
  2401                           
  2402                           ;debug.c: 310:                 {;debug.c: 311:                     SetDisplay(1, 0, 0, d
      +                          isplay[centinaia]);
  2403  04AD  01A0               	clrf	SetDisplay@d2
  2404  04AE  01A1               	clrf	SetDisplay@d3
  2405  04AF  085D               	movf	_centinaia,w
  2406  04B0  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2407  04B1  0084               	movwf	4
  2408  04B2  120A  158A  2000  120A  118A  	fcall	stringdir
  2409  04B7  00BC               	movwf	??_main
  2410  04B8  083C               	movf	??_main,w
  2411  04B9  00A2               	movwf	SetDisplay@value
  2412  04BA  3001               	movlw	1
  2413  04BB  120A  158A  23E3  120A  118A  	fcall	_SetDisplay
  2414  04C0  2D1F               	goto	l3286
  2415  04C1                     l3272:	
  2416                           
  2417                           ;debug.c: 315:                 if (decine > 0 || centinaia > 0)
  2418  04C1  085E               	movf	_decine,w
  2419  04C2  1D03               	btfss	3,2
  2420  04C3  2CC5               	goto	u3541
  2421  04C4  2CC6               	goto	u3540
  2422  04C5                     u3541:	
  2423  04C5  2CCB               	goto	l3276
  2424  04C6                     u3540:	
  2425  04C6                     l3274:	
  2426  04C6  085D               	movf	_centinaia,w
  2427  04C7  1903               	btfsc	3,2
  2428  04C8  2CCA               	goto	u3551
  2429  04C9  2CCB               	goto	u3550
  2430  04CA                     u3551:	
  2431  04CA  2D1F               	goto	l3286
  2432  04CB                     u3550:	
  2433  04CB                     l3276:	
  2434                           
  2435                           ;debug.c: 316:                 {;debug.c: 317:                     SetDisplay(0, 1, 0, d
      +                          isplay[decine]);
  2436  04CB  01A0               	clrf	SetDisplay@d2
  2437  04CC  0AA0               	incf	SetDisplay@d2,f
  2438  04CD  01A1               	clrf	SetDisplay@d3
  2439  04CE  085E               	movf	_decine,w
  2440  04CF  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2441  04D0  0084               	movwf	4
  2442  04D1  120A  158A  2000  120A  118A  	fcall	stringdir
  2443  04D6  00BC               	movwf	??_main
  2444  04D7  083C               	movf	??_main,w
  2445  04D8  00A2               	movwf	SetDisplay@value
  2446  04D9  3000               	movlw	0
  2447  04DA  120A  158A  23E3  120A  118A  	fcall	_SetDisplay
  2448  04DF  2D1F               	goto	l3286
  2449  04E0                     l3278:	
  2450                           
  2451                           ;debug.c: 321:                 SetDisplay(0, 0, 1, display[unita]);
  2452  04E0  01A0               	clrf	SetDisplay@d2
  2453  04E1  01A1               	clrf	SetDisplay@d3
  2454  04E2  0AA1               	incf	SetDisplay@d3,f
  2455  04E3  085F               	movf	_unita,w
  2456  04E4  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2457  04E5  0084               	movwf	4
  2458  04E6  120A  158A  2000  120A  118A  	fcall	stringdir
  2459  04EB  00BC               	movwf	??_main
  2460  04EC  083C               	movf	??_main,w
  2461  04ED  00A2               	movwf	SetDisplay@value
  2462  04EE  3000               	movlw	0
  2463  04EF  120A  158A  23E3  120A  118A  	fcall	_SetDisplay
  2464                           
  2465                           ;debug.c: 322:                 break;
  2466  04F4  2D1F               	goto	l3286
  2467  04F5                     l3280:	
  2468                           
  2469                           ;debug.c: 324:                 SetDisplay(1, 0, 0, display[n_semafori]);
  2470  04F5  01A0               	clrf	SetDisplay@d2
  2471  04F6  01A1               	clrf	SetDisplay@d3
  2472  04F7  0864               	movf	_n_semafori,w
  2473  04F8  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2474  04F9  0084               	movwf	4
  2475  04FA  120A  158A  2000  120A  118A  	fcall	stringdir
  2476  04FF  00BC               	movwf	??_main
  2477  0500  083C               	movf	??_main,w
  2478  0501  00A2               	movwf	SetDisplay@value
  2479  0502  3001               	movlw	1
  2480  0503  120A  158A  23E3  120A  118A  	fcall	_SetDisplay
  2481                           
  2482                           ;debug.c: 325:                 break;
  2483  0508  2D1F               	goto	l3286
  2484  0509                     l3284:	
  2485  0509  085B               	movf	_disp,w
  2486  050A  00BC               	movwf	??_main
  2487  050B  01BD               	clrf	??_main+1
  2488                           
  2489                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2490                           ; Switch size 1, requested type "simple"
  2491                           ; Number of cases is 1, Range of values is 0 to 0
  2492                           ; switch strategies available:
  2493                           ; Name         Instructions Cycles
  2494                           ; simple_byte            4     3 (average)
  2495                           ; direct_byte           11     8 (fixed)
  2496                           ; jumptable            260     6 (fixed)
  2497                           ;	Chosen strategy is simple_byte
  2498  050C  083D               	movf	??_main+1,w
  2499  050D  3A00               	xorlw	0	; case 0
  2500  050E  1903               	skipnz
  2501  050F  2D11               	goto	l3404
  2502  0510  2D1F               	goto	l3286
  2503  0511                     l3404:	
  2504                           
  2505                           ; Switch size 1, requested type "simple"
  2506                           ; Number of cases is 4, Range of values is 0 to 3
  2507                           ; switch strategies available:
  2508                           ; Name         Instructions Cycles
  2509                           ; simple_byte           13     7 (average)
  2510                           ; direct_byte           20     8 (fixed)
  2511                           ; jumptable            260     6 (fixed)
  2512                           ;	Chosen strategy is simple_byte
  2513  0511  083C               	movf	??_main,w
  2514  0512  3A00               	xorlw	0	; case 0
  2515  0513  1903               	skipnz
  2516  0514  2CA8               	goto	l3268
  2517  0515  3A01               	xorlw	1	; case 1
  2518  0516  1903               	skipnz
  2519  0517  2CC1               	goto	l3272
  2520  0518  3A03               	xorlw	3	; case 2
  2521  0519  1903               	skipnz
  2522  051A  2CE0               	goto	l3278
  2523  051B  3A01               	xorlw	1	; case 3
  2524  051C  1903               	skipnz
  2525  051D  2CF5               	goto	l3280
  2526  051E  2D1F               	goto	l3286
  2527  051F                     l3286:	
  2528                           
  2529                           ;debug.c: 328:         disp = (disp + 1) % 3;
  2530  051F  3003               	movlw	3
  2531  0520  1283               	bcf	3,5	;RP0=0, select bank0
  2532  0521  1303               	bcf	3,6	;RP1=0, select bank0
  2533  0522  00A0               	movwf	___awmod@divisor
  2534  0523  3000               	movlw	0
  2535  0524  00A1               	movwf	___awmod@divisor+1
  2536  0525  085B               	movf	_disp,w
  2537  0526  3E01               	addlw	1
  2538  0527  00A2               	movwf	___awmod@dividend
  2539  0528  3000               	movlw	0
  2540  0529  1803               	skipnc
  2541  052A  3001               	movlw	1
  2542  052B  00A3               	movwf	___awmod@dividend+1
  2543  052C  120A  158A  25AA  120A  118A  	fcall	___awmod
  2544  0531  1283               	bcf	3,5	;RP0=0, select bank0
  2545  0532  1303               	bcf	3,6	;RP1=0, select bank0
  2546  0533  0820               	movf	?___awmod,w
  2547  0534  00BC               	movwf	??_main
  2548  0535  083C               	movf	??_main,w
  2549  0536  00DB               	movwf	_disp
  2550  0537                     l3288:	
  2551                           
  2552                           ;debug.c: 334:         if (secondPassed.Bit && cycled.Bit)
  2553  0537  1C61               	btfss	_secondPassed,0
  2554  0538  2D3A               	goto	u3561
  2555  0539  2D3B               	goto	u3560
  2556  053A                     u3561:	
  2557  053A  2D41               	goto	l257
  2558  053B                     u3560:	
  2559  053B                     l3290:	
  2560  053B  1C60               	btfss	_cycled,0
  2561  053C  2D3E               	goto	u3571
  2562  053D  2D3F               	goto	u3570
  2563  053E                     u3571:	
  2564  053E  2D41               	goto	l257
  2565  053F                     u3570:	
  2566  053F                     l3292:	
  2567                           
  2568                           ;debug.c: 335:         {;debug.c: 336:             secondPassed.Bit = 0;
  2569  053F  1061               	bcf	_secondPassed,0
  2570                           
  2571                           ;debug.c: 337:             cycled.Bit = 0;
  2572  0540  1060               	bcf	_cycled,0
  2573  0541                     l257:	
  2574                           ;debug.c: 338:         }
  2575                           
  2576                           
  2577                           ;debug.c: 340:         if (secondPassed.Bit && !cycled.Bit)
  2578  0541  1C61               	btfss	_secondPassed,0
  2579  0542  2D44               	goto	u3581
  2580  0543  2D45               	goto	u3580
  2581  0544                     u3581:	
  2582  0544  2D4B               	goto	l3300
  2583  0545                     u3580:	
  2584  0545                     l3294:	
  2585  0545  1860               	btfsc	_cycled,0
  2586  0546  2D48               	goto	u3591
  2587  0547  2D49               	goto	u3590
  2588  0548                     u3591:	
  2589  0548  2D4B               	goto	l3300
  2590  0549                     u3590:	
  2591  0549                     l3296:	
  2592                           
  2593                           ;debug.c: 341:         {;debug.c: 342:             cycled.Bit = 1;
  2594  0549  1460               	bsf	_cycled,0
  2595  054A  2895               	goto	l3114
  2596  054B                     l3300:	
  2597  054B  2895               	goto	l3114
  2598  054C  120A  118A  280E   	ljmp	start
  2599  054F                     __end_of_main:	
  2600                           
  2601                           	psect	text1
  2602  0C7C                     __ptext1:	
  2603 ;; *************** function _sendByte *****************
  2604 ;; Defined at:
  2605 ;;		line 419 in file "debug.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;  byte0           1    wreg     unsigned char 
  2608 ;;  byte1           1   20[BANK0 ] unsigned char 
  2609 ;;  valore          1   21[BANK0 ] unsigned char 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  byte0           1   25[BANK0 ] unsigned char 
  2612 ;;  i               1   27[BANK0 ] unsigned char 
  2613 ;;  txByte          1   26[BANK0 ] PTR unsigned char 
  2614 ;;		 -> BuildByte@txByte(5), 
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2624 ;;      Params:         0       2       0       0       0
  2625 ;;      Locals:         0       3       0       0       0
  2626 ;;      Temps:          0       3       0       0       0
  2627 ;;      Totals:         0       8       0       0       0
  2628 ;;Total ram usage:        8 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; Hardware stack levels required when called:    3
  2631 ;; This function calls:
  2632 ;;		_BuildByte
  2633 ;;		_UART_TxChar
  2634 ;; This function is called by:
  2635 ;;		_main
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           
  2640                           ;psect for function _sendByte
  2641  0C7C                     _sendByte:	
  2642                           
  2643                           ;incstack = 0
  2644                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2645                           ;sendByte@byte0 stored from wreg
  2646  0C7C  1283               	bcf	3,5	;RP0=0, select bank0
  2647  0C7D  1303               	bcf	3,6	;RP1=0, select bank0
  2648  0C7E  00B9               	movwf	sendByte@byte0
  2649  0C7F                     l2998:	
  2650                           
  2651                           ;debug.c: 419: void sendByte(char byte0, char byte1, char valore);debug.c: 420: {;debug.
      +                          c: 421:     char *txByte;;debug.c: 422:     txByte = BuildByte(byte0, byte1, valore);
  2652  0C7F  0834               	movf	sendByte@byte1,w
  2653  0C80  00B6               	movwf	??_sendByte
  2654  0C81  0836               	movf	??_sendByte,w
  2655  0C82  00A0               	movwf	BuildByte@byte1
  2656  0C83  0835               	movf	sendByte@valore,w
  2657  0C84  00B7               	movwf	??_sendByte+1
  2658  0C85  0837               	movf	??_sendByte+1,w
  2659  0C86  00A1               	movwf	BuildByte@valore
  2660  0C87  0839               	movf	sendByte@byte0,w
  2661  0C88  120A  118A  26FB  120A  158A  	fcall	_BuildByte
  2662  0C8D  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0C8E  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0C8F  00B8               	movwf	??_sendByte+2
  2665  0C90  0838               	movf	??_sendByte+2,w
  2666  0C91  00BA               	movwf	sendByte@txByte
  2667  0C92                     l3000:	
  2668                           
  2669                           ;debug.c: 424:     for (unsigned char i = 0; i < 5; i++)
  2670  0C92  01BB               	clrf	sendByte@i
  2671  0C93                     l3006:	
  2672                           
  2673                           ;debug.c: 425:     {;debug.c: 426:         UART_TxChar(txByte++);
  2674  0C93  083A               	movf	sendByte@txByte,w
  2675  0C94  120A  158A  23B2  120A  158A  	fcall	_UART_TxChar
  2676  0C99                     l3008:	
  2677  0C99  3001               	movlw	1
  2678  0C9A  1283               	bcf	3,5	;RP0=0, select bank0
  2679  0C9B  1303               	bcf	3,6	;RP1=0, select bank0
  2680  0C9C  00B6               	movwf	??_sendByte
  2681  0C9D  0836               	movf	??_sendByte,w
  2682  0C9E  07BA               	addwf	sendByte@txByte,f
  2683  0C9F                     l3010:	
  2684                           
  2685                           ;debug.c: 427:     }
  2686  0C9F  3001               	movlw	1
  2687  0CA0  00B6               	movwf	??_sendByte
  2688  0CA1  0836               	movf	??_sendByte,w
  2689  0CA2  07BB               	addwf	sendByte@i,f
  2690  0CA3                     l3012:	
  2691  0CA3  3005               	movlw	5
  2692  0CA4  023B               	subwf	sendByte@i,w
  2693  0CA5  1C03               	skipc
  2694  0CA6  2CA8               	goto	u3201
  2695  0CA7  2CA9               	goto	u3200
  2696  0CA8                     u3201:	
  2697  0CA8  2C93               	goto	l3006
  2698  0CA9                     u3200:	
  2699  0CA9                     l298:	
  2700  0CA9  0008               	return
  2701  0CAA                     __end_of_sendByte:	
  2702                           
  2703                           	psect	text2
  2704  0BB2                     __ptext2:	
  2705 ;; *************** function _UART_TxChar *****************
  2706 ;; Defined at:
  2707 ;;		line 394 in file "debug.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  ch              1    wreg     unsigned char 
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;  ch              1    0[BANK0 ] unsigned char 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2721 ;;      Params:         0       0       0       0       0
  2722 ;;      Locals:         0       1       0       0       0
  2723 ;;      Temps:          0       0       0       0       0
  2724 ;;      Totals:         0       1       0       0       0
  2725 ;;Total ram usage:        1 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    2
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_sendByte
  2732 ;;		_UART_Write_Text
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           
  2737                           ;psect for function _UART_TxChar
  2738  0BB2                     _UART_TxChar:	
  2739                           
  2740                           ;incstack = 0
  2741                           ; Regs used in _UART_TxChar: [wreg]
  2742                           ;UART_TxChar@ch stored from wreg
  2743  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  2744  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  2745  0BB4  00A0               	movwf	UART_TxChar@ch
  2746  0BB5                     l2750:	
  2747  0BB5                     l278:	
  2748                           ;debug.c: 397:         ;
  2749                           
  2750                           
  2751                           ;debug.c: 396:     while (!TXIF)
  2752  0BB5  1E0C               	btfss	12,4	;volatile
  2753  0BB6  2BB8               	goto	u2741
  2754  0BB7  2BB9               	goto	u2740
  2755  0BB8                     u2741:	
  2756  0BB8  2BB5               	goto	l278
  2757  0BB9                     u2740:	
  2758  0BB9                     l280:	
  2759                           
  2760                           ;debug.c: 398:     TXIF = 0;
  2761  0BB9  120C               	bcf	12,4	;volatile
  2762  0BBA                     l2752:	
  2763                           
  2764                           ;debug.c: 399:     TXREG = ch;
  2765  0BBA  0820               	movf	UART_TxChar@ch,w
  2766  0BBB  0099               	movwf	25	;volatile
  2767  0BBC                     l281:	
  2768  0BBC  0008               	return
  2769  0BBD                     __end_of_UART_TxChar:	
  2770                           
  2771                           	psect	text3
  2772  06FB                     __ptext3:	
  2773 ;; *************** function _BuildByte *****************
  2774 ;; Defined at:
  2775 ;;		line 2 in file "./CustomLib/Serial.h"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  byte0           1    wreg     unsigned char 
  2778 ;;  byte1           1    0[BANK0 ] unsigned char 
  2779 ;;  valore          1    1[BANK0 ] unsigned char 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  byte0           1    4[BANK0 ] unsigned char 
  2782 ;;  y               2   14[BANK0 ] int 
  2783 ;;  y               2   12[BANK0 ] int 
  2784 ;;  i               2   18[BANK0 ] int 
  2785 ;;  i               2   16[BANK0 ] int 
  2786 ;;  txByte          5    5[BANK0 ] unsigned char [5]
  2787 ;;  sommaColumn     1   11[BANK0 ] unsigned char 
  2788 ;;  sommaRow        1   10[BANK0 ] unsigned char 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      PTR unsigned char 
  2791 ;; Registers used:
  2792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2798 ;;      Params:         0       2       0       0       0
  2799 ;;      Locals:         0      16       0       0       0
  2800 ;;      Temps:          0       2       0       0       0
  2801 ;;      Totals:         0      20       0       0       0
  2802 ;;Total ram usage:       20 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    2
  2805 ;; This function calls:
  2806 ;;		Nothing
  2807 ;; This function is called by:
  2808 ;;		_sendByte
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           
  2813                           ;psect for function _BuildByte
  2814  06FB                     _BuildByte:	
  2815                           
  2816                           ;incstack = 0
  2817                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2818                           ;BuildByte@byte0 stored from wreg
  2819  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  2820  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  2821  06FD  00A4               	movwf	BuildByte@byte0
  2822  06FE                     l2682:	
  2823                           
  2824                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2825  06FE  0824               	movf	BuildByte@byte0,w
  2826  06FF  397F               	andlw	127
  2827  0700  00A2               	movwf	??_BuildByte
  2828  0701  0822               	movf	??_BuildByte,w
  2829  0702  00A5               	movwf	BuildByte@txByte
  2830                           
  2831                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2832  0703  0820               	movf	BuildByte@byte1,w
  2833  0704  397F               	andlw	127
  2834  0705  00A2               	movwf	??_BuildByte
  2835  0706  0822               	movf	??_BuildByte,w
  2836  0707  00A6               	movwf	BuildByte@txByte+1
  2837                           
  2838                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2839  0708  0821               	movf	BuildByte@valore,w
  2840  0709  397F               	andlw	127
  2841  070A  00A2               	movwf	??_BuildByte
  2842  070B  0822               	movf	??_BuildByte,w
  2843  070C  00A7               	movwf	BuildByte@txByte+2
  2844  070D                     l2684:	
  2845                           
  2846                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2847  070D  0821               	movf	BuildByte@valore,w
  2848  070E  00A2               	movwf	??_BuildByte
  2849  070F  3007               	movlw	7
  2850  0710                     u2645:	
  2851  0710  1003               	clrc
  2852  0711  0CA2               	rrf	??_BuildByte,f
  2853  0712  3EFF               	addlw	-1
  2854  0713  1D03               	skipz
  2855  0714  2F10               	goto	u2645
  2856  0715  0822               	movf	??_BuildByte,w
  2857  0716  397F               	andlw	127
  2858  0717  00A3               	movwf	??_BuildByte+1
  2859  0718  0823               	movf	??_BuildByte+1,w
  2860  0719  00A8               	movwf	BuildByte@txByte+3
  2861  071A                     l2686:	
  2862                           
  2863                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2864  071A  01AA               	clrf	BuildByte@sommaRow
  2865  071B                     l2688:	
  2866                           
  2867                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2868  071B  01AB               	clrf	BuildByte@sommaColumn
  2869  071C                     l2690:	
  2870                           
  2871                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2872  071C  01B0               	clrf	BuildByte@i
  2873  071D  01B1               	clrf	BuildByte@i+1
  2874  071E                     l2696:	
  2875                           
  2876                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2877  071E  1283               	bcf	3,5	;RP0=0, select bank0
  2878  071F  1303               	bcf	3,6	;RP1=0, select bank0
  2879  0720  01AC               	clrf	BuildByte@y
  2880  0721  01AD               	clrf	BuildByte@y+1
  2881  0722                     l2702:	
  2882                           
  2883                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2884  0722  1283               	bcf	3,5	;RP0=0, select bank0
  2885  0723  1303               	bcf	3,6	;RP1=0, select bank0
  2886  0724  0830               	movf	BuildByte@i,w
  2887  0725  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2888  0726  0084               	movwf	4
  2889  0727  1383               	bcf	3,7	;select IRP bank0
  2890  0728  0800               	movf	0,w
  2891  0729  00A2               	movwf	??_BuildByte
  2892  072A  0A2C               	incf	BuildByte@y,w
  2893  072B  2F2E               	goto	u2654
  2894  072C                     u2655:	
  2895  072C  1003               	clrc
  2896  072D  0CA2               	rrf	??_BuildByte,f
  2897  072E                     u2654:	
  2898  072E  3EFF               	addlw	-1
  2899  072F  1D03               	skipz
  2900  0730  2F2C               	goto	u2655
  2901  0731  0822               	movf	??_BuildByte,w
  2902  0732  3901               	andlw	1
  2903  0733  00A3               	movwf	??_BuildByte+1
  2904  0734  0823               	movf	??_BuildByte+1,w
  2905  0735  07AA               	addwf	BuildByte@sommaRow,f
  2906  0736                     l2704:	
  2907                           
  2908                           ;./CustomLib/Serial.h: 18:         }
  2909  0736  3001               	movlw	1
  2910  0737  07AC               	addwf	BuildByte@y,f
  2911  0738  1803               	skipnc
  2912  0739  0AAD               	incf	BuildByte@y+1,f
  2913  073A  3000               	movlw	0
  2914  073B  07AD               	addwf	BuildByte@y+1,f
  2915  073C                     l2706:	
  2916  073C  082D               	movf	BuildByte@y+1,w
  2917  073D  3A80               	xorlw	128
  2918  073E  00FF               	movwf	btemp+1
  2919  073F  3080               	movlw	128
  2920  0740  027F               	subwf	btemp+1,w
  2921  0741  1D03               	skipz
  2922  0742  2F45               	goto	u2665
  2923  0743  3008               	movlw	8
  2924  0744  022C               	subwf	BuildByte@y,w
  2925  0745                     u2665:	
  2926  0745  1C03               	skipc
  2927  0746  2F48               	goto	u2661
  2928  0747  2F49               	goto	u2660
  2929  0748                     u2661:	
  2930  0748  2F22               	goto	l2702
  2931  0749                     u2660:	
  2932  0749                     l119:	
  2933                           
  2934                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  2935  0749  1283               	bcf	3,5	;RP0=0, select bank0
  2936  074A  1303               	bcf	3,6	;RP1=0, select bank0
  2937  074B  1C2A               	btfss	BuildByte@sommaRow,0
  2938  074C  2F4E               	goto	u2671
  2939  074D  2F4F               	goto	u2670
  2940  074E                     u2671:	
  2941  074E  2F57               	goto	l2710
  2942  074F                     u2670:	
  2943  074F                     l2708:	
  2944                           
  2945                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  2946  074F  3080               	movlw	128
  2947  0750  00A2               	movwf	??_BuildByte
  2948  0751  0830               	movf	BuildByte@i,w
  2949  0752  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2950  0753  0084               	movwf	4
  2951  0754  0822               	movf	??_BuildByte,w
  2952  0755  1383               	bcf	3,7	;select IRP bank0
  2953  0756  0780               	addwf	0,f
  2954  0757                     l2710:	
  2955                           
  2956                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  2957  0757  01AA               	clrf	BuildByte@sommaRow
  2958  0758                     l2714:	
  2959                           ;./CustomLib/Serial.h: 23:         }
  2960                           
  2961                           
  2962                           ;./CustomLib/Serial.h: 28:     }
  2963  0758  3001               	movlw	1
  2964  0759  07B0               	addwf	BuildByte@i,f
  2965  075A  1803               	skipnc
  2966  075B  0AB1               	incf	BuildByte@i+1,f
  2967  075C  3000               	movlw	0
  2968  075D  07B1               	addwf	BuildByte@i+1,f
  2969  075E                     l2716:	
  2970  075E  0831               	movf	BuildByte@i+1,w
  2971  075F  3A80               	xorlw	128
  2972  0760  00FF               	movwf	btemp+1
  2973  0761  3080               	movlw	128
  2974  0762  027F               	subwf	btemp+1,w
  2975  0763  1D03               	skipz
  2976  0764  2F67               	goto	u2685
  2977  0765  3004               	movlw	4
  2978  0766  0230               	subwf	BuildByte@i,w
  2979  0767                     u2685:	
  2980  0767  1C03               	skipc
  2981  0768  2F6A               	goto	u2681
  2982  0769  2F6B               	goto	u2680
  2983  076A                     u2681:	
  2984  076A  2F1E               	goto	l2696
  2985  076B                     u2680:	
  2986  076B                     l2718:	
  2987                           
  2988                           ;./CustomLib/Serial.h: 30:     for (int i = 0; i < 8; i++)
  2989  076B  1283               	bcf	3,5	;RP0=0, select bank0
  2990  076C  1303               	bcf	3,6	;RP1=0, select bank0
  2991  076D  01B2               	clrf	BuildByte@i_342
  2992  076E  01B3               	clrf	BuildByte@i_342+1
  2993  076F                     l2724:	
  2994                           
  2995                           ;./CustomLib/Serial.h: 31:     {;./CustomLib/Serial.h: 32:         for (int y = 0; y < 4
      +                          ; y++)
  2996  076F  1283               	bcf	3,5	;RP0=0, select bank0
  2997  0770  1303               	bcf	3,6	;RP1=0, select bank0
  2998  0771  01AE               	clrf	BuildByte@y_343
  2999  0772  01AF               	clrf	BuildByte@y_343+1
  3000  0773                     l2730:	
  3001                           
  3002                           ;./CustomLib/Serial.h: 34:         {;./CustomLib/Serial.h: 35:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3003  0773  1283               	bcf	3,5	;RP0=0, select bank0
  3004  0774  1303               	bcf	3,6	;RP1=0, select bank0
  3005  0775  082E               	movf	BuildByte@y_343,w
  3006  0776  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3007  0777  0084               	movwf	4
  3008  0778  1383               	bcf	3,7	;select IRP bank0
  3009  0779  0800               	movf	0,w
  3010  077A  00A2               	movwf	??_BuildByte
  3011  077B  0A32               	incf	BuildByte@i_342,w
  3012  077C  2F7F               	goto	u2694
  3013  077D                     u2695:	
  3014  077D  1003               	clrc
  3015  077E  0CA2               	rrf	??_BuildByte,f
  3016  077F                     u2694:	
  3017  077F  3EFF               	addlw	-1
  3018  0780  1D03               	skipz
  3019  0781  2F7D               	goto	u2695
  3020  0782  0822               	movf	??_BuildByte,w
  3021  0783  3901               	andlw	1
  3022  0784  00A3               	movwf	??_BuildByte+1
  3023  0785  0823               	movf	??_BuildByte+1,w
  3024  0786  07AB               	addwf	BuildByte@sommaColumn,f
  3025  0787                     l2732:	
  3026                           
  3027                           ;./CustomLib/Serial.h: 36:         }
  3028  0787  3001               	movlw	1
  3029  0788  07AE               	addwf	BuildByte@y_343,f
  3030  0789  1803               	skipnc
  3031  078A  0AAF               	incf	BuildByte@y_343+1,f
  3032  078B  3000               	movlw	0
  3033  078C  07AF               	addwf	BuildByte@y_343+1,f
  3034  078D                     l2734:	
  3035  078D  082F               	movf	BuildByte@y_343+1,w
  3036  078E  3A80               	xorlw	128
  3037  078F  00FF               	movwf	btemp+1
  3038  0790  3080               	movlw	128
  3039  0791  027F               	subwf	btemp+1,w
  3040  0792  1D03               	skipz
  3041  0793  2F96               	goto	u2705
  3042  0794  3004               	movlw	4
  3043  0795  022E               	subwf	BuildByte@y_343,w
  3044  0796                     u2705:	
  3045  0796  1C03               	skipc
  3046  0797  2F99               	goto	u2701
  3047  0798  2F9A               	goto	u2700
  3048  0799                     u2701:	
  3049  0799  2F73               	goto	l2730
  3050  079A                     u2700:	
  3051  079A                     l125:	
  3052                           
  3053                           ;./CustomLib/Serial.h: 37:         if (sommaColumn % 2 == 1)
  3054  079A  1283               	bcf	3,5	;RP0=0, select bank0
  3055  079B  1303               	bcf	3,6	;RP1=0, select bank0
  3056  079C  1C2B               	btfss	BuildByte@sommaColumn,0
  3057  079D  2F9F               	goto	u2711
  3058  079E  2FA0               	goto	u2710
  3059  079F                     u2711:	
  3060  079F  2FAD               	goto	l2738
  3061  07A0                     u2710:	
  3062  07A0                     l2736:	
  3063                           
  3064                           ;./CustomLib/Serial.h: 38:         {;./CustomLib/Serial.h: 39:             txByte[4] += 
      +                          0x01 << i;
  3065  07A0  3001               	movlw	1
  3066  07A1  00A2               	movwf	??_BuildByte
  3067  07A2  0A32               	incf	BuildByte@i_342,w
  3068  07A3  2FA6               	goto	u2724
  3069  07A4                     u2725:	
  3070  07A4  1003               	clrc
  3071  07A5  0DA2               	rlf	??_BuildByte,f
  3072  07A6                     u2724:	
  3073  07A6  3EFF               	addlw	-1
  3074  07A7  1D03               	skipz
  3075  07A8  2FA4               	goto	u2725
  3076  07A9  0822               	movf	??_BuildByte,w
  3077  07AA  00A3               	movwf	??_BuildByte+1
  3078  07AB  0823               	movf	??_BuildByte+1,w
  3079  07AC  07A9               	addwf	BuildByte@txByte+4,f
  3080  07AD                     l2738:	
  3081                           
  3082                           ;./CustomLib/Serial.h: 40:             sommaColumn = 0;
  3083  07AD  01AB               	clrf	BuildByte@sommaColumn
  3084  07AE                     l2742:	
  3085                           ;./CustomLib/Serial.h: 41:         }
  3086                           
  3087                           
  3088                           ;./CustomLib/Serial.h: 46:     }
  3089  07AE  3001               	movlw	1
  3090  07AF  07B2               	addwf	BuildByte@i_342,f
  3091  07B0  1803               	skipnc
  3092  07B1  0AB3               	incf	BuildByte@i_342+1,f
  3093  07B2  3000               	movlw	0
  3094  07B3  07B3               	addwf	BuildByte@i_342+1,f
  3095  07B4                     l2744:	
  3096  07B4  0833               	movf	BuildByte@i_342+1,w
  3097  07B5  3A80               	xorlw	128
  3098  07B6  00FF               	movwf	btemp+1
  3099  07B7  3080               	movlw	128
  3100  07B8  027F               	subwf	btemp+1,w
  3101  07B9  1D03               	skipz
  3102  07BA  2FBD               	goto	u2735
  3103  07BB  3008               	movlw	8
  3104  07BC  0232               	subwf	BuildByte@i_342,w
  3105  07BD                     u2735:	
  3106  07BD  1C03               	skipc
  3107  07BE  2FC0               	goto	u2731
  3108  07BF  2FC1               	goto	u2730
  3109  07C0                     u2731:	
  3110  07C0  2F6F               	goto	l2724
  3111  07C1                     u2730:	
  3112  07C1                     l2746:	
  3113                           
  3114                           ;./CustomLib/Serial.h: 48:     return txByte;
  3115  07C1  3025               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3116  07C2                     l128:	
  3117  07C2  0008               	return
  3118  07C3                     __end_of_BuildByte:	
  3119                           
  3120                           	psect	text4
  3121  0CDB                     __ptext4:	
  3122 ;; *************** function _map *****************
  3123 ;; Defined at:
  3124 ;;		line 1 in file "./CustomLib/Conversions.h"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  x               2   16[BANK0 ] int 
  3127 ;;  in_min          2   18[BANK0 ] int 
  3128 ;;  in_max          2   20[BANK0 ] int 
  3129 ;;  out_min         2   22[BANK0 ] int 
  3130 ;;  out_max         2   24[BANK0 ] int 
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  2   16[BANK0 ] int 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2, status,0, pclath, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3142 ;;      Params:         0      10       0       0       0
  3143 ;;      Locals:         0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0
  3145 ;;      Totals:         0      10       0       0       0
  3146 ;;Total ram usage:       10 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    3
  3149 ;; This function calls:
  3150 ;;		___awdiv
  3151 ;;		___wmul
  3152 ;; This function is called by:
  3153 ;;		_main
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           
  3158                           ;psect for function _map
  3159  0CDB                     _map:	
  3160  0CDB                     l2890:	
  3161                           ;incstack = 0
  3162                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3163                           
  3164                           
  3165                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3166  0CDB  1283               	bcf	3,5	;RP0=0, select bank0
  3167  0CDC  1303               	bcf	3,6	;RP1=0, select bank0
  3168  0CDD  0832               	movf	map@in_min,w
  3169  0CDE  0234               	subwf	map@in_max,w
  3170  0CDF  00A7               	movwf	___awdiv@divisor
  3171  0CE0  0833               	movf	map@in_min+1,w
  3172  0CE1  1C03               	skipc
  3173  0CE2  0A33               	incf	map@in_min+1,w
  3174  0CE3  0235               	subwf	map@in_max+1,w
  3175  0CE4  00A8               	movwf	___awdiv@divisor+1
  3176  0CE5  0832               	movf	map@in_min,w
  3177  0CE6  0230               	subwf	map@x,w
  3178  0CE7  00A0               	movwf	___wmul@multiplier
  3179  0CE8  0833               	movf	map@in_min+1,w
  3180  0CE9  1C03               	skipc
  3181  0CEA  0A33               	incf	map@in_min+1,w
  3182  0CEB  0231               	subwf	map@x+1,w
  3183  0CEC  00A1               	movwf	___wmul@multiplier+1
  3184  0CED  0836               	movf	map@out_min,w
  3185  0CEE  0238               	subwf	map@out_max,w
  3186  0CEF  00A2               	movwf	___wmul@multiplicand
  3187  0CF0  0837               	movf	map@out_min+1,w
  3188  0CF1  1C03               	skipc
  3189  0CF2  0A37               	incf	map@out_min+1,w
  3190  0CF3  0239               	subwf	map@out_max+1,w
  3191  0CF4  00A3               	movwf	___wmul@multiplicand+1
  3192  0CF5  120A  158A  2455  120A  158A  	fcall	___wmul
  3193  0CFA  1283               	bcf	3,5	;RP0=0, select bank0
  3194  0CFB  1303               	bcf	3,6	;RP1=0, select bank0
  3195  0CFC  0821               	movf	?___wmul+1,w
  3196  0CFD  00AA               	movwf	___awdiv@dividend+1
  3197  0CFE  0820               	movf	?___wmul,w
  3198  0CFF  00A9               	movwf	___awdiv@dividend
  3199  0D00  120A  158A  2605  120A  158A  	fcall	___awdiv
  3200  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  3201  0D06  1303               	bcf	3,6	;RP1=0, select bank0
  3202  0D07  0836               	movf	map@out_min,w
  3203  0D08  0727               	addwf	?___awdiv,w
  3204  0D09  00B0               	movwf	?_map
  3205  0D0A  0837               	movf	map@out_min+1,w
  3206  0D0B  1803               	skipnc
  3207  0D0C  0A37               	incf	map@out_min+1,w
  3208  0D0D  0728               	addwf	?___awdiv+1,w
  3209  0D0E  00B1               	movwf	?_map+1
  3210  0D0F                     l83:	
  3211  0D0F  0008               	return
  3212  0D10                     __end_of_map:	
  3213                           
  3214                           	psect	text5
  3215  0C55                     __ptext5:	
  3216 ;; *************** function ___wmul *****************
  3217 ;; Defined at:
  3218 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3221 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  product         2    4[BANK0 ] unsigned int 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  2    0[BANK0 ] unsigned int 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3233 ;;      Params:         0       4       0       0       0
  3234 ;;      Locals:         0       2       0       0       0
  3235 ;;      Temps:          0       0       0       0       0
  3236 ;;      Totals:         0       6       0       0       0
  3237 ;;Total ram usage:        6 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    2
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		_map
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           
  3248                           ;psect for function ___wmul
  3249  0C55                     ___wmul:	
  3250  0C55                     l2754:	
  3251                           ;incstack = 0
  3252                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3253                           
  3254  0C55  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0C56  1303               	bcf	3,6	;RP1=0, select bank0
  3256  0C57  01A4               	clrf	___wmul@product
  3257  0C58  01A5               	clrf	___wmul@product+1
  3258  0C59                     l2756:	
  3259  0C59  1C20               	btfss	___wmul@multiplier,0
  3260  0C5A  2C5C               	goto	u2751
  3261  0C5B  2C5D               	goto	u2750
  3262  0C5C                     u2751:	
  3263  0C5C  2C63               	goto	l442
  3264  0C5D                     u2750:	
  3265  0C5D                     l2758:	
  3266  0C5D  0822               	movf	___wmul@multiplicand,w
  3267  0C5E  07A4               	addwf	___wmul@product,f
  3268  0C5F  1803               	skipnc
  3269  0C60  0AA5               	incf	___wmul@product+1,f
  3270  0C61  0823               	movf	___wmul@multiplicand+1,w
  3271  0C62  07A5               	addwf	___wmul@product+1,f
  3272  0C63                     l442:	
  3273  0C63  3001               	movlw	1
  3274  0C64                     u2765:	
  3275  0C64  1003               	clrc
  3276  0C65  0DA2               	rlf	___wmul@multiplicand,f
  3277  0C66  0DA3               	rlf	___wmul@multiplicand+1,f
  3278  0C67  3EFF               	addlw	-1
  3279  0C68  1D03               	skipz
  3280  0C69  2C64               	goto	u2765
  3281  0C6A                     l2760:	
  3282  0C6A  3001               	movlw	1
  3283  0C6B                     u2775:	
  3284  0C6B  1003               	clrc
  3285  0C6C  0CA1               	rrf	___wmul@multiplier+1,f
  3286  0C6D  0CA0               	rrf	___wmul@multiplier,f
  3287  0C6E  3EFF               	addlw	-1
  3288  0C6F  1D03               	skipz
  3289  0C70  2C6B               	goto	u2775
  3290  0C71                     l2762:	
  3291  0C71  0820               	movf	___wmul@multiplier,w
  3292  0C72  0421               	iorwf	___wmul@multiplier+1,w
  3293  0C73  1D03               	btfss	3,2
  3294  0C74  2C76               	goto	u2781
  3295  0C75  2C77               	goto	u2780
  3296  0C76                     u2781:	
  3297  0C76  2C59               	goto	l2756
  3298  0C77                     u2780:	
  3299  0C77                     l2764:	
  3300  0C77  0825               	movf	___wmul@product+1,w
  3301  0C78  00A1               	movwf	?___wmul+1
  3302  0C79  0824               	movf	___wmul@product,w
  3303  0C7A  00A0               	movwf	?___wmul
  3304  0C7B                     l444:	
  3305  0C7B  0008               	return
  3306  0C7C                     __end_of___wmul:	
  3307                           
  3308                           	psect	text6
  3309  0BBD                     __ptext6:	
  3310 ;; *************** function _init_ADC *****************
  3311 ;; Defined at:
  3312 ;;		line 364 in file "debug.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3326 ;;      Params:         0       0       0       0       0
  3327 ;;      Locals:         0       0       0       0       0
  3328 ;;      Temps:          0       1       0       0       0
  3329 ;;      Totals:         0       1       0       0       0
  3330 ;;Total ram usage:        1 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    2
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_main
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _init_ADC
  3342  0BBD                     _init_ADC:	
  3343  0BBD                     l2946:	
  3344                           ;incstack = 0
  3345                           ; Regs used in _init_ADC: [wreg+status,2]
  3346                           
  3347                           
  3348                           ;debug.c: 366:     TRISA = 0xE3;
  3349  0BBD  30E3               	movlw	227
  3350  0BBE  1683               	bsf	3,5	;RP0=1, select bank1
  3351  0BBF  1303               	bcf	3,6	;RP1=0, select bank1
  3352  0BC0  0085               	movwf	5	;volatile
  3353  0BC1                     l2948:	
  3354                           
  3355                           ;debug.c: 367:     ADCON0 = 0x00;
  3356  0BC1  1283               	bcf	3,5	;RP0=0, select bank0
  3357  0BC2  1303               	bcf	3,6	;RP1=0, select bank0
  3358  0BC3  019F               	clrf	31	;volatile
  3359  0BC4                     l2950:	
  3360                           
  3361                           ;debug.c: 368:     ADCON1 = 0x80;
  3362  0BC4  3080               	movlw	128
  3363  0BC5  1683               	bsf	3,5	;RP0=1, select bank1
  3364  0BC6  1303               	bcf	3,6	;RP1=0, select bank1
  3365  0BC7  009F               	movwf	31	;volatile
  3366  0BC8                     l2952:	
  3367                           
  3368                           ;debug.c: 369:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3369  0BC8  3019               	movlw	25
  3370  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  3371  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  3372  0BCB  00A0               	movwf	??_init_ADC
  3373  0BCC                     u3617:	
  3374  0BCC  0BA0               	decfsz	??_init_ADC,f
  3375  0BCD  2BCC               	goto	u3617
  3376  0BCE  2BCF               	nop2
  3377  0BCF                     l266:	
  3378  0BCF  0008               	return
  3379  0BD0                     __end_of_init_ADC:	
  3380                           
  3381                           	psect	text7
  3382  0632                     __ptext7:	
  3383 ;; *************** function _bitParita *****************
  3384 ;; Defined at:
  3385 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;  rx              1    wreg     PTR unsigned char 
  3388 ;;		 -> dataFromGateway(15), 
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;  rx              1   17[BANK0 ] PTR unsigned char 
  3391 ;;		 -> dataFromGateway(15), 
  3392 ;;  y               2   15[BANK0 ] int 
  3393 ;;  y               2   13[BANK0 ] int 
  3394 ;;  i               2   20[BANK0 ] int 
  3395 ;;  i               2   18[BANK0 ] int 
  3396 ;;  errorRow        1   12[BANK0 ] unsigned char 
  3397 ;;  error           1   11[BANK0 ] unsigned char 
  3398 ;;  errorColumn     1   10[BANK0 ] unsigned char 
  3399 ;;  sommaColumn     1    9[BANK0 ] unsigned char 
  3400 ;;  sommaRow        1    8[BANK0 ] unsigned char 
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  1    wreg      void 
  3403 ;; Registers used:
  3404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3410 ;;      Params:         0       0       0       0       0
  3411 ;;      Locals:         0      14       0       0       0
  3412 ;;      Temps:          0       4       0       0       0
  3413 ;;      Totals:         0      18       0       0       0
  3414 ;;Total ram usage:       18 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:    3
  3417 ;; This function calls:
  3418 ;;		_bitChange
  3419 ;; This function is called by:
  3420 ;;		_main
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           
  3425                           ;psect for function _bitParita
  3426  0632                     _bitParita:	
  3427                           
  3428                           ;incstack = 0
  3429                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3430                           ;bitParita@rx stored from wreg
  3431  0632  1283               	bcf	3,5	;RP0=0, select bank0
  3432  0633  1303               	bcf	3,6	;RP1=0, select bank0
  3433  0634  00B1               	movwf	bitParita@rx
  3434  0635                     l2894:	
  3435                           
  3436                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3437  0635  01AB               	clrf	bitParita@error
  3438                           
  3439                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3440  0636  01A8               	clrf	bitParita@sommaRow
  3441                           
  3442                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3443  0637  01AC               	clrf	bitParita@errorRow
  3444                           
  3445                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  3446  0638  01A9               	clrf	bitParita@sommaColumn
  3447                           
  3448                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  3449  0639  01AA               	clrf	bitParita@errorColumn
  3450                           
  3451                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  3452  063A  01B2               	clrf	bitParita@i
  3453  063B  01B3               	clrf	bitParita@i+1
  3454  063C                     l2900:	
  3455                           
  3456                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  3457  063C  1283               	bcf	3,5	;RP0=0, select bank0
  3458  063D  1303               	bcf	3,6	;RP1=0, select bank0
  3459  063E  01AD               	clrf	bitParita@y
  3460  063F  01AE               	clrf	bitParita@y+1
  3461  0640                     l2906:	
  3462                           
  3463                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  3464  0640  1283               	bcf	3,5	;RP0=0, select bank0
  3465  0641  1303               	bcf	3,6	;RP1=0, select bank0
  3466  0642  0832               	movf	bitParita@i,w
  3467  0643  0731               	addwf	bitParita@rx,w
  3468  0644  00A4               	movwf	??_bitParita
  3469  0645  0824               	movf	??_bitParita,w
  3470  0646  0084               	movwf	4
  3471  0647  1383               	bcf	3,7	;select IRP bank0
  3472  0648  0800               	movf	0,w
  3473  0649  00A5               	movwf	??_bitParita+1
  3474  064A  0A2D               	incf	bitParita@y,w
  3475  064B  2E4E               	goto	u3084
  3476  064C                     u3085:	
  3477  064C  1003               	clrc
  3478  064D  0CA5               	rrf	??_bitParita+1,f
  3479  064E                     u3084:	
  3480  064E  3EFF               	addlw	-1
  3481  064F  1D03               	skipz
  3482  0650  2E4C               	goto	u3085
  3483  0651  0825               	movf	??_bitParita+1,w
  3484  0652  3901               	andlw	1
  3485  0653  00A6               	movwf	??_bitParita+2
  3486  0654  0826               	movf	??_bitParita+2,w
  3487  0655  07A8               	addwf	bitParita@sommaRow,f
  3488  0656                     l2908:	
  3489                           
  3490                           ;./CustomLib/BitsFlow.h: 26:         }
  3491  0656  3001               	movlw	1
  3492  0657  07AD               	addwf	bitParita@y,f
  3493  0658  1803               	skipnc
  3494  0659  0AAE               	incf	bitParita@y+1,f
  3495  065A  3000               	movlw	0
  3496  065B  07AE               	addwf	bitParita@y+1,f
  3497  065C                     l2910:	
  3498  065C  082E               	movf	bitParita@y+1,w
  3499  065D  3A80               	xorlw	128
  3500  065E  00FF               	movwf	btemp+1
  3501  065F  3080               	movlw	128
  3502  0660  027F               	subwf	btemp+1,w
  3503  0661  1D03               	skipz
  3504  0662  2E65               	goto	u3095
  3505  0663  3008               	movlw	8
  3506  0664  022D               	subwf	bitParita@y,w
  3507  0665                     u3095:	
  3508  0665  1C03               	skipc
  3509  0666  2E68               	goto	u3091
  3510  0667  2E69               	goto	u3090
  3511  0668                     u3091:	
  3512  0668  2E40               	goto	l2906
  3513  0669                     u3090:	
  3514  0669                     l105:	
  3515                           
  3516                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  3517  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3518  066A  1303               	bcf	3,6	;RP1=0, select bank0
  3519  066B  1C28               	btfss	bitParita@sommaRow,0
  3520  066C  2E6E               	goto	u3101
  3521  066D  2E6F               	goto	u3100
  3522  066E                     u3101:	
  3523  066E  2E75               	goto	l106
  3524  066F                     u3100:	
  3525  066F                     l2912:	
  3526                           
  3527                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  3528  066F  01AB               	clrf	bitParita@error
  3529  0670  0AAB               	incf	bitParita@error,f
  3530  0671                     l2914:	
  3531                           
  3532                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  3533  0671  0832               	movf	bitParita@i,w
  3534  0672  00A4               	movwf	??_bitParita
  3535  0673  0824               	movf	??_bitParita,w
  3536  0674  00AC               	movwf	bitParita@errorRow
  3537  0675                     l106:	
  3538                           ;./CustomLib/BitsFlow.h: 31:         }
  3539                           
  3540                           
  3541                           ;./CustomLib/BitsFlow.h: 32:     }
  3542  0675  3001               	movlw	1
  3543  0676  07B2               	addwf	bitParita@i,f
  3544  0677  1803               	skipnc
  3545  0678  0AB3               	incf	bitParita@i+1,f
  3546  0679  3000               	movlw	0
  3547  067A  07B3               	addwf	bitParita@i+1,f
  3548  067B                     l2916:	
  3549  067B  0833               	movf	bitParita@i+1,w
  3550  067C  3A80               	xorlw	128
  3551  067D  00FF               	movwf	btemp+1
  3552  067E  3080               	movlw	128
  3553  067F  027F               	subwf	btemp+1,w
  3554  0680  1D03               	skipz
  3555  0681  2E84               	goto	u3115
  3556  0682  3005               	movlw	5
  3557  0683  0232               	subwf	bitParita@i,w
  3558  0684                     u3115:	
  3559  0684  1C03               	skipc
  3560  0685  2E87               	goto	u3111
  3561  0686  2E88               	goto	u3110
  3562  0687                     u3111:	
  3563  0687  2E3C               	goto	l2900
  3564  0688                     u3110:	
  3565  0688                     l2918:	
  3566                           
  3567                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  3568  0688  1283               	bcf	3,5	;RP0=0, select bank0
  3569  0689  1303               	bcf	3,6	;RP1=0, select bank0
  3570  068A  01B4               	clrf	bitParita@i_330
  3571  068B  01B5               	clrf	bitParita@i_330+1
  3572  068C                     l2924:	
  3573                           
  3574                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  3575  068C  1283               	bcf	3,5	;RP0=0, select bank0
  3576  068D  1303               	bcf	3,6	;RP1=0, select bank0
  3577  068E  01AF               	clrf	bitParita@y_331
  3578  068F  01B0               	clrf	bitParita@y_331+1
  3579  0690                     l2930:	
  3580                           
  3581                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  3582  0690  1283               	bcf	3,5	;RP0=0, select bank0
  3583  0691  1303               	bcf	3,6	;RP1=0, select bank0
  3584  0692  082F               	movf	bitParita@y_331,w
  3585  0693  0731               	addwf	bitParita@rx,w
  3586  0694  00A4               	movwf	??_bitParita
  3587  0695  0824               	movf	??_bitParita,w
  3588  0696  0084               	movwf	4
  3589  0697  1383               	bcf	3,7	;select IRP bank0
  3590  0698  0800               	movf	0,w
  3591  0699  00A5               	movwf	??_bitParita+1
  3592  069A  0A34               	incf	bitParita@i_330,w
  3593  069B  2E9E               	goto	u3124
  3594  069C                     u3125:	
  3595  069C  1003               	clrc
  3596  069D  0CA5               	rrf	??_bitParita+1,f
  3597  069E                     u3124:	
  3598  069E  3EFF               	addlw	-1
  3599  069F  1D03               	skipz
  3600  06A0  2E9C               	goto	u3125
  3601  06A1  0825               	movf	??_bitParita+1,w
  3602  06A2  3901               	andlw	1
  3603  06A3  00A6               	movwf	??_bitParita+2
  3604  06A4  0826               	movf	??_bitParita+2,w
  3605  06A5  07A9               	addwf	bitParita@sommaColumn,f
  3606  06A6                     l2932:	
  3607                           
  3608                           ;./CustomLib/BitsFlow.h: 39:         }
  3609  06A6  3001               	movlw	1
  3610  06A7  07AF               	addwf	bitParita@y_331,f
  3611  06A8  1803               	skipnc
  3612  06A9  0AB0               	incf	bitParita@y_331+1,f
  3613  06AA  3000               	movlw	0
  3614  06AB  07B0               	addwf	bitParita@y_331+1,f
  3615  06AC                     l2934:	
  3616  06AC  0830               	movf	bitParita@y_331+1,w
  3617  06AD  3A80               	xorlw	128
  3618  06AE  00FF               	movwf	btemp+1
  3619  06AF  3080               	movlw	128
  3620  06B0  027F               	subwf	btemp+1,w
  3621  06B1  1D03               	skipz
  3622  06B2  2EB5               	goto	u3135
  3623  06B3  3004               	movlw	4
  3624  06B4  022F               	subwf	bitParita@y_331,w
  3625  06B5                     u3135:	
  3626  06B5  1C03               	skipc
  3627  06B6  2EB8               	goto	u3131
  3628  06B7  2EB9               	goto	u3130
  3629  06B8                     u3131:	
  3630  06B8  2E90               	goto	l2930
  3631  06B9                     u3130:	
  3632  06B9                     l110:	
  3633                           
  3634                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  3635  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  3636  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  3637  06BB  1C29               	btfss	bitParita@sommaColumn,0
  3638  06BC  2EBE               	goto	u3141
  3639  06BD  2EBF               	goto	u3140
  3640  06BE                     u3141:	
  3641  06BE  2EC5               	goto	l111
  3642  06BF                     u3140:	
  3643  06BF                     l2936:	
  3644                           
  3645                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  3646  06BF  01AB               	clrf	bitParita@error
  3647  06C0  0AAB               	incf	bitParita@error,f
  3648  06C1                     l2938:	
  3649                           
  3650                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  3651  06C1  0834               	movf	bitParita@i_330,w
  3652  06C2  00A4               	movwf	??_bitParita
  3653  06C3  0824               	movf	??_bitParita,w
  3654  06C4  00AA               	movwf	bitParita@errorColumn
  3655  06C5                     l111:	
  3656                           ;./CustomLib/BitsFlow.h: 44:         }
  3657                           
  3658                           
  3659                           ;./CustomLib/BitsFlow.h: 45:     }
  3660  06C5  3001               	movlw	1
  3661  06C6  07B4               	addwf	bitParita@i_330,f
  3662  06C7  1803               	skipnc
  3663  06C8  0AB5               	incf	bitParita@i_330+1,f
  3664  06C9  3000               	movlw	0
  3665  06CA  07B5               	addwf	bitParita@i_330+1,f
  3666  06CB                     l2940:	
  3667  06CB  0835               	movf	bitParita@i_330+1,w
  3668  06CC  3A80               	xorlw	128
  3669  06CD  00FF               	movwf	btemp+1
  3670  06CE  3080               	movlw	128
  3671  06CF  027F               	subwf	btemp+1,w
  3672  06D0  1D03               	skipz
  3673  06D1  2ED4               	goto	u3155
  3674  06D2  3008               	movlw	8
  3675  06D3  0234               	subwf	bitParita@i_330,w
  3676  06D4                     u3155:	
  3677  06D4  1C03               	skipc
  3678  06D5  2ED7               	goto	u3151
  3679  06D6  2ED8               	goto	u3150
  3680  06D7                     u3151:	
  3681  06D7  2E8C               	goto	l2924
  3682  06D8                     u3150:	
  3683  06D8                     l2942:	
  3684                           
  3685                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  3686  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  3687  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  3688  06DA  082B               	movf	bitParita@error,w
  3689  06DB  1903               	btfsc	3,2
  3690  06DC  2EDE               	goto	u3161
  3691  06DD  2EDF               	goto	u3160
  3692  06DE                     u3161:	
  3693  06DE  2EFA               	goto	l113
  3694  06DF                     u3160:	
  3695  06DF                     l2944:	
  3696                           
  3697                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  3698  06DF  082A               	movf	bitParita@errorColumn,w
  3699  06E0  00A4               	movwf	??_bitParita
  3700  06E1  0824               	movf	??_bitParita,w
  3701  06E2  00A0               	movwf	bitChange@n
  3702  06E3  082C               	movf	bitParita@errorRow,w
  3703  06E4  0731               	addwf	bitParita@rx,w
  3704  06E5  00A5               	movwf	??_bitParita+1
  3705  06E6  0825               	movf	??_bitParita+1,w
  3706  06E7  0084               	movwf	4
  3707  06E8  1383               	bcf	3,7	;select IRP bank0
  3708  06E9  0800               	movf	0,w
  3709  06EA  120A  158A  24AA  120A  118A  	fcall	_bitChange
  3710  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  3711  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  3712  06F1  00A6               	movwf	??_bitParita+2
  3713  06F2  082C               	movf	bitParita@errorRow,w
  3714  06F3  0731               	addwf	bitParita@rx,w
  3715  06F4  00A7               	movwf	??_bitParita+3
  3716  06F5  0827               	movf	??_bitParita+3,w
  3717  06F6  0084               	movwf	4
  3718  06F7  0826               	movf	??_bitParita+2,w
  3719  06F8  1383               	bcf	3,7	;select IRP bank0
  3720  06F9  0080               	movwf	0
  3721  06FA                     l113:	
  3722  06FA  0008               	return
  3723  06FB                     __end_of_bitParita:	
  3724                           
  3725                           	psect	text8
  3726  0CAA                     __ptext8:	
  3727 ;; *************** function _bitChange *****************
  3728 ;; Defined at:
  3729 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;  dato            1    wreg     unsigned char 
  3732 ;;  n               1    0[BANK0 ] unsigned char 
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  dato            1    3[BANK0 ] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      unsigned char 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2, status,0
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3744 ;;      Params:         0       1       0       0       0
  3745 ;;      Locals:         0       1       0       0       0
  3746 ;;      Temps:          0       2       0       0       0
  3747 ;;      Totals:         0       4       0       0       0
  3748 ;;Total ram usage:        4 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    2
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_bitParita
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           
  3759                           ;psect for function _bitChange
  3760  0CAA                     _bitChange:	
  3761                           
  3762                           ;incstack = 0
  3763                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  3764                           ;bitChange@dato stored from wreg
  3765  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  3766  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  3767  0CAC  00A3               	movwf	bitChange@dato
  3768  0CAD                     l2670:	
  3769                           
  3770                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  3771  0CAD  3001               	movlw	1
  3772  0CAE  00A1               	movwf	??_bitChange
  3773  0CAF  0A20               	incf	bitChange@n,w
  3774  0CB0  2CB3               	goto	u2604
  3775  0CB1                     u2605:	
  3776  0CB1  1003               	clrc
  3777  0CB2  0DA1               	rlf	??_bitChange,f
  3778  0CB3                     u2604:	
  3779  0CB3  3EFF               	addlw	-1
  3780  0CB4  1D03               	skipz
  3781  0CB5  2CB1               	goto	u2605
  3782  0CB6  0821               	movf	??_bitChange,w
  3783  0CB7  0523               	andwf	bitChange@dato,w
  3784  0CB8  1903               	btfsc	3,2
  3785  0CB9  2CBB               	goto	u2611
  3786  0CBA  2CBC               	goto	u2610
  3787  0CBB                     u2611:	
  3788  0CBB  2CCB               	goto	l2678
  3789  0CBC                     u2610:	
  3790  0CBC                     l2672:	
  3791                           
  3792                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  3793  0CBC  3001               	movlw	1
  3794  0CBD  00A1               	movwf	??_bitChange
  3795  0CBE  0A20               	incf	bitChange@n,w
  3796  0CBF  2CC2               	goto	u2624
  3797  0CC0                     u2625:	
  3798  0CC0  1003               	clrc
  3799  0CC1  0DA1               	rlf	??_bitChange,f
  3800  0CC2                     u2624:	
  3801  0CC2  3EFF               	addlw	-1
  3802  0CC3  1D03               	skipz
  3803  0CC4  2CC0               	goto	u2625
  3804  0CC5  0821               	movf	??_bitChange,w
  3805  0CC6  00A2               	movwf	??_bitChange+1
  3806  0CC7  0822               	movf	??_bitChange+1,w
  3807  0CC8  04A3               	iorwf	bitChange@dato,f
  3808  0CC9  0823               	movf	bitChange@dato,w
  3809  0CCA  2CDA               	goto	l98
  3810  0CCB                     l2678:	
  3811                           
  3812                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  3813  0CCB  3001               	movlw	1
  3814  0CCC  00A1               	movwf	??_bitChange
  3815  0CCD  0A20               	incf	bitChange@n,w
  3816  0CCE  2CD1               	goto	u2634
  3817  0CCF                     u2635:	
  3818  0CCF  1003               	clrc
  3819  0CD0  0DA1               	rlf	??_bitChange,f
  3820  0CD1                     u2634:	
  3821  0CD1  3EFF               	addlw	-1
  3822  0CD2  1D03               	skipz
  3823  0CD3  2CCF               	goto	u2635
  3824  0CD4  0821               	movf	??_bitChange,w
  3825  0CD5  3AFF               	xorlw	255
  3826  0CD6  00A2               	movwf	??_bitChange+1
  3827  0CD7  0822               	movf	??_bitChange+1,w
  3828  0CD8  05A3               	andwf	bitChange@dato,f
  3829  0CD9  0823               	movf	bitChange@dato,w
  3830  0CDA                     l98:	
  3831  0CDA  0008               	return
  3832  0CDB                     __end_of_bitChange:	
  3833                           
  3834                           	psect	text9
  3835  0BF8                     __ptext9:	
  3836 ;; *************** function ___bmul *****************
  3837 ;; Defined at:
  3838 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  multiplier      1    wreg     unsigned char 
  3841 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3844 ;;  product         1    2[BANK0 ] unsigned char 
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      unsigned char 
  3847 ;; Registers used:
  3848 ;;		wreg, status,2, status,0
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3854 ;;      Params:         0       1       0       0       0
  3855 ;;      Locals:         0       2       0       0       0
  3856 ;;      Temps:          0       1       0       0       0
  3857 ;;      Totals:         0       4       0       0       0
  3858 ;;Total ram usage:        4 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    2
  3861 ;; This function calls:
  3862 ;;		Nothing
  3863 ;; This function is called by:
  3864 ;;		_main
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           
  3869                           ;psect for function ___bmul
  3870  0BF8                     ___bmul:	
  3871                           
  3872                           ;incstack = 0
  3873                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3874                           ;___bmul@multiplier stored from wreg
  3875  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  3876  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  3877  0BFA  00A3               	movwf	___bmul@multiplier
  3878  0BFB                     l3052:	
  3879  0BFB  01A2               	clrf	___bmul@product
  3880  0BFC                     l3054:	
  3881  0BFC  1C23               	btfss	___bmul@multiplier,0
  3882  0BFD  2BFF               	goto	u3241
  3883  0BFE  2C00               	goto	u3240
  3884  0BFF                     u3241:	
  3885  0BFF  2C04               	goto	l3058
  3886  0C00                     u3240:	
  3887  0C00                     l3056:	
  3888  0C00  0820               	movf	___bmul@multiplicand,w
  3889  0C01  00A1               	movwf	??___bmul
  3890  0C02  0821               	movf	??___bmul,w
  3891  0C03  07A2               	addwf	___bmul@product,f
  3892  0C04                     l3058:	
  3893  0C04  1003               	clrc
  3894  0C05  0DA0               	rlf	___bmul@multiplicand,f
  3895  0C06                     l3060:	
  3896  0C06  1003               	clrc
  3897  0C07  0CA3               	rrf	___bmul@multiplier,f
  3898  0C08  0823               	movf	___bmul@multiplier,w
  3899  0C09  1D03               	btfss	3,2
  3900  0C0A  2C0C               	goto	u3251
  3901  0C0B  2C0D               	goto	u3250
  3902  0C0C                     u3251:	
  3903  0C0C  2BFC               	goto	l3054
  3904  0C0D                     u3250:	
  3905  0C0D                     l3062:	
  3906  0C0D  0822               	movf	___bmul@product,w
  3907  0C0E                     l468:	
  3908  0C0E  0008               	return
  3909  0C0F                     __end_of___bmul:	
  3910                           
  3911                           	psect	text10
  3912  07C3                     __ptext10:	
  3913 ;; *************** function _UART_Init *****************
  3914 ;; Defined at:
  3915 ;;		line 382 in file "debug.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  baudrate        2   15[BANK0 ] int 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      void 
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0, pclath, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3929 ;;      Params:         0       2       0       0       0
  3930 ;;      Locals:         0       0       0       0       0
  3931 ;;      Temps:          0       4       0       0       0
  3932 ;;      Totals:         0       6       0       0       0
  3933 ;;Total ram usage:        6 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    3
  3936 ;; This function calls:
  3937 ;;		___aldiv
  3938 ;; This function is called by:
  3939 ;;		_main
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           
  3944                           ;psect for function _UART_Init
  3945  07C3                     _UART_Init:	
  3946  07C3                     l2954:	
  3947                           ;incstack = 0
  3948                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3949                           
  3950                           
  3951                           ;debug.c: 382: void UART_Init(int baudrate);debug.c: 383: {;debug.c: 384:     TRISCbits.
      +                          TRISC6 = 0;
  3952  07C3  1683               	bsf	3,5	;RP0=1, select bank1
  3953  07C4  1303               	bcf	3,6	;RP1=0, select bank1
  3954  07C5  1307               	bcf	7,6	;volatile
  3955                           
  3956                           ;debug.c: 385:     TXSTAbits.TXEN = 1;
  3957  07C6  1698               	bsf	24,5	;volatile
  3958                           
  3959                           ;debug.c: 386:     RCSTAbits.SPEN = 1;
  3960  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  3961  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  3962  07C9  1798               	bsf	24,7	;volatile
  3963                           
  3964                           ;debug.c: 387:     RCSTAbits.CREN = 1;
  3965  07CA  1618               	bsf	24,4	;volatile
  3966  07CB                     l2956:	
  3967                           
  3968                           ;debug.c: 388:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  3969  07CB  082F               	movf	UART_Init@baudrate,w
  3970  07CC  00B1               	movwf	??_UART_Init
  3971  07CD  0830               	movf	UART_Init@baudrate+1,w
  3972  07CE  00B2               	movwf	??_UART_Init+1
  3973  07CF  3000               	movlw	0
  3974  07D0  1BB2               	btfsc	??_UART_Init+1,7
  3975  07D1  30FF               	movlw	255
  3976  07D2  00B3               	movwf	??_UART_Init+2
  3977  07D3  00B4               	movwf	??_UART_Init+3
  3978  07D4  3006               	movlw	6
  3979  07D5                     u3175:	
  3980  07D5  1003               	clrc
  3981  07D6  0DB1               	rlf	??_UART_Init,f
  3982  07D7  0DB2               	rlf	??_UART_Init+1,f
  3983  07D8  0DB3               	rlf	??_UART_Init+2,f
  3984  07D9  0DB4               	rlf	??_UART_Init+3,f
  3985  07DA                     u3170:	
  3986  07DA  3EFF               	addlw	-1
  3987  07DB  1D03               	skipz
  3988  07DC  2FD5               	goto	u3175
  3989  07DD  0834               	movf	??_UART_Init+3,w
  3990  07DE  00A3               	movwf	___aldiv@divisor+3
  3991  07DF  0833               	movf	??_UART_Init+2,w
  3992  07E0  00A2               	movwf	___aldiv@divisor+2
  3993  07E1  0832               	movf	??_UART_Init+1,w
  3994  07E2  00A1               	movwf	___aldiv@divisor+1
  3995  07E3  0831               	movf	??_UART_Init,w
  3996  07E4  00A0               	movwf	___aldiv@divisor
  3997  07E5  3001               	movlw	1
  3998  07E6  00A7               	movwf	___aldiv@dividend+3
  3999  07E7  30E8               	movlw	232
  4000  07E8  00A6               	movwf	___aldiv@dividend+2
  4001  07E9  3048               	movlw	72
  4002  07EA  00A5               	movwf	___aldiv@dividend+1
  4003  07EB  3000               	movlw	0
  4004  07EC  00A4               	movwf	___aldiv@dividend
  4005  07ED  120A  158A  2763  120A  118A  	fcall	___aldiv
  4006  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  4007  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  4008  07F4  0820               	movf	?___aldiv,w
  4009  07F5  3EFF               	addlw	255
  4010  07F6  1683               	bsf	3,5	;RP0=1, select bank1
  4011  07F7  1303               	bcf	3,6	;RP1=0, select bank1
  4012  07F8  0099               	movwf	25	;volatile
  4013  07F9                     l2958:	
  4014                           
  4015                           ;debug.c: 389:     INTCONbits.GIE = 1;
  4016  07F9  178B               	bsf	11,7	;volatile
  4017  07FA                     l2960:	
  4018                           
  4019                           ;debug.c: 390:     INTCONbits.PEIE = 1;
  4020  07FA  170B               	bsf	11,6	;volatile
  4021  07FB                     l2962:	
  4022                           
  4023                           ;debug.c: 391:     PIE1bits.RCIE = 1;
  4024  07FB  168C               	bsf	12,5	;volatile
  4025  07FC                     l275:	
  4026  07FC  0008               	return
  4027  07FD                     __end_of_UART_Init:	
  4028                           
  4029                           	psect	text11
  4030  0F63                     __ptext11:	
  4031 ;; *************** function ___aldiv *****************
  4032 ;; Defined at:
  4033 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  divisor         4    0[BANK0 ] long 
  4036 ;;  dividend        4    4[BANK0 ] long 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  quotient        4   11[BANK0 ] long 
  4039 ;;  sign            1   10[BANK0 ] unsigned char 
  4040 ;;  counter         1    9[BANK0 ] unsigned char 
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  4    0[BANK0 ] long 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4050 ;;      Params:         0       8       0       0       0
  4051 ;;      Locals:         0       6       0       0       0
  4052 ;;      Temps:          0       1       0       0       0
  4053 ;;      Totals:         0      15       0       0       0
  4054 ;;Total ram usage:       15 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    2
  4057 ;; This function calls:
  4058 ;;		Nothing
  4059 ;; This function is called by:
  4060 ;;		_UART_Init
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           
  4065                           ;psect for function ___aldiv
  4066  0F63                     ___aldiv:	
  4067  0F63                     l2768:	
  4068                           ;incstack = 0
  4069                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4070                           
  4071  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  4072  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  4073  0F65  01AA               	clrf	___aldiv@sign
  4074  0F66                     l2770:	
  4075  0F66  1FA3               	btfss	___aldiv@divisor+3,7
  4076  0F67  2F69               	goto	u2791
  4077  0F68  2F6A               	goto	u2790
  4078  0F69                     u2791:	
  4079  0F69  2F77               	goto	l507
  4080  0F6A                     u2790:	
  4081  0F6A                     l2772:	
  4082  0F6A  09A0               	comf	___aldiv@divisor,f
  4083  0F6B  09A1               	comf	___aldiv@divisor+1,f
  4084  0F6C  09A2               	comf	___aldiv@divisor+2,f
  4085  0F6D  09A3               	comf	___aldiv@divisor+3,f
  4086  0F6E  0AA0               	incf	___aldiv@divisor,f
  4087  0F6F  1903               	skipnz
  4088  0F70  0AA1               	incf	___aldiv@divisor+1,f
  4089  0F71  1903               	skipnz
  4090  0F72  0AA2               	incf	___aldiv@divisor+2,f
  4091  0F73  1903               	skipnz
  4092  0F74  0AA3               	incf	___aldiv@divisor+3,f
  4093  0F75  01AA               	clrf	___aldiv@sign
  4094  0F76  0AAA               	incf	___aldiv@sign,f
  4095  0F77                     l507:	
  4096  0F77  1FA7               	btfss	___aldiv@dividend+3,7
  4097  0F78  2F7A               	goto	u2801
  4098  0F79  2F7B               	goto	u2800
  4099  0F7A                     u2801:	
  4100  0F7A  2F8A               	goto	l2778
  4101  0F7B                     u2800:	
  4102  0F7B                     l2774:	
  4103  0F7B  09A4               	comf	___aldiv@dividend,f
  4104  0F7C  09A5               	comf	___aldiv@dividend+1,f
  4105  0F7D  09A6               	comf	___aldiv@dividend+2,f
  4106  0F7E  09A7               	comf	___aldiv@dividend+3,f
  4107  0F7F  0AA4               	incf	___aldiv@dividend,f
  4108  0F80  1903               	skipnz
  4109  0F81  0AA5               	incf	___aldiv@dividend+1,f
  4110  0F82  1903               	skipnz
  4111  0F83  0AA6               	incf	___aldiv@dividend+2,f
  4112  0F84  1903               	skipnz
  4113  0F85  0AA7               	incf	___aldiv@dividend+3,f
  4114  0F86                     l2776:	
  4115  0F86  3001               	movlw	1
  4116  0F87  00A8               	movwf	??___aldiv
  4117  0F88  0828               	movf	??___aldiv,w
  4118  0F89  06AA               	xorwf	___aldiv@sign,f
  4119  0F8A                     l2778:	
  4120  0F8A  3000               	movlw	0
  4121  0F8B  00AE               	movwf	___aldiv@quotient+3
  4122  0F8C  3000               	movlw	0
  4123  0F8D  00AD               	movwf	___aldiv@quotient+2
  4124  0F8E  3000               	movlw	0
  4125  0F8F  00AC               	movwf	___aldiv@quotient+1
  4126  0F90  3000               	movlw	0
  4127  0F91  00AB               	movwf	___aldiv@quotient
  4128  0F92                     l2780:	
  4129  0F92  0823               	movf	___aldiv@divisor+3,w
  4130  0F93  0422               	iorwf	___aldiv@divisor+2,w
  4131  0F94  0421               	iorwf	___aldiv@divisor+1,w
  4132  0F95  0420               	iorwf	___aldiv@divisor,w
  4133  0F96  1903               	skipnz
  4134  0F97  2F99               	goto	u2811
  4135  0F98  2F9A               	goto	u2810
  4136  0F99                     u2811:	
  4137  0F99  2FE7               	goto	l2800
  4138  0F9A                     u2810:	
  4139  0F9A                     l2782:	
  4140  0F9A  01A9               	clrf	___aldiv@counter
  4141  0F9B  0AA9               	incf	___aldiv@counter,f
  4142  0F9C  2FAA               	goto	l2786
  4143  0F9D                     l2784:	
  4144  0F9D  3001               	movlw	1
  4145  0F9E  00A8               	movwf	??___aldiv
  4146  0F9F                     u2825:	
  4147  0F9F  1003               	clrc
  4148  0FA0  0DA0               	rlf	___aldiv@divisor,f
  4149  0FA1  0DA1               	rlf	___aldiv@divisor+1,f
  4150  0FA2  0DA2               	rlf	___aldiv@divisor+2,f
  4151  0FA3  0DA3               	rlf	___aldiv@divisor+3,f
  4152  0FA4  0BA8               	decfsz	??___aldiv,f
  4153  0FA5  2F9F               	goto	u2825
  4154  0FA6  3001               	movlw	1
  4155  0FA7  00A8               	movwf	??___aldiv
  4156  0FA8  0828               	movf	??___aldiv,w
  4157  0FA9  07A9               	addwf	___aldiv@counter,f
  4158  0FAA                     l2786:	
  4159  0FAA  1FA3               	btfss	___aldiv@divisor+3,7
  4160  0FAB  2FAD               	goto	u2831
  4161  0FAC  2FAE               	goto	u2830
  4162  0FAD                     u2831:	
  4163  0FAD  2F9D               	goto	l2784
  4164  0FAE                     u2830:	
  4165  0FAE                     l2788:	
  4166  0FAE  3001               	movlw	1
  4167  0FAF  00A8               	movwf	??___aldiv
  4168  0FB0                     u2845:	
  4169  0FB0  1003               	clrc
  4170  0FB1  0DAB               	rlf	___aldiv@quotient,f
  4171  0FB2  0DAC               	rlf	___aldiv@quotient+1,f
  4172  0FB3  0DAD               	rlf	___aldiv@quotient+2,f
  4173  0FB4  0DAE               	rlf	___aldiv@quotient+3,f
  4174  0FB5  0BA8               	decfsz	??___aldiv,f
  4175  0FB6  2FB0               	goto	u2845
  4176  0FB7                     l2790:	
  4177  0FB7  0823               	movf	___aldiv@divisor+3,w
  4178  0FB8  0227               	subwf	___aldiv@dividend+3,w
  4179  0FB9  1D03               	skipz
  4180  0FBA  2FC5               	goto	u2855
  4181  0FBB  0822               	movf	___aldiv@divisor+2,w
  4182  0FBC  0226               	subwf	___aldiv@dividend+2,w
  4183  0FBD  1D03               	skipz
  4184  0FBE  2FC5               	goto	u2855
  4185  0FBF  0821               	movf	___aldiv@divisor+1,w
  4186  0FC0  0225               	subwf	___aldiv@dividend+1,w
  4187  0FC1  1D03               	skipz
  4188  0FC2  2FC5               	goto	u2855
  4189  0FC3  0820               	movf	___aldiv@divisor,w
  4190  0FC4  0224               	subwf	___aldiv@dividend,w
  4191  0FC5                     u2855:	
  4192  0FC5  1C03               	skipc
  4193  0FC6  2FC8               	goto	u2851
  4194  0FC7  2FC9               	goto	u2850
  4195  0FC8                     u2851:	
  4196  0FC8  2FD8               	goto	l2796
  4197  0FC9                     u2850:	
  4198  0FC9                     l2792:	
  4199  0FC9  0820               	movf	___aldiv@divisor,w
  4200  0FCA  02A4               	subwf	___aldiv@dividend,f
  4201  0FCB  0821               	movf	___aldiv@divisor+1,w
  4202  0FCC  1C03               	skipc
  4203  0FCD  0F21               	incfsz	___aldiv@divisor+1,w
  4204  0FCE  02A5               	subwf	___aldiv@dividend+1,f
  4205  0FCF  0822               	movf	___aldiv@divisor+2,w
  4206  0FD0  1C03               	skipc
  4207  0FD1  0F22               	incfsz	___aldiv@divisor+2,w
  4208  0FD2  02A6               	subwf	___aldiv@dividend+2,f
  4209  0FD3  0823               	movf	___aldiv@divisor+3,w
  4210  0FD4  1C03               	skipc
  4211  0FD5  0F23               	incfsz	___aldiv@divisor+3,w
  4212  0FD6  02A7               	subwf	___aldiv@dividend+3,f
  4213  0FD7                     l2794:	
  4214  0FD7  142B               	bsf	___aldiv@quotient,0
  4215  0FD8                     l2796:	
  4216  0FD8  3001               	movlw	1
  4217  0FD9                     u2865:	
  4218  0FD9  1003               	clrc
  4219  0FDA  0CA3               	rrf	___aldiv@divisor+3,f
  4220  0FDB  0CA2               	rrf	___aldiv@divisor+2,f
  4221  0FDC  0CA1               	rrf	___aldiv@divisor+1,f
  4222  0FDD  0CA0               	rrf	___aldiv@divisor,f
  4223  0FDE  3EFF               	addlw	-1
  4224  0FDF  1D03               	skipz
  4225  0FE0  2FD9               	goto	u2865
  4226  0FE1                     l2798:	
  4227  0FE1  3001               	movlw	1
  4228  0FE2  02A9               	subwf	___aldiv@counter,f
  4229  0FE3  1D03               	btfss	3,2
  4230  0FE4  2FE6               	goto	u2871
  4231  0FE5  2FE7               	goto	u2870
  4232  0FE6                     u2871:	
  4233  0FE6  2FAE               	goto	l2788
  4234  0FE7                     u2870:	
  4235  0FE7                     l2800:	
  4236  0FE7  082A               	movf	___aldiv@sign,w
  4237  0FE8  1903               	btfsc	3,2
  4238  0FE9  2FEB               	goto	u2881
  4239  0FEA  2FEC               	goto	u2880
  4240  0FEB                     u2881:	
  4241  0FEB  2FF7               	goto	l2804
  4242  0FEC                     u2880:	
  4243  0FEC                     l2802:	
  4244  0FEC  09AB               	comf	___aldiv@quotient,f
  4245  0FED  09AC               	comf	___aldiv@quotient+1,f
  4246  0FEE  09AD               	comf	___aldiv@quotient+2,f
  4247  0FEF  09AE               	comf	___aldiv@quotient+3,f
  4248  0FF0  0AAB               	incf	___aldiv@quotient,f
  4249  0FF1  1903               	skipnz
  4250  0FF2  0AAC               	incf	___aldiv@quotient+1,f
  4251  0FF3  1903               	skipnz
  4252  0FF4  0AAD               	incf	___aldiv@quotient+2,f
  4253  0FF5  1903               	skipnz
  4254  0FF6  0AAE               	incf	___aldiv@quotient+3,f
  4255  0FF7                     l2804:	
  4256  0FF7  082E               	movf	___aldiv@quotient+3,w
  4257  0FF8  00A3               	movwf	?___aldiv+3
  4258  0FF9  082D               	movf	___aldiv@quotient+2,w
  4259  0FFA  00A2               	movwf	?___aldiv+2
  4260  0FFB  082C               	movf	___aldiv@quotient+1,w
  4261  0FFC  00A1               	movwf	?___aldiv+1
  4262  0FFD  082B               	movf	___aldiv@quotient,w
  4263  0FFE  00A0               	movwf	?___aldiv
  4264  0FFF                     l517:	
  4265  0FFF  0008               	return
  4266  1000                     __end_of___aldiv:	
  4267                           
  4268                           	psect	text12
  4269  0BE3                     __ptext12:	
  4270 ;; *************** function _SetDisplay *****************
  4271 ;; Defined at:
  4272 ;;		line 456 in file "debug.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  d1              1    wreg     unsigned char 
  4275 ;;  d2              1    0[BANK0 ] unsigned char 
  4276 ;;  d3              1    1[BANK0 ] unsigned char 
  4277 ;;  value           1    2[BANK0 ] unsigned char 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  d1              1    3[BANK0 ] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      void 
  4282 ;; Registers used:
  4283 ;;		wreg, status,0
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4289 ;;      Params:         0       3       0       0       0
  4290 ;;      Locals:         0       1       0       0       0
  4291 ;;      Temps:          0       0       0       0       0
  4292 ;;      Totals:         0       4       0       0       0
  4293 ;;Total ram usage:        4 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    2
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_main
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           
  4304                           ;psect for function _SetDisplay
  4305  0BE3                     _SetDisplay:	
  4306                           
  4307                           ;incstack = 0
  4308                           ; Regs used in _SetDisplay: [wreg+status,0]
  4309                           ;SetDisplay@d1 stored from wreg
  4310  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  4311  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  4312  0BE5  00A3               	movwf	SetDisplay@d1
  4313  0BE6                     l3048:	
  4314                           
  4315                           ;debug.c: 456: void SetDisplay(char d1, char d2, char d3, char value);debug.c: 457: {;de
      +                          bug.c: 458:     PORTAbits.RA2 = d1;
  4316  0BE6  0C23               	rrf	SetDisplay@d1,w
  4317  0BE7  1C03               	skipc
  4318  0BE8  1105               	bcf	5,2	;volatile
  4319  0BE9  1803               	skipnc
  4320  0BEA  1505               	bsf	5,2	;volatile
  4321                           
  4322                           ;debug.c: 459:     PORTAbits.RA3 = d2;
  4323  0BEB  0C20               	rrf	SetDisplay@d2,w
  4324  0BEC  1C03               	skipc
  4325  0BED  1185               	bcf	5,3	;volatile
  4326  0BEE  1803               	skipnc
  4327  0BEF  1585               	bsf	5,3	;volatile
  4328                           
  4329                           ;debug.c: 460:     PORTAbits.RA4 = d3;
  4330  0BF0  0C21               	rrf	SetDisplay@d3,w
  4331  0BF1  1C03               	skipc
  4332  0BF2  1205               	bcf	5,4	;volatile
  4333  0BF3  1803               	skipnc
  4334  0BF4  1605               	bsf	5,4	;volatile
  4335  0BF5                     l3050:	
  4336                           
  4337                           ;debug.c: 461:     PORTD = value;
  4338  0BF5  0822               	movf	SetDisplay@value,w
  4339  0BF6  0088               	movwf	8	;volatile
  4340  0BF7                     l307:	
  4341  0BF7  0008               	return
  4342  0BF8                     __end_of_SetDisplay:	
  4343                           
  4344                           	psect	text13
  4345  0ED9                     __ptext13:	
  4346 ;; *************** function _SetDefaultTimers *****************
  4347 ;; Defined at:
  4348 ;;		line 464 in file "debug.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  rosso           2    0[BANK0 ] int 
  4351 ;;  verde           2    2[BANK0 ] int 
  4352 ;;  giallo          2    4[BANK0 ] int 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  i               1   13[BANK0 ] unsigned char 
  4355 ;;  l               1   12[BANK0 ] unsigned char 
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      void 
  4358 ;; Registers used:
  4359 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4365 ;;      Params:         0       6       0       0       0
  4366 ;;      Locals:         0       2       0       0       0
  4367 ;;      Temps:          0       6       0       0       0
  4368 ;;      Totals:         0      14       0       0       0
  4369 ;;Total ram usage:       14 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    2
  4372 ;; This function calls:
  4373 ;;		Nothing
  4374 ;; This function is called by:
  4375 ;;		_main
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           
  4380                           ;psect for function _SetDefaultTimers
  4381  0ED9                     _SetDefaultTimers:	
  4382  0ED9                     l2964:	
  4383                           ;incstack = 0
  4384                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4385                           
  4386                           
  4387                           ;debug.c: 464: void SetDefaultTimers(int rosso, int verde, int giallo);debug.c: 465: {;d
      +                          ebug.c: 466:     for (unsigned char l = 0; l < 16; l++)
  4388  0ED9  1283               	bcf	3,5	;RP0=0, select bank0
  4389  0EDA  1303               	bcf	3,6	;RP1=0, select bank0
  4390  0EDB  01AC               	clrf	SetDefaultTimers@l
  4391  0EDC                     l2970:	
  4392                           
  4393                           ;debug.c: 467:     {;debug.c: 468:         for (unsigned char i = 0; i < 3; i++)
  4394  0EDC  01AD               	clrf	SetDefaultTimers@i
  4395  0EDD  2F3B               	goto	l2984
  4396  0EDE                     l2976:	
  4397                           
  4398                           ;debug.c: 473:                 (*(Semafori[l])).new_times[i] = rosso;
  4399  0EDE  082C               	movf	SetDefaultTimers@l,w
  4400  0EDF  00A6               	movwf	??_SetDefaultTimers
  4401  0EE0  0726               	addwf	??_SetDefaultTimers,w
  4402  0EE1  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4403  0EE2  0084               	movwf	4
  4404  0EE3  1383               	bcf	3,7	;select IRP bank1
  4405  0EE4  0800               	movf	0,w
  4406  0EE5  00A7               	movwf	??_SetDefaultTimers+1
  4407  0EE6  0A84               	incf	4,f
  4408  0EE7  0800               	movf	0,w
  4409  0EE8  00A8               	movwf	??_SetDefaultTimers+2
  4410  0EE9  082D               	movf	SetDefaultTimers@i,w
  4411  0EEA  00A9               	movwf	??_SetDefaultTimers+3
  4412  0EEB  0729               	addwf	??_SetDefaultTimers+3,w
  4413  0EEC  0727               	addwf	??_SetDefaultTimers+1,w
  4414  0EED  00AA               	movwf	??_SetDefaultTimers+4
  4415  0EEE  0828               	movf	??_SetDefaultTimers+2,w
  4416  0EEF  1803               	skipnc
  4417  0EF0  3E01               	addlw	1
  4418  0EF1  00AB               	movwf	??_SetDefaultTimers+5
  4419  0EF2  082A               	movf	??_SetDefaultTimers+4,w
  4420  0EF3  0084               	movwf	4
  4421  0EF4  1783               	bsf	3,7
  4422  0EF5  1C2B               	btfss	??_SetDefaultTimers+5,0
  4423  0EF6  1383               	bcf	3,7
  4424  0EF7  0820               	movf	SetDefaultTimers@rosso,w
  4425  0EF8  0080               	movwf	0
  4426  0EF9  0A84               	incf	4,f
  4427  0EFA  0821               	movf	SetDefaultTimers@rosso+1,w
  4428  0EFB  0080               	movwf	0
  4429                           
  4430                           ;debug.c: 474:                 break;
  4431  0EFC  2F4E               	goto	l2986
  4432  0EFD                     l2978:	
  4433                           
  4434                           ;debug.c: 476:                 (*(Semafori[l])).new_times[i] = verde;
  4435  0EFD  082C               	movf	SetDefaultTimers@l,w
  4436  0EFE  00A6               	movwf	??_SetDefaultTimers
  4437  0EFF  0726               	addwf	??_SetDefaultTimers,w
  4438  0F00  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4439  0F01  0084               	movwf	4
  4440  0F02  1383               	bcf	3,7	;select IRP bank1
  4441  0F03  0800               	movf	0,w
  4442  0F04  00A7               	movwf	??_SetDefaultTimers+1
  4443  0F05  0A84               	incf	4,f
  4444  0F06  0800               	movf	0,w
  4445  0F07  00A8               	movwf	??_SetDefaultTimers+2
  4446  0F08  082D               	movf	SetDefaultTimers@i,w
  4447  0F09  00A9               	movwf	??_SetDefaultTimers+3
  4448  0F0A  0729               	addwf	??_SetDefaultTimers+3,w
  4449  0F0B  0727               	addwf	??_SetDefaultTimers+1,w
  4450  0F0C  00AA               	movwf	??_SetDefaultTimers+4
  4451  0F0D  0828               	movf	??_SetDefaultTimers+2,w
  4452  0F0E  1803               	skipnc
  4453  0F0F  3E01               	addlw	1
  4454  0F10  00AB               	movwf	??_SetDefaultTimers+5
  4455  0F11  082A               	movf	??_SetDefaultTimers+4,w
  4456  0F12  0084               	movwf	4
  4457  0F13  1783               	bsf	3,7
  4458  0F14  1C2B               	btfss	??_SetDefaultTimers+5,0
  4459  0F15  1383               	bcf	3,7
  4460  0F16  0822               	movf	SetDefaultTimers@verde,w
  4461  0F17  0080               	movwf	0
  4462  0F18  0A84               	incf	4,f
  4463  0F19  0823               	movf	SetDefaultTimers@verde+1,w
  4464  0F1A  0080               	movwf	0
  4465                           
  4466                           ;debug.c: 477:                 break;
  4467  0F1B  2F4E               	goto	l2986
  4468  0F1C                     l2980:	
  4469                           
  4470                           ;debug.c: 479:                 (*(Semafori[l])).new_times[i] = giallo;
  4471  0F1C  082C               	movf	SetDefaultTimers@l,w
  4472  0F1D  00A6               	movwf	??_SetDefaultTimers
  4473  0F1E  0726               	addwf	??_SetDefaultTimers,w
  4474  0F1F  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4475  0F20  0084               	movwf	4
  4476  0F21  1383               	bcf	3,7	;select IRP bank1
  4477  0F22  0800               	movf	0,w
  4478  0F23  00A7               	movwf	??_SetDefaultTimers+1
  4479  0F24  0A84               	incf	4,f
  4480  0F25  0800               	movf	0,w
  4481  0F26  00A8               	movwf	??_SetDefaultTimers+2
  4482  0F27  082D               	movf	SetDefaultTimers@i,w
  4483  0F28  00A9               	movwf	??_SetDefaultTimers+3
  4484  0F29  0729               	addwf	??_SetDefaultTimers+3,w
  4485  0F2A  0727               	addwf	??_SetDefaultTimers+1,w
  4486  0F2B  00AA               	movwf	??_SetDefaultTimers+4
  4487  0F2C  0828               	movf	??_SetDefaultTimers+2,w
  4488  0F2D  1803               	skipnc
  4489  0F2E  3E01               	addlw	1
  4490  0F2F  00AB               	movwf	??_SetDefaultTimers+5
  4491  0F30  082A               	movf	??_SetDefaultTimers+4,w
  4492  0F31  0084               	movwf	4
  4493  0F32  1783               	bsf	3,7
  4494  0F33  1C2B               	btfss	??_SetDefaultTimers+5,0
  4495  0F34  1383               	bcf	3,7
  4496  0F35  0824               	movf	SetDefaultTimers@giallo,w
  4497  0F36  0080               	movwf	0
  4498  0F37  0A84               	incf	4,f
  4499  0F38  0825               	movf	SetDefaultTimers@giallo+1,w
  4500  0F39  0080               	movwf	0
  4501                           
  4502                           ;debug.c: 480:                 break;
  4503  0F3A  2F4E               	goto	l2986
  4504  0F3B                     l2984:	
  4505  0F3B  082D               	movf	SetDefaultTimers@i,w
  4506  0F3C  00A6               	movwf	??_SetDefaultTimers
  4507  0F3D  01A7               	clrf	??_SetDefaultTimers+1
  4508                           
  4509                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4510                           ; Switch size 1, requested type "simple"
  4511                           ; Number of cases is 1, Range of values is 0 to 0
  4512                           ; switch strategies available:
  4513                           ; Name         Instructions Cycles
  4514                           ; simple_byte            4     3 (average)
  4515                           ; direct_byte           11     8 (fixed)
  4516                           ; jumptable            260     6 (fixed)
  4517                           ;	Chosen strategy is simple_byte
  4518  0F3E  0827               	movf	??_SetDefaultTimers+1,w
  4519  0F3F  3A00               	xorlw	0	; case 0
  4520  0F40  1903               	skipnz
  4521  0F41  2F43               	goto	l3406
  4522  0F42  2F4E               	goto	l2986
  4523  0F43                     l3406:	
  4524                           
  4525                           ; Switch size 1, requested type "simple"
  4526                           ; Number of cases is 3, Range of values is 0 to 2
  4527                           ; switch strategies available:
  4528                           ; Name         Instructions Cycles
  4529                           ; simple_byte           10     6 (average)
  4530                           ; direct_byte           17     8 (fixed)
  4531                           ; jumptable            260     6 (fixed)
  4532                           ;	Chosen strategy is simple_byte
  4533  0F43  0826               	movf	??_SetDefaultTimers,w
  4534  0F44  3A00               	xorlw	0	; case 0
  4535  0F45  1903               	skipnz
  4536  0F46  2EDE               	goto	l2976
  4537  0F47  3A01               	xorlw	1	; case 1
  4538  0F48  1903               	skipnz
  4539  0F49  2EFD               	goto	l2978
  4540  0F4A  3A03               	xorlw	3	; case 2
  4541  0F4B  1903               	skipnz
  4542  0F4C  2F1C               	goto	l2980
  4543  0F4D  2F4E               	goto	l2986
  4544  0F4E                     l2986:	
  4545                           
  4546                           ;debug.c: 482:         }
  4547  0F4E  3001               	movlw	1
  4548  0F4F  00A6               	movwf	??_SetDefaultTimers
  4549  0F50  0826               	movf	??_SetDefaultTimers,w
  4550  0F51  07AD               	addwf	SetDefaultTimers@i,f
  4551  0F52                     l2988:	
  4552  0F52  3003               	movlw	3
  4553  0F53  022D               	subwf	SetDefaultTimers@i,w
  4554  0F54  1C03               	skipc
  4555  0F55  2F57               	goto	u3181
  4556  0F56  2F58               	goto	u3180
  4557  0F57                     u3181:	
  4558  0F57  2F3B               	goto	l2984
  4559  0F58                     u3180:	
  4560  0F58                     l2990:	
  4561                           
  4562                           ;debug.c: 483:     }
  4563  0F58  3001               	movlw	1
  4564  0F59  00A6               	movwf	??_SetDefaultTimers
  4565  0F5A  0826               	movf	??_SetDefaultTimers,w
  4566  0F5B  07AC               	addwf	SetDefaultTimers@l,f
  4567  0F5C                     l2992:	
  4568  0F5C  3010               	movlw	16
  4569  0F5D  022C               	subwf	SetDefaultTimers@l,w
  4570  0F5E  1C03               	skipc
  4571  0F5F  2F61               	goto	u3191
  4572  0F60  2F62               	goto	u3190
  4573  0F61                     u3191:	
  4574  0F61  2EDC               	goto	l2970
  4575  0F62                     u3190:	
  4576  0F62                     l319:	
  4577  0F62  0008               	return
  4578  0F63                     __end_of_SetDefaultTimers:	
  4579                           
  4580                           	psect	text14
  4581  0D10                     __ptext14:	
  4582 ;; *************** function _GetTime *****************
  4583 ;; Defined at:
  4584 ;;		line 430 in file "debug.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  index           1    wreg     unsigned char 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  index           1    4[BANK0 ] unsigned char 
  4589 ;;  time            2    6[BANK0 ] int 
  4590 ;;  shortInt        1    5[BANK0 ] struct .
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  2    0[BANK0 ] int 
  4593 ;; Registers used:
  4594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4600 ;;      Params:         0       2       0       0       0
  4601 ;;      Locals:         0       4       0       0       0
  4602 ;;      Temps:          0       2       0       0       0
  4603 ;;      Totals:         0       8       0       0       0
  4604 ;;Total ram usage:        8 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    2
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_main
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           
  4615                           ;psect for function _GetTime
  4616  0D10                     _GetTime:	
  4617                           
  4618                           ;incstack = 0
  4619                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4620                           ;GetTime@index stored from wreg
  4621  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  4622  0D11  1303               	bcf	3,6	;RP1=0, select bank0
  4623  0D12  00A4               	movwf	GetTime@index
  4624  0D13                     l3024:	
  4625                           
  4626                           ;debug.c: 430: int GetTime(unsigned char index);debug.c: 431: {;debug.c: 432:     int ti
      +                          me;;debug.c: 436:     } shortInt;;debug.c: 438:     shortInt.Val = dataFromGateway[index
      +                           + 3] & 0x7F;
  4627  0D13  0824               	movf	GetTime@index,w
  4628  0D14  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4629  0D15  0084               	movwf	4
  4630  0D16  307F               	movlw	127
  4631  0D17  1383               	bcf	3,7	;select IRP bank1
  4632  0D18  0500               	andwf	0,w
  4633  0D19  00A2               	movwf	??_GetTime
  4634  0D1A  0825               	movf	GetTime@shortInt,w
  4635  0D1B  0622               	xorwf	??_GetTime,w
  4636  0D1C  3980               	andlw	-128
  4637  0D1D  0622               	xorwf	??_GetTime,w
  4638  0D1E  00A5               	movwf	GetTime@shortInt
  4639  0D1F                     l3026:	
  4640                           
  4641                           ;debug.c: 439:     time = shortInt.Val;
  4642  0D1F  0825               	movf	GetTime@shortInt,w
  4643  0D20  397F               	andlw	127
  4644  0D21  00A2               	movwf	??_GetTime
  4645  0D22  01A3               	clrf	??_GetTime+1
  4646  0D23  0822               	movf	??_GetTime,w
  4647  0D24  00A6               	movwf	GetTime@time
  4648  0D25  0823               	movf	??_GetTime+1,w
  4649  0D26  00A7               	movwf	GetTime@time+1
  4650  0D27                     l3028:	
  4651                           
  4652                           ;debug.c: 440:     time = (time << 7) & 0x80;
  4653  0D27  0827               	movf	GetTime@time+1,w
  4654  0D28  00A3               	movwf	??_GetTime+1
  4655  0D29  0826               	movf	GetTime@time,w
  4656  0D2A  00A2               	movwf	??_GetTime
  4657  0D2B  3007               	movlw	7
  4658  0D2C  00FF               	movwf	btemp+1
  4659  0D2D                     u3235:	
  4660  0D2D  1003               	clrc
  4661  0D2E  0DA2               	rlf	??_GetTime,f
  4662  0D2F  0DA3               	rlf	??_GetTime+1,f
  4663  0D30  0BFF               	decfsz	btemp+1,f
  4664  0D31  2D2D               	goto	u3235
  4665  0D32  3080               	movlw	128
  4666  0D33  0522               	andwf	??_GetTime,w
  4667  0D34  00A6               	movwf	GetTime@time
  4668  0D35  3000               	movlw	0
  4669  0D36  0523               	andwf	??_GetTime+1,w
  4670  0D37  00A7               	movwf	GetTime@time+1
  4671  0D38                     l3030:	
  4672                           
  4673                           ;debug.c: 442:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4674  0D38  0824               	movf	GetTime@index,w
  4675  0D39  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4676  0D3A  0084               	movwf	4
  4677  0D3B  307F               	movlw	127
  4678  0D3C  0500               	andwf	0,w
  4679  0D3D  00A2               	movwf	??_GetTime
  4680  0D3E  0825               	movf	GetTime@shortInt,w
  4681  0D3F  0622               	xorwf	??_GetTime,w
  4682  0D40  3980               	andlw	-128
  4683  0D41  0622               	xorwf	??_GetTime,w
  4684  0D42  00A5               	movwf	GetTime@shortInt
  4685  0D43                     l3032:	
  4686                           
  4687                           ;debug.c: 443:     time = time | shortInt.Val;
  4688  0D43  0825               	movf	GetTime@shortInt,w
  4689  0D44  397F               	andlw	127
  4690  0D45  00A2               	movwf	??_GetTime
  4691  0D46  0826               	movf	GetTime@time,w
  4692  0D47  0422               	iorwf	??_GetTime,w
  4693  0D48  00A6               	movwf	GetTime@time
  4694  0D49  0827               	movf	GetTime@time+1,w
  4695  0D4A  00A7               	movwf	GetTime@time+1
  4696  0D4B                     l3034:	
  4697                           
  4698                           ;debug.c: 445:     return time;
  4699  0D4B  0827               	movf	GetTime@time+1,w
  4700  0D4C  00A1               	movwf	?_GetTime+1
  4701  0D4D  0826               	movf	GetTime@time,w
  4702  0D4E  00A0               	movwf	?_GetTime
  4703  0D4F                     l301:	
  4704  0D4F  0008               	return
  4705  0D50                     __end_of_GetTime:	
  4706                           
  4707                           	psect	text15
  4708  0E6E                     __ptext15:	
  4709 ;; *************** function _GetDigits *****************
  4710 ;; Defined at:
  4711 ;;		line 448 in file "debug.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  Time            2   16[BANK0 ] int 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;		None
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2, status,0, pclath, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4725 ;;      Params:         0       2       0       0       0
  4726 ;;      Locals:         0       2       0       0       0
  4727 ;;      Temps:          0       3       0       0       0
  4728 ;;      Totals:         0       7       0       0       0
  4729 ;;Total ram usage:        7 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    3
  4732 ;; This function calls:
  4733 ;;		___awdiv
  4734 ;;		___awmod
  4735 ;; This function is called by:
  4736 ;;		_main
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           
  4741                           ;psect for function _GetDigits
  4742  0E6E                     _GetDigits:	
  4743  0E6E                     l3038:	
  4744                           ;incstack = 0
  4745                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  4746                           
  4747                           
  4748                           ;debug.c: 448: void GetDigits(int Time);debug.c: 449: {;debug.c: 450:     countdown = Ti
      +                          me;
  4749  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
  4750  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
  4751  0E70  0830               	movf	GetDigits@Time,w
  4752  0E71  00B2               	movwf	??_GetDigits
  4753  0E72  0832               	movf	??_GetDigits,w
  4754  0E73  00DA               	movwf	_countdown
  4755  0E74                     l3040:	
  4756                           
  4757                           ;debug.c: 451:     centinaia = countdown / 100;
  4758  0E74  3064               	movlw	100
  4759  0E75  00A7               	movwf	___awdiv@divisor
  4760  0E76  3000               	movlw	0
  4761  0E77  00A8               	movwf	___awdiv@divisor+1
  4762  0E78  085A               	movf	_countdown,w
  4763  0E79  00B2               	movwf	??_GetDigits
  4764  0E7A  01B3               	clrf	??_GetDigits+1
  4765  0E7B  0832               	movf	??_GetDigits,w
  4766  0E7C  00A9               	movwf	___awdiv@dividend
  4767  0E7D  0833               	movf	??_GetDigits+1,w
  4768  0E7E  00AA               	movwf	___awdiv@dividend+1
  4769  0E7F  120A  158A  2605  120A  158A  	fcall	___awdiv
  4770  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  4771  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  4772  0E86  0827               	movf	?___awdiv,w
  4773  0E87  00B4               	movwf	??_GetDigits+2
  4774  0E88  0834               	movf	??_GetDigits+2,w
  4775  0E89  00DD               	movwf	_centinaia
  4776  0E8A                     l3042:	
  4777                           
  4778                           ;debug.c: 452:     decine = (countdown % 100) / 10;
  4779  0E8A  300A               	movlw	10
  4780  0E8B  00A7               	movwf	___awdiv@divisor
  4781  0E8C  3000               	movlw	0
  4782  0E8D  00A8               	movwf	___awdiv@divisor+1
  4783  0E8E  085A               	movf	_countdown,w
  4784  0E8F  00B2               	movwf	??_GetDigits
  4785  0E90  01B3               	clrf	??_GetDigits+1
  4786  0E91  0832               	movf	??_GetDigits,w
  4787  0E92  00A2               	movwf	___awmod@dividend
  4788  0E93  0833               	movf	??_GetDigits+1,w
  4789  0E94  00A3               	movwf	___awmod@dividend+1
  4790  0E95  3064               	movlw	100
  4791  0E96  00A0               	movwf	___awmod@divisor
  4792  0E97  3000               	movlw	0
  4793  0E98  00A1               	movwf	___awmod@divisor+1
  4794  0E99  120A  158A  25AA  120A  158A  	fcall	___awmod
  4795  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  4796  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  4797  0EA0  0821               	movf	?___awmod+1,w
  4798  0EA1  00AA               	movwf	___awdiv@dividend+1
  4799  0EA2  0820               	movf	?___awmod,w
  4800  0EA3  00A9               	movwf	___awdiv@dividend
  4801  0EA4  120A  158A  2605  120A  158A  	fcall	___awdiv
  4802  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  4803  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  4804  0EAB  0827               	movf	?___awdiv,w
  4805  0EAC  00B4               	movwf	??_GetDigits+2
  4806  0EAD  0834               	movf	??_GetDigits+2,w
  4807  0EAE  00DE               	movwf	_decine
  4808  0EAF                     l3044:	
  4809                           
  4810                           ;debug.c: 453:     unita = (countdown % 100) % 10;
  4811  0EAF  085A               	movf	_countdown,w
  4812  0EB0  00B2               	movwf	??_GetDigits
  4813  0EB1  01B3               	clrf	??_GetDigits+1
  4814  0EB2  0832               	movf	??_GetDigits,w
  4815  0EB3  00A2               	movwf	___awmod@dividend
  4816  0EB4  0833               	movf	??_GetDigits+1,w
  4817  0EB5  00A3               	movwf	___awmod@dividend+1
  4818  0EB6  3064               	movlw	100
  4819  0EB7  00A0               	movwf	___awmod@divisor
  4820  0EB8  3000               	movlw	0
  4821  0EB9  00A1               	movwf	___awmod@divisor+1
  4822  0EBA  120A  158A  25AA  120A  158A  	fcall	___awmod
  4823  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  4824  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  4825  0EC1  0821               	movf	?___awmod+1,w
  4826  0EC2  00B6               	movwf	_GetDigits$1151+1
  4827  0EC3  0820               	movf	?___awmod,w
  4828  0EC4  00B5               	movwf	_GetDigits$1151
  4829  0EC5                     l3046:	
  4830                           
  4831                           ;debug.c: 453:     unita = (countdown % 100) % 10;
  4832  0EC5  300A               	movlw	10
  4833  0EC6  00A0               	movwf	___awmod@divisor
  4834  0EC7  3000               	movlw	0
  4835  0EC8  00A1               	movwf	___awmod@divisor+1
  4836  0EC9  0836               	movf	_GetDigits$1151+1,w
  4837  0ECA  00A3               	movwf	___awmod@dividend+1
  4838  0ECB  0835               	movf	_GetDigits$1151,w
  4839  0ECC  00A2               	movwf	___awmod@dividend
  4840  0ECD  120A  158A  25AA  120A  158A  	fcall	___awmod
  4841  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  4842  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  4843  0ED4  0820               	movf	?___awmod,w
  4844  0ED5  00B2               	movwf	??_GetDigits
  4845  0ED6  0832               	movf	??_GetDigits,w
  4846  0ED7  00DF               	movwf	_unita
  4847  0ED8                     l304:	
  4848  0ED8  0008               	return
  4849  0ED9                     __end_of_GetDigits:	
  4850                           
  4851                           	psect	text16
  4852  0DAA                     __ptext16:	
  4853 ;; *************** function ___awmod *****************
  4854 ;; Defined at:
  4855 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;  divisor         2    0[BANK0 ] int 
  4858 ;;  dividend        2    2[BANK0 ] int 
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;  sign            1    6[BANK0 ] unsigned char 
  4861 ;;  counter         1    5[BANK0 ] unsigned char 
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  2    0[BANK0 ] int 
  4864 ;; Registers used:
  4865 ;;		wreg, status,2, status,0
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4871 ;;      Params:         0       4       0       0       0
  4872 ;;      Locals:         0       2       0       0       0
  4873 ;;      Temps:          0       1       0       0       0
  4874 ;;      Totals:         0       7       0       0       0
  4875 ;;Total ram usage:        7 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    2
  4878 ;; This function calls:
  4879 ;;		Nothing
  4880 ;; This function is called by:
  4881 ;;		_main
  4882 ;;		_GetDigits
  4883 ;;		_intToString
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           
  4888                           ;psect for function ___awmod
  4889  0DAA                     ___awmod:	
  4890  0DAA                     l2852:	
  4891                           ;incstack = 0
  4892                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4893                           
  4894  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  4895  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  4896  0DAC  01A6               	clrf	___awmod@sign
  4897  0DAD                     l2854:	
  4898  0DAD  1FA3               	btfss	___awmod@dividend+1,7
  4899  0DAE  2DB0               	goto	u2991
  4900  0DAF  2DB1               	goto	u2990
  4901  0DB0                     u2991:	
  4902  0DB0  2DB8               	goto	l2860
  4903  0DB1                     u2990:	
  4904  0DB1                     l2856:	
  4905  0DB1  09A2               	comf	___awmod@dividend,f
  4906  0DB2  09A3               	comf	___awmod@dividend+1,f
  4907  0DB3  0AA2               	incf	___awmod@dividend,f
  4908  0DB4  1903               	skipnz
  4909  0DB5  0AA3               	incf	___awmod@dividend+1,f
  4910  0DB6                     l2858:	
  4911  0DB6  01A6               	clrf	___awmod@sign
  4912  0DB7  0AA6               	incf	___awmod@sign,f
  4913  0DB8                     l2860:	
  4914  0DB8  1FA1               	btfss	___awmod@divisor+1,7
  4915  0DB9  2DBB               	goto	u3001
  4916  0DBA  2DBC               	goto	u3000
  4917  0DBB                     u3001:	
  4918  0DBB  2DC1               	goto	l2864
  4919  0DBC                     u3000:	
  4920  0DBC                     l2862:	
  4921  0DBC  09A0               	comf	___awmod@divisor,f
  4922  0DBD  09A1               	comf	___awmod@divisor+1,f
  4923  0DBE  0AA0               	incf	___awmod@divisor,f
  4924  0DBF  1903               	skipnz
  4925  0DC0  0AA1               	incf	___awmod@divisor+1,f
  4926  0DC1                     l2864:	
  4927  0DC1  0820               	movf	___awmod@divisor,w
  4928  0DC2  0421               	iorwf	___awmod@divisor+1,w
  4929  0DC3  1903               	btfsc	3,2
  4930  0DC4  2DC6               	goto	u3011
  4931  0DC5  2DC7               	goto	u3010
  4932  0DC6                     u3011:	
  4933  0DC6  2DF6               	goto	l2882
  4934  0DC7                     u3010:	
  4935  0DC7                     l2866:	
  4936  0DC7  01A5               	clrf	___awmod@counter
  4937  0DC8  0AA5               	incf	___awmod@counter,f
  4938  0DC9  2DD5               	goto	l2872
  4939  0DCA                     l2868:	
  4940  0DCA  3001               	movlw	1
  4941  0DCB                     u3025:	
  4942  0DCB  1003               	clrc
  4943  0DCC  0DA0               	rlf	___awmod@divisor,f
  4944  0DCD  0DA1               	rlf	___awmod@divisor+1,f
  4945  0DCE  3EFF               	addlw	-1
  4946  0DCF  1D03               	skipz
  4947  0DD0  2DCB               	goto	u3025
  4948  0DD1                     l2870:	
  4949  0DD1  3001               	movlw	1
  4950  0DD2  00A4               	movwf	??___awmod
  4951  0DD3  0824               	movf	??___awmod,w
  4952  0DD4  07A5               	addwf	___awmod@counter,f
  4953  0DD5                     l2872:	
  4954  0DD5  1FA1               	btfss	___awmod@divisor+1,7
  4955  0DD6  2DD8               	goto	u3031
  4956  0DD7  2DD9               	goto	u3030
  4957  0DD8                     u3031:	
  4958  0DD8  2DCA               	goto	l2868
  4959  0DD9                     u3030:	
  4960  0DD9                     l2874:	
  4961  0DD9  0821               	movf	___awmod@divisor+1,w
  4962  0DDA  0223               	subwf	___awmod@dividend+1,w
  4963  0DDB  1D03               	skipz
  4964  0DDC  2DDF               	goto	u3045
  4965  0DDD  0820               	movf	___awmod@divisor,w
  4966  0DDE  0222               	subwf	___awmod@dividend,w
  4967  0DDF                     u3045:	
  4968  0DDF  1C03               	skipc
  4969  0DE0  2DE2               	goto	u3041
  4970  0DE1  2DE3               	goto	u3040
  4971  0DE2                     u3041:	
  4972  0DE2  2DE9               	goto	l2878
  4973  0DE3                     u3040:	
  4974  0DE3                     l2876:	
  4975  0DE3  0820               	movf	___awmod@divisor,w
  4976  0DE4  02A2               	subwf	___awmod@dividend,f
  4977  0DE5  0821               	movf	___awmod@divisor+1,w
  4978  0DE6  1C03               	skipc
  4979  0DE7  03A3               	decf	___awmod@dividend+1,f
  4980  0DE8  02A3               	subwf	___awmod@dividend+1,f
  4981  0DE9                     l2878:	
  4982  0DE9  3001               	movlw	1
  4983  0DEA                     u3055:	
  4984  0DEA  1003               	clrc
  4985  0DEB  0CA1               	rrf	___awmod@divisor+1,f
  4986  0DEC  0CA0               	rrf	___awmod@divisor,f
  4987  0DED  3EFF               	addlw	-1
  4988  0DEE  1D03               	skipz
  4989  0DEF  2DEA               	goto	u3055
  4990  0DF0                     l2880:	
  4991  0DF0  3001               	movlw	1
  4992  0DF1  02A5               	subwf	___awmod@counter,f
  4993  0DF2  1D03               	btfss	3,2
  4994  0DF3  2DF5               	goto	u3061
  4995  0DF4  2DF6               	goto	u3060
  4996  0DF5                     u3061:	
  4997  0DF5  2DD9               	goto	l2874
  4998  0DF6                     u3060:	
  4999  0DF6                     l2882:	
  5000  0DF6  0826               	movf	___awmod@sign,w
  5001  0DF7  1903               	btfsc	3,2
  5002  0DF8  2DFA               	goto	u3071
  5003  0DF9  2DFB               	goto	u3070
  5004  0DFA                     u3071:	
  5005  0DFA  2E00               	goto	l2886
  5006  0DFB                     u3070:	
  5007  0DFB                     l2884:	
  5008  0DFB  09A2               	comf	___awmod@dividend,f
  5009  0DFC  09A3               	comf	___awmod@dividend+1,f
  5010  0DFD  0AA2               	incf	___awmod@dividend,f
  5011  0DFE  1903               	skipnz
  5012  0DFF  0AA3               	incf	___awmod@dividend+1,f
  5013  0E00                     l2886:	
  5014  0E00  0823               	movf	___awmod@dividend+1,w
  5015  0E01  00A1               	movwf	?___awmod+1
  5016  0E02  0822               	movf	___awmod@dividend,w
  5017  0E03  00A0               	movwf	?___awmod
  5018  0E04                     l608:	
  5019  0E04  0008               	return
  5020  0E05                     __end_of___awmod:	
  5021                           
  5022                           	psect	text17
  5023  0E05                     __ptext17:	
  5024 ;; *************** function ___awdiv *****************
  5025 ;; Defined at:
  5026 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  divisor         2    7[BANK0 ] int 
  5029 ;;  dividend        2    9[BANK0 ] int 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  quotient        2   14[BANK0 ] int 
  5032 ;;  sign            1   13[BANK0 ] unsigned char 
  5033 ;;  counter         1   12[BANK0 ] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  2    7[BANK0 ] int 
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5043 ;;      Params:         0       4       0       0       0
  5044 ;;      Locals:         0       4       0       0       0
  5045 ;;      Temps:          0       1       0       0       0
  5046 ;;      Totals:         0       9       0       0       0
  5047 ;;Total ram usage:        9 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    2
  5050 ;; This function calls:
  5051 ;;		Nothing
  5052 ;; This function is called by:
  5053 ;;		_map
  5054 ;;		_GetDigits
  5055 ;;		_intToString
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           
  5060                           ;psect for function ___awdiv
  5061  0E05                     ___awdiv:	
  5062  0E05                     l2808:	
  5063                           ;incstack = 0
  5064                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5065                           
  5066  0E05  1283               	bcf	3,5	;RP0=0, select bank0
  5067  0E06  1303               	bcf	3,6	;RP1=0, select bank0
  5068  0E07  01AD               	clrf	___awdiv@sign
  5069  0E08                     l2810:	
  5070  0E08  1FA8               	btfss	___awdiv@divisor+1,7
  5071  0E09  2E0B               	goto	u2891
  5072  0E0A  2E0C               	goto	u2890
  5073  0E0B                     u2891:	
  5074  0E0B  2E13               	goto	l2816
  5075  0E0C                     u2890:	
  5076  0E0C                     l2812:	
  5077  0E0C  09A7               	comf	___awdiv@divisor,f
  5078  0E0D  09A8               	comf	___awdiv@divisor+1,f
  5079  0E0E  0AA7               	incf	___awdiv@divisor,f
  5080  0E0F  1903               	skipnz
  5081  0E10  0AA8               	incf	___awdiv@divisor+1,f
  5082  0E11                     l2814:	
  5083  0E11  01AD               	clrf	___awdiv@sign
  5084  0E12  0AAD               	incf	___awdiv@sign,f
  5085  0E13                     l2816:	
  5086  0E13  1FAA               	btfss	___awdiv@dividend+1,7
  5087  0E14  2E16               	goto	u2901
  5088  0E15  2E17               	goto	u2900
  5089  0E16                     u2901:	
  5090  0E16  2E20               	goto	l2822
  5091  0E17                     u2900:	
  5092  0E17                     l2818:	
  5093  0E17  09A9               	comf	___awdiv@dividend,f
  5094  0E18  09AA               	comf	___awdiv@dividend+1,f
  5095  0E19  0AA9               	incf	___awdiv@dividend,f
  5096  0E1A  1903               	skipnz
  5097  0E1B  0AAA               	incf	___awdiv@dividend+1,f
  5098  0E1C                     l2820:	
  5099  0E1C  3001               	movlw	1
  5100  0E1D  00AB               	movwf	??___awdiv
  5101  0E1E  082B               	movf	??___awdiv,w
  5102  0E1F  06AD               	xorwf	___awdiv@sign,f
  5103  0E20                     l2822:	
  5104  0E20  01AE               	clrf	___awdiv@quotient
  5105  0E21  01AF               	clrf	___awdiv@quotient+1
  5106  0E22                     l2824:	
  5107  0E22  0827               	movf	___awdiv@divisor,w
  5108  0E23  0428               	iorwf	___awdiv@divisor+1,w
  5109  0E24  1903               	btfsc	3,2
  5110  0E25  2E27               	goto	u2911
  5111  0E26  2E28               	goto	u2910
  5112  0E27                     u2911:	
  5113  0E27  2E5F               	goto	l2844
  5114  0E28                     u2910:	
  5115  0E28                     l2826:	
  5116  0E28  01AC               	clrf	___awdiv@counter
  5117  0E29  0AAC               	incf	___awdiv@counter,f
  5118  0E2A  2E36               	goto	l2832
  5119  0E2B                     l2828:	
  5120  0E2B  3001               	movlw	1
  5121  0E2C                     u2925:	
  5122  0E2C  1003               	clrc
  5123  0E2D  0DA7               	rlf	___awdiv@divisor,f
  5124  0E2E  0DA8               	rlf	___awdiv@divisor+1,f
  5125  0E2F  3EFF               	addlw	-1
  5126  0E30  1D03               	skipz
  5127  0E31  2E2C               	goto	u2925
  5128  0E32                     l2830:	
  5129  0E32  3001               	movlw	1
  5130  0E33  00AB               	movwf	??___awdiv
  5131  0E34  082B               	movf	??___awdiv,w
  5132  0E35  07AC               	addwf	___awdiv@counter,f
  5133  0E36                     l2832:	
  5134  0E36  1FA8               	btfss	___awdiv@divisor+1,7
  5135  0E37  2E39               	goto	u2931
  5136  0E38  2E3A               	goto	u2930
  5137  0E39                     u2931:	
  5138  0E39  2E2B               	goto	l2828
  5139  0E3A                     u2930:	
  5140  0E3A                     l2834:	
  5141  0E3A  3001               	movlw	1
  5142  0E3B                     u2945:	
  5143  0E3B  1003               	clrc
  5144  0E3C  0DAE               	rlf	___awdiv@quotient,f
  5145  0E3D  0DAF               	rlf	___awdiv@quotient+1,f
  5146  0E3E  3EFF               	addlw	-1
  5147  0E3F  1D03               	skipz
  5148  0E40  2E3B               	goto	u2945
  5149  0E41  0828               	movf	___awdiv@divisor+1,w
  5150  0E42  022A               	subwf	___awdiv@dividend+1,w
  5151  0E43  1D03               	skipz
  5152  0E44  2E47               	goto	u2955
  5153  0E45  0827               	movf	___awdiv@divisor,w
  5154  0E46  0229               	subwf	___awdiv@dividend,w
  5155  0E47                     u2955:	
  5156  0E47  1C03               	skipc
  5157  0E48  2E4A               	goto	u2951
  5158  0E49  2E4B               	goto	u2950
  5159  0E4A                     u2951:	
  5160  0E4A  2E52               	goto	l2840
  5161  0E4B                     u2950:	
  5162  0E4B                     l2836:	
  5163  0E4B  0827               	movf	___awdiv@divisor,w
  5164  0E4C  02A9               	subwf	___awdiv@dividend,f
  5165  0E4D  0828               	movf	___awdiv@divisor+1,w
  5166  0E4E  1C03               	skipc
  5167  0E4F  03AA               	decf	___awdiv@dividend+1,f
  5168  0E50  02AA               	subwf	___awdiv@dividend+1,f
  5169  0E51                     l2838:	
  5170  0E51  142E               	bsf	___awdiv@quotient,0
  5171  0E52                     l2840:	
  5172  0E52  3001               	movlw	1
  5173  0E53                     u2965:	
  5174  0E53  1003               	clrc
  5175  0E54  0CA8               	rrf	___awdiv@divisor+1,f
  5176  0E55  0CA7               	rrf	___awdiv@divisor,f
  5177  0E56  3EFF               	addlw	-1
  5178  0E57  1D03               	skipz
  5179  0E58  2E53               	goto	u2965
  5180  0E59                     l2842:	
  5181  0E59  3001               	movlw	1
  5182  0E5A  02AC               	subwf	___awdiv@counter,f
  5183  0E5B  1D03               	btfss	3,2
  5184  0E5C  2E5E               	goto	u2971
  5185  0E5D  2E5F               	goto	u2970
  5186  0E5E                     u2971:	
  5187  0E5E  2E3A               	goto	l2834
  5188  0E5F                     u2970:	
  5189  0E5F                     l2844:	
  5190  0E5F  082D               	movf	___awdiv@sign,w
  5191  0E60  1903               	btfsc	3,2
  5192  0E61  2E63               	goto	u2981
  5193  0E62  2E64               	goto	u2980
  5194  0E63                     u2981:	
  5195  0E63  2E69               	goto	l2848
  5196  0E64                     u2980:	
  5197  0E64                     l2846:	
  5198  0E64  09AE               	comf	___awdiv@quotient,f
  5199  0E65  09AF               	comf	___awdiv@quotient+1,f
  5200  0E66  0AAE               	incf	___awdiv@quotient,f
  5201  0E67  1903               	skipnz
  5202  0E68  0AAF               	incf	___awdiv@quotient+1,f
  5203  0E69                     l2848:	
  5204  0E69  082F               	movf	___awdiv@quotient+1,w
  5205  0E6A  00A8               	movwf	?___awdiv+1
  5206  0E6B  082E               	movf	___awdiv@quotient,w
  5207  0E6C  00A7               	movwf	?___awdiv
  5208  0E6D                     l595:	
  5209  0E6D  0008               	return
  5210  0E6E                     __end_of___awdiv:	
  5211                           
  5212                           	psect	text18
  5213  0C2F                     __ptext18:	
  5214 ;; *************** function _ADC_Read *****************
  5215 ;; Defined at:
  5216 ;;		line 373 in file "debug.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;  canale          1    wreg     unsigned char 
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;  canale          1    3[BANK0 ] unsigned char 
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  2    0[BANK0 ] int 
  5223 ;; Registers used:
  5224 ;;		wreg, status,2, status,0
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5230 ;;      Params:         0       2       0       0       0
  5231 ;;      Locals:         0       1       0       0       0
  5232 ;;      Temps:          0       1       0       0       0
  5233 ;;      Totals:         0       4       0       0       0
  5234 ;;Total ram usage:        4 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    2
  5237 ;; This function calls:
  5238 ;;		Nothing
  5239 ;; This function is called by:
  5240 ;;		_main
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _ADC_Read
  5246  0C2F                     _ADC_Read:	
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5250                           ;ADC_Read@canale stored from wreg
  5251  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
  5252  0C30  1303               	bcf	3,6	;RP1=0, select bank0
  5253  0C31  00A3               	movwf	ADC_Read@canale
  5254  0C32                     l3014:	
  5255                           
  5256                           ;debug.c: 373: int ADC_Read(char canale);debug.c: 374: {;debug.c: 375:     ADCON0 = (1 <
      +                          < 0) | (canale << 3);
  5257  0C32  0823               	movf	ADC_Read@canale,w
  5258  0C33  00A2               	movwf	??_ADC_Read
  5259  0C34  3002               	movlw	2
  5260  0C35                     u3215:	
  5261  0C35  1003               	clrc
  5262  0C36  0DA2               	rlf	??_ADC_Read,f
  5263  0C37  3EFF               	addlw	-1
  5264  0C38  1D03               	skipz
  5265  0C39  2C35               	goto	u3215
  5266  0C3A  1003               	clrc
  5267  0C3B  0D22               	rlf	??_ADC_Read,w
  5268  0C3C  3801               	iorlw	1
  5269  0C3D  009F               	movwf	31	;volatile
  5270  0C3E                     l3016:	
  5271                           
  5272                           ;debug.c: 376:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5273  0C3E  3004               	movlw	4
  5274  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  5275  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  5276  0C41  00A2               	movwf	??_ADC_Read
  5277  0C42                     u3627:	
  5278  0C42  0BA2               	decfsz	??_ADC_Read,f
  5279  0C43  2C42               	goto	u3627
  5280  0C44  0000               	nop
  5281  0C45                     l3018:	
  5282                           
  5283                           ;debug.c: 377:     GO_nDONE = 1;
  5284  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  5285  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  5286  0C47  151F               	bsf	31,2	;volatile
  5287  0C48                     l269:	
  5288                           ;debug.c: 378:     while (GO_nDONE);
  5289                           
  5290  0C48  191F               	btfsc	31,2	;volatile
  5291  0C49  2C4B               	goto	u3221
  5292  0C4A  2C4C               	goto	u3220
  5293  0C4B                     u3221:	
  5294  0C4B  2C48               	goto	l269
  5295  0C4C                     u3220:	
  5296  0C4C                     l3020:	
  5297                           
  5298                           ;debug.c: 379:     return ADRESL + (ADRESH << 8);
  5299  0C4C  081E               	movf	30,w	;volatile
  5300  0C4D  00A1               	movwf	?_ADC_Read+1
  5301  0C4E  1683               	bsf	3,5	;RP0=1, select bank1
  5302  0C4F  1303               	bcf	3,6	;RP1=0, select bank1
  5303  0C50  081E               	movf	30,w	;volatile
  5304  0C51  1283               	bcf	3,5	;RP0=0, select bank0
  5305  0C52  1303               	bcf	3,6	;RP1=0, select bank0
  5306  0C53  00A0               	movwf	?_ADC_Read
  5307  0C54                     l272:	
  5308  0C54  0008               	return
  5309  0C55                     __end_of_ADC_Read:	
  5310                           
  5311                           	psect	text19
  5312  0D50                     __ptext19:	
  5313 ;; *************** function _ISR *****************
  5314 ;; Defined at:
  5315 ;;		line 574 in file "debug.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5329 ;;      Params:         0       0       0       0       0
  5330 ;;      Locals:         0       0       0       0       0
  5331 ;;      Temps:          4       0       0       0       0
  5332 ;;      Totals:         4       0       0       0       0
  5333 ;;Total ram usage:        4 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    1
  5336 ;; This function calls:
  5337 ;;		_UART_Read
  5338 ;;		_conteggioVeicoli
  5339 ;; This function is called by:
  5340 ;;		Interrupt level 1
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           
  5345                           ;psect for function _ISR
  5346  0D50                     _ISR:	
  5347  0D50                     i1l2546:	
  5348                           
  5349                           ;debug.c: 577:     if (RCIF && readGateway.Bit == 0)
  5350  0D50  1283               	bcf	3,5	;RP0=0, select bank0
  5351  0D51  1303               	bcf	3,6	;RP1=0, select bank0
  5352  0D52  1E8C               	btfss	12,5	;volatile
  5353  0D53  2D55               	goto	u253_21
  5354  0D54  2D56               	goto	u253_20
  5355  0D55                     u253_21:	
  5356  0D55  2D5F               	goto	i1l2554
  5357  0D56                     u253_20:	
  5358  0D56                     i1l2548:	
  5359  0D56  1862               	btfsc	_readGateway,0
  5360  0D57  2D59               	goto	u254_21
  5361  0D58  2D5A               	goto	u254_20
  5362  0D59                     u254_21:	
  5363  0D59  2D5F               	goto	i1l2554
  5364  0D5A                     u254_20:	
  5365  0D5A                     i1l2550:	
  5366                           
  5367                           ;debug.c: 578:     {;debug.c: 579:         readGateway.Bit = 1;
  5368  0D5A  1462               	bsf	_readGateway,0
  5369                           
  5370                           ;debug.c: 580:         readGatewayDone.Bit = 0;
  5371  0D5B  1063               	bcf	_readGatewayDone,0
  5372                           
  5373                           ;debug.c: 581:         readGatewayDone.Timeout = 0;
  5374  0D5C  10E3               	bcf	_readGatewayDone,1
  5375  0D5D                     i1l2552:	
  5376                           
  5377                           ;debug.c: 582:         dataFromGatewayIndex = 0;
  5378  0D5D  01D9               	clrf	_dataFromGatewayIndex
  5379                           
  5380                           ;debug.c: 583:         timerReadFromGateway = 0;
  5381  0D5E  01D8               	clrf	_timerReadFromGateway
  5382  0D5F                     i1l2554:	
  5383                           
  5384                           ;debug.c: 585:     if (RCIF && readGateway.Bit == 1)
  5385  0D5F  1E8C               	btfss	12,5	;volatile
  5386  0D60  2D62               	goto	u255_21
  5387  0D61  2D63               	goto	u255_20
  5388  0D62                     u255_21:	
  5389  0D62  2D7A               	goto	i1l2564
  5390  0D63                     u255_20:	
  5391  0D63                     i1l2556:	
  5392  0D63  1C62               	btfss	_readGateway,0
  5393  0D64  2D66               	goto	u256_21
  5394  0D65  2D67               	goto	u256_20
  5395  0D66                     u256_21:	
  5396  0D66  2D7A               	goto	i1l2564
  5397  0D67                     u256_20:	
  5398  0D67                     i1l2558:	
  5399                           
  5400                           ;debug.c: 586:     {;debug.c: 587:         dataFromGateway[dataFromGatewayIndex] = UART_
      +                          Read();
  5401  0D67  120A  158A  23A9  120A  158A  	fcall	_UART_Read
  5402  0D6C  00F6               	movwf	??_ISR
  5403  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  5404  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  5405  0D6F  0859               	movf	_dataFromGatewayIndex,w
  5406  0D70  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  5407  0D71  0084               	movwf	4
  5408  0D72  0876               	movf	??_ISR,w
  5409  0D73  1383               	bcf	3,7	;select IRP bank1
  5410  0D74  0080               	movwf	0
  5411  0D75                     i1l2560:	
  5412                           
  5413                           ;debug.c: 588:         dataFromGatewayIndex++;
  5414  0D75  3001               	movlw	1
  5415  0D76  00F6               	movwf	??_ISR
  5416  0D77  0876               	movf	??_ISR,w
  5417  0D78  07D9               	addwf	_dataFromGatewayIndex,f
  5418  0D79                     i1l2562:	
  5419                           
  5420                           ;debug.c: 589:         timerReadFromGateway = 0;
  5421  0D79  01D8               	clrf	_timerReadFromGateway
  5422  0D7A                     i1l2564:	
  5423                           
  5424                           ;debug.c: 594:     if (TMR0IF)
  5425  0D7A  1D0B               	btfss	11,2	;volatile
  5426  0D7B  2D7D               	goto	u257_21
  5427  0D7C  2D7E               	goto	u257_20
  5428  0D7D                     u257_21:	
  5429  0D7D  2D88               	goto	i1l2572
  5430  0D7E                     u257_20:	
  5431  0D7E                     i1l2566:	
  5432                           
  5433                           ;debug.c: 595:     {;debug.c: 596:         TMR0IF = 0;
  5434  0D7E  110B               	bcf	11,2	;volatile
  5435  0D7F                     i1l2568:	
  5436                           
  5437                           ;debug.c: 597:         conteggioVeicoli();
  5438  0D7F  120A  118A  254F  120A  158A  	fcall	_conteggioVeicoli
  5439  0D84                     i1l2570:	
  5440                           
  5441                           ;debug.c: 598:         TMR0 = 6;
  5442  0D84  3006               	movlw	6
  5443  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  5444  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  5445  0D87  0081               	movwf	1	;volatile
  5446  0D88                     i1l2572:	
  5447                           
  5448                           ;debug.c: 601:     if (TMR1IF)
  5449  0D88  1C0C               	btfss	12,0	;volatile
  5450  0D89  2D8B               	goto	u258_21
  5451  0D8A  2D8C               	goto	u258_20
  5452  0D8B                     u258_21:	
  5453  0D8B  2DA1               	goto	i1l356
  5454  0D8C                     u258_20:	
  5455  0D8C                     i1l2574:	
  5456                           
  5457                           ;debug.c: 602:     {;debug.c: 603:         TMR1IF = 0;
  5458  0D8C  100C               	bcf	12,0	;volatile
  5459  0D8D                     i1l2576:	
  5460                           
  5461                           ;debug.c: 604:         count_lux++;
  5462  0D8D  3001               	movlw	1
  5463  0D8E  00F6               	movwf	??_ISR
  5464  0D8F  0876               	movf	??_ISR,w
  5465  0D90  07F4               	addwf	_count_lux,f
  5466  0D91                     i1l2578:	
  5467                           
  5468                           ;debug.c: 606:         if (count_lux >= 20)
  5469  0D91  3014               	movlw	20
  5470  0D92  0274               	subwf	_count_lux,w
  5471  0D93  1C03               	skipc
  5472  0D94  2D96               	goto	u259_21
  5473  0D95  2D97               	goto	u259_20
  5474  0D96                     u259_21:	
  5475  0D96  2D9D               	goto	i1l2586
  5476  0D97                     u259_20:	
  5477  0D97                     i1l2580:	
  5478                           
  5479                           ;debug.c: 607:         {;debug.c: 608:             secondPassed.Bit = 1;
  5480  0D97  1461               	bsf	_secondPassed,0
  5481  0D98                     i1l2582:	
  5482                           
  5483                           ;debug.c: 609:             count_lux = 0;
  5484  0D98  01F4               	clrf	_count_lux
  5485  0D99                     i1l2584:	
  5486                           
  5487                           ;debug.c: 610:             timerReadFromGateway++;
  5488  0D99  3001               	movlw	1
  5489  0D9A  00F6               	movwf	??_ISR
  5490  0D9B  0876               	movf	??_ISR,w
  5491  0D9C  07D8               	addwf	_timerReadFromGateway,f
  5492  0D9D                     i1l2586:	
  5493                           
  5494                           ;debug.c: 613:         TMR1H = 60;
  5495  0D9D  303C               	movlw	60
  5496  0D9E  008F               	movwf	15	;volatile
  5497  0D9F                     i1l2588:	
  5498                           
  5499                           ;debug.c: 614:         TMR1L = 176;
  5500  0D9F  30B0               	movlw	176
  5501  0DA0  008E               	movwf	14	;volatile
  5502  0DA1                     i1l356:	
  5503  0DA1  0879               	movf	??_ISR+3,w
  5504  0DA2  008A               	movwf	10
  5505  0DA3  0878               	movf	??_ISR+2,w
  5506  0DA4  0084               	movwf	4
  5507  0DA5  0E77               	swapf	(??_ISR+1)^(0+4294967168),w
  5508  0DA6  0083               	movwf	3
  5509  0DA7  0EFE               	swapf	btemp,f
  5510  0DA8  0E7E               	swapf	btemp,w
  5511  0DA9  0009               	retfie
  5512  0DAA                     __end_of_ISR:	
  5513                           
  5514                           	psect	intentry
  5515  0004                     __pintentry:	
  5516                           ;incstack = 0
  5517                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5518                           
  5519  0004                     interrupt_function:	
  5520  007E                     saved_w	set	btemp
  5521  0004  00FE               	movwf	btemp
  5522  0005  0E03               	swapf	3,w
  5523  0006  00F7               	movwf	??_ISR+1
  5524  0007  0804               	movf	4,w
  5525  0008  00F8               	movwf	??_ISR+2
  5526  0009  080A               	movf	10,w
  5527  000A  00F9               	movwf	??_ISR+3
  5528  000B  120A  158A  2D50   	ljmp	_ISR
  5529                           
  5530                           	psect	text20
  5531  054F                     __ptext20:	
  5532 ;; *************** function _conteggioVeicoli *****************
  5533 ;; Defined at:
  5534 ;;		line 486 in file "debug.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;		None
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;		None
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      void 
  5541 ;; Registers used:
  5542 ;;		wreg, status,2, status,0
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5548 ;;      Params:         0       0       0       0       0
  5549 ;;      Locals:         0       0       0       0       0
  5550 ;;      Temps:          1       0       0       0       0
  5551 ;;      Totals:         1       0       0       0       0
  5552 ;;Total ram usage:        1 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; This function calls:
  5555 ;;		Nothing
  5556 ;; This function is called by:
  5557 ;;		_ISR
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           
  5562                           ;psect for function _conteggioVeicoli
  5563  054F                     _conteggioVeicoli:	
  5564  054F                     i1l2204:	
  5565                           ;incstack = 0
  5566                           ; Regs used in _conteggioVeicoli: [wreg+status,2+status,0]
  5567                           
  5568                           
  5569                           ;debug.c: 489:     if (!PORTBbits.RB3)
  5570  054F  1283               	bcf	3,5	;RP0=0, select bank0
  5571  0550  1303               	bcf	3,6	;RP1=0, select bank0
  5572  0551  1986               	btfsc	6,3	;volatile
  5573  0552  2D54               	goto	u196_21
  5574  0553  2D55               	goto	u196_20
  5575  0554                     u196_21:	
  5576  0554  2D5C               	goto	i1l322
  5577  0555                     u196_20:	
  5578  0555                     i1l2206:	
  5579                           
  5580                           ;debug.c: 490:     {;debug.c: 491:         count++;
  5581  0555  3001               	movlw	1
  5582  0556  07F0               	addwf	_count,f
  5583  0557  1803               	skipnc
  5584  0558  0AF1               	incf	_count+1,f
  5585  0559  3000               	movlw	0
  5586  055A  07F1               	addwf	_count+1,f
  5587                           
  5588                           ;debug.c: 492:     }
  5589  055B  2D89               	goto	i1l2222
  5590  055C                     i1l322:	
  5591                           ;debug.c: 493:     else if (PORTBbits.RB3)
  5592                           
  5593  055C  1D86               	btfss	6,3	;volatile
  5594  055D  2D5F               	goto	u197_21
  5595  055E  2D60               	goto	u197_20
  5596  055F                     u197_21:	
  5597  055F  2D89               	goto	i1l2222
  5598  0560                     u197_20:	
  5599  0560                     i1l2208:	
  5600                           
  5601                           ;debug.c: 494:     {;debug.c: 495:         if (count >= 500)
  5602  0560  3001               	movlw	1
  5603  0561  0271               	subwf	_count+1,w
  5604  0562  30F4               	movlw	244
  5605  0563  1903               	skipnz
  5606  0564  0270               	subwf	_count,w
  5607  0565  1C03               	skipc
  5608  0566  2D68               	goto	u198_21
  5609  0567  2D69               	goto	u198_20
  5610  0568                     u198_21:	
  5611  0568  2D6D               	goto	i1l2212
  5612  0569                     u198_20:	
  5613  0569                     i1l2210:	
  5614                           
  5615                           ;debug.c: 496:         {;debug.c: 497:             motorcycle[0]++;
  5616  0569  3001               	movlw	1
  5617  056A  00F5               	movwf	??_conteggioVeicoli
  5618  056B  0875               	movf	??_conteggioVeicoli,w
  5619  056C  07D4               	addwf	_motorcycle,f
  5620  056D                     i1l2212:	
  5621                           
  5622                           ;debug.c: 499:         if (count >= 1500)
  5623  056D  3005               	movlw	5
  5624  056E  0271               	subwf	_count+1,w
  5625  056F  30DC               	movlw	220
  5626  0570  1903               	skipnz
  5627  0571  0270               	subwf	_count,w
  5628  0572  1C03               	skipc
  5629  0573  2D75               	goto	u199_21
  5630  0574  2D76               	goto	u199_20
  5631  0575                     u199_21:	
  5632  0575  2D7A               	goto	i1l2216
  5633  0576                     u199_20:	
  5634  0576                     i1l2214:	
  5635                           
  5636                           ;debug.c: 500:         {;debug.c: 501:             car[0]++;
  5637  0576  3001               	movlw	1
  5638  0577  00F5               	movwf	??_conteggioVeicoli
  5639  0578  0875               	movf	??_conteggioVeicoli,w
  5640  0579  07D0               	addwf	_car,f
  5641  057A                     i1l2216:	
  5642                           
  5643                           ;debug.c: 503:         if (count >= 3000)
  5644  057A  300B               	movlw	11
  5645  057B  0271               	subwf	_count+1,w
  5646  057C  30B8               	movlw	184
  5647  057D  1903               	skipnz
  5648  057E  0270               	subwf	_count,w
  5649  057F  1C03               	skipc
  5650  0580  2D82               	goto	u200_21
  5651  0581  2D83               	goto	u200_20
  5652  0582                     u200_21:	
  5653  0582  2D87               	goto	i1l2220
  5654  0583                     u200_20:	
  5655  0583                     i1l2218:	
  5656                           
  5657                           ;debug.c: 504:         {;debug.c: 505:             truck[0]++;
  5658  0583  3001               	movlw	1
  5659  0584  00F5               	movwf	??_conteggioVeicoli
  5660  0585  0875               	movf	??_conteggioVeicoli,w
  5661  0586  07CC               	addwf	_truck,f
  5662  0587                     i1l2220:	
  5663                           
  5664                           ;debug.c: 507:         count = 0;
  5665  0587  01F0               	clrf	_count
  5666  0588  01F1               	clrf	_count+1
  5667  0589                     i1l2222:	
  5668                           
  5669                           ;debug.c: 510:     if (!PORTBbits.RB4)
  5670  0589  1A06               	btfsc	6,4	;volatile
  5671  058A  2D8C               	goto	u201_21
  5672  058B  2D8D               	goto	u201_20
  5673  058C                     u201_21:	
  5674  058C  2D94               	goto	i1l328
  5675  058D                     u201_20:	
  5676  058D                     i1l2224:	
  5677                           
  5678                           ;debug.c: 511:     {;debug.c: 512:         count++;
  5679  058D  3001               	movlw	1
  5680  058E  07F0               	addwf	_count,f
  5681  058F  1803               	skipnc
  5682  0590  0AF1               	incf	_count+1,f
  5683  0591  3000               	movlw	0
  5684  0592  07F1               	addwf	_count+1,f
  5685                           
  5686                           ;debug.c: 513:     }
  5687  0593  2DC1               	goto	i1l2240
  5688  0594                     i1l328:	
  5689                           ;debug.c: 514:     else if (PORTBbits.RB4)
  5690                           
  5691  0594  1E06               	btfss	6,4	;volatile
  5692  0595  2D97               	goto	u202_21
  5693  0596  2D98               	goto	u202_20
  5694  0597                     u202_21:	
  5695  0597  2DC1               	goto	i1l2240
  5696  0598                     u202_20:	
  5697  0598                     i1l2226:	
  5698                           
  5699                           ;debug.c: 515:     {;debug.c: 516:         if (count >= 500)
  5700  0598  3001               	movlw	1
  5701  0599  0271               	subwf	_count+1,w
  5702  059A  30F4               	movlw	244
  5703  059B  1903               	skipnz
  5704  059C  0270               	subwf	_count,w
  5705  059D  1C03               	skipc
  5706  059E  2DA0               	goto	u203_21
  5707  059F  2DA1               	goto	u203_20
  5708  05A0                     u203_21:	
  5709  05A0  2DA5               	goto	i1l2230
  5710  05A1                     u203_20:	
  5711  05A1                     i1l2228:	
  5712                           
  5713                           ;debug.c: 517:         {;debug.c: 518:             motorcycle[1]++;
  5714  05A1  3001               	movlw	1
  5715  05A2  00F5               	movwf	??_conteggioVeicoli
  5716  05A3  0875               	movf	??_conteggioVeicoli,w
  5717  05A4  07D5               	addwf	_motorcycle+1,f
  5718  05A5                     i1l2230:	
  5719                           
  5720                           ;debug.c: 520:         if (count >= 1500)
  5721  05A5  3005               	movlw	5
  5722  05A6  0271               	subwf	_count+1,w
  5723  05A7  30DC               	movlw	220
  5724  05A8  1903               	skipnz
  5725  05A9  0270               	subwf	_count,w
  5726  05AA  1C03               	skipc
  5727  05AB  2DAD               	goto	u204_21
  5728  05AC  2DAE               	goto	u204_20
  5729  05AD                     u204_21:	
  5730  05AD  2DB2               	goto	i1l2234
  5731  05AE                     u204_20:	
  5732  05AE                     i1l2232:	
  5733                           
  5734                           ;debug.c: 521:         {;debug.c: 522:             car[1]++;
  5735  05AE  3001               	movlw	1
  5736  05AF  00F5               	movwf	??_conteggioVeicoli
  5737  05B0  0875               	movf	??_conteggioVeicoli,w
  5738  05B1  07D1               	addwf	_car+1,f
  5739  05B2                     i1l2234:	
  5740                           
  5741                           ;debug.c: 524:         if (count >= 3000)
  5742  05B2  300B               	movlw	11
  5743  05B3  0271               	subwf	_count+1,w
  5744  05B4  30B8               	movlw	184
  5745  05B5  1903               	skipnz
  5746  05B6  0270               	subwf	_count,w
  5747  05B7  1C03               	skipc
  5748  05B8  2DBA               	goto	u205_21
  5749  05B9  2DBB               	goto	u205_20
  5750  05BA                     u205_21:	
  5751  05BA  2DBF               	goto	i1l2238
  5752  05BB                     u205_20:	
  5753  05BB                     i1l2236:	
  5754                           
  5755                           ;debug.c: 525:         {;debug.c: 526:             truck[1]++;
  5756  05BB  3001               	movlw	1
  5757  05BC  00F5               	movwf	??_conteggioVeicoli
  5758  05BD  0875               	movf	??_conteggioVeicoli,w
  5759  05BE  07CD               	addwf	_truck+1,f
  5760  05BF                     i1l2238:	
  5761                           
  5762                           ;debug.c: 528:         count = 0;
  5763  05BF  01F0               	clrf	_count
  5764  05C0  01F1               	clrf	_count+1
  5765  05C1                     i1l2240:	
  5766                           
  5767                           ;debug.c: 531:     if (!PORTBbits.RB5)
  5768  05C1  1A86               	btfsc	6,5	;volatile
  5769  05C2  2DC4               	goto	u206_21
  5770  05C3  2DC5               	goto	u206_20
  5771  05C4                     u206_21:	
  5772  05C4  2DCC               	goto	i1l334
  5773  05C5                     u206_20:	
  5774  05C5                     i1l2242:	
  5775                           
  5776                           ;debug.c: 532:     {;debug.c: 533:         count++;
  5777  05C5  3001               	movlw	1
  5778  05C6  07F0               	addwf	_count,f
  5779  05C7  1803               	skipnc
  5780  05C8  0AF1               	incf	_count+1,f
  5781  05C9  3000               	movlw	0
  5782  05CA  07F1               	addwf	_count+1,f
  5783                           
  5784                           ;debug.c: 534:     }
  5785  05CB  2DF9               	goto	i1l2258
  5786  05CC                     i1l334:	
  5787                           ;debug.c: 535:     else if (PORTBbits.RB5)
  5788                           
  5789  05CC  1E86               	btfss	6,5	;volatile
  5790  05CD  2DCF               	goto	u207_21
  5791  05CE  2DD0               	goto	u207_20
  5792  05CF                     u207_21:	
  5793  05CF  2DF9               	goto	i1l2258
  5794  05D0                     u207_20:	
  5795  05D0                     i1l2244:	
  5796                           
  5797                           ;debug.c: 536:     {;debug.c: 537:         if (count >= 500)
  5798  05D0  3001               	movlw	1
  5799  05D1  0271               	subwf	_count+1,w
  5800  05D2  30F4               	movlw	244
  5801  05D3  1903               	skipnz
  5802  05D4  0270               	subwf	_count,w
  5803  05D5  1C03               	skipc
  5804  05D6  2DD8               	goto	u208_21
  5805  05D7  2DD9               	goto	u208_20
  5806  05D8                     u208_21:	
  5807  05D8  2DDD               	goto	i1l2248
  5808  05D9                     u208_20:	
  5809  05D9                     i1l2246:	
  5810                           
  5811                           ;debug.c: 538:         {;debug.c: 539:             motorcycle[2]++;
  5812  05D9  3001               	movlw	1
  5813  05DA  00F5               	movwf	??_conteggioVeicoli
  5814  05DB  0875               	movf	??_conteggioVeicoli,w
  5815  05DC  07D6               	addwf	_motorcycle+2,f
  5816  05DD                     i1l2248:	
  5817                           
  5818                           ;debug.c: 541:         if (count >= 1500)
  5819  05DD  3005               	movlw	5
  5820  05DE  0271               	subwf	_count+1,w
  5821  05DF  30DC               	movlw	220
  5822  05E0  1903               	skipnz
  5823  05E1  0270               	subwf	_count,w
  5824  05E2  1C03               	skipc
  5825  05E3  2DE5               	goto	u209_21
  5826  05E4  2DE6               	goto	u209_20
  5827  05E5                     u209_21:	
  5828  05E5  2DEA               	goto	i1l2252
  5829  05E6                     u209_20:	
  5830  05E6                     i1l2250:	
  5831                           
  5832                           ;debug.c: 542:         {;debug.c: 543:             car[2]++;
  5833  05E6  3001               	movlw	1
  5834  05E7  00F5               	movwf	??_conteggioVeicoli
  5835  05E8  0875               	movf	??_conteggioVeicoli,w
  5836  05E9  07D2               	addwf	_car+2,f
  5837  05EA                     i1l2252:	
  5838                           
  5839                           ;debug.c: 545:         if (count >= 3000)
  5840  05EA  300B               	movlw	11
  5841  05EB  0271               	subwf	_count+1,w
  5842  05EC  30B8               	movlw	184
  5843  05ED  1903               	skipnz
  5844  05EE  0270               	subwf	_count,w
  5845  05EF  1C03               	skipc
  5846  05F0  2DF2               	goto	u210_21
  5847  05F1  2DF3               	goto	u210_20
  5848  05F2                     u210_21:	
  5849  05F2  2DF7               	goto	i1l2256
  5850  05F3                     u210_20:	
  5851  05F3                     i1l2254:	
  5852                           
  5853                           ;debug.c: 546:         {;debug.c: 547:             truck[2]++;
  5854  05F3  3001               	movlw	1
  5855  05F4  00F5               	movwf	??_conteggioVeicoli
  5856  05F5  0875               	movf	??_conteggioVeicoli,w
  5857  05F6  07CE               	addwf	_truck+2,f
  5858  05F7                     i1l2256:	
  5859                           
  5860                           ;debug.c: 549:         count = 0;
  5861  05F7  01F0               	clrf	_count
  5862  05F8  01F1               	clrf	_count+1
  5863  05F9                     i1l2258:	
  5864                           
  5865                           ;debug.c: 552:     if (!PORTAbits.RA5)
  5866  05F9  1A85               	btfsc	5,5	;volatile
  5867  05FA  2DFC               	goto	u211_21
  5868  05FB  2DFD               	goto	u211_20
  5869  05FC                     u211_21:	
  5870  05FC  2E04               	goto	i1l340
  5871  05FD                     u211_20:	
  5872  05FD                     i1l2260:	
  5873                           
  5874                           ;debug.c: 553:     {;debug.c: 554:         count++;
  5875  05FD  3001               	movlw	1
  5876  05FE  07F0               	addwf	_count,f
  5877  05FF  1803               	skipnc
  5878  0600  0AF1               	incf	_count+1,f
  5879  0601  3000               	movlw	0
  5880  0602  07F1               	addwf	_count+1,f
  5881                           
  5882                           ;debug.c: 555:     }
  5883  0603  2E31               	goto	i1l346
  5884  0604                     i1l340:	
  5885                           ;debug.c: 556:     else if (PORTAbits.RA5)
  5886                           
  5887  0604  1E85               	btfss	5,5	;volatile
  5888  0605  2E07               	goto	u212_21
  5889  0606  2E08               	goto	u212_20
  5890  0607                     u212_21:	
  5891  0607  2E31               	goto	i1l346
  5892  0608                     u212_20:	
  5893  0608                     i1l2262:	
  5894                           
  5895                           ;debug.c: 557:     {;debug.c: 558:         if (count >= 500)
  5896  0608  3001               	movlw	1
  5897  0609  0271               	subwf	_count+1,w
  5898  060A  30F4               	movlw	244
  5899  060B  1903               	skipnz
  5900  060C  0270               	subwf	_count,w
  5901  060D  1C03               	skipc
  5902  060E  2E10               	goto	u213_21
  5903  060F  2E11               	goto	u213_20
  5904  0610                     u213_21:	
  5905  0610  2E15               	goto	i1l2266
  5906  0611                     u213_20:	
  5907  0611                     i1l2264:	
  5908                           
  5909                           ;debug.c: 559:         {;debug.c: 560:             motorcycle[3]++;
  5910  0611  3001               	movlw	1
  5911  0612  00F5               	movwf	??_conteggioVeicoli
  5912  0613  0875               	movf	??_conteggioVeicoli,w
  5913  0614  07D7               	addwf	_motorcycle+3,f
  5914  0615                     i1l2266:	
  5915                           
  5916                           ;debug.c: 562:         if (count >= 1500)
  5917  0615  3005               	movlw	5
  5918  0616  0271               	subwf	_count+1,w
  5919  0617  30DC               	movlw	220
  5920  0618  1903               	skipnz
  5921  0619  0270               	subwf	_count,w
  5922  061A  1C03               	skipc
  5923  061B  2E1D               	goto	u214_21
  5924  061C  2E1E               	goto	u214_20
  5925  061D                     u214_21:	
  5926  061D  2E22               	goto	i1l2270
  5927  061E                     u214_20:	
  5928  061E                     i1l2268:	
  5929                           
  5930                           ;debug.c: 563:         {;debug.c: 564:             car[3]++;
  5931  061E  3001               	movlw	1
  5932  061F  00F5               	movwf	??_conteggioVeicoli
  5933  0620  0875               	movf	??_conteggioVeicoli,w
  5934  0621  07D3               	addwf	_car+3,f
  5935  0622                     i1l2270:	
  5936                           
  5937                           ;debug.c: 566:         if (count >= 3000)
  5938  0622  300B               	movlw	11
  5939  0623  0271               	subwf	_count+1,w
  5940  0624  30B8               	movlw	184
  5941  0625  1903               	skipnz
  5942  0626  0270               	subwf	_count,w
  5943  0627  1C03               	skipc
  5944  0628  2E2A               	goto	u215_21
  5945  0629  2E2B               	goto	u215_20
  5946  062A                     u215_21:	
  5947  062A  2E2F               	goto	i1l2274
  5948  062B                     u215_20:	
  5949  062B                     i1l2272:	
  5950                           
  5951                           ;debug.c: 567:         {;debug.c: 568:             truck[3]++;
  5952  062B  3001               	movlw	1
  5953  062C  00F5               	movwf	??_conteggioVeicoli
  5954  062D  0875               	movf	??_conteggioVeicoli,w
  5955  062E  07CF               	addwf	_truck+3,f
  5956  062F                     i1l2274:	
  5957                           
  5958                           ;debug.c: 570:         count = 0;
  5959  062F  01F0               	clrf	_count
  5960  0630  01F1               	clrf	_count+1
  5961  0631                     i1l346:	
  5962  0631  0008               	return
  5963  0632                     __end_of_conteggioVeicoli:	
  5964                           
  5965                           	psect	text21
  5966  0BA9                     __ptext21:	
  5967 ;; *************** function _UART_Read *****************
  5968 ;; Defined at:
  5969 ;;		line 411 in file "debug.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  1    wreg      unsigned char 
  5976 ;; Registers used:
  5977 ;;		wreg
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5983 ;;      Params:         0       0       0       0       0
  5984 ;;      Locals:         0       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0
  5986 ;;      Totals:         0       0       0       0       0
  5987 ;;Total ram usage:        0 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; This function calls:
  5990 ;;		Nothing
  5991 ;; This function is called by:
  5992 ;;		_ISR
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           
  5997                           ;psect for function _UART_Read
  5998  0BA9                     _UART_Read:	
  5999  0BA9                     i1l2198:	
  6000                           ;incstack = 0
  6001                           ; Regs used in _UART_Read: [wreg]
  6002                           
  6003  0BA9                     i1l290:	
  6004                           ;debug.c: 414:         ;
  6005                           
  6006                           
  6007                           ;debug.c: 413:     while (!RCIF)
  6008  0BA9  1283               	bcf	3,5	;RP0=0, select bank0
  6009  0BAA  1303               	bcf	3,6	;RP1=0, select bank0
  6010  0BAB  1E8C               	btfss	12,5	;volatile
  6011  0BAC  2BAE               	goto	u195_21
  6012  0BAD  2BAF               	goto	u195_20
  6013  0BAE                     u195_21:	
  6014  0BAE  2BA9               	goto	i1l290
  6015  0BAF                     u195_20:	
  6016  0BAF                     i1l292:	
  6017                           
  6018                           ;debug.c: 415:     RCIF = 0;
  6019  0BAF  128C               	bcf	12,5	;volatile
  6020  0BB0                     i1l2200:	
  6021                           
  6022                           ;debug.c: 416:     return RCREG;
  6023  0BB0  081A               	movf	26,w	;volatile
  6024  0BB1                     i1l293:	
  6025  0BB1  0008               	return
  6026  0BB2                     __end_of_UART_Read:	
  6027  007E                     btemp	set	126	;btemp
  6028  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        33
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     44      69
    BANK1            80      0      71
    BANK3            96      0      96
    BANK2            96     20      92

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   16318
                                             28 BANK0     16    16      0
                                              0 BANK2     20    20      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                          _bitParita
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    2084
                                             20 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1135
                                              0 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4368
                                             16 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1636
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1113
                                              4 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     276
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             15 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3    1204
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    14     8      6     716
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              8     6      2     232
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             16 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              1 COMMON     4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   _bitParita
     _bitChange
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     14      5C      11       95.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     152      12        0.0%
ABS                  0      0     152       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Jun 20 19:18:50 2020

                        pc 0002             ___bmul@product 0022                __CFG_CP$OFF 0000  
                       l83 0D0F                         l98 0CDA               ___awdiv@sign 002D  
                       _s0 00BB                         _s1 00AF                         _s2 01E4  
                       _s3 01D8                         _s4 01CC                         _s5 01C0  
                       _s6 01B4                         _s7 01A8                         _s8 019C  
                       _s9 0190                         fsr 0004        ___wmul@multiplicand 0022  
           _GetDigits$1151 0035                __CFG_LVP$ON 0000                        l110 06B9  
                      l111 06C5                        l113 06FA                        l105 0669  
                      l106 0675                        l212 0242                        l301 0D4F  
                      l125 079A                        l222 016B                        l214 009B  
                      l119 0749                        l304 0ED8                        l128 07C2  
                      l233 03D5                        l307 0BF7                        l228 02DE  
                      l319 0F62                        l272 0C54                        l280 0BB9  
                      l281 0BBC                        l257 0541                        l266 0BCF  
                      l442 0C63                        l507 0F77                        l275 07FC  
                      l444 0C7B                        l269 0C48                        l517 0FFF  
                      l278 0BB5                        l608 0E04                        l298 0CA9  
                      l468 0C0E                        l595 0E6D               __CFG_CPD$OFF 0000  
                      _ISR 0D50                        _s10 014C                        _s11 0140  
                      _s12 0134                        _s13 0128                        _s14 011C  
                      _s15 0110                        _car 0050                        _map 0CDB  
                      fsr0 0004                        indf 0000               ___awmod@sign 0026  
             __CFG_FOSC$HS 0000                       ?_ISR 0075                main@colorId 015B  
                     l3000 0C92                       l3010 0C9F                       l3020 0C4C  
                     l3012 0CA3                       l3100 008A                       l3014 0C32  
                     l3030 0D38                       l3006 0C93                       l3110 0092  
                     l3102 008C                       l3016 0C3E                       l3040 0E74  
                     l3032 0D43                       l3024 0D13                       l3008 0C99  
                     l3200 0261                       l3120 00A1                       l3112 0092  
                     l3104 008F                       l3018 0C45                       l3042 0E8A  
                     l3034 0D4B                       l3026 0D1F                       l3050 0BF5  
                     l3210 02AB                       l3202 0276                       l3130 012B  
                     l3114 0095                       l3106 0092                       l3044 0EAF  
                     l3028 0D27                       l3060 0C06                       l3052 0BFB  
                     l3300 054B                       l3212 02D7                       l3204 0282  
                     l3132 012F                       l3124 00AF                       l3108 0092  
                     l3046 0EC5                       l3038 0E6E                       l3062 0C0D  
                     l3054 0BFC                       l3230 0349                       l3222 02EC  
                     l3206 028E                       l3150 0162                       l3142 0153  
                     l3126 0122                       l3118 009D                       l3048 0BE6  
                     l3056 0C00                       l3232 0396                       l3224 02ED  
                     l3240 03A6                       l3216 02E4                       l3208 0299  
                     l3160 0205                       l3144 0156                       l3136 013D  
                     l3080 0056                       l3058 0C04                       l3250 03E6  
                     l3242 03AD                       l3218 02E5                       l3402 023A  
                     l3170 021A                       l3154 016D                       l3138 014C  
                     l3090 0061                       l3082 0057                       l3404 0511  
                     l3260 045E                       l3252 03E7                       l3244 03D0  
                     l3236 039D                       l3228 02F4                       l3172 0220  
                     l3164 020C                       l3156 01F1                       l3148 015D  
                     l3180 022D                       l3092 0063                       l3084 0059  
                     l3406 0F43                       l2710 0757                       l2702 0722  
                     l3270 04AD                       l3262 0461                       l3254 0420  
                     l3246 03DA                       l3190 024F                       l3182 0247  
                     l3174 0223                       l3166 0211                       l3158 0202  
                     l3094 0068                       l3086 005B                       l3078 0050  
                     l2800 0FE7                       l2704 0736                       l3280 04F5  
                     l3272 04C1                       l3256 0423                       l3248 03DE  
                     l3264 049B                       l3192 0251                       l3184 0248  
                     l3176 0229                       l3096 0073                       l3088 005D  
                     l2810 0E08                       l2802 0FEC                       l2730 0773  
                     l2714 0758                       l2706 073C                       l3290 053B  
                     l3274 04C6                       l3266 04A3                       l3258 042B  
                     l3194 0257                       l3186 0249                       l3098 0086  
                     l2820 0E1C                       l2812 0E0C                       l2804 0FF7  
                     l2900 063C                       l2732 0787                       l2724 076F  
                     l2716 075E                       l2708 074F                       l3292 053F  
                     l3276 04CB                       l3268 04A8                       l3284 0509  
                     l3196 025A                       l3188 024B                       l2830 0E32  
                     l2822 0E20                       l2814 0E11                       l2670 0CAD  
                     l2910 065C                       l2742 07AE                       l2734 078D  
                     l2718 076B                       l2750 0BB5                       l3294 0545  
                     l3278 04E0                       l3286 051F                       l2840 0E52  
                     l2832 0E36                       l2824 0E22                       l2816 0E13  
                     l2808 0E05                       l2672 0CBC                       l2912 066F  
                     l2760 0C6A                       l2744 07B4                       l2736 07A0  
                     l2752 0BBA                       l3296 0549                       l3288 0537  
                     l2842 0E59                       l2834 0E3A                       l2826 0E28  
                     l2818 0E17                       l2770 0F66                       l2930 0690  
                     l2914 0671                       l2906 0640                       l2762 0C71  
                     l2754 0C55                       l2746 07C1                       l2738 07AD  
                     l2690 071C                       l2682 06FE                       l2836 0E4B  
                     l2828 0E2B                       l2844 0E5F                       l2860 0DB8  
                     l2852 0DAA                       l2780 0F92                       l2772 0F6A  
                     l2940 06CB                       l2932 06A6                       l2924 068C  
                     l2916 067B                       l2908 0656                       l2764 0C77  
                     l2756 0C59                       l2684 070D                       l2846 0E64  
                     l2838 0E51                       l2870 0DD1                       l2862 0DBC  
                     l2854 0DAD                       l2790 0FB7                       l2782 0F9A  
                     l2774 0F7B                       l2678 0CCB                       l2942 06D8  
                     l2934 06AC                       l2918 0688                       l2950 0BC4  
                     l2758 0C5D                       l2686 071A                       ?_map 0030  
                     l2848 0E69                       l2880 0DF0                       l2872 0DD5  
                     l2864 0DC1                       l2856 0DB1                       l2792 0FC9  
                     l2784 0F9D                       l2776 0F86                       l2768 0F63  
                     l2960 07FA                       l2944 06DF                       l2936 06BF  
                     l2952 0BC8                       l2696 071E                       l2688 071B  
                     l2874 0DD9                       l2866 0DC7                       l2882 0DF6  
                     l2858 0DB6                       l2970 0EDC                       l2794 0FD7  
                     l2786 0FAA                       l2778 0F8A                       l2962 07FB  
                     l2954 07C3                       l2938 06C1                       l2946 0BBD  
                     l2890 0CDB                       l2884 0DFB                       l2876 0DE3  
                     l2868 0DCA                       l2980 0F1C                       l2964 0ED9  
                     l2796 0FD8                       l2788 0FAE                       l2956 07CB  
                     l2948 0BC1                       l2886 0E00                       l2878 0DE9  
                     l2990 0F58                       l2798 0FE1                       l2958 07F9  
                     l2894 0635                       l2992 0F5C                       l2976 0EDE  
                     l2984 0F3B                       l2978 0EFD                       l2986 0F4E  
                     l2988 0F52                       l2998 0C7F                       u3000 0DBC  
                     u3001 0DBB                       u3010 0DC7                       u3011 0DC6  
                     u3100 066F                       u3101 066E                       u3030 0DD9  
                     u3110 0688                       u3031 0DD8                       u3111 0687  
                     u3040 0DE3                       u3200 0CA9                       u3041 0DE2  
                     u3025 0DCB                       u3201 0CA8                       u3130 06B9  
                     u3131 06B8                       u3115 0684                       u3220 0C4C  
                     u3060 0DF6                       u3140 06BF                       u3124 069E  
                     u3221 0C4B                       u3061 0DF5                       u3045 0DDF  
                     u3141 06BE                       u3125 069C                       u3070 0DFB  
                     u3150 06D8                       u3215 0C35                       u3071 0DFA  
                     u3055 0DEA                       u3151 06D7                       u3135 06B5  
                     u3240 0C00                       u3160 06DF                       u3320 013C  
                     u3304 00F2                       u3241 0BFF                       u3161 06DE  
                     u3321 013B                       u3305 00F0                       u3170 07DA  
                     u3250 0C0D                       u2610 0CBC                       u3090 0669  
                     u3410 02E4                       u3330 015C                       u3314 0119  
                     u3235 0D2D                       u3251 0C0C                       u2611 0CBB  
                     u3155 06D4                       u3091 0668                       u3411 02E3  
                     u3331 015B                       u3315 0117                       u3180 0F58  
                     u2604 0CB3                       u3084 064E                       u2700 079A  
                     u3500 042B                       u3420 02EB                       u3340 020B  
                     u3181 0F57                       u2605 0CB1                       u3085 064C  
                     u2701 0799                       u3501 042A                       u3421 02EA  
                     u3405 029E                       u3341 020A                       u3325 0138  
                     u3190 0F62                       u2710 07A0                       u3510 045E  
                     u3430 02F3                       u3350 0220                       u3270 009A  
                     u3191 0F61                       u3175 07D5                       u3095 0665  
                     u2711 079F                       u3511 045D                       u3431 02F2  
                     u3351 021F                       u3271 0099                       u2800 0F7B  
                     u2624 0CC2                       u3520 04A3                       u3440 0349  
                     u3360 0229                       u3280 00AE                       u2801 0F7A  
                     u2625 0CC0                       u2705 0796                       u3521 04A2  
                     u3441 0348                       u3361 0228                       u3281 00AD  
                     u2810 0F9A                       u2634 0CD1                       u2730 07C1  
                     u3530 04AD                       u3450 03D0                       u3370 0247  
                     u2811 0F99                       u2635 0CCF                       u2731 07C0  
                     u3531 04AC                       u3515 045A                       u3451 03CF  
                     u3371 0246                       u2900 0E17                       u2724 07A6  
                     u2660 0749                       u2740 0BB9                       u3540 04C6  
                     u3460 03D5                       u3380 024F                       u2901 0E16  
                     u2725 07A4                       u2661 0748                       u2645 0710  
                     u2741 0BB8                       u3541 04C5                       u3461 03D4  
                     u3445 0345                       u3381 024E                       u3285 00AA  
                     u2910 0E28                       u2830 0FAE                       u2750 0C5D  
                     u2670 074F                       u2654 072E                       u3550 04CB  
                     u3470 03DA                       u3390 0260                       u3294 00CB  
                     u2911 0E27                       u2831 0FAD                       u2751 0C5C  
                     u2735 07BD                       u2671 074E                       u2655 072C  
                     u3551 04CA                       u3471 03D9                       u3391 025F  
                     u3295 00C9                       u2680 076B                       u3560 053B  
                     u3480 03DE                       u2825 0F9F                       u3617 0BCC  
                     u2681 076A                       u2665 0745                       u3561 053A  
                     u3481 03DD                       u2930 0E3A                       u2850 0FC9  
                     u3570 053F                       u3490 0420                       u3627 0C42  
                     u2931 0E39                       u2851 0FC8                       u3571 053E  
                     u3491 041F                       u2780 0C77                       u3580 0545  
                     u2925 0E2C                       u2845 0FB0                       u2781 0C76  
                     u2765 0C64                       u2685 0767                       u3581 0544  
                     u2950 0E4B                       u2870 0FE7                       u2790 0F6A  
                     u2694 077F                       u3590 0549                       u2951 0E4A  
                     u2871 0FE6                       u2855 0FC5                       u2791 0F69  
                     u2775 0C6B                       u2695 077D                       u3591 0548  
                     u2880 0FEC                       u2945 0E3B                       u2881 0FEB  
                     u2865 0FD9                       u2970 0E5F                       u2890 0E0C  
                     u2971 0E5E                       u2955 0E47                       u2891 0E0B  
                     u2980 0E64                       _RCIF 0065                       u2981 0E63  
                     u2965 0E53                       u2990 0DB1                       u2991 0DB0  
                     _TMR0 0001                       _TXIF 0064               __CFG_WRT$OFF 0000  
                     _disp 005B                       _main 0050                       _time 0072  
                     map@x 0030                       btemp 007E           __end_of_ADC_Read 0C55  
            __CFG_BOREN$ON 0000                       start 000E            __end_of_GetTime 0D50  
        ___bmul@multiplier 0023               main@endCiclo 015D                      ??_ISR 0076  
__size_of_conteggioVeicoli 00E3                      ??_map 003A            __end_of___aldiv 1000  
                    ?_main 0075            __end_of___awdiv 0E6E              __CFG_WDTE$OFF 0000  
          __end_of___awmod 0E05            ___awdiv@divisor 0027                      _T1CON 0010  
     bitParita@errorColumn 002A                      i1l322 055C                      i1l340 0604  
                    i1l334 05CC                      i1l328 0594                      i1l290 0BA9  
                    i1l346 0631                      i1l292 0BAF                      i1l356 0DA1  
                    i1l293 0BB1            ___awdiv@counter 002C                      _RCREG 001A  
                    _TMR1H 000F                      _TMR1L 000E                      _SPBRG 0099  
                    _PORTD 0008                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087                      _TRISD 0088                      _TRISE 0089  
                    _TXREG 0019              __CFG_PWRTE$ON 0000         __size_of_UART_Init 003A  
       __size_of_UART_Read 0009            __end_of_display 0811                      _count 0070  
                    _unita 005F                      main@i 016A                      main@l 0168  
                    _truck 004C                      pclath 000A                      status 0003  
                    wtemp0 007E            __initialization 0011               __end_of_main 054F  
       __size_of_GetDigits 006B                     ??_main 003C          SetDefaultTimers@i 002D  
        SetDefaultTimers@l 002C         __size_of_BuildByte 00C8                 _SetDisplay 0BE3  
            bitChange@dato 0023                     _ADCON0 001F                     _ADCON1 009F  
                   _ADRESH 001E                     _ADRESL 009E           ___awdiv@dividend 0029  
                   i1l2200 0BB0                     i1l2210 0569                     i1l2220 0587  
                   i1l2212 056D                     i1l2204 054F                     i1l2230 05A5  
                   i1l2214 0576                     i1l2222 0589                     i1l2206 0555  
                   i1l2232 05AE                     i1l2240 05C1                     i1l2224 058D  
                   u200_20 0583                     i1l2216 057A                     i1l2208 0560  
                   u200_21 0582                     i1l2250 05E6                     i1l2242 05C5  
                   i1l2234 05B2                     i1l2226 0598                     i1l2218 0583  
                   i1l2260 05FD                     i1l2252 05EA                     i1l2244 05D0  
                   i1l2236 05BB                     i1l2228 05A1                     i1l2270 0622  
                   i1l2262 0608                     i1l2254 05F3                     i1l2246 05D9  
                   i1l2238 05BF                     i1l2272 062B                     i1l2264 0611  
                   i1l2256 05F7                     i1l2248 05DD                     u201_20 058D  
                   u201_21 058C                     i1l2274 062F                     i1l2266 0615  
                   i1l2258 05F9                     i1l2268 061E                     i1l2198 0BA9  
                   i1l2550 0D5A                     u210_20 05F3                     u202_20 0598  
                   i1l2560 0D75                     i1l2552 0D5D                     u210_21 05F2  
                   u202_21 0597                     i1l2570 0D84                     i1l2562 0D79  
                   i1l2554 0D5F                     i1l2546 0D50                     i1l2580 0D97  
                   i1l2572 0D88                     i1l2556 0D63                     i1l2564 0D7A  
                   i1l2548 0D56                     i1l2582 0D98                     i1l2574 0D8C  
                   i1l2566 0D7E                     i1l2558 0D67                     u211_20 05FD  
                   u203_20 05A1                     i1l2584 0D99                     i1l2576 0D8D  
                   i1l2568 0D7F                     u211_21 05FC                     u203_21 05A0  
                   i1l2586 0D9D                     i1l2578 0D91                     i1l2588 0D9F  
                   u212_20 0608                     u204_20 05AE                     u212_21 0607  
                   u204_21 05AD                     u213_20 0611                     u205_20 05BB  
                   u213_21 0610                     u205_21 05BA                     u214_20 061E  
                   u206_20 05C5                     u214_21 061D                     u206_21 05C4  
                   u215_20 062B                     u207_20 05D0                     u215_21 062A  
                   u207_21 05CF                     u208_20 05D9                     u208_21 05D8  
                   u209_20 05E6                     _INTCON 000B                     u209_21 05E5  
                   u253_20 0D56                     u253_21 0D55                     u254_20 0D5A  
                   u254_21 0D59                     u255_20 0D63                     u255_21 0D62  
                   u256_20 0D67                     u256_21 0D66                     u257_20 0D7E  
                   u257_21 0D7D                     u258_20 0D8C                     u258_21 0D8B  
                   u195_20 0BAF                     u259_20 0D97                     u195_21 0BAE  
                   u259_21 0D96                     u196_20 0555                     u196_21 0554  
                   u197_20 0560                     u197_21 055F                     u198_20 0569  
                   u198_21 0568                     u199_20 0576                     u199_21 0575  
                   _TMR0IF 005A                     _TMR1IF 0060                  ??_GetTime 0022  
             ?_UART_TxChar 0075          __end_of_UART_Init 07FD          __end_of_UART_Read 0BB2  
                   ___bmul 0BF8                  ??___aldiv 0028            GetTime@shortInt 0025  
                   ___wmul 0C55                  ??___awdiv 002B                     _decine 005E  
                ??___awmod 0024           __end_of_init_ADC 0BD0                     _cycled 0060  
         ___awdiv@quotient 002E            ___awmod@divisor 0020            ___awmod@counter 0025  
         __end_of_sendByte 0CAA                  ?_ADC_Read 0020                     saved_w 007E  
  __end_of__initialization 004C          __end_of_GetDigits 0ED9       bitParita@sommaColumn 0029  
__size_of_SetDefaultTimers 008A        ___bmul@multiplicand 0020             __pcstackCOMMON 0075  
        __end_of_BuildByte 07C3               __pidataBANK0 07FD               __pidataBANK1 0C0F  
       __size_of_bitChange 0031           _conteggioVeicoli 054F         __size_of_bitParita 00C9  
               ??_ADC_Read 0022     SetDefaultTimers@giallo 0024                ?_SetDisplay 0020  
            GetDigits@Time 0030       _dataFromGatewayIndex 0059       _timerReadFromGateway 0058  
               __pbssBANK0 004C                 __pbssBANK1 00A0                 __pbssBANK2 0110  
               __pbssBANK3 0190                 __pmaintext 0050                    ?___bmul 0020  
                  ?___wmul 0020              sendByte@byte0 0039              sendByte@byte1 0034  
               __pintentry 0004          __end_of_bitChange 0CDB                 __stringtab 0800  
        __end_of_bitParita 06FB                  ?_init_ADC 0075                    _GetTime 0D10  
          BuildByte@valore 0021            BuildByte@txByte 0025                  ?_sendByte 0034  
               bitChange@n 0020                 _n_semafori 0064       __size_of_UART_TxChar 000B  
                  ___aldiv 0F63            __size_of___bmul 0017                    ___awdiv 0E05  
                  ___awmod 0DAA        __size_of_SetDisplay 0015            __size_of___wmul 0027  
                  __ptext1 0C7C                    __ptext2 0BB2                    __ptext3 06FB  
                  __ptext4 0CDB                    __ptext5 0C55                    __ptext6 0BBD  
                  __ptext7 0632                    __ptext8 0CAA                    __ptext9 0BF8  
           main@semaforoId 015A                    _comando 0073                    _display 0806  
             __size_of_ISR 005A                 bitParita@i 0032                 bitParita@y 002D  
             __size_of_map 0035           ___awmod@dividend 0022           ___aldiv@dividend 0024  
     BuildByte@sommaColumn 002B                    clrloop0 0BA2                    main@tmp 015E  
     end_of_initialization 004C                 ??_init_ADC 0020             main@lux_select 0161  
               ??_sendByte 0036           _SetDefaultTimers 0ED9                  _RCSTAbits 0018  
         ___aldiv@quotient 002B                 _motorcycle 0054                  _UART_Init 07C3  
                _UART_Read 0BA9                  _PORTAbits 0005                  _PORTBbits 0006  
             SetDisplay@d1 0023               SetDisplay@d2 0020               SetDisplay@d3 0021  
                _TRISCbits 0087          __size_of_ADC_Read 0026   __end_of_conteggioVeicoli 0632  
               map@out_max 0038          bitParita@errorRow 002C                 map@out_min 0036  
                _TXSTAbits 0098                  _GetDigits 0E6E          bitParita@sommaRow 0028  
           __end_of___bmul 0C0F             __end_of___wmul 0C7C                 ?_UART_Init 002F  
               ?_UART_Read 0075                  _BuildByte 06FB          BuildByte@sommaRow 002A  
      start_initialization 0011                __end_of_ISR 0DAA               ??_SetDisplay 0023  
              __end_of_map 0D10                 ?_GetDigits 0030                   ??___bmul 0021  
           ADC_Read@canale 0023                   ??___wmul 0024                 init_fetch0 0BD0  
              __pdataBANK0 0064                __pdataBANK1 00C7         __end_of_SetDisplay 0BF8  
               ?_BuildByte 0020                __pbssCOMMON 0070                  ___latbits 0002  
            __pcstackBANK0 0020              __pcstackBANK2 0158                   ?_GetTime 0020  
                _bitChange 0CAA      SetDefaultTimers@verde 0022      SetDefaultTimers@rosso 0020  
        __size_of_init_ADC 0013                  _bitParita 0632                  _centinaia 005D  
        __size_of_sendByte 002E                   ?___aldiv 0020                   ?___awdiv 0027  
                 ?___awmod 0020                ??_UART_Init 0031                ??_UART_Read 0075  
           BuildByte@i_342 0032                  __pstrings 0800             BuildByte@y_343 002E  
           sendByte@valore 0035             sendByte@txByte 003A             BuildByte@byte0 0024  
           BuildByte@byte1 0020   __end_of_SetDefaultTimers 0F63                   _ADC_Read 0C2F  
                _count_lux 0074                  _countdown 005A              UART_TxChar@ch 0020  
          ___aldiv@divisor 0020          interrupt_function 0004            ___aldiv@counter 0029  
               ?_bitChange 0020             ___wmul@product 0024                  clear_ram0 0BA1  
                 _PIE1bits 008C              ??_UART_TxChar 0020                 ?_bitParita 0075  
              ??_GetDigits 0032                   _GO_nDONE 00FA          UART_Init@baudrate 002F  
              ??_BuildByte 0022                  map@in_max 0034                  map@in_min 0032  
              __stringbase 0805                  main@i_442 0165                  main@i_436 0166  
                main@i_437 0163                  main@i_439 0164                  main@i_449 0169  
        ___wmul@multiplier 0020                  main@index 0162               GetTime@index 0024  
        ?_conteggioVeicoli 0075               _secondPassed 0061         ??_conteggioVeicoli 0075  
         __size_of_GetTime 0040                   _Semafori 00C7             bitParita@i_330 0034  
              _readGateway 0062             bitParita@y_331 002F           __size_of___aldiv 009D  
      __end_of_UART_TxChar 0BBD           __size_of___awdiv 0069           __size_of___awmod 005B  
           bitParita@error 002B         __end_of__stringtab 0806                  sendByte@i 003B  
                 __ptext10 07C3                   __ptext11 0F63                   __ptext20 054F  
                 __ptext12 0BE3                   __ptext21 0BA9                   __ptext13 0ED9  
                 __ptext14 0D10                   __ptext15 0E6E                   __ptext16 0DAA  
                 __ptext17 0E05                   __ptext18 0C2F                   __ptext19 0D50  
                 _init_ADC 0BBD                bitParita@rx 0031                ??_bitChange 0021  
            __size_of_main 04FF            _dataFromGateway 00A0                   _old_disp 005C  
              ??_bitParita 0024                   _sendByte 0C7C                   main@temp 015C  
                 main@time 015F                GetTime@time 0026                 _INTCONbits 000B  
                 init_ram0 0BD4                   intlevel1 0000            _readGatewayDone 0063  
                stringcode 0800                _UART_TxChar 0BB2                 _OPTION_REG 0081  
          SetDisplay@value 0022                   stringdir 0800                   stringtab 0800  
        ?_SetDefaultTimers 0020               ___aldiv@sign 002A         ??_SetDefaultTimers 0026  
               BuildByte@i 0030                 BuildByte@y 002C  
