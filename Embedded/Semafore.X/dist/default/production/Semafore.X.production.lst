

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Jun 19 13:04:58 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  07FC                     __pidataBANK0:	
   202                           
   203                           ;initializer for _n_semafori
   204  07FC  340F               	retlw	15
   205                           
   206                           	psect	idataBANK1
   207  0C86                     __pidataBANK1:	
   208                           
   209                           ;initializer for _Semafori
   210  0C86  34BB               	retlw	low (_s0| 0)
   211  0C87  3400               	retlw	high (_s0| 0)
   212  0C88  34AF               	retlw	low (_s1| 0)
   213  0C89  3400               	retlw	high (_s1| 0)
   214  0C8A  34E4               	retlw	low (_s2| (0+256))
   215  0C8B  3401               	retlw	high (_s2| (0+256))
   216  0C8C  34D8               	retlw	low (_s3| (0+256))
   217  0C8D  3401               	retlw	high (_s3| (0+256))
   218  0C8E  34CC               	retlw	low (_s4| (0+256))
   219  0C8F  3401               	retlw	high (_s4| (0+256))
   220  0C90  34C0               	retlw	low (_s5| (0+256))
   221  0C91  3401               	retlw	high (_s5| (0+256))
   222  0C92  34B4               	retlw	low (_s6| (0+256))
   223  0C93  3401               	retlw	high (_s6| (0+256))
   224  0C94  34A8               	retlw	low (_s7| (0+256))
   225  0C95  3401               	retlw	high (_s7| (0+256))
   226  0C96  349C               	retlw	low (_s8| (0+256))
   227  0C97  3401               	retlw	high (_s8| (0+256))
   228  0C98  3490               	retlw	low (_s9| (0+256))
   229  0C99  3401               	retlw	high (_s9| (0+256))
   230  0C9A  344C               	retlw	low (_s10| (0+256))
   231  0C9B  3401               	retlw	high (_s10| (0+256))
   232  0C9C  3440               	retlw	low (_s11| (0+256))
   233  0C9D  3401               	retlw	high (_s11| (0+256))
   234  0C9E  3434               	retlw	low (_s12| (0+256))
   235  0C9F  3401               	retlw	high (_s12| (0+256))
   236  0CA0  3428               	retlw	low (_s13| (0+256))
   237  0CA1  3401               	retlw	high (_s13| (0+256))
   238  0CA2  341C               	retlw	low (_s14| (0+256))
   239  0CA3  3401               	retlw	high (_s14| (0+256))
   240  0CA4  3410               	retlw	low (_s15| (0+256))
   241  0CA5  3401               	retlw	high (_s15| (0+256))
   242                           
   243                           	psect	strings
   244  0800                     __pstrings:	
   245  0800                     stringtab:	
   246  0800                     __stringtab:	
   247  0800                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250  0800                     stringdir:	
   251  0800  3008               	movlw	high stringdir
   252  0801  008A               	movwf	10
   253  0802  0804               	movf	4,w
   254  0803  0A84               	incf	4,f
   255  0804  0782               	addwf	2,f
   256  0805                     __stringbase:	
   257  0805  3400               	retlw	0
   258  0806                     __end_of__stringtab:	
   259  0806                     _display:	
   260  0806  343F               	retlw	63
   261  0807  3406               	retlw	6
   262  0808  345B               	retlw	91
   263  0809  344F               	retlw	79
   264  080A  3466               	retlw	102
   265  080B  346D               	retlw	109
   266  080C  347D               	retlw	125
   267  080D  3407               	retlw	7
   268  080E  347F               	retlw	127
   269  080F  346F               	retlw	111
   270  0810  3400               	retlw	0
   271  0811                     __end_of_display:	
   272  0006                     _PORTBbits	set	6
   273  0008                     _PORTD	set	8
   274  0005                     _PORTAbits	set	5
   275  001A                     _RCREG	set	26
   276  0019                     _TXREG	set	25
   277  000B                     _INTCONbits	set	11
   278  0018                     _RCSTAbits	set	24
   279  001E                     _ADRESH	set	30
   280  001F                     _ADCON0	set	31
   281  000E                     _TMR1L	set	14
   282  000F                     _TMR1H	set	15
   283  0010                     _T1CON	set	16
   284  0001                     _TMR0	set	1
   285  000B                     _INTCON	set	11
   286  0060                     _TMR1IF	set	96
   287  005A                     _TMR0IF	set	90
   288  0065                     _RCIF	set	101
   289  0064                     _TXIF	set	100
   290  00FA                     _GO_nDONE	set	250
   291  008C                     _PIE1bits	set	140
   292  0099                     _SPBRG	set	153
   293  0098                     _TXSTAbits	set	152
   294  0087                     _TRISCbits	set	135
   295  009E                     _ADRESL	set	158
   296  009F                     _ADCON1	set	159
   297  0085                     _TRISA	set	133
   298  0081                     _OPTION_REG	set	129
   299  0089                     _TRISE	set	137
   300  0088                     _TRISD	set	136
   301  0087                     _TRISC	set	135
   302  0086                     _TRISB	set	134
   303                           
   304                           ; #config settings
   305  0000                     
   306                           	psect	cinit
   307  0011                     start_initialization:	
   308  0011                     __initialization:	
   309                           
   310                           ; Initialize objects allocated to BANK1
   311  0011  1383               	bcf	3,7	;select IRP bank0
   312  0012  30E7               	movlw	low (__pdataBANK1+32)
   313  0013  00FD               	movwf	btemp+-1
   314  0014  300C               	movlw	high __pidataBANK1
   315  0015  00FE               	movwf	btemp
   316  0016  3086               	movlw	low __pidataBANK1
   317  0017  00FF               	movwf	btemp+1
   318  0018  30C7               	movlw	low __pdataBANK1
   319  0019  0084               	movwf	4
   320  001A  120A  158A  244B  120A  118A  	fcall	init_ram0
   321                           
   322                           ; Initialize objects allocated to BANK0
   323  001F  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   324  0024  00E4               	movwf	__pdataBANK0& (0+127)
   325                           
   326                           ; Clear objects allocated to BANK3
   327  0025  1783               	bsf	3,7	;select IRP bank2
   328  0026  3090               	movlw	low __pbssBANK3
   329  0027  0084               	movwf	4
   330  0028  30F0               	movlw	low (__pbssBANK3+96)
   331  0029  120A  158A  241A  120A  118A  	fcall	clear_ram0
   332                           
   333                           ; Clear objects allocated to BANK2
   334  002E  3010               	movlw	low __pbssBANK2
   335  002F  0084               	movwf	4
   336  0030  3058               	movlw	low (__pbssBANK2+72)
   337  0031  120A  158A  241A  120A  118A  	fcall	clear_ram0
   338                           
   339                           ; Clear objects allocated to BANK1
   340  0036  1383               	bcf	3,7	;select IRP bank0
   341  0037  30A0               	movlw	low __pbssBANK1
   342  0038  0084               	movwf	4
   343  0039  30C7               	movlw	low (__pbssBANK1+39)
   344  003A  120A  158A  241A  120A  118A  	fcall	clear_ram0
   345                           
   346                           ; Clear objects allocated to BANK0
   347  003F  304A               	movlw	low __pbssBANK0
   348  0040  0084               	movwf	4
   349  0041  3064               	movlw	low (__pbssBANK0+26)
   350  0042  120A  158A  241A  120A  118A  	fcall	clear_ram0
   351                           
   352                           ; Clear objects allocated to COMMON
   353  0047  01F7               	clrf	__pbssCOMMON& (0+127)
   354  0048  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   355  0049  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   356  004A                     end_of_initialization:	
   357                           ;End of C runtime variable initialization code
   358                           
   359  004A                     __end_of__initialization:	
   360  004A  0183               	clrf	3
   361  004B  120A  118A  284E   	ljmp	_main	;jump to C main() function
   362                           
   363                           	psect	bssCOMMON
   364  0077                     __pbssCOMMON:	
   365  0077                     _time:	
   366  0077                     	ds	1
   367  0078                     _comando:	
   368  0078                     	ds	1
   369  0079                     _count_lux:	
   370  0079                     	ds	1
   371                           
   372                           	psect	bssBANK0
   373  004A                     __pbssBANK0:	
   374  004A                     _truck:	
   375  004A                     	ds	4
   376  004E                     _car:	
   377  004E                     	ds	4
   378  0052                     _motorcycle:	
   379  0052                     	ds	4
   380  0056                     _count:	
   381  0056                     	ds	2
   382  0058                     _timerReadFromGateway:	
   383  0058                     	ds	1
   384  0059                     _dataFromGatewayIndex:	
   385  0059                     	ds	1
   386  005A                     _countdown:	
   387  005A                     	ds	1
   388  005B                     _disp:	
   389  005B                     	ds	1
   390  005C                     _old_disp:	
   391  005C                     	ds	1
   392  005D                     _centinaia:	
   393  005D                     	ds	1
   394  005E                     _decine:	
   395  005E                     	ds	1
   396  005F                     _unita:	
   397  005F                     	ds	1
   398  0060                     _cycled:	
   399  0060                     	ds	1
   400  0061                     _secondPassed:	
   401  0061                     	ds	1
   402  0062                     _readGateway:	
   403  0062                     	ds	1
   404  0063                     _readGatewayDone:	
   405  0063                     	ds	1
   406                           
   407                           	psect	dataBANK0
   408  0064                     __pdataBANK0:	
   409  0064                     _n_semafori:	
   410  0064                     	ds	1
   411                           
   412                           	psect	bssBANK1
   413  00A0                     __pbssBANK1:	
   414  00A0                     _dataFromGateway:	
   415  00A0                     	ds	15
   416  00AF                     _s1:	
   417  00AF                     	ds	12
   418  00BB                     _s0:	
   419  00BB                     	ds	12
   420                           
   421                           	psect	dataBANK1
   422  00C7                     __pdataBANK1:	
   423  00C7                     _Semafori:	
   424  00C7                     	ds	32
   425                           
   426                           	psect	bssBANK3
   427  0190                     __pbssBANK3:	
   428  0190                     _s9:	
   429  0190                     	ds	12
   430  019C                     _s8:	
   431  019C                     	ds	12
   432  01A8                     _s7:	
   433  01A8                     	ds	12
   434  01B4                     _s6:	
   435  01B4                     	ds	12
   436  01C0                     _s5:	
   437  01C0                     	ds	12
   438  01CC                     _s4:	
   439  01CC                     	ds	12
   440  01D8                     _s3:	
   441  01D8                     	ds	12
   442  01E4                     _s2:	
   443  01E4                     	ds	12
   444                           
   445                           	psect	bssBANK2
   446  0110                     __pbssBANK2:	
   447  0110                     _s15:	
   448  0110                     	ds	12
   449  011C                     _s14:	
   450  011C                     	ds	12
   451  0128                     _s13:	
   452  0128                     	ds	12
   453  0134                     _s12:	
   454  0134                     	ds	12
   455  0140                     _s11:	
   456  0140                     	ds	12
   457  014C                     _s10:	
   458  014C                     	ds	12
   459                           
   460                           	psect	inittext
   461  0C47                     init_fetch0:	
   462                           ;	Called with low address in FSR and high address in W
   463                           
   464  0C47  087E               	movf	btemp,w
   465  0C48  008A               	movwf	10
   466  0C49  087F               	movf	btemp+1,w
   467  0C4A  0082               	movwf	2
   468  0C4B                     init_ram0:	
   469                           ;Called with:
   470                           ;	high address of idata address in btemp 
   471                           ;	low address of idata address in btemp+1 
   472                           ;	low address of data in FSR
   473                           ;	high address + 1 of data in btemp-1
   474                           
   475  0C4B  120A  158A  2447  120A  158A  	fcall	init_fetch0
   476  0C50  0080               	movwf	0
   477  0C51  0A84               	incf	4,f
   478  0C52  0804               	movf	4,w
   479  0C53  067D               	xorwf	btemp+-1,w
   480  0C54  1903               	btfsc	3,2
   481  0C55  3400               	retlw	0
   482  0C56  0AFF               	incf	btemp+1,f
   483  0C57  1903               	btfsc	3,2
   484  0C58  0AFE               	incf	btemp,f
   485  0C59  2C4B               	goto	init_ram0
   486                           
   487                           	psect	clrtext
   488  0C1A                     clear_ram0:	
   489                           ;	Called with FSR containing the base address, and
   490                           ;	W with the last address+1
   491                           
   492  0C1A  0064               	clrwdt	;clear the watchdog before getting into this loop
   493  0C1B                     clrloop0:	
   494  0C1B  0180               	clrf	0	;clear RAM location pointed to by FSR
   495  0C1C  0A84               	incf	4,f	;increment pointer
   496  0C1D  0604               	xorwf	4,w	;XOR with final address
   497  0C1E  1903               	btfsc	3,2	;have we reached the end yet?
   498  0C1F  3400               	retlw	0	;all done for this memory range, return
   499  0C20  0604               	xorwf	4,w	;XOR again to restore value
   500  0C21  2C1B               	goto	clrloop0	;do the next byte
   501                           
   502                           	psect	cstackBANK2
   503  0158                     __pcstackBANK2:	
   504  0158                     main@semaforoId:	
   505                           
   506                           ; 1 bytes @ 0x0
   507  0158                     	ds	1
   508  0159                     main@colorId:	
   509                           
   510                           ; 1 bytes @ 0x1
   511  0159                     	ds	1
   512  015A                     main@temp:	
   513                           
   514                           ; 1 bytes @ 0x2
   515  015A                     	ds	1
   516  015B                     main@umidita:	
   517                           
   518                           ; 1 bytes @ 0x3
   519  015B                     	ds	1
   520  015C                     main@pressione:	
   521                           
   522                           ; 1 bytes @ 0x4
   523  015C                     	ds	1
   524  015D                     main@endCiclo:	
   525                           
   526                           ; 1 bytes @ 0x5
   527  015D                     	ds	1
   528  015E                     main@tmp:	
   529                           
   530                           ; 1 bytes @ 0x6
   531  015E                     	ds	1
   532  015F                     main@time:	
   533                           
   534                           ; 2 bytes @ 0x7
   535  015F                     	ds	2
   536  0161                     main@lux_select:	
   537                           
   538                           ; 1 bytes @ 0x9
   539  0161                     	ds	1
   540  0162                     main@index:	
   541                           
   542                           ; 1 bytes @ 0xA
   543  0162                     	ds	1
   544  0163                     main@i:	
   545                           
   546                           ; 1 bytes @ 0xB
   547  0163                     	ds	1
   548  0164                     main@i_447:	
   549                           
   550                           ; 1 bytes @ 0xC
   551  0164                     	ds	1
   552  0165                     main@i_449:	
   553                           
   554                           ; 1 bytes @ 0xD
   555  0165                     	ds	1
   556  0166                     main@i_446:	
   557                           
   558                           ; 2 bytes @ 0xE
   559  0166                     	ds	2
   560  0168                     main@l:	
   561                           
   562                           ; 1 bytes @ 0x10
   563  0168                     	ds	1
   564  0169                     main@i_444:	
   565                           
   566                           ; 1 bytes @ 0x11
   567  0169                     	ds	1
   568  016A                     main@i_445:	
   569                           
   570                           ; 2 bytes @ 0x12
   571  016A                     	ds	2
   572                           
   573                           	psect	cstackCOMMON
   574  0070                     __pcstackCOMMON:	
   575  0070                     ?_init_ADC:	
   576  0070                     ?_bitParita:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_main:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_UART_TxChar:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_UART_Write_Text:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_UART_Read:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ??_UART_Read:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?_ISR:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ??_ISR:	
   598                           ; 1 bytes @ 0x0
   599                           
   600                           
   601                           ; 1 bytes @ 0x0
   602  0070                     	ds	4
   603  0074                     ??_init_ADC:	
   604  0074                     ?_SetDisplay:	
   605                           ; 1 bytes @ 0x4
   606                           
   607  0074                     ?_BuildByte:	
   608                           ; 1 bytes @ 0x4
   609                           
   610  0074                     ?_bitChange:	
   611                           ; 1 bytes @ 0x4
   612                           
   613  0074                     ??_UART_TxChar:	
   614                           ; 1 bytes @ 0x4
   615                           
   616  0074                     ??___wmul:	
   617                           ; 1 bytes @ 0x4
   618                           
   619  0074                     ?___bmul:	
   620                           ; 1 bytes @ 0x4
   621                           
   622  0074                     ??___aldiv:	
   623                           ; 1 bytes @ 0x4
   624                           
   625  0074                     ??___awmod:	
   626                           ; 1 bytes @ 0x4
   627                           
   628  0074                     ?_GetTime:	
   629                           ; 1 bytes @ 0x4
   630                           
   631  0074                     ?_ADC_Read:	
   632                           ; 2 bytes @ 0x4
   633                           
   634  0074                     bitChange@n:	
   635                           ; 2 bytes @ 0x4
   636                           
   637  0074                     BuildByte@byte1:	
   638                           ; 1 bytes @ 0x4
   639                           
   640  0074                     UART_TxChar@ch:	
   641                           ; 1 bytes @ 0x4
   642                           
   643  0074                     SetDisplay@d2:	
   644                           ; 1 bytes @ 0x4
   645                           
   646  0074                     SetDefaultTimers@l:	
   647                           ; 1 bytes @ 0x4
   648                           
   649  0074                     ___bmul@multiplicand:	
   650                           ; 1 bytes @ 0x4
   651                           
   652  0074                     ___wmul@product:	
   653                           ; 1 bytes @ 0x4
   654                           
   655                           
   656                           ; 2 bytes @ 0x4
   657  0074                     	ds	1
   658  0075                     ??_bitChange:	
   659  0075                     ??_UART_Write_Text:	
   660                           ; 1 bytes @ 0x5
   661                           
   662  0075                     ??___bmul:	
   663                           ; 1 bytes @ 0x5
   664                           
   665  0075                     BuildByte@valore:	
   666                           ; 1 bytes @ 0x5
   667                           
   668  0075                     SetDisplay@d3:	
   669                           ; 1 bytes @ 0x5
   670                           
   671  0075                     SetDefaultTimers@i:	
   672                           ; 1 bytes @ 0x5
   673                           
   674  0075                     ___awmod@counter:	
   675                           ; 1 bytes @ 0x5
   676                           
   677                           
   678                           ; 1 bytes @ 0x5
   679  0075                     	ds	1
   680  0076                     ??_ADC_Read:	
   681  0076                     SetDisplay@value:	
   682                           ; 1 bytes @ 0x6
   683                           
   684  0076                     ___awmod@sign:	
   685                           ; 1 bytes @ 0x6
   686                           
   687                           
   688                           ; 1 bytes @ 0x6
   689  0076                     	ds	1
   690  0077                     ??_SetDisplay:	
   691  0077                     ??_map:	
   692                           ; 1 bytes @ 0x7
   693                           
   694                           
   695                           	psect	cstackBANK0
   696  0020                     __pcstackBANK0:	
   697                           ; 1 bytes @ 0x7
   698                           
   699  0020                     ?_SetDefaultTimers:	
   700  0020                     ??_GetTime:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0020                     ??_BuildByte:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0020                     ?___wmul:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0020                     ?___awmod:	
   710                           ; 2 bytes @ 0x0
   711                           
   712  0020                     ?___aldiv:	
   713                           ; 2 bytes @ 0x0
   714                           
   715  0020                     bitChange@dato:	
   716                           ; 4 bytes @ 0x0
   717                           
   718  0020                     ADC_Read@canale:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0020                     UART_Write_Text@text:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0020                     SetDisplay@d1:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0020                     ___bmul@product:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0020                     SetDefaultTimers@rosso:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0020                     ___wmul@multiplier:	
   734                           ; 2 bytes @ 0x0
   735                           
   736  0020                     ___awmod@divisor:	
   737                           ; 2 bytes @ 0x0
   738                           
   739  0020                     ___aldiv@divisor:	
   740                           ; 2 bytes @ 0x0
   741                           
   742                           
   743                           ; 4 bytes @ 0x0
   744  0020                     	ds	1
   745  0021                     ??_bitParita:	
   746  0021                     UART_Write_Text@i:	
   747                           ; 1 bytes @ 0x1
   748                           
   749  0021                     ___bmul@multiplier:	
   750                           ; 1 bytes @ 0x1
   751                           
   752                           
   753                           ; 1 bytes @ 0x1
   754  0021                     	ds	1
   755  0022                     BuildByte@byte0:	
   756  0022                     GetTime@index:	
   757                           ; 1 bytes @ 0x2
   758                           
   759  0022                     SetDefaultTimers@verde:	
   760                           ; 1 bytes @ 0x2
   761                           
   762  0022                     ___wmul@multiplicand:	
   763                           ; 2 bytes @ 0x2
   764                           
   765  0022                     ___awmod@dividend:	
   766                           ; 2 bytes @ 0x2
   767                           
   768                           
   769                           ; 2 bytes @ 0x2
   770  0022                     	ds	1
   771  0023                     GetTime@shortInt:	
   772  0023                     BuildByte@txByte:	
   773                           ; 1 bytes @ 0x3
   774                           
   775                           
   776                           ; 5 bytes @ 0x3
   777  0023                     	ds	1
   778  0024                     ?___awdiv:	
   779  0024                     GetTime@time:	
   780                           ; 2 bytes @ 0x4
   781                           
   782  0024                     SetDefaultTimers@giallo:	
   783                           ; 2 bytes @ 0x4
   784                           
   785  0024                     ___awdiv@divisor:	
   786                           ; 2 bytes @ 0x4
   787                           
   788  0024                     ___aldiv@dividend:	
   789                           ; 2 bytes @ 0x4
   790                           
   791                           
   792                           ; 4 bytes @ 0x4
   793  0024                     	ds	1
   794  0025                     bitParita@sommaRow:	
   795                           
   796                           ; 1 bytes @ 0x5
   797  0025                     	ds	1
   798  0026                     ??_SetDefaultTimers:	
   799  0026                     bitParita@sommaColumn:	
   800                           ; 1 bytes @ 0x6
   801                           
   802  0026                     ___awdiv@dividend:	
   803                           ; 1 bytes @ 0x6
   804                           
   805                           
   806                           ; 2 bytes @ 0x6
   807  0026                     	ds	1
   808  0027                     bitParita@errorColumn:	
   809                           
   810                           ; 1 bytes @ 0x7
   811  0027                     	ds	1
   812  0028                     ??___awdiv:	
   813  0028                     bitParita@error:	
   814                           ; 1 bytes @ 0x8
   815                           
   816  0028                     BuildByte@sommaRow:	
   817                           ; 1 bytes @ 0x8
   818                           
   819  0028                     ___aldiv@counter:	
   820                           ; 1 bytes @ 0x8
   821                           
   822                           
   823                           ; 1 bytes @ 0x8
   824  0028                     	ds	1
   825  0029                     bitParita@errorRow:	
   826  0029                     BuildByte@sommaColumn:	
   827                           ; 1 bytes @ 0x9
   828                           
   829  0029                     ___aldiv@sign:	
   830                           ; 1 bytes @ 0x9
   831                           
   832  0029                     ___awdiv@counter:	
   833                           ; 1 bytes @ 0x9
   834                           
   835                           
   836                           ; 1 bytes @ 0x9
   837  0029                     	ds	1
   838  002A                     ___awdiv@sign:	
   839  002A                     bitParita@y:	
   840                           ; 1 bytes @ 0xA
   841                           
   842  002A                     BuildByte@y:	
   843                           ; 2 bytes @ 0xA
   844                           
   845  002A                     ___aldiv@quotient:	
   846                           ; 2 bytes @ 0xA
   847                           
   848                           
   849                           ; 4 bytes @ 0xA
   850  002A                     	ds	1
   851  002B                     ___awdiv@quotient:	
   852                           
   853                           ; 2 bytes @ 0xB
   854  002B                     	ds	1
   855  002C                     bitParita@y_331:	
   856  002C                     BuildByte@y_343:	
   857                           ; 2 bytes @ 0xC
   858                           
   859                           
   860                           ; 2 bytes @ 0xC
   861  002C                     	ds	1
   862  002D                     ?_GetDigits:	
   863  002D                     ?_map:	
   864                           ; 1 bytes @ 0xD
   865                           
   866  002D                     map@x:	
   867                           ; 2 bytes @ 0xD
   868                           
   869  002D                     GetDigits@Time:	
   870                           ; 2 bytes @ 0xD
   871                           
   872                           
   873                           ; 2 bytes @ 0xD
   874  002D                     	ds	1
   875  002E                     ?_UART_Init:	
   876  002E                     bitParita@rx:	
   877                           ; 1 bytes @ 0xE
   878                           
   879  002E                     BuildByte@i:	
   880                           ; 1 bytes @ 0xE
   881                           
   882  002E                     UART_Init@baudrate:	
   883                           ; 2 bytes @ 0xE
   884                           
   885                           
   886                           ; 2 bytes @ 0xE
   887  002E                     	ds	1
   888  002F                     ??_GetDigits:	
   889  002F                     map@in_min:	
   890                           ; 1 bytes @ 0xF
   891                           
   892  002F                     bitParita@i:	
   893                           ; 2 bytes @ 0xF
   894                           
   895                           
   896                           ; 2 bytes @ 0xF
   897  002F                     	ds	1
   898  0030                     ??_UART_Init:	
   899  0030                     BuildByte@i_342:	
   900                           ; 1 bytes @ 0x10
   901                           
   902                           
   903                           ; 2 bytes @ 0x10
   904  0030                     	ds	1
   905  0031                     map@in_max:	
   906  0031                     bitParita@i_330:	
   907                           ; 2 bytes @ 0x11
   908                           
   909                           
   910                           ; 2 bytes @ 0x11
   911  0031                     	ds	1
   912  0032                     ?_sendByte:	
   913  0032                     sendByte@byte1:	
   914                           ; 1 bytes @ 0x12
   915                           
   916  0032                     _GetDigits$1147:	
   917                           ; 1 bytes @ 0x12
   918                           
   919                           
   920                           ; 2 bytes @ 0x12
   921  0032                     	ds	1
   922  0033                     sendByte@valore:	
   923  0033                     map@out_min:	
   924                           ; 1 bytes @ 0x13
   925                           
   926                           
   927                           ; 2 bytes @ 0x13
   928  0033                     	ds	1
   929  0034                     ??_sendByte:	
   930                           
   931                           ; 1 bytes @ 0x14
   932  0034                     	ds	1
   933  0035                     map@out_max:	
   934                           
   935                           ; 2 bytes @ 0x15
   936  0035                     	ds	2
   937  0037                     sendByte@byte0:	
   938                           
   939                           ; 1 bytes @ 0x17
   940  0037                     	ds	1
   941  0038                     sendByte@txByte:	
   942                           
   943                           ; 1 bytes @ 0x18
   944  0038                     	ds	1
   945  0039                     sendByte@i:	
   946                           
   947                           ; 1 bytes @ 0x19
   948  0039                     	ds	1
   949  003A                     ??_main:	
   950                           
   951                           ; 1 bytes @ 0x1A
   952  003A                     	ds	16
   953                           
   954                           	psect	maintext
   955  004E                     __pmaintext:	
   956 ;;
   957 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   958 ;;
   959 ;; *************** function _main *****************
   960 ;; Defined at:
   961 ;;		line 130 in file "main.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;		None
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  i               1   17[BANK2 ] unsigned char 
   966 ;;  index           1   10[BANK2 ] unsigned char 
   967 ;;  colorId         1    1[BANK2 ] unsigned char 
   968 ;;  semaforoId      1    0[BANK2 ] unsigned char 
   969 ;;  i               1   11[BANK2 ] unsigned char 
   970 ;;  i               1   13[BANK2 ] unsigned char 
   971 ;;  i               1   12[BANK2 ] unsigned char 
   972 ;;  i               2   14[BANK2 ] int 
   973 ;;  i               2   18[BANK2 ] int 
   974 ;;  l               1   16[BANK2 ] unsigned char 
   975 ;;  tmp             1    6[BANK2 ] unsigned char 
   976 ;;  time            2    7[BANK2 ] int 
   977 ;;  lux_select      1    9[BANK2 ] unsigned char 
   978 ;;  endCiclo        1    5[BANK2 ] struct .
   979 ;;  pressione       1    4[BANK2 ] unsigned char 
   980 ;;  umidita         1    3[BANK2 ] unsigned char 
   981 ;;  temp            1    2[BANK2 ] unsigned char 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   986 ;; Tracked objects:
   987 ;;		On entry : B00/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   991 ;;      Params:         0       0       0       0       0
   992 ;;      Locals:         0       0       0       0      20
   993 ;;      Temps:          0      16       0       0       0
   994 ;;      Totals:         0      16       0       0      20
   995 ;;Total ram usage:       36 bytes
   996 ;; Hardware stack levels required when called:    5
   997 ;; This function calls:
   998 ;;		_ADC_Read
   999 ;;		_GetDigits
  1000 ;;		_GetTime
  1001 ;;		_SetDefaultTimers
  1002 ;;		_SetDisplay
  1003 ;;		_UART_Init
  1004 ;;		___awmod
  1005 ;;		___bmul
  1006 ;;		_bitParita
  1007 ;;		_init_ADC
  1008 ;;		_map
  1009 ;;		_sendByte
  1010 ;; This function is called by:
  1011 ;;		Startup code after reset
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           
  1016                           ;psect for function _main
  1017  004E                     _main:	
  1018  004E                     l2927:	
  1019                           ;incstack = 0
  1020                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1021                           
  1022                           
  1023                           ;main.c: 132:     TRISB = 0x1F;
  1024  004E  301F               	movlw	31
  1025  004F  1683               	bsf	3,5	;RP0=1, select bank1
  1026  0050  1303               	bcf	3,6	;RP1=0, select bank1
  1027  0051  0086               	movwf	6	;volatile
  1028                           
  1029                           ;main.c: 133:     TRISC = 0x80;
  1030  0052  3080               	movlw	128
  1031  0053  0087               	movwf	7	;volatile
  1032  0054                     l2929:	
  1033                           
  1034                           ;main.c: 134:     TRISD = 0x00;
  1035  0054  0188               	clrf	8	;volatile
  1036  0055                     l2931:	
  1037                           
  1038                           ;main.c: 135:     TRISE = 0x00;
  1039  0055  0189               	clrf	9	;volatile
  1040                           
  1041                           ;main.c: 136:     INTCON = 0xE0;
  1042  0056  30E0               	movlw	224
  1043  0057  008B               	movwf	11	;volatile
  1044                           
  1045                           ;main.c: 137:     OPTION_REG = 0x04;
  1046  0058  3004               	movlw	4
  1047  0059  0081               	movwf	1	;volatile
  1048                           
  1049                           ;main.c: 138:     TMR0 = 6;
  1050  005A  3006               	movlw	6
  1051  005B  1283               	bcf	3,5	;RP0=0, select bank0
  1052  005C  1303               	bcf	3,6	;RP1=0, select bank0
  1053  005D  0081               	movwf	1	;volatile
  1054                           
  1055                           ;main.c: 139:     T1CON = 0x31;
  1056  005E  3031               	movlw	49
  1057  005F  0090               	movwf	16	;volatile
  1058  0060                     l2933:	
  1059                           
  1060                           ;main.c: 142:     init_ADC();
  1061  0060  120A  158A  2436  120A  118A  	fcall	_init_ADC
  1062  0065                     l2935:	
  1063                           
  1064                           ;main.c: 143:     UART_Init(9600);
  1065  0065  3080               	movlw	128
  1066  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1067  0067  1303               	bcf	3,6	;RP1=0, select bank0
  1068  0068  00AE               	movwf	UART_Init@baudrate
  1069  0069  3025               	movlw	37
  1070  006A  00AF               	movwf	UART_Init@baudrate+1
  1071  006B  120A  118A  27C2  120A  118A  	fcall	_UART_Init
  1072  0070                     l2937:	
  1073                           
  1074                           ;main.c: 144:     SetDefaultTimers(2,2,2);
  1075  0070  3002               	movlw	2
  1076  0071  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0072  1303               	bcf	3,6	;RP1=0, select bank0
  1078  0073  00A0               	movwf	SetDefaultTimers@rosso
  1079  0074  3000               	movlw	0
  1080  0075  00A1               	movwf	SetDefaultTimers@rosso+1
  1081  0076  3002               	movlw	2
  1082  0077  00A2               	movwf	SetDefaultTimers@verde
  1083  0078  3000               	movlw	0
  1084  0079  00A3               	movwf	SetDefaultTimers@verde+1
  1085  007A  3002               	movlw	2
  1086  007B  00A4               	movwf	SetDefaultTimers@giallo
  1087  007C  3000               	movlw	0
  1088  007D  00A5               	movwf	SetDefaultTimers@giallo+1
  1089  007E  120A  158A  2776  120A  118A  	fcall	_SetDefaultTimers
  1090  0083                     l2939:	
  1091                           
  1092                           ;main.c: 146:     TMR1H = 60;
  1093  0083  303C               	movlw	60
  1094  0084  1283               	bcf	3,5	;RP0=0, select bank0
  1095  0085  1303               	bcf	3,6	;RP1=0, select bank0
  1096  0086  008F               	movwf	15	;volatile
  1097  0087                     l2941:	
  1098                           
  1099                           ;main.c: 147:     TMR1L = 176;
  1100  0087  30B0               	movlw	176
  1101  0088  008E               	movwf	14	;volatile
  1102  0089                     l2943:	
  1103                           
  1104                           ;main.c: 149:     int time;;main.c: 150:     unsigned char lux_select = 0;
  1105  0089  1283               	bcf	3,5	;RP0=0, select bank2
  1106  008A  1703               	bsf	3,6	;RP1=1, select bank2
  1107  008B  01E1               	clrf	main@lux_select^(0+256)
  1108  008C                     l2945:	
  1109                           
  1110                           ;main.c: 151:     disp = 0;
  1111  008C  1283               	bcf	3,5	;RP0=0, select bank0
  1112  008D  1303               	bcf	3,6	;RP1=0, select bank0
  1113  008E  01DB               	clrf	_disp
  1114  008F                     l2947:	
  1115  008F                     l2949:	
  1116  008F                     l2951:	
  1117  008F                     l2953:	
  1118                           
  1119                           ;main.c: 155:     Bit endCiclo;;main.c: 156:     endCiclo.Bit=1;
  1120  008F  1283               	bcf	3,5	;RP0=0, select bank2
  1121  0090  1703               	bsf	3,6	;RP1=1, select bank2
  1122  0091  145D               	bsf	main@endCiclo^(0+256),0
  1123  0092                     l2955:	
  1124                           
  1125                           ;main.c: 159:     {;main.c: 161:         if (readGateway.Bit)
  1126  0092  1303               	bcf	3,6	;RP1=0, select bank0
  1127  0093  1C62               	btfss	_readGateway,0
  1128  0094  2896               	goto	u2961
  1129  0095  2897               	goto	u2960
  1130  0096                     u2961:	
  1131  0096  28C3               	goto	l212
  1132  0097                     u2960:	
  1133  0097  28AE               	goto	l2969
  1134  0098                     l214:	
  1135                           ;main.c: 164:             {;main.c: 165:             case 0x08:
  1136                           
  1137                           
  1138                           ;main.c: 166:                 readGatewayDone.Bit = 1;
  1139  0098  1463               	bsf	_readGatewayDone,0
  1140                           
  1141                           ;main.c: 167:                 readGateway.Bit = 0;
  1142  0099  1062               	bcf	_readGateway,0
  1143                           
  1144                           ;main.c: 168:                 break;
  1145  009A  28C3               	goto	l212
  1146  009B                     l2959:	
  1147                           
  1148                           ;main.c: 175:                 if (timerReadFromGateway >= 4)
  1149  009B  3004               	movlw	4
  1150  009C  0258               	subwf	_timerReadFromGateway,w
  1151  009D  1C03               	skipc
  1152  009E  28A0               	goto	u2971
  1153  009F  28A1               	goto	u2970
  1154  00A0                     u2971:	
  1155  00A0  28A4               	goto	l2963
  1156  00A1                     u2970:	
  1157  00A1                     l2961:	
  1158                           
  1159                           ;main.c: 176:                 {;main.c: 177:                     readGatewayDone.Bit = 1
      +                          ;
  1160  00A1  1463               	bsf	_readGatewayDone,0
  1161                           
  1162                           ;main.c: 178:                     readGatewayDone.Timeout = 1;
  1163  00A2  14E3               	bsf	_readGatewayDone,1
  1164                           
  1165                           ;main.c: 179:                     readGateway.Bit = 0;
  1166  00A3  1062               	bcf	_readGateway,0
  1167  00A4                     l2963:	
  1168                           
  1169                           ;main.c: 182:                 if (dataFromGatewayIndex >= 15)
  1170  00A4  300F               	movlw	15
  1171  00A5  0259               	subwf	_dataFromGatewayIndex,w
  1172  00A6  1C03               	skipc
  1173  00A7  28A9               	goto	u2981
  1174  00A8  28AA               	goto	u2980
  1175  00A9                     u2981:	
  1176  00A9  28C3               	goto	l212
  1177  00AA                     u2980:	
  1178  00AA                     l2965:	
  1179                           
  1180                           ;main.c: 183:                 {;main.c: 184:                     readGatewayDone.Bit = 1
      +                          ;
  1181  00AA  1463               	bsf	_readGatewayDone,0
  1182                           
  1183                           ;main.c: 185:                     readGatewayDone.Timeout = 0;
  1184  00AB  10E3               	bcf	_readGatewayDone,1
  1185                           
  1186                           ;main.c: 186:                     readGateway.Bit = 0;
  1187  00AC  1062               	bcf	_readGateway,0
  1188  00AD  28C3               	goto	l212
  1189  00AE                     l2969:	
  1190  00AE  1683               	bsf	3,5	;RP0=1, select bank1
  1191  00AF  1303               	bcf	3,6	;RP1=0, select bank1
  1192  00B0  0821               	movf	(_dataFromGateway^(0+128)+1),w
  1193  00B1  397F               	andlw	127
  1194  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1195  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  1196  00B4  00BA               	movwf	??_main
  1197  00B5  01BB               	clrf	??_main+1
  1198                           
  1199                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1200                           ; Switch size 1, requested type "simple"
  1201                           ; Number of cases is 1, Range of values is 0 to 0
  1202                           ; switch strategies available:
  1203                           ; Name         Instructions Cycles
  1204                           ; simple_byte            4     3 (average)
  1205                           ; direct_byte           11     8 (fixed)
  1206                           ; jumptable            260     6 (fixed)
  1207                           ;	Chosen strategy is simple_byte
  1208  00B6  083B               	movf	??_main+1,w
  1209  00B7  3A00               	xorlw	0	; case 0
  1210  00B8  1903               	skipnz
  1211  00B9  28BB               	goto	l3239
  1212  00BA  289B               	goto	l2959
  1213  00BB                     l3239:	
  1214                           
  1215                           ; Switch size 1, requested type "simple"
  1216                           ; Number of cases is 2, Range of values is 8 to 10
  1217                           ; switch strategies available:
  1218                           ; Name         Instructions Cycles
  1219                           ; simple_byte            7     4 (average)
  1220                           ; direct_byte           20    11 (fixed)
  1221                           ; jumptable            263     9 (fixed)
  1222                           ;	Chosen strategy is simple_byte
  1223  00BB  083A               	movf	??_main,w
  1224  00BC  3A08               	xorlw	8	; case 8
  1225  00BD  1903               	skipnz
  1226  00BE  2898               	goto	l214
  1227  00BF  3A02               	xorlw	2	; case 10
  1228  00C0  1903               	skipnz
  1229  00C1  2898               	goto	l214
  1230  00C2  289B               	goto	l2959
  1231  00C3                     l212:	
  1232                           ;main.c: 190:         }
  1233                           
  1234                           
  1235                           ;main.c: 193:         if (readGatewayDone.Bit)
  1236  00C3  1C63               	btfss	_readGatewayDone,0
  1237  00C4  28C6               	goto	u2991
  1238  00C5  28C7               	goto	u2990
  1239  00C6                     u2991:	
  1240  00C6  295E               	goto	l220
  1241  00C7                     u2990:	
  1242  00C7                     l2971:	
  1243                           
  1244                           ;main.c: 194:         {;main.c: 196:             readGateway.Bit = 0;
  1245  00C7  1062               	bcf	_readGateway,0
  1246  00C8                     l2973:	
  1247                           
  1248                           ;main.c: 197:             dataFromGatewayIndex = 0;
  1249  00C8  01D9               	clrf	_dataFromGatewayIndex
  1250  00C9                     l2975:	
  1251                           
  1252                           ;main.c: 198:             readGatewayDone.Bit = 0;
  1253  00C9  1063               	bcf	_readGatewayDone,0
  1254                           
  1255                           ;main.c: 199:             timerReadFromGateway = 0;
  1256  00CA  01D8               	clrf	_timerReadFromGateway
  1257  00CB                     l2977:	
  1258                           
  1259                           ;main.c: 202:             if (readGatewayDone.Timeout)
  1260  00CB  1CE3               	btfss	_readGatewayDone,1
  1261  00CC  28CE               	goto	u3001
  1262  00CD  28CF               	goto	u3000
  1263  00CE                     u3001:	
  1264  00CE  28D1               	goto	l2981
  1265  00CF                     u3000:	
  1266  00CF                     l2979:	
  1267                           
  1268                           ;main.c: 203:             {;main.c: 204:                 readGatewayDone.Timeout = 0;
  1269  00CF  10E3               	bcf	_readGatewayDone,1
  1270                           
  1271                           ;main.c: 205:             }
  1272  00D0  295E               	goto	l220
  1273  00D1                     l2981:	
  1274                           
  1275                           ;main.c: 208:             {;main.c: 209:                 bitParita(dataFromGateway);
  1276  00D1  30A0               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1277  00D2  120A  118A  2594  120A  118A  	fcall	_bitParita
  1278  00D7                     l2983:	
  1279                           
  1280                           ;main.c: 210:                 unsigned char tmp;;main.c: 211:                 for (unsig
      +                          ned char i = 0; i < 3; i++)
  1281  00D7  1283               	bcf	3,5	;RP0=0, select bank2
  1282  00D8  1703               	bsf	3,6	;RP1=1, select bank2
  1283  00D9  01E3               	clrf	main@i^(0+256)
  1284  00DA                     l2985:	
  1285  00DA  3003               	movlw	3
  1286  00DB  0263               	subwf	main@i^(0+256),w
  1287  00DC  1C03               	skipc
  1288  00DD  28DF               	goto	u3011
  1289  00DE  28E0               	goto	u3010
  1290  00DF                     u3011:	
  1291  00DF  28E1               	goto	l2989
  1292  00E0                     u3010:	
  1293  00E0  295E               	goto	l220
  1294  00E1                     l2989:	
  1295                           
  1296                           ;main.c: 212:                 {;main.c: 213:                     unsigned char index = i
      +                           * 5;
  1297  00E1  3005               	movlw	5
  1298  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1299  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1300  00E4  00BA               	movwf	??_main
  1301  00E5  083A               	movf	??_main,w
  1302  00E6  00F4               	movwf	___bmul@multiplicand
  1303  00E7  1283               	bcf	3,5	;RP0=0, select bank2
  1304  00E8  1703               	bsf	3,6	;RP1=1, select bank2
  1305  00E9  0863               	movf	main@i^(0+256),w
  1306  00EA  120A  158A  246F  120A  118A  	fcall	___bmul
  1307  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1308  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1309  00F1  00BB               	movwf	??_main+1
  1310  00F2  083B               	movf	??_main+1,w
  1311  00F3  1283               	bcf	3,5	;RP0=0, select bank2
  1312  00F4  1703               	bsf	3,6	;RP1=1, select bank2
  1313  00F5  00E2               	movwf	main@index^(0+256)
  1314  00F6                     l2991:	
  1315                           
  1316                           ;main.c: 214:                     tmp=dataFromGateway[index];
  1317  00F6  0862               	movf	main@index^(0+256),w
  1318  00F7  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1319  00F8  0084               	movwf	4
  1320  00F9  1383               	bcf	3,7	;select IRP bank1
  1321  00FA  0800               	movf	0,w
  1322  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1323  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  1324  00FD  00BA               	movwf	??_main
  1325  00FE  083A               	movf	??_main,w
  1326  00FF  1283               	bcf	3,5	;RP0=0, select bank2
  1327  0100  1703               	bsf	3,6	;RP1=1, select bank2
  1328  0101  00DE               	movwf	main@tmp^(0+256)
  1329  0102                     l2993:	
  1330                           
  1331                           ;main.c: 215:                     unsigned char semaforoId=(tmp>>1)&0x0F;
  1332  0102  085E               	movf	main@tmp^(0+256),w
  1333  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1334  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1335  0105  00BA               	movwf	??_main
  1336  0106  1003               	clrc
  1337  0107  0C3A               	rrf	??_main,w
  1338  0108  390F               	andlw	15
  1339  0109  00BB               	movwf	??_main+1
  1340  010A  083B               	movf	??_main+1,w
  1341  010B  1283               	bcf	3,5	;RP0=0, select bank2
  1342  010C  1703               	bsf	3,6	;RP1=1, select bank2
  1343  010D  00D8               	movwf	main@semaforoId^(0+256)
  1344  010E                     l2995:	
  1345                           
  1346                           ;main.c: 216:                     tmp=dataFromGateway[index];
  1347  010E  0862               	movf	main@index^(0+256),w
  1348  010F  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1349  0110  0084               	movwf	4
  1350  0111  0800               	movf	0,w
  1351  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1352  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1353  0114  00BA               	movwf	??_main
  1354  0115  083A               	movf	??_main,w
  1355  0116  1283               	bcf	3,5	;RP0=0, select bank2
  1356  0117  1703               	bsf	3,6	;RP1=1, select bank2
  1357  0118  00DE               	movwf	main@tmp^(0+256)
  1358  0119                     l2997:	
  1359                           
  1360                           ;main.c: 217:                     unsigned char colorId=((tmp >> 5) & 0x03)-1;
  1361  0119  085E               	movf	main@tmp^(0+256),w
  1362  011A  1283               	bcf	3,5	;RP0=0, select bank0
  1363  011B  1303               	bcf	3,6	;RP1=0, select bank0
  1364  011C  00BA               	movwf	??_main
  1365  011D  3005               	movlw	5
  1366  011E                     u3025:	
  1367  011E  1003               	clrc
  1368  011F  0CBA               	rrf	??_main,f
  1369  0120  3EFF               	addlw	-1
  1370  0121  1D03               	skipz
  1371  0122  291E               	goto	u3025
  1372  0123  083A               	movf	??_main,w
  1373  0124  3903               	andlw	3
  1374  0125  3EFF               	addlw	255
  1375  0126  00BB               	movwf	??_main+1
  1376  0127  083B               	movf	??_main+1,w
  1377  0128  1283               	bcf	3,5	;RP0=0, select bank2
  1378  0129  1703               	bsf	3,6	;RP1=1, select bank2
  1379  012A  00D9               	movwf	main@colorId^(0+256)
  1380  012B                     l2999:	
  1381                           
  1382                           ;main.c: 220:                     (*(Semafori[semaforoId])).new_times[colorId]=GetTime(i
      +                          ndex);
  1383  012B  0862               	movf	main@index^(0+256),w
  1384  012C  120A  158A  25A4  120A  118A  	fcall	_GetTime
  1385  0131  1283               	bcf	3,5	;RP0=0, select bank2
  1386  0132  1703               	bsf	3,6	;RP1=1, select bank2
  1387  0133  0858               	movf	main@semaforoId^(0+256),w
  1388  0134  1283               	bcf	3,5	;RP0=0, select bank0
  1389  0135  1303               	bcf	3,6	;RP1=0, select bank0
  1390  0136  00BA               	movwf	??_main
  1391  0137  073A               	addwf	??_main,w
  1392  0138  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1393  0139  0084               	movwf	4
  1394  013A  1383               	bcf	3,7	;select IRP bank1
  1395  013B  0800               	movf	0,w
  1396  013C  00BB               	movwf	??_main+1
  1397  013D  0A84               	incf	4,f
  1398  013E  0800               	movf	0,w
  1399  013F  00BC               	movwf	??_main+2
  1400  0140  1283               	bcf	3,5	;RP0=0, select bank2
  1401  0141  1703               	bsf	3,6	;RP1=1, select bank2
  1402  0142  0859               	movf	main@colorId^(0+256),w
  1403  0143  1283               	bcf	3,5	;RP0=0, select bank0
  1404  0144  1303               	bcf	3,6	;RP1=0, select bank0
  1405  0145  00BD               	movwf	??_main+3
  1406  0146  073D               	addwf	??_main+3,w
  1407  0147  073B               	addwf	??_main+1,w
  1408  0148  00BE               	movwf	??_main+4
  1409  0149  083C               	movf	??_main+2,w
  1410  014A  1803               	skipnc
  1411  014B  3E01               	addlw	1
  1412  014C  00BF               	movwf	??_main+5
  1413  014D  083E               	movf	??_main+4,w
  1414  014E  0084               	movwf	4
  1415  014F  1783               	bsf	3,7
  1416  0150  1C3F               	btfss	??_main+5,0
  1417  0151  1383               	bcf	3,7
  1418  0152  0874               	movf	?_GetTime,w
  1419  0153  0080               	movwf	0
  1420  0154  0A84               	incf	4,f
  1421  0155  0875               	movf	?_GetTime+1,w
  1422  0156  0080               	movwf	0
  1423  0157                     l3001:	
  1424                           
  1425                           ;main.c: 221:                 }
  1426  0157  3001               	movlw	1
  1427  0158  00BA               	movwf	??_main
  1428  0159  083A               	movf	??_main,w
  1429  015A  1283               	bcf	3,5	;RP0=0, select bank2
  1430  015B  1703               	bsf	3,6	;RP1=1, select bank2
  1431  015C  07E3               	addwf	main@i^(0+256),f
  1432  015D  28DA               	goto	l2985
  1433  015E                     l220:	
  1434                           ;main.c: 223:         }
  1435                           
  1436                           
  1437                           ;main.c: 227:         if(endCiclo.Bit)
  1438  015E  1283               	bcf	3,5	;RP0=0, select bank2
  1439  015F  1703               	bsf	3,6	;RP1=1, select bank2
  1440  0160  1C5D               	btfss	main@endCiclo^(0+256),0
  1441  0161  2963               	goto	u3031
  1442  0162  2964               	goto	u3030
  1443  0163                     u3031:	
  1444  0163  2A55               	goto	l225
  1445  0164                     u3030:	
  1446  0164                     l3005:	
  1447                           
  1448                           ;main.c: 228:         {;main.c: 230:             for(unsigned char l=0; l<16; l++)
  1449  0164  01E8               	clrf	main@l^(0+256)
  1450  0165                     l3007:	
  1451  0165  3010               	movlw	16
  1452  0166  0268               	subwf	main@l^(0+256),w
  1453  0167  1C03               	skipc
  1454  0168  296A               	goto	u3041
  1455  0169  296B               	goto	u3040
  1456  016A                     u3041:	
  1457  016A  296C               	goto	l3011
  1458  016B                     u3040:	
  1459  016B  2A26               	goto	l3029
  1460  016C                     l3011:	
  1461                           
  1462                           ;main.c: 231:             {;main.c: 232:                 for(unsigned char i=0; i<3; i++
      +                          )
  1463  016C  01E9               	clrf	main@i_444^(0+256)
  1464  016D                     l3013:	
  1465  016D  3003               	movlw	3
  1466  016E  0269               	subwf	main@i_444^(0+256),w
  1467  016F  1C03               	skipc
  1468  0170  2972               	goto	u3051
  1469  0171  2973               	goto	u3050
  1470  0172                     u3051:	
  1471  0172  2974               	goto	l3017
  1472  0173                     u3050:	
  1473  0173  2A1D               	goto	l3025
  1474  0174                     l3017:	
  1475                           
  1476                           ;main.c: 233:                 {;main.c: 234:                     if((*(Semafori[l])).tim
      +                          es[i]!=(*(Semafori[l])).new_times[i])
  1477  0174  0868               	movf	main@l^(0+256),w
  1478  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1479  0176  1303               	bcf	3,6	;RP1=0, select bank0
  1480  0177  00BA               	movwf	??_main
  1481  0178  073A               	addwf	??_main,w
  1482  0179  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1483  017A  0084               	movwf	4
  1484  017B  1383               	bcf	3,7	;select IRP bank1
  1485  017C  0800               	movf	0,w
  1486  017D  00BB               	movwf	??_main+1
  1487  017E  0A84               	incf	4,f
  1488  017F  0800               	movf	0,w
  1489  0180  00BC               	movwf	??_main+2
  1490  0181  1283               	bcf	3,5	;RP0=0, select bank2
  1491  0182  1703               	bsf	3,6	;RP1=1, select bank2
  1492  0183  0869               	movf	main@i_444^(0+256),w
  1493  0184  1283               	bcf	3,5	;RP0=0, select bank0
  1494  0185  1303               	bcf	3,6	;RP1=0, select bank0
  1495  0186  00BD               	movwf	??_main+3
  1496  0187  073D               	addwf	??_main+3,w
  1497  0188  073B               	addwf	??_main+1,w
  1498  0189  00BE               	movwf	??_main+4
  1499  018A  083C               	movf	??_main+2,w
  1500  018B  1803               	skipnc
  1501  018C  3E01               	addlw	1
  1502  018D  00BF               	movwf	??_main+5
  1503  018E  083E               	movf	??_main+4,w
  1504  018F  0084               	movwf	4
  1505  0190  1783               	bsf	3,7
  1506  0191  1C3F               	btfss	??_main+5,0
  1507  0192  1383               	bcf	3,7
  1508  0193  0800               	movf	0,w
  1509  0194  00C0               	movwf	??_main+6
  1510  0195  0A84               	incf	4,f
  1511  0196  0800               	movf	0,w
  1512  0197  00C1               	movwf	??_main+7
  1513  0198  1283               	bcf	3,5	;RP0=0, select bank2
  1514  0199  1703               	bsf	3,6	;RP1=1, select bank2
  1515  019A  0868               	movf	main@l^(0+256),w
  1516  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1517  019C  1303               	bcf	3,6	;RP1=0, select bank0
  1518  019D  00C2               	movwf	??_main+8
  1519  019E  0742               	addwf	??_main+8,w
  1520  019F  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1521  01A0  0084               	movwf	4
  1522  01A1  1383               	bcf	3,7	;select IRP bank1
  1523  01A2  0800               	movf	0,w
  1524  01A3  00C3               	movwf	??_main+9
  1525  01A4  0A84               	incf	4,f
  1526  01A5  0800               	movf	0,w
  1527  01A6  00C4               	movwf	??_main+10
  1528  01A7  1283               	bcf	3,5	;RP0=0, select bank2
  1529  01A8  1703               	bsf	3,6	;RP1=1, select bank2
  1530  01A9  0869               	movf	main@i_444^(0+256),w
  1531  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1532  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1533  01AC  00C5               	movwf	??_main+11
  1534  01AD  0745               	addwf	??_main+11,w
  1535  01AE  3E06               	addlw	6
  1536  01AF  0743               	addwf	??_main+9,w
  1537  01B0  00C6               	movwf	??_main+12
  1538  01B1  0844               	movf	??_main+10,w
  1539  01B2  1803               	skipnc
  1540  01B3  3E01               	addlw	1
  1541  01B4  00C7               	movwf	??_main+13
  1542  01B5  0846               	movf	??_main+12,w
  1543  01B6  0084               	movwf	4
  1544  01B7  1783               	bsf	3,7
  1545  01B8  1C47               	btfss	??_main+13,0
  1546  01B9  1383               	bcf	3,7
  1547  01BA  0800               	movf	0,w
  1548  01BB  00C8               	movwf	??_main+14
  1549  01BC  0A84               	incf	4,f
  1550  01BD  0800               	movf	0,w
  1551  01BE  00C9               	movwf	??_main+15
  1552  01BF  0841               	movf	??_main+7,w
  1553  01C0  0649               	xorwf	??_main+15,w
  1554  01C1  1D03               	skipz
  1555  01C2  29C5               	goto	u3065
  1556  01C3  0840               	movf	??_main+6,w
  1557  01C4  0648               	xorwf	??_main+14,w
  1558  01C5                     u3065:	
  1559  01C5  1903               	skipnz
  1560  01C6  29C8               	goto	u3061
  1561  01C7  29C9               	goto	u3060
  1562  01C8                     u3061:	
  1563  01C8  2A16               	goto	l3021
  1564  01C9                     u3060:	
  1565  01C9                     l3019:	
  1566                           
  1567                           ;main.c: 235:                     {;main.c: 236:                         (*(Semafori[l])
      +                          ).times[i]=(*(Semafori[l])).new_times[i];
  1568  01C9  1283               	bcf	3,5	;RP0=0, select bank2
  1569  01CA  1703               	bsf	3,6	;RP1=1, select bank2
  1570  01CB  0868               	movf	main@l^(0+256),w
  1571  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1572  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1573  01CE  00BA               	movwf	??_main
  1574  01CF  073A               	addwf	??_main,w
  1575  01D0  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1576  01D1  0084               	movwf	4
  1577  01D2  1383               	bcf	3,7	;select IRP bank1
  1578  01D3  0800               	movf	0,w
  1579  01D4  00BB               	movwf	??_main+1
  1580  01D5  0A84               	incf	4,f
  1581  01D6  0800               	movf	0,w
  1582  01D7  00BC               	movwf	??_main+2
  1583  01D8  1283               	bcf	3,5	;RP0=0, select bank2
  1584  01D9  1703               	bsf	3,6	;RP1=1, select bank2
  1585  01DA  0869               	movf	main@i_444^(0+256),w
  1586  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1587  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1588  01DD  00BD               	movwf	??_main+3
  1589  01DE  073D               	addwf	??_main+3,w
  1590  01DF  073B               	addwf	??_main+1,w
  1591  01E0  00BE               	movwf	??_main+4
  1592  01E1  083C               	movf	??_main+2,w
  1593  01E2  1803               	skipnc
  1594  01E3  3E01               	addlw	1
  1595  01E4  00BF               	movwf	??_main+5
  1596  01E5  083E               	movf	??_main+4,w
  1597  01E6  0084               	movwf	4
  1598  01E7  1783               	bsf	3,7
  1599  01E8  1C3F               	btfss	??_main+5,0
  1600  01E9  1383               	bcf	3,7
  1601  01EA  0800               	movf	0,w
  1602  01EB  00C0               	movwf	??_main+6
  1603  01EC  0A84               	incf	4,f
  1604  01ED  0800               	movf	0,w
  1605  01EE  00C1               	movwf	??_main+7
  1606  01EF  1283               	bcf	3,5	;RP0=0, select bank2
  1607  01F0  1703               	bsf	3,6	;RP1=1, select bank2
  1608  01F1  0868               	movf	main@l^(0+256),w
  1609  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1610  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1611  01F4  00C2               	movwf	??_main+8
  1612  01F5  0742               	addwf	??_main+8,w
  1613  01F6  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1614  01F7  0084               	movwf	4
  1615  01F8  1383               	bcf	3,7	;select IRP bank1
  1616  01F9  0800               	movf	0,w
  1617  01FA  00C3               	movwf	??_main+9
  1618  01FB  0A84               	incf	4,f
  1619  01FC  0800               	movf	0,w
  1620  01FD  00C4               	movwf	??_main+10
  1621  01FE  1283               	bcf	3,5	;RP0=0, select bank2
  1622  01FF  1703               	bsf	3,6	;RP1=1, select bank2
  1623  0200  0869               	movf	main@i_444^(0+256),w
  1624  0201  1283               	bcf	3,5	;RP0=0, select bank0
  1625  0202  1303               	bcf	3,6	;RP1=0, select bank0
  1626  0203  00C5               	movwf	??_main+11
  1627  0204  0745               	addwf	??_main+11,w
  1628  0205  3E06               	addlw	6
  1629  0206  0743               	addwf	??_main+9,w
  1630  0207  00C6               	movwf	??_main+12
  1631  0208  0844               	movf	??_main+10,w
  1632  0209  1803               	skipnc
  1633  020A  3E01               	addlw	1
  1634  020B  00C7               	movwf	??_main+13
  1635  020C  0846               	movf	??_main+12,w
  1636  020D  0084               	movwf	4
  1637  020E  1783               	bsf	3,7
  1638  020F  1C47               	btfss	??_main+13,0
  1639  0210  1383               	bcf	3,7
  1640  0211  0840               	movf	??_main+6,w
  1641  0212  0080               	movwf	0
  1642  0213  0A84               	incf	4,f
  1643  0214  0841               	movf	??_main+7,w
  1644  0215  0080               	movwf	0
  1645  0216                     l3021:	
  1646                           
  1647                           ;main.c: 238:                 }
  1648  0216  3001               	movlw	1
  1649  0217  00BA               	movwf	??_main
  1650  0218  083A               	movf	??_main,w
  1651  0219  1283               	bcf	3,5	;RP0=0, select bank2
  1652  021A  1703               	bsf	3,6	;RP1=1, select bank2
  1653  021B  07E9               	addwf	main@i_444^(0+256),f
  1654  021C  296D               	goto	l3013
  1655  021D                     l3025:	
  1656                           
  1657                           ;main.c: 239:             }
  1658  021D  3001               	movlw	1
  1659  021E  1283               	bcf	3,5	;RP0=0, select bank0
  1660  021F  1303               	bcf	3,6	;RP1=0, select bank0
  1661  0220  00BA               	movwf	??_main
  1662  0221  083A               	movf	??_main,w
  1663  0222  1283               	bcf	3,5	;RP0=0, select bank2
  1664  0223  1703               	bsf	3,6	;RP1=1, select bank2
  1665  0224  07E8               	addwf	main@l^(0+256),f
  1666  0225  2965               	goto	l3007
  1667  0226                     l3029:	
  1668                           
  1669                           ;main.c: 244:             {;main.c: 245:                 n_semafori=(n_semafori+1)%16;
  1670  0226  1303               	bcf	3,6	;RP1=0, select bank0
  1671  0227  0864               	movf	_n_semafori,w
  1672  0228  3E01               	addlw	1
  1673  0229  390F               	andlw	15
  1674  022A  00BA               	movwf	??_main
  1675  022B  083A               	movf	??_main,w
  1676  022C  00E4               	movwf	_n_semafori
  1677  022D                     l3031:	
  1678                           
  1679                           ;main.c: 246:             }while((*(Semafori[n_semafori])).times[0]==0 && n_semafori>0);
  1680  022D  0864               	movf	_n_semafori,w
  1681  022E  00BA               	movwf	??_main
  1682  022F  073A               	addwf	??_main,w
  1683  0230  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1684  0231  0084               	movwf	4
  1685  0232  1383               	bcf	3,7	;select IRP bank1
  1686  0233  0800               	movf	0,w
  1687  0234  00BB               	movwf	??_main+1
  1688  0235  0A84               	incf	4,f
  1689  0236  0800               	movf	0,w
  1690  0237  00BC               	movwf	??_main+2
  1691  0238  083B               	movf	??_main+1,w
  1692  0239  3E06               	addlw	6
  1693  023A  00BD               	movwf	??_main+3
  1694  023B  083C               	movf	??_main+2,w
  1695  023C  1803               	skipnc
  1696  023D  3E01               	addlw	1
  1697  023E  3E00               	addlw	0
  1698  023F  00BE               	movwf	??_main+4
  1699  0240  083D               	movf	??_main+3,w
  1700  0241  0084               	movwf	4
  1701  0242  1783               	bsf	3,7
  1702  0243  1C3E               	btfss	??_main+4,0
  1703  0244  1383               	bcf	3,7
  1704  0245  0800               	movf	0,w
  1705  0246  00BF               	movwf	??_main+5
  1706  0247  0A84               	incf	4,f
  1707  0248  0800               	movf	0,w
  1708  0249  00C0               	movwf	??_main+6
  1709  024A  083F               	movf	??_main+5,w
  1710  024B  0440               	iorwf	??_main+6,w
  1711  024C  1D03               	btfss	3,2
  1712  024D  2A4F               	goto	u3071
  1713  024E  2A50               	goto	u3070
  1714  024F                     u3071:	
  1715  024F  2A55               	goto	l225
  1716  0250                     u3070:	
  1717  0250                     l3033:	
  1718  0250  0864               	movf	_n_semafori,w
  1719  0251  1D03               	btfss	3,2
  1720  0252  2A54               	goto	u3081
  1721  0253  2A55               	goto	u3080
  1722  0254                     u3081:	
  1723  0254  2A26               	goto	l3029
  1724  0255                     u3080:	
  1725  0255                     l225:	
  1726                           ;main.c: 247:         }
  1727                           
  1728                           
  1729                           ;main.c: 251:         if (secondPassed.Bit && cycled.Bit)
  1730  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1731  0256  1C61               	btfss	_secondPassed,0
  1732  0257  2A59               	goto	u3091
  1733  0258  2A5A               	goto	u3090
  1734  0259                     u3091:	
  1735  0259  2B1B               	goto	l3053
  1736  025A                     u3090:	
  1737  025A                     l3035:	
  1738  025A  1C60               	btfss	_cycled,0
  1739  025B  2A5D               	goto	u3101
  1740  025C  2A5E               	goto	u3100
  1741  025D                     u3101:	
  1742  025D  2B1B               	goto	l3053
  1743  025E                     u3100:	
  1744  025E                     l3037:	
  1745                           
  1746                           ;main.c: 252:         {;main.c: 253:             time++;
  1747  025E  3001               	movlw	1
  1748  025F  1283               	bcf	3,5	;RP0=0, select bank2
  1749  0260  1703               	bsf	3,6	;RP1=1, select bank2
  1750  0261  07DF               	addwf	main@time^(0+256),f
  1751  0262  1803               	skipnc
  1752  0263  0AE0               	incf	(main@time+1)^(0+256),f
  1753  0264  3000               	movlw	0
  1754  0265  07E0               	addwf	(main@time+1)^(0+256),f
  1755  0266                     l3039:	
  1756                           
  1757                           ;main.c: 254:             endCiclo.Bit=0;
  1758  0266  105D               	bcf	main@endCiclo^(0+256),0
  1759  0267                     l3041:	
  1760                           
  1761                           ;main.c: 256:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  1762  0267  1283               	bcf	3,5	;RP0=0, select bank0
  1763  0268  1303               	bcf	3,6	;RP1=0, select bank0
  1764  0269  0864               	movf	_n_semafori,w
  1765  026A  00BA               	movwf	??_main
  1766  026B  073A               	addwf	??_main,w
  1767  026C  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1768  026D  0084               	movwf	4
  1769  026E  1383               	bcf	3,7	;select IRP bank1
  1770  026F  0800               	movf	0,w
  1771  0270  00BB               	movwf	??_main+1
  1772  0271  0A84               	incf	4,f
  1773  0272  0800               	movf	0,w
  1774  0273  00BC               	movwf	??_main+2
  1775  0274  1283               	bcf	3,5	;RP0=0, select bank2
  1776  0275  1703               	bsf	3,6	;RP1=1, select bank2
  1777  0276  0861               	movf	main@lux_select^(0+256),w
  1778  0277  1283               	bcf	3,5	;RP0=0, select bank0
  1779  0278  1303               	bcf	3,6	;RP1=0, select bank0
  1780  0279  00BD               	movwf	??_main+3
  1781  027A  073D               	addwf	??_main+3,w
  1782  027B  3E06               	addlw	6
  1783  027C  073B               	addwf	??_main+1,w
  1784  027D  00BE               	movwf	??_main+4
  1785  027E  083C               	movf	??_main+2,w
  1786  027F  1803               	skipnc
  1787  0280  3E01               	addlw	1
  1788  0281  00BF               	movwf	??_main+5
  1789  0282  083E               	movf	??_main+4,w
  1790  0283  0084               	movwf	4
  1791  0284  1783               	bsf	3,7
  1792  0285  1C3F               	btfss	??_main+5,0
  1793  0286  1383               	bcf	3,7
  1794  0287  0800               	movf	0,w
  1795  0288  00C0               	movwf	??_main+6
  1796  0289  0A84               	incf	4,f
  1797  028A  0800               	movf	0,w
  1798  028B  00C1               	movwf	??_main+7
  1799  028C  1283               	bcf	3,5	;RP0=0, select bank2
  1800  028D  1703               	bsf	3,6	;RP1=1, select bank2
  1801  028E  085F               	movf	main@time^(0+256),w
  1802  028F  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0290  1303               	bcf	3,6	;RP1=0, select bank0
  1804  0291  0240               	subwf	??_main+6,w
  1805  0292  00C2               	movwf	??_main+8
  1806  0293  1283               	bcf	3,5	;RP0=0, select bank2
  1807  0294  1703               	bsf	3,6	;RP1=1, select bank2
  1808  0295  0860               	movf	(main@time+1)^(0+256),w
  1809  0296  1C03               	skipc
  1810  0297  0A60               	incf	(main@time+1)^(0+256),w
  1811  0298  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0299  1303               	bcf	3,6	;RP1=0, select bank0
  1813  029A  0241               	subwf	??_main+7,w
  1814  029B  00C3               	movwf	??_main+9
  1815  029C  1FC3               	btfss	??_main+9,7
  1816  029D  2A9F               	goto	u3111
  1817  029E  2AA0               	goto	u3110
  1818  029F                     u3111:	
  1819  029F  2AA3               	goto	l3045
  1820  02A0                     u3110:	
  1821  02A0                     l3043:	
  1822                           
  1823                           ;main.c: 257:             {;main.c: 258:                 endCiclo.Bit = 1;
  1824  02A0  1283               	bcf	3,5	;RP0=0, select bank2
  1825  02A1  1703               	bsf	3,6	;RP1=1, select bank2
  1826  02A2  145D               	bsf	main@endCiclo^(0+256),0
  1827  02A3                     l3045:	
  1828                           
  1829                           ;main.c: 262:             if(lux_select==2 && time>=(*Semafori[n_semafori]).times[2])
  1830  02A3  3002               	movlw	2
  1831  02A4  1283               	bcf	3,5	;RP0=0, select bank2
  1832  02A5  1703               	bsf	3,6	;RP1=1, select bank2
  1833  02A6  0661               	xorwf	main@lux_select^(0+256),w
  1834  02A7  1D03               	btfss	3,2
  1835  02A8  2AAA               	goto	u3121
  1836  02A9  2AAB               	goto	u3120
  1837  02AA                     u3121:	
  1838  02AA  2AE1               	goto	l3051
  1839  02AB                     u3120:	
  1840  02AB                     l3047:	
  1841  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  1842  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  1843  02AD  0864               	movf	_n_semafori,w
  1844  02AE  00BA               	movwf	??_main
  1845  02AF  073A               	addwf	??_main,w
  1846  02B0  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1847  02B1  0084               	movwf	4
  1848  02B2  1383               	bcf	3,7	;select IRP bank1
  1849  02B3  0800               	movf	0,w
  1850  02B4  00BB               	movwf	??_main+1
  1851  02B5  0A84               	incf	4,f
  1852  02B6  0800               	movf	0,w
  1853  02B7  00BC               	movwf	??_main+2
  1854  02B8  083B               	movf	??_main+1,w
  1855  02B9  3E0A               	addlw	10
  1856  02BA  00BD               	movwf	??_main+3
  1857  02BB  083C               	movf	??_main+2,w
  1858  02BC  1803               	skipnc
  1859  02BD  3E01               	addlw	1
  1860  02BE  3E00               	addlw	0
  1861  02BF  00BE               	movwf	??_main+4
  1862  02C0  083D               	movf	??_main+3,w
  1863  02C1  0084               	movwf	4
  1864  02C2  1783               	bsf	3,7
  1865  02C3  1C3E               	btfss	??_main+4,0
  1866  02C4  1383               	bcf	3,7
  1867  02C5  0800               	movf	0,w
  1868  02C6  00BF               	movwf	??_main+5
  1869  02C7  0A84               	incf	4,f
  1870  02C8  0800               	movf	0,w
  1871  02C9  00C0               	movwf	??_main+6
  1872  02CA  1283               	bcf	3,5	;RP0=0, select bank2
  1873  02CB  1703               	bsf	3,6	;RP1=1, select bank2
  1874  02CC  0860               	movf	(main@time+1)^(0+256),w
  1875  02CD  3A80               	xorlw	128
  1876  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1877  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  1878  02D0  00C1               	movwf	??_main+7
  1879  02D1  0840               	movf	??_main+6,w
  1880  02D2  3A80               	xorlw	128
  1881  02D3  0241               	subwf	??_main+7,w
  1882  02D4  1D03               	skipz
  1883  02D5  2ADA               	goto	u3135
  1884  02D6  083F               	movf	??_main+5,w
  1885  02D7  1283               	bcf	3,5	;RP0=0, select bank2
  1886  02D8  1703               	bsf	3,6	;RP1=1, select bank2
  1887  02D9  025F               	subwf	main@time^(0+256),w
  1888  02DA                     u3135:	
  1889  02DA  1C03               	skipc
  1890  02DB  2ADD               	goto	u3131
  1891  02DC  2ADE               	goto	u3130
  1892  02DD                     u3131:	
  1893  02DD  2AE1               	goto	l3051
  1894  02DE                     u3130:	
  1895  02DE                     l3049:	
  1896                           
  1897                           ;main.c: 263:             {;main.c: 264:                 endCiclo.Bit=1;
  1898  02DE  1283               	bcf	3,5	;RP0=0, select bank2
  1899  02DF  1703               	bsf	3,6	;RP1=1, select bank2
  1900  02E0  145D               	bsf	main@endCiclo^(0+256),0
  1901  02E1                     l3051:	
  1902                           
  1903                           ;main.c: 267:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  1904  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  1905  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  1906  02E3  0864               	movf	_n_semafori,w
  1907  02E4  00BA               	movwf	??_main
  1908  02E5  073A               	addwf	??_main,w
  1909  02E6  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1910  02E7  0084               	movwf	4
  1911  02E8  1383               	bcf	3,7	;select IRP bank1
  1912  02E9  0800               	movf	0,w
  1913  02EA  00BB               	movwf	??_main+1
  1914  02EB  0A84               	incf	4,f
  1915  02EC  0800               	movf	0,w
  1916  02ED  00BC               	movwf	??_main+2
  1917  02EE  1283               	bcf	3,5	;RP0=0, select bank2
  1918  02EF  1703               	bsf	3,6	;RP1=1, select bank2
  1919  02F0  0861               	movf	main@lux_select^(0+256),w
  1920  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  1921  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  1922  02F3  00BD               	movwf	??_main+3
  1923  02F4  073D               	addwf	??_main+3,w
  1924  02F5  3E06               	addlw	6
  1925  02F6  073B               	addwf	??_main+1,w
  1926  02F7  00BE               	movwf	??_main+4
  1927  02F8  083C               	movf	??_main+2,w
  1928  02F9  1803               	skipnc
  1929  02FA  3E01               	addlw	1
  1930  02FB  00BF               	movwf	??_main+5
  1931  02FC  083E               	movf	??_main+4,w
  1932  02FD  0084               	movwf	4
  1933  02FE  1783               	bsf	3,7
  1934  02FF  1C3F               	btfss	??_main+5,0
  1935  0300  1383               	bcf	3,7
  1936  0301  0800               	movf	0,w
  1937  0302  00C0               	movwf	??_main+6
  1938  0303  0A84               	incf	4,f
  1939  0304  0800               	movf	0,w
  1940  0305  00C1               	movwf	??_main+7
  1941  0306  1283               	bcf	3,5	;RP0=0, select bank2
  1942  0307  1703               	bsf	3,6	;RP1=1, select bank2
  1943  0308  085F               	movf	main@time^(0+256),w
  1944  0309  1283               	bcf	3,5	;RP0=0, select bank0
  1945  030A  1303               	bcf	3,6	;RP1=0, select bank0
  1946  030B  0240               	subwf	??_main+6,w
  1947  030C  00AD               	movwf	GetDigits@Time
  1948  030D  1283               	bcf	3,5	;RP0=0, select bank2
  1949  030E  1703               	bsf	3,6	;RP1=1, select bank2
  1950  030F  0860               	movf	(main@time+1)^(0+256),w
  1951  0310  1C03               	skipc
  1952  0311  0A60               	incf	(main@time+1)^(0+256),w
  1953  0312  1283               	bcf	3,5	;RP0=0, select bank0
  1954  0313  1303               	bcf	3,6	;RP1=0, select bank0
  1955  0314  0241               	subwf	??_main+7,w
  1956  0315  00AE               	movwf	GetDigits@Time+1
  1957  0316  120A  158A  270B  120A  118A  	fcall	_GetDigits
  1958  031B                     l3053:	
  1959                           
  1960                           ;main.c: 272:         if (disp != old_disp)
  1961  031B  1283               	bcf	3,5	;RP0=0, select bank0
  1962  031C  1303               	bcf	3,6	;RP1=0, select bank0
  1963  031D  085B               	movf	_disp,w
  1964  031E  065C               	xorwf	_old_disp,w
  1965  031F  1903               	skipnz
  1966  0320  2B22               	goto	u3141
  1967  0321  2B23               	goto	u3140
  1968  0322                     u3141:	
  1969  0322  2B9F               	goto	l3075
  1970  0323                     u3140:	
  1971  0323                     l3055:	
  1972                           
  1973                           ;main.c: 273:         {;main.c: 274:             old_disp = disp;
  1974  0323  085B               	movf	_disp,w
  1975  0324  00BA               	movwf	??_main
  1976  0325  083A               	movf	??_main,w
  1977  0326  00DC               	movwf	_old_disp
  1978                           
  1979                           ;main.c: 275:             switch (disp)
  1980  0327  2B89               	goto	l3073
  1981  0328                     l3057:	
  1982                           
  1983                           ;main.c: 278:                 if (centinaia > 0)
  1984  0328  085D               	movf	_centinaia,w
  1985  0329  1903               	btfsc	3,2
  1986  032A  2B2C               	goto	u3151
  1987  032B  2B2D               	goto	u3150
  1988  032C                     u3151:	
  1989  032C  2B9F               	goto	l3075
  1990  032D                     u3150:	
  1991  032D                     l3059:	
  1992                           
  1993                           ;main.c: 279:                 {;main.c: 280:                     SetDisplay(1,0,0,displa
      +                          y[centinaia]);
  1994  032D  01F4               	clrf	SetDisplay@d2
  1995  032E  01F5               	clrf	SetDisplay@d3
  1996  032F  085D               	movf	_centinaia,w
  1997  0330  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  1998  0331  0084               	movwf	4
  1999  0332  120A  158A  2000  120A  118A  	fcall	stringdir
  2000  0337  00BA               	movwf	??_main
  2001  0338  083A               	movf	??_main,w
  2002  0339  00F6               	movwf	SetDisplay@value
  2003  033A  3001               	movlw	1
  2004  033B  120A  158A  245A  120A  118A  	fcall	_SetDisplay
  2005  0340  2B9F               	goto	l3075
  2006  0341                     l3061:	
  2007                           
  2008                           ;main.c: 284:                 if (decine > 0 || centinaia > 0)
  2009  0341  085E               	movf	_decine,w
  2010  0342  1D03               	btfss	3,2
  2011  0343  2B45               	goto	u3161
  2012  0344  2B46               	goto	u3160
  2013  0345                     u3161:	
  2014  0345  2B4B               	goto	l3065
  2015  0346                     u3160:	
  2016  0346                     l3063:	
  2017  0346  085D               	movf	_centinaia,w
  2018  0347  1903               	btfsc	3,2
  2019  0348  2B4A               	goto	u3171
  2020  0349  2B4B               	goto	u3170
  2021  034A                     u3171:	
  2022  034A  2B9F               	goto	l3075
  2023  034B                     u3170:	
  2024  034B                     l3065:	
  2025                           
  2026                           ;main.c: 285:                 {;main.c: 286:                     SetDisplay(0,1,0,displa
      +                          y[decine]);
  2027  034B  01F4               	clrf	SetDisplay@d2
  2028  034C  0AF4               	incf	SetDisplay@d2,f
  2029  034D  01F5               	clrf	SetDisplay@d3
  2030  034E  085E               	movf	_decine,w
  2031  034F  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2032  0350  0084               	movwf	4
  2033  0351  120A  158A  2000  120A  118A  	fcall	stringdir
  2034  0356  00BA               	movwf	??_main
  2035  0357  083A               	movf	??_main,w
  2036  0358  00F6               	movwf	SetDisplay@value
  2037  0359  3000               	movlw	0
  2038  035A  120A  158A  245A  120A  118A  	fcall	_SetDisplay
  2039  035F  2B9F               	goto	l3075
  2040  0360                     l3067:	
  2041                           
  2042                           ;main.c: 290:                 SetDisplay(0,0,1,display[unita]);
  2043  0360  01F4               	clrf	SetDisplay@d2
  2044  0361  01F5               	clrf	SetDisplay@d3
  2045  0362  0AF5               	incf	SetDisplay@d3,f
  2046  0363  085F               	movf	_unita,w
  2047  0364  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2048  0365  0084               	movwf	4
  2049  0366  120A  158A  2000  120A  118A  	fcall	stringdir
  2050  036B  00BA               	movwf	??_main
  2051  036C  083A               	movf	??_main,w
  2052  036D  00F6               	movwf	SetDisplay@value
  2053  036E  3000               	movlw	0
  2054  036F  120A  158A  245A  120A  118A  	fcall	_SetDisplay
  2055                           
  2056                           ;main.c: 291:                 break;
  2057  0374  2B9F               	goto	l3075
  2058  0375                     l3069:	
  2059                           
  2060                           ;main.c: 293:                 SetDisplay(1,0,0,display[n_semafori]);
  2061  0375  01F4               	clrf	SetDisplay@d2
  2062  0376  01F5               	clrf	SetDisplay@d3
  2063  0377  0864               	movf	_n_semafori,w
  2064  0378  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2065  0379  0084               	movwf	4
  2066  037A  120A  158A  2000  120A  118A  	fcall	stringdir
  2067  037F  00BA               	movwf	??_main
  2068  0380  083A               	movf	??_main,w
  2069  0381  00F6               	movwf	SetDisplay@value
  2070  0382  3001               	movlw	1
  2071  0383  120A  158A  245A  120A  118A  	fcall	_SetDisplay
  2072                           
  2073                           ;main.c: 294:                 break;
  2074  0388  2B9F               	goto	l3075
  2075  0389                     l3073:	
  2076  0389  085B               	movf	_disp,w
  2077  038A  00BA               	movwf	??_main
  2078  038B  01BB               	clrf	??_main+1
  2079                           
  2080                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2081                           ; Switch size 1, requested type "simple"
  2082                           ; Number of cases is 1, Range of values is 0 to 0
  2083                           ; switch strategies available:
  2084                           ; Name         Instructions Cycles
  2085                           ; simple_byte            4     3 (average)
  2086                           ; direct_byte           11     8 (fixed)
  2087                           ; jumptable            260     6 (fixed)
  2088                           ;	Chosen strategy is simple_byte
  2089  038C  083B               	movf	??_main+1,w
  2090  038D  3A00               	xorlw	0	; case 0
  2091  038E  1903               	skipnz
  2092  038F  2B91               	goto	l3241
  2093  0390  2B9F               	goto	l3075
  2094  0391                     l3241:	
  2095                           
  2096                           ; Switch size 1, requested type "simple"
  2097                           ; Number of cases is 4, Range of values is 0 to 3
  2098                           ; switch strategies available:
  2099                           ; Name         Instructions Cycles
  2100                           ; simple_byte           13     7 (average)
  2101                           ; direct_byte           20     8 (fixed)
  2102                           ; jumptable            260     6 (fixed)
  2103                           ;	Chosen strategy is simple_byte
  2104  0391  083A               	movf	??_main,w
  2105  0392  3A00               	xorlw	0	; case 0
  2106  0393  1903               	skipnz
  2107  0394  2B28               	goto	l3057
  2108  0395  3A01               	xorlw	1	; case 1
  2109  0396  1903               	skipnz
  2110  0397  2B41               	goto	l3061
  2111  0398  3A03               	xorlw	3	; case 2
  2112  0399  1903               	skipnz
  2113  039A  2B60               	goto	l3067
  2114  039B  3A01               	xorlw	1	; case 3
  2115  039C  1903               	skipnz
  2116  039D  2B75               	goto	l3069
  2117  039E  2B9F               	goto	l3075
  2118  039F                     l3075:	
  2119                           
  2120                           ;main.c: 297:         disp = (disp + 1) % 3;
  2121  039F  3003               	movlw	3
  2122  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  2123  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  2124  03A2  00A0               	movwf	___awmod@divisor
  2125  03A3  3000               	movlw	0
  2126  03A4  00A1               	movwf	___awmod@divisor+1
  2127  03A5  085B               	movf	_disp,w
  2128  03A6  3E01               	addlw	1
  2129  03A7  00A2               	movwf	___awmod@dividend
  2130  03A8  3000               	movlw	0
  2131  03A9  1803               	skipnc
  2132  03AA  3001               	movlw	1
  2133  03AB  00A3               	movwf	___awmod@dividend+1
  2134  03AC  120A  158A  25E4  120A  118A  	fcall	___awmod
  2135  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  2136  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  2137  03B3  0820               	movf	?___awmod,w
  2138  03B4  00BA               	movwf	??_main
  2139  03B5  083A               	movf	??_main,w
  2140  03B6  00DB               	movwf	_disp
  2141  03B7                     l3077:	
  2142                           
  2143                           ;main.c: 305:         if(secondPassed.Bit && cycled.Bit)
  2144  03B7  1C61               	btfss	_secondPassed,0
  2145  03B8  2BBA               	goto	u3181
  2146  03B9  2BBB               	goto	u3180
  2147  03BA                     u3181:	
  2148  03BA  2BC1               	goto	l249
  2149  03BB                     u3180:	
  2150  03BB                     l3079:	
  2151  03BB  1C60               	btfss	_cycled,0
  2152  03BC  2BBE               	goto	u3191
  2153  03BD  2BBF               	goto	u3190
  2154  03BE                     u3191:	
  2155  03BE  2BC1               	goto	l249
  2156  03BF                     u3190:	
  2157  03BF                     l3081:	
  2158                           
  2159                           ;main.c: 306:         {;main.c: 307:             secondPassed.Bit = 0;
  2160  03BF  1061               	bcf	_secondPassed,0
  2161                           
  2162                           ;main.c: 308:             cycled.Bit=0;
  2163  03C0  1060               	bcf	_cycled,0
  2164  03C1                     l249:	
  2165                           ;main.c: 309:         }
  2166                           
  2167                           
  2168                           ;main.c: 311:         if(secondPassed.Bit && !cycled.Bit)
  2169  03C1  1C61               	btfss	_secondPassed,0
  2170  03C2  2BC4               	goto	u3201
  2171  03C3  2BC5               	goto	u3200
  2172  03C4                     u3201:	
  2173  03C4  2BCA               	goto	l3087
  2174  03C5                     u3200:	
  2175  03C5                     l3083:	
  2176  03C5  1860               	btfsc	_cycled,0
  2177  03C6  2BC8               	goto	u3211
  2178  03C7  2BC9               	goto	u3210
  2179  03C8                     u3211:	
  2180  03C8  2BCA               	goto	l3087
  2181  03C9                     u3210:	
  2182  03C9                     l3085:	
  2183                           
  2184                           ;main.c: 312:         {;main.c: 313:             cycled.Bit=1;
  2185  03C9  1460               	bsf	_cycled,0
  2186  03CA                     l3087:	
  2187                           
  2188                           ;main.c: 317:         if ((dataFromGateway[1] & 0x7F) == 0x08)
  2189  03CA  307F               	movlw	127
  2190  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  2191  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  2192  03CD  0521               	andwf	(_dataFromGateway^(0+128)+1),w
  2193  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  2194  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  2195  03D0  00BA               	movwf	??_main
  2196  03D1  3008               	movlw	8
  2197  03D2  063A               	xorwf	??_main,w
  2198  03D3  1D03               	btfss	3,2
  2199  03D4  2BD6               	goto	u3221
  2200  03D5  2BD7               	goto	u3220
  2201  03D6                     u3221:	
  2202  03D6  2CA5               	goto	l3125
  2203  03D7                     u3220:	
  2204  03D7                     l3089:	
  2205                           
  2206                           ;main.c: 318:         {;main.c: 319:             for (int i = 0; i < 4; i++)
  2207  03D7  1283               	bcf	3,5	;RP0=0, select bank2
  2208  03D8  1703               	bsf	3,6	;RP1=1, select bank2
  2209  03D9  01EA               	clrf	main@i_445^(0+256)
  2210  03DA  01EB               	clrf	(main@i_445+1)^(0+256)
  2211  03DB                     l3091:	
  2212  03DB  086B               	movf	(main@i_445+1)^(0+256),w
  2213  03DC  3A80               	xorlw	128
  2214  03DD  00FF               	movwf	btemp+1
  2215  03DE  3080               	movlw	128
  2216  03DF  027F               	subwf	btemp+1,w
  2217  03E0  1D03               	skipz
  2218  03E1  2BE4               	goto	u3235
  2219  03E2  3004               	movlw	4
  2220  03E3  026A               	subwf	main@i_445^(0+256),w
  2221  03E4                     u3235:	
  2222  03E4  1C03               	skipc
  2223  03E5  2BE7               	goto	u3231
  2224  03E6  2BE8               	goto	u3230
  2225  03E7                     u3231:	
  2226  03E7  2BE9               	goto	l3095
  2227  03E8                     u3230:	
  2228  03E8  2C65               	goto	l3101
  2229  03E9                     l3095:	
  2230                           
  2231                           ;main.c: 320:             {;main.c: 321:                 sendByte((0x01 << (i + 1)), 0x0
      +                          1, motorcycle[i]);
  2232  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2233  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  2234  03EB  01B2               	clrf	sendByte@byte1
  2235  03EC  0AB2               	incf	sendByte@byte1,f
  2236  03ED  1283               	bcf	3,5	;RP0=0, select bank2
  2237  03EE  1703               	bsf	3,6	;RP1=1, select bank2
  2238  03EF  086A               	movf	main@i_445^(0+256),w
  2239  03F0  3E52               	addlw	(low (_motorcycle| 0))& (0+255)
  2240  03F1  0084               	movwf	4
  2241  03F2  1383               	bcf	3,7	;select IRP bank0
  2242  03F3  0800               	movf	0,w
  2243  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  2244  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  2245  03F6  00BA               	movwf	??_main
  2246  03F7  083A               	movf	??_main,w
  2247  03F8  00B3               	movwf	sendByte@valore
  2248  03F9  3001               	movlw	1
  2249  03FA  00BB               	movwf	??_main+1
  2250  03FB  1283               	bcf	3,5	;RP0=0, select bank2
  2251  03FC  1703               	bsf	3,6	;RP1=1, select bank2
  2252  03FD  086A               	movf	main@i_445^(0+256),w
  2253  03FE  3E01               	addlw	1
  2254  03FF  3E01               	addlw	1
  2255  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2256  0401  1303               	bcf	3,6	;RP1=0, select bank0
  2257  0402  2C05               	goto	u3244
  2258  0403                     u3245:	
  2259  0403  1003               	clrc
  2260  0404  0DBB               	rlf	??_main+1,f
  2261  0405                     u3244:	
  2262  0405  3EFF               	addlw	-1
  2263  0406  1D03               	skipz
  2264  0407  2C03               	goto	u3245
  2265  0408  083B               	movf	??_main+1,w
  2266  0409  120A  158A  2510  120A  118A  	fcall	_sendByte
  2267                           
  2268                           ;main.c: 322:                 sendByte((0x01 << (i + 1)), 0x10, car[i]);
  2269  040E  3010               	movlw	16
  2270  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2271  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2272  0411  00BA               	movwf	??_main
  2273  0412  083A               	movf	??_main,w
  2274  0413  00B2               	movwf	sendByte@byte1
  2275  0414  1283               	bcf	3,5	;RP0=0, select bank2
  2276  0415  1703               	bsf	3,6	;RP1=1, select bank2
  2277  0416  086A               	movf	main@i_445^(0+256),w
  2278  0417  3E4E               	addlw	(low (_car| 0))& (0+255)
  2279  0418  0084               	movwf	4
  2280  0419  1383               	bcf	3,7	;select IRP bank0
  2281  041A  0800               	movf	0,w
  2282  041B  1283               	bcf	3,5	;RP0=0, select bank0
  2283  041C  1303               	bcf	3,6	;RP1=0, select bank0
  2284  041D  00BB               	movwf	??_main+1
  2285  041E  083B               	movf	??_main+1,w
  2286  041F  00B3               	movwf	sendByte@valore
  2287  0420  3001               	movlw	1
  2288  0421  00BC               	movwf	??_main+2
  2289  0422  1283               	bcf	3,5	;RP0=0, select bank2
  2290  0423  1703               	bsf	3,6	;RP1=1, select bank2
  2291  0424  086A               	movf	main@i_445^(0+256),w
  2292  0425  3E01               	addlw	1
  2293  0426  3E01               	addlw	1
  2294  0427  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0428  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0429  2C2C               	goto	u3254
  2297  042A                     u3255:	
  2298  042A  1003               	clrc
  2299  042B  0DBC               	rlf	??_main+2,f
  2300  042C                     u3254:	
  2301  042C  3EFF               	addlw	-1
  2302  042D  1D03               	skipz
  2303  042E  2C2A               	goto	u3255
  2304  042F  083C               	movf	??_main+2,w
  2305  0430  120A  158A  2510  120A  118A  	fcall	_sendByte
  2306                           
  2307                           ;main.c: 323:                 sendByte((0x01 << (i + 1)), 0x11, truck[i]);
  2308  0435  3011               	movlw	17
  2309  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2310  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2311  0438  00BA               	movwf	??_main
  2312  0439  083A               	movf	??_main,w
  2313  043A  00B2               	movwf	sendByte@byte1
  2314  043B  1283               	bcf	3,5	;RP0=0, select bank2
  2315  043C  1703               	bsf	3,6	;RP1=1, select bank2
  2316  043D  086A               	movf	main@i_445^(0+256),w
  2317  043E  3E4A               	addlw	(low (_truck| 0))& (0+255)
  2318  043F  0084               	movwf	4
  2319  0440  1383               	bcf	3,7	;select IRP bank0
  2320  0441  0800               	movf	0,w
  2321  0442  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0443  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0444  00BB               	movwf	??_main+1
  2324  0445  083B               	movf	??_main+1,w
  2325  0446  00B3               	movwf	sendByte@valore
  2326  0447  3001               	movlw	1
  2327  0448  00BC               	movwf	??_main+2
  2328  0449  1283               	bcf	3,5	;RP0=0, select bank2
  2329  044A  1703               	bsf	3,6	;RP1=1, select bank2
  2330  044B  086A               	movf	main@i_445^(0+256),w
  2331  044C  3E01               	addlw	1
  2332  044D  3E01               	addlw	1
  2333  044E  1283               	bcf	3,5	;RP0=0, select bank0
  2334  044F  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0450  2C53               	goto	u3264
  2336  0451                     u3265:	
  2337  0451  1003               	clrc
  2338  0452  0DBC               	rlf	??_main+2,f
  2339  0453                     u3264:	
  2340  0453  3EFF               	addlw	-1
  2341  0454  1D03               	skipz
  2342  0455  2C51               	goto	u3265
  2343  0456  083C               	movf	??_main+2,w
  2344  0457  120A  158A  2510  120A  118A  	fcall	_sendByte
  2345  045C                     l3097:	
  2346                           
  2347                           ;main.c: 324:             }
  2348  045C  3001               	movlw	1
  2349  045D  1283               	bcf	3,5	;RP0=0, select bank2
  2350  045E  1703               	bsf	3,6	;RP1=1, select bank2
  2351  045F  07EA               	addwf	main@i_445^(0+256),f
  2352  0460  1803               	skipnc
  2353  0461  0AEB               	incf	(main@i_445+1)^(0+256),f
  2354  0462  3000               	movlw	0
  2355  0463  07EB               	addwf	(main@i_445+1)^(0+256),f
  2356  0464  2BDB               	goto	l3091
  2357  0465                     l3101:	
  2358                           
  2359                           ;main.c: 325:             for (int i = 0; i < 4; i++)
  2360  0465  1283               	bcf	3,5	;RP0=0, select bank2
  2361  0466  1703               	bsf	3,6	;RP1=1, select bank2
  2362  0467  01E6               	clrf	main@i_446^(0+256)
  2363  0468  01E7               	clrf	(main@i_446+1)^(0+256)
  2364  0469                     l3103:	
  2365  0469  0867               	movf	(main@i_446+1)^(0+256),w
  2366  046A  3A80               	xorlw	128
  2367  046B  00FF               	movwf	btemp+1
  2368  046C  3080               	movlw	128
  2369  046D  027F               	subwf	btemp+1,w
  2370  046E  1D03               	skipz
  2371  046F  2C72               	goto	u3275
  2372  0470  3004               	movlw	4
  2373  0471  0266               	subwf	main@i_446^(0+256),w
  2374  0472                     u3275:	
  2375  0472  1C03               	skipc
  2376  0473  2C75               	goto	u3271
  2377  0474  2C76               	goto	u3270
  2378  0475                     u3271:	
  2379  0475  2C77               	goto	l3107
  2380  0476                     u3270:	
  2381  0476  2C8D               	goto	l3113
  2382  0477                     l3107:	
  2383                           
  2384                           ;main.c: 326:             {;main.c: 327:                 motorcycle[i] = 0;
  2385  0477  1283               	bcf	3,5	;RP0=0, select bank2
  2386  0478  1703               	bsf	3,6	;RP1=1, select bank2
  2387  0479  0866               	movf	main@i_446^(0+256),w
  2388  047A  3E52               	addlw	(low (_motorcycle| 0))& (0+255)
  2389  047B  0084               	movwf	4
  2390  047C  1383               	bcf	3,7	;select IRP bank0
  2391  047D  0180               	clrf	0
  2392                           
  2393                           ;main.c: 328:                 car[i] = 0;
  2394  047E  0866               	movf	main@i_446^(0+256),w
  2395  047F  3E4E               	addlw	(low (_car| 0))& (0+255)
  2396  0480  0084               	movwf	4
  2397  0481  0180               	clrf	0
  2398                           
  2399                           ;main.c: 329:                 truck[i] = 0;
  2400  0482  0866               	movf	main@i_446^(0+256),w
  2401  0483  3E4A               	addlw	(low (_truck| 0))& (0+255)
  2402  0484  0084               	movwf	4
  2403  0485  0180               	clrf	0
  2404  0486                     l3109:	
  2405                           
  2406                           ;main.c: 330:             }
  2407  0486  3001               	movlw	1
  2408  0487  07E6               	addwf	main@i_446^(0+256),f
  2409  0488  1803               	skipnc
  2410  0489  0AE7               	incf	(main@i_446+1)^(0+256),f
  2411  048A  3000               	movlw	0
  2412  048B  07E7               	addwf	(main@i_446+1)^(0+256),f
  2413  048C  2C69               	goto	l3103
  2414  048D                     l3113:	
  2415                           
  2416                           ;main.c: 331:             for (unsigned char i = 0; i < 5; i++)
  2417  048D  1283               	bcf	3,5	;RP0=0, select bank2
  2418  048E  1703               	bsf	3,6	;RP1=1, select bank2
  2419  048F  01E4               	clrf	main@i_447^(0+256)
  2420  0490                     l3115:	
  2421  0490  3005               	movlw	5
  2422  0491  0264               	subwf	main@i_447^(0+256),w
  2423  0492  1C03               	skipc
  2424  0493  2C95               	goto	u3281
  2425  0494  2C96               	goto	u3280
  2426  0495                     u3281:	
  2427  0495  2C97               	goto	l3119
  2428  0496                     u3280:	
  2429  0496  2CA5               	goto	l3125
  2430  0497                     l3119:	
  2431                           
  2432                           ;main.c: 332:             {;main.c: 333:                 dataFromGateway[i] = 0;
  2433  0497  0864               	movf	main@i_447^(0+256),w
  2434  0498  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  2435  0499  0084               	movwf	4
  2436  049A  1383               	bcf	3,7	;select IRP bank1
  2437  049B  0180               	clrf	0
  2438  049C                     l3121:	
  2439                           
  2440                           ;main.c: 334:             }
  2441  049C  3001               	movlw	1
  2442  049D  1283               	bcf	3,5	;RP0=0, select bank0
  2443  049E  1303               	bcf	3,6	;RP1=0, select bank0
  2444  049F  00BA               	movwf	??_main
  2445  04A0  083A               	movf	??_main,w
  2446  04A1  1283               	bcf	3,5	;RP0=0, select bank2
  2447  04A2  1703               	bsf	3,6	;RP1=1, select bank2
  2448  04A3  07E4               	addwf	main@i_447^(0+256),f
  2449  04A4  2C90               	goto	l3115
  2450  04A5                     l3125:	
  2451                           
  2452                           ;main.c: 339:         if ((dataFromGateway[1] & 0x7F) == 0x0A)
  2453  04A5  307F               	movlw	127
  2454  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  2455  04A7  1303               	bcf	3,6	;RP1=0, select bank1
  2456  04A8  0521               	andwf	(_dataFromGateway^(0+128)+1),w
  2457  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  2458  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  2459  04AB  00BA               	movwf	??_main
  2460  04AC  300A               	movlw	10
  2461  04AD  063A               	xorwf	??_main,w
  2462  04AE  1D03               	btfss	3,2
  2463  04AF  2CB1               	goto	u3291
  2464  04B0  2CB2               	goto	u3290
  2465  04B1                     u3291:	
  2466  04B1  2892               	goto	l2955
  2467  04B2                     u3290:	
  2468  04B2                     l3127:	
  2469                           
  2470                           ;main.c: 340:         {;main.c: 341:             temp = (char)map((ADC_Read(0) >> 2), 0,
      +                           255, -20, 60);
  2471  04B2  3000               	movlw	0
  2472  04B3  120A  158A  24A6  120A  118A  	fcall	_ADC_Read
  2473  04B8  0874               	movf	?_ADC_Read,w
  2474  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2475  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2476  04BB  00BA               	movwf	??_main
  2477  04BC  0875               	movf	?_ADC_Read+1,w
  2478  04BD  00BB               	movwf	??_main+1
  2479  04BE  0D3B               	rlf	??_main+1,w
  2480  04BF  0CBB               	rrf	??_main+1,f
  2481  04C0  0CBA               	rrf	??_main,f
  2482  04C1  0D3B               	rlf	??_main+1,w
  2483  04C2  0CBB               	rrf	??_main+1,f
  2484  04C3  0CBA               	rrf	??_main,f
  2485  04C4  083A               	movf	??_main,w
  2486  04C5  00AD               	movwf	map@x
  2487  04C6  083B               	movf	??_main+1,w
  2488  04C7  00AE               	movwf	map@x+1
  2489  04C8  3000               	movlw	0
  2490  04C9  00AF               	movwf	map@in_min
  2491  04CA  00B0               	movwf	map@in_min+1
  2492  04CB  30FF               	movlw	255
  2493  04CC  00B1               	movwf	map@in_max
  2494  04CD  3000               	movlw	0
  2495  04CE  00B2               	movwf	map@in_max+1
  2496  04CF  30EC               	movlw	236
  2497  04D0  00B3               	movwf	map@out_min
  2498  04D1  30FF               	movlw	255
  2499  04D2  00B4               	movwf	map@out_min+1
  2500  04D3  303C               	movlw	60
  2501  04D4  00B5               	movwf	map@out_max
  2502  04D5  3000               	movlw	0
  2503  04D6  00B6               	movwf	map@out_max+1
  2504  04D7  120A  158A  256F  120A  118A  	fcall	_map
  2505  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  2506  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  2507  04DE  082D               	movf	?_map,w
  2508  04DF  00BC               	movwf	??_main+2
  2509  04E0  083C               	movf	??_main+2,w
  2510  04E1  1283               	bcf	3,5	;RP0=0, select bank2
  2511  04E2  1703               	bsf	3,6	;RP1=1, select bank2
  2512  04E3  00DA               	movwf	main@temp^(0+256)
  2513                           
  2514                           ;main.c: 342:             umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  2515  04E4  3001               	movlw	1
  2516  04E5  120A  158A  24A6  120A  118A  	fcall	_ADC_Read
  2517  04EA  0874               	movf	?_ADC_Read,w
  2518  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  2519  04EC  1303               	bcf	3,6	;RP1=0, select bank0
  2520  04ED  00BA               	movwf	??_main
  2521  04EE  0875               	movf	?_ADC_Read+1,w
  2522  04EF  00BB               	movwf	??_main+1
  2523  04F0  0D3B               	rlf	??_main+1,w
  2524  04F1  0CBB               	rrf	??_main+1,f
  2525  04F2  0CBA               	rrf	??_main,f
  2526  04F3  0D3B               	rlf	??_main+1,w
  2527  04F4  0CBB               	rrf	??_main+1,f
  2528  04F5  0CBA               	rrf	??_main,f
  2529  04F6  083A               	movf	??_main,w
  2530  04F7  00AD               	movwf	map@x
  2531  04F8  083B               	movf	??_main+1,w
  2532  04F9  00AE               	movwf	map@x+1
  2533  04FA  3000               	movlw	0
  2534  04FB  00AF               	movwf	map@in_min
  2535  04FC  00B0               	movwf	map@in_min+1
  2536  04FD  30FF               	movlw	255
  2537  04FE  00B1               	movwf	map@in_max
  2538  04FF  3000               	movlw	0
  2539  0500  00B2               	movwf	map@in_max+1
  2540  0501  3000               	movlw	0
  2541  0502  00B3               	movwf	map@out_min
  2542  0503  00B4               	movwf	map@out_min+1
  2543  0504  3064               	movlw	100
  2544  0505  00B5               	movwf	map@out_max
  2545  0506  3000               	movlw	0
  2546  0507  00B6               	movwf	map@out_max+1
  2547  0508  120A  158A  256F  120A  118A  	fcall	_map
  2548  050D  1283               	bcf	3,5	;RP0=0, select bank0
  2549  050E  1303               	bcf	3,6	;RP1=0, select bank0
  2550  050F  082D               	movf	?_map,w
  2551  0510  00BC               	movwf	??_main+2
  2552  0511  083C               	movf	??_main+2,w
  2553  0512  1283               	bcf	3,5	;RP0=0, select bank2
  2554  0513  1703               	bsf	3,6	;RP1=1, select bank2
  2555  0514  00DB               	movwf	main@umidita^(0+256)
  2556                           
  2557                           ;main.c: 343:             pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  2558  0515  3005               	movlw	5
  2559  0516  120A  158A  24A6  120A  118A  	fcall	_ADC_Read
  2560  051B  0874               	movf	?_ADC_Read,w
  2561  051C  1283               	bcf	3,5	;RP0=0, select bank0
  2562  051D  1303               	bcf	3,6	;RP1=0, select bank0
  2563  051E  00BA               	movwf	??_main
  2564  051F  0875               	movf	?_ADC_Read+1,w
  2565  0520  00BB               	movwf	??_main+1
  2566  0521  0D3B               	rlf	??_main+1,w
  2567  0522  0CBB               	rrf	??_main+1,f
  2568  0523  0CBA               	rrf	??_main,f
  2569  0524  0D3B               	rlf	??_main+1,w
  2570  0525  0CBB               	rrf	??_main+1,f
  2571  0526  0CBA               	rrf	??_main,f
  2572  0527  083A               	movf	??_main,w
  2573  0528  00AD               	movwf	map@x
  2574  0529  083B               	movf	??_main+1,w
  2575  052A  00AE               	movwf	map@x+1
  2576  052B  3000               	movlw	0
  2577  052C  00AF               	movwf	map@in_min
  2578  052D  00B0               	movwf	map@in_min+1
  2579  052E  30FF               	movlw	255
  2580  052F  00B1               	movwf	map@in_max
  2581  0530  3000               	movlw	0
  2582  0531  00B2               	movwf	map@in_max+1
  2583  0532  3000               	movlw	0
  2584  0533  00B3               	movwf	map@out_min
  2585  0534  00B4               	movwf	map@out_min+1
  2586  0535  3064               	movlw	100
  2587  0536  00B5               	movwf	map@out_max
  2588  0537  3000               	movlw	0
  2589  0538  00B6               	movwf	map@out_max+1
  2590  0539  120A  158A  256F  120A  118A  	fcall	_map
  2591  053E  1283               	bcf	3,5	;RP0=0, select bank0
  2592  053F  1303               	bcf	3,6	;RP1=0, select bank0
  2593  0540  082D               	movf	?_map,w
  2594  0541  00BC               	movwf	??_main+2
  2595  0542  083C               	movf	??_main+2,w
  2596  0543  1283               	bcf	3,5	;RP0=0, select bank2
  2597  0544  1703               	bsf	3,6	;RP1=1, select bank2
  2598  0545  00DC               	movwf	main@pressione^(0+256)
  2599  0546                     l3129:	
  2600                           
  2601                           ;main.c: 344:             sendByte(0x02, 0x00, temp);
  2602  0546  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0547  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0548  01B2               	clrf	sendByte@byte1
  2605  0549  1283               	bcf	3,5	;RP0=0, select bank2
  2606  054A  1703               	bsf	3,6	;RP1=1, select bank2
  2607  054B  085A               	movf	main@temp^(0+256),w
  2608  054C  1283               	bcf	3,5	;RP0=0, select bank0
  2609  054D  1303               	bcf	3,6	;RP1=0, select bank0
  2610  054E  00BA               	movwf	??_main
  2611  054F  083A               	movf	??_main,w
  2612  0550  00B3               	movwf	sendByte@valore
  2613  0551  3002               	movlw	2
  2614  0552  120A  158A  2510  120A  118A  	fcall	_sendByte
  2615  0557                     l3131:	
  2616                           
  2617                           ;main.c: 345:             sendByte(0x04, 0x00, umidita);
  2618  0557  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0558  1303               	bcf	3,6	;RP1=0, select bank0
  2620  0559  01B2               	clrf	sendByte@byte1
  2621  055A  1283               	bcf	3,5	;RP0=0, select bank2
  2622  055B  1703               	bsf	3,6	;RP1=1, select bank2
  2623  055C  085B               	movf	main@umidita^(0+256),w
  2624  055D  1283               	bcf	3,5	;RP0=0, select bank0
  2625  055E  1303               	bcf	3,6	;RP1=0, select bank0
  2626  055F  00BA               	movwf	??_main
  2627  0560  083A               	movf	??_main,w
  2628  0561  00B3               	movwf	sendByte@valore
  2629  0562  3004               	movlw	4
  2630  0563  120A  158A  2510  120A  118A  	fcall	_sendByte
  2631  0568                     l3133:	
  2632                           
  2633                           ;main.c: 346:             sendByte(0x06, 0x00, pressione);
  2634  0568  1283               	bcf	3,5	;RP0=0, select bank0
  2635  0569  1303               	bcf	3,6	;RP1=0, select bank0
  2636  056A  01B2               	clrf	sendByte@byte1
  2637  056B  1283               	bcf	3,5	;RP0=0, select bank2
  2638  056C  1703               	bsf	3,6	;RP1=1, select bank2
  2639  056D  085C               	movf	main@pressione^(0+256),w
  2640  056E  1283               	bcf	3,5	;RP0=0, select bank0
  2641  056F  1303               	bcf	3,6	;RP1=0, select bank0
  2642  0570  00BA               	movwf	??_main
  2643  0571  083A               	movf	??_main,w
  2644  0572  00B3               	movwf	sendByte@valore
  2645  0573  3006               	movlw	6
  2646  0574  120A  158A  2510  120A  118A  	fcall	_sendByte
  2647  0579                     l3135:	
  2648                           
  2649                           ;main.c: 347:             for (unsigned char i = 0; i < 5; i++)
  2650  0579  1283               	bcf	3,5	;RP0=0, select bank2
  2651  057A  1703               	bsf	3,6	;RP1=1, select bank2
  2652  057B  01E5               	clrf	main@i_449^(0+256)
  2653  057C                     l3137:	
  2654  057C  3005               	movlw	5
  2655  057D  0265               	subwf	main@i_449^(0+256),w
  2656  057E  1C03               	skipc
  2657  057F  2D81               	goto	u3301
  2658  0580  2D82               	goto	u3300
  2659  0581                     u3301:	
  2660  0581  2D83               	goto	l3141
  2661  0582                     u3300:	
  2662  0582  2892               	goto	l2955
  2663  0583                     l3141:	
  2664                           
  2665                           ;main.c: 348:             {;main.c: 349:                 dataFromGateway[i] = 0;
  2666  0583  0865               	movf	main@i_449^(0+256),w
  2667  0584  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  2668  0585  0084               	movwf	4
  2669  0586  1383               	bcf	3,7	;select IRP bank1
  2670  0587  0180               	clrf	0
  2671  0588                     l3143:	
  2672                           
  2673                           ;main.c: 350:             }
  2674  0588  3001               	movlw	1
  2675  0589  1283               	bcf	3,5	;RP0=0, select bank0
  2676  058A  1303               	bcf	3,6	;RP1=0, select bank0
  2677  058B  00BA               	movwf	??_main
  2678  058C  083A               	movf	??_main,w
  2679  058D  1283               	bcf	3,5	;RP0=0, select bank2
  2680  058E  1703               	bsf	3,6	;RP1=1, select bank2
  2681  058F  07E5               	addwf	main@i_449^(0+256),f
  2682  0590  2D7C               	goto	l3137
  2683  0591  120A  118A  280E   	ljmp	start
  2684  0594                     __end_of_main:	
  2685                           
  2686                           	psect	text1
  2687  0D10                     __ptext1:	
  2688 ;; *************** function _sendByte *****************
  2689 ;; Defined at:
  2690 ;;		line 413 in file "main.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  byte0           1    wreg     unsigned char 
  2693 ;;  byte1           1   18[BANK0 ] unsigned char 
  2694 ;;  valore          1   19[BANK0 ] unsigned char 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  byte0           1   23[BANK0 ] unsigned char 
  2697 ;;  i               1   25[BANK0 ] unsigned char 
  2698 ;;  txByte          1   24[BANK0 ] PTR unsigned char 
  2699 ;;		 -> BuildByte@txByte(5), 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2709 ;;      Params:         0       2       0       0       0
  2710 ;;      Locals:         0       3       0       0       0
  2711 ;;      Temps:          0       3       0       0       0
  2712 ;;      Totals:         0       8       0       0       0
  2713 ;;Total ram usage:        8 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    4
  2716 ;; This function calls:
  2717 ;;		_BuildByte
  2718 ;;		_UART_Write_Text
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           
  2725                           ;psect for function _sendByte
  2726  0D10                     _sendByte:	
  2727                           
  2728                           ;incstack = 0
  2729                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2730                           ;sendByte@byte0 stored from wreg
  2731  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  2732  0D11  1303               	bcf	3,6	;RP1=0, select bank0
  2733  0D12  00B7               	movwf	sendByte@byte0
  2734  0D13                     l2875:	
  2735                           
  2736                           ;main.c: 413: void sendByte(char byte0, char byte1, char valore);main.c: 414: {;main.c: 
      +                          415:     char* txByte;;main.c: 416:     txByte=BuildByte(byte0, byte1, valore);
  2737  0D13  0832               	movf	sendByte@byte1,w
  2738  0D14  00B4               	movwf	??_sendByte
  2739  0D15  0834               	movf	??_sendByte,w
  2740  0D16  00F4               	movwf	BuildByte@byte1
  2741  0D17  0833               	movf	sendByte@valore,w
  2742  0D18  00B5               	movwf	??_sendByte+1
  2743  0D19  0835               	movf	??_sendByte+1,w
  2744  0D1A  00F5               	movwf	BuildByte@valore
  2745  0D1B  0837               	movf	sendByte@byte0,w
  2746  0D1C  120A  118A  265D  120A  158A  	fcall	_BuildByte
  2747  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  2748  0D22  1303               	bcf	3,6	;RP1=0, select bank0
  2749  0D23  00B6               	movwf	??_sendByte+2
  2750  0D24  0836               	movf	??_sendByte+2,w
  2751  0D25  00B8               	movwf	sendByte@txByte
  2752  0D26                     l2877:	
  2753                           
  2754                           ;main.c: 418:     for(unsigned char i=0; i<5; i++)
  2755  0D26  01B9               	clrf	sendByte@i
  2756  0D27                     l2883:	
  2757                           
  2758                           ;main.c: 419:     {;main.c: 420:         UART_Write_Text(txByte++);
  2759  0D27  0838               	movf	sendByte@txByte,w
  2760  0D28  120A  158A  24C7  120A  158A  	fcall	_UART_Write_Text
  2761  0D2D                     l2885:	
  2762  0D2D  3001               	movlw	1
  2763  0D2E  1283               	bcf	3,5	;RP0=0, select bank0
  2764  0D2F  1303               	bcf	3,6	;RP1=0, select bank0
  2765  0D30  00B4               	movwf	??_sendByte
  2766  0D31  0834               	movf	??_sendByte,w
  2767  0D32  07B8               	addwf	sendByte@txByte,f
  2768  0D33                     l2887:	
  2769                           
  2770                           ;main.c: 421:     }
  2771  0D33  3001               	movlw	1
  2772  0D34  00B4               	movwf	??_sendByte
  2773  0D35  0834               	movf	??_sendByte,w
  2774  0D36  07B9               	addwf	sendByte@i,f
  2775  0D37                     l2889:	
  2776  0D37  3005               	movlw	5
  2777  0D38  0239               	subwf	sendByte@i,w
  2778  0D39  1C03               	skipc
  2779  0D3A  2D3C               	goto	u2901
  2780  0D3B  2D3D               	goto	u2900
  2781  0D3C                     u2901:	
  2782  0D3C  2D27               	goto	l2883
  2783  0D3D                     u2900:	
  2784  0D3D                     l298:	
  2785  0D3D  0008               	return
  2786  0D3E                     __end_of_sendByte:	
  2787                           
  2788                           	psect	text2
  2789  0CC7                     __ptext2:	
  2790 ;; *************** function _UART_Write_Text *****************
  2791 ;; Defined at:
  2792 ;;		line 397 in file "main.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  text            1    wreg     PTR unsigned char 
  2795 ;;		 -> BuildByte@txByte(5), 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  text            1    0[BANK0 ] PTR unsigned char 
  2798 ;;		 -> BuildByte@txByte(5), 
  2799 ;;  i               1    1[BANK0 ] unsigned char 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2809 ;;      Params:         0       0       0       0       0
  2810 ;;      Locals:         0       2       0       0       0
  2811 ;;      Temps:          1       0       0       0       0
  2812 ;;      Totals:         1       2       0       0       0
  2813 ;;Total ram usage:        3 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    3
  2816 ;; This function calls:
  2817 ;;		_UART_TxChar
  2818 ;; This function is called by:
  2819 ;;		_sendByte
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           
  2824                           ;psect for function _UART_Write_Text
  2825  0CC7                     _UART_Write_Text:	
  2826                           
  2827                           ;incstack = 0
  2828                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2829                           ;UART_Write_Text@text stored from wreg
  2830  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  2831  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0CC9  00A0               	movwf	UART_Write_Text@text
  2833  0CCA                     l2595:	
  2834                           
  2835                           ;main.c: 397: void UART_Write_Text(char *text);main.c: 398: {;main.c: 399:     unsigned 
      +                          char i;;main.c: 400:     for (i = 0; text[i] != '\0'; i++)
  2836  0CCA  01A1               	clrf	UART_Write_Text@i
  2837  0CCB  2CDD               	goto	l2601
  2838  0CCC                     l2597:	
  2839                           
  2840                           ;main.c: 401:     {;main.c: 402:         UART_TxChar(text[i]);
  2841  0CCC  0821               	movf	UART_Write_Text@i,w
  2842  0CCD  0720               	addwf	UART_Write_Text@text,w
  2843  0CCE  00F5               	movwf	??_UART_Write_Text
  2844  0CCF  0875               	movf	??_UART_Write_Text,w
  2845  0CD0  0084               	movwf	4
  2846  0CD1  0800               	movf	0,w
  2847  0CD2  120A  158A  242B  120A  158A  	fcall	_UART_TxChar
  2848  0CD7                     l2599:	
  2849                           
  2850                           ;main.c: 403:     }
  2851  0CD7  3001               	movlw	1
  2852  0CD8  00F5               	movwf	??_UART_Write_Text
  2853  0CD9  0875               	movf	??_UART_Write_Text,w
  2854  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  2855  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  2856  0CDC  07A1               	addwf	UART_Write_Text@i,f
  2857  0CDD                     l2601:	
  2858  0CDD  0821               	movf	UART_Write_Text@i,w
  2859  0CDE  0720               	addwf	UART_Write_Text@text,w
  2860  0CDF  00F5               	movwf	??_UART_Write_Text
  2861  0CE0  0875               	movf	??_UART_Write_Text,w
  2862  0CE1  0084               	movwf	4
  2863  0CE2  1383               	bcf	3,7	;select IRP bank0
  2864  0CE3  0800               	movf	0,w
  2865  0CE4  1D03               	btfss	3,2
  2866  0CE5  2CE7               	goto	u2431
  2867  0CE6  2CE8               	goto	u2430
  2868  0CE7                     u2431:	
  2869  0CE7  2CCC               	goto	l2597
  2870  0CE8                     u2430:	
  2871  0CE8                     l287:	
  2872  0CE8  0008               	return
  2873  0CE9                     __end_of_UART_Write_Text:	
  2874                           
  2875                           	psect	text3
  2876  0C2B                     __ptext3:	
  2877 ;; *************** function _UART_TxChar *****************
  2878 ;; Defined at:
  2879 ;;		line 390 in file "main.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  ch              1    wreg     unsigned char 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  ch              1    4[COMMON] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2893 ;;      Params:         0       0       0       0       0
  2894 ;;      Locals:         1       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0
  2896 ;;      Totals:         1       0       0       0       0
  2897 ;;Total ram usage:        1 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    2
  2900 ;; This function calls:
  2901 ;;		Nothing
  2902 ;; This function is called by:
  2903 ;;		_UART_Write_Text
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           
  2908                           ;psect for function _UART_TxChar
  2909  0C2B                     _UART_TxChar:	
  2910                           
  2911                           ;incstack = 0
  2912                           ; Regs used in _UART_TxChar: [wreg]
  2913                           ;UART_TxChar@ch stored from wreg
  2914  0C2B  00F4               	movwf	UART_TxChar@ch
  2915  0C2C                     l2511:	
  2916  0C2C                     l278:	
  2917                           ;main.c: 390: void UART_TxChar(char ch);main.c: 391: {;main.c: 392:     while (!TXIF);
  2918                           
  2919  0C2C  1283               	bcf	3,5	;RP0=0, select bank0
  2920  0C2D  1303               	bcf	3,6	;RP1=0, select bank0
  2921  0C2E  1E0C               	btfss	12,4	;volatile
  2922  0C2F  2C31               	goto	u2281
  2923  0C30  2C32               	goto	u2280
  2924  0C31                     u2281:	
  2925  0C31  2C2C               	goto	l278
  2926  0C32                     u2280:	
  2927  0C32                     l280:	
  2928                           
  2929                           ;main.c: 393:     TXIF = 0;
  2930  0C32  120C               	bcf	12,4	;volatile
  2931  0C33                     l2513:	
  2932                           
  2933                           ;main.c: 394:     TXREG = ch;
  2934  0C33  0874               	movf	UART_TxChar@ch,w
  2935  0C34  0099               	movwf	25	;volatile
  2936  0C35                     l281:	
  2937  0C35  0008               	return
  2938  0C36                     __end_of_UART_TxChar:	
  2939                           
  2940                           	psect	text4
  2941  065D                     __ptext4:	
  2942 ;; *************** function _BuildByte *****************
  2943 ;; Defined at:
  2944 ;;		line 2 in file "./CustomLib/Serial.h"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  byte0           1    wreg     unsigned char 
  2947 ;;  byte1           1    4[COMMON] unsigned char 
  2948 ;;  valore          1    5[COMMON] unsigned char 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  byte0           1    2[BANK0 ] unsigned char 
  2951 ;;  y               2   12[BANK0 ] int 
  2952 ;;  y               2   10[BANK0 ] int 
  2953 ;;  i               2   16[BANK0 ] int 
  2954 ;;  i               2   14[BANK0 ] int 
  2955 ;;  txByte          5    3[BANK0 ] unsigned char [5]
  2956 ;;  sommaColumn     1    9[BANK0 ] unsigned char 
  2957 ;;  sommaRow        1    8[BANK0 ] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      PTR unsigned char 
  2960 ;; Registers used:
  2961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2967 ;;      Params:         2       0       0       0       0
  2968 ;;      Locals:         0      16       0       0       0
  2969 ;;      Temps:          0       2       0       0       0
  2970 ;;      Totals:         2      18       0       0       0
  2971 ;;Total ram usage:       20 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    2
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_sendByte
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           
  2982                           ;psect for function _BuildByte
  2983  065D                     _BuildByte:	
  2984                           
  2985                           ;incstack = 0
  2986                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2987                           ;BuildByte@byte0 stored from wreg
  2988  065D  1283               	bcf	3,5	;RP0=0, select bank0
  2989  065E  1303               	bcf	3,6	;RP1=0, select bank0
  2990  065F  00A2               	movwf	BuildByte@byte0
  2991  0660                     l2527:	
  2992                           
  2993                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2994  0660  0822               	movf	BuildByte@byte0,w
  2995  0661  397F               	andlw	127
  2996  0662  00A0               	movwf	??_BuildByte
  2997  0663  0820               	movf	??_BuildByte,w
  2998  0664  00A3               	movwf	BuildByte@txByte
  2999                           
  3000                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  3001  0665  0874               	movf	BuildByte@byte1,w
  3002  0666  397F               	andlw	127
  3003  0667  00A0               	movwf	??_BuildByte
  3004  0668  0820               	movf	??_BuildByte,w
  3005  0669  00A4               	movwf	BuildByte@txByte+1
  3006                           
  3007                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  3008  066A  0875               	movf	BuildByte@valore,w
  3009  066B  397F               	andlw	127
  3010  066C  00A0               	movwf	??_BuildByte
  3011  066D  0820               	movf	??_BuildByte,w
  3012  066E  00A5               	movwf	BuildByte@txByte+2
  3013  066F                     l2529:	
  3014                           
  3015                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  3016  066F  0875               	movf	BuildByte@valore,w
  3017  0670  00A0               	movwf	??_BuildByte
  3018  0671  3007               	movlw	7
  3019  0672                     u2335:	
  3020  0672  1003               	clrc
  3021  0673  0CA0               	rrf	??_BuildByte,f
  3022  0674  3EFF               	addlw	-1
  3023  0675  1D03               	skipz
  3024  0676  2E72               	goto	u2335
  3025  0677  0820               	movf	??_BuildByte,w
  3026  0678  397F               	andlw	127
  3027  0679  00A1               	movwf	??_BuildByte+1
  3028  067A  0821               	movf	??_BuildByte+1,w
  3029  067B  00A6               	movwf	BuildByte@txByte+3
  3030  067C                     l2531:	
  3031                           
  3032                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  3033  067C  01A8               	clrf	BuildByte@sommaRow
  3034  067D                     l2533:	
  3035                           
  3036                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  3037  067D  01A9               	clrf	BuildByte@sommaColumn
  3038  067E                     l2535:	
  3039                           
  3040                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  3041  067E  01AE               	clrf	BuildByte@i
  3042  067F  01AF               	clrf	BuildByte@i+1
  3043  0680                     l2541:	
  3044                           
  3045                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  3046  0680  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0681  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0682  01AA               	clrf	BuildByte@y
  3049  0683  01AB               	clrf	BuildByte@y+1
  3050  0684                     l2547:	
  3051                           
  3052                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  3053  0684  1283               	bcf	3,5	;RP0=0, select bank0
  3054  0685  1303               	bcf	3,6	;RP1=0, select bank0
  3055  0686  082E               	movf	BuildByte@i,w
  3056  0687  3E23               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3057  0688  0084               	movwf	4
  3058  0689  1383               	bcf	3,7	;select IRP bank0
  3059  068A  0800               	movf	0,w
  3060  068B  00A0               	movwf	??_BuildByte
  3061  068C  0A2A               	incf	BuildByte@y,w
  3062  068D  2E90               	goto	u2344
  3063  068E                     u2345:	
  3064  068E  1003               	clrc
  3065  068F  0CA0               	rrf	??_BuildByte,f
  3066  0690                     u2344:	
  3067  0690  3EFF               	addlw	-1
  3068  0691  1D03               	skipz
  3069  0692  2E8E               	goto	u2345
  3070  0693  0820               	movf	??_BuildByte,w
  3071  0694  3901               	andlw	1
  3072  0695  00A1               	movwf	??_BuildByte+1
  3073  0696  0821               	movf	??_BuildByte+1,w
  3074  0697  07A8               	addwf	BuildByte@sommaRow,f
  3075  0698                     l2549:	
  3076                           
  3077                           ;./CustomLib/Serial.h: 18:         }
  3078  0698  3001               	movlw	1
  3079  0699  07AA               	addwf	BuildByte@y,f
  3080  069A  1803               	skipnc
  3081  069B  0AAB               	incf	BuildByte@y+1,f
  3082  069C  3000               	movlw	0
  3083  069D  07AB               	addwf	BuildByte@y+1,f
  3084  069E                     l2551:	
  3085  069E  082B               	movf	BuildByte@y+1,w
  3086  069F  3A80               	xorlw	128
  3087  06A0  00FF               	movwf	btemp+1
  3088  06A1  3080               	movlw	128
  3089  06A2  027F               	subwf	btemp+1,w
  3090  06A3  1D03               	skipz
  3091  06A4  2EA7               	goto	u2355
  3092  06A5  3008               	movlw	8
  3093  06A6  022A               	subwf	BuildByte@y,w
  3094  06A7                     u2355:	
  3095  06A7  1C03               	skipc
  3096  06A8  2EAA               	goto	u2351
  3097  06A9  2EAB               	goto	u2350
  3098  06AA                     u2351:	
  3099  06AA  2E84               	goto	l2547
  3100  06AB                     u2350:	
  3101  06AB                     l119:	
  3102                           
  3103                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  3104  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  3105  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  3106  06AD  1C28               	btfss	BuildByte@sommaRow,0
  3107  06AE  2EB0               	goto	u2361
  3108  06AF  2EB1               	goto	u2360
  3109  06B0                     u2361:	
  3110  06B0  2EB9               	goto	l2555
  3111  06B1                     u2360:	
  3112  06B1                     l2553:	
  3113                           
  3114                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  3115  06B1  3080               	movlw	128
  3116  06B2  00A0               	movwf	??_BuildByte
  3117  06B3  082E               	movf	BuildByte@i,w
  3118  06B4  3E23               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3119  06B5  0084               	movwf	4
  3120  06B6  0820               	movf	??_BuildByte,w
  3121  06B7  1383               	bcf	3,7	;select IRP bank0
  3122  06B8  0780               	addwf	0,f
  3123  06B9                     l2555:	
  3124                           
  3125                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  3126  06B9  01A8               	clrf	BuildByte@sommaRow
  3127  06BA                     l2559:	
  3128                           ;./CustomLib/Serial.h: 23:         }
  3129                           
  3130                           
  3131                           ;./CustomLib/Serial.h: 28:     }
  3132  06BA  3001               	movlw	1
  3133  06BB  07AE               	addwf	BuildByte@i,f
  3134  06BC  1803               	skipnc
  3135  06BD  0AAF               	incf	BuildByte@i+1,f
  3136  06BE  3000               	movlw	0
  3137  06BF  07AF               	addwf	BuildByte@i+1,f
  3138  06C0                     l2561:	
  3139  06C0  082F               	movf	BuildByte@i+1,w
  3140  06C1  3A80               	xorlw	128
  3141  06C2  00FF               	movwf	btemp+1
  3142  06C3  3080               	movlw	128
  3143  06C4  027F               	subwf	btemp+1,w
  3144  06C5  1D03               	skipz
  3145  06C6  2EC9               	goto	u2375
  3146  06C7  3004               	movlw	4
  3147  06C8  022E               	subwf	BuildByte@i,w
  3148  06C9                     u2375:	
  3149  06C9  1C03               	skipc
  3150  06CA  2ECC               	goto	u2371
  3151  06CB  2ECD               	goto	u2370
  3152  06CC                     u2371:	
  3153  06CC  2E80               	goto	l2541
  3154  06CD                     u2370:	
  3155  06CD                     l2563:	
  3156                           
  3157                           ;./CustomLib/Serial.h: 30:     for (int i = 0; i < 8; i++)
  3158  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  3159  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  3160  06CF  01B0               	clrf	BuildByte@i_342
  3161  06D0  01B1               	clrf	BuildByte@i_342+1
  3162  06D1                     l2569:	
  3163                           
  3164                           ;./CustomLib/Serial.h: 31:     {;./CustomLib/Serial.h: 32:         for (int y = 0; y < 4
      +                          ; y++)
  3165  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  3166  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  3167  06D3  01AC               	clrf	BuildByte@y_343
  3168  06D4  01AD               	clrf	BuildByte@y_343+1
  3169  06D5                     l2575:	
  3170                           
  3171                           ;./CustomLib/Serial.h: 34:         {;./CustomLib/Serial.h: 35:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3172  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  3173  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  3174  06D7  082C               	movf	BuildByte@y_343,w
  3175  06D8  3E23               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3176  06D9  0084               	movwf	4
  3177  06DA  1383               	bcf	3,7	;select IRP bank0
  3178  06DB  0800               	movf	0,w
  3179  06DC  00A0               	movwf	??_BuildByte
  3180  06DD  0A30               	incf	BuildByte@i_342,w
  3181  06DE  2EE1               	goto	u2384
  3182  06DF                     u2385:	
  3183  06DF  1003               	clrc
  3184  06E0  0CA0               	rrf	??_BuildByte,f
  3185  06E1                     u2384:	
  3186  06E1  3EFF               	addlw	-1
  3187  06E2  1D03               	skipz
  3188  06E3  2EDF               	goto	u2385
  3189  06E4  0820               	movf	??_BuildByte,w
  3190  06E5  3901               	andlw	1
  3191  06E6  00A1               	movwf	??_BuildByte+1
  3192  06E7  0821               	movf	??_BuildByte+1,w
  3193  06E8  07A9               	addwf	BuildByte@sommaColumn,f
  3194  06E9                     l2577:	
  3195                           
  3196                           ;./CustomLib/Serial.h: 36:         }
  3197  06E9  3001               	movlw	1
  3198  06EA  07AC               	addwf	BuildByte@y_343,f
  3199  06EB  1803               	skipnc
  3200  06EC  0AAD               	incf	BuildByte@y_343+1,f
  3201  06ED  3000               	movlw	0
  3202  06EE  07AD               	addwf	BuildByte@y_343+1,f
  3203  06EF                     l2579:	
  3204  06EF  082D               	movf	BuildByte@y_343+1,w
  3205  06F0  3A80               	xorlw	128
  3206  06F1  00FF               	movwf	btemp+1
  3207  06F2  3080               	movlw	128
  3208  06F3  027F               	subwf	btemp+1,w
  3209  06F4  1D03               	skipz
  3210  06F5  2EF8               	goto	u2395
  3211  06F6  3004               	movlw	4
  3212  06F7  022C               	subwf	BuildByte@y_343,w
  3213  06F8                     u2395:	
  3214  06F8  1C03               	skipc
  3215  06F9  2EFB               	goto	u2391
  3216  06FA  2EFC               	goto	u2390
  3217  06FB                     u2391:	
  3218  06FB  2ED5               	goto	l2575
  3219  06FC                     u2390:	
  3220  06FC                     l125:	
  3221                           
  3222                           ;./CustomLib/Serial.h: 37:         if (sommaColumn % 2 == 1)
  3223  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  3224  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  3225  06FE  1C29               	btfss	BuildByte@sommaColumn,0
  3226  06FF  2F01               	goto	u2401
  3227  0700  2F02               	goto	u2400
  3228  0701                     u2401:	
  3229  0701  2F0F               	goto	l2583
  3230  0702                     u2400:	
  3231  0702                     l2581:	
  3232                           
  3233                           ;./CustomLib/Serial.h: 38:         {;./CustomLib/Serial.h: 39:             txByte[4] += 
      +                          0x01 << i;
  3234  0702  3001               	movlw	1
  3235  0703  00A0               	movwf	??_BuildByte
  3236  0704  0A30               	incf	BuildByte@i_342,w
  3237  0705  2F08               	goto	u2414
  3238  0706                     u2415:	
  3239  0706  1003               	clrc
  3240  0707  0DA0               	rlf	??_BuildByte,f
  3241  0708                     u2414:	
  3242  0708  3EFF               	addlw	-1
  3243  0709  1D03               	skipz
  3244  070A  2F06               	goto	u2415
  3245  070B  0820               	movf	??_BuildByte,w
  3246  070C  00A1               	movwf	??_BuildByte+1
  3247  070D  0821               	movf	??_BuildByte+1,w
  3248  070E  07A7               	addwf	BuildByte@txByte+4,f
  3249  070F                     l2583:	
  3250                           
  3251                           ;./CustomLib/Serial.h: 40:             sommaColumn = 0;
  3252  070F  01A9               	clrf	BuildByte@sommaColumn
  3253  0710                     l2587:	
  3254                           ;./CustomLib/Serial.h: 41:         }
  3255                           
  3256                           
  3257                           ;./CustomLib/Serial.h: 46:     }
  3258  0710  3001               	movlw	1
  3259  0711  07B0               	addwf	BuildByte@i_342,f
  3260  0712  1803               	skipnc
  3261  0713  0AB1               	incf	BuildByte@i_342+1,f
  3262  0714  3000               	movlw	0
  3263  0715  07B1               	addwf	BuildByte@i_342+1,f
  3264  0716                     l2589:	
  3265  0716  0831               	movf	BuildByte@i_342+1,w
  3266  0717  3A80               	xorlw	128
  3267  0718  00FF               	movwf	btemp+1
  3268  0719  3080               	movlw	128
  3269  071A  027F               	subwf	btemp+1,w
  3270  071B  1D03               	skipz
  3271  071C  2F1F               	goto	u2425
  3272  071D  3008               	movlw	8
  3273  071E  0230               	subwf	BuildByte@i_342,w
  3274  071F                     u2425:	
  3275  071F  1C03               	skipc
  3276  0720  2F22               	goto	u2421
  3277  0721  2F23               	goto	u2420
  3278  0722                     u2421:	
  3279  0722  2ED1               	goto	l2569
  3280  0723                     u2420:	
  3281  0723                     l2591:	
  3282                           
  3283                           ;./CustomLib/Serial.h: 48:     return txByte;
  3284  0723  3023               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3285  0724                     l128:	
  3286  0724  0008               	return
  3287  0725                     __end_of_BuildByte:	
  3288                           
  3289                           	psect	text5
  3290  0D6F                     __ptext5:	
  3291 ;; *************** function _map *****************
  3292 ;; Defined at:
  3293 ;;		line 1 in file "./CustomLib/Conversions.h"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;  x               2   13[BANK0 ] int 
  3296 ;;  in_min          2   15[BANK0 ] int 
  3297 ;;  in_max          2   17[BANK0 ] int 
  3298 ;;  out_min         2   19[BANK0 ] int 
  3299 ;;  out_max         2   21[BANK0 ] int 
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;		None
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  2   13[BANK0 ] int 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2, status,0, pclath, cstack
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3311 ;;      Params:         0      10       0       0       0
  3312 ;;      Locals:         0       0       0       0       0
  3313 ;;      Temps:          0       0       0       0       0
  3314 ;;      Totals:         0      10       0       0       0
  3315 ;;Total ram usage:       10 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    3
  3318 ;; This function calls:
  3319 ;;		___awdiv
  3320 ;;		___wmul
  3321 ;; This function is called by:
  3322 ;;		_main
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           
  3327                           ;psect for function _map
  3328  0D6F                     _map:	
  3329  0D6F                     l2739:	
  3330                           ;incstack = 0
  3331                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3332                           
  3333                           
  3334                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3335  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
  3336  0D70  1303               	bcf	3,6	;RP1=0, select bank0
  3337  0D71  082F               	movf	map@in_min,w
  3338  0D72  0231               	subwf	map@in_max,w
  3339  0D73  00A4               	movwf	___awdiv@divisor
  3340  0D74  0830               	movf	map@in_min+1,w
  3341  0D75  1C03               	skipc
  3342  0D76  0A30               	incf	map@in_min+1,w
  3343  0D77  0232               	subwf	map@in_max+1,w
  3344  0D78  00A5               	movwf	___awdiv@divisor+1
  3345  0D79  082F               	movf	map@in_min,w
  3346  0D7A  022D               	subwf	map@x,w
  3347  0D7B  00A0               	movwf	___wmul@multiplier
  3348  0D7C  0830               	movf	map@in_min+1,w
  3349  0D7D  1C03               	skipc
  3350  0D7E  0A30               	incf	map@in_min+1,w
  3351  0D7F  022E               	subwf	map@x+1,w
  3352  0D80  00A1               	movwf	___wmul@multiplier+1
  3353  0D81  0833               	movf	map@out_min,w
  3354  0D82  0235               	subwf	map@out_max,w
  3355  0D83  00A2               	movwf	___wmul@multiplicand
  3356  0D84  0834               	movf	map@out_min+1,w
  3357  0D85  1C03               	skipc
  3358  0D86  0A34               	incf	map@out_min+1,w
  3359  0D87  0236               	subwf	map@out_max+1,w
  3360  0D88  00A3               	movwf	___wmul@multiplicand+1
  3361  0D89  120A  158A  24E9  120A  158A  	fcall	___wmul
  3362  0D8E  1283               	bcf	3,5	;RP0=0, select bank0
  3363  0D8F  1303               	bcf	3,6	;RP1=0, select bank0
  3364  0D90  0821               	movf	?___wmul+1,w
  3365  0D91  00A7               	movwf	___awdiv@dividend+1
  3366  0D92  0820               	movf	?___wmul,w
  3367  0D93  00A6               	movwf	___awdiv@dividend
  3368  0D94  120A  158A  26A2  120A  158A  	fcall	___awdiv
  3369  0D99  1283               	bcf	3,5	;RP0=0, select bank0
  3370  0D9A  1303               	bcf	3,6	;RP1=0, select bank0
  3371  0D9B  0833               	movf	map@out_min,w
  3372  0D9C  0724               	addwf	?___awdiv,w
  3373  0D9D  00AD               	movwf	?_map
  3374  0D9E  0834               	movf	map@out_min+1,w
  3375  0D9F  1803               	skipnc
  3376  0DA0  0A34               	incf	map@out_min+1,w
  3377  0DA1  0725               	addwf	?___awdiv+1,w
  3378  0DA2  00AE               	movwf	?_map+1
  3379  0DA3                     l83:	
  3380  0DA3  0008               	return
  3381  0DA4                     __end_of_map:	
  3382                           
  3383                           	psect	text6
  3384  0CE9                     __ptext6:	
  3385 ;; *************** function ___wmul *****************
  3386 ;; Defined at:
  3387 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3390 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;  product         2    4[COMMON] unsigned int 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  2    0[BANK0 ] unsigned int 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3402 ;;      Params:         0       4       0       0       0
  3403 ;;      Locals:         2       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0
  3405 ;;      Totals:         2       4       0       0       0
  3406 ;;Total ram usage:        6 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    2
  3409 ;; This function calls:
  3410 ;;		Nothing
  3411 ;; This function is called by:
  3412 ;;		_map
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           
  3417                           ;psect for function ___wmul
  3418  0CE9                     ___wmul:	
  3419  0CE9                     l2603:	
  3420                           ;incstack = 0
  3421                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3422                           
  3423  0CE9  01F4               	clrf	___wmul@product
  3424  0CEA  01F5               	clrf	___wmul@product+1
  3425  0CEB                     l2605:	
  3426  0CEB  1283               	bcf	3,5	;RP0=0, select bank0
  3427  0CEC  1303               	bcf	3,6	;RP1=0, select bank0
  3428  0CED  1C20               	btfss	___wmul@multiplier,0
  3429  0CEE  2CF0               	goto	u2441
  3430  0CEF  2CF1               	goto	u2440
  3431  0CF0                     u2441:	
  3432  0CF0  2CF7               	goto	l419
  3433  0CF1                     u2440:	
  3434  0CF1                     l2607:	
  3435  0CF1  0822               	movf	___wmul@multiplicand,w
  3436  0CF2  07F4               	addwf	___wmul@product,f
  3437  0CF3  1803               	skipnc
  3438  0CF4  0AF5               	incf	___wmul@product+1,f
  3439  0CF5  0823               	movf	___wmul@multiplicand+1,w
  3440  0CF6  07F5               	addwf	___wmul@product+1,f
  3441  0CF7                     l419:	
  3442  0CF7  3001               	movlw	1
  3443  0CF8                     u2455:	
  3444  0CF8  1003               	clrc
  3445  0CF9  0DA2               	rlf	___wmul@multiplicand,f
  3446  0CFA  0DA3               	rlf	___wmul@multiplicand+1,f
  3447  0CFB  3EFF               	addlw	-1
  3448  0CFC  1D03               	skipz
  3449  0CFD  2CF8               	goto	u2455
  3450  0CFE                     l2609:	
  3451  0CFE  3001               	movlw	1
  3452  0CFF                     u2465:	
  3453  0CFF  1003               	clrc
  3454  0D00  0CA1               	rrf	___wmul@multiplier+1,f
  3455  0D01  0CA0               	rrf	___wmul@multiplier,f
  3456  0D02  3EFF               	addlw	-1
  3457  0D03  1D03               	skipz
  3458  0D04  2CFF               	goto	u2465
  3459  0D05                     l2611:	
  3460  0D05  0820               	movf	___wmul@multiplier,w
  3461  0D06  0421               	iorwf	___wmul@multiplier+1,w
  3462  0D07  1D03               	btfss	3,2
  3463  0D08  2D0A               	goto	u2471
  3464  0D09  2D0B               	goto	u2470
  3465  0D0A                     u2471:	
  3466  0D0A  2CEB               	goto	l2605
  3467  0D0B                     u2470:	
  3468  0D0B                     l2613:	
  3469  0D0B  0875               	movf	___wmul@product+1,w
  3470  0D0C  00A1               	movwf	?___wmul+1
  3471  0D0D  0874               	movf	___wmul@product,w
  3472  0D0E  00A0               	movwf	?___wmul
  3473  0D0F                     l421:	
  3474  0D0F  0008               	return
  3475  0D10                     __end_of___wmul:	
  3476                           
  3477                           	psect	text7
  3478  0C36                     __ptext7:	
  3479 ;; *************** function _init_ADC *****************
  3480 ;; Defined at:
  3481 ;;		line 360 in file "main.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;		None
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;		None
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3495 ;;      Params:         0       0       0       0       0
  3496 ;;      Locals:         0       0       0       0       0
  3497 ;;      Temps:          1       0       0       0       0
  3498 ;;      Totals:         1       0       0       0       0
  3499 ;;Total ram usage:        1 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    2
  3502 ;; This function calls:
  3503 ;;		Nothing
  3504 ;; This function is called by:
  3505 ;;		_main
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           
  3510                           ;psect for function _init_ADC
  3511  0C36                     _init_ADC:	
  3512  0C36                     l2795:	
  3513                           ;incstack = 0
  3514                           ; Regs used in _init_ADC: [wreg+status,2]
  3515                           
  3516                           
  3517                           ;main.c: 362:     TRISA = 0xC3;
  3518  0C36  30C3               	movlw	195
  3519  0C37  1683               	bsf	3,5	;RP0=1, select bank1
  3520  0C38  1303               	bcf	3,6	;RP1=0, select bank1
  3521  0C39  0085               	movwf	5	;volatile
  3522  0C3A                     l2797:	
  3523                           
  3524                           ;main.c: 363:     ADCON0 = 0x00;
  3525  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  3526  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  3527  0C3C  019F               	clrf	31	;volatile
  3528  0C3D                     l2799:	
  3529                           
  3530                           ;main.c: 364:     ADCON1 = 0x80;
  3531  0C3D  3080               	movlw	128
  3532  0C3E  1683               	bsf	3,5	;RP0=1, select bank1
  3533  0C3F  1303               	bcf	3,6	;RP1=0, select bank1
  3534  0C40  009F               	movwf	31	;volatile
  3535  0C41                     l2801:	
  3536                           
  3537                           ;main.c: 365:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3538  0C41  301A               	movlw	26
  3539  0C42  00F4               	movwf	??_init_ADC
  3540  0C43                     u3317:	
  3541  0C43  0BF4               	decfsz	??_init_ADC,f
  3542  0C44  2C43               	goto	u3317
  3543  0C45  0000               	nop
  3544  0C46                     l266:	
  3545  0C46  0008               	return
  3546  0C47                     __end_of_init_ADC:	
  3547                           
  3548                           	psect	text8
  3549  0594                     __ptext8:	
  3550 ;; *************** function _bitParita *****************
  3551 ;; Defined at:
  3552 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  rx              1    wreg     PTR unsigned char 
  3555 ;;		 -> dataFromGateway(15), 
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;  rx              1   14[BANK0 ] PTR unsigned char 
  3558 ;;		 -> dataFromGateway(15), 
  3559 ;;  y               2   12[BANK0 ] int 
  3560 ;;  y               2   10[BANK0 ] int 
  3561 ;;  i               2   17[BANK0 ] int 
  3562 ;;  i               2   15[BANK0 ] int 
  3563 ;;  errorRow        1    9[BANK0 ] unsigned char 
  3564 ;;  error           1    8[BANK0 ] unsigned char 
  3565 ;;  errorColumn     1    7[BANK0 ] unsigned char 
  3566 ;;  sommaColumn     1    6[BANK0 ] unsigned char 
  3567 ;;  sommaRow        1    5[BANK0 ] unsigned char 
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  1    wreg      void 
  3570 ;; Registers used:
  3571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3577 ;;      Params:         0       0       0       0       0
  3578 ;;      Locals:         0      14       0       0       0
  3579 ;;      Temps:          0       4       0       0       0
  3580 ;;      Totals:         0      18       0       0       0
  3581 ;;Total ram usage:       18 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    3
  3584 ;; This function calls:
  3585 ;;		_bitChange
  3586 ;; This function is called by:
  3587 ;;		_main
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           
  3592                           ;psect for function _bitParita
  3593  0594                     _bitParita:	
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3597                           ;bitParita@rx stored from wreg
  3598  0594  1283               	bcf	3,5	;RP0=0, select bank0
  3599  0595  1303               	bcf	3,6	;RP1=0, select bank0
  3600  0596  00AE               	movwf	bitParita@rx
  3601  0597                     l2743:	
  3602                           
  3603                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3604  0597  01A8               	clrf	bitParita@error
  3605                           
  3606                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3607  0598  01A5               	clrf	bitParita@sommaRow
  3608                           
  3609                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3610  0599  01A9               	clrf	bitParita@errorRow
  3611                           
  3612                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  3613  059A  01A6               	clrf	bitParita@sommaColumn
  3614                           
  3615                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  3616  059B  01A7               	clrf	bitParita@errorColumn
  3617                           
  3618                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  3619  059C  01AF               	clrf	bitParita@i
  3620  059D  01B0               	clrf	bitParita@i+1
  3621  059E                     l2749:	
  3622                           
  3623                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  3624  059E  1283               	bcf	3,5	;RP0=0, select bank0
  3625  059F  1303               	bcf	3,6	;RP1=0, select bank0
  3626  05A0  01AA               	clrf	bitParita@y
  3627  05A1  01AB               	clrf	bitParita@y+1
  3628  05A2                     l2755:	
  3629                           
  3630                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  3631  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  3632  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  3633  05A4  082F               	movf	bitParita@i,w
  3634  05A5  072E               	addwf	bitParita@rx,w
  3635  05A6  00A1               	movwf	??_bitParita
  3636  05A7  0821               	movf	??_bitParita,w
  3637  05A8  0084               	movwf	4
  3638  05A9  1383               	bcf	3,7	;select IRP bank0
  3639  05AA  0800               	movf	0,w
  3640  05AB  00A2               	movwf	??_bitParita+1
  3641  05AC  0A2A               	incf	bitParita@y,w
  3642  05AD  2DB0               	goto	u2774
  3643  05AE                     u2775:	
  3644  05AE  1003               	clrc
  3645  05AF  0CA2               	rrf	??_bitParita+1,f
  3646  05B0                     u2774:	
  3647  05B0  3EFF               	addlw	-1
  3648  05B1  1D03               	skipz
  3649  05B2  2DAE               	goto	u2775
  3650  05B3  0822               	movf	??_bitParita+1,w
  3651  05B4  3901               	andlw	1
  3652  05B5  00A3               	movwf	??_bitParita+2
  3653  05B6  0823               	movf	??_bitParita+2,w
  3654  05B7  07A5               	addwf	bitParita@sommaRow,f
  3655  05B8                     l2757:	
  3656                           
  3657                           ;./CustomLib/BitsFlow.h: 26:         }
  3658  05B8  3001               	movlw	1
  3659  05B9  07AA               	addwf	bitParita@y,f
  3660  05BA  1803               	skipnc
  3661  05BB  0AAB               	incf	bitParita@y+1,f
  3662  05BC  3000               	movlw	0
  3663  05BD  07AB               	addwf	bitParita@y+1,f
  3664  05BE                     l2759:	
  3665  05BE  082B               	movf	bitParita@y+1,w
  3666  05BF  3A80               	xorlw	128
  3667  05C0  00FF               	movwf	btemp+1
  3668  05C1  3080               	movlw	128
  3669  05C2  027F               	subwf	btemp+1,w
  3670  05C3  1D03               	skipz
  3671  05C4  2DC7               	goto	u2785
  3672  05C5  3008               	movlw	8
  3673  05C6  022A               	subwf	bitParita@y,w
  3674  05C7                     u2785:	
  3675  05C7  1C03               	skipc
  3676  05C8  2DCA               	goto	u2781
  3677  05C9  2DCB               	goto	u2780
  3678  05CA                     u2781:	
  3679  05CA  2DA2               	goto	l2755
  3680  05CB                     u2780:	
  3681  05CB                     l105:	
  3682                           
  3683                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  3684  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  3685  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  3686  05CD  1C25               	btfss	bitParita@sommaRow,0
  3687  05CE  2DD0               	goto	u2791
  3688  05CF  2DD1               	goto	u2790
  3689  05D0                     u2791:	
  3690  05D0  2DD7               	goto	l106
  3691  05D1                     u2790:	
  3692  05D1                     l2761:	
  3693                           
  3694                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  3695  05D1  01A8               	clrf	bitParita@error
  3696  05D2  0AA8               	incf	bitParita@error,f
  3697  05D3                     l2763:	
  3698                           
  3699                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  3700  05D3  082F               	movf	bitParita@i,w
  3701  05D4  00A1               	movwf	??_bitParita
  3702  05D5  0821               	movf	??_bitParita,w
  3703  05D6  00A9               	movwf	bitParita@errorRow
  3704  05D7                     l106:	
  3705                           ;./CustomLib/BitsFlow.h: 31:         }
  3706                           
  3707                           
  3708                           ;./CustomLib/BitsFlow.h: 32:     }
  3709  05D7  3001               	movlw	1
  3710  05D8  07AF               	addwf	bitParita@i,f
  3711  05D9  1803               	skipnc
  3712  05DA  0AB0               	incf	bitParita@i+1,f
  3713  05DB  3000               	movlw	0
  3714  05DC  07B0               	addwf	bitParita@i+1,f
  3715  05DD                     l2765:	
  3716  05DD  0830               	movf	bitParita@i+1,w
  3717  05DE  3A80               	xorlw	128
  3718  05DF  00FF               	movwf	btemp+1
  3719  05E0  3080               	movlw	128
  3720  05E1  027F               	subwf	btemp+1,w
  3721  05E2  1D03               	skipz
  3722  05E3  2DE6               	goto	u2805
  3723  05E4  3005               	movlw	5
  3724  05E5  022F               	subwf	bitParita@i,w
  3725  05E6                     u2805:	
  3726  05E6  1C03               	skipc
  3727  05E7  2DE9               	goto	u2801
  3728  05E8  2DEA               	goto	u2800
  3729  05E9                     u2801:	
  3730  05E9  2D9E               	goto	l2749
  3731  05EA                     u2800:	
  3732  05EA                     l2767:	
  3733                           
  3734                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  3735  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  3736  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  3737  05EC  01B1               	clrf	bitParita@i_330
  3738  05ED  01B2               	clrf	bitParita@i_330+1
  3739  05EE                     l2773:	
  3740                           
  3741                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  3742  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  3743  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  3744  05F0  01AC               	clrf	bitParita@y_331
  3745  05F1  01AD               	clrf	bitParita@y_331+1
  3746  05F2                     l2779:	
  3747                           
  3748                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  3749  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  3750  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  3751  05F4  082C               	movf	bitParita@y_331,w
  3752  05F5  072E               	addwf	bitParita@rx,w
  3753  05F6  00A1               	movwf	??_bitParita
  3754  05F7  0821               	movf	??_bitParita,w
  3755  05F8  0084               	movwf	4
  3756  05F9  1383               	bcf	3,7	;select IRP bank0
  3757  05FA  0800               	movf	0,w
  3758  05FB  00A2               	movwf	??_bitParita+1
  3759  05FC  0A31               	incf	bitParita@i_330,w
  3760  05FD  2E00               	goto	u2814
  3761  05FE                     u2815:	
  3762  05FE  1003               	clrc
  3763  05FF  0CA2               	rrf	??_bitParita+1,f
  3764  0600                     u2814:	
  3765  0600  3EFF               	addlw	-1
  3766  0601  1D03               	skipz
  3767  0602  2DFE               	goto	u2815
  3768  0603  0822               	movf	??_bitParita+1,w
  3769  0604  3901               	andlw	1
  3770  0605  00A3               	movwf	??_bitParita+2
  3771  0606  0823               	movf	??_bitParita+2,w
  3772  0607  07A6               	addwf	bitParita@sommaColumn,f
  3773  0608                     l2781:	
  3774                           
  3775                           ;./CustomLib/BitsFlow.h: 39:         }
  3776  0608  3001               	movlw	1
  3777  0609  07AC               	addwf	bitParita@y_331,f
  3778  060A  1803               	skipnc
  3779  060B  0AAD               	incf	bitParita@y_331+1,f
  3780  060C  3000               	movlw	0
  3781  060D  07AD               	addwf	bitParita@y_331+1,f
  3782  060E                     l2783:	
  3783  060E  082D               	movf	bitParita@y_331+1,w
  3784  060F  3A80               	xorlw	128
  3785  0610  00FF               	movwf	btemp+1
  3786  0611  3080               	movlw	128
  3787  0612  027F               	subwf	btemp+1,w
  3788  0613  1D03               	skipz
  3789  0614  2E17               	goto	u2825
  3790  0615  3004               	movlw	4
  3791  0616  022C               	subwf	bitParita@y_331,w
  3792  0617                     u2825:	
  3793  0617  1C03               	skipc
  3794  0618  2E1A               	goto	u2821
  3795  0619  2E1B               	goto	u2820
  3796  061A                     u2821:	
  3797  061A  2DF2               	goto	l2779
  3798  061B                     u2820:	
  3799  061B                     l110:	
  3800                           
  3801                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  3802  061B  1283               	bcf	3,5	;RP0=0, select bank0
  3803  061C  1303               	bcf	3,6	;RP1=0, select bank0
  3804  061D  1C26               	btfss	bitParita@sommaColumn,0
  3805  061E  2E20               	goto	u2831
  3806  061F  2E21               	goto	u2830
  3807  0620                     u2831:	
  3808  0620  2E27               	goto	l111
  3809  0621                     u2830:	
  3810  0621                     l2785:	
  3811                           
  3812                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  3813  0621  01A8               	clrf	bitParita@error
  3814  0622  0AA8               	incf	bitParita@error,f
  3815  0623                     l2787:	
  3816                           
  3817                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  3818  0623  0831               	movf	bitParita@i_330,w
  3819  0624  00A1               	movwf	??_bitParita
  3820  0625  0821               	movf	??_bitParita,w
  3821  0626  00A7               	movwf	bitParita@errorColumn
  3822  0627                     l111:	
  3823                           ;./CustomLib/BitsFlow.h: 44:         }
  3824                           
  3825                           
  3826                           ;./CustomLib/BitsFlow.h: 45:     }
  3827  0627  3001               	movlw	1
  3828  0628  07B1               	addwf	bitParita@i_330,f
  3829  0629  1803               	skipnc
  3830  062A  0AB2               	incf	bitParita@i_330+1,f
  3831  062B  3000               	movlw	0
  3832  062C  07B2               	addwf	bitParita@i_330+1,f
  3833  062D                     l2789:	
  3834  062D  0832               	movf	bitParita@i_330+1,w
  3835  062E  3A80               	xorlw	128
  3836  062F  00FF               	movwf	btemp+1
  3837  0630  3080               	movlw	128
  3838  0631  027F               	subwf	btemp+1,w
  3839  0632  1D03               	skipz
  3840  0633  2E36               	goto	u2845
  3841  0634  3008               	movlw	8
  3842  0635  0231               	subwf	bitParita@i_330,w
  3843  0636                     u2845:	
  3844  0636  1C03               	skipc
  3845  0637  2E39               	goto	u2841
  3846  0638  2E3A               	goto	u2840
  3847  0639                     u2841:	
  3848  0639  2DEE               	goto	l2773
  3849  063A                     u2840:	
  3850  063A                     l2791:	
  3851                           
  3852                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  3853  063A  1283               	bcf	3,5	;RP0=0, select bank0
  3854  063B  1303               	bcf	3,6	;RP1=0, select bank0
  3855  063C  0828               	movf	bitParita@error,w
  3856  063D  1903               	btfsc	3,2
  3857  063E  2E40               	goto	u2851
  3858  063F  2E41               	goto	u2850
  3859  0640                     u2851:	
  3860  0640  2E5C               	goto	l113
  3861  0641                     u2850:	
  3862  0641                     l2793:	
  3863                           
  3864                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  3865  0641  0827               	movf	bitParita@errorColumn,w
  3866  0642  00A1               	movwf	??_bitParita
  3867  0643  0821               	movf	??_bitParita,w
  3868  0644  00F4               	movwf	bitChange@n
  3869  0645  0829               	movf	bitParita@errorRow,w
  3870  0646  072E               	addwf	bitParita@rx,w
  3871  0647  00A2               	movwf	??_bitParita+1
  3872  0648  0822               	movf	??_bitParita+1,w
  3873  0649  0084               	movwf	4
  3874  064A  1383               	bcf	3,7	;select IRP bank0
  3875  064B  0800               	movf	0,w
  3876  064C  120A  158A  253E  120A  118A  	fcall	_bitChange
  3877  0651  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0652  1303               	bcf	3,6	;RP1=0, select bank0
  3879  0653  00A3               	movwf	??_bitParita+2
  3880  0654  0829               	movf	bitParita@errorRow,w
  3881  0655  072E               	addwf	bitParita@rx,w
  3882  0656  00A4               	movwf	??_bitParita+3
  3883  0657  0824               	movf	??_bitParita+3,w
  3884  0658  0084               	movwf	4
  3885  0659  0823               	movf	??_bitParita+2,w
  3886  065A  1383               	bcf	3,7	;select IRP bank0
  3887  065B  0080               	movwf	0
  3888  065C                     l113:	
  3889  065C  0008               	return
  3890  065D                     __end_of_bitParita:	
  3891                           
  3892                           	psect	text9
  3893  0D3E                     __ptext9:	
  3894 ;; *************** function _bitChange *****************
  3895 ;; Defined at:
  3896 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  dato            1    wreg     unsigned char 
  3899 ;;  n               1    4[COMMON] unsigned char 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;  dato            1    0[BANK0 ] unsigned char 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      unsigned char 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3911 ;;      Params:         1       0       0       0       0
  3912 ;;      Locals:         0       1       0       0       0
  3913 ;;      Temps:          2       0       0       0       0
  3914 ;;      Totals:         3       1       0       0       0
  3915 ;;Total ram usage:        4 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    2
  3918 ;; This function calls:
  3919 ;;		Nothing
  3920 ;; This function is called by:
  3921 ;;		_bitParita
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           
  3926                           ;psect for function _bitChange
  3927  0D3E                     _bitChange:	
  3928                           
  3929                           ;incstack = 0
  3930                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  3931                           ;bitChange@dato stored from wreg
  3932  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  3934  0D40  00A0               	movwf	bitChange@dato
  3935  0D41                     l2515:	
  3936                           
  3937                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  3938  0D41  3001               	movlw	1
  3939  0D42  00F5               	movwf	??_bitChange
  3940  0D43  0A74               	incf	bitChange@n,w
  3941  0D44  2D47               	goto	u2294
  3942  0D45                     u2295:	
  3943  0D45  1003               	clrc
  3944  0D46  0DF5               	rlf	??_bitChange,f
  3945  0D47                     u2294:	
  3946  0D47  3EFF               	addlw	-1
  3947  0D48  1D03               	skipz
  3948  0D49  2D45               	goto	u2295
  3949  0D4A  0875               	movf	??_bitChange,w
  3950  0D4B  0520               	andwf	bitChange@dato,w
  3951  0D4C  1903               	btfsc	3,2
  3952  0D4D  2D4F               	goto	u2301
  3953  0D4E  2D50               	goto	u2300
  3954  0D4F                     u2301:	
  3955  0D4F  2D5F               	goto	l2523
  3956  0D50                     u2300:	
  3957  0D50                     l2517:	
  3958                           
  3959                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  3960  0D50  3001               	movlw	1
  3961  0D51  00F5               	movwf	??_bitChange
  3962  0D52  0A74               	incf	bitChange@n,w
  3963  0D53  2D56               	goto	u2314
  3964  0D54                     u2315:	
  3965  0D54  1003               	clrc
  3966  0D55  0DF5               	rlf	??_bitChange,f
  3967  0D56                     u2314:	
  3968  0D56  3EFF               	addlw	-1
  3969  0D57  1D03               	skipz
  3970  0D58  2D54               	goto	u2315
  3971  0D59  0875               	movf	??_bitChange,w
  3972  0D5A  00F6               	movwf	??_bitChange+1
  3973  0D5B  0876               	movf	??_bitChange+1,w
  3974  0D5C  04A0               	iorwf	bitChange@dato,f
  3975  0D5D  0820               	movf	bitChange@dato,w
  3976  0D5E  2D6E               	goto	l98
  3977  0D5F                     l2523:	
  3978                           
  3979                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  3980  0D5F  3001               	movlw	1
  3981  0D60  00F5               	movwf	??_bitChange
  3982  0D61  0A74               	incf	bitChange@n,w
  3983  0D62  2D65               	goto	u2324
  3984  0D63                     u2325:	
  3985  0D63  1003               	clrc
  3986  0D64  0DF5               	rlf	??_bitChange,f
  3987  0D65                     u2324:	
  3988  0D65  3EFF               	addlw	-1
  3989  0D66  1D03               	skipz
  3990  0D67  2D63               	goto	u2325
  3991  0D68  0875               	movf	??_bitChange,w
  3992  0D69  3AFF               	xorlw	255
  3993  0D6A  00F6               	movwf	??_bitChange+1
  3994  0D6B  0876               	movf	??_bitChange+1,w
  3995  0D6C  05A0               	andwf	bitChange@dato,f
  3996  0D6D  0820               	movf	bitChange@dato,w
  3997  0D6E                     l98:	
  3998  0D6E  0008               	return
  3999  0D6F                     __end_of_bitChange:	
  4000                           
  4001                           	psect	text10
  4002  0C6F                     __ptext10:	
  4003 ;; *************** function ___bmul *****************
  4004 ;; Defined at:
  4005 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  multiplier      1    wreg     unsigned char 
  4008 ;;  multiplicand    1    4[COMMON] unsigned char 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  multiplier      1    1[BANK0 ] unsigned char 
  4011 ;;  product         1    0[BANK0 ] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  1    wreg      unsigned char 
  4014 ;; Registers used:
  4015 ;;		wreg, status,2, status,0
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4021 ;;      Params:         1       0       0       0       0
  4022 ;;      Locals:         0       2       0       0       0
  4023 ;;      Temps:          1       0       0       0       0
  4024 ;;      Totals:         2       2       0       0       0
  4025 ;;Total ram usage:        4 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    2
  4028 ;; This function calls:
  4029 ;;		Nothing
  4030 ;; This function is called by:
  4031 ;;		_main
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           
  4036                           ;psect for function ___bmul
  4037  0C6F                     ___bmul:	
  4038                           
  4039                           ;incstack = 0
  4040                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4041                           ;___bmul@multiplier stored from wreg
  4042  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  4043  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  4044  0C71  00A1               	movwf	___bmul@multiplier
  4045  0C72                     l2901:	
  4046  0C72  01A0               	clrf	___bmul@product
  4047  0C73                     l2903:	
  4048  0C73  1C21               	btfss	___bmul@multiplier,0
  4049  0C74  2C76               	goto	u2931
  4050  0C75  2C77               	goto	u2930
  4051  0C76                     u2931:	
  4052  0C76  2C7B               	goto	l2907
  4053  0C77                     u2930:	
  4054  0C77                     l2905:	
  4055  0C77  0874               	movf	___bmul@multiplicand,w
  4056  0C78  00F5               	movwf	??___bmul
  4057  0C79  0875               	movf	??___bmul,w
  4058  0C7A  07A0               	addwf	___bmul@product,f
  4059  0C7B                     l2907:	
  4060  0C7B  1003               	clrc
  4061  0C7C  0DF4               	rlf	___bmul@multiplicand,f
  4062  0C7D                     l2909:	
  4063  0C7D  1003               	clrc
  4064  0C7E  0CA1               	rrf	___bmul@multiplier,f
  4065  0C7F  0821               	movf	___bmul@multiplier,w
  4066  0C80  1D03               	btfss	3,2
  4067  0C81  2C83               	goto	u2941
  4068  0C82  2C84               	goto	u2940
  4069  0C83                     u2941:	
  4070  0C83  2C73               	goto	l2903
  4071  0C84                     u2940:	
  4072  0C84                     l2911:	
  4073  0C84  0820               	movf	___bmul@product,w
  4074  0C85                     l445:	
  4075  0C85  0008               	return
  4076  0C86                     __end_of___bmul:	
  4077                           
  4078                           	psect	text11
  4079  07C2                     __ptext11:	
  4080 ;; *************** function _UART_Init *****************
  4081 ;; Defined at:
  4082 ;;		line 378 in file "main.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  baudrate        2   14[BANK0 ] int 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;		None
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0, pclath, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4096 ;;      Params:         0       2       0       0       0
  4097 ;;      Locals:         0       0       0       0       0
  4098 ;;      Temps:          0       4       0       0       0
  4099 ;;      Totals:         0       6       0       0       0
  4100 ;;Total ram usage:        6 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    3
  4103 ;; This function calls:
  4104 ;;		___aldiv
  4105 ;; This function is called by:
  4106 ;;		_main
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           
  4111                           ;psect for function _UART_Init
  4112  07C2                     _UART_Init:	
  4113  07C2                     l2803:	
  4114                           ;incstack = 0
  4115                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4116                           
  4117                           
  4118                           ;main.c: 378: void UART_Init(int baudrate);main.c: 379: {;main.c: 380:     TRISCbits.TRI
      +                          SC6 = 0;
  4119  07C2  1683               	bsf	3,5	;RP0=1, select bank1
  4120  07C3  1303               	bcf	3,6	;RP1=0, select bank1
  4121  07C4  1307               	bcf	7,6	;volatile
  4122                           
  4123                           ;main.c: 381:     TXSTAbits.TXEN = 1;
  4124  07C5  1698               	bsf	24,5	;volatile
  4125                           
  4126                           ;main.c: 382:     RCSTAbits.SPEN = 1;
  4127  07C6  1283               	bcf	3,5	;RP0=0, select bank0
  4128  07C7  1303               	bcf	3,6	;RP1=0, select bank0
  4129  07C8  1798               	bsf	24,7	;volatile
  4130                           
  4131                           ;main.c: 383:     RCSTAbits.CREN = 1;
  4132  07C9  1618               	bsf	24,4	;volatile
  4133  07CA                     l2805:	
  4134                           
  4135                           ;main.c: 384:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4136  07CA  082E               	movf	UART_Init@baudrate,w
  4137  07CB  00B0               	movwf	??_UART_Init
  4138  07CC  082F               	movf	UART_Init@baudrate+1,w
  4139  07CD  00B1               	movwf	??_UART_Init+1
  4140  07CE  3000               	movlw	0
  4141  07CF  1BB1               	btfsc	??_UART_Init+1,7
  4142  07D0  30FF               	movlw	255
  4143  07D1  00B2               	movwf	??_UART_Init+2
  4144  07D2  00B3               	movwf	??_UART_Init+3
  4145  07D3  3006               	movlw	6
  4146  07D4                     u2865:	
  4147  07D4  1003               	clrc
  4148  07D5  0DB0               	rlf	??_UART_Init,f
  4149  07D6  0DB1               	rlf	??_UART_Init+1,f
  4150  07D7  0DB2               	rlf	??_UART_Init+2,f
  4151  07D8  0DB3               	rlf	??_UART_Init+3,f
  4152  07D9                     u2860:	
  4153  07D9  3EFF               	addlw	-1
  4154  07DA  1D03               	skipz
  4155  07DB  2FD4               	goto	u2865
  4156  07DC  0833               	movf	??_UART_Init+3,w
  4157  07DD  00A3               	movwf	___aldiv@divisor+3
  4158  07DE  0832               	movf	??_UART_Init+2,w
  4159  07DF  00A2               	movwf	___aldiv@divisor+2
  4160  07E0  0831               	movf	??_UART_Init+1,w
  4161  07E1  00A1               	movwf	___aldiv@divisor+1
  4162  07E2  0830               	movf	??_UART_Init,w
  4163  07E3  00A0               	movwf	___aldiv@divisor
  4164  07E4  3001               	movlw	1
  4165  07E5  00A7               	movwf	___aldiv@dividend+3
  4166  07E6  30E8               	movlw	232
  4167  07E7  00A6               	movwf	___aldiv@dividend+2
  4168  07E8  3048               	movlw	72
  4169  07E9  00A5               	movwf	___aldiv@dividend+1
  4170  07EA  3000               	movlw	0
  4171  07EB  00A4               	movwf	___aldiv@dividend
  4172  07EC  120A  118A  2725  120A  118A  	fcall	___aldiv
  4173  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  4174  07F2  1303               	bcf	3,6	;RP1=0, select bank0
  4175  07F3  0820               	movf	?___aldiv,w
  4176  07F4  3EFF               	addlw	255
  4177  07F5  1683               	bsf	3,5	;RP0=1, select bank1
  4178  07F6  1303               	bcf	3,6	;RP1=0, select bank1
  4179  07F7  0099               	movwf	25	;volatile
  4180  07F8                     l2807:	
  4181                           
  4182                           ;main.c: 385:     INTCONbits.GIE = 1;
  4183  07F8  178B               	bsf	11,7	;volatile
  4184  07F9                     l2809:	
  4185                           
  4186                           ;main.c: 386:     INTCONbits.PEIE = 1;
  4187  07F9  170B               	bsf	11,6	;volatile
  4188  07FA                     l2811:	
  4189                           
  4190                           ;main.c: 387:     PIE1bits.RCIE = 1;
  4191  07FA  168C               	bsf	12,5	;volatile
  4192  07FB                     l275:	
  4193  07FB  0008               	return
  4194  07FC                     __end_of_UART_Init:	
  4195                           
  4196                           	psect	text12
  4197  0725                     __ptext12:	
  4198 ;; *************** function ___aldiv *****************
  4199 ;; Defined at:
  4200 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;  divisor         4    0[BANK0 ] long 
  4203 ;;  dividend        4    4[BANK0 ] long 
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;  quotient        4   10[BANK0 ] long 
  4206 ;;  sign            1    9[BANK0 ] unsigned char 
  4207 ;;  counter         1    8[BANK0 ] unsigned char 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  4    0[BANK0 ] long 
  4210 ;; Registers used:
  4211 ;;		wreg, status,2, status,0
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4217 ;;      Params:         0       8       0       0       0
  4218 ;;      Locals:         0       6       0       0       0
  4219 ;;      Temps:          1       0       0       0       0
  4220 ;;      Totals:         1      14       0       0       0
  4221 ;;Total ram usage:       15 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    2
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_UART_Init
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function ___aldiv
  4233  0725                     ___aldiv:	
  4234  0725                     l2617:	
  4235                           ;incstack = 0
  4236                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4237                           
  4238  0725  1283               	bcf	3,5	;RP0=0, select bank0
  4239  0726  1303               	bcf	3,6	;RP1=0, select bank0
  4240  0727  01A9               	clrf	___aldiv@sign
  4241  0728                     l2619:	
  4242  0728  1FA3               	btfss	___aldiv@divisor+3,7
  4243  0729  2F2B               	goto	u2481
  4244  072A  2F2C               	goto	u2480
  4245  072B                     u2481:	
  4246  072B  2F39               	goto	l484
  4247  072C                     u2480:	
  4248  072C                     l2621:	
  4249  072C  09A0               	comf	___aldiv@divisor,f
  4250  072D  09A1               	comf	___aldiv@divisor+1,f
  4251  072E  09A2               	comf	___aldiv@divisor+2,f
  4252  072F  09A3               	comf	___aldiv@divisor+3,f
  4253  0730  0AA0               	incf	___aldiv@divisor,f
  4254  0731  1903               	skipnz
  4255  0732  0AA1               	incf	___aldiv@divisor+1,f
  4256  0733  1903               	skipnz
  4257  0734  0AA2               	incf	___aldiv@divisor+2,f
  4258  0735  1903               	skipnz
  4259  0736  0AA3               	incf	___aldiv@divisor+3,f
  4260  0737  01A9               	clrf	___aldiv@sign
  4261  0738  0AA9               	incf	___aldiv@sign,f
  4262  0739                     l484:	
  4263  0739  1FA7               	btfss	___aldiv@dividend+3,7
  4264  073A  2F3C               	goto	u2491
  4265  073B  2F3D               	goto	u2490
  4266  073C                     u2491:	
  4267  073C  2F4C               	goto	l2627
  4268  073D                     u2490:	
  4269  073D                     l2623:	
  4270  073D  09A4               	comf	___aldiv@dividend,f
  4271  073E  09A5               	comf	___aldiv@dividend+1,f
  4272  073F  09A6               	comf	___aldiv@dividend+2,f
  4273  0740  09A7               	comf	___aldiv@dividend+3,f
  4274  0741  0AA4               	incf	___aldiv@dividend,f
  4275  0742  1903               	skipnz
  4276  0743  0AA5               	incf	___aldiv@dividend+1,f
  4277  0744  1903               	skipnz
  4278  0745  0AA6               	incf	___aldiv@dividend+2,f
  4279  0746  1903               	skipnz
  4280  0747  0AA7               	incf	___aldiv@dividend+3,f
  4281  0748                     l2625:	
  4282  0748  3001               	movlw	1
  4283  0749  00F4               	movwf	??___aldiv
  4284  074A  0874               	movf	??___aldiv,w
  4285  074B  06A9               	xorwf	___aldiv@sign,f
  4286  074C                     l2627:	
  4287  074C  3000               	movlw	0
  4288  074D  00AD               	movwf	___aldiv@quotient+3
  4289  074E  3000               	movlw	0
  4290  074F  00AC               	movwf	___aldiv@quotient+2
  4291  0750  3000               	movlw	0
  4292  0751  00AB               	movwf	___aldiv@quotient+1
  4293  0752  3000               	movlw	0
  4294  0753  00AA               	movwf	___aldiv@quotient
  4295  0754                     l2629:	
  4296  0754  0823               	movf	___aldiv@divisor+3,w
  4297  0755  0422               	iorwf	___aldiv@divisor+2,w
  4298  0756  0421               	iorwf	___aldiv@divisor+1,w
  4299  0757  0420               	iorwf	___aldiv@divisor,w
  4300  0758  1903               	skipnz
  4301  0759  2F5B               	goto	u2501
  4302  075A  2F5C               	goto	u2500
  4303  075B                     u2501:	
  4304  075B  2FA9               	goto	l2649
  4305  075C                     u2500:	
  4306  075C                     l2631:	
  4307  075C  01A8               	clrf	___aldiv@counter
  4308  075D  0AA8               	incf	___aldiv@counter,f
  4309  075E  2F6C               	goto	l2635
  4310  075F                     l2633:	
  4311  075F  3001               	movlw	1
  4312  0760  00F4               	movwf	??___aldiv
  4313  0761                     u2515:	
  4314  0761  1003               	clrc
  4315  0762  0DA0               	rlf	___aldiv@divisor,f
  4316  0763  0DA1               	rlf	___aldiv@divisor+1,f
  4317  0764  0DA2               	rlf	___aldiv@divisor+2,f
  4318  0765  0DA3               	rlf	___aldiv@divisor+3,f
  4319  0766  0BF4               	decfsz	??___aldiv,f
  4320  0767  2F61               	goto	u2515
  4321  0768  3001               	movlw	1
  4322  0769  00F4               	movwf	??___aldiv
  4323  076A  0874               	movf	??___aldiv,w
  4324  076B  07A8               	addwf	___aldiv@counter,f
  4325  076C                     l2635:	
  4326  076C  1FA3               	btfss	___aldiv@divisor+3,7
  4327  076D  2F6F               	goto	u2521
  4328  076E  2F70               	goto	u2520
  4329  076F                     u2521:	
  4330  076F  2F5F               	goto	l2633
  4331  0770                     u2520:	
  4332  0770                     l2637:	
  4333  0770  3001               	movlw	1
  4334  0771  00F4               	movwf	??___aldiv
  4335  0772                     u2535:	
  4336  0772  1003               	clrc
  4337  0773  0DAA               	rlf	___aldiv@quotient,f
  4338  0774  0DAB               	rlf	___aldiv@quotient+1,f
  4339  0775  0DAC               	rlf	___aldiv@quotient+2,f
  4340  0776  0DAD               	rlf	___aldiv@quotient+3,f
  4341  0777  0BF4               	decfsz	??___aldiv,f
  4342  0778  2F72               	goto	u2535
  4343  0779                     l2639:	
  4344  0779  0823               	movf	___aldiv@divisor+3,w
  4345  077A  0227               	subwf	___aldiv@dividend+3,w
  4346  077B  1D03               	skipz
  4347  077C  2F87               	goto	u2545
  4348  077D  0822               	movf	___aldiv@divisor+2,w
  4349  077E  0226               	subwf	___aldiv@dividend+2,w
  4350  077F  1D03               	skipz
  4351  0780  2F87               	goto	u2545
  4352  0781  0821               	movf	___aldiv@divisor+1,w
  4353  0782  0225               	subwf	___aldiv@dividend+1,w
  4354  0783  1D03               	skipz
  4355  0784  2F87               	goto	u2545
  4356  0785  0820               	movf	___aldiv@divisor,w
  4357  0786  0224               	subwf	___aldiv@dividend,w
  4358  0787                     u2545:	
  4359  0787  1C03               	skipc
  4360  0788  2F8A               	goto	u2541
  4361  0789  2F8B               	goto	u2540
  4362  078A                     u2541:	
  4363  078A  2F9A               	goto	l2645
  4364  078B                     u2540:	
  4365  078B                     l2641:	
  4366  078B  0820               	movf	___aldiv@divisor,w
  4367  078C  02A4               	subwf	___aldiv@dividend,f
  4368  078D  0821               	movf	___aldiv@divisor+1,w
  4369  078E  1C03               	skipc
  4370  078F  0F21               	incfsz	___aldiv@divisor+1,w
  4371  0790  02A5               	subwf	___aldiv@dividend+1,f
  4372  0791  0822               	movf	___aldiv@divisor+2,w
  4373  0792  1C03               	skipc
  4374  0793  0F22               	incfsz	___aldiv@divisor+2,w
  4375  0794  02A6               	subwf	___aldiv@dividend+2,f
  4376  0795  0823               	movf	___aldiv@divisor+3,w
  4377  0796  1C03               	skipc
  4378  0797  0F23               	incfsz	___aldiv@divisor+3,w
  4379  0798  02A7               	subwf	___aldiv@dividend+3,f
  4380  0799                     l2643:	
  4381  0799  142A               	bsf	___aldiv@quotient,0
  4382  079A                     l2645:	
  4383  079A  3001               	movlw	1
  4384  079B                     u2555:	
  4385  079B  1003               	clrc
  4386  079C  0CA3               	rrf	___aldiv@divisor+3,f
  4387  079D  0CA2               	rrf	___aldiv@divisor+2,f
  4388  079E  0CA1               	rrf	___aldiv@divisor+1,f
  4389  079F  0CA0               	rrf	___aldiv@divisor,f
  4390  07A0  3EFF               	addlw	-1
  4391  07A1  1D03               	skipz
  4392  07A2  2F9B               	goto	u2555
  4393  07A3                     l2647:	
  4394  07A3  3001               	movlw	1
  4395  07A4  02A8               	subwf	___aldiv@counter,f
  4396  07A5  1D03               	btfss	3,2
  4397  07A6  2FA8               	goto	u2561
  4398  07A7  2FA9               	goto	u2560
  4399  07A8                     u2561:	
  4400  07A8  2F70               	goto	l2637
  4401  07A9                     u2560:	
  4402  07A9                     l2649:	
  4403  07A9  0829               	movf	___aldiv@sign,w
  4404  07AA  1903               	btfsc	3,2
  4405  07AB  2FAD               	goto	u2571
  4406  07AC  2FAE               	goto	u2570
  4407  07AD                     u2571:	
  4408  07AD  2FB9               	goto	l2653
  4409  07AE                     u2570:	
  4410  07AE                     l2651:	
  4411  07AE  09AA               	comf	___aldiv@quotient,f
  4412  07AF  09AB               	comf	___aldiv@quotient+1,f
  4413  07B0  09AC               	comf	___aldiv@quotient+2,f
  4414  07B1  09AD               	comf	___aldiv@quotient+3,f
  4415  07B2  0AAA               	incf	___aldiv@quotient,f
  4416  07B3  1903               	skipnz
  4417  07B4  0AAB               	incf	___aldiv@quotient+1,f
  4418  07B5  1903               	skipnz
  4419  07B6  0AAC               	incf	___aldiv@quotient+2,f
  4420  07B7  1903               	skipnz
  4421  07B8  0AAD               	incf	___aldiv@quotient+3,f
  4422  07B9                     l2653:	
  4423  07B9  082D               	movf	___aldiv@quotient+3,w
  4424  07BA  00A3               	movwf	?___aldiv+3
  4425  07BB  082C               	movf	___aldiv@quotient+2,w
  4426  07BC  00A2               	movwf	?___aldiv+2
  4427  07BD  082B               	movf	___aldiv@quotient+1,w
  4428  07BE  00A1               	movwf	?___aldiv+1
  4429  07BF  082A               	movf	___aldiv@quotient,w
  4430  07C0  00A0               	movwf	?___aldiv
  4431  07C1                     l494:	
  4432  07C1  0008               	return
  4433  07C2                     __end_of___aldiv:	
  4434                           
  4435                           	psect	text13
  4436  0C5A                     __ptext13:	
  4437 ;; *************** function _SetDisplay *****************
  4438 ;; Defined at:
  4439 ;;		line 450 in file "main.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  d1              1    wreg     unsigned char 
  4442 ;;  d2              1    4[COMMON] unsigned char 
  4443 ;;  d3              1    5[COMMON] unsigned char 
  4444 ;;  value           1    6[COMMON] unsigned char 
  4445 ;; Auto vars:     Size  Location     Type
  4446 ;;  d1              1    0[BANK0 ] unsigned char 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  1    wreg      void 
  4449 ;; Registers used:
  4450 ;;		wreg, status,0
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4456 ;;      Params:         3       0       0       0       0
  4457 ;;      Locals:         0       1       0       0       0
  4458 ;;      Temps:          0       0       0       0       0
  4459 ;;      Totals:         3       1       0       0       0
  4460 ;;Total ram usage:        4 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; Hardware stack levels required when called:    2
  4463 ;; This function calls:
  4464 ;;		Nothing
  4465 ;; This function is called by:
  4466 ;;		_main
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           
  4471                           ;psect for function _SetDisplay
  4472  0C5A                     _SetDisplay:	
  4473                           
  4474                           ;incstack = 0
  4475                           ; Regs used in _SetDisplay: [wreg+status,0]
  4476                           ;SetDisplay@d1 stored from wreg
  4477  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  4478  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  4479  0C5C  00A0               	movwf	SetDisplay@d1
  4480  0C5D                     l2871:	
  4481                           
  4482                           ;main.c: 450: void SetDisplay(char d1, char d2, char d3, char value);main.c: 451: {;main
      +                          .c: 452:     PORTAbits.RA2=d1;
  4483  0C5D  0C20               	rrf	SetDisplay@d1,w
  4484  0C5E  1C03               	skipc
  4485  0C5F  1105               	bcf	5,2	;volatile
  4486  0C60  1803               	skipnc
  4487  0C61  1505               	bsf	5,2	;volatile
  4488                           
  4489                           ;main.c: 453:     PORTAbits.RA3=d2;
  4490  0C62  0C74               	rrf	SetDisplay@d2,w
  4491  0C63  1C03               	skipc
  4492  0C64  1185               	bcf	5,3	;volatile
  4493  0C65  1803               	skipnc
  4494  0C66  1585               	bsf	5,3	;volatile
  4495                           
  4496                           ;main.c: 454:     PORTAbits.RA4=d3;
  4497  0C67  0C75               	rrf	SetDisplay@d3,w
  4498  0C68  1C03               	skipc
  4499  0C69  1205               	bcf	5,4	;volatile
  4500  0C6A  1803               	skipnc
  4501  0C6B  1605               	bsf	5,4	;volatile
  4502  0C6C                     l2873:	
  4503                           
  4504                           ;main.c: 455:     PORTD=value;
  4505  0C6C  0876               	movf	SetDisplay@value,w
  4506  0C6D  0088               	movwf	8	;volatile
  4507  0C6E                     l307:	
  4508  0C6E  0008               	return
  4509  0C6F                     __end_of_SetDisplay:	
  4510                           
  4511                           	psect	text14
  4512  0F76                     __ptext14:	
  4513 ;; *************** function _SetDefaultTimers *****************
  4514 ;; Defined at:
  4515 ;;		line 458 in file "main.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  rosso           2    0[BANK0 ] int 
  4518 ;;  verde           2    2[BANK0 ] int 
  4519 ;;  giallo          2    4[BANK0 ] int 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  i               1    5[COMMON] unsigned char 
  4522 ;;  l               1    4[COMMON] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  1    wreg      void 
  4525 ;; Registers used:
  4526 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4532 ;;      Params:         0       6       0       0       0
  4533 ;;      Locals:         2       0       0       0       0
  4534 ;;      Temps:          0       6       0       0       0
  4535 ;;      Totals:         2      12       0       0       0
  4536 ;;Total ram usage:       14 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    2
  4539 ;; This function calls:
  4540 ;;		Nothing
  4541 ;; This function is called by:
  4542 ;;		_main
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _SetDefaultTimers
  4548  0F76                     _SetDefaultTimers:	
  4549  0F76                     l2813:	
  4550                           ;incstack = 0
  4551                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4552                           
  4553                           
  4554                           ;main.c: 458: void SetDefaultTimers(int rosso, int verde, int giallo);main.c: 459: {;mai
      +                          n.c: 460:     for(unsigned char l=0; l<16; l++)
  4555  0F76  01F4               	clrf	SetDefaultTimers@l
  4556  0F77                     l2819:	
  4557                           
  4558                           ;main.c: 461:     {;main.c: 462:         for(unsigned char i=0; i<3; i++)
  4559  0F77  01F5               	clrf	SetDefaultTimers@i
  4560  0F78  2FD6               	goto	l2833
  4561  0F79                     l2825:	
  4562  0F79  0874               	movf	SetDefaultTimers@l,w
  4563  0F7A  00A6               	movwf	??_SetDefaultTimers
  4564  0F7B  0726               	addwf	??_SetDefaultTimers,w
  4565  0F7C  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4566  0F7D  0084               	movwf	4
  4567  0F7E  1383               	bcf	3,7	;select IRP bank1
  4568  0F7F  0800               	movf	0,w
  4569  0F80  00A7               	movwf	??_SetDefaultTimers+1
  4570  0F81  0A84               	incf	4,f
  4571  0F82  0800               	movf	0,w
  4572  0F83  00A8               	movwf	??_SetDefaultTimers+2
  4573  0F84  0875               	movf	SetDefaultTimers@i,w
  4574  0F85  00A9               	movwf	??_SetDefaultTimers+3
  4575  0F86  0729               	addwf	??_SetDefaultTimers+3,w
  4576  0F87  0727               	addwf	??_SetDefaultTimers+1,w
  4577  0F88  00AA               	movwf	??_SetDefaultTimers+4
  4578  0F89  0828               	movf	??_SetDefaultTimers+2,w
  4579  0F8A  1803               	skipnc
  4580  0F8B  3E01               	addlw	1
  4581  0F8C  00AB               	movwf	??_SetDefaultTimers+5
  4582  0F8D  082A               	movf	??_SetDefaultTimers+4,w
  4583  0F8E  0084               	movwf	4
  4584  0F8F  1783               	bsf	3,7
  4585  0F90  1C2B               	btfss	??_SetDefaultTimers+5,0
  4586  0F91  1383               	bcf	3,7
  4587  0F92  0820               	movf	SetDefaultTimers@rosso,w
  4588  0F93  0080               	movwf	0
  4589  0F94  0A84               	incf	4,f
  4590  0F95  0821               	movf	SetDefaultTimers@rosso+1,w
  4591  0F96  0080               	movwf	0
  4592  0F97  2FEB               	goto	l2835
  4593  0F98                     l2827:	
  4594  0F98  0874               	movf	SetDefaultTimers@l,w
  4595  0F99  00A6               	movwf	??_SetDefaultTimers
  4596  0F9A  0726               	addwf	??_SetDefaultTimers,w
  4597  0F9B  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4598  0F9C  0084               	movwf	4
  4599  0F9D  1383               	bcf	3,7	;select IRP bank1
  4600  0F9E  0800               	movf	0,w
  4601  0F9F  00A7               	movwf	??_SetDefaultTimers+1
  4602  0FA0  0A84               	incf	4,f
  4603  0FA1  0800               	movf	0,w
  4604  0FA2  00A8               	movwf	??_SetDefaultTimers+2
  4605  0FA3  0875               	movf	SetDefaultTimers@i,w
  4606  0FA4  00A9               	movwf	??_SetDefaultTimers+3
  4607  0FA5  0729               	addwf	??_SetDefaultTimers+3,w
  4608  0FA6  0727               	addwf	??_SetDefaultTimers+1,w
  4609  0FA7  00AA               	movwf	??_SetDefaultTimers+4
  4610  0FA8  0828               	movf	??_SetDefaultTimers+2,w
  4611  0FA9  1803               	skipnc
  4612  0FAA  3E01               	addlw	1
  4613  0FAB  00AB               	movwf	??_SetDefaultTimers+5
  4614  0FAC  082A               	movf	??_SetDefaultTimers+4,w
  4615  0FAD  0084               	movwf	4
  4616  0FAE  1783               	bsf	3,7
  4617  0FAF  1C2B               	btfss	??_SetDefaultTimers+5,0
  4618  0FB0  1383               	bcf	3,7
  4619  0FB1  0822               	movf	SetDefaultTimers@verde,w
  4620  0FB2  0080               	movwf	0
  4621  0FB3  0A84               	incf	4,f
  4622  0FB4  0823               	movf	SetDefaultTimers@verde+1,w
  4623  0FB5  0080               	movwf	0
  4624  0FB6  2FEB               	goto	l2835
  4625  0FB7                     l2829:	
  4626  0FB7  0874               	movf	SetDefaultTimers@l,w
  4627  0FB8  00A6               	movwf	??_SetDefaultTimers
  4628  0FB9  0726               	addwf	??_SetDefaultTimers,w
  4629  0FBA  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4630  0FBB  0084               	movwf	4
  4631  0FBC  1383               	bcf	3,7	;select IRP bank1
  4632  0FBD  0800               	movf	0,w
  4633  0FBE  00A7               	movwf	??_SetDefaultTimers+1
  4634  0FBF  0A84               	incf	4,f
  4635  0FC0  0800               	movf	0,w
  4636  0FC1  00A8               	movwf	??_SetDefaultTimers+2
  4637  0FC2  0875               	movf	SetDefaultTimers@i,w
  4638  0FC3  00A9               	movwf	??_SetDefaultTimers+3
  4639  0FC4  0729               	addwf	??_SetDefaultTimers+3,w
  4640  0FC5  0727               	addwf	??_SetDefaultTimers+1,w
  4641  0FC6  00AA               	movwf	??_SetDefaultTimers+4
  4642  0FC7  0828               	movf	??_SetDefaultTimers+2,w
  4643  0FC8  1803               	skipnc
  4644  0FC9  3E01               	addlw	1
  4645  0FCA  00AB               	movwf	??_SetDefaultTimers+5
  4646  0FCB  082A               	movf	??_SetDefaultTimers+4,w
  4647  0FCC  0084               	movwf	4
  4648  0FCD  1783               	bsf	3,7
  4649  0FCE  1C2B               	btfss	??_SetDefaultTimers+5,0
  4650  0FCF  1383               	bcf	3,7
  4651  0FD0  0824               	movf	SetDefaultTimers@giallo,w
  4652  0FD1  0080               	movwf	0
  4653  0FD2  0A84               	incf	4,f
  4654  0FD3  0825               	movf	SetDefaultTimers@giallo+1,w
  4655  0FD4  0080               	movwf	0
  4656  0FD5  2FEB               	goto	l2835
  4657  0FD6                     l2833:	
  4658  0FD6  0875               	movf	SetDefaultTimers@i,w
  4659  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  4660  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  4661  0FD9  00A6               	movwf	??_SetDefaultTimers
  4662  0FDA  01A7               	clrf	??_SetDefaultTimers+1
  4663                           
  4664                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4665                           ; Switch size 1, requested type "simple"
  4666                           ; Number of cases is 1, Range of values is 0 to 0
  4667                           ; switch strategies available:
  4668                           ; Name         Instructions Cycles
  4669                           ; simple_byte            4     3 (average)
  4670                           ; direct_byte           11     8 (fixed)
  4671                           ; jumptable            260     6 (fixed)
  4672                           ;	Chosen strategy is simple_byte
  4673  0FDB  0827               	movf	??_SetDefaultTimers+1,w
  4674  0FDC  3A00               	xorlw	0	; case 0
  4675  0FDD  1903               	skipnz
  4676  0FDE  2FE0               	goto	l3243
  4677  0FDF  2FEB               	goto	l2835
  4678  0FE0                     l3243:	
  4679                           
  4680                           ; Switch size 1, requested type "simple"
  4681                           ; Number of cases is 3, Range of values is 0 to 2
  4682                           ; switch strategies available:
  4683                           ; Name         Instructions Cycles
  4684                           ; simple_byte           10     6 (average)
  4685                           ; direct_byte           17     8 (fixed)
  4686                           ; jumptable            260     6 (fixed)
  4687                           ;	Chosen strategy is simple_byte
  4688  0FE0  0826               	movf	??_SetDefaultTimers,w
  4689  0FE1  3A00               	xorlw	0	; case 0
  4690  0FE2  1903               	skipnz
  4691  0FE3  2F79               	goto	l2825
  4692  0FE4  3A01               	xorlw	1	; case 1
  4693  0FE5  1903               	skipnz
  4694  0FE6  2F98               	goto	l2827
  4695  0FE7  3A03               	xorlw	3	; case 2
  4696  0FE8  1903               	skipnz
  4697  0FE9  2FB7               	goto	l2829
  4698  0FEA  2FEB               	goto	l2835
  4699  0FEB                     l2835:	
  4700                           
  4701                           ;main.c: 470:         }
  4702  0FEB  3001               	movlw	1
  4703  0FEC  00A6               	movwf	??_SetDefaultTimers
  4704  0FED  0826               	movf	??_SetDefaultTimers,w
  4705  0FEE  07F5               	addwf	SetDefaultTimers@i,f
  4706  0FEF                     l2837:	
  4707  0FEF  3003               	movlw	3
  4708  0FF0  0275               	subwf	SetDefaultTimers@i,w
  4709  0FF1  1C03               	skipc
  4710  0FF2  2FF4               	goto	u2871
  4711  0FF3  2FF5               	goto	u2870
  4712  0FF4                     u2871:	
  4713  0FF4  2FD6               	goto	l2833
  4714  0FF5                     u2870:	
  4715  0FF5                     l2839:	
  4716                           
  4717                           ;main.c: 471:     }
  4718  0FF5  3001               	movlw	1
  4719  0FF6  00A6               	movwf	??_SetDefaultTimers
  4720  0FF7  0826               	movf	??_SetDefaultTimers,w
  4721  0FF8  07F4               	addwf	SetDefaultTimers@l,f
  4722  0FF9                     l2841:	
  4723  0FF9  3010               	movlw	16
  4724  0FFA  0274               	subwf	SetDefaultTimers@l,w
  4725  0FFB  1C03               	skipc
  4726  0FFC  2FFE               	goto	u2881
  4727  0FFD  2FFF               	goto	u2880
  4728  0FFE                     u2881:	
  4729  0FFE  2F77               	goto	l2819
  4730  0FFF                     u2880:	
  4731  0FFF                     l319:	
  4732  0FFF  0008               	return
  4733  1000                     __end_of_SetDefaultTimers:	
  4734                           
  4735                           	psect	text15
  4736  0DA4                     __ptext15:	
  4737 ;; *************** function _GetTime *****************
  4738 ;; Defined at:
  4739 ;;		line 424 in file "main.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  index           1    wreg     unsigned char 
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  index           1    2[BANK0 ] unsigned char 
  4744 ;;  time            2    4[BANK0 ] int 
  4745 ;;  shortInt        1    3[BANK0 ] struct .
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  2    4[COMMON] int 
  4748 ;; Registers used:
  4749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4755 ;;      Params:         2       0       0       0       0
  4756 ;;      Locals:         0       4       0       0       0
  4757 ;;      Temps:          0       2       0       0       0
  4758 ;;      Totals:         2       6       0       0       0
  4759 ;;Total ram usage:        8 bytes
  4760 ;; Hardware stack levels used:    1
  4761 ;; Hardware stack levels required when called:    2
  4762 ;; This function calls:
  4763 ;;		Nothing
  4764 ;; This function is called by:
  4765 ;;		_main
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           
  4770                           ;psect for function _GetTime
  4771  0DA4                     _GetTime:	
  4772                           
  4773                           ;incstack = 0
  4774                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4775                           ;GetTime@index stored from wreg
  4776  0DA4  1283               	bcf	3,5	;RP0=0, select bank0
  4777  0DA5  1303               	bcf	3,6	;RP1=0, select bank0
  4778  0DA6  00A2               	movwf	GetTime@index
  4779  0DA7                     l2847:	
  4780                           
  4781                           ;main.c: 424: int GetTime(unsigned char index);main.c: 425: {;main.c: 426:     int time;
      +                          ;main.c: 430:     } shortInt;;main.c: 432:     shortInt.Val = dataFromGateway[index + 3]
      +                           & 0x7F;
  4782  0DA7  0822               	movf	GetTime@index,w
  4783  0DA8  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4784  0DA9  0084               	movwf	4
  4785  0DAA  307F               	movlw	127
  4786  0DAB  1383               	bcf	3,7	;select IRP bank1
  4787  0DAC  0500               	andwf	0,w
  4788  0DAD  00A0               	movwf	??_GetTime
  4789  0DAE  0823               	movf	GetTime@shortInt,w
  4790  0DAF  0620               	xorwf	??_GetTime,w
  4791  0DB0  3980               	andlw	-128
  4792  0DB1  0620               	xorwf	??_GetTime,w
  4793  0DB2  00A3               	movwf	GetTime@shortInt
  4794  0DB3                     l2849:	
  4795                           
  4796                           ;main.c: 433:     time = shortInt.Val;
  4797  0DB3  0823               	movf	GetTime@shortInt,w
  4798  0DB4  397F               	andlw	127
  4799  0DB5  00A0               	movwf	??_GetTime
  4800  0DB6  01A1               	clrf	??_GetTime+1
  4801  0DB7  0820               	movf	??_GetTime,w
  4802  0DB8  00A4               	movwf	GetTime@time
  4803  0DB9  0821               	movf	??_GetTime+1,w
  4804  0DBA  00A5               	movwf	GetTime@time+1
  4805  0DBB                     l2851:	
  4806                           
  4807                           ;main.c: 434:     time = (time << 7) & 0x80;
  4808  0DBB  0825               	movf	GetTime@time+1,w
  4809  0DBC  00A1               	movwf	??_GetTime+1
  4810  0DBD  0824               	movf	GetTime@time,w
  4811  0DBE  00A0               	movwf	??_GetTime
  4812  0DBF  3007               	movlw	7
  4813  0DC0  00FF               	movwf	btemp+1
  4814  0DC1                     u2895:	
  4815  0DC1  1003               	clrc
  4816  0DC2  0DA0               	rlf	??_GetTime,f
  4817  0DC3  0DA1               	rlf	??_GetTime+1,f
  4818  0DC4  0BFF               	decfsz	btemp+1,f
  4819  0DC5  2DC1               	goto	u2895
  4820  0DC6  3080               	movlw	128
  4821  0DC7  0520               	andwf	??_GetTime,w
  4822  0DC8  00A4               	movwf	GetTime@time
  4823  0DC9  3000               	movlw	0
  4824  0DCA  0521               	andwf	??_GetTime+1,w
  4825  0DCB  00A5               	movwf	GetTime@time+1
  4826  0DCC                     l2853:	
  4827                           
  4828                           ;main.c: 436:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4829  0DCC  0822               	movf	GetTime@index,w
  4830  0DCD  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4831  0DCE  0084               	movwf	4
  4832  0DCF  307F               	movlw	127
  4833  0DD0  0500               	andwf	0,w
  4834  0DD1  00A0               	movwf	??_GetTime
  4835  0DD2  0823               	movf	GetTime@shortInt,w
  4836  0DD3  0620               	xorwf	??_GetTime,w
  4837  0DD4  3980               	andlw	-128
  4838  0DD5  0620               	xorwf	??_GetTime,w
  4839  0DD6  00A3               	movwf	GetTime@shortInt
  4840  0DD7                     l2855:	
  4841                           
  4842                           ;main.c: 437:     time = time | shortInt.Val;
  4843  0DD7  0823               	movf	GetTime@shortInt,w
  4844  0DD8  397F               	andlw	127
  4845  0DD9  00A0               	movwf	??_GetTime
  4846  0DDA  0824               	movf	GetTime@time,w
  4847  0DDB  0420               	iorwf	??_GetTime,w
  4848  0DDC  00A4               	movwf	GetTime@time
  4849  0DDD  0825               	movf	GetTime@time+1,w
  4850  0DDE  00A5               	movwf	GetTime@time+1
  4851  0DDF                     l2857:	
  4852                           
  4853                           ;main.c: 439:     return time;
  4854  0DDF  0825               	movf	GetTime@time+1,w
  4855  0DE0  00F5               	movwf	?_GetTime+1
  4856  0DE1  0824               	movf	GetTime@time,w
  4857  0DE2  00F4               	movwf	?_GetTime
  4858  0DE3                     l301:	
  4859  0DE3  0008               	return
  4860  0DE4                     __end_of_GetTime:	
  4861                           
  4862                           	psect	text16
  4863  0F0B                     __ptext16:	
  4864 ;; *************** function _GetDigits *****************
  4865 ;; Defined at:
  4866 ;;		line 442 in file "main.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  Time            2   13[BANK0 ] int 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg, status,2, status,0, pclath, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4880 ;;      Params:         0       2       0       0       0
  4881 ;;      Locals:         0       2       0       0       0
  4882 ;;      Temps:          0       3       0       0       0
  4883 ;;      Totals:         0       7       0       0       0
  4884 ;;Total ram usage:        7 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    3
  4887 ;; This function calls:
  4888 ;;		___awdiv
  4889 ;;		___awmod
  4890 ;; This function is called by:
  4891 ;;		_main
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           
  4896                           ;psect for function _GetDigits
  4897  0F0B                     _GetDigits:	
  4898  0F0B                     l2861:	
  4899                           ;incstack = 0
  4900                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  4901                           
  4902                           
  4903                           ;main.c: 442: void GetDigits(int Time);main.c: 443: {;main.c: 444:     countdown = Time;
  4904  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  4905  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  4906  0F0D  082D               	movf	GetDigits@Time,w
  4907  0F0E  00AF               	movwf	??_GetDigits
  4908  0F0F  082F               	movf	??_GetDigits,w
  4909  0F10  00DA               	movwf	_countdown
  4910  0F11                     l2863:	
  4911                           
  4912                           ;main.c: 445:     centinaia = countdown / 100;
  4913  0F11  3064               	movlw	100
  4914  0F12  00A4               	movwf	___awdiv@divisor
  4915  0F13  3000               	movlw	0
  4916  0F14  00A5               	movwf	___awdiv@divisor+1
  4917  0F15  085A               	movf	_countdown,w
  4918  0F16  00AF               	movwf	??_GetDigits
  4919  0F17  01B0               	clrf	??_GetDigits+1
  4920  0F18  082F               	movf	??_GetDigits,w
  4921  0F19  00A6               	movwf	___awdiv@dividend
  4922  0F1A  0830               	movf	??_GetDigits+1,w
  4923  0F1B  00A7               	movwf	___awdiv@dividend+1
  4924  0F1C  120A  158A  26A2  120A  158A  	fcall	___awdiv
  4925  0F21  1283               	bcf	3,5	;RP0=0, select bank0
  4926  0F22  1303               	bcf	3,6	;RP1=0, select bank0
  4927  0F23  0824               	movf	?___awdiv,w
  4928  0F24  00B1               	movwf	??_GetDigits+2
  4929  0F25  0831               	movf	??_GetDigits+2,w
  4930  0F26  00DD               	movwf	_centinaia
  4931  0F27                     l2865:	
  4932                           
  4933                           ;main.c: 446:     decine = (countdown % 100) / 10;
  4934  0F27  300A               	movlw	10
  4935  0F28  00A4               	movwf	___awdiv@divisor
  4936  0F29  3000               	movlw	0
  4937  0F2A  00A5               	movwf	___awdiv@divisor+1
  4938  0F2B  085A               	movf	_countdown,w
  4939  0F2C  00AF               	movwf	??_GetDigits
  4940  0F2D  01B0               	clrf	??_GetDigits+1
  4941  0F2E  082F               	movf	??_GetDigits,w
  4942  0F2F  00A2               	movwf	___awmod@dividend
  4943  0F30  0830               	movf	??_GetDigits+1,w
  4944  0F31  00A3               	movwf	___awmod@dividend+1
  4945  0F32  3064               	movlw	100
  4946  0F33  00A0               	movwf	___awmod@divisor
  4947  0F34  3000               	movlw	0
  4948  0F35  00A1               	movwf	___awmod@divisor+1
  4949  0F36  120A  158A  25E4  120A  158A  	fcall	___awmod
  4950  0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  4951  0F3C  1303               	bcf	3,6	;RP1=0, select bank0
  4952  0F3D  0821               	movf	?___awmod+1,w
  4953  0F3E  00A7               	movwf	___awdiv@dividend+1
  4954  0F3F  0820               	movf	?___awmod,w
  4955  0F40  00A6               	movwf	___awdiv@dividend
  4956  0F41  120A  158A  26A2  120A  158A  	fcall	___awdiv
  4957  0F46  1283               	bcf	3,5	;RP0=0, select bank0
  4958  0F47  1303               	bcf	3,6	;RP1=0, select bank0
  4959  0F48  0824               	movf	?___awdiv,w
  4960  0F49  00B1               	movwf	??_GetDigits+2
  4961  0F4A  0831               	movf	??_GetDigits+2,w
  4962  0F4B  00DE               	movwf	_decine
  4963  0F4C                     l2867:	
  4964                           
  4965                           ;main.c: 447:     unita = (countdown % 100) % 10;
  4966  0F4C  085A               	movf	_countdown,w
  4967  0F4D  00AF               	movwf	??_GetDigits
  4968  0F4E  01B0               	clrf	??_GetDigits+1
  4969  0F4F  082F               	movf	??_GetDigits,w
  4970  0F50  00A2               	movwf	___awmod@dividend
  4971  0F51  0830               	movf	??_GetDigits+1,w
  4972  0F52  00A3               	movwf	___awmod@dividend+1
  4973  0F53  3064               	movlw	100
  4974  0F54  00A0               	movwf	___awmod@divisor
  4975  0F55  3000               	movlw	0
  4976  0F56  00A1               	movwf	___awmod@divisor+1
  4977  0F57  120A  158A  25E4  120A  158A  	fcall	___awmod
  4978  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  4979  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  4980  0F5E  0821               	movf	?___awmod+1,w
  4981  0F5F  00B3               	movwf	_GetDigits$1147+1
  4982  0F60  0820               	movf	?___awmod,w
  4983  0F61  00B2               	movwf	_GetDigits$1147
  4984  0F62                     l2869:	
  4985                           
  4986                           ;main.c: 447:     unita = (countdown % 100) % 10;
  4987  0F62  300A               	movlw	10
  4988  0F63  00A0               	movwf	___awmod@divisor
  4989  0F64  3000               	movlw	0
  4990  0F65  00A1               	movwf	___awmod@divisor+1
  4991  0F66  0833               	movf	_GetDigits$1147+1,w
  4992  0F67  00A3               	movwf	___awmod@dividend+1
  4993  0F68  0832               	movf	_GetDigits$1147,w
  4994  0F69  00A2               	movwf	___awmod@dividend
  4995  0F6A  120A  158A  25E4  120A  158A  	fcall	___awmod
  4996  0F6F  1283               	bcf	3,5	;RP0=0, select bank0
  4997  0F70  1303               	bcf	3,6	;RP1=0, select bank0
  4998  0F71  0820               	movf	?___awmod,w
  4999  0F72  00AF               	movwf	??_GetDigits
  5000  0F73  082F               	movf	??_GetDigits,w
  5001  0F74  00DF               	movwf	_unita
  5002  0F75                     l304:	
  5003  0F75  0008               	return
  5004  0F76                     __end_of_GetDigits:	
  5005                           
  5006                           	psect	text17
  5007  0DE4                     __ptext17:	
  5008 ;; *************** function ___awmod *****************
  5009 ;; Defined at:
  5010 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;  divisor         2    0[BANK0 ] int 
  5013 ;;  dividend        2    2[BANK0 ] int 
  5014 ;; Auto vars:     Size  Location     Type
  5015 ;;  sign            1    6[COMMON] unsigned char 
  5016 ;;  counter         1    5[COMMON] unsigned char 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  2    0[BANK0 ] int 
  5019 ;; Registers used:
  5020 ;;		wreg, status,2, status,0
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5026 ;;      Params:         0       4       0       0       0
  5027 ;;      Locals:         2       0       0       0       0
  5028 ;;      Temps:          1       0       0       0       0
  5029 ;;      Totals:         3       4       0       0       0
  5030 ;;Total ram usage:        7 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    2
  5033 ;; This function calls:
  5034 ;;		Nothing
  5035 ;; This function is called by:
  5036 ;;		_main
  5037 ;;		_GetDigits
  5038 ;;		_intToString
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           
  5043                           ;psect for function ___awmod
  5044  0DE4                     ___awmod:	
  5045  0DE4                     l2701:	
  5046                           ;incstack = 0
  5047                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5048                           
  5049  0DE4  01F6               	clrf	___awmod@sign
  5050  0DE5                     l2703:	
  5051  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  5052  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
  5053  0DE7  1FA3               	btfss	___awmod@dividend+1,7
  5054  0DE8  2DEA               	goto	u2681
  5055  0DE9  2DEB               	goto	u2680
  5056  0DEA                     u2681:	
  5057  0DEA  2DF2               	goto	l2709
  5058  0DEB                     u2680:	
  5059  0DEB                     l2705:	
  5060  0DEB  09A2               	comf	___awmod@dividend,f
  5061  0DEC  09A3               	comf	___awmod@dividend+1,f
  5062  0DED  0AA2               	incf	___awmod@dividend,f
  5063  0DEE  1903               	skipnz
  5064  0DEF  0AA3               	incf	___awmod@dividend+1,f
  5065  0DF0                     l2707:	
  5066  0DF0  01F6               	clrf	___awmod@sign
  5067  0DF1  0AF6               	incf	___awmod@sign,f
  5068  0DF2                     l2709:	
  5069  0DF2  1FA1               	btfss	___awmod@divisor+1,7
  5070  0DF3  2DF5               	goto	u2691
  5071  0DF4  2DF6               	goto	u2690
  5072  0DF5                     u2691:	
  5073  0DF5  2DFB               	goto	l2713
  5074  0DF6                     u2690:	
  5075  0DF6                     l2711:	
  5076  0DF6  09A0               	comf	___awmod@divisor,f
  5077  0DF7  09A1               	comf	___awmod@divisor+1,f
  5078  0DF8  0AA0               	incf	___awmod@divisor,f
  5079  0DF9  1903               	skipnz
  5080  0DFA  0AA1               	incf	___awmod@divisor+1,f
  5081  0DFB                     l2713:	
  5082  0DFB  0820               	movf	___awmod@divisor,w
  5083  0DFC  0421               	iorwf	___awmod@divisor+1,w
  5084  0DFD  1903               	btfsc	3,2
  5085  0DFE  2E00               	goto	u2701
  5086  0DFF  2E01               	goto	u2700
  5087  0E00                     u2701:	
  5088  0E00  2E30               	goto	l2731
  5089  0E01                     u2700:	
  5090  0E01                     l2715:	
  5091  0E01  01F5               	clrf	___awmod@counter
  5092  0E02  0AF5               	incf	___awmod@counter,f
  5093  0E03  2E0F               	goto	l2721
  5094  0E04                     l2717:	
  5095  0E04  3001               	movlw	1
  5096  0E05                     u2715:	
  5097  0E05  1003               	clrc
  5098  0E06  0DA0               	rlf	___awmod@divisor,f
  5099  0E07  0DA1               	rlf	___awmod@divisor+1,f
  5100  0E08  3EFF               	addlw	-1
  5101  0E09  1D03               	skipz
  5102  0E0A  2E05               	goto	u2715
  5103  0E0B                     l2719:	
  5104  0E0B  3001               	movlw	1
  5105  0E0C  00F4               	movwf	??___awmod
  5106  0E0D  0874               	movf	??___awmod,w
  5107  0E0E  07F5               	addwf	___awmod@counter,f
  5108  0E0F                     l2721:	
  5109  0E0F  1FA1               	btfss	___awmod@divisor+1,7
  5110  0E10  2E12               	goto	u2721
  5111  0E11  2E13               	goto	u2720
  5112  0E12                     u2721:	
  5113  0E12  2E04               	goto	l2717
  5114  0E13                     u2720:	
  5115  0E13                     l2723:	
  5116  0E13  0821               	movf	___awmod@divisor+1,w
  5117  0E14  0223               	subwf	___awmod@dividend+1,w
  5118  0E15  1D03               	skipz
  5119  0E16  2E19               	goto	u2735
  5120  0E17  0820               	movf	___awmod@divisor,w
  5121  0E18  0222               	subwf	___awmod@dividend,w
  5122  0E19                     u2735:	
  5123  0E19  1C03               	skipc
  5124  0E1A  2E1C               	goto	u2731
  5125  0E1B  2E1D               	goto	u2730
  5126  0E1C                     u2731:	
  5127  0E1C  2E23               	goto	l2727
  5128  0E1D                     u2730:	
  5129  0E1D                     l2725:	
  5130  0E1D  0820               	movf	___awmod@divisor,w
  5131  0E1E  02A2               	subwf	___awmod@dividend,f
  5132  0E1F  0821               	movf	___awmod@divisor+1,w
  5133  0E20  1C03               	skipc
  5134  0E21  03A3               	decf	___awmod@dividend+1,f
  5135  0E22  02A3               	subwf	___awmod@dividend+1,f
  5136  0E23                     l2727:	
  5137  0E23  3001               	movlw	1
  5138  0E24                     u2745:	
  5139  0E24  1003               	clrc
  5140  0E25  0CA1               	rrf	___awmod@divisor+1,f
  5141  0E26  0CA0               	rrf	___awmod@divisor,f
  5142  0E27  3EFF               	addlw	-1
  5143  0E28  1D03               	skipz
  5144  0E29  2E24               	goto	u2745
  5145  0E2A                     l2729:	
  5146  0E2A  3001               	movlw	1
  5147  0E2B  02F5               	subwf	___awmod@counter,f
  5148  0E2C  1D03               	btfss	3,2
  5149  0E2D  2E2F               	goto	u2751
  5150  0E2E  2E30               	goto	u2750
  5151  0E2F                     u2751:	
  5152  0E2F  2E13               	goto	l2723
  5153  0E30                     u2750:	
  5154  0E30                     l2731:	
  5155  0E30  0876               	movf	___awmod@sign,w
  5156  0E31  1903               	btfsc	3,2
  5157  0E32  2E34               	goto	u2761
  5158  0E33  2E35               	goto	u2760
  5159  0E34                     u2761:	
  5160  0E34  2E3A               	goto	l2735
  5161  0E35                     u2760:	
  5162  0E35                     l2733:	
  5163  0E35  09A2               	comf	___awmod@dividend,f
  5164  0E36  09A3               	comf	___awmod@dividend+1,f
  5165  0E37  0AA2               	incf	___awmod@dividend,f
  5166  0E38  1903               	skipnz
  5167  0E39  0AA3               	incf	___awmod@dividend+1,f
  5168  0E3A                     l2735:	
  5169  0E3A  0823               	movf	___awmod@dividend+1,w
  5170  0E3B  00A1               	movwf	?___awmod+1
  5171  0E3C  0822               	movf	___awmod@dividend,w
  5172  0E3D  00A0               	movwf	?___awmod
  5173  0E3E                     l585:	
  5174  0E3E  0008               	return
  5175  0E3F                     __end_of___awmod:	
  5176                           
  5177                           	psect	text18
  5178  0EA2                     __ptext18:	
  5179 ;; *************** function ___awdiv *****************
  5180 ;; Defined at:
  5181 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  divisor         2    4[BANK0 ] int 
  5184 ;;  dividend        2    6[BANK0 ] int 
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;  quotient        2   11[BANK0 ] int 
  5187 ;;  sign            1   10[BANK0 ] unsigned char 
  5188 ;;  counter         1    9[BANK0 ] unsigned char 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  2    4[BANK0 ] int 
  5191 ;; Registers used:
  5192 ;;		wreg, status,2, status,0
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5198 ;;      Params:         0       4       0       0       0
  5199 ;;      Locals:         0       4       0       0       0
  5200 ;;      Temps:          0       1       0       0       0
  5201 ;;      Totals:         0       9       0       0       0
  5202 ;;Total ram usage:        9 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    2
  5205 ;; This function calls:
  5206 ;;		Nothing
  5207 ;; This function is called by:
  5208 ;;		_map
  5209 ;;		_GetDigits
  5210 ;;		_intToString
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           
  5215                           ;psect for function ___awdiv
  5216  0EA2                     ___awdiv:	
  5217  0EA2                     l2657:	
  5218                           ;incstack = 0
  5219                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5220                           
  5221  0EA2  1283               	bcf	3,5	;RP0=0, select bank0
  5222  0EA3  1303               	bcf	3,6	;RP1=0, select bank0
  5223  0EA4  01AA               	clrf	___awdiv@sign
  5224  0EA5                     l2659:	
  5225  0EA5  1FA5               	btfss	___awdiv@divisor+1,7
  5226  0EA6  2EA8               	goto	u2581
  5227  0EA7  2EA9               	goto	u2580
  5228  0EA8                     u2581:	
  5229  0EA8  2EB0               	goto	l2665
  5230  0EA9                     u2580:	
  5231  0EA9                     l2661:	
  5232  0EA9  09A4               	comf	___awdiv@divisor,f
  5233  0EAA  09A5               	comf	___awdiv@divisor+1,f
  5234  0EAB  0AA4               	incf	___awdiv@divisor,f
  5235  0EAC  1903               	skipnz
  5236  0EAD  0AA5               	incf	___awdiv@divisor+1,f
  5237  0EAE                     l2663:	
  5238  0EAE  01AA               	clrf	___awdiv@sign
  5239  0EAF  0AAA               	incf	___awdiv@sign,f
  5240  0EB0                     l2665:	
  5241  0EB0  1FA7               	btfss	___awdiv@dividend+1,7
  5242  0EB1  2EB3               	goto	u2591
  5243  0EB2  2EB4               	goto	u2590
  5244  0EB3                     u2591:	
  5245  0EB3  2EBD               	goto	l2671
  5246  0EB4                     u2590:	
  5247  0EB4                     l2667:	
  5248  0EB4  09A6               	comf	___awdiv@dividend,f
  5249  0EB5  09A7               	comf	___awdiv@dividend+1,f
  5250  0EB6  0AA6               	incf	___awdiv@dividend,f
  5251  0EB7  1903               	skipnz
  5252  0EB8  0AA7               	incf	___awdiv@dividend+1,f
  5253  0EB9                     l2669:	
  5254  0EB9  3001               	movlw	1
  5255  0EBA  00A8               	movwf	??___awdiv
  5256  0EBB  0828               	movf	??___awdiv,w
  5257  0EBC  06AA               	xorwf	___awdiv@sign,f
  5258  0EBD                     l2671:	
  5259  0EBD  01AB               	clrf	___awdiv@quotient
  5260  0EBE  01AC               	clrf	___awdiv@quotient+1
  5261  0EBF                     l2673:	
  5262  0EBF  0824               	movf	___awdiv@divisor,w
  5263  0EC0  0425               	iorwf	___awdiv@divisor+1,w
  5264  0EC1  1903               	btfsc	3,2
  5265  0EC2  2EC4               	goto	u2601
  5266  0EC3  2EC5               	goto	u2600
  5267  0EC4                     u2601:	
  5268  0EC4  2EFC               	goto	l2693
  5269  0EC5                     u2600:	
  5270  0EC5                     l2675:	
  5271  0EC5  01A9               	clrf	___awdiv@counter
  5272  0EC6  0AA9               	incf	___awdiv@counter,f
  5273  0EC7  2ED3               	goto	l2681
  5274  0EC8                     l2677:	
  5275  0EC8  3001               	movlw	1
  5276  0EC9                     u2615:	
  5277  0EC9  1003               	clrc
  5278  0ECA  0DA4               	rlf	___awdiv@divisor,f
  5279  0ECB  0DA5               	rlf	___awdiv@divisor+1,f
  5280  0ECC  3EFF               	addlw	-1
  5281  0ECD  1D03               	skipz
  5282  0ECE  2EC9               	goto	u2615
  5283  0ECF                     l2679:	
  5284  0ECF  3001               	movlw	1
  5285  0ED0  00A8               	movwf	??___awdiv
  5286  0ED1  0828               	movf	??___awdiv,w
  5287  0ED2  07A9               	addwf	___awdiv@counter,f
  5288  0ED3                     l2681:	
  5289  0ED3  1FA5               	btfss	___awdiv@divisor+1,7
  5290  0ED4  2ED6               	goto	u2621
  5291  0ED5  2ED7               	goto	u2620
  5292  0ED6                     u2621:	
  5293  0ED6  2EC8               	goto	l2677
  5294  0ED7                     u2620:	
  5295  0ED7                     l2683:	
  5296  0ED7  3001               	movlw	1
  5297  0ED8                     u2635:	
  5298  0ED8  1003               	clrc
  5299  0ED9  0DAB               	rlf	___awdiv@quotient,f
  5300  0EDA  0DAC               	rlf	___awdiv@quotient+1,f
  5301  0EDB  3EFF               	addlw	-1
  5302  0EDC  1D03               	skipz
  5303  0EDD  2ED8               	goto	u2635
  5304  0EDE  0825               	movf	___awdiv@divisor+1,w
  5305  0EDF  0227               	subwf	___awdiv@dividend+1,w
  5306  0EE0  1D03               	skipz
  5307  0EE1  2EE4               	goto	u2645
  5308  0EE2  0824               	movf	___awdiv@divisor,w
  5309  0EE3  0226               	subwf	___awdiv@dividend,w
  5310  0EE4                     u2645:	
  5311  0EE4  1C03               	skipc
  5312  0EE5  2EE7               	goto	u2641
  5313  0EE6  2EE8               	goto	u2640
  5314  0EE7                     u2641:	
  5315  0EE7  2EEF               	goto	l2689
  5316  0EE8                     u2640:	
  5317  0EE8                     l2685:	
  5318  0EE8  0824               	movf	___awdiv@divisor,w
  5319  0EE9  02A6               	subwf	___awdiv@dividend,f
  5320  0EEA  0825               	movf	___awdiv@divisor+1,w
  5321  0EEB  1C03               	skipc
  5322  0EEC  03A7               	decf	___awdiv@dividend+1,f
  5323  0EED  02A7               	subwf	___awdiv@dividend+1,f
  5324  0EEE                     l2687:	
  5325  0EEE  142B               	bsf	___awdiv@quotient,0
  5326  0EEF                     l2689:	
  5327  0EEF  3001               	movlw	1
  5328  0EF0                     u2655:	
  5329  0EF0  1003               	clrc
  5330  0EF1  0CA5               	rrf	___awdiv@divisor+1,f
  5331  0EF2  0CA4               	rrf	___awdiv@divisor,f
  5332  0EF3  3EFF               	addlw	-1
  5333  0EF4  1D03               	skipz
  5334  0EF5  2EF0               	goto	u2655
  5335  0EF6                     l2691:	
  5336  0EF6  3001               	movlw	1
  5337  0EF7  02A9               	subwf	___awdiv@counter,f
  5338  0EF8  1D03               	btfss	3,2
  5339  0EF9  2EFB               	goto	u2661
  5340  0EFA  2EFC               	goto	u2660
  5341  0EFB                     u2661:	
  5342  0EFB  2ED7               	goto	l2683
  5343  0EFC                     u2660:	
  5344  0EFC                     l2693:	
  5345  0EFC  082A               	movf	___awdiv@sign,w
  5346  0EFD  1903               	btfsc	3,2
  5347  0EFE  2F00               	goto	u2671
  5348  0EFF  2F01               	goto	u2670
  5349  0F00                     u2671:	
  5350  0F00  2F06               	goto	l2697
  5351  0F01                     u2670:	
  5352  0F01                     l2695:	
  5353  0F01  09AB               	comf	___awdiv@quotient,f
  5354  0F02  09AC               	comf	___awdiv@quotient+1,f
  5355  0F03  0AAB               	incf	___awdiv@quotient,f
  5356  0F04  1903               	skipnz
  5357  0F05  0AAC               	incf	___awdiv@quotient+1,f
  5358  0F06                     l2697:	
  5359  0F06  082C               	movf	___awdiv@quotient+1,w
  5360  0F07  00A5               	movwf	?___awdiv+1
  5361  0F08  082B               	movf	___awdiv@quotient,w
  5362  0F09  00A4               	movwf	?___awdiv
  5363  0F0A                     l572:	
  5364  0F0A  0008               	return
  5365  0F0B                     __end_of___awdiv:	
  5366                           
  5367                           	psect	text19
  5368  0CA6                     __ptext19:	
  5369 ;; *************** function _ADC_Read *****************
  5370 ;; Defined at:
  5371 ;;		line 369 in file "main.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;  canale          1    wreg     unsigned char 
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;  canale          1    0[BANK0 ] unsigned char 
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  2    4[COMMON] int 
  5378 ;; Registers used:
  5379 ;;		wreg, status,2, status,0
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5385 ;;      Params:         2       0       0       0       0
  5386 ;;      Locals:         0       1       0       0       0
  5387 ;;      Temps:          1       0       0       0       0
  5388 ;;      Totals:         3       1       0       0       0
  5389 ;;Total ram usage:        4 bytes
  5390 ;; Hardware stack levels used:    1
  5391 ;; Hardware stack levels required when called:    2
  5392 ;; This function calls:
  5393 ;;		Nothing
  5394 ;; This function is called by:
  5395 ;;		_main
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           
  5400                           ;psect for function _ADC_Read
  5401  0CA6                     _ADC_Read:	
  5402                           
  5403                           ;incstack = 0
  5404                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5405                           ;ADC_Read@canale stored from wreg
  5406  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  5407  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  5408  0CA8  00A0               	movwf	ADC_Read@canale
  5409  0CA9                     l2891:	
  5410                           
  5411                           ;main.c: 369: int ADC_Read(char canale);main.c: 370: {;main.c: 371:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  5412  0CA9  0820               	movf	ADC_Read@canale,w
  5413  0CAA  00F6               	movwf	??_ADC_Read
  5414  0CAB  3002               	movlw	2
  5415  0CAC                     u2915:	
  5416  0CAC  1003               	clrc
  5417  0CAD  0DF6               	rlf	??_ADC_Read,f
  5418  0CAE  3EFF               	addlw	-1
  5419  0CAF  1D03               	skipz
  5420  0CB0  2CAC               	goto	u2915
  5421  0CB1  1003               	clrc
  5422  0CB2  0D76               	rlf	??_ADC_Read,w
  5423  0CB3  3801               	iorlw	1
  5424  0CB4  009F               	movwf	31	;volatile
  5425  0CB5                     l2893:	
  5426                           
  5427                           ;main.c: 372:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5428  0CB5  3005               	movlw	5
  5429  0CB6  00F6               	movwf	??_ADC_Read
  5430  0CB7                     u3327:	
  5431  0CB7  0BF6               	decfsz	??_ADC_Read,f
  5432  0CB8  2CB7               	goto	u3327
  5433  0CB9                     l2895:	
  5434                           
  5435                           ;main.c: 373:     GO_nDONE = 1;
  5436  0CB9  1283               	bcf	3,5	;RP0=0, select bank0
  5437  0CBA  1303               	bcf	3,6	;RP1=0, select bank0
  5438  0CBB  151F               	bsf	31,2	;volatile
  5439  0CBC                     l269:	
  5440                           ;main.c: 374:     while (GO_nDONE);
  5441                           
  5442  0CBC  191F               	btfsc	31,2	;volatile
  5443  0CBD  2CBF               	goto	u2921
  5444  0CBE  2CC0               	goto	u2920
  5445  0CBF                     u2921:	
  5446  0CBF  2CBC               	goto	l269
  5447  0CC0                     u2920:	
  5448  0CC0                     l2897:	
  5449                           
  5450                           ;main.c: 375:     return ADRESL + (ADRESH << 8);
  5451  0CC0  081E               	movf	30,w	;volatile
  5452  0CC1  00F5               	movwf	?_ADC_Read+1
  5453  0CC2  1683               	bsf	3,5	;RP0=1, select bank1
  5454  0CC3  1303               	bcf	3,6	;RP1=0, select bank1
  5455  0CC4  081E               	movf	30,w	;volatile
  5456  0CC5  00F4               	movwf	?_ADC_Read
  5457  0CC6                     l272:	
  5458  0CC6  0008               	return
  5459  0CC7                     __end_of_ADC_Read:	
  5460                           
  5461                           	psect	text20
  5462  0E3F                     __ptext20:	
  5463 ;; *************** function _ISR *****************
  5464 ;; Defined at:
  5465 ;;		line 474 in file "main.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;		None
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;		None
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  1    wreg      void 
  5472 ;; Registers used:
  5473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5479 ;;      Params:         0       0       0       0       0
  5480 ;;      Locals:         0       0       0       0       0
  5481 ;;      Temps:          4       0       0       0       0
  5482 ;;      Totals:         4       0       0       0       0
  5483 ;;Total ram usage:        4 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    1
  5486 ;; This function calls:
  5487 ;;		_UART_Read
  5488 ;; This function is called by:
  5489 ;;		Interrupt level 1
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           
  5494                           ;psect for function _ISR
  5495  0E3F                     _ISR:	
  5496  0E3F                     i1l2379:	
  5497                           
  5498                           ;main.c: 477:     if (RCIF && readGateway.Bit == 0)
  5499  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  5500  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  5501  0E41  1E8C               	btfss	12,5	;volatile
  5502  0E42  2E44               	goto	u219_21
  5503  0E43  2E45               	goto	u219_20
  5504  0E44                     u219_21:	
  5505  0E44  2E4E               	goto	i1l2387
  5506  0E45                     u219_20:	
  5507  0E45                     i1l2381:	
  5508  0E45  1862               	btfsc	_readGateway,0
  5509  0E46  2E48               	goto	u220_21
  5510  0E47  2E49               	goto	u220_20
  5511  0E48                     u220_21:	
  5512  0E48  2E4E               	goto	i1l2387
  5513  0E49                     u220_20:	
  5514  0E49                     i1l2383:	
  5515                           
  5516                           ;main.c: 478:     {;main.c: 479:         readGateway.Bit = 1;
  5517  0E49  1462               	bsf	_readGateway,0
  5518                           
  5519                           ;main.c: 480:         readGatewayDone.Bit = 0;
  5520  0E4A  1063               	bcf	_readGatewayDone,0
  5521                           
  5522                           ;main.c: 481:         readGatewayDone.Timeout = 0;
  5523  0E4B  10E3               	bcf	_readGatewayDone,1
  5524  0E4C                     i1l2385:	
  5525                           
  5526                           ;main.c: 482:         dataFromGatewayIndex = 0;
  5527  0E4C  01D9               	clrf	_dataFromGatewayIndex
  5528                           
  5529                           ;main.c: 483:         timerReadFromGateway = 0;
  5530  0E4D  01D8               	clrf	_timerReadFromGateway
  5531  0E4E                     i1l2387:	
  5532                           
  5533                           ;main.c: 485:     if (RCIF && readGateway.Bit == 1)
  5534  0E4E  1E8C               	btfss	12,5	;volatile
  5535  0E4F  2E51               	goto	u221_21
  5536  0E50  2E52               	goto	u221_20
  5537  0E51                     u221_21:	
  5538  0E51  2E69               	goto	i1l2397
  5539  0E52                     u221_20:	
  5540  0E52                     i1l2389:	
  5541  0E52  1C62               	btfss	_readGateway,0
  5542  0E53  2E55               	goto	u222_21
  5543  0E54  2E56               	goto	u222_20
  5544  0E55                     u222_21:	
  5545  0E55  2E69               	goto	i1l2397
  5546  0E56                     u222_20:	
  5547  0E56                     i1l2391:	
  5548                           
  5549                           ;main.c: 486:     {;main.c: 487:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  5550  0E56  120A  158A  2422  120A  158A  	fcall	_UART_Read
  5551  0E5B  00F0               	movwf	??_ISR
  5552  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  5553  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  5554  0E5E  0859               	movf	_dataFromGatewayIndex,w
  5555  0E5F  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  5556  0E60  0084               	movwf	4
  5557  0E61  0870               	movf	??_ISR,w
  5558  0E62  1383               	bcf	3,7	;select IRP bank1
  5559  0E63  0080               	movwf	0
  5560  0E64                     i1l2393:	
  5561                           
  5562                           ;main.c: 488:         dataFromGatewayIndex++;
  5563  0E64  3001               	movlw	1
  5564  0E65  00F0               	movwf	??_ISR
  5565  0E66  0870               	movf	??_ISR,w
  5566  0E67  07D9               	addwf	_dataFromGatewayIndex,f
  5567  0E68                     i1l2395:	
  5568                           
  5569                           ;main.c: 489:         timerReadFromGateway = 0;
  5570  0E68  01D8               	clrf	_timerReadFromGateway
  5571  0E69                     i1l2397:	
  5572                           
  5573                           ;main.c: 494:     if (TMR0IF)
  5574  0E69  1D0B               	btfss	11,2	;volatile
  5575  0E6A  2E6C               	goto	u223_21
  5576  0E6B  2E6D               	goto	u223_20
  5577  0E6C                     u223_21:	
  5578  0E6C  2E80               	goto	i1l2413
  5579  0E6D                     u223_20:	
  5580  0E6D                     i1l2399:	
  5581                           
  5582                           ;main.c: 495:     {;main.c: 496:         TMR0IF = 0;
  5583  0E6D  110B               	bcf	11,2	;volatile
  5584                           
  5585                           ;main.c: 497:         if (!PORTBbits.RB3)
  5586  0E6E  1986               	btfsc	6,3	;volatile
  5587  0E6F  2E71               	goto	u224_21
  5588  0E70  2E72               	goto	u224_20
  5589  0E71                     u224_21:	
  5590  0E71  2E78               	goto	i1l2403
  5591  0E72                     u224_20:	
  5592  0E72                     i1l2401:	
  5593                           
  5594                           ;main.c: 498:         {;main.c: 499:             count++;
  5595  0E72  3001               	movlw	1
  5596  0E73  07D6               	addwf	_count,f
  5597  0E74  1803               	skipnc
  5598  0E75  0AD7               	incf	_count+1,f
  5599  0E76  3000               	movlw	0
  5600  0E77  07D7               	addwf	_count+1,f
  5601  0E78                     i1l2403:	
  5602                           
  5603                           ;main.c: 501:         if (PORTBbits.RB3)
  5604  0E78  1D86               	btfss	6,3	;volatile
  5605  0E79  2E7B               	goto	u225_21
  5606  0E7A  2E7C               	goto	u225_20
  5607  0E7B                     u225_21:	
  5608  0E7B  2E7E               	goto	i1l2411
  5609  0E7C                     u225_20:	
  5610  0E7C                     i1l2409:	
  5611                           
  5612                           ;main.c: 511:             count = 0;
  5613  0E7C  01D6               	clrf	_count
  5614  0E7D  01D7               	clrf	_count+1
  5615  0E7E                     i1l2411:	
  5616                           
  5617                           ;main.c: 513:         TMR0 = 6;
  5618  0E7E  3006               	movlw	6
  5619  0E7F  0081               	movwf	1	;volatile
  5620  0E80                     i1l2413:	
  5621                           
  5622                           ;main.c: 516:     if (TMR1IF)
  5623  0E80  1C0C               	btfss	12,0	;volatile
  5624  0E81  2E83               	goto	u226_21
  5625  0E82  2E84               	goto	u226_20
  5626  0E83                     u226_21:	
  5627  0E83  2E99               	goto	i1l333
  5628  0E84                     u226_20:	
  5629  0E84                     i1l2415:	
  5630                           
  5631                           ;main.c: 517:     {;main.c: 518:         TMR1IF = 0;
  5632  0E84  100C               	bcf	12,0	;volatile
  5633  0E85                     i1l2417:	
  5634                           
  5635                           ;main.c: 519:         count_lux++;
  5636  0E85  3001               	movlw	1
  5637  0E86  00F0               	movwf	??_ISR
  5638  0E87  0870               	movf	??_ISR,w
  5639  0E88  07F9               	addwf	_count_lux,f
  5640  0E89                     i1l2419:	
  5641                           
  5642                           ;main.c: 521:         if (count_lux >= 20)
  5643  0E89  3014               	movlw	20
  5644  0E8A  0279               	subwf	_count_lux,w
  5645  0E8B  1C03               	skipc
  5646  0E8C  2E8E               	goto	u227_21
  5647  0E8D  2E8F               	goto	u227_20
  5648  0E8E                     u227_21:	
  5649  0E8E  2E95               	goto	i1l2427
  5650  0E8F                     u227_20:	
  5651  0E8F                     i1l2421:	
  5652                           
  5653                           ;main.c: 522:         {;main.c: 523:             secondPassed.Bit = 1;
  5654  0E8F  1461               	bsf	_secondPassed,0
  5655  0E90                     i1l2423:	
  5656                           
  5657                           ;main.c: 524:             count_lux = 0;
  5658  0E90  01F9               	clrf	_count_lux
  5659  0E91                     i1l2425:	
  5660                           
  5661                           ;main.c: 525:             timerReadFromGateway++;
  5662  0E91  3001               	movlw	1
  5663  0E92  00F0               	movwf	??_ISR
  5664  0E93  0870               	movf	??_ISR,w
  5665  0E94  07D8               	addwf	_timerReadFromGateway,f
  5666  0E95                     i1l2427:	
  5667                           
  5668                           ;main.c: 528:         TMR1H = 60;
  5669  0E95  303C               	movlw	60
  5670  0E96  008F               	movwf	15	;volatile
  5671  0E97                     i1l2429:	
  5672                           
  5673                           ;main.c: 529:         TMR1L = 176;
  5674  0E97  30B0               	movlw	176
  5675  0E98  008E               	movwf	14	;volatile
  5676  0E99                     i1l333:	
  5677  0E99  0873               	movf	??_ISR+3,w
  5678  0E9A  008A               	movwf	10
  5679  0E9B  0872               	movf	??_ISR+2,w
  5680  0E9C  0084               	movwf	4
  5681  0E9D  0E71               	swapf	(??_ISR+1)^(0+4294967168),w
  5682  0E9E  0083               	movwf	3
  5683  0E9F  0EFE               	swapf	btemp,f
  5684  0EA0  0E7E               	swapf	btemp,w
  5685  0EA1  0009               	retfie
  5686  0EA2                     __end_of_ISR:	
  5687                           
  5688                           	psect	intentry
  5689  0004                     __pintentry:	
  5690                           ;incstack = 0
  5691                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5692                           
  5693  0004                     interrupt_function:	
  5694  007E                     saved_w	set	btemp
  5695  0004  00FE               	movwf	btemp
  5696  0005  0E03               	swapf	3,w
  5697  0006  00F1               	movwf	??_ISR+1
  5698  0007  0804               	movf	4,w
  5699  0008  00F2               	movwf	??_ISR+2
  5700  0009  080A               	movf	10,w
  5701  000A  00F3               	movwf	??_ISR+3
  5702  000B  120A  158A  2E3F   	ljmp	_ISR
  5703                           
  5704                           	psect	text21
  5705  0C22                     __ptext21:	
  5706 ;; *************** function _UART_Read *****************
  5707 ;; Defined at:
  5708 ;;		line 406 in file "main.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;		None
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;		None
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  1    wreg      unsigned char 
  5715 ;; Registers used:
  5716 ;;		wreg
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5722 ;;      Params:         0       0       0       0       0
  5723 ;;      Locals:         0       0       0       0       0
  5724 ;;      Temps:          0       0       0       0       0
  5725 ;;      Totals:         0       0       0       0       0
  5726 ;;Total ram usage:        0 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; This function calls:
  5729 ;;		Nothing
  5730 ;; This function is called by:
  5731 ;;		_ISR
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           
  5736                           ;psect for function _UART_Read
  5737  0C22                     _UART_Read:	
  5738  0C22                     i1l2115:	
  5739                           ;incstack = 0
  5740                           ; Regs used in _UART_Read: [wreg]
  5741                           
  5742  0C22                     i1l290:	
  5743                           ;main.c: 408:     while (!RCIF);
  5744                           
  5745  0C22  1283               	bcf	3,5	;RP0=0, select bank0
  5746  0C23  1303               	bcf	3,6	;RP1=0, select bank0
  5747  0C24  1E8C               	btfss	12,5	;volatile
  5748  0C25  2C27               	goto	u180_21
  5749  0C26  2C28               	goto	u180_20
  5750  0C27                     u180_21:	
  5751  0C27  2C22               	goto	i1l290
  5752  0C28                     u180_20:	
  5753  0C28                     i1l292:	
  5754                           
  5755                           ;main.c: 409:     RCIF = 0;
  5756  0C28  128C               	bcf	12,5	;volatile
  5757  0C29                     i1l2117:	
  5758                           
  5759                           ;main.c: 410:     return RCREG;
  5760  0C29  081A               	movf	26,w	;volatile
  5761  0C2A                     i1l293:	
  5762  0C2A  0008               	return
  5763  0C2B                     __end_of_UART_Read:	
  5764  007E                     btemp	set	126	;btemp
  5765  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        33
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     42      69
    BANK1            80      0      71
    BANK3            96      0      96
    BANK2            96     20      92

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 


Critical Paths under _main in COMMON

    _main->_ADC_Read
    _main->_SetDisplay
    _main->___awmod
    _sendByte->_BuildByte
    _sendByte->_UART_Write_Text
    _UART_Write_Text->_UART_TxChar
    _map->_ADC_Read
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _GetDigits->___awmod
    ___awdiv->___awmod

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod
    ___awdiv->___wmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   16912
                                             26 BANK0     16    16      0
                                              0 BANK2     20    20      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                          _bitParita
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    2616
                                             18 BANK0      8     6      2
                          _BuildByte
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      3     3      0     197
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (3) _UART_TxChar                                          1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1141
                                              4 COMMON     2     0      2
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4368
                                             13 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1636
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1113
                                              1 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     276
                                              4 COMMON     3     2      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     226
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             14 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              4 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3    1204
                                              4 COMMON     3     0      3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    14     8      6     716
                                              4 COMMON     2     2      0
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              8     6      2     232
                                              4 COMMON     2     0      2
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             13 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              4 COMMON     3     3      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              4 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              4 COMMON     3     1      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                          _UART_Read
 ---------------------------------------------------------------------------------
 (5) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   _bitParita
     _bitChange
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_Write_Text
       _UART_TxChar

 _ISR (ROOT)
   _UART_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     14      5C      11       95.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     152      12        0.0%
ABS                  0      0     152       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Jun 19 13:04:58 2020

                        pc 0002             ___bmul@product 0020                __CFG_CP$OFF 0000  
                       l83 0DA3                         l98 0D6E               ___awdiv@sign 002A  
                       _s0 00BB                         _s1 00AF                         _s2 01E4  
                       _s3 01D8                         _s4 01CC                         _s5 01C0  
                       _s6 01B4                         _s7 01A8                         _s8 019C  
                       _s9 0190                         fsr 0004        ___wmul@multiplicand 0022  
           _GetDigits$1147 0032                __CFG_LVP$ON 0000                        l110 061B  
                      l111 0627                        l113 065C                        l105 05CB  
                      l106 05D7                        l220 015E                        l212 00C3  
                      l301 0DE3                        l125 06FC                        l214 0098  
                      l119 06AB                        l304 0F75                        l128 0724  
                      l225 0255                        l307 0C6E                        l421 0D0F  
                      l319 0FFF                        l272 0CC6                        l280 0C32  
                      l281 0C35                        l249 03C1                        l266 0C46  
                      l275 07FB                        l419 0CF7                        l269 0CBC  
                      l445 0C85                        l278 0C2C                        l287 0CE8  
                      l298 0D3D                        l572 0F0A                        l484 0739  
                      l494 07C1                        l585 0E3E               __CFG_CPD$OFF 0000  
                      _ISR 0E3F                        _s10 014C                        _s11 0140  
                      _s12 0134                        _s13 0128                        _s14 011C  
                      _s15 0110                        _car 004E                        _map 0D6F  
                      fsr0 0004                        indf 0000               ___awmod@sign 0076  
             __CFG_FOSC$HS 0000                       ?_ISR 0070                main@colorId 0159  
                     l3001 0157                       l3011 016C                       l3101 0465  
                     l3021 0216                       l3013 016D                       l3005 0164  
                     l3103 0469                       l3031 022D                       l3007 0165  
                     l3121 049C                       l3113 048D                       l3041 0267  
                     l3033 0250                       l3025 021D                       l3017 0174  
                     l3131 0557                       l3115 0490                       l3107 0477  
                     l3051 02E1                       l3043 02A0                       l3035 025A  
                     l3019 01C9                       l3141 0583                       l3133 0568  
                     l3109 0486                       l3125 04A5                       l3061 0341  
                     l3045 02A3                       l3037 025E                       l3053 031B  
                     l3029 0226                       l2511 0C2C                       l3143 0588  
                     l3135 0579                       l3127 04B2                       l3119 0497  
                     l3063 0346                       l3055 0323                       l3047 02AB  
                     l3039 0266                       l2513 0C33                       l2601 0CDD  
                     l3137 057C                       l3129 0546                       l3081 03BF  
                     l3241 0391                       l3065 034B                       l3057 0328  
                     l3073 0389                       l3049 02DE                       l3243 0FE0  
                     l2523 0D5F                       l2515 0D41                       l2611 0D05  
                     l2603 0CE9                       l2531 067C                       l3091 03DB  
                     l3083 03C5                       l3067 0360                       l3059 032D  
                     l3075 039F                       l2701 0DE4                       l2621 072C  
                     l2517 0D50                       l2613 0D0B                       l2605 0CEB  
                     l2541 0680                       l2533 067D                       l3085 03C9  
                     l3077 03B7                       l3069 0375                       l2711 0DF6  
                     l2703 0DE5                       l2631 075C                       l2623 073D  
                     l2607 0CF1                       l2551 069E                       l2535 067E  
                     l2527 0660                       l3095 03E9                       l3087 03CA  
                     l3079 03BB                       l3239 00BB                       l2721 0E0F  
                     l2713 0DFB                       l2705 0DEB                       l2641 078B  
                     l2633 075F                       l2625 0748                       l2617 0725  
                     l2801 0C41                       l2609 0CFE                       l2561 06C0  
                     l2553 06B1                       l2529 066F                       l3097 045C  
                     l3089 03D7                       l2723 0E13                       l2715 0E01  
                     l2731 0E30                       l2707 0DF0                       l2651 07AE  
                     l2643 0799                       l2635 076C                       l2627 074C  
                     l2619 0728                       l2811 07FA                       l2803 07C2  
                     l2563 06CD                       l2555 06B9                       l2547 0684  
                     l2661 0EA9                       l2733 0E35                       l2725 0E1D  
                     l2717 0E04                       l2709 0DF2                       l2813 0F76  
                     l2653 07B9                       l2645 079A                       l2637 0770  
                     l2629 0754                       l2805 07CA                       l2901 0C72  
                     l2581 0702                       l2549 0698                       l2671 0EBD  
                     l2663 0EAE                       l2735 0E3A                       l2727 0E23  
                     l2719 0E0B                       l2647 07A3                       l2639 0779  
                     l2807 07F8                       l2911 0C84                       l2903 0C73  
                     l2743 0597                       l2591 0723                       l2583 070F  
                     l2575 06D5                       l2559 06BA                       l2681 0ED3  
                     l2673 0EBF                       l2665 0EB0                       l2657 0EA2  
                     l2729 0E2A                       l2841 0FF9                       l2825 0F79  
                     l2833 0FD6                       l2649 07A9                       l2809 07F9  
                     l2905 0C77                       l2761 05D1                       l2577 06E9  
                     l2569 06D1                       l2691 0EF6                       l2683 0ED7  
                     l2675 0EC5                       l2667 0EB4                       l2659 0EA5  
                     l2851 0DBB                       l2827 0F98                       l2835 0FEB  
                     l2819 0F77                       l2907 0C7B                       l2763 05D3  
                     l2755 05A2                       l2739 0D6F                       l2587 0710  
                     l2579 06EF                       l2595 0CCA                       l2931 0055  
                     l2685 0EE8                       l2677 0EC8                       l2693 0EFC  
                     l2669 0EB9                       l2861 0F0B                       l2853 0DCC  
                     l2837 0FEF                       l2829 0FB7                       l2909 0C7D  
                     l2781 0608                       l2773 05EE                       l2765 05DD  
                     l2757 05B8                       l2749 059E                       l2589 0716  
                     l2597 0CCC                       l2941 0087                       l2933 0060  
                     ?_map 002D                       l2695 0F01                       l2687 0EEE  
                     l2679 0ECF                       l2863 0F11                       l2855 0DD7  
                     l2847 0DA7                       l2839 0FF5                       l2871 0C5D  
                     l2791 063A                       l2783 060E                       l2767 05EA  
                     l2759 05BE                       l2599 0CD7                       l2951 008F  
                     l2943 0089                       l2935 0065                       l2927 004E  
                     l2697 0F06                       l2689 0EEF                       l2865 0F27  
                     l2857 0DDF                       l2849 0DB3                       l2873 0C6C  
                     l2793 0641                       l2785 0621                       l2961 00A1  
                     l2953 008F                       l2945 008C                       l2937 0070  
                     l2929 0054                       l2891 0CA9                       l2867 0F4C  
                     l2787 0623                       l2779 05F2                       l2795 0C36  
                     l2883 0D27                       l2875 0D13                       l2971 00C7  
                     l2963 00A4                       l2955 0092                       l2947 008F  
                     l2939 0083                       l2893 0CB5                       l2869 0F62  
                     l2789 062D                       l2797 0C3A                       l2885 0D2D  
                     l2877 0D26                       l2981 00D1                       l2973 00C8  
                     l2965 00AA                       l2949 008F                       l2895 0CB9  
                     l2799 0C3D                       l2887 0D33                       l2991 00F6  
                     l2983 00D7                       l2975 00C9                       l2959 009B  
                     l2897 0CC0                       l2889 0D37                       l2993 0102  
                     l2985 00DA                       l2977 00CB                       l2969 00AE  
                     l2995 010E                       l2979 00CF                       l2997 0119  
                     l2989 00E1                       l2999 012B                       u3000 00CF  
                     u3001 00CE                       u3010 00E0                       u3011 00DF  
                     u2300 0D50                       u3100 025E                       u2301 0D4F  
                     u3101 025D                       u3110 02A0                       u3030 0164  
                     u3111 029F                       u3031 0163                       u2400 0702  
                     u3200 03C5                       u3120 02AB                       u3040 016B  
                     u2401 0701                       u3201 03C4                       u3121 02AA  
                     u3041 016A                       u3025 011E                       u2314 0D56  
                     u3210 03C9                       u3130 02DE                       u3050 0173  
                     u2315 0D54                       u3211 03C8                       u3131 02DD  
                     u3051 0172                       u2500 075C                       u2324 0D65  
                     u2420 0723                       u3300 0582                       u3220 03D7  
                     u3140 0323                       u3060 01C9                       u2501 075B  
                     u2325 0D63                       u2421 0722                       u3301 0581  
                     u3221 03D6                       u3141 0322                       u3061 01C8  
                     u2414 0708                       u2350 06AB                       u2430 0CE8  
                     u3230 03E8                       u3150 032D                       u3070 0250  
                     u2415 0706                       u2351 06AA                       u2335 0672  
                     u2431 0CE7                       u3231 03E7                       u3151 032C  
                     u3135 02DA                       u3071 024F                       u2600 0EC5  
                     u2520 0770                       u2440 0CF1                       u2360 06B1  
                     u2344 0690                       u2280 0C32                       u3160 0346  
                     u3080 0255                       u2601 0EC4                       u2521 076F  
                     u2441 0CF0                       u2425 071F                       u2361 06B0  
                     u2345 068E                       u2281 0C31                       u3161 0345  
                     u3081 0254                       u3065 01C5                       u2370 06CD  
                     u3170 034B                       u3090 025A                       u2515 0761  
                     u2371 06CC                       u2355 06A7                       u3235 03E4  
                     u3171 034A                       u3091 0259                       u2620 0ED7  
                     u2700 0E01                       u2540 078B                       u3244 0405  
                     u3180 03BB                       u2621 0ED6                       u2701 0E00  
                     u2541 078A                       u3317 0C43                       u3245 0403  
                     u3181 03BA                       u2294 0D47                       u2470 0D0B  
                     u2390 06FC                       u3270 0476                       u3254 042C  
                     u3190 03BF                       u3327 0CB7                       u2615 0EC9  
                     u2535 0772                       u2295 0D45                       u2471 0D0A  
                     u2455 0CF8                       u2391 06FB                       u2375 06C9  
                     u3271 0475                       u3255 042A                       u3191 03BE  
                     u2640 0EE8                       u2720 0E13                       u2560 07A9  
                     u2480 072C                       u2800 05EA                       u2384 06E1  
                     u3280 0496                       u3264 0453                       u2641 0EE7  
                     u2721 0E12                       u2561 07A8                       u2545 0787  
                     u2481 072B                       u2801 05E9                       u2465 0CFF  
                     u2385 06DF                       u3281 0495                       u3265 0451  
                     u2730 0E1D                       u2570 07AE                       u2490 073D  
                     u3290 04B2                       u2635 0ED8                       u2731 0E1C  
                     u2715 0E05                       u2571 07AD                       u2555 079B  
                     u2491 073C                       u2395 06F8                       u3291 04B1  
                     u3275 0472                       u2660 0EFC                       u2580 0EA9  
                     u2820 061B                       u2900 0D3D                       u2661 0EFB  
                     u2645 0EE4                       u2581 0EA8                       u2821 061A  
                     u2805 05E6                       u2901 0D3C                       u2670 0F01  
                     u2590 0EB4                       u2750 0E30                       u2830 0621  
                     u2814 0600                       u2671 0F00                       u2655 0EF0  
                     u2591 0EB3                       u2751 0E2F                       u2735 0E19  
                     u2831 0620                       u2815 05FE                       u2920 0CC0  
                     u2760 0E35                       u2680 0DEB                       u2840 063A  
                     u2921 0CBF                       u2761 0E34                       u2745 0E24  
                     u2681 0DEA                       u2841 0639                       u2825 0617  
                     u2690 0DF6                       u2930 0C77                       u2850 0641  
                     u2915 0CAC                       u2691 0DF5                       u2931 0C76  
                     u2851 0640                       u2860 07D9                       u2940 0C84  
                     u2780 05CB                       u2941 0C83                       u2845 0636  
                     u2781 05CA                       u2870 0FF5                       u2790 05D1  
                     u2774 05B0                       u2871 0FF4                       u2791 05D0  
                     u2775 05AE                       u2880 0FFF                       u2960 0097  
                     u2881 0FFE                       u2865 07D4                       u2785 05C7  
                     u2961 0096                       u2970 00A1                       u2971 00A0  
                     u2980 00AA                       _RCIF 0065                       u2981 00A9  
                     u2990 00C7                       u2895 0DC1                       u2991 00C6  
                     _TMR0 0001                       _TXIF 0064               __CFG_WRT$OFF 0000  
                     _disp 005B                       _main 004E                       _time 0077  
                     map@x 002D                       btemp 007E           __end_of_ADC_Read 0CC7  
            __CFG_BOREN$ON 0000                main@umidita 015B                       start 000E  
          __end_of_GetTime 0DE4          ___bmul@multiplier 0021               main@endCiclo 015D  
  __end_of_UART_Write_Text 0CE9                      ??_ISR 0070                      ??_map 0077  
          __end_of___aldiv 07C2                      ?_main 0070            __end_of___awdiv 0F0B  
            __CFG_WDTE$OFF 0000            __end_of___awmod 0E3F            ___awdiv@divisor 0024  
                    _T1CON 0010       bitParita@errorColumn 0027                      i1l333 0E99  
                    i1l290 0C22                      i1l292 0C28                      i1l293 0C2A  
          ___awdiv@counter 0029                      _RCREG 001A                      _TMR1H 000F  
                    _TMR1L 000E                      _SPBRG 0099                      _PORTD 0008  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _TRISE 0089                      _TXREG 0019  
            __CFG_PWRTE$ON 0000         __size_of_UART_Init 003A         __size_of_UART_Read 0009  
          __end_of_display 0811                      _count 0056                      _unita 005F  
                    main@i 0163                      main@l 0168                      _truck 004A  
                    pclath 000A                      status 0003                      wtemp0 007E  
          __initialization 0011               __end_of_main 0594         __size_of_GetDigits 006B  
                   ??_main 003A          SetDefaultTimers@i 0075          SetDefaultTimers@l 0074  
       __size_of_BuildByte 00C8                 _SetDisplay 0C5A              bitChange@dato 0020  
                   _ADCON0 001F                     _ADCON1 009F                     _ADRESH 001E  
                   _ADRESL 009E           ___awdiv@dividend 0026                     i1l2115 0C22  
                   i1l2117 0C29                     i1l2401 0E72                     i1l2411 0E7E  
                   i1l2403 0E78                     i1l2421 0E8F                     i1l2413 0E80  
                   i1l2423 0E90                     i1l2415 0E84                     i1l2425 0E91  
                   i1l2417 0E85                     i1l2409 0E7C                     i1l2427 0E95  
                   i1l2419 0E89                     i1l2429 0E97                     i1l2381 0E45  
                   i1l2391 0E56                     i1l2383 0E49                     i1l2393 0E64  
                   i1l2385 0E4C                     i1l2395 0E68                     i1l2387 0E4E  
                   i1l2379 0E3F                     i1l2389 0E52                     i1l2397 0E69  
                   i1l2399 0E6D                     u220_20 0E49                     u220_21 0E48  
                   u221_20 0E52                     u221_21 0E51                     u222_20 0E56  
                   u222_21 0E55                     u223_20 0E6D                     u223_21 0E6C  
                   u224_20 0E72                     u224_21 0E71                     u225_20 0E7C  
                   _INTCON 000B                     u225_21 0E7B                     u226_20 0E84  
                   u226_21 0E83                     u227_20 0E8F                     u219_20 0E45  
                   u227_21 0E8E                     u219_21 0E44                     u180_20 0C28  
                   u180_21 0C27                     _TMR0IF 005A                     _TMR1IF 0060  
                ??_GetTime 0020               ?_UART_TxChar 0070          __end_of_UART_Init 07FC  
        __end_of_UART_Read 0C2B                     ___bmul 0C6F                  ??___aldiv 0074  
          GetTime@shortInt 0023                     ___wmul 0CE9                  ??___awdiv 0028  
                   _decine 005E                  ??___awmod 0074           ?_UART_Write_Text 0070  
         __end_of_init_ADC 0C47                     _cycled 0060           ___awdiv@quotient 002B  
          ___awmod@divisor 0020            ___awmod@counter 0075           __end_of_sendByte 0D3E  
            main@pressione 015C                  ?_ADC_Read 0074                     saved_w 007E  
  __end_of__initialization 004A          __end_of_GetDigits 0F76       bitParita@sommaColumn 0026  
__size_of_SetDefaultTimers 008A        ___bmul@multiplicand 0074             __pcstackCOMMON 0070  
        __end_of_BuildByte 0725               __pidataBANK0 07FC               __pidataBANK1 0C86  
       __size_of_bitChange 0031         __size_of_bitParita 00C9                 ??_ADC_Read 0076  
   SetDefaultTimers@giallo 0024                ?_SetDisplay 0074              GetDigits@Time 002D  
     _dataFromGatewayIndex 0059       _timerReadFromGateway 0058                 __pbssBANK0 004A  
               __pbssBANK1 00A0                 __pbssBANK2 0110                 __pbssBANK3 0190  
               __pmaintext 004E                    ?___bmul 0074                    ?___wmul 0020  
            sendByte@byte0 0037              sendByte@byte1 0032                 __pintentry 0004  
        __end_of_bitChange 0D6F                 __stringtab 0800          __end_of_bitParita 065D  
                ?_init_ADC 0070                    _GetTime 0DA4            BuildByte@valore 0075  
          BuildByte@txByte 0023                  ?_sendByte 0032                 bitChange@n 0074  
               _n_semafori 0064       __size_of_UART_TxChar 000B                    ___aldiv 0725  
          __size_of___bmul 0017                    ___awdiv 0EA2                    ___awmod 0DE4  
      __size_of_SetDisplay 0015            __size_of___wmul 0027                    __ptext1 0D10  
                  __ptext2 0CC7                    __ptext3 0C2B                    __ptext4 065D  
                  __ptext5 0D6F                    __ptext6 0CE9                    __ptext7 0C36  
                  __ptext8 0594                    __ptext9 0D3E             main@semaforoId 0158  
                  _comando 0078                    _display 0806               __size_of_ISR 0063  
               bitParita@i 002F                 bitParita@y 002A               __size_of_map 0035  
         ___awmod@dividend 0022           ___aldiv@dividend 0024       BuildByte@sommaColumn 0029  
                  clrloop0 0C1B                    main@tmp 015E       end_of_initialization 004A  
               ??_init_ADC 0074             main@lux_select 0161                 ??_sendByte 0034  
         _SetDefaultTimers 0F76                  _RCSTAbits 0018           ___aldiv@quotient 002A  
               _motorcycle 0052                  _UART_Init 07C2                  _UART_Read 0C22  
                _PORTAbits 0005                  _PORTBbits 0006               SetDisplay@d1 0020  
             SetDisplay@d2 0074               SetDisplay@d3 0075                  _TRISCbits 0087  
        __size_of_ADC_Read 0021                 map@out_max 0035          bitParita@errorRow 0029  
               map@out_min 0033                  _TXSTAbits 0098                  _GetDigits 0F0B  
        bitParita@sommaRow 0025             __end_of___bmul 0C86             __end_of___wmul 0D10  
               ?_UART_Init 002E                 ?_UART_Read 0070                  _BuildByte 065D  
        BuildByte@sommaRow 0028   __size_of_UART_Write_Text 0022        start_initialization 0011  
              __end_of_ISR 0EA2               ??_SetDisplay 0077                __end_of_map 0DA4  
               ?_GetDigits 002D                   ??___bmul 0075             ADC_Read@canale 0020  
                 ??___wmul 0074                 init_fetch0 0C47                __pdataBANK0 0064  
              __pdataBANK1 00C7         __end_of_SetDisplay 0C6F                 ?_BuildByte 0074  
              __pbssCOMMON 0077                  ___latbits 0002              __pcstackBANK0 0020  
            __pcstackBANK2 0158                   ?_GetTime 0074                  _bitChange 0D3E  
    SetDefaultTimers@verde 0022      SetDefaultTimers@rosso 0020          __size_of_init_ADC 0011  
                _bitParita 0594                  _centinaia 005D          __size_of_sendByte 002E  
                 ?___aldiv 0020                   ?___awdiv 0024                   ?___awmod 0020  
              ??_UART_Init 0030                ??_UART_Read 0070             BuildByte@i_342 0030  
                __pstrings 0800             BuildByte@y_343 002C             sendByte@valore 0033  
           sendByte@txByte 0038             BuildByte@byte0 0022             BuildByte@byte1 0074  
 __end_of_SetDefaultTimers 1000                   _ADC_Read 0CA6                  _count_lux 0079  
                _countdown 005A              UART_TxChar@ch 0074          ??_UART_Write_Text 0075  
          ___aldiv@divisor 0020          interrupt_function 0004            ___aldiv@counter 0028  
               ?_bitChange 0074             ___wmul@product 0074                  clear_ram0 0C1A  
                 _PIE1bits 008C              ??_UART_TxChar 0074                 ?_bitParita 0070  
              ??_GetDigits 002F                   _GO_nDONE 00FA          UART_Init@baudrate 002E  
              ??_BuildByte 0020                  map@in_max 0031                  map@in_min 002F  
              __stringbase 0805                  main@i_444 0169                  main@i_445 016A  
                main@i_446 0166                  main@i_447 0164                  main@i_449 0165  
        ___wmul@multiplier 0020                  main@index 0162               GetTime@index 0022  
             _secondPassed 0061           __size_of_GetTime 0040                   _Semafori 00C7  
           bitParita@i_330 0031                _readGateway 0062             bitParita@y_331 002C  
         __size_of___aldiv 009D        __end_of_UART_TxChar 0C36           __size_of___awdiv 0069  
         __size_of___awmod 005B             bitParita@error 0028         __end_of__stringtab 0806  
                sendByte@i 0039                   __ptext10 0C6F                   __ptext11 07C2  
                 __ptext20 0E3F                   __ptext12 0725                   __ptext21 0C22  
                 __ptext13 0C5A                   __ptext14 0F76                   __ptext15 0DA4  
                 __ptext16 0F0B                   __ptext17 0DE4                   __ptext18 0EA2  
                 __ptext19 0CA6                   _init_ADC 0C36                bitParita@rx 002E  
              ??_bitChange 0075        UART_Write_Text@text 0020              __size_of_main 0546  
          _dataFromGateway 00A0                   _old_disp 005C                ??_bitParita 0021  
                 _sendByte 0D10                   main@temp 015A                   main@time 015F  
              GetTime@time 0024                 _INTCONbits 000B                   init_ram0 0C4B  
                 intlevel1 0000            _readGatewayDone 0063                  stringcode 0800  
              _UART_TxChar 0C2B            _UART_Write_Text 0CC7                 _OPTION_REG 0081  
          SetDisplay@value 0076                   stringdir 0800                   stringtab 0800  
        ?_SetDefaultTimers 0020               ___aldiv@sign 0029         ??_SetDefaultTimers 0026  
               BuildByte@i 002E                 BuildByte@y 002A           UART_Write_Text@i 0021  
