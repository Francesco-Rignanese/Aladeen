

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Jun 20 15:29:36 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  0003                     __pidataBANK0:	
   202                           
   203                           ;initializer for _n_semafori
   204  0003  340F               	retlw	15
   205                           
   206                           	psect	idataBANK1
   207  07E0                     __pidataBANK1:	
   208                           
   209                           ;initializer for _Semafori
   210  07E0  34BB               	retlw	low (_s0| 0)
   211  07E1  3400               	retlw	high (_s0| 0)
   212  07E2  34AF               	retlw	low (_s1| 0)
   213  07E3  3400               	retlw	high (_s1| 0)
   214  07E4  34E4               	retlw	low (_s2| (0+256))
   215  07E5  3401               	retlw	high (_s2| (0+256))
   216  07E6  34D8               	retlw	low (_s3| (0+256))
   217  07E7  3401               	retlw	high (_s3| (0+256))
   218  07E8  34CC               	retlw	low (_s4| (0+256))
   219  07E9  3401               	retlw	high (_s4| (0+256))
   220  07EA  34C0               	retlw	low (_s5| (0+256))
   221  07EB  3401               	retlw	high (_s5| (0+256))
   222  07EC  34B4               	retlw	low (_s6| (0+256))
   223  07ED  3401               	retlw	high (_s6| (0+256))
   224  07EE  34A8               	retlw	low (_s7| (0+256))
   225  07EF  3401               	retlw	high (_s7| (0+256))
   226  07F0  349C               	retlw	low (_s8| (0+256))
   227  07F1  3401               	retlw	high (_s8| (0+256))
   228  07F2  3490               	retlw	low (_s9| (0+256))
   229  07F3  3401               	retlw	high (_s9| (0+256))
   230  07F4  344C               	retlw	low (_s10| (0+256))
   231  07F5  3401               	retlw	high (_s10| (0+256))
   232  07F6  3440               	retlw	low (_s11| (0+256))
   233  07F7  3401               	retlw	high (_s11| (0+256))
   234  07F8  3434               	retlw	low (_s12| (0+256))
   235  07F9  3401               	retlw	high (_s12| (0+256))
   236  07FA  3428               	retlw	low (_s13| (0+256))
   237  07FB  3401               	retlw	high (_s13| (0+256))
   238  07FC  341C               	retlw	low (_s14| (0+256))
   239  07FD  3401               	retlw	high (_s14| (0+256))
   240  07FE  3410               	retlw	low (_s15| (0+256))
   241  07FF  3401               	retlw	high (_s15| (0+256))
   242                           
   243                           	psect	strings
   244  0800                     __pstrings:	
   245  0800                     stringtab:	
   246  0800                     __stringtab:	
   247  0800                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250  0800                     stringdir:	
   251  0800  3008               	movlw	high stringdir
   252  0801  008A               	movwf	10
   253  0802  0804               	movf	4,w
   254  0803  0A84               	incf	4,f
   255  0804  0782               	addwf	2,f
   256  0805                     __stringbase:	
   257  0805  3400               	retlw	0
   258  0806                     __end_of__stringtab:	
   259  0806                     _display:	
   260  0806  343F               	retlw	63
   261  0807  3406               	retlw	6
   262  0808  345B               	retlw	91
   263  0809  344F               	retlw	79
   264  080A  3466               	retlw	102
   265  080B  346D               	retlw	109
   266  080C  347D               	retlw	125
   267  080D  3407               	retlw	7
   268  080E  347F               	retlw	127
   269  080F  346F               	retlw	111
   270  0810  3400               	retlw	0
   271  0811                     __end_of_display:	
   272  0006                     _PORTBbits	set	6
   273  0008                     _PORTD	set	8
   274  0005                     _PORTAbits	set	5
   275  001A                     _RCREG	set	26
   276  0019                     _TXREG	set	25
   277  000B                     _INTCONbits	set	11
   278  0018                     _RCSTAbits	set	24
   279  001E                     _ADRESH	set	30
   280  001F                     _ADCON0	set	31
   281  000E                     _TMR1L	set	14
   282  000F                     _TMR1H	set	15
   283  0010                     _T1CON	set	16
   284  0001                     _TMR0	set	1
   285  000B                     _INTCON	set	11
   286  0060                     _TMR1IF	set	96
   287  005A                     _TMR0IF	set	90
   288  0065                     _RCIF	set	101
   289  0064                     _TXIF	set	100
   290  00FA                     _GO_nDONE	set	250
   291  008C                     _PIE1bits	set	140
   292  0099                     _SPBRG	set	153
   293  0098                     _TXSTAbits	set	152
   294  0087                     _TRISCbits	set	135
   295  009E                     _ADRESL	set	158
   296  009F                     _ADCON1	set	159
   297  0085                     _TRISA	set	133
   298  0081                     _OPTION_REG	set	129
   299  0089                     _TRISE	set	137
   300  0088                     _TRISD	set	136
   301  0087                     _TRISC	set	135
   302  0086                     _TRISB	set	134
   303                           
   304                           ; #config settings
   305  0000                     
   306                           	psect	cinit
   307  0011                     start_initialization:	
   308  0011                     __initialization:	
   309                           
   310                           ; Initialize objects allocated to BANK1
   311  0011  1383               	bcf	3,7	;select IRP bank0
   312  0012  30E7               	movlw	low (__pdataBANK1+32)
   313  0013  00FD               	movwf	btemp+-1
   314  0014  3007               	movlw	high __pidataBANK1
   315  0015  00FE               	movwf	btemp
   316  0016  30E0               	movlw	low __pidataBANK1
   317  0017  00FF               	movwf	btemp+1
   318  0018  30C7               	movlw	low __pdataBANK1
   319  0019  0084               	movwf	4
   320  001A  120A  158A  238F  120A  118A  	fcall	init_ram0
   321                           
   322                           ; Initialize objects allocated to BANK0
   323  001F  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   324  0024  00E4               	movwf	__pdataBANK0& (0+127)
   325                           
   326                           ; Clear objects allocated to BANK3
   327  0025  1783               	bsf	3,7	;select IRP bank2
   328  0026  3090               	movlw	low __pbssBANK3
   329  0027  0084               	movwf	4
   330  0028  30F0               	movlw	low (__pbssBANK3+96)
   331  0029  120A  158A  235C  120A  118A  	fcall	clear_ram0
   332                           
   333                           ; Clear objects allocated to BANK2
   334  002E  3010               	movlw	low __pbssBANK2
   335  002F  0084               	movwf	4
   336  0030  3058               	movlw	low (__pbssBANK2+72)
   337  0031  120A  158A  235C  120A  118A  	fcall	clear_ram0
   338                           
   339                           ; Clear objects allocated to BANK1
   340  0036  1383               	bcf	3,7	;select IRP bank0
   341  0037  30A0               	movlw	low __pbssBANK1
   342  0038  0084               	movwf	4
   343  0039  30C7               	movlw	low (__pbssBANK1+39)
   344  003A  120A  158A  235C  120A  118A  	fcall	clear_ram0
   345                           
   346                           ; Clear objects allocated to BANK0
   347  003F  304C               	movlw	low __pbssBANK0
   348  0040  0084               	movwf	4
   349  0041  3064               	movlw	low (__pbssBANK0+24)
   350  0042  120A  158A  235C  120A  118A  	fcall	clear_ram0
   351                           
   352                           ; Clear objects allocated to COMMON
   353  0047  01F0               	clrf	__pbssCOMMON& (0+127)
   354  0048  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   355  0049  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   356  004A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   357  004B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   358  004C                     end_of_initialization:	
   359                           ;End of C runtime variable initialization code
   360                           
   361  004C                     __end_of__initialization:	
   362  004C  0183               	clrf	3
   363  004D  120A  118A  2850   	ljmp	_main	;jump to C main() function
   364                           
   365                           	psect	bssCOMMON
   366  0070                     __pbssCOMMON:	
   367  0070                     _count:	
   368  0070                     	ds	2
   369  0072                     _time:	
   370  0072                     	ds	1
   371  0073                     _comando:	
   372  0073                     	ds	1
   373  0074                     _count_lux:	
   374  0074                     	ds	1
   375                           
   376                           	psect	bssBANK0
   377  004C                     __pbssBANK0:	
   378  004C                     _truck:	
   379  004C                     	ds	4
   380  0050                     _car:	
   381  0050                     	ds	4
   382  0054                     _motorcycle:	
   383  0054                     	ds	4
   384  0058                     _timerReadFromGateway:	
   385  0058                     	ds	1
   386  0059                     _dataFromGatewayIndex:	
   387  0059                     	ds	1
   388  005A                     _countdown:	
   389  005A                     	ds	1
   390  005B                     _disp:	
   391  005B                     	ds	1
   392  005C                     _old_disp:	
   393  005C                     	ds	1
   394  005D                     _centinaia:	
   395  005D                     	ds	1
   396  005E                     _decine:	
   397  005E                     	ds	1
   398  005F                     _unita:	
   399  005F                     	ds	1
   400  0060                     _cycled:	
   401  0060                     	ds	1
   402  0061                     _secondPassed:	
   403  0061                     	ds	1
   404  0062                     _readGateway:	
   405  0062                     	ds	1
   406  0063                     _readGatewayDone:	
   407  0063                     	ds	1
   408                           
   409                           	psect	dataBANK0
   410  0064                     __pdataBANK0:	
   411  0064                     _n_semafori:	
   412  0064                     	ds	1
   413                           
   414                           	psect	bssBANK1
   415  00A0                     __pbssBANK1:	
   416  00A0                     _dataFromGateway:	
   417  00A0                     	ds	15
   418  00AF                     _s1:	
   419  00AF                     	ds	12
   420  00BB                     _s0:	
   421  00BB                     	ds	12
   422                           
   423                           	psect	dataBANK1
   424  00C7                     __pdataBANK1:	
   425  00C7                     _Semafori:	
   426  00C7                     	ds	32
   427                           
   428                           	psect	bssBANK3
   429  0190                     __pbssBANK3:	
   430  0190                     _s9:	
   431  0190                     	ds	12
   432  019C                     _s8:	
   433  019C                     	ds	12
   434  01A8                     _s7:	
   435  01A8                     	ds	12
   436  01B4                     _s6:	
   437  01B4                     	ds	12
   438  01C0                     _s5:	
   439  01C0                     	ds	12
   440  01CC                     _s4:	
   441  01CC                     	ds	12
   442  01D8                     _s3:	
   443  01D8                     	ds	12
   444  01E4                     _s2:	
   445  01E4                     	ds	12
   446                           
   447                           	psect	bssBANK2
   448  0110                     __pbssBANK2:	
   449  0110                     _s15:	
   450  0110                     	ds	12
   451  011C                     _s14:	
   452  011C                     	ds	12
   453  0128                     _s13:	
   454  0128                     	ds	12
   455  0134                     _s12:	
   456  0134                     	ds	12
   457  0140                     _s11:	
   458  0140                     	ds	12
   459  014C                     _s10:	
   460  014C                     	ds	12
   461                           
   462                           	psect	inittext
   463  0B8B                     init_fetch0:	
   464                           ;	Called with low address in FSR and high address in W
   465                           
   466  0B8B  087E               	movf	btemp,w
   467  0B8C  008A               	movwf	10
   468  0B8D  087F               	movf	btemp+1,w
   469  0B8E  0082               	movwf	2
   470  0B8F                     init_ram0:	
   471                           ;Called with:
   472                           ;	high address of idata address in btemp 
   473                           ;	low address of idata address in btemp+1 
   474                           ;	low address of data in FSR
   475                           ;	high address + 1 of data in btemp-1
   476                           
   477  0B8F  120A  158A  238B  120A  158A  	fcall	init_fetch0
   478  0B94  0080               	movwf	0
   479  0B95  0A84               	incf	4,f
   480  0B96  0804               	movf	4,w
   481  0B97  067D               	xorwf	btemp+-1,w
   482  0B98  1903               	btfsc	3,2
   483  0B99  3400               	retlw	0
   484  0B9A  0AFF               	incf	btemp+1,f
   485  0B9B  1903               	btfsc	3,2
   486  0B9C  0AFE               	incf	btemp,f
   487  0B9D  2B8F               	goto	init_ram0
   488                           
   489                           	psect	clrtext
   490  0B5C                     clear_ram0:	
   491                           ;	Called with FSR containing the base address, and
   492                           ;	W with the last address+1
   493                           
   494  0B5C  0064               	clrwdt	;clear the watchdog before getting into this loop
   495  0B5D                     clrloop0:	
   496  0B5D  0180               	clrf	0	;clear RAM location pointed to by FSR
   497  0B5E  0A84               	incf	4,f	;increment pointer
   498  0B5F  0604               	xorwf	4,w	;XOR with final address
   499  0B60  1903               	btfsc	3,2	;have we reached the end yet?
   500  0B61  3400               	retlw	0	;all done for this memory range, return
   501  0B62  0604               	xorwf	4,w	;XOR again to restore value
   502  0B63  2B5D               	goto	clrloop0	;do the next byte
   503                           
   504                           	psect	cstackBANK2
   505  0158                     __pcstackBANK2:	
   506  0158                     main@semaforoId:	
   507                           
   508                           ; 1 bytes @ 0x0
   509  0158                     	ds	1
   510  0159                     main@colorId:	
   511                           
   512                           ; 1 bytes @ 0x1
   513  0159                     	ds	1
   514  015A                     main@temp:	
   515                           
   516                           ; 1 bytes @ 0x2
   517  015A                     	ds	1
   518  015B                     main@umidita:	
   519                           
   520                           ; 1 bytes @ 0x3
   521  015B                     	ds	1
   522  015C                     main@pressione:	
   523                           
   524                           ; 1 bytes @ 0x4
   525  015C                     	ds	1
   526  015D                     main@endCiclo:	
   527                           
   528                           ; 1 bytes @ 0x5
   529  015D                     	ds	1
   530  015E                     main@tmp:	
   531                           
   532                           ; 1 bytes @ 0x6
   533  015E                     	ds	1
   534  015F                     main@time:	
   535                           
   536                           ; 2 bytes @ 0x7
   537  015F                     	ds	2
   538  0161                     main@lux_select:	
   539                           
   540                           ; 1 bytes @ 0x9
   541  0161                     	ds	1
   542  0162                     main@index:	
   543                           
   544                           ; 1 bytes @ 0xA
   545  0162                     	ds	1
   546  0163                     main@i:	
   547                           
   548                           ; 1 bytes @ 0xB
   549  0163                     	ds	1
   550  0164                     main@i_447:	
   551                           
   552                           ; 1 bytes @ 0xC
   553  0164                     	ds	1
   554  0165                     main@i_449:	
   555                           
   556                           ; 1 bytes @ 0xD
   557  0165                     	ds	1
   558  0166                     main@i_446:	
   559                           
   560                           ; 2 bytes @ 0xE
   561  0166                     	ds	2
   562  0168                     main@l:	
   563                           
   564                           ; 1 bytes @ 0x10
   565  0168                     	ds	1
   566  0169                     main@i_444:	
   567                           
   568                           ; 1 bytes @ 0x11
   569  0169                     	ds	1
   570  016A                     main@i_445:	
   571                           
   572                           ; 2 bytes @ 0x12
   573  016A                     	ds	2
   574                           
   575                           	psect	cstackCOMMON
   576  0075                     __pcstackCOMMON:	
   577  0075                     ?_init_ADC:	
   578  0075                     ?_bitParita:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0075                     ?_main:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0075                     ?_UART_TxChar:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0075                     ?_UART_Read:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0075                     ??_UART_Read:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0075                     ?_conteggioVeicoli:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0075                     ??_conteggioVeicoli:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0075                     ?_ISR:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 1 bytes @ 0x0
   604  0075                     	ds	1
   605  0076                     ??_ISR:	
   606                           
   607                           ; 1 bytes @ 0x1
   608  0076                     	ds	4
   609                           
   610                           	psect	cstackBANK0
   611  0020                     __pcstackBANK0:	
   612  0020                     ??_init_ADC:	
   613  0020                     ?_SetDefaultTimers:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0020                     ?_SetDisplay:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0020                     ?_BuildByte:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0020                     ?_bitChange:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0020                     ??_UART_TxChar:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0020                     ?___bmul:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0020                     ?_GetTime:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0020                     ?_ADC_Read:	
   635                           ; 2 bytes @ 0x0
   636                           
   637  0020                     ?___wmul:	
   638                           ; 2 bytes @ 0x0
   639                           
   640  0020                     ?___awmod:	
   641                           ; 2 bytes @ 0x0
   642                           
   643  0020                     ?___aldiv:	
   644                           ; 2 bytes @ 0x0
   645                           
   646  0020                     bitChange@n:	
   647                           ; 4 bytes @ 0x0
   648                           
   649  0020                     BuildByte@byte1:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0020                     UART_TxChar@ch:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0020                     SetDisplay@d2:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0020                     ___bmul@multiplicand:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0020                     SetDefaultTimers@rosso:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0020                     ___wmul@multiplier:	
   665                           ; 2 bytes @ 0x0
   666                           
   667  0020                     ___awmod@divisor:	
   668                           ; 2 bytes @ 0x0
   669                           
   670  0020                     ___aldiv@divisor:	
   671                           ; 2 bytes @ 0x0
   672                           
   673                           
   674                           ; 4 bytes @ 0x0
   675  0020                     	ds	1
   676  0021                     ??_bitChange:	
   677  0021                     ??___bmul:	
   678                           ; 1 bytes @ 0x1
   679                           
   680  0021                     BuildByte@valore:	
   681                           ; 1 bytes @ 0x1
   682                           
   683  0021                     SetDisplay@d3:	
   684                           ; 1 bytes @ 0x1
   685                           
   686                           
   687                           ; 1 bytes @ 0x1
   688  0021                     	ds	1
   689  0022                     ??_GetTime:	
   690  0022                     ??_ADC_Read:	
   691                           ; 1 bytes @ 0x2
   692                           
   693  0022                     ??_BuildByte:	
   694                           ; 1 bytes @ 0x2
   695                           
   696  0022                     SetDisplay@value:	
   697                           ; 1 bytes @ 0x2
   698                           
   699  0022                     ___bmul@product:	
   700                           ; 1 bytes @ 0x2
   701                           
   702  0022                     SetDefaultTimers@verde:	
   703                           ; 1 bytes @ 0x2
   704                           
   705  0022                     ___wmul@multiplicand:	
   706                           ; 2 bytes @ 0x2
   707                           
   708  0022                     ___awmod@dividend:	
   709                           ; 2 bytes @ 0x2
   710                           
   711                           
   712                           ; 2 bytes @ 0x2
   713  0022                     	ds	1
   714  0023                     ??_SetDisplay:	
   715  0023                     bitChange@dato:	
   716                           ; 1 bytes @ 0x3
   717                           
   718  0023                     ADC_Read@canale:	
   719                           ; 1 bytes @ 0x3
   720                           
   721  0023                     SetDisplay@d1:	
   722                           ; 1 bytes @ 0x3
   723                           
   724  0023                     ___bmul@multiplier:	
   725                           ; 1 bytes @ 0x3
   726                           
   727                           
   728                           ; 1 bytes @ 0x3
   729  0023                     	ds	1
   730  0024                     ??_bitParita:	
   731  0024                     ??___wmul:	
   732                           ; 1 bytes @ 0x4
   733                           
   734  0024                     ??___awmod:	
   735                           ; 1 bytes @ 0x4
   736                           
   737  0024                     BuildByte@byte0:	
   738                           ; 1 bytes @ 0x4
   739                           
   740  0024                     GetTime@index:	
   741                           ; 1 bytes @ 0x4
   742                           
   743  0024                     SetDefaultTimers@giallo:	
   744                           ; 1 bytes @ 0x4
   745                           
   746  0024                     ___wmul@product:	
   747                           ; 2 bytes @ 0x4
   748                           
   749  0024                     ___aldiv@dividend:	
   750                           ; 2 bytes @ 0x4
   751                           
   752                           
   753                           ; 4 bytes @ 0x4
   754  0024                     	ds	1
   755  0025                     GetTime@shortInt:	
   756  0025                     ___awmod@counter:	
   757                           ; 1 bytes @ 0x5
   758                           
   759  0025                     BuildByte@txByte:	
   760                           ; 1 bytes @ 0x5
   761                           
   762                           
   763                           ; 5 bytes @ 0x5
   764  0025                     	ds	1
   765  0026                     ??_SetDefaultTimers:	
   766  0026                     ___awmod@sign:	
   767                           ; 1 bytes @ 0x6
   768                           
   769  0026                     GetTime@time:	
   770                           ; 1 bytes @ 0x6
   771                           
   772                           
   773                           ; 2 bytes @ 0x6
   774  0026                     	ds	1
   775  0027                     ?___awdiv:	
   776  0027                     ___awdiv@divisor:	
   777                           ; 2 bytes @ 0x7
   778                           
   779                           
   780                           ; 2 bytes @ 0x7
   781  0027                     	ds	1
   782  0028                     ??___aldiv:	
   783  0028                     bitParita@sommaRow:	
   784                           ; 1 bytes @ 0x8
   785                           
   786                           
   787                           ; 1 bytes @ 0x8
   788  0028                     	ds	1
   789  0029                     bitParita@sommaColumn:	
   790  0029                     ___aldiv@counter:	
   791                           ; 1 bytes @ 0x9
   792                           
   793  0029                     ___awdiv@dividend:	
   794                           ; 1 bytes @ 0x9
   795                           
   796                           
   797                           ; 2 bytes @ 0x9
   798  0029                     	ds	1
   799  002A                     bitParita@errorColumn:	
   800  002A                     BuildByte@sommaRow:	
   801                           ; 1 bytes @ 0xA
   802                           
   803  002A                     ___aldiv@sign:	
   804                           ; 1 bytes @ 0xA
   805                           
   806                           
   807                           ; 1 bytes @ 0xA
   808  002A                     	ds	1
   809  002B                     ??___awdiv:	
   810  002B                     bitParita@error:	
   811                           ; 1 bytes @ 0xB
   812                           
   813  002B                     BuildByte@sommaColumn:	
   814                           ; 1 bytes @ 0xB
   815                           
   816  002B                     ___aldiv@quotient:	
   817                           ; 1 bytes @ 0xB
   818                           
   819                           
   820                           ; 4 bytes @ 0xB
   821  002B                     	ds	1
   822  002C                     bitParita@errorRow:	
   823  002C                     SetDefaultTimers@l:	
   824                           ; 1 bytes @ 0xC
   825                           
   826  002C                     ___awdiv@counter:	
   827                           ; 1 bytes @ 0xC
   828                           
   829  002C                     BuildByte@y:	
   830                           ; 1 bytes @ 0xC
   831                           
   832                           
   833                           ; 2 bytes @ 0xC
   834  002C                     	ds	1
   835  002D                     SetDefaultTimers@i:	
   836  002D                     ___awdiv@sign:	
   837                           ; 1 bytes @ 0xD
   838                           
   839  002D                     bitParita@y:	
   840                           ; 1 bytes @ 0xD
   841                           
   842                           
   843                           ; 2 bytes @ 0xD
   844  002D                     	ds	1
   845  002E                     BuildByte@y_343:	
   846  002E                     ___awdiv@quotient:	
   847                           ; 2 bytes @ 0xE
   848                           
   849                           
   850                           ; 2 bytes @ 0xE
   851  002E                     	ds	1
   852  002F                     ?_UART_Init:	
   853  002F                     bitParita@y_331:	
   854                           ; 1 bytes @ 0xF
   855                           
   856  002F                     UART_Init@baudrate:	
   857                           ; 2 bytes @ 0xF
   858                           
   859                           
   860                           ; 2 bytes @ 0xF
   861  002F                     	ds	1
   862  0030                     ?_GetDigits:	
   863  0030                     ?_map:	
   864                           ; 1 bytes @ 0x10
   865                           
   866  0030                     map@x:	
   867                           ; 2 bytes @ 0x10
   868                           
   869  0030                     BuildByte@i:	
   870                           ; 2 bytes @ 0x10
   871                           
   872  0030                     GetDigits@Time:	
   873                           ; 2 bytes @ 0x10
   874                           
   875                           
   876                           ; 2 bytes @ 0x10
   877  0030                     	ds	1
   878  0031                     ??_UART_Init:	
   879  0031                     bitParita@rx:	
   880                           ; 1 bytes @ 0x11
   881                           
   882                           
   883                           ; 1 bytes @ 0x11
   884  0031                     	ds	1
   885  0032                     ??_GetDigits:	
   886  0032                     map@in_min:	
   887                           ; 1 bytes @ 0x12
   888                           
   889  0032                     bitParita@i:	
   890                           ; 2 bytes @ 0x12
   891                           
   892  0032                     BuildByte@i_342:	
   893                           ; 2 bytes @ 0x12
   894                           
   895                           
   896                           ; 2 bytes @ 0x12
   897  0032                     	ds	2
   898  0034                     ?_sendByte:	
   899  0034                     sendByte@byte1:	
   900                           ; 1 bytes @ 0x14
   901                           
   902  0034                     map@in_max:	
   903                           ; 1 bytes @ 0x14
   904                           
   905  0034                     bitParita@i_330:	
   906                           ; 2 bytes @ 0x14
   907                           
   908                           
   909                           ; 2 bytes @ 0x14
   910  0034                     	ds	1
   911  0035                     sendByte@valore:	
   912  0035                     _GetDigits$1151:	
   913                           ; 1 bytes @ 0x15
   914                           
   915                           
   916                           ; 2 bytes @ 0x15
   917  0035                     	ds	1
   918  0036                     ??_sendByte:	
   919  0036                     map@out_min:	
   920                           ; 1 bytes @ 0x16
   921                           
   922                           
   923                           ; 2 bytes @ 0x16
   924  0036                     	ds	2
   925  0038                     map@out_max:	
   926                           
   927                           ; 2 bytes @ 0x18
   928  0038                     	ds	1
   929  0039                     sendByte@byte0:	
   930                           
   931                           ; 1 bytes @ 0x19
   932  0039                     	ds	1
   933  003A                     ??_map:	
   934  003A                     sendByte@txByte:	
   935                           ; 1 bytes @ 0x1A
   936                           
   937                           
   938                           ; 1 bytes @ 0x1A
   939  003A                     	ds	1
   940  003B                     sendByte@i:	
   941                           
   942                           ; 1 bytes @ 0x1B
   943  003B                     	ds	1
   944  003C                     ??_main:	
   945                           
   946                           ; 1 bytes @ 0x1C
   947  003C                     	ds	16
   948                           
   949                           	psect	maintext
   950  0050                     __pmaintext:	
   951 ;;
   952 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   953 ;;
   954 ;; *************** function _main *****************
   955 ;; Defined at:
   956 ;;		line 129 in file "main.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;		None
   959 ;; Auto vars:     Size  Location     Type
   960 ;;  i               1   17[BANK2 ] unsigned char 
   961 ;;  index           1   10[BANK2 ] unsigned char 
   962 ;;  colorId         1    1[BANK2 ] unsigned char 
   963 ;;  semaforoId      1    0[BANK2 ] unsigned char 
   964 ;;  i               1   11[BANK2 ] unsigned char 
   965 ;;  i               1   13[BANK2 ] unsigned char 
   966 ;;  i               1   12[BANK2 ] unsigned char 
   967 ;;  i               2   14[BANK2 ] int 
   968 ;;  i               2   18[BANK2 ] int 
   969 ;;  l               1   16[BANK2 ] unsigned char 
   970 ;;  tmp             1    6[BANK2 ] unsigned char 
   971 ;;  time            2    7[BANK2 ] int 
   972 ;;  lux_select      1    9[BANK2 ] unsigned char 
   973 ;;  endCiclo        1    5[BANK2 ] struct .
   974 ;;  pressione       1    4[BANK2 ] unsigned char 
   975 ;;  umidita         1    3[BANK2 ] unsigned char 
   976 ;;  temp            1    2[BANK2 ] unsigned char 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : B00/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   986 ;;      Params:         0       0       0       0       0
   987 ;;      Locals:         0       0       0       0      20
   988 ;;      Temps:          0      16       0       0       0
   989 ;;      Totals:         0      16       0       0      20
   990 ;;Total ram usage:       36 bytes
   991 ;; Hardware stack levels required when called:    4
   992 ;; This function calls:
   993 ;;		_ADC_Read
   994 ;;		_GetDigits
   995 ;;		_GetTime
   996 ;;		_SetDefaultTimers
   997 ;;		_SetDisplay
   998 ;;		_UART_Init
   999 ;;		___awmod
  1000 ;;		___bmul
  1001 ;;		_bitParita
  1002 ;;		_init_ADC
  1003 ;;		_map
  1004 ;;		_sendByte
  1005 ;; This function is called by:
  1006 ;;		Startup code after reset
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           
  1011                           ;psect for function _main
  1012  0050                     _main:	
  1013  0050                     l3086:	
  1014                           ;incstack = 0
  1015                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1016                           
  1017                           
  1018                           ;main.c: 131:     TRISB = 0x1F;
  1019  0050  301F               	movlw	31
  1020  0051  1683               	bsf	3,5	;RP0=1, select bank1
  1021  0052  1303               	bcf	3,6	;RP1=0, select bank1
  1022  0053  0086               	movwf	6	;volatile
  1023                           
  1024                           ;main.c: 132:     TRISC = 0x80;
  1025  0054  3080               	movlw	128
  1026  0055  0087               	movwf	7	;volatile
  1027  0056                     l3088:	
  1028                           
  1029                           ;main.c: 133:     TRISD = 0x00;
  1030  0056  0188               	clrf	8	;volatile
  1031  0057                     l3090:	
  1032                           
  1033                           ;main.c: 134:     TRISE = 0x01;
  1034  0057  3001               	movlw	1
  1035  0058  0089               	movwf	9	;volatile
  1036  0059                     l3092:	
  1037                           
  1038                           ;main.c: 135:     INTCON = 0xE0;
  1039  0059  30E0               	movlw	224
  1040  005A  008B               	movwf	11	;volatile
  1041  005B                     l3094:	
  1042                           
  1043                           ;main.c: 136:     OPTION_REG = 0x04;
  1044  005B  3004               	movlw	4
  1045  005C  0081               	movwf	1	;volatile
  1046  005D                     l3096:	
  1047                           
  1048                           ;main.c: 137:     TMR0 = 6;
  1049  005D  3006               	movlw	6
  1050  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1051  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1052  0060  0081               	movwf	1	;volatile
  1053  0061                     l3098:	
  1054                           
  1055                           ;main.c: 138:     T1CON = 0x31;
  1056  0061  3031               	movlw	49
  1057  0062  0090               	movwf	16	;volatile
  1058  0063                     l3100:	
  1059                           
  1060                           ;main.c: 144:     init_ADC();
  1061  0063  120A  158A  2378  120A  118A  	fcall	_init_ADC
  1062  0068                     l3102:	
  1063                           
  1064                           ;main.c: 145:     UART_Init(9600);
  1065  0068  3080               	movlw	128
  1066  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1067  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1068  006B  00AF               	movwf	UART_Init@baudrate
  1069  006C  3025               	movlw	37
  1070  006D  00B0               	movwf	UART_Init@baudrate+1
  1071  006E  120A  158A  24AB  120A  118A  	fcall	_UART_Init
  1072  0073                     l3104:	
  1073                           
  1074                           ;main.c: 146:     SetDefaultTimers(2, 2, 2);
  1075  0073  3002               	movlw	2
  1076  0074  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0075  1303               	bcf	3,6	;RP1=0, select bank0
  1078  0076  00A0               	movwf	SetDefaultTimers@rosso
  1079  0077  3000               	movlw	0
  1080  0078  00A1               	movwf	SetDefaultTimers@rosso+1
  1081  0079  3002               	movlw	2
  1082  007A  00A2               	movwf	SetDefaultTimers@verde
  1083  007B  3000               	movlw	0
  1084  007C  00A3               	movwf	SetDefaultTimers@verde+1
  1085  007D  3002               	movlw	2
  1086  007E  00A4               	movwf	SetDefaultTimers@giallo
  1087  007F  3000               	movlw	0
  1088  0080  00A5               	movwf	SetDefaultTimers@giallo+1
  1089  0081  120A  158A  26AE  120A  118A  	fcall	_SetDefaultTimers
  1090  0086                     l3106:	
  1091                           
  1092                           ;main.c: 148:     TMR1H = 60;
  1093  0086  303C               	movlw	60
  1094  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1095  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1096  0089  008F               	movwf	15	;volatile
  1097  008A                     l3108:	
  1098                           
  1099                           ;main.c: 149:     TMR1L = 176;
  1100  008A  30B0               	movlw	176
  1101  008B  008E               	movwf	14	;volatile
  1102  008C                     l3110:	
  1103                           
  1104                           ;main.c: 151:     int time;;main.c: 152:     unsigned char lux_select = 0;
  1105  008C  1283               	bcf	3,5	;RP0=0, select bank2
  1106  008D  1703               	bsf	3,6	;RP1=1, select bank2
  1107  008E  01E1               	clrf	main@lux_select^(0+256)
  1108  008F                     l3112:	
  1109                           
  1110                           ;main.c: 153:     disp = 0;
  1111  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1112  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1113  0091  01DB               	clrf	_disp
  1114  0092                     l3114:	
  1115  0092                     l3116:	
  1116  0092                     l3118:	
  1117  0092                     l3120:	
  1118                           
  1119                           ;main.c: 157:     Bit endCiclo;;main.c: 158:     endCiclo.Bit = 1;
  1120  0092  1283               	bcf	3,5	;RP0=0, select bank2
  1121  0093  1703               	bsf	3,6	;RP1=1, select bank2
  1122  0094  145D               	bsf	main@endCiclo^(0+256),0
  1123  0095                     l3122:	
  1124                           
  1125                           ;main.c: 161:     {;main.c: 163:         if (readGateway.Bit)
  1126  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1127  0096  1C62               	btfss	_readGateway,0
  1128  0097  2899               	goto	u3311
  1129  0098  289A               	goto	u3310
  1130  0099                     u3311:	
  1131  0099  28C6               	goto	l212
  1132  009A                     u3310:	
  1133  009A  28B1               	goto	l3136
  1134  009B                     l214:	
  1135                           ;main.c: 166:             {;main.c: 167:             case 0x08:
  1136                           
  1137                           
  1138                           ;main.c: 168:                 readGatewayDone.Bit = 1;
  1139  009B  1463               	bsf	_readGatewayDone,0
  1140                           
  1141                           ;main.c: 169:                 readGateway.Bit = 0;
  1142  009C  1062               	bcf	_readGateway,0
  1143                           
  1144                           ;main.c: 170:                 break;
  1145  009D  28C6               	goto	l212
  1146  009E                     l3126:	
  1147                           
  1148                           ;main.c: 177:                 if (timerReadFromGateway >= 4)
  1149  009E  3004               	movlw	4
  1150  009F  0258               	subwf	_timerReadFromGateway,w
  1151  00A0  1C03               	skipc
  1152  00A1  28A3               	goto	u3321
  1153  00A2  28A4               	goto	u3320
  1154  00A3                     u3321:	
  1155  00A3  28A7               	goto	l3130
  1156  00A4                     u3320:	
  1157  00A4                     l3128:	
  1158                           
  1159                           ;main.c: 178:                 {;main.c: 179:                     readGatewayDone.Bit = 1
      +                          ;
  1160  00A4  1463               	bsf	_readGatewayDone,0
  1161                           
  1162                           ;main.c: 180:                     readGatewayDone.Timeout = 1;
  1163  00A5  14E3               	bsf	_readGatewayDone,1
  1164                           
  1165                           ;main.c: 181:                     readGateway.Bit = 0;
  1166  00A6  1062               	bcf	_readGateway,0
  1167  00A7                     l3130:	
  1168                           
  1169                           ;main.c: 184:                 if (dataFromGatewayIndex >= 15)
  1170  00A7  300F               	movlw	15
  1171  00A8  0259               	subwf	_dataFromGatewayIndex,w
  1172  00A9  1C03               	skipc
  1173  00AA  28AC               	goto	u3331
  1174  00AB  28AD               	goto	u3330
  1175  00AC                     u3331:	
  1176  00AC  28C6               	goto	l212
  1177  00AD                     u3330:	
  1178  00AD                     l3132:	
  1179                           
  1180                           ;main.c: 185:                 {;main.c: 186:                     readGatewayDone.Bit = 1
      +                          ;
  1181  00AD  1463               	bsf	_readGatewayDone,0
  1182                           
  1183                           ;main.c: 187:                     readGatewayDone.Timeout = 0;
  1184  00AE  10E3               	bcf	_readGatewayDone,1
  1185                           
  1186                           ;main.c: 188:                     readGateway.Bit = 0;
  1187  00AF  1062               	bcf	_readGateway,0
  1188  00B0  28C6               	goto	l212
  1189  00B1                     l3136:	
  1190  00B1  1683               	bsf	3,5	;RP0=1, select bank1
  1191  00B2  1303               	bcf	3,6	;RP1=0, select bank1
  1192  00B3  0820               	movf	_dataFromGateway^(0+128),w
  1193  00B4  397F               	andlw	127
  1194  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  1195  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  1196  00B7  00BC               	movwf	??_main
  1197  00B8  01BD               	clrf	??_main+1
  1198                           
  1199                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1200                           ; Switch size 1, requested type "simple"
  1201                           ; Number of cases is 1, Range of values is 0 to 0
  1202                           ; switch strategies available:
  1203                           ; Name         Instructions Cycles
  1204                           ; simple_byte            4     3 (average)
  1205                           ; direct_byte           11     8 (fixed)
  1206                           ; jumptable            260     6 (fixed)
  1207                           ;	Chosen strategy is simple_byte
  1208  00B9  083D               	movf	??_main+1,w
  1209  00BA  3A00               	xorlw	0	; case 0
  1210  00BB  1903               	skipnz
  1211  00BC  28BE               	goto	l3414
  1212  00BD  289E               	goto	l3126
  1213  00BE                     l3414:	
  1214                           
  1215                           ; Switch size 1, requested type "simple"
  1216                           ; Number of cases is 2, Range of values is 8 to 10
  1217                           ; switch strategies available:
  1218                           ; Name         Instructions Cycles
  1219                           ; simple_byte            7     4 (average)
  1220                           ; direct_byte           20    11 (fixed)
  1221                           ; jumptable            263     9 (fixed)
  1222                           ;	Chosen strategy is simple_byte
  1223  00BE  083C               	movf	??_main,w
  1224  00BF  3A08               	xorlw	8	; case 8
  1225  00C0  1903               	skipnz
  1226  00C1  289B               	goto	l214
  1227  00C2  3A02               	xorlw	2	; case 10
  1228  00C3  1903               	skipnz
  1229  00C4  289B               	goto	l214
  1230  00C5  289E               	goto	l3126
  1231  00C6                     l212:	
  1232                           ;main.c: 192:         }
  1233                           
  1234                           
  1235                           ;main.c: 195:         if (readGatewayDone.Bit)
  1236  00C6  1C63               	btfss	_readGatewayDone,0
  1237  00C7  28C9               	goto	u3341
  1238  00C8  28CA               	goto	u3340
  1239  00C9                     u3341:	
  1240  00C9  2961               	goto	l220
  1241  00CA                     u3340:	
  1242  00CA                     l3138:	
  1243                           
  1244                           ;main.c: 196:         {;main.c: 198:             readGateway.Bit = 0;
  1245  00CA  1062               	bcf	_readGateway,0
  1246  00CB                     l3140:	
  1247                           
  1248                           ;main.c: 199:             dataFromGatewayIndex = 0;
  1249  00CB  01D9               	clrf	_dataFromGatewayIndex
  1250  00CC                     l3142:	
  1251                           
  1252                           ;main.c: 200:             readGatewayDone.Bit = 0;
  1253  00CC  1063               	bcf	_readGatewayDone,0
  1254                           
  1255                           ;main.c: 201:             timerReadFromGateway = 0;
  1256  00CD  01D8               	clrf	_timerReadFromGateway
  1257  00CE                     l3144:	
  1258                           
  1259                           ;main.c: 204:             if (readGatewayDone.Timeout)
  1260  00CE  1CE3               	btfss	_readGatewayDone,1
  1261  00CF  28D1               	goto	u3351
  1262  00D0  28D2               	goto	u3350
  1263  00D1                     u3351:	
  1264  00D1  28D4               	goto	l3148
  1265  00D2                     u3350:	
  1266  00D2                     l3146:	
  1267                           
  1268                           ;main.c: 205:             {;main.c: 206:                 readGatewayDone.Timeout = 0;
  1269  00D2  10E3               	bcf	_readGatewayDone,1
  1270                           
  1271                           ;main.c: 207:             }
  1272  00D3  2961               	goto	l220
  1273  00D4                     l3148:	
  1274                           
  1275                           ;main.c: 210:             {;main.c: 211:                 bitParita(dataFromGateway);
  1276  00D4  30A0               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1277  00D5  120A  118A  267A  120A  118A  	fcall	_bitParita
  1278  00DA                     l3150:	
  1279                           
  1280                           ;main.c: 212:                 unsigned char tmp;;main.c: 213:                 for (unsig
      +                          ned char i = 0; i < 3; i++)
  1281  00DA  1283               	bcf	3,5	;RP0=0, select bank2
  1282  00DB  1703               	bsf	3,6	;RP1=1, select bank2
  1283  00DC  01E3               	clrf	main@i^(0+256)
  1284  00DD                     l3152:	
  1285  00DD  3003               	movlw	3
  1286  00DE  0263               	subwf	main@i^(0+256),w
  1287  00DF  1C03               	skipc
  1288  00E0  28E2               	goto	u3361
  1289  00E1  28E3               	goto	u3360
  1290  00E2                     u3361:	
  1291  00E2  28E4               	goto	l3156
  1292  00E3                     u3360:	
  1293  00E3  2961               	goto	l220
  1294  00E4                     l3156:	
  1295                           
  1296                           ;main.c: 214:                 {;main.c: 215:                     unsigned char index = i
      +                           * 5;
  1297  00E4  3005               	movlw	5
  1298  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1299  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  1300  00E7  00BC               	movwf	??_main
  1301  00E8  083C               	movf	??_main,w
  1302  00E9  00A0               	movwf	___bmul@multiplicand
  1303  00EA  1283               	bcf	3,5	;RP0=0, select bank2
  1304  00EB  1703               	bsf	3,6	;RP1=1, select bank2
  1305  00EC  0863               	movf	main@i^(0+256),w
  1306  00ED  120A  158A  23B3  120A  118A  	fcall	___bmul
  1307  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1308  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1309  00F4  00BD               	movwf	??_main+1
  1310  00F5  083D               	movf	??_main+1,w
  1311  00F6  1283               	bcf	3,5	;RP0=0, select bank2
  1312  00F7  1703               	bsf	3,6	;RP1=1, select bank2
  1313  00F8  00E2               	movwf	main@index^(0+256)
  1314  00F9                     l3158:	
  1315                           
  1316                           ;main.c: 216:                     tmp = dataFromGateway[index];
  1317  00F9  0862               	movf	main@index^(0+256),w
  1318  00FA  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1319  00FB  0084               	movwf	4
  1320  00FC  1383               	bcf	3,7	;select IRP bank1
  1321  00FD  0800               	movf	0,w
  1322  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1323  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0100  00BC               	movwf	??_main
  1325  0101  083C               	movf	??_main,w
  1326  0102  1283               	bcf	3,5	;RP0=0, select bank2
  1327  0103  1703               	bsf	3,6	;RP1=1, select bank2
  1328  0104  00DE               	movwf	main@tmp^(0+256)
  1329  0105                     l3160:	
  1330                           
  1331                           ;main.c: 217:                     unsigned char semaforoId = (tmp >> 1) & 0x0F;
  1332  0105  085E               	movf	main@tmp^(0+256),w
  1333  0106  1283               	bcf	3,5	;RP0=0, select bank0
  1334  0107  1303               	bcf	3,6	;RP1=0, select bank0
  1335  0108  00BC               	movwf	??_main
  1336  0109  1003               	clrc
  1337  010A  0C3C               	rrf	??_main,w
  1338  010B  390F               	andlw	15
  1339  010C  00BD               	movwf	??_main+1
  1340  010D  083D               	movf	??_main+1,w
  1341  010E  1283               	bcf	3,5	;RP0=0, select bank2
  1342  010F  1703               	bsf	3,6	;RP1=1, select bank2
  1343  0110  00D8               	movwf	main@semaforoId^(0+256)
  1344  0111                     l3162:	
  1345                           
  1346                           ;main.c: 218:                     tmp = dataFromGateway[index];
  1347  0111  0862               	movf	main@index^(0+256),w
  1348  0112  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1349  0113  0084               	movwf	4
  1350  0114  0800               	movf	0,w
  1351  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1352  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1353  0117  00BC               	movwf	??_main
  1354  0118  083C               	movf	??_main,w
  1355  0119  1283               	bcf	3,5	;RP0=0, select bank2
  1356  011A  1703               	bsf	3,6	;RP1=1, select bank2
  1357  011B  00DE               	movwf	main@tmp^(0+256)
  1358  011C                     l3164:	
  1359                           
  1360                           ;main.c: 219:                     unsigned char colorId = ((tmp >> 5) & 0x03) - 1;
  1361  011C  085E               	movf	main@tmp^(0+256),w
  1362  011D  1283               	bcf	3,5	;RP0=0, select bank0
  1363  011E  1303               	bcf	3,6	;RP1=0, select bank0
  1364  011F  00BC               	movwf	??_main
  1365  0120  3005               	movlw	5
  1366  0121                     u3375:	
  1367  0121  1003               	clrc
  1368  0122  0CBC               	rrf	??_main,f
  1369  0123  3EFF               	addlw	-1
  1370  0124  1D03               	skipz
  1371  0125  2921               	goto	u3375
  1372  0126  083C               	movf	??_main,w
  1373  0127  3903               	andlw	3
  1374  0128  3EFF               	addlw	255
  1375  0129  00BD               	movwf	??_main+1
  1376  012A  083D               	movf	??_main+1,w
  1377  012B  1283               	bcf	3,5	;RP0=0, select bank2
  1378  012C  1703               	bsf	3,6	;RP1=1, select bank2
  1379  012D  00D9               	movwf	main@colorId^(0+256)
  1380  012E                     l3166:	
  1381                           
  1382                           ;main.c: 221:                     (*(Semafori[semaforoId])).new_times[colorId] = GetTime
      +                          (index);
  1383  012E  0862               	movf	main@index^(0+256),w
  1384  012F  120A  158A  24E5  120A  118A  	fcall	_GetTime
  1385  0134  1283               	bcf	3,5	;RP0=0, select bank2
  1386  0135  1703               	bsf	3,6	;RP1=1, select bank2
  1387  0136  0858               	movf	main@semaforoId^(0+256),w
  1388  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1389  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1390  0139  00BC               	movwf	??_main
  1391  013A  073C               	addwf	??_main,w
  1392  013B  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1393  013C  0084               	movwf	4
  1394  013D  1383               	bcf	3,7	;select IRP bank1
  1395  013E  0800               	movf	0,w
  1396  013F  00BD               	movwf	??_main+1
  1397  0140  0A84               	incf	4,f
  1398  0141  0800               	movf	0,w
  1399  0142  00BE               	movwf	??_main+2
  1400  0143  1283               	bcf	3,5	;RP0=0, select bank2
  1401  0144  1703               	bsf	3,6	;RP1=1, select bank2
  1402  0145  0859               	movf	main@colorId^(0+256),w
  1403  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1404  0147  1303               	bcf	3,6	;RP1=0, select bank0
  1405  0148  00BF               	movwf	??_main+3
  1406  0149  073F               	addwf	??_main+3,w
  1407  014A  073D               	addwf	??_main+1,w
  1408  014B  00C0               	movwf	??_main+4
  1409  014C  083E               	movf	??_main+2,w
  1410  014D  1803               	skipnc
  1411  014E  3E01               	addlw	1
  1412  014F  00C1               	movwf	??_main+5
  1413  0150  0840               	movf	??_main+4,w
  1414  0151  0084               	movwf	4
  1415  0152  1783               	bsf	3,7
  1416  0153  1C41               	btfss	??_main+5,0
  1417  0154  1383               	bcf	3,7
  1418  0155  0820               	movf	?_GetTime,w
  1419  0156  0080               	movwf	0
  1420  0157  0A84               	incf	4,f
  1421  0158  0821               	movf	?_GetTime+1,w
  1422  0159  0080               	movwf	0
  1423  015A                     l3168:	
  1424                           
  1425                           ;main.c: 222:                 }
  1426  015A  3001               	movlw	1
  1427  015B  00BC               	movwf	??_main
  1428  015C  083C               	movf	??_main,w
  1429  015D  1283               	bcf	3,5	;RP0=0, select bank2
  1430  015E  1703               	bsf	3,6	;RP1=1, select bank2
  1431  015F  07E3               	addwf	main@i^(0+256),f
  1432  0160  28DD               	goto	l3152
  1433  0161                     l220:	
  1434                           ;main.c: 224:         }
  1435                           
  1436                           
  1437                           ;main.c: 228:         if (endCiclo.Bit)
  1438  0161  1283               	bcf	3,5	;RP0=0, select bank2
  1439  0162  1703               	bsf	3,6	;RP1=1, select bank2
  1440  0163  1C5D               	btfss	main@endCiclo^(0+256),0
  1441  0164  2966               	goto	u3381
  1442  0165  2967               	goto	u3380
  1443  0166                     u3381:	
  1444  0166  2A58               	goto	l225
  1445  0167                     u3380:	
  1446  0167                     l3172:	
  1447                           
  1448                           ;main.c: 229:         {;main.c: 231:             for (unsigned char l = 0; l < 16; l++)
  1449  0167  01E8               	clrf	main@l^(0+256)
  1450  0168                     l3174:	
  1451  0168  3010               	movlw	16
  1452  0169  0268               	subwf	main@l^(0+256),w
  1453  016A  1C03               	skipc
  1454  016B  296D               	goto	u3391
  1455  016C  296E               	goto	u3390
  1456  016D                     u3391:	
  1457  016D  296F               	goto	l3178
  1458  016E                     u3390:	
  1459  016E  2A29               	goto	l3196
  1460  016F                     l3178:	
  1461                           
  1462                           ;main.c: 232:             {;main.c: 233:                 for (unsigned char i = 0; i < 3
      +                          ; i++)
  1463  016F  01E9               	clrf	main@i_444^(0+256)
  1464  0170                     l3180:	
  1465  0170  3003               	movlw	3
  1466  0171  0269               	subwf	main@i_444^(0+256),w
  1467  0172  1C03               	skipc
  1468  0173  2975               	goto	u3401
  1469  0174  2976               	goto	u3400
  1470  0175                     u3401:	
  1471  0175  2977               	goto	l3184
  1472  0176                     u3400:	
  1473  0176  2A20               	goto	l3192
  1474  0177                     l3184:	
  1475                           
  1476                           ;main.c: 234:                 {;main.c: 235:                     if ((*(Semafori[l])).ti
      +                          mes[i] != (*(Semafori[l])).new_times[i])
  1477  0177  0868               	movf	main@l^(0+256),w
  1478  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1479  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1480  017A  00BC               	movwf	??_main
  1481  017B  073C               	addwf	??_main,w
  1482  017C  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1483  017D  0084               	movwf	4
  1484  017E  1383               	bcf	3,7	;select IRP bank1
  1485  017F  0800               	movf	0,w
  1486  0180  00BD               	movwf	??_main+1
  1487  0181  0A84               	incf	4,f
  1488  0182  0800               	movf	0,w
  1489  0183  00BE               	movwf	??_main+2
  1490  0184  1283               	bcf	3,5	;RP0=0, select bank2
  1491  0185  1703               	bsf	3,6	;RP1=1, select bank2
  1492  0186  0869               	movf	main@i_444^(0+256),w
  1493  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1494  0188  1303               	bcf	3,6	;RP1=0, select bank0
  1495  0189  00BF               	movwf	??_main+3
  1496  018A  073F               	addwf	??_main+3,w
  1497  018B  073D               	addwf	??_main+1,w
  1498  018C  00C0               	movwf	??_main+4
  1499  018D  083E               	movf	??_main+2,w
  1500  018E  1803               	skipnc
  1501  018F  3E01               	addlw	1
  1502  0190  00C1               	movwf	??_main+5
  1503  0191  0840               	movf	??_main+4,w
  1504  0192  0084               	movwf	4
  1505  0193  1783               	bsf	3,7
  1506  0194  1C41               	btfss	??_main+5,0
  1507  0195  1383               	bcf	3,7
  1508  0196  0800               	movf	0,w
  1509  0197  00C2               	movwf	??_main+6
  1510  0198  0A84               	incf	4,f
  1511  0199  0800               	movf	0,w
  1512  019A  00C3               	movwf	??_main+7
  1513  019B  1283               	bcf	3,5	;RP0=0, select bank2
  1514  019C  1703               	bsf	3,6	;RP1=1, select bank2
  1515  019D  0868               	movf	main@l^(0+256),w
  1516  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1517  019F  1303               	bcf	3,6	;RP1=0, select bank0
  1518  01A0  00C4               	movwf	??_main+8
  1519  01A1  0744               	addwf	??_main+8,w
  1520  01A2  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1521  01A3  0084               	movwf	4
  1522  01A4  1383               	bcf	3,7	;select IRP bank1
  1523  01A5  0800               	movf	0,w
  1524  01A6  00C5               	movwf	??_main+9
  1525  01A7  0A84               	incf	4,f
  1526  01A8  0800               	movf	0,w
  1527  01A9  00C6               	movwf	??_main+10
  1528  01AA  1283               	bcf	3,5	;RP0=0, select bank2
  1529  01AB  1703               	bsf	3,6	;RP1=1, select bank2
  1530  01AC  0869               	movf	main@i_444^(0+256),w
  1531  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1532  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1533  01AF  00C7               	movwf	??_main+11
  1534  01B0  0747               	addwf	??_main+11,w
  1535  01B1  3E06               	addlw	6
  1536  01B2  0745               	addwf	??_main+9,w
  1537  01B3  00C8               	movwf	??_main+12
  1538  01B4  0846               	movf	??_main+10,w
  1539  01B5  1803               	skipnc
  1540  01B6  3E01               	addlw	1
  1541  01B7  00C9               	movwf	??_main+13
  1542  01B8  0848               	movf	??_main+12,w
  1543  01B9  0084               	movwf	4
  1544  01BA  1783               	bsf	3,7
  1545  01BB  1C49               	btfss	??_main+13,0
  1546  01BC  1383               	bcf	3,7
  1547  01BD  0800               	movf	0,w
  1548  01BE  00CA               	movwf	??_main+14
  1549  01BF  0A84               	incf	4,f
  1550  01C0  0800               	movf	0,w
  1551  01C1  00CB               	movwf	??_main+15
  1552  01C2  0843               	movf	??_main+7,w
  1553  01C3  064B               	xorwf	??_main+15,w
  1554  01C4  1D03               	skipz
  1555  01C5  29C8               	goto	u3415
  1556  01C6  0842               	movf	??_main+6,w
  1557  01C7  064A               	xorwf	??_main+14,w
  1558  01C8                     u3415:	
  1559  01C8  1903               	skipnz
  1560  01C9  29CB               	goto	u3411
  1561  01CA  29CC               	goto	u3410
  1562  01CB                     u3411:	
  1563  01CB  2A19               	goto	l3188
  1564  01CC                     u3410:	
  1565  01CC                     l3186:	
  1566                           
  1567                           ;main.c: 236:                     {;main.c: 237:                         (*(Semafori[l])
      +                          ).times[i] = (*(Semafori[l])).new_times[i];
  1568  01CC  1283               	bcf	3,5	;RP0=0, select bank2
  1569  01CD  1703               	bsf	3,6	;RP1=1, select bank2
  1570  01CE  0868               	movf	main@l^(0+256),w
  1571  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  1572  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  1573  01D1  00BC               	movwf	??_main
  1574  01D2  073C               	addwf	??_main,w
  1575  01D3  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1576  01D4  0084               	movwf	4
  1577  01D5  1383               	bcf	3,7	;select IRP bank1
  1578  01D6  0800               	movf	0,w
  1579  01D7  00BD               	movwf	??_main+1
  1580  01D8  0A84               	incf	4,f
  1581  01D9  0800               	movf	0,w
  1582  01DA  00BE               	movwf	??_main+2
  1583  01DB  1283               	bcf	3,5	;RP0=0, select bank2
  1584  01DC  1703               	bsf	3,6	;RP1=1, select bank2
  1585  01DD  0869               	movf	main@i_444^(0+256),w
  1586  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1587  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1588  01E0  00BF               	movwf	??_main+3
  1589  01E1  073F               	addwf	??_main+3,w
  1590  01E2  073D               	addwf	??_main+1,w
  1591  01E3  00C0               	movwf	??_main+4
  1592  01E4  083E               	movf	??_main+2,w
  1593  01E5  1803               	skipnc
  1594  01E6  3E01               	addlw	1
  1595  01E7  00C1               	movwf	??_main+5
  1596  01E8  0840               	movf	??_main+4,w
  1597  01E9  0084               	movwf	4
  1598  01EA  1783               	bsf	3,7
  1599  01EB  1C41               	btfss	??_main+5,0
  1600  01EC  1383               	bcf	3,7
  1601  01ED  0800               	movf	0,w
  1602  01EE  00C2               	movwf	??_main+6
  1603  01EF  0A84               	incf	4,f
  1604  01F0  0800               	movf	0,w
  1605  01F1  00C3               	movwf	??_main+7
  1606  01F2  1283               	bcf	3,5	;RP0=0, select bank2
  1607  01F3  1703               	bsf	3,6	;RP1=1, select bank2
  1608  01F4  0868               	movf	main@l^(0+256),w
  1609  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  1610  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  1611  01F7  00C4               	movwf	??_main+8
  1612  01F8  0744               	addwf	??_main+8,w
  1613  01F9  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1614  01FA  0084               	movwf	4
  1615  01FB  1383               	bcf	3,7	;select IRP bank1
  1616  01FC  0800               	movf	0,w
  1617  01FD  00C5               	movwf	??_main+9
  1618  01FE  0A84               	incf	4,f
  1619  01FF  0800               	movf	0,w
  1620  0200  00C6               	movwf	??_main+10
  1621  0201  1283               	bcf	3,5	;RP0=0, select bank2
  1622  0202  1703               	bsf	3,6	;RP1=1, select bank2
  1623  0203  0869               	movf	main@i_444^(0+256),w
  1624  0204  1283               	bcf	3,5	;RP0=0, select bank0
  1625  0205  1303               	bcf	3,6	;RP1=0, select bank0
  1626  0206  00C7               	movwf	??_main+11
  1627  0207  0747               	addwf	??_main+11,w
  1628  0208  3E06               	addlw	6
  1629  0209  0745               	addwf	??_main+9,w
  1630  020A  00C8               	movwf	??_main+12
  1631  020B  0846               	movf	??_main+10,w
  1632  020C  1803               	skipnc
  1633  020D  3E01               	addlw	1
  1634  020E  00C9               	movwf	??_main+13
  1635  020F  0848               	movf	??_main+12,w
  1636  0210  0084               	movwf	4
  1637  0211  1783               	bsf	3,7
  1638  0212  1C49               	btfss	??_main+13,0
  1639  0213  1383               	bcf	3,7
  1640  0214  0842               	movf	??_main+6,w
  1641  0215  0080               	movwf	0
  1642  0216  0A84               	incf	4,f
  1643  0217  0843               	movf	??_main+7,w
  1644  0218  0080               	movwf	0
  1645  0219                     l3188:	
  1646                           
  1647                           ;main.c: 239:                 }
  1648  0219  3001               	movlw	1
  1649  021A  00BC               	movwf	??_main
  1650  021B  083C               	movf	??_main,w
  1651  021C  1283               	bcf	3,5	;RP0=0, select bank2
  1652  021D  1703               	bsf	3,6	;RP1=1, select bank2
  1653  021E  07E9               	addwf	main@i_444^(0+256),f
  1654  021F  2970               	goto	l3180
  1655  0220                     l3192:	
  1656                           
  1657                           ;main.c: 240:             }
  1658  0220  3001               	movlw	1
  1659  0221  1283               	bcf	3,5	;RP0=0, select bank0
  1660  0222  1303               	bcf	3,6	;RP1=0, select bank0
  1661  0223  00BC               	movwf	??_main
  1662  0224  083C               	movf	??_main,w
  1663  0225  1283               	bcf	3,5	;RP0=0, select bank2
  1664  0226  1703               	bsf	3,6	;RP1=1, select bank2
  1665  0227  07E8               	addwf	main@l^(0+256),f
  1666  0228  2968               	goto	l3174
  1667  0229                     l3196:	
  1668                           
  1669                           ;main.c: 244:             {;main.c: 245:                 n_semafori = (n_semafori + 1) %
      +                           16;
  1670  0229  1303               	bcf	3,6	;RP1=0, select bank0
  1671  022A  0864               	movf	_n_semafori,w
  1672  022B  3E01               	addlw	1
  1673  022C  390F               	andlw	15
  1674  022D  00BC               	movwf	??_main
  1675  022E  083C               	movf	??_main,w
  1676  022F  00E4               	movwf	_n_semafori
  1677  0230                     l3198:	
  1678                           
  1679                           ;main.c: 246:             } while ((*(Semafori[n_semafori])).times[0] == 0 && n_semafori
      +                           > 0);
  1680  0230  0864               	movf	_n_semafori,w
  1681  0231  00BC               	movwf	??_main
  1682  0232  073C               	addwf	??_main,w
  1683  0233  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1684  0234  0084               	movwf	4
  1685  0235  1383               	bcf	3,7	;select IRP bank1
  1686  0236  0800               	movf	0,w
  1687  0237  00BD               	movwf	??_main+1
  1688  0238  0A84               	incf	4,f
  1689  0239  0800               	movf	0,w
  1690  023A  00BE               	movwf	??_main+2
  1691  023B  083D               	movf	??_main+1,w
  1692  023C  3E06               	addlw	6
  1693  023D  00BF               	movwf	??_main+3
  1694  023E  083E               	movf	??_main+2,w
  1695  023F  1803               	skipnc
  1696  0240  3E01               	addlw	1
  1697  0241  3E00               	addlw	0
  1698  0242  00C0               	movwf	??_main+4
  1699  0243  083F               	movf	??_main+3,w
  1700  0244  0084               	movwf	4
  1701  0245  1783               	bsf	3,7
  1702  0246  1C40               	btfss	??_main+4,0
  1703  0247  1383               	bcf	3,7
  1704  0248  0800               	movf	0,w
  1705  0249  00C1               	movwf	??_main+5
  1706  024A  0A84               	incf	4,f
  1707  024B  0800               	movf	0,w
  1708  024C  00C2               	movwf	??_main+6
  1709  024D  0841               	movf	??_main+5,w
  1710  024E  0442               	iorwf	??_main+6,w
  1711  024F  1D03               	btfss	3,2
  1712  0250  2A52               	goto	u3421
  1713  0251  2A53               	goto	u3420
  1714  0252                     u3421:	
  1715  0252  2A58               	goto	l225
  1716  0253                     u3420:	
  1717  0253                     l3200:	
  1718  0253  0864               	movf	_n_semafori,w
  1719  0254  1D03               	btfss	3,2
  1720  0255  2A57               	goto	u3431
  1721  0256  2A58               	goto	u3430
  1722  0257                     u3431:	
  1723  0257  2A29               	goto	l3196
  1724  0258                     u3430:	
  1725  0258                     l225:	
  1726                           ;main.c: 247:         }
  1727                           
  1728                           
  1729                           ;main.c: 251:         if (secondPassed.Bit && cycled.Bit)
  1730  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1731  0259  1C61               	btfss	_secondPassed,0
  1732  025A  2A5C               	goto	u3441
  1733  025B  2A5D               	goto	u3440
  1734  025C                     u3441:	
  1735  025C  2B1E               	goto	l3220
  1736  025D                     u3440:	
  1737  025D                     l3202:	
  1738  025D  1C60               	btfss	_cycled,0
  1739  025E  2A60               	goto	u3451
  1740  025F  2A61               	goto	u3450
  1741  0260                     u3451:	
  1742  0260  2B1E               	goto	l3220
  1743  0261                     u3450:	
  1744  0261                     l3204:	
  1745                           
  1746                           ;main.c: 252:         {;main.c: 253:             time++;
  1747  0261  3001               	movlw	1
  1748  0262  1283               	bcf	3,5	;RP0=0, select bank2
  1749  0263  1703               	bsf	3,6	;RP1=1, select bank2
  1750  0264  07DF               	addwf	main@time^(0+256),f
  1751  0265  1803               	skipnc
  1752  0266  0AE0               	incf	(main@time+1)^(0+256),f
  1753  0267  3000               	movlw	0
  1754  0268  07E0               	addwf	(main@time+1)^(0+256),f
  1755  0269                     l3206:	
  1756                           
  1757                           ;main.c: 254:             endCiclo.Bit = 0;
  1758  0269  105D               	bcf	main@endCiclo^(0+256),0
  1759  026A                     l3208:	
  1760                           
  1761                           ;main.c: 256:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  1762  026A  1283               	bcf	3,5	;RP0=0, select bank0
  1763  026B  1303               	bcf	3,6	;RP1=0, select bank0
  1764  026C  0864               	movf	_n_semafori,w
  1765  026D  00BC               	movwf	??_main
  1766  026E  073C               	addwf	??_main,w
  1767  026F  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1768  0270  0084               	movwf	4
  1769  0271  1383               	bcf	3,7	;select IRP bank1
  1770  0272  0800               	movf	0,w
  1771  0273  00BD               	movwf	??_main+1
  1772  0274  0A84               	incf	4,f
  1773  0275  0800               	movf	0,w
  1774  0276  00BE               	movwf	??_main+2
  1775  0277  1283               	bcf	3,5	;RP0=0, select bank2
  1776  0278  1703               	bsf	3,6	;RP1=1, select bank2
  1777  0279  0861               	movf	main@lux_select^(0+256),w
  1778  027A  1283               	bcf	3,5	;RP0=0, select bank0
  1779  027B  1303               	bcf	3,6	;RP1=0, select bank0
  1780  027C  00BF               	movwf	??_main+3
  1781  027D  073F               	addwf	??_main+3,w
  1782  027E  3E06               	addlw	6
  1783  027F  073D               	addwf	??_main+1,w
  1784  0280  00C0               	movwf	??_main+4
  1785  0281  083E               	movf	??_main+2,w
  1786  0282  1803               	skipnc
  1787  0283  3E01               	addlw	1
  1788  0284  00C1               	movwf	??_main+5
  1789  0285  0840               	movf	??_main+4,w
  1790  0286  0084               	movwf	4
  1791  0287  1783               	bsf	3,7
  1792  0288  1C41               	btfss	??_main+5,0
  1793  0289  1383               	bcf	3,7
  1794  028A  0800               	movf	0,w
  1795  028B  00C2               	movwf	??_main+6
  1796  028C  0A84               	incf	4,f
  1797  028D  0800               	movf	0,w
  1798  028E  00C3               	movwf	??_main+7
  1799  028F  1283               	bcf	3,5	;RP0=0, select bank2
  1800  0290  1703               	bsf	3,6	;RP1=1, select bank2
  1801  0291  085F               	movf	main@time^(0+256),w
  1802  0292  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0293  1303               	bcf	3,6	;RP1=0, select bank0
  1804  0294  0242               	subwf	??_main+6,w
  1805  0295  00C4               	movwf	??_main+8
  1806  0296  1283               	bcf	3,5	;RP0=0, select bank2
  1807  0297  1703               	bsf	3,6	;RP1=1, select bank2
  1808  0298  0860               	movf	(main@time+1)^(0+256),w
  1809  0299  1C03               	skipc
  1810  029A  0A60               	incf	(main@time+1)^(0+256),w
  1811  029B  1283               	bcf	3,5	;RP0=0, select bank0
  1812  029C  1303               	bcf	3,6	;RP1=0, select bank0
  1813  029D  0243               	subwf	??_main+7,w
  1814  029E  00C5               	movwf	??_main+9
  1815  029F  1FC5               	btfss	??_main+9,7
  1816  02A0  2AA2               	goto	u3461
  1817  02A1  2AA3               	goto	u3460
  1818  02A2                     u3461:	
  1819  02A2  2AA6               	goto	l3212
  1820  02A3                     u3460:	
  1821  02A3                     l3210:	
  1822                           
  1823                           ;main.c: 257:             {;main.c: 258:                 endCiclo.Bit = 1;
  1824  02A3  1283               	bcf	3,5	;RP0=0, select bank2
  1825  02A4  1703               	bsf	3,6	;RP1=1, select bank2
  1826  02A5  145D               	bsf	main@endCiclo^(0+256),0
  1827  02A6                     l3212:	
  1828                           
  1829                           ;main.c: 261:             if (lux_select == 2 && time >= (*Semafori[n_semafori]).times[2
      +                          ])
  1830  02A6  3002               	movlw	2
  1831  02A7  1283               	bcf	3,5	;RP0=0, select bank2
  1832  02A8  1703               	bsf	3,6	;RP1=1, select bank2
  1833  02A9  0661               	xorwf	main@lux_select^(0+256),w
  1834  02AA  1D03               	btfss	3,2
  1835  02AB  2AAD               	goto	u3471
  1836  02AC  2AAE               	goto	u3470
  1837  02AD                     u3471:	
  1838  02AD  2AE4               	goto	l3218
  1839  02AE                     u3470:	
  1840  02AE                     l3214:	
  1841  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  1842  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  1843  02B0  0864               	movf	_n_semafori,w
  1844  02B1  00BC               	movwf	??_main
  1845  02B2  073C               	addwf	??_main,w
  1846  02B3  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1847  02B4  0084               	movwf	4
  1848  02B5  1383               	bcf	3,7	;select IRP bank1
  1849  02B6  0800               	movf	0,w
  1850  02B7  00BD               	movwf	??_main+1
  1851  02B8  0A84               	incf	4,f
  1852  02B9  0800               	movf	0,w
  1853  02BA  00BE               	movwf	??_main+2
  1854  02BB  083D               	movf	??_main+1,w
  1855  02BC  3E0A               	addlw	10
  1856  02BD  00BF               	movwf	??_main+3
  1857  02BE  083E               	movf	??_main+2,w
  1858  02BF  1803               	skipnc
  1859  02C0  3E01               	addlw	1
  1860  02C1  3E00               	addlw	0
  1861  02C2  00C0               	movwf	??_main+4
  1862  02C3  083F               	movf	??_main+3,w
  1863  02C4  0084               	movwf	4
  1864  02C5  1783               	bsf	3,7
  1865  02C6  1C40               	btfss	??_main+4,0
  1866  02C7  1383               	bcf	3,7
  1867  02C8  0800               	movf	0,w
  1868  02C9  00C1               	movwf	??_main+5
  1869  02CA  0A84               	incf	4,f
  1870  02CB  0800               	movf	0,w
  1871  02CC  00C2               	movwf	??_main+6
  1872  02CD  1283               	bcf	3,5	;RP0=0, select bank2
  1873  02CE  1703               	bsf	3,6	;RP1=1, select bank2
  1874  02CF  0860               	movf	(main@time+1)^(0+256),w
  1875  02D0  3A80               	xorlw	128
  1876  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  1877  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  1878  02D3  00C3               	movwf	??_main+7
  1879  02D4  0842               	movf	??_main+6,w
  1880  02D5  3A80               	xorlw	128
  1881  02D6  0243               	subwf	??_main+7,w
  1882  02D7  1D03               	skipz
  1883  02D8  2ADD               	goto	u3485
  1884  02D9  0841               	movf	??_main+5,w
  1885  02DA  1283               	bcf	3,5	;RP0=0, select bank2
  1886  02DB  1703               	bsf	3,6	;RP1=1, select bank2
  1887  02DC  025F               	subwf	main@time^(0+256),w
  1888  02DD                     u3485:	
  1889  02DD  1C03               	skipc
  1890  02DE  2AE0               	goto	u3481
  1891  02DF  2AE1               	goto	u3480
  1892  02E0                     u3481:	
  1893  02E0  2AE4               	goto	l3218
  1894  02E1                     u3480:	
  1895  02E1                     l3216:	
  1896                           
  1897                           ;main.c: 262:             {;main.c: 263:                 endCiclo.Bit = 1;
  1898  02E1  1283               	bcf	3,5	;RP0=0, select bank2
  1899  02E2  1703               	bsf	3,6	;RP1=1, select bank2
  1900  02E3  145D               	bsf	main@endCiclo^(0+256),0
  1901  02E4                     l3218:	
  1902                           
  1903                           ;main.c: 266:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  1904  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  1905  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  1906  02E6  0864               	movf	_n_semafori,w
  1907  02E7  00BC               	movwf	??_main
  1908  02E8  073C               	addwf	??_main,w
  1909  02E9  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1910  02EA  0084               	movwf	4
  1911  02EB  1383               	bcf	3,7	;select IRP bank1
  1912  02EC  0800               	movf	0,w
  1913  02ED  00BD               	movwf	??_main+1
  1914  02EE  0A84               	incf	4,f
  1915  02EF  0800               	movf	0,w
  1916  02F0  00BE               	movwf	??_main+2
  1917  02F1  1283               	bcf	3,5	;RP0=0, select bank2
  1918  02F2  1703               	bsf	3,6	;RP1=1, select bank2
  1919  02F3  0861               	movf	main@lux_select^(0+256),w
  1920  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  1921  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  1922  02F6  00BF               	movwf	??_main+3
  1923  02F7  073F               	addwf	??_main+3,w
  1924  02F8  3E06               	addlw	6
  1925  02F9  073D               	addwf	??_main+1,w
  1926  02FA  00C0               	movwf	??_main+4
  1927  02FB  083E               	movf	??_main+2,w
  1928  02FC  1803               	skipnc
  1929  02FD  3E01               	addlw	1
  1930  02FE  00C1               	movwf	??_main+5
  1931  02FF  0840               	movf	??_main+4,w
  1932  0300  0084               	movwf	4
  1933  0301  1783               	bsf	3,7
  1934  0302  1C41               	btfss	??_main+5,0
  1935  0303  1383               	bcf	3,7
  1936  0304  0800               	movf	0,w
  1937  0305  00C2               	movwf	??_main+6
  1938  0306  0A84               	incf	4,f
  1939  0307  0800               	movf	0,w
  1940  0308  00C3               	movwf	??_main+7
  1941  0309  1283               	bcf	3,5	;RP0=0, select bank2
  1942  030A  1703               	bsf	3,6	;RP1=1, select bank2
  1943  030B  085F               	movf	main@time^(0+256),w
  1944  030C  1283               	bcf	3,5	;RP0=0, select bank0
  1945  030D  1303               	bcf	3,6	;RP1=0, select bank0
  1946  030E  0242               	subwf	??_main+6,w
  1947  030F  00B0               	movwf	GetDigits@Time
  1948  0310  1283               	bcf	3,5	;RP0=0, select bank2
  1949  0311  1703               	bsf	3,6	;RP1=1, select bank2
  1950  0312  0860               	movf	(main@time+1)^(0+256),w
  1951  0313  1C03               	skipc
  1952  0314  0A60               	incf	(main@time+1)^(0+256),w
  1953  0315  1283               	bcf	3,5	;RP0=0, select bank0
  1954  0316  1303               	bcf	3,6	;RP1=0, select bank0
  1955  0317  0243               	subwf	??_main+7,w
  1956  0318  00B1               	movwf	GetDigits@Time+1
  1957  0319  120A  158A  2643  120A  118A  	fcall	_GetDigits
  1958  031E                     l3220:	
  1959                           
  1960                           ;main.c: 270:         if (disp != old_disp)
  1961  031E  1283               	bcf	3,5	;RP0=0, select bank0
  1962  031F  1303               	bcf	3,6	;RP1=0, select bank0
  1963  0320  085B               	movf	_disp,w
  1964  0321  065C               	xorwf	_old_disp,w
  1965  0322  1903               	skipnz
  1966  0323  2B25               	goto	u3491
  1967  0324  2B26               	goto	u3490
  1968  0325                     u3491:	
  1969  0325  2BA2               	goto	l3242
  1970  0326                     u3490:	
  1971  0326                     l3222:	
  1972                           
  1973                           ;main.c: 271:         {;main.c: 272:             old_disp = disp;
  1974  0326  085B               	movf	_disp,w
  1975  0327  00BC               	movwf	??_main
  1976  0328  083C               	movf	??_main,w
  1977  0329  00DC               	movwf	_old_disp
  1978                           
  1979                           ;main.c: 273:             switch (disp)
  1980  032A  2B8C               	goto	l3240
  1981  032B                     l3224:	
  1982                           
  1983                           ;main.c: 276:                 if (centinaia > 0)
  1984  032B  085D               	movf	_centinaia,w
  1985  032C  1903               	btfsc	3,2
  1986  032D  2B2F               	goto	u3501
  1987  032E  2B30               	goto	u3500
  1988  032F                     u3501:	
  1989  032F  2BA2               	goto	l3242
  1990  0330                     u3500:	
  1991  0330                     l3226:	
  1992                           
  1993                           ;main.c: 277:                 {;main.c: 278:                     SetDisplay(1, 0, 0, dis
      +                          play[centinaia]);
  1994  0330  01A0               	clrf	SetDisplay@d2
  1995  0331  01A1               	clrf	SetDisplay@d3
  1996  0332  085D               	movf	_centinaia,w
  1997  0333  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  1998  0334  0084               	movwf	4
  1999  0335  120A  158A  2000  120A  118A  	fcall	stringdir
  2000  033A  00BC               	movwf	??_main
  2001  033B  083C               	movf	??_main,w
  2002  033C  00A2               	movwf	SetDisplay@value
  2003  033D  3001               	movlw	1
  2004  033E  120A  158A  239E  120A  118A  	fcall	_SetDisplay
  2005  0343  2BA2               	goto	l3242
  2006  0344                     l3228:	
  2007                           
  2008                           ;main.c: 282:                 if (decine > 0 || centinaia > 0)
  2009  0344  085E               	movf	_decine,w
  2010  0345  1D03               	btfss	3,2
  2011  0346  2B48               	goto	u3511
  2012  0347  2B49               	goto	u3510
  2013  0348                     u3511:	
  2014  0348  2B4E               	goto	l3232
  2015  0349                     u3510:	
  2016  0349                     l3230:	
  2017  0349  085D               	movf	_centinaia,w
  2018  034A  1903               	btfsc	3,2
  2019  034B  2B4D               	goto	u3521
  2020  034C  2B4E               	goto	u3520
  2021  034D                     u3521:	
  2022  034D  2BA2               	goto	l3242
  2023  034E                     u3520:	
  2024  034E                     l3232:	
  2025                           
  2026                           ;main.c: 283:                 {;main.c: 284:                     SetDisplay(0, 1, 0, dis
      +                          play[decine]);
  2027  034E  01A0               	clrf	SetDisplay@d2
  2028  034F  0AA0               	incf	SetDisplay@d2,f
  2029  0350  01A1               	clrf	SetDisplay@d3
  2030  0351  085E               	movf	_decine,w
  2031  0352  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2032  0353  0084               	movwf	4
  2033  0354  120A  158A  2000  120A  118A  	fcall	stringdir
  2034  0359  00BC               	movwf	??_main
  2035  035A  083C               	movf	??_main,w
  2036  035B  00A2               	movwf	SetDisplay@value
  2037  035C  3000               	movlw	0
  2038  035D  120A  158A  239E  120A  118A  	fcall	_SetDisplay
  2039  0362  2BA2               	goto	l3242
  2040  0363                     l3234:	
  2041                           
  2042                           ;main.c: 288:                 SetDisplay(0, 0, 1, display[unita]);
  2043  0363  01A0               	clrf	SetDisplay@d2
  2044  0364  01A1               	clrf	SetDisplay@d3
  2045  0365  0AA1               	incf	SetDisplay@d3,f
  2046  0366  085F               	movf	_unita,w
  2047  0367  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2048  0368  0084               	movwf	4
  2049  0369  120A  158A  2000  120A  118A  	fcall	stringdir
  2050  036E  00BC               	movwf	??_main
  2051  036F  083C               	movf	??_main,w
  2052  0370  00A2               	movwf	SetDisplay@value
  2053  0371  3000               	movlw	0
  2054  0372  120A  158A  239E  120A  118A  	fcall	_SetDisplay
  2055                           
  2056                           ;main.c: 289:                 break;
  2057  0377  2BA2               	goto	l3242
  2058  0378                     l3236:	
  2059                           
  2060                           ;main.c: 291:                 SetDisplay(1, 0, 0, display[n_semafori]);
  2061  0378  01A0               	clrf	SetDisplay@d2
  2062  0379  01A1               	clrf	SetDisplay@d3
  2063  037A  0864               	movf	_n_semafori,w
  2064  037B  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2065  037C  0084               	movwf	4
  2066  037D  120A  158A  2000  120A  118A  	fcall	stringdir
  2067  0382  00BC               	movwf	??_main
  2068  0383  083C               	movf	??_main,w
  2069  0384  00A2               	movwf	SetDisplay@value
  2070  0385  3001               	movlw	1
  2071  0386  120A  158A  239E  120A  118A  	fcall	_SetDisplay
  2072                           
  2073                           ;main.c: 292:                 break;
  2074  038B  2BA2               	goto	l3242
  2075  038C                     l3240:	
  2076  038C  085B               	movf	_disp,w
  2077  038D  00BC               	movwf	??_main
  2078  038E  01BD               	clrf	??_main+1
  2079                           
  2080                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2081                           ; Switch size 1, requested type "simple"
  2082                           ; Number of cases is 1, Range of values is 0 to 0
  2083                           ; switch strategies available:
  2084                           ; Name         Instructions Cycles
  2085                           ; simple_byte            4     3 (average)
  2086                           ; direct_byte           11     8 (fixed)
  2087                           ; jumptable            260     6 (fixed)
  2088                           ;	Chosen strategy is simple_byte
  2089  038F  083D               	movf	??_main+1,w
  2090  0390  3A00               	xorlw	0	; case 0
  2091  0391  1903               	skipnz
  2092  0392  2B94               	goto	l3416
  2093  0393  2BA2               	goto	l3242
  2094  0394                     l3416:	
  2095                           
  2096                           ; Switch size 1, requested type "simple"
  2097                           ; Number of cases is 4, Range of values is 0 to 3
  2098                           ; switch strategies available:
  2099                           ; Name         Instructions Cycles
  2100                           ; simple_byte           13     7 (average)
  2101                           ; direct_byte           20     8 (fixed)
  2102                           ; jumptable            260     6 (fixed)
  2103                           ;	Chosen strategy is simple_byte
  2104  0394  083C               	movf	??_main,w
  2105  0395  3A00               	xorlw	0	; case 0
  2106  0396  1903               	skipnz
  2107  0397  2B2B               	goto	l3224
  2108  0398  3A01               	xorlw	1	; case 1
  2109  0399  1903               	skipnz
  2110  039A  2B44               	goto	l3228
  2111  039B  3A03               	xorlw	3	; case 2
  2112  039C  1903               	skipnz
  2113  039D  2B63               	goto	l3234
  2114  039E  3A01               	xorlw	1	; case 3
  2115  039F  1903               	skipnz
  2116  03A0  2B78               	goto	l3236
  2117  03A1  2BA2               	goto	l3242
  2118  03A2                     l3242:	
  2119                           
  2120                           ;main.c: 295:         disp = (disp + 1) % 3;
  2121  03A2  3003               	movlw	3
  2122  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2123  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  2124  03A5  00A0               	movwf	___awmod@divisor
  2125  03A6  3000               	movlw	0
  2126  03A7  00A1               	movwf	___awmod@divisor+1
  2127  03A8  085B               	movf	_disp,w
  2128  03A9  3E01               	addlw	1
  2129  03AA  00A2               	movwf	___awmod@dividend
  2130  03AB  3000               	movlw	0
  2131  03AC  1803               	skipnc
  2132  03AD  3001               	movlw	1
  2133  03AE  00A3               	movwf	___awmod@dividend+1
  2134  03AF  120A  158A  257F  120A  118A  	fcall	___awmod
  2135  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  2136  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  2137  03B6  0820               	movf	?___awmod,w
  2138  03B7  00BC               	movwf	??_main
  2139  03B8  083C               	movf	??_main,w
  2140  03B9  00DB               	movwf	_disp
  2141  03BA                     l3244:	
  2142                           
  2143                           ;main.c: 301:         if (secondPassed.Bit && cycled.Bit)
  2144  03BA  1C61               	btfss	_secondPassed,0
  2145  03BB  2BBD               	goto	u3531
  2146  03BC  2BBE               	goto	u3530
  2147  03BD                     u3531:	
  2148  03BD  2BC4               	goto	l249
  2149  03BE                     u3530:	
  2150  03BE                     l3246:	
  2151  03BE  1C60               	btfss	_cycled,0
  2152  03BF  2BC1               	goto	u3541
  2153  03C0  2BC2               	goto	u3540
  2154  03C1                     u3541:	
  2155  03C1  2BC4               	goto	l249
  2156  03C2                     u3540:	
  2157  03C2                     l3248:	
  2158                           
  2159                           ;main.c: 302:         {;main.c: 303:             secondPassed.Bit = 0;
  2160  03C2  1061               	bcf	_secondPassed,0
  2161                           
  2162                           ;main.c: 304:             cycled.Bit = 0;
  2163  03C3  1060               	bcf	_cycled,0
  2164  03C4                     l249:	
  2165                           ;main.c: 305:         }
  2166                           
  2167                           
  2168                           ;main.c: 307:         if (secondPassed.Bit && !cycled.Bit)
  2169  03C4  1C61               	btfss	_secondPassed,0
  2170  03C5  2BC7               	goto	u3551
  2171  03C6  2BC8               	goto	u3550
  2172  03C7                     u3551:	
  2173  03C7  2BCD               	goto	l3254
  2174  03C8                     u3550:	
  2175  03C8                     l3250:	
  2176  03C8  1860               	btfsc	_cycled,0
  2177  03C9  2BCB               	goto	u3561
  2178  03CA  2BCC               	goto	u3560
  2179  03CB                     u3561:	
  2180  03CB  2BCD               	goto	l3254
  2181  03CC                     u3560:	
  2182  03CC                     l3252:	
  2183                           
  2184                           ;main.c: 308:         {;main.c: 309:             cycled.Bit = 1;
  2185  03CC  1460               	bsf	_cycled,0
  2186  03CD                     l3254:	
  2187                           
  2188                           ;main.c: 313:         if ((dataFromGateway[0] & 0x7F) == 0x08)
  2189  03CD  307F               	movlw	127
  2190  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  2191  03CF  1303               	bcf	3,6	;RP1=0, select bank1
  2192  03D0  0520               	andwf	_dataFromGateway^(0+128),w
  2193  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  2194  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  2195  03D3  00BC               	movwf	??_main
  2196  03D4  3008               	movlw	8
  2197  03D5  063C               	xorwf	??_main,w
  2198  03D6  1D03               	btfss	3,2
  2199  03D7  2BD9               	goto	u3571
  2200  03D8  2BDA               	goto	u3570
  2201  03D9                     u3571:	
  2202  03D9  2CA8               	goto	l3292
  2203  03DA                     u3570:	
  2204  03DA                     l3256:	
  2205                           
  2206                           ;main.c: 314:         {;main.c: 315:             for (int i = 0; i < 4; i++)
  2207  03DA  1283               	bcf	3,5	;RP0=0, select bank2
  2208  03DB  1703               	bsf	3,6	;RP1=1, select bank2
  2209  03DC  01EA               	clrf	main@i_445^(0+256)
  2210  03DD  01EB               	clrf	(main@i_445+1)^(0+256)
  2211  03DE                     l3258:	
  2212  03DE  086B               	movf	(main@i_445+1)^(0+256),w
  2213  03DF  3A80               	xorlw	128
  2214  03E0  00FF               	movwf	btemp+1
  2215  03E1  3080               	movlw	128
  2216  03E2  027F               	subwf	btemp+1,w
  2217  03E3  1D03               	skipz
  2218  03E4  2BE7               	goto	u3585
  2219  03E5  3004               	movlw	4
  2220  03E6  026A               	subwf	main@i_445^(0+256),w
  2221  03E7                     u3585:	
  2222  03E7  1C03               	skipc
  2223  03E8  2BEA               	goto	u3581
  2224  03E9  2BEB               	goto	u3580
  2225  03EA                     u3581:	
  2226  03EA  2BEC               	goto	l3262
  2227  03EB                     u3580:	
  2228  03EB  2C68               	goto	l3268
  2229  03EC                     l3262:	
  2230                           
  2231                           ;main.c: 316:             {;main.c: 317:                 sendByte((0x01 << (i + 1)), 0x0
      +                          1, motorcycle[i]);
  2232  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2233  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  2234  03EE  01B4               	clrf	sendByte@byte1
  2235  03EF  0AB4               	incf	sendByte@byte1,f
  2236  03F0  1283               	bcf	3,5	;RP0=0, select bank2
  2237  03F1  1703               	bsf	3,6	;RP1=1, select bank2
  2238  03F2  086A               	movf	main@i_445^(0+256),w
  2239  03F3  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  2240  03F4  0084               	movwf	4
  2241  03F5  1383               	bcf	3,7	;select IRP bank0
  2242  03F6  0800               	movf	0,w
  2243  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2244  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2245  03F9  00BC               	movwf	??_main
  2246  03FA  083C               	movf	??_main,w
  2247  03FB  00B5               	movwf	sendByte@valore
  2248  03FC  3001               	movlw	1
  2249  03FD  00BD               	movwf	??_main+1
  2250  03FE  1283               	bcf	3,5	;RP0=0, select bank2
  2251  03FF  1703               	bsf	3,6	;RP1=1, select bank2
  2252  0400  086A               	movf	main@i_445^(0+256),w
  2253  0401  3E01               	addlw	1
  2254  0402  3E01               	addlw	1
  2255  0403  1283               	bcf	3,5	;RP0=0, select bank0
  2256  0404  1303               	bcf	3,6	;RP1=0, select bank0
  2257  0405  2C08               	goto	u3594
  2258  0406                     u3595:	
  2259  0406  1003               	clrc
  2260  0407  0DBD               	rlf	??_main+1,f
  2261  0408                     u3594:	
  2262  0408  3EFF               	addlw	-1
  2263  0409  1D03               	skipz
  2264  040A  2C06               	goto	u3595
  2265  040B  083D               	movf	??_main+1,w
  2266  040C  120A  158A  2417  120A  118A  	fcall	_sendByte
  2267                           
  2268                           ;main.c: 318:                 sendByte((0x01 << (i + 1)), 0x10, car[i]);
  2269  0411  3010               	movlw	16
  2270  0412  1283               	bcf	3,5	;RP0=0, select bank0
  2271  0413  1303               	bcf	3,6	;RP1=0, select bank0
  2272  0414  00BC               	movwf	??_main
  2273  0415  083C               	movf	??_main,w
  2274  0416  00B4               	movwf	sendByte@byte1
  2275  0417  1283               	bcf	3,5	;RP0=0, select bank2
  2276  0418  1703               	bsf	3,6	;RP1=1, select bank2
  2277  0419  086A               	movf	main@i_445^(0+256),w
  2278  041A  3E50               	addlw	(low (_car| 0))& (0+255)
  2279  041B  0084               	movwf	4
  2280  041C  1383               	bcf	3,7	;select IRP bank0
  2281  041D  0800               	movf	0,w
  2282  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2283  041F  1303               	bcf	3,6	;RP1=0, select bank0
  2284  0420  00BD               	movwf	??_main+1
  2285  0421  083D               	movf	??_main+1,w
  2286  0422  00B5               	movwf	sendByte@valore
  2287  0423  3001               	movlw	1
  2288  0424  00BE               	movwf	??_main+2
  2289  0425  1283               	bcf	3,5	;RP0=0, select bank2
  2290  0426  1703               	bsf	3,6	;RP1=1, select bank2
  2291  0427  086A               	movf	main@i_445^(0+256),w
  2292  0428  3E01               	addlw	1
  2293  0429  3E01               	addlw	1
  2294  042A  1283               	bcf	3,5	;RP0=0, select bank0
  2295  042B  1303               	bcf	3,6	;RP1=0, select bank0
  2296  042C  2C2F               	goto	u3604
  2297  042D                     u3605:	
  2298  042D  1003               	clrc
  2299  042E  0DBE               	rlf	??_main+2,f
  2300  042F                     u3604:	
  2301  042F  3EFF               	addlw	-1
  2302  0430  1D03               	skipz
  2303  0431  2C2D               	goto	u3605
  2304  0432  083E               	movf	??_main+2,w
  2305  0433  120A  158A  2417  120A  118A  	fcall	_sendByte
  2306                           
  2307                           ;main.c: 319:                 sendByte((0x01 << (i + 1)), 0x11, truck[i]);
  2308  0438  3011               	movlw	17
  2309  0439  1283               	bcf	3,5	;RP0=0, select bank0
  2310  043A  1303               	bcf	3,6	;RP1=0, select bank0
  2311  043B  00BC               	movwf	??_main
  2312  043C  083C               	movf	??_main,w
  2313  043D  00B4               	movwf	sendByte@byte1
  2314  043E  1283               	bcf	3,5	;RP0=0, select bank2
  2315  043F  1703               	bsf	3,6	;RP1=1, select bank2
  2316  0440  086A               	movf	main@i_445^(0+256),w
  2317  0441  3E4C               	addlw	(low (_truck| 0))& (0+255)
  2318  0442  0084               	movwf	4
  2319  0443  1383               	bcf	3,7	;select IRP bank0
  2320  0444  0800               	movf	0,w
  2321  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0447  00BD               	movwf	??_main+1
  2324  0448  083D               	movf	??_main+1,w
  2325  0449  00B5               	movwf	sendByte@valore
  2326  044A  3001               	movlw	1
  2327  044B  00BE               	movwf	??_main+2
  2328  044C  1283               	bcf	3,5	;RP0=0, select bank2
  2329  044D  1703               	bsf	3,6	;RP1=1, select bank2
  2330  044E  086A               	movf	main@i_445^(0+256),w
  2331  044F  3E01               	addlw	1
  2332  0450  3E01               	addlw	1
  2333  0451  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0452  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0453  2C56               	goto	u3614
  2336  0454                     u3615:	
  2337  0454  1003               	clrc
  2338  0455  0DBE               	rlf	??_main+2,f
  2339  0456                     u3614:	
  2340  0456  3EFF               	addlw	-1
  2341  0457  1D03               	skipz
  2342  0458  2C54               	goto	u3615
  2343  0459  083E               	movf	??_main+2,w
  2344  045A  120A  158A  2417  120A  118A  	fcall	_sendByte
  2345  045F                     l3264:	
  2346                           
  2347                           ;main.c: 320:             }
  2348  045F  3001               	movlw	1
  2349  0460  1283               	bcf	3,5	;RP0=0, select bank2
  2350  0461  1703               	bsf	3,6	;RP1=1, select bank2
  2351  0462  07EA               	addwf	main@i_445^(0+256),f
  2352  0463  1803               	skipnc
  2353  0464  0AEB               	incf	(main@i_445+1)^(0+256),f
  2354  0465  3000               	movlw	0
  2355  0466  07EB               	addwf	(main@i_445+1)^(0+256),f
  2356  0467  2BDE               	goto	l3258
  2357  0468                     l3268:	
  2358                           
  2359                           ;main.c: 321:             for (int i = 0; i < 4; i++)
  2360  0468  1283               	bcf	3,5	;RP0=0, select bank2
  2361  0469  1703               	bsf	3,6	;RP1=1, select bank2
  2362  046A  01E6               	clrf	main@i_446^(0+256)
  2363  046B  01E7               	clrf	(main@i_446+1)^(0+256)
  2364  046C                     l3270:	
  2365  046C  0867               	movf	(main@i_446+1)^(0+256),w
  2366  046D  3A80               	xorlw	128
  2367  046E  00FF               	movwf	btemp+1
  2368  046F  3080               	movlw	128
  2369  0470  027F               	subwf	btemp+1,w
  2370  0471  1D03               	skipz
  2371  0472  2C75               	goto	u3625
  2372  0473  3004               	movlw	4
  2373  0474  0266               	subwf	main@i_446^(0+256),w
  2374  0475                     u3625:	
  2375  0475  1C03               	skipc
  2376  0476  2C78               	goto	u3621
  2377  0477  2C79               	goto	u3620
  2378  0478                     u3621:	
  2379  0478  2C7A               	goto	l3274
  2380  0479                     u3620:	
  2381  0479  2C90               	goto	l3280
  2382  047A                     l3274:	
  2383                           
  2384                           ;main.c: 322:             {;main.c: 323:                 motorcycle[i] = 0;
  2385  047A  1283               	bcf	3,5	;RP0=0, select bank2
  2386  047B  1703               	bsf	3,6	;RP1=1, select bank2
  2387  047C  0866               	movf	main@i_446^(0+256),w
  2388  047D  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  2389  047E  0084               	movwf	4
  2390  047F  1383               	bcf	3,7	;select IRP bank0
  2391  0480  0180               	clrf	0
  2392                           
  2393                           ;main.c: 324:                 car[i] = 0;
  2394  0481  0866               	movf	main@i_446^(0+256),w
  2395  0482  3E50               	addlw	(low (_car| 0))& (0+255)
  2396  0483  0084               	movwf	4
  2397  0484  0180               	clrf	0
  2398                           
  2399                           ;main.c: 325:                 truck[i] = 0;
  2400  0485  0866               	movf	main@i_446^(0+256),w
  2401  0486  3E4C               	addlw	(low (_truck| 0))& (0+255)
  2402  0487  0084               	movwf	4
  2403  0488  0180               	clrf	0
  2404  0489                     l3276:	
  2405                           
  2406                           ;main.c: 326:             }
  2407  0489  3001               	movlw	1
  2408  048A  07E6               	addwf	main@i_446^(0+256),f
  2409  048B  1803               	skipnc
  2410  048C  0AE7               	incf	(main@i_446+1)^(0+256),f
  2411  048D  3000               	movlw	0
  2412  048E  07E7               	addwf	(main@i_446+1)^(0+256),f
  2413  048F  2C6C               	goto	l3270
  2414  0490                     l3280:	
  2415                           
  2416                           ;main.c: 327:             for (unsigned char i = 0; i < 5; i++)
  2417  0490  1283               	bcf	3,5	;RP0=0, select bank2
  2418  0491  1703               	bsf	3,6	;RP1=1, select bank2
  2419  0492  01E4               	clrf	main@i_447^(0+256)
  2420  0493                     l3282:	
  2421  0493  3005               	movlw	5
  2422  0494  0264               	subwf	main@i_447^(0+256),w
  2423  0495  1C03               	skipc
  2424  0496  2C98               	goto	u3631
  2425  0497  2C99               	goto	u3630
  2426  0498                     u3631:	
  2427  0498  2C9A               	goto	l3286
  2428  0499                     u3630:	
  2429  0499  2CA8               	goto	l3292
  2430  049A                     l3286:	
  2431                           
  2432                           ;main.c: 328:             {;main.c: 329:                 dataFromGateway[i] = 0;
  2433  049A  0864               	movf	main@i_447^(0+256),w
  2434  049B  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  2435  049C  0084               	movwf	4
  2436  049D  1383               	bcf	3,7	;select IRP bank1
  2437  049E  0180               	clrf	0
  2438  049F                     l3288:	
  2439                           
  2440                           ;main.c: 330:             }
  2441  049F  3001               	movlw	1
  2442  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  2443  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  2444  04A2  00BC               	movwf	??_main
  2445  04A3  083C               	movf	??_main,w
  2446  04A4  1283               	bcf	3,5	;RP0=0, select bank2
  2447  04A5  1703               	bsf	3,6	;RP1=1, select bank2
  2448  04A6  07E4               	addwf	main@i_447^(0+256),f
  2449  04A7  2C93               	goto	l3282
  2450  04A8                     l3292:	
  2451                           
  2452                           ;main.c: 335:         if ((dataFromGateway[0] & 0x7F) == 0x0A)
  2453  04A8  307F               	movlw	127
  2454  04A9  1683               	bsf	3,5	;RP0=1, select bank1
  2455  04AA  1303               	bcf	3,6	;RP1=0, select bank1
  2456  04AB  0520               	andwf	_dataFromGateway^(0+128),w
  2457  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  2458  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  2459  04AE  00BC               	movwf	??_main
  2460  04AF  300A               	movlw	10
  2461  04B0  063C               	xorwf	??_main,w
  2462  04B1  1D03               	btfss	3,2
  2463  04B2  2CB4               	goto	u3641
  2464  04B3  2CB5               	goto	u3640
  2465  04B4                     u3641:	
  2466  04B4  2895               	goto	l3122
  2467  04B5                     u3640:	
  2468  04B5                     l3294:	
  2469                           
  2470                           ;main.c: 336:         {;main.c: 337:             temp = (char)map((ADC_Read(0) >> 2), 0,
      +                           255, -20, 60);
  2471  04B5  3000               	movlw	0
  2472  04B6  120A  158A  23CA  120A  118A  	fcall	_ADC_Read
  2473  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  2474  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  2475  04BD  0820               	movf	?_ADC_Read,w
  2476  04BE  00BC               	movwf	??_main
  2477  04BF  0821               	movf	?_ADC_Read+1,w
  2478  04C0  00BD               	movwf	??_main+1
  2479  04C1  0D3D               	rlf	??_main+1,w
  2480  04C2  0CBD               	rrf	??_main+1,f
  2481  04C3  0CBC               	rrf	??_main,f
  2482  04C4  0D3D               	rlf	??_main+1,w
  2483  04C5  0CBD               	rrf	??_main+1,f
  2484  04C6  0CBC               	rrf	??_main,f
  2485  04C7  083C               	movf	??_main,w
  2486  04C8  00B0               	movwf	map@x
  2487  04C9  083D               	movf	??_main+1,w
  2488  04CA  00B1               	movwf	map@x+1
  2489  04CB  3000               	movlw	0
  2490  04CC  00B2               	movwf	map@in_min
  2491  04CD  00B3               	movwf	map@in_min+1
  2492  04CE  30FF               	movlw	255
  2493  04CF  00B4               	movwf	map@in_max
  2494  04D0  3000               	movlw	0
  2495  04D1  00B5               	movwf	map@in_max+1
  2496  04D2  30EC               	movlw	236
  2497  04D3  00B6               	movwf	map@out_min
  2498  04D4  30FF               	movlw	255
  2499  04D5  00B7               	movwf	map@out_min+1
  2500  04D6  303C               	movlw	60
  2501  04D7  00B8               	movwf	map@out_max
  2502  04D8  3000               	movlw	0
  2503  04D9  00B9               	movwf	map@out_max+1
  2504  04DA  120A  158A  2476  120A  118A  	fcall	_map
  2505  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2506  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2507  04E1  0830               	movf	?_map,w
  2508  04E2  00BE               	movwf	??_main+2
  2509  04E3  083E               	movf	??_main+2,w
  2510  04E4  1283               	bcf	3,5	;RP0=0, select bank2
  2511  04E5  1703               	bsf	3,6	;RP1=1, select bank2
  2512  04E6  00DA               	movwf	main@temp^(0+256)
  2513                           
  2514                           ;main.c: 338:             umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  2515  04E7  3001               	movlw	1
  2516  04E8  120A  158A  23CA  120A  118A  	fcall	_ADC_Read
  2517  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  2518  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  2519  04EF  0820               	movf	?_ADC_Read,w
  2520  04F0  00BC               	movwf	??_main
  2521  04F1  0821               	movf	?_ADC_Read+1,w
  2522  04F2  00BD               	movwf	??_main+1
  2523  04F3  0D3D               	rlf	??_main+1,w
  2524  04F4  0CBD               	rrf	??_main+1,f
  2525  04F5  0CBC               	rrf	??_main,f
  2526  04F6  0D3D               	rlf	??_main+1,w
  2527  04F7  0CBD               	rrf	??_main+1,f
  2528  04F8  0CBC               	rrf	??_main,f
  2529  04F9  083C               	movf	??_main,w
  2530  04FA  00B0               	movwf	map@x
  2531  04FB  083D               	movf	??_main+1,w
  2532  04FC  00B1               	movwf	map@x+1
  2533  04FD  3000               	movlw	0
  2534  04FE  00B2               	movwf	map@in_min
  2535  04FF  00B3               	movwf	map@in_min+1
  2536  0500  30FF               	movlw	255
  2537  0501  00B4               	movwf	map@in_max
  2538  0502  3000               	movlw	0
  2539  0503  00B5               	movwf	map@in_max+1
  2540  0504  3000               	movlw	0
  2541  0505  00B6               	movwf	map@out_min
  2542  0506  00B7               	movwf	map@out_min+1
  2543  0507  3064               	movlw	100
  2544  0508  00B8               	movwf	map@out_max
  2545  0509  3000               	movlw	0
  2546  050A  00B9               	movwf	map@out_max+1
  2547  050B  120A  158A  2476  120A  118A  	fcall	_map
  2548  0510  1283               	bcf	3,5	;RP0=0, select bank0
  2549  0511  1303               	bcf	3,6	;RP1=0, select bank0
  2550  0512  0830               	movf	?_map,w
  2551  0513  00BE               	movwf	??_main+2
  2552  0514  083E               	movf	??_main+2,w
  2553  0515  1283               	bcf	3,5	;RP0=0, select bank2
  2554  0516  1703               	bsf	3,6	;RP1=1, select bank2
  2555  0517  00DB               	movwf	main@umidita^(0+256)
  2556                           
  2557                           ;main.c: 339:             pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  2558  0518  3005               	movlw	5
  2559  0519  120A  158A  23CA  120A  118A  	fcall	_ADC_Read
  2560  051E  1283               	bcf	3,5	;RP0=0, select bank0
  2561  051F  1303               	bcf	3,6	;RP1=0, select bank0
  2562  0520  0820               	movf	?_ADC_Read,w
  2563  0521  00BC               	movwf	??_main
  2564  0522  0821               	movf	?_ADC_Read+1,w
  2565  0523  00BD               	movwf	??_main+1
  2566  0524  0D3D               	rlf	??_main+1,w
  2567  0525  0CBD               	rrf	??_main+1,f
  2568  0526  0CBC               	rrf	??_main,f
  2569  0527  0D3D               	rlf	??_main+1,w
  2570  0528  0CBD               	rrf	??_main+1,f
  2571  0529  0CBC               	rrf	??_main,f
  2572  052A  083C               	movf	??_main,w
  2573  052B  00B0               	movwf	map@x
  2574  052C  083D               	movf	??_main+1,w
  2575  052D  00B1               	movwf	map@x+1
  2576  052E  3000               	movlw	0
  2577  052F  00B2               	movwf	map@in_min
  2578  0530  00B3               	movwf	map@in_min+1
  2579  0531  30FF               	movlw	255
  2580  0532  00B4               	movwf	map@in_max
  2581  0533  3000               	movlw	0
  2582  0534  00B5               	movwf	map@in_max+1
  2583  0535  3000               	movlw	0
  2584  0536  00B6               	movwf	map@out_min
  2585  0537  00B7               	movwf	map@out_min+1
  2586  0538  3064               	movlw	100
  2587  0539  00B8               	movwf	map@out_max
  2588  053A  3000               	movlw	0
  2589  053B  00B9               	movwf	map@out_max+1
  2590  053C  120A  158A  2476  120A  118A  	fcall	_map
  2591  0541  1283               	bcf	3,5	;RP0=0, select bank0
  2592  0542  1303               	bcf	3,6	;RP1=0, select bank0
  2593  0543  0830               	movf	?_map,w
  2594  0544  00BE               	movwf	??_main+2
  2595  0545  083E               	movf	??_main+2,w
  2596  0546  1283               	bcf	3,5	;RP0=0, select bank2
  2597  0547  1703               	bsf	3,6	;RP1=1, select bank2
  2598  0548  00DC               	movwf	main@pressione^(0+256)
  2599  0549                     l3296:	
  2600                           
  2601                           ;main.c: 340:             sendByte(0x02, 0x00, temp);
  2602  0549  1283               	bcf	3,5	;RP0=0, select bank0
  2603  054A  1303               	bcf	3,6	;RP1=0, select bank0
  2604  054B  01B4               	clrf	sendByte@byte1
  2605  054C  1283               	bcf	3,5	;RP0=0, select bank2
  2606  054D  1703               	bsf	3,6	;RP1=1, select bank2
  2607  054E  085A               	movf	main@temp^(0+256),w
  2608  054F  1283               	bcf	3,5	;RP0=0, select bank0
  2609  0550  1303               	bcf	3,6	;RP1=0, select bank0
  2610  0551  00BC               	movwf	??_main
  2611  0552  083C               	movf	??_main,w
  2612  0553  00B5               	movwf	sendByte@valore
  2613  0554  3002               	movlw	2
  2614  0555  120A  158A  2417  120A  118A  	fcall	_sendByte
  2615  055A                     l3298:	
  2616                           
  2617                           ;main.c: 341:             sendByte(0x04, 0x00, umidita);
  2618  055A  1283               	bcf	3,5	;RP0=0, select bank0
  2619  055B  1303               	bcf	3,6	;RP1=0, select bank0
  2620  055C  01B4               	clrf	sendByte@byte1
  2621  055D  1283               	bcf	3,5	;RP0=0, select bank2
  2622  055E  1703               	bsf	3,6	;RP1=1, select bank2
  2623  055F  085B               	movf	main@umidita^(0+256),w
  2624  0560  1283               	bcf	3,5	;RP0=0, select bank0
  2625  0561  1303               	bcf	3,6	;RP1=0, select bank0
  2626  0562  00BC               	movwf	??_main
  2627  0563  083C               	movf	??_main,w
  2628  0564  00B5               	movwf	sendByte@valore
  2629  0565  3004               	movlw	4
  2630  0566  120A  158A  2417  120A  118A  	fcall	_sendByte
  2631  056B                     l3300:	
  2632                           
  2633                           ;main.c: 342:             sendByte(0x06, 0x00, pressione);
  2634  056B  1283               	bcf	3,5	;RP0=0, select bank0
  2635  056C  1303               	bcf	3,6	;RP1=0, select bank0
  2636  056D  01B4               	clrf	sendByte@byte1
  2637  056E  1283               	bcf	3,5	;RP0=0, select bank2
  2638  056F  1703               	bsf	3,6	;RP1=1, select bank2
  2639  0570  085C               	movf	main@pressione^(0+256),w
  2640  0571  1283               	bcf	3,5	;RP0=0, select bank0
  2641  0572  1303               	bcf	3,6	;RP1=0, select bank0
  2642  0573  00BC               	movwf	??_main
  2643  0574  083C               	movf	??_main,w
  2644  0575  00B5               	movwf	sendByte@valore
  2645  0576  3006               	movlw	6
  2646  0577  120A  158A  2417  120A  118A  	fcall	_sendByte
  2647  057C                     l3302:	
  2648                           
  2649                           ;main.c: 343:             for (unsigned char i = 0; i < 5; i++)
  2650  057C  1283               	bcf	3,5	;RP0=0, select bank2
  2651  057D  1703               	bsf	3,6	;RP1=1, select bank2
  2652  057E  01E5               	clrf	main@i_449^(0+256)
  2653  057F                     l3304:	
  2654  057F  3005               	movlw	5
  2655  0580  0265               	subwf	main@i_449^(0+256),w
  2656  0581  1C03               	skipc
  2657  0582  2D84               	goto	u3651
  2658  0583  2D85               	goto	u3650
  2659  0584                     u3651:	
  2660  0584  2D86               	goto	l3308
  2661  0585                     u3650:	
  2662  0585  2895               	goto	l3122
  2663  0586                     l3308:	
  2664                           
  2665                           ;main.c: 344:             {;main.c: 345:                 dataFromGateway[i] = 0;
  2666  0586  0865               	movf	main@i_449^(0+256),w
  2667  0587  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  2668  0588  0084               	movwf	4
  2669  0589  1383               	bcf	3,7	;select IRP bank1
  2670  058A  0180               	clrf	0
  2671  058B                     l3310:	
  2672                           
  2673                           ;main.c: 346:             }
  2674  058B  3001               	movlw	1
  2675  058C  1283               	bcf	3,5	;RP0=0, select bank0
  2676  058D  1303               	bcf	3,6	;RP1=0, select bank0
  2677  058E  00BC               	movwf	??_main
  2678  058F  083C               	movf	??_main,w
  2679  0590  1283               	bcf	3,5	;RP0=0, select bank2
  2680  0591  1703               	bsf	3,6	;RP1=1, select bank2
  2681  0592  07E5               	addwf	main@i_449^(0+256),f
  2682  0593  2D7F               	goto	l3304
  2683  0594  120A  118A  280E   	ljmp	start
  2684  0597                     __end_of_main:	
  2685                           
  2686                           	psect	text1
  2687  0C17                     __ptext1:	
  2688 ;; *************** function _sendByte *****************
  2689 ;; Defined at:
  2690 ;;		line 411 in file "main.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  byte0           1    wreg     unsigned char 
  2693 ;;  byte1           1   20[BANK0 ] unsigned char 
  2694 ;;  valore          1   21[BANK0 ] unsigned char 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  byte0           1   25[BANK0 ] unsigned char 
  2697 ;;  i               1   27[BANK0 ] unsigned char 
  2698 ;;  txByte          1   26[BANK0 ] PTR unsigned char 
  2699 ;;		 -> BuildByte@txByte(5), 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2709 ;;      Params:         0       2       0       0       0
  2710 ;;      Locals:         0       3       0       0       0
  2711 ;;      Temps:          0       3       0       0       0
  2712 ;;      Totals:         0       8       0       0       0
  2713 ;;Total ram usage:        8 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    3
  2716 ;; This function calls:
  2717 ;;		_BuildByte
  2718 ;;		_UART_TxChar
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           
  2725                           ;psect for function _sendByte
  2726  0C17                     _sendByte:	
  2727                           
  2728                           ;incstack = 0
  2729                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2730                           ;sendByte@byte0 stored from wreg
  2731  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  2732  0C18  1303               	bcf	3,6	;RP1=0, select bank0
  2733  0C19  00B9               	movwf	sendByte@byte0
  2734  0C1A                     l3034:	
  2735                           
  2736                           ;main.c: 411: void sendByte(char byte0, char byte1, char valore);main.c: 412: {;main.c: 
      +                          413:     char *txByte;;main.c: 414:     txByte = BuildByte(byte0, byte1, valore);
  2737  0C1A  0834               	movf	sendByte@byte1,w
  2738  0C1B  00B6               	movwf	??_sendByte
  2739  0C1C  0836               	movf	??_sendByte,w
  2740  0C1D  00A0               	movwf	BuildByte@byte1
  2741  0C1E  0835               	movf	sendByte@valore,w
  2742  0C1F  00B7               	movwf	??_sendByte+1
  2743  0C20  0837               	movf	??_sendByte+1,w
  2744  0C21  00A1               	movwf	BuildByte@valore
  2745  0C22  0839               	movf	sendByte@byte0,w
  2746  0C23  120A  158A  2738  120A  158A  	fcall	_BuildByte
  2747  0C28  1283               	bcf	3,5	;RP0=0, select bank0
  2748  0C29  1303               	bcf	3,6	;RP1=0, select bank0
  2749  0C2A  00B8               	movwf	??_sendByte+2
  2750  0C2B  0838               	movf	??_sendByte+2,w
  2751  0C2C  00BA               	movwf	sendByte@txByte
  2752  0C2D                     l3036:	
  2753                           
  2754                           ;main.c: 416:     for (unsigned char i = 0; i < 5; i++)
  2755  0C2D  01BB               	clrf	sendByte@i
  2756  0C2E                     l3042:	
  2757                           
  2758                           ;main.c: 417:     {;main.c: 418:         UART_TxChar(txByte++);
  2759  0C2E  083A               	movf	sendByte@txByte,w
  2760  0C2F  120A  158A  236D  120A  158A  	fcall	_UART_TxChar
  2761  0C34                     l3044:	
  2762  0C34  3001               	movlw	1
  2763  0C35  1283               	bcf	3,5	;RP0=0, select bank0
  2764  0C36  1303               	bcf	3,6	;RP1=0, select bank0
  2765  0C37  00B6               	movwf	??_sendByte
  2766  0C38  0836               	movf	??_sendByte,w
  2767  0C39  07BA               	addwf	sendByte@txByte,f
  2768  0C3A                     l3046:	
  2769                           
  2770                           ;main.c: 419:     }
  2771  0C3A  3001               	movlw	1
  2772  0C3B  00B6               	movwf	??_sendByte
  2773  0C3C  0836               	movf	??_sendByte,w
  2774  0C3D  07BB               	addwf	sendByte@i,f
  2775  0C3E                     l3048:	
  2776  0C3E  3005               	movlw	5
  2777  0C3F  023B               	subwf	sendByte@i,w
  2778  0C40  1C03               	skipc
  2779  0C41  2C43               	goto	u3251
  2780  0C42  2C44               	goto	u3250
  2781  0C43                     u3251:	
  2782  0C43  2C2E               	goto	l3042
  2783  0C44                     u3250:	
  2784  0C44                     l298:	
  2785  0C44  0008               	return
  2786  0C45                     __end_of_sendByte:	
  2787                           
  2788                           	psect	text2
  2789  0B6D                     __ptext2:	
  2790 ;; *************** function _UART_TxChar *****************
  2791 ;; Defined at:
  2792 ;;		line 386 in file "main.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  ch              1    wreg     unsigned char 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  ch              1    0[BANK0 ] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2806 ;;      Params:         0       0       0       0       0
  2807 ;;      Locals:         0       1       0       0       0
  2808 ;;      Temps:          0       0       0       0       0
  2809 ;;      Totals:         0       1       0       0       0
  2810 ;;Total ram usage:        1 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    2
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_sendByte
  2817 ;;		_UART_Write_Text
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _UART_TxChar
  2823  0B6D                     _UART_TxChar:	
  2824                           
  2825                           ;incstack = 0
  2826                           ; Regs used in _UART_TxChar: [wreg]
  2827                           ;UART_TxChar@ch stored from wreg
  2828  0B6D  1283               	bcf	3,5	;RP0=0, select bank0
  2829  0B6E  1303               	bcf	3,6	;RP1=0, select bank0
  2830  0B6F  00A0               	movwf	UART_TxChar@ch
  2831  0B70                     l2758:	
  2832  0B70                     l278:	
  2833                           ;main.c: 389:         ;
  2834                           
  2835                           
  2836                           ;main.c: 388:     while (!TXIF)
  2837  0B70  1E0C               	btfss	12,4	;volatile
  2838  0B71  2B73               	goto	u2781
  2839  0B72  2B74               	goto	u2780
  2840  0B73                     u2781:	
  2841  0B73  2B70               	goto	l278
  2842  0B74                     u2780:	
  2843  0B74                     l280:	
  2844                           
  2845                           ;main.c: 390:     TXIF = 0;
  2846  0B74  120C               	bcf	12,4	;volatile
  2847  0B75                     l2760:	
  2848                           
  2849                           ;main.c: 391:     TXREG = ch;
  2850  0B75  0820               	movf	UART_TxChar@ch,w
  2851  0B76  0099               	movwf	25	;volatile
  2852  0B77                     l281:	
  2853  0B77  0008               	return
  2854  0B78                     __end_of_UART_TxChar:	
  2855                           
  2856                           	psect	text3
  2857  0F38                     __ptext3:	
  2858 ;; *************** function _BuildByte *****************
  2859 ;; Defined at:
  2860 ;;		line 2 in file "./CustomLib/Serial.h"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;  byte0           1    wreg     unsigned char 
  2863 ;;  byte1           1    0[BANK0 ] unsigned char 
  2864 ;;  valore          1    1[BANK0 ] unsigned char 
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  byte0           1    4[BANK0 ] unsigned char 
  2867 ;;  y               2   14[BANK0 ] int 
  2868 ;;  y               2   12[BANK0 ] int 
  2869 ;;  i               2   18[BANK0 ] int 
  2870 ;;  i               2   16[BANK0 ] int 
  2871 ;;  txByte          5    5[BANK0 ] unsigned char [5]
  2872 ;;  sommaColumn     1   11[BANK0 ] unsigned char 
  2873 ;;  sommaRow        1   10[BANK0 ] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      PTR unsigned char 
  2876 ;; Registers used:
  2877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2883 ;;      Params:         0       2       0       0       0
  2884 ;;      Locals:         0      16       0       0       0
  2885 ;;      Temps:          0       2       0       0       0
  2886 ;;      Totals:         0      20       0       0       0
  2887 ;;Total ram usage:       20 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    2
  2890 ;; This function calls:
  2891 ;;		Nothing
  2892 ;; This function is called by:
  2893 ;;		_sendByte
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           
  2898                           ;psect for function _BuildByte
  2899  0F38                     _BuildByte:	
  2900                           
  2901                           ;incstack = 0
  2902                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2903                           ;BuildByte@byte0 stored from wreg
  2904  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  2905  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  2906  0F3A  00A4               	movwf	BuildByte@byte0
  2907  0F3B                     l2690:	
  2908                           
  2909                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2910  0F3B  0824               	movf	BuildByte@byte0,w
  2911  0F3C  397F               	andlw	127
  2912  0F3D  00A2               	movwf	??_BuildByte
  2913  0F3E  0822               	movf	??_BuildByte,w
  2914  0F3F  00A5               	movwf	BuildByte@txByte
  2915                           
  2916                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2917  0F40  0820               	movf	BuildByte@byte1,w
  2918  0F41  397F               	andlw	127
  2919  0F42  00A2               	movwf	??_BuildByte
  2920  0F43  0822               	movf	??_BuildByte,w
  2921  0F44  00A6               	movwf	BuildByte@txByte+1
  2922                           
  2923                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2924  0F45  0821               	movf	BuildByte@valore,w
  2925  0F46  397F               	andlw	127
  2926  0F47  00A2               	movwf	??_BuildByte
  2927  0F48  0822               	movf	??_BuildByte,w
  2928  0F49  00A7               	movwf	BuildByte@txByte+2
  2929  0F4A                     l2692:	
  2930                           
  2931                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2932  0F4A  0821               	movf	BuildByte@valore,w
  2933  0F4B  00A2               	movwf	??_BuildByte
  2934  0F4C  3007               	movlw	7
  2935  0F4D                     u2685:	
  2936  0F4D  1003               	clrc
  2937  0F4E  0CA2               	rrf	??_BuildByte,f
  2938  0F4F  3EFF               	addlw	-1
  2939  0F50  1D03               	skipz
  2940  0F51  2F4D               	goto	u2685
  2941  0F52  0822               	movf	??_BuildByte,w
  2942  0F53  397F               	andlw	127
  2943  0F54  00A3               	movwf	??_BuildByte+1
  2944  0F55  0823               	movf	??_BuildByte+1,w
  2945  0F56  00A8               	movwf	BuildByte@txByte+3
  2946  0F57                     l2694:	
  2947                           
  2948                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2949  0F57  01AA               	clrf	BuildByte@sommaRow
  2950  0F58                     l2696:	
  2951                           
  2952                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2953  0F58  01AB               	clrf	BuildByte@sommaColumn
  2954  0F59                     l2698:	
  2955                           
  2956                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2957  0F59  01B0               	clrf	BuildByte@i
  2958  0F5A  01B1               	clrf	BuildByte@i+1
  2959  0F5B                     l2704:	
  2960                           
  2961                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2962  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  2963  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  2964  0F5D  01AC               	clrf	BuildByte@y
  2965  0F5E  01AD               	clrf	BuildByte@y+1
  2966  0F5F                     l2710:	
  2967                           
  2968                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2969  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  2970  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  2971  0F61  0830               	movf	BuildByte@i,w
  2972  0F62  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2973  0F63  0084               	movwf	4
  2974  0F64  1383               	bcf	3,7	;select IRP bank0
  2975  0F65  0800               	movf	0,w
  2976  0F66  00A2               	movwf	??_BuildByte
  2977  0F67  0A2C               	incf	BuildByte@y,w
  2978  0F68  2F6B               	goto	u2694
  2979  0F69                     u2695:	
  2980  0F69  1003               	clrc
  2981  0F6A  0CA2               	rrf	??_BuildByte,f
  2982  0F6B                     u2694:	
  2983  0F6B  3EFF               	addlw	-1
  2984  0F6C  1D03               	skipz
  2985  0F6D  2F69               	goto	u2695
  2986  0F6E  0822               	movf	??_BuildByte,w
  2987  0F6F  3901               	andlw	1
  2988  0F70  00A3               	movwf	??_BuildByte+1
  2989  0F71  0823               	movf	??_BuildByte+1,w
  2990  0F72  07AA               	addwf	BuildByte@sommaRow,f
  2991  0F73                     l2712:	
  2992                           
  2993                           ;./CustomLib/Serial.h: 18:         }
  2994  0F73  3001               	movlw	1
  2995  0F74  07AC               	addwf	BuildByte@y,f
  2996  0F75  1803               	skipnc
  2997  0F76  0AAD               	incf	BuildByte@y+1,f
  2998  0F77  3000               	movlw	0
  2999  0F78  07AD               	addwf	BuildByte@y+1,f
  3000  0F79                     l2714:	
  3001  0F79  082D               	movf	BuildByte@y+1,w
  3002  0F7A  3A80               	xorlw	128
  3003  0F7B  00FF               	movwf	btemp+1
  3004  0F7C  3080               	movlw	128
  3005  0F7D  027F               	subwf	btemp+1,w
  3006  0F7E  1D03               	skipz
  3007  0F7F  2F82               	goto	u2705
  3008  0F80  3008               	movlw	8
  3009  0F81  022C               	subwf	BuildByte@y,w
  3010  0F82                     u2705:	
  3011  0F82  1C03               	skipc
  3012  0F83  2F85               	goto	u2701
  3013  0F84  2F86               	goto	u2700
  3014  0F85                     u2701:	
  3015  0F85  2F5F               	goto	l2710
  3016  0F86                     u2700:	
  3017  0F86                     l119:	
  3018                           
  3019                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  3020  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  3021  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  3022  0F88  1C2A               	btfss	BuildByte@sommaRow,0
  3023  0F89  2F8B               	goto	u2711
  3024  0F8A  2F8C               	goto	u2710
  3025  0F8B                     u2711:	
  3026  0F8B  2F94               	goto	l2718
  3027  0F8C                     u2710:	
  3028  0F8C                     l2716:	
  3029                           
  3030                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  3031  0F8C  3080               	movlw	128
  3032  0F8D  00A2               	movwf	??_BuildByte
  3033  0F8E  0830               	movf	BuildByte@i,w
  3034  0F8F  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3035  0F90  0084               	movwf	4
  3036  0F91  0822               	movf	??_BuildByte,w
  3037  0F92  1383               	bcf	3,7	;select IRP bank0
  3038  0F93  0780               	addwf	0,f
  3039  0F94                     l2718:	
  3040                           
  3041                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  3042  0F94  01AA               	clrf	BuildByte@sommaRow
  3043  0F95                     l2722:	
  3044                           ;./CustomLib/Serial.h: 23:         }
  3045                           
  3046                           
  3047                           ;./CustomLib/Serial.h: 28:     }
  3048  0F95  3001               	movlw	1
  3049  0F96  07B0               	addwf	BuildByte@i,f
  3050  0F97  1803               	skipnc
  3051  0F98  0AB1               	incf	BuildByte@i+1,f
  3052  0F99  3000               	movlw	0
  3053  0F9A  07B1               	addwf	BuildByte@i+1,f
  3054  0F9B                     l2724:	
  3055  0F9B  0831               	movf	BuildByte@i+1,w
  3056  0F9C  3A80               	xorlw	128
  3057  0F9D  00FF               	movwf	btemp+1
  3058  0F9E  3080               	movlw	128
  3059  0F9F  027F               	subwf	btemp+1,w
  3060  0FA0  1D03               	skipz
  3061  0FA1  2FA4               	goto	u2725
  3062  0FA2  3004               	movlw	4
  3063  0FA3  0230               	subwf	BuildByte@i,w
  3064  0FA4                     u2725:	
  3065  0FA4  1C03               	skipc
  3066  0FA5  2FA7               	goto	u2721
  3067  0FA6  2FA8               	goto	u2720
  3068  0FA7                     u2721:	
  3069  0FA7  2F5B               	goto	l2704
  3070  0FA8                     u2720:	
  3071  0FA8                     l2726:	
  3072                           
  3073                           ;./CustomLib/Serial.h: 30:     for (int i = 0; i < 8; i++)
  3074  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  3075  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  3076  0FAA  01B2               	clrf	BuildByte@i_342
  3077  0FAB  01B3               	clrf	BuildByte@i_342+1
  3078  0FAC                     l2732:	
  3079                           
  3080                           ;./CustomLib/Serial.h: 31:     {;./CustomLib/Serial.h: 32:         for (int y = 0; y < 4
      +                          ; y++)
  3081  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  3083  0FAE  01AE               	clrf	BuildByte@y_343
  3084  0FAF  01AF               	clrf	BuildByte@y_343+1
  3085  0FB0                     l2738:	
  3086                           
  3087                           ;./CustomLib/Serial.h: 34:         {;./CustomLib/Serial.h: 35:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3088  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0FB2  082E               	movf	BuildByte@y_343,w
  3091  0FB3  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3092  0FB4  0084               	movwf	4
  3093  0FB5  1383               	bcf	3,7	;select IRP bank0
  3094  0FB6  0800               	movf	0,w
  3095  0FB7  00A2               	movwf	??_BuildByte
  3096  0FB8  0A32               	incf	BuildByte@i_342,w
  3097  0FB9  2FBC               	goto	u2734
  3098  0FBA                     u2735:	
  3099  0FBA  1003               	clrc
  3100  0FBB  0CA2               	rrf	??_BuildByte,f
  3101  0FBC                     u2734:	
  3102  0FBC  3EFF               	addlw	-1
  3103  0FBD  1D03               	skipz
  3104  0FBE  2FBA               	goto	u2735
  3105  0FBF  0822               	movf	??_BuildByte,w
  3106  0FC0  3901               	andlw	1
  3107  0FC1  00A3               	movwf	??_BuildByte+1
  3108  0FC2  0823               	movf	??_BuildByte+1,w
  3109  0FC3  07AB               	addwf	BuildByte@sommaColumn,f
  3110  0FC4                     l2740:	
  3111                           
  3112                           ;./CustomLib/Serial.h: 36:         }
  3113  0FC4  3001               	movlw	1
  3114  0FC5  07AE               	addwf	BuildByte@y_343,f
  3115  0FC6  1803               	skipnc
  3116  0FC7  0AAF               	incf	BuildByte@y_343+1,f
  3117  0FC8  3000               	movlw	0
  3118  0FC9  07AF               	addwf	BuildByte@y_343+1,f
  3119  0FCA                     l2742:	
  3120  0FCA  082F               	movf	BuildByte@y_343+1,w
  3121  0FCB  3A80               	xorlw	128
  3122  0FCC  00FF               	movwf	btemp+1
  3123  0FCD  3080               	movlw	128
  3124  0FCE  027F               	subwf	btemp+1,w
  3125  0FCF  1D03               	skipz
  3126  0FD0  2FD3               	goto	u2745
  3127  0FD1  3004               	movlw	4
  3128  0FD2  022E               	subwf	BuildByte@y_343,w
  3129  0FD3                     u2745:	
  3130  0FD3  1C03               	skipc
  3131  0FD4  2FD6               	goto	u2741
  3132  0FD5  2FD7               	goto	u2740
  3133  0FD6                     u2741:	
  3134  0FD6  2FB0               	goto	l2738
  3135  0FD7                     u2740:	
  3136  0FD7                     l125:	
  3137                           
  3138                           ;./CustomLib/Serial.h: 37:         if (sommaColumn % 2 == 1)
  3139  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  3140  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  3141  0FD9  1C2B               	btfss	BuildByte@sommaColumn,0
  3142  0FDA  2FDC               	goto	u2751
  3143  0FDB  2FDD               	goto	u2750
  3144  0FDC                     u2751:	
  3145  0FDC  2FEA               	goto	l2746
  3146  0FDD                     u2750:	
  3147  0FDD                     l2744:	
  3148                           
  3149                           ;./CustomLib/Serial.h: 38:         {;./CustomLib/Serial.h: 39:             txByte[4] += 
      +                          0x01 << i;
  3150  0FDD  3001               	movlw	1
  3151  0FDE  00A2               	movwf	??_BuildByte
  3152  0FDF  0A32               	incf	BuildByte@i_342,w
  3153  0FE0  2FE3               	goto	u2764
  3154  0FE1                     u2765:	
  3155  0FE1  1003               	clrc
  3156  0FE2  0DA2               	rlf	??_BuildByte,f
  3157  0FE3                     u2764:	
  3158  0FE3  3EFF               	addlw	-1
  3159  0FE4  1D03               	skipz
  3160  0FE5  2FE1               	goto	u2765
  3161  0FE6  0822               	movf	??_BuildByte,w
  3162  0FE7  00A3               	movwf	??_BuildByte+1
  3163  0FE8  0823               	movf	??_BuildByte+1,w
  3164  0FE9  07A9               	addwf	BuildByte@txByte+4,f
  3165  0FEA                     l2746:	
  3166                           
  3167                           ;./CustomLib/Serial.h: 40:             sommaColumn = 0;
  3168  0FEA  01AB               	clrf	BuildByte@sommaColumn
  3169  0FEB                     l2750:	
  3170                           ;./CustomLib/Serial.h: 41:         }
  3171                           
  3172                           
  3173                           ;./CustomLib/Serial.h: 46:     }
  3174  0FEB  3001               	movlw	1
  3175  0FEC  07B2               	addwf	BuildByte@i_342,f
  3176  0FED  1803               	skipnc
  3177  0FEE  0AB3               	incf	BuildByte@i_342+1,f
  3178  0FEF  3000               	movlw	0
  3179  0FF0  07B3               	addwf	BuildByte@i_342+1,f
  3180  0FF1                     l2752:	
  3181  0FF1  0833               	movf	BuildByte@i_342+1,w
  3182  0FF2  3A80               	xorlw	128
  3183  0FF3  00FF               	movwf	btemp+1
  3184  0FF4  3080               	movlw	128
  3185  0FF5  027F               	subwf	btemp+1,w
  3186  0FF6  1D03               	skipz
  3187  0FF7  2FFA               	goto	u2775
  3188  0FF8  3008               	movlw	8
  3189  0FF9  0232               	subwf	BuildByte@i_342,w
  3190  0FFA                     u2775:	
  3191  0FFA  1C03               	skipc
  3192  0FFB  2FFD               	goto	u2771
  3193  0FFC  2FFE               	goto	u2770
  3194  0FFD                     u2771:	
  3195  0FFD  2FAC               	goto	l2732
  3196  0FFE                     u2770:	
  3197  0FFE                     l2754:	
  3198                           
  3199                           ;./CustomLib/Serial.h: 48:     return txByte;
  3200  0FFE  3025               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3201  0FFF                     l128:	
  3202  0FFF  0008               	return
  3203  1000                     __end_of_BuildByte:	
  3204                           
  3205                           	psect	text4
  3206  0C76                     __ptext4:	
  3207 ;; *************** function _map *****************
  3208 ;; Defined at:
  3209 ;;		line 1 in file "./CustomLib/Conversions.h"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  x               2   16[BANK0 ] int 
  3212 ;;  in_min          2   18[BANK0 ] int 
  3213 ;;  in_max          2   20[BANK0 ] int 
  3214 ;;  out_min         2   22[BANK0 ] int 
  3215 ;;  out_max         2   24[BANK0 ] int 
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;		None
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  2   16[BANK0 ] int 
  3220 ;; Registers used:
  3221 ;;		wreg, status,2, status,0, pclath, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3227 ;;      Params:         0      10       0       0       0
  3228 ;;      Locals:         0       0       0       0       0
  3229 ;;      Temps:          0       0       0       0       0
  3230 ;;      Totals:         0      10       0       0       0
  3231 ;;Total ram usage:       10 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:    3
  3234 ;; This function calls:
  3235 ;;		___awdiv
  3236 ;;		___wmul
  3237 ;; This function is called by:
  3238 ;;		_main
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           
  3243                           ;psect for function _map
  3244  0C76                     _map:	
  3245  0C76                     l2898:	
  3246                           ;incstack = 0
  3247                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3248                           
  3249                           
  3250                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3251  0C76  1283               	bcf	3,5	;RP0=0, select bank0
  3252  0C77  1303               	bcf	3,6	;RP1=0, select bank0
  3253  0C78  0832               	movf	map@in_min,w
  3254  0C79  0234               	subwf	map@in_max,w
  3255  0C7A  00A7               	movwf	___awdiv@divisor
  3256  0C7B  0833               	movf	map@in_min+1,w
  3257  0C7C  1C03               	skipc
  3258  0C7D  0A33               	incf	map@in_min+1,w
  3259  0C7E  0235               	subwf	map@in_max+1,w
  3260  0C7F  00A8               	movwf	___awdiv@divisor+1
  3261  0C80  0832               	movf	map@in_min,w
  3262  0C81  0230               	subwf	map@x,w
  3263  0C82  00A0               	movwf	___wmul@multiplier
  3264  0C83  0833               	movf	map@in_min+1,w
  3265  0C84  1C03               	skipc
  3266  0C85  0A33               	incf	map@in_min+1,w
  3267  0C86  0231               	subwf	map@x+1,w
  3268  0C87  00A1               	movwf	___wmul@multiplier+1
  3269  0C88  0836               	movf	map@out_min,w
  3270  0C89  0238               	subwf	map@out_max,w
  3271  0C8A  00A2               	movwf	___wmul@multiplicand
  3272  0C8B  0837               	movf	map@out_min+1,w
  3273  0C8C  1C03               	skipc
  3274  0C8D  0A37               	incf	map@out_min+1,w
  3275  0C8E  0239               	subwf	map@out_max+1,w
  3276  0C8F  00A3               	movwf	___wmul@multiplicand+1
  3277  0C90  120A  158A  23F0  120A  158A  	fcall	___wmul
  3278  0C95  1283               	bcf	3,5	;RP0=0, select bank0
  3279  0C96  1303               	bcf	3,6	;RP1=0, select bank0
  3280  0C97  0821               	movf	?___wmul+1,w
  3281  0C98  00AA               	movwf	___awdiv@dividend+1
  3282  0C99  0820               	movf	?___wmul,w
  3283  0C9A  00A9               	movwf	___awdiv@dividend
  3284  0C9B  120A  158A  25DA  120A  158A  	fcall	___awdiv
  3285  0CA0  1283               	bcf	3,5	;RP0=0, select bank0
  3286  0CA1  1303               	bcf	3,6	;RP1=0, select bank0
  3287  0CA2  0836               	movf	map@out_min,w
  3288  0CA3  0727               	addwf	?___awdiv,w
  3289  0CA4  00B0               	movwf	?_map
  3290  0CA5  0837               	movf	map@out_min+1,w
  3291  0CA6  1803               	skipnc
  3292  0CA7  0A37               	incf	map@out_min+1,w
  3293  0CA8  0728               	addwf	?___awdiv+1,w
  3294  0CA9  00B1               	movwf	?_map+1
  3295  0CAA                     l83:	
  3296  0CAA  0008               	return
  3297  0CAB                     __end_of_map:	
  3298                           
  3299                           	psect	text5
  3300  0BF0                     __ptext5:	
  3301 ;; *************** function ___wmul *****************
  3302 ;; Defined at:
  3303 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3306 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;  product         2    4[BANK0 ] unsigned int 
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  2    0[BANK0 ] unsigned int 
  3311 ;; Registers used:
  3312 ;;		wreg, status,2, status,0
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3318 ;;      Params:         0       4       0       0       0
  3319 ;;      Locals:         0       2       0       0       0
  3320 ;;      Temps:          0       0       0       0       0
  3321 ;;      Totals:         0       6       0       0       0
  3322 ;;Total ram usage:        6 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    2
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_map
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           
  3333                           ;psect for function ___wmul
  3334  0BF0                     ___wmul:	
  3335  0BF0                     l2762:	
  3336                           ;incstack = 0
  3337                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3338                           
  3339  0BF0  1283               	bcf	3,5	;RP0=0, select bank0
  3340  0BF1  1303               	bcf	3,6	;RP1=0, select bank0
  3341  0BF2  01A4               	clrf	___wmul@product
  3342  0BF3  01A5               	clrf	___wmul@product+1
  3343  0BF4                     l2764:	
  3344  0BF4  1C20               	btfss	___wmul@multiplier,0
  3345  0BF5  2BF7               	goto	u2791
  3346  0BF6  2BF8               	goto	u2790
  3347  0BF7                     u2791:	
  3348  0BF7  2BFE               	goto	l442
  3349  0BF8                     u2790:	
  3350  0BF8                     l2766:	
  3351  0BF8  0822               	movf	___wmul@multiplicand,w
  3352  0BF9  07A4               	addwf	___wmul@product,f
  3353  0BFA  1803               	skipnc
  3354  0BFB  0AA5               	incf	___wmul@product+1,f
  3355  0BFC  0823               	movf	___wmul@multiplicand+1,w
  3356  0BFD  07A5               	addwf	___wmul@product+1,f
  3357  0BFE                     l442:	
  3358  0BFE  3001               	movlw	1
  3359  0BFF                     u2805:	
  3360  0BFF  1003               	clrc
  3361  0C00  0DA2               	rlf	___wmul@multiplicand,f
  3362  0C01  0DA3               	rlf	___wmul@multiplicand+1,f
  3363  0C02  3EFF               	addlw	-1
  3364  0C03  1D03               	skipz
  3365  0C04  2BFF               	goto	u2805
  3366  0C05                     l2768:	
  3367  0C05  3001               	movlw	1
  3368  0C06                     u2815:	
  3369  0C06  1003               	clrc
  3370  0C07  0CA1               	rrf	___wmul@multiplier+1,f
  3371  0C08  0CA0               	rrf	___wmul@multiplier,f
  3372  0C09  3EFF               	addlw	-1
  3373  0C0A  1D03               	skipz
  3374  0C0B  2C06               	goto	u2815
  3375  0C0C                     l2770:	
  3376  0C0C  0820               	movf	___wmul@multiplier,w
  3377  0C0D  0421               	iorwf	___wmul@multiplier+1,w
  3378  0C0E  1D03               	btfss	3,2
  3379  0C0F  2C11               	goto	u2821
  3380  0C10  2C12               	goto	u2820
  3381  0C11                     u2821:	
  3382  0C11  2BF4               	goto	l2764
  3383  0C12                     u2820:	
  3384  0C12                     l2772:	
  3385  0C12  0825               	movf	___wmul@product+1,w
  3386  0C13  00A1               	movwf	?___wmul+1
  3387  0C14  0824               	movf	___wmul@product,w
  3388  0C15  00A0               	movwf	?___wmul
  3389  0C16                     l444:	
  3390  0C16  0008               	return
  3391  0C17                     __end_of___wmul:	
  3392                           
  3393                           	psect	text6
  3394  0B78                     __ptext6:	
  3395 ;; *************** function _init_ADC *****************
  3396 ;; Defined at:
  3397 ;;		line 355 in file "main.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;		None
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3411 ;;      Params:         0       0       0       0       0
  3412 ;;      Locals:         0       0       0       0       0
  3413 ;;      Temps:          0       1       0       0       0
  3414 ;;      Totals:         0       1       0       0       0
  3415 ;;Total ram usage:        1 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    2
  3418 ;; This function calls:
  3419 ;;		Nothing
  3420 ;; This function is called by:
  3421 ;;		_main
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           
  3426                           ;psect for function _init_ADC
  3427  0B78                     _init_ADC:	
  3428  0B78                     l2954:	
  3429                           ;incstack = 0
  3430                           ; Regs used in _init_ADC: [wreg+status,2]
  3431                           
  3432                           
  3433                           ;main.c: 357:     TRISA = 0xE3;
  3434  0B78  30E3               	movlw	227
  3435  0B79  1683               	bsf	3,5	;RP0=1, select bank1
  3436  0B7A  1303               	bcf	3,6	;RP1=0, select bank1
  3437  0B7B  0085               	movwf	5	;volatile
  3438  0B7C                     l2956:	
  3439                           
  3440                           ;main.c: 358:     ADCON0 = 0x00;
  3441  0B7C  1283               	bcf	3,5	;RP0=0, select bank0
  3442  0B7D  1303               	bcf	3,6	;RP1=0, select bank0
  3443  0B7E  019F               	clrf	31	;volatile
  3444  0B7F                     l2958:	
  3445                           
  3446                           ;main.c: 359:     ADCON1 = 0x80;
  3447  0B7F  3080               	movlw	128
  3448  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  3449  0B81  1303               	bcf	3,6	;RP1=0, select bank1
  3450  0B82  009F               	movwf	31	;volatile
  3451  0B83                     l2960:	
  3452                           
  3453                           ;main.c: 360:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3454  0B83  3019               	movlw	25
  3455  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  3456  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  3457  0B86  00A0               	movwf	??_init_ADC
  3458  0B87                     u3677:	
  3459  0B87  0BA0               	decfsz	??_init_ADC,f
  3460  0B88  2B87               	goto	u3677
  3461  0B89  2B8A               	nop2
  3462  0B8A                     l266:	
  3463  0B8A  0008               	return
  3464  0B8B                     __end_of_init_ADC:	
  3465                           
  3466                           	psect	text7
  3467  067A                     __ptext7:	
  3468 ;; *************** function _bitParita *****************
  3469 ;; Defined at:
  3470 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  rx              1    wreg     PTR unsigned char 
  3473 ;;		 -> dataFromGateway(15), 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  rx              1   17[BANK0 ] PTR unsigned char 
  3476 ;;		 -> dataFromGateway(15), 
  3477 ;;  y               2   15[BANK0 ] int 
  3478 ;;  y               2   13[BANK0 ] int 
  3479 ;;  i               2   20[BANK0 ] int 
  3480 ;;  i               2   18[BANK0 ] int 
  3481 ;;  errorRow        1   12[BANK0 ] unsigned char 
  3482 ;;  error           1   11[BANK0 ] unsigned char 
  3483 ;;  errorColumn     1   10[BANK0 ] unsigned char 
  3484 ;;  sommaColumn     1    9[BANK0 ] unsigned char 
  3485 ;;  sommaRow        1    8[BANK0 ] unsigned char 
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3495 ;;      Params:         0       0       0       0       0
  3496 ;;      Locals:         0      14       0       0       0
  3497 ;;      Temps:          0       4       0       0       0
  3498 ;;      Totals:         0      18       0       0       0
  3499 ;;Total ram usage:       18 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    3
  3502 ;; This function calls:
  3503 ;;		_bitChange
  3504 ;; This function is called by:
  3505 ;;		_main
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           
  3510                           ;psect for function _bitParita
  3511  067A                     _bitParita:	
  3512                           
  3513                           ;incstack = 0
  3514                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3515                           ;bitParita@rx stored from wreg
  3516  067A  1283               	bcf	3,5	;RP0=0, select bank0
  3517  067B  1303               	bcf	3,6	;RP1=0, select bank0
  3518  067C  00B1               	movwf	bitParita@rx
  3519  067D                     l2902:	
  3520                           
  3521                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3522  067D  01AB               	clrf	bitParita@error
  3523                           
  3524                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3525  067E  01A8               	clrf	bitParita@sommaRow
  3526                           
  3527                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3528  067F  01AC               	clrf	bitParita@errorRow
  3529                           
  3530                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  3531  0680  01A9               	clrf	bitParita@sommaColumn
  3532                           
  3533                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  3534  0681  01AA               	clrf	bitParita@errorColumn
  3535                           
  3536                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  3537  0682  01B2               	clrf	bitParita@i
  3538  0683  01B3               	clrf	bitParita@i+1
  3539  0684                     l2908:	
  3540                           
  3541                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  3542  0684  1283               	bcf	3,5	;RP0=0, select bank0
  3543  0685  1303               	bcf	3,6	;RP1=0, select bank0
  3544  0686  01AD               	clrf	bitParita@y
  3545  0687  01AE               	clrf	bitParita@y+1
  3546  0688                     l2914:	
  3547                           
  3548                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  3549  0688  1283               	bcf	3,5	;RP0=0, select bank0
  3550  0689  1303               	bcf	3,6	;RP1=0, select bank0
  3551  068A  0832               	movf	bitParita@i,w
  3552  068B  0731               	addwf	bitParita@rx,w
  3553  068C  00A4               	movwf	??_bitParita
  3554  068D  0824               	movf	??_bitParita,w
  3555  068E  0084               	movwf	4
  3556  068F  1383               	bcf	3,7	;select IRP bank0
  3557  0690  0800               	movf	0,w
  3558  0691  00A5               	movwf	??_bitParita+1
  3559  0692  0A2D               	incf	bitParita@y,w
  3560  0693  2E96               	goto	u3124
  3561  0694                     u3125:	
  3562  0694  1003               	clrc
  3563  0695  0CA5               	rrf	??_bitParita+1,f
  3564  0696                     u3124:	
  3565  0696  3EFF               	addlw	-1
  3566  0697  1D03               	skipz
  3567  0698  2E94               	goto	u3125
  3568  0699  0825               	movf	??_bitParita+1,w
  3569  069A  3901               	andlw	1
  3570  069B  00A6               	movwf	??_bitParita+2
  3571  069C  0826               	movf	??_bitParita+2,w
  3572  069D  07A8               	addwf	bitParita@sommaRow,f
  3573  069E                     l2916:	
  3574                           
  3575                           ;./CustomLib/BitsFlow.h: 26:         }
  3576  069E  3001               	movlw	1
  3577  069F  07AD               	addwf	bitParita@y,f
  3578  06A0  1803               	skipnc
  3579  06A1  0AAE               	incf	bitParita@y+1,f
  3580  06A2  3000               	movlw	0
  3581  06A3  07AE               	addwf	bitParita@y+1,f
  3582  06A4                     l2918:	
  3583  06A4  082E               	movf	bitParita@y+1,w
  3584  06A5  3A80               	xorlw	128
  3585  06A6  00FF               	movwf	btemp+1
  3586  06A7  3080               	movlw	128
  3587  06A8  027F               	subwf	btemp+1,w
  3588  06A9  1D03               	skipz
  3589  06AA  2EAD               	goto	u3135
  3590  06AB  3008               	movlw	8
  3591  06AC  022D               	subwf	bitParita@y,w
  3592  06AD                     u3135:	
  3593  06AD  1C03               	skipc
  3594  06AE  2EB0               	goto	u3131
  3595  06AF  2EB1               	goto	u3130
  3596  06B0                     u3131:	
  3597  06B0  2E88               	goto	l2914
  3598  06B1                     u3130:	
  3599  06B1                     l105:	
  3600                           
  3601                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  3602  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  3603  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  3604  06B3  1C28               	btfss	bitParita@sommaRow,0
  3605  06B4  2EB6               	goto	u3141
  3606  06B5  2EB7               	goto	u3140
  3607  06B6                     u3141:	
  3608  06B6  2EBD               	goto	l106
  3609  06B7                     u3140:	
  3610  06B7                     l2920:	
  3611                           
  3612                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  3613  06B7  01AB               	clrf	bitParita@error
  3614  06B8  0AAB               	incf	bitParita@error,f
  3615  06B9                     l2922:	
  3616                           
  3617                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  3618  06B9  0832               	movf	bitParita@i,w
  3619  06BA  00A4               	movwf	??_bitParita
  3620  06BB  0824               	movf	??_bitParita,w
  3621  06BC  00AC               	movwf	bitParita@errorRow
  3622  06BD                     l106:	
  3623                           ;./CustomLib/BitsFlow.h: 31:         }
  3624                           
  3625                           
  3626                           ;./CustomLib/BitsFlow.h: 32:     }
  3627  06BD  3001               	movlw	1
  3628  06BE  07B2               	addwf	bitParita@i,f
  3629  06BF  1803               	skipnc
  3630  06C0  0AB3               	incf	bitParita@i+1,f
  3631  06C1  3000               	movlw	0
  3632  06C2  07B3               	addwf	bitParita@i+1,f
  3633  06C3                     l2924:	
  3634  06C3  0833               	movf	bitParita@i+1,w
  3635  06C4  3A80               	xorlw	128
  3636  06C5  00FF               	movwf	btemp+1
  3637  06C6  3080               	movlw	128
  3638  06C7  027F               	subwf	btemp+1,w
  3639  06C8  1D03               	skipz
  3640  06C9  2ECC               	goto	u3155
  3641  06CA  3005               	movlw	5
  3642  06CB  0232               	subwf	bitParita@i,w
  3643  06CC                     u3155:	
  3644  06CC  1C03               	skipc
  3645  06CD  2ECF               	goto	u3151
  3646  06CE  2ED0               	goto	u3150
  3647  06CF                     u3151:	
  3648  06CF  2E84               	goto	l2908
  3649  06D0                     u3150:	
  3650  06D0                     l2926:	
  3651                           
  3652                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  3653  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  3654  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  3655  06D2  01B4               	clrf	bitParita@i_330
  3656  06D3  01B5               	clrf	bitParita@i_330+1
  3657  06D4                     l2932:	
  3658                           
  3659                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  3660  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  3661  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  3662  06D6  01AF               	clrf	bitParita@y_331
  3663  06D7  01B0               	clrf	bitParita@y_331+1
  3664  06D8                     l2938:	
  3665                           
  3666                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  3667  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  3668  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  3669  06DA  082F               	movf	bitParita@y_331,w
  3670  06DB  0731               	addwf	bitParita@rx,w
  3671  06DC  00A4               	movwf	??_bitParita
  3672  06DD  0824               	movf	??_bitParita,w
  3673  06DE  0084               	movwf	4
  3674  06DF  1383               	bcf	3,7	;select IRP bank0
  3675  06E0  0800               	movf	0,w
  3676  06E1  00A5               	movwf	??_bitParita+1
  3677  06E2  0A34               	incf	bitParita@i_330,w
  3678  06E3  2EE6               	goto	u3164
  3679  06E4                     u3165:	
  3680  06E4  1003               	clrc
  3681  06E5  0CA5               	rrf	??_bitParita+1,f
  3682  06E6                     u3164:	
  3683  06E6  3EFF               	addlw	-1
  3684  06E7  1D03               	skipz
  3685  06E8  2EE4               	goto	u3165
  3686  06E9  0825               	movf	??_bitParita+1,w
  3687  06EA  3901               	andlw	1
  3688  06EB  00A6               	movwf	??_bitParita+2
  3689  06EC  0826               	movf	??_bitParita+2,w
  3690  06ED  07A9               	addwf	bitParita@sommaColumn,f
  3691  06EE                     l2940:	
  3692                           
  3693                           ;./CustomLib/BitsFlow.h: 39:         }
  3694  06EE  3001               	movlw	1
  3695  06EF  07AF               	addwf	bitParita@y_331,f
  3696  06F0  1803               	skipnc
  3697  06F1  0AB0               	incf	bitParita@y_331+1,f
  3698  06F2  3000               	movlw	0
  3699  06F3  07B0               	addwf	bitParita@y_331+1,f
  3700  06F4                     l2942:	
  3701  06F4  0830               	movf	bitParita@y_331+1,w
  3702  06F5  3A80               	xorlw	128
  3703  06F6  00FF               	movwf	btemp+1
  3704  06F7  3080               	movlw	128
  3705  06F8  027F               	subwf	btemp+1,w
  3706  06F9  1D03               	skipz
  3707  06FA  2EFD               	goto	u3175
  3708  06FB  3004               	movlw	4
  3709  06FC  022F               	subwf	bitParita@y_331,w
  3710  06FD                     u3175:	
  3711  06FD  1C03               	skipc
  3712  06FE  2F00               	goto	u3171
  3713  06FF  2F01               	goto	u3170
  3714  0700                     u3171:	
  3715  0700  2ED8               	goto	l2938
  3716  0701                     u3170:	
  3717  0701                     l110:	
  3718                           
  3719                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  3720  0701  1283               	bcf	3,5	;RP0=0, select bank0
  3721  0702  1303               	bcf	3,6	;RP1=0, select bank0
  3722  0703  1C29               	btfss	bitParita@sommaColumn,0
  3723  0704  2F06               	goto	u3181
  3724  0705  2F07               	goto	u3180
  3725  0706                     u3181:	
  3726  0706  2F0D               	goto	l111
  3727  0707                     u3180:	
  3728  0707                     l2944:	
  3729                           
  3730                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  3731  0707  01AB               	clrf	bitParita@error
  3732  0708  0AAB               	incf	bitParita@error,f
  3733  0709                     l2946:	
  3734                           
  3735                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  3736  0709  0834               	movf	bitParita@i_330,w
  3737  070A  00A4               	movwf	??_bitParita
  3738  070B  0824               	movf	??_bitParita,w
  3739  070C  00AA               	movwf	bitParita@errorColumn
  3740  070D                     l111:	
  3741                           ;./CustomLib/BitsFlow.h: 44:         }
  3742                           
  3743                           
  3744                           ;./CustomLib/BitsFlow.h: 45:     }
  3745  070D  3001               	movlw	1
  3746  070E  07B4               	addwf	bitParita@i_330,f
  3747  070F  1803               	skipnc
  3748  0710  0AB5               	incf	bitParita@i_330+1,f
  3749  0711  3000               	movlw	0
  3750  0712  07B5               	addwf	bitParita@i_330+1,f
  3751  0713                     l2948:	
  3752  0713  0835               	movf	bitParita@i_330+1,w
  3753  0714  3A80               	xorlw	128
  3754  0715  00FF               	movwf	btemp+1
  3755  0716  3080               	movlw	128
  3756  0717  027F               	subwf	btemp+1,w
  3757  0718  1D03               	skipz
  3758  0719  2F1C               	goto	u3195
  3759  071A  3008               	movlw	8
  3760  071B  0234               	subwf	bitParita@i_330,w
  3761  071C                     u3195:	
  3762  071C  1C03               	skipc
  3763  071D  2F1F               	goto	u3191
  3764  071E  2F20               	goto	u3190
  3765  071F                     u3191:	
  3766  071F  2ED4               	goto	l2932
  3767  0720                     u3190:	
  3768  0720                     l2950:	
  3769                           
  3770                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  3771  0720  1283               	bcf	3,5	;RP0=0, select bank0
  3772  0721  1303               	bcf	3,6	;RP1=0, select bank0
  3773  0722  082B               	movf	bitParita@error,w
  3774  0723  1903               	btfsc	3,2
  3775  0724  2F26               	goto	u3201
  3776  0725  2F27               	goto	u3200
  3777  0726                     u3201:	
  3778  0726  2F42               	goto	l113
  3779  0727                     u3200:	
  3780  0727                     l2952:	
  3781                           
  3782                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  3783  0727  082A               	movf	bitParita@errorColumn,w
  3784  0728  00A4               	movwf	??_bitParita
  3785  0729  0824               	movf	??_bitParita,w
  3786  072A  00A0               	movwf	bitChange@n
  3787  072B  082C               	movf	bitParita@errorRow,w
  3788  072C  0731               	addwf	bitParita@rx,w
  3789  072D  00A5               	movwf	??_bitParita+1
  3790  072E  0825               	movf	??_bitParita+1,w
  3791  072F  0084               	movwf	4
  3792  0730  1383               	bcf	3,7	;select IRP bank0
  3793  0731  0800               	movf	0,w
  3794  0732  120A  158A  2445  120A  118A  	fcall	_bitChange
  3795  0737  1283               	bcf	3,5	;RP0=0, select bank0
  3796  0738  1303               	bcf	3,6	;RP1=0, select bank0
  3797  0739  00A6               	movwf	??_bitParita+2
  3798  073A  082C               	movf	bitParita@errorRow,w
  3799  073B  0731               	addwf	bitParita@rx,w
  3800  073C  00A7               	movwf	??_bitParita+3
  3801  073D  0827               	movf	??_bitParita+3,w
  3802  073E  0084               	movwf	4
  3803  073F  0826               	movf	??_bitParita+2,w
  3804  0740  1383               	bcf	3,7	;select IRP bank0
  3805  0741  0080               	movwf	0
  3806  0742                     l113:	
  3807  0742  0008               	return
  3808  0743                     __end_of_bitParita:	
  3809                           
  3810                           	psect	text8
  3811  0C45                     __ptext8:	
  3812 ;; *************** function _bitChange *****************
  3813 ;; Defined at:
  3814 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  dato            1    wreg     unsigned char 
  3817 ;;  n               1    0[BANK0 ] unsigned char 
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  dato            1    3[BANK0 ] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  1    wreg      unsigned char 
  3822 ;; Registers used:
  3823 ;;		wreg, status,2, status,0
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3829 ;;      Params:         0       1       0       0       0
  3830 ;;      Locals:         0       1       0       0       0
  3831 ;;      Temps:          0       2       0       0       0
  3832 ;;      Totals:         0       4       0       0       0
  3833 ;;Total ram usage:        4 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    2
  3836 ;; This function calls:
  3837 ;;		Nothing
  3838 ;; This function is called by:
  3839 ;;		_bitParita
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           
  3844                           ;psect for function _bitChange
  3845  0C45                     _bitChange:	
  3846                           
  3847                           ;incstack = 0
  3848                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  3849                           ;bitChange@dato stored from wreg
  3850  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  3851  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  3852  0C47  00A3               	movwf	bitChange@dato
  3853  0C48                     l2678:	
  3854                           
  3855                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  3856  0C48  3001               	movlw	1
  3857  0C49  00A1               	movwf	??_bitChange
  3858  0C4A  0A20               	incf	bitChange@n,w
  3859  0C4B  2C4E               	goto	u2644
  3860  0C4C                     u2645:	
  3861  0C4C  1003               	clrc
  3862  0C4D  0DA1               	rlf	??_bitChange,f
  3863  0C4E                     u2644:	
  3864  0C4E  3EFF               	addlw	-1
  3865  0C4F  1D03               	skipz
  3866  0C50  2C4C               	goto	u2645
  3867  0C51  0821               	movf	??_bitChange,w
  3868  0C52  0523               	andwf	bitChange@dato,w
  3869  0C53  1903               	btfsc	3,2
  3870  0C54  2C56               	goto	u2651
  3871  0C55  2C57               	goto	u2650
  3872  0C56                     u2651:	
  3873  0C56  2C66               	goto	l2686
  3874  0C57                     u2650:	
  3875  0C57                     l2680:	
  3876                           
  3877                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  3878  0C57  3001               	movlw	1
  3879  0C58  00A1               	movwf	??_bitChange
  3880  0C59  0A20               	incf	bitChange@n,w
  3881  0C5A  2C5D               	goto	u2664
  3882  0C5B                     u2665:	
  3883  0C5B  1003               	clrc
  3884  0C5C  0DA1               	rlf	??_bitChange,f
  3885  0C5D                     u2664:	
  3886  0C5D  3EFF               	addlw	-1
  3887  0C5E  1D03               	skipz
  3888  0C5F  2C5B               	goto	u2665
  3889  0C60  0821               	movf	??_bitChange,w
  3890  0C61  00A2               	movwf	??_bitChange+1
  3891  0C62  0822               	movf	??_bitChange+1,w
  3892  0C63  04A3               	iorwf	bitChange@dato,f
  3893  0C64  0823               	movf	bitChange@dato,w
  3894  0C65  2C75               	goto	l98
  3895  0C66                     l2686:	
  3896                           
  3897                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  3898  0C66  3001               	movlw	1
  3899  0C67  00A1               	movwf	??_bitChange
  3900  0C68  0A20               	incf	bitChange@n,w
  3901  0C69  2C6C               	goto	u2674
  3902  0C6A                     u2675:	
  3903  0C6A  1003               	clrc
  3904  0C6B  0DA1               	rlf	??_bitChange,f
  3905  0C6C                     u2674:	
  3906  0C6C  3EFF               	addlw	-1
  3907  0C6D  1D03               	skipz
  3908  0C6E  2C6A               	goto	u2675
  3909  0C6F  0821               	movf	??_bitChange,w
  3910  0C70  3AFF               	xorlw	255
  3911  0C71  00A2               	movwf	??_bitChange+1
  3912  0C72  0822               	movf	??_bitChange+1,w
  3913  0C73  05A3               	andwf	bitChange@dato,f
  3914  0C74  0823               	movf	bitChange@dato,w
  3915  0C75                     l98:	
  3916  0C75  0008               	return
  3917  0C76                     __end_of_bitChange:	
  3918                           
  3919                           	psect	text9
  3920  0BB3                     __ptext9:	
  3921 ;; *************** function ___bmul *****************
  3922 ;; Defined at:
  3923 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  multiplier      1    wreg     unsigned char 
  3926 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3929 ;;  product         1    2[BANK0 ] unsigned char 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      unsigned char 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3939 ;;      Params:         0       1       0       0       0
  3940 ;;      Locals:         0       2       0       0       0
  3941 ;;      Temps:          0       1       0       0       0
  3942 ;;      Totals:         0       4       0       0       0
  3943 ;;Total ram usage:        4 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    2
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_main
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           
  3954                           ;psect for function ___bmul
  3955  0BB3                     ___bmul:	
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3959                           ;___bmul@multiplier stored from wreg
  3960  0BB3  1283               	bcf	3,5	;RP0=0, select bank0
  3961  0BB4  1303               	bcf	3,6	;RP1=0, select bank0
  3962  0BB5  00A3               	movwf	___bmul@multiplier
  3963  0BB6                     l3060:	
  3964  0BB6  01A2               	clrf	___bmul@product
  3965  0BB7                     l3062:	
  3966  0BB7  1C23               	btfss	___bmul@multiplier,0
  3967  0BB8  2BBA               	goto	u3281
  3968  0BB9  2BBB               	goto	u3280
  3969  0BBA                     u3281:	
  3970  0BBA  2BBF               	goto	l3066
  3971  0BBB                     u3280:	
  3972  0BBB                     l3064:	
  3973  0BBB  0820               	movf	___bmul@multiplicand,w
  3974  0BBC  00A1               	movwf	??___bmul
  3975  0BBD  0821               	movf	??___bmul,w
  3976  0BBE  07A2               	addwf	___bmul@product,f
  3977  0BBF                     l3066:	
  3978  0BBF  1003               	clrc
  3979  0BC0  0DA0               	rlf	___bmul@multiplicand,f
  3980  0BC1                     l3068:	
  3981  0BC1  1003               	clrc
  3982  0BC2  0CA3               	rrf	___bmul@multiplier,f
  3983  0BC3  0823               	movf	___bmul@multiplier,w
  3984  0BC4  1D03               	btfss	3,2
  3985  0BC5  2BC7               	goto	u3291
  3986  0BC6  2BC8               	goto	u3290
  3987  0BC7                     u3291:	
  3988  0BC7  2BB7               	goto	l3062
  3989  0BC8                     u3290:	
  3990  0BC8                     l3070:	
  3991  0BC8  0822               	movf	___bmul@product,w
  3992  0BC9                     l468:	
  3993  0BC9  0008               	return
  3994  0BCA                     __end_of___bmul:	
  3995                           
  3996                           	psect	text10
  3997  0CAB                     __ptext10:	
  3998 ;; *************** function _UART_Init *****************
  3999 ;; Defined at:
  4000 ;;		line 374 in file "main.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  baudrate        2   15[BANK0 ] int 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      void 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4014 ;;      Params:         0       2       0       0       0
  4015 ;;      Locals:         0       0       0       0       0
  4016 ;;      Temps:          0       4       0       0       0
  4017 ;;      Totals:         0       6       0       0       0
  4018 ;;Total ram usage:        6 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    3
  4021 ;; This function calls:
  4022 ;;		___aldiv
  4023 ;; This function is called by:
  4024 ;;		_main
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _UART_Init
  4030  0CAB                     _UART_Init:	
  4031  0CAB                     l2962:	
  4032                           ;incstack = 0
  4033                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4034                           
  4035                           
  4036                           ;main.c: 374: void UART_Init(int baudrate);main.c: 375: {;main.c: 376:     TRISCbits.TRI
      +                          SC6 = 0;
  4037  0CAB  1683               	bsf	3,5	;RP0=1, select bank1
  4038  0CAC  1303               	bcf	3,6	;RP1=0, select bank1
  4039  0CAD  1307               	bcf	7,6	;volatile
  4040                           
  4041                           ;main.c: 377:     TXSTAbits.TXEN = 1;
  4042  0CAE  1698               	bsf	24,5	;volatile
  4043                           
  4044                           ;main.c: 378:     RCSTAbits.SPEN = 1;
  4045  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  4046  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  4047  0CB1  1798               	bsf	24,7	;volatile
  4048                           
  4049                           ;main.c: 379:     RCSTAbits.CREN = 1;
  4050  0CB2  1618               	bsf	24,4	;volatile
  4051  0CB3                     l2964:	
  4052                           
  4053                           ;main.c: 380:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  4054  0CB3  082F               	movf	UART_Init@baudrate,w
  4055  0CB4  00B1               	movwf	??_UART_Init
  4056  0CB5  0830               	movf	UART_Init@baudrate+1,w
  4057  0CB6  00B2               	movwf	??_UART_Init+1
  4058  0CB7  3000               	movlw	0
  4059  0CB8  1BB2               	btfsc	??_UART_Init+1,7
  4060  0CB9  30FF               	movlw	255
  4061  0CBA  00B3               	movwf	??_UART_Init+2
  4062  0CBB  00B4               	movwf	??_UART_Init+3
  4063  0CBC  3006               	movlw	6
  4064  0CBD                     u3215:	
  4065  0CBD  1003               	clrc
  4066  0CBE  0DB1               	rlf	??_UART_Init,f
  4067  0CBF  0DB2               	rlf	??_UART_Init+1,f
  4068  0CC0  0DB3               	rlf	??_UART_Init+2,f
  4069  0CC1  0DB4               	rlf	??_UART_Init+3,f
  4070  0CC2                     u3210:	
  4071  0CC2  3EFF               	addlw	-1
  4072  0CC3  1D03               	skipz
  4073  0CC4  2CBD               	goto	u3215
  4074  0CC5  0834               	movf	??_UART_Init+3,w
  4075  0CC6  00A3               	movwf	___aldiv@divisor+3
  4076  0CC7  0833               	movf	??_UART_Init+2,w
  4077  0CC8  00A2               	movwf	___aldiv@divisor+2
  4078  0CC9  0832               	movf	??_UART_Init+1,w
  4079  0CCA  00A1               	movwf	___aldiv@divisor+1
  4080  0CCB  0831               	movf	??_UART_Init,w
  4081  0CCC  00A0               	movwf	___aldiv@divisor
  4082  0CCD  3001               	movlw	1
  4083  0CCE  00A7               	movwf	___aldiv@dividend+3
  4084  0CCF  30E8               	movlw	232
  4085  0CD0  00A6               	movwf	___aldiv@dividend+2
  4086  0CD1  3048               	movlw	72
  4087  0CD2  00A5               	movwf	___aldiv@dividend+1
  4088  0CD3  3000               	movlw	0
  4089  0CD4  00A4               	movwf	___aldiv@dividend
  4090  0CD5  120A  118A  2743  120A  158A  	fcall	___aldiv
  4091  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  4092  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  4093  0CDC  0820               	movf	?___aldiv,w
  4094  0CDD  3EFF               	addlw	255
  4095  0CDE  1683               	bsf	3,5	;RP0=1, select bank1
  4096  0CDF  1303               	bcf	3,6	;RP1=0, select bank1
  4097  0CE0  0099               	movwf	25	;volatile
  4098  0CE1                     l2966:	
  4099                           
  4100                           ;main.c: 381:     INTCONbits.GIE = 1;
  4101  0CE1  178B               	bsf	11,7	;volatile
  4102  0CE2                     l2968:	
  4103                           
  4104                           ;main.c: 382:     INTCONbits.PEIE = 1;
  4105  0CE2  170B               	bsf	11,6	;volatile
  4106  0CE3                     l2970:	
  4107                           
  4108                           ;main.c: 383:     PIE1bits.RCIE = 1;
  4109  0CE3  168C               	bsf	12,5	;volatile
  4110  0CE4                     l275:	
  4111  0CE4  0008               	return
  4112  0CE5                     __end_of_UART_Init:	
  4113                           
  4114                           	psect	text11
  4115  0743                     __ptext11:	
  4116 ;; *************** function ___aldiv *****************
  4117 ;; Defined at:
  4118 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  divisor         4    0[BANK0 ] long 
  4121 ;;  dividend        4    4[BANK0 ] long 
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;  quotient        4   11[BANK0 ] long 
  4124 ;;  sign            1   10[BANK0 ] unsigned char 
  4125 ;;  counter         1    9[BANK0 ] unsigned char 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  4    0[BANK0 ] long 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4135 ;;      Params:         0       8       0       0       0
  4136 ;;      Locals:         0       6       0       0       0
  4137 ;;      Temps:          0       1       0       0       0
  4138 ;;      Totals:         0      15       0       0       0
  4139 ;;Total ram usage:       15 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    2
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_UART_Init
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           
  4150                           ;psect for function ___aldiv
  4151  0743                     ___aldiv:	
  4152  0743                     l2776:	
  4153                           ;incstack = 0
  4154                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4155                           
  4156  0743  1283               	bcf	3,5	;RP0=0, select bank0
  4157  0744  1303               	bcf	3,6	;RP1=0, select bank0
  4158  0745  01AA               	clrf	___aldiv@sign
  4159  0746                     l2778:	
  4160  0746  1FA3               	btfss	___aldiv@divisor+3,7
  4161  0747  2F49               	goto	u2831
  4162  0748  2F4A               	goto	u2830
  4163  0749                     u2831:	
  4164  0749  2F57               	goto	l507
  4165  074A                     u2830:	
  4166  074A                     l2780:	
  4167  074A  09A0               	comf	___aldiv@divisor,f
  4168  074B  09A1               	comf	___aldiv@divisor+1,f
  4169  074C  09A2               	comf	___aldiv@divisor+2,f
  4170  074D  09A3               	comf	___aldiv@divisor+3,f
  4171  074E  0AA0               	incf	___aldiv@divisor,f
  4172  074F  1903               	skipnz
  4173  0750  0AA1               	incf	___aldiv@divisor+1,f
  4174  0751  1903               	skipnz
  4175  0752  0AA2               	incf	___aldiv@divisor+2,f
  4176  0753  1903               	skipnz
  4177  0754  0AA3               	incf	___aldiv@divisor+3,f
  4178  0755  01AA               	clrf	___aldiv@sign
  4179  0756  0AAA               	incf	___aldiv@sign,f
  4180  0757                     l507:	
  4181  0757  1FA7               	btfss	___aldiv@dividend+3,7
  4182  0758  2F5A               	goto	u2841
  4183  0759  2F5B               	goto	u2840
  4184  075A                     u2841:	
  4185  075A  2F6A               	goto	l2786
  4186  075B                     u2840:	
  4187  075B                     l2782:	
  4188  075B  09A4               	comf	___aldiv@dividend,f
  4189  075C  09A5               	comf	___aldiv@dividend+1,f
  4190  075D  09A6               	comf	___aldiv@dividend+2,f
  4191  075E  09A7               	comf	___aldiv@dividend+3,f
  4192  075F  0AA4               	incf	___aldiv@dividend,f
  4193  0760  1903               	skipnz
  4194  0761  0AA5               	incf	___aldiv@dividend+1,f
  4195  0762  1903               	skipnz
  4196  0763  0AA6               	incf	___aldiv@dividend+2,f
  4197  0764  1903               	skipnz
  4198  0765  0AA7               	incf	___aldiv@dividend+3,f
  4199  0766                     l2784:	
  4200  0766  3001               	movlw	1
  4201  0767  00A8               	movwf	??___aldiv
  4202  0768  0828               	movf	??___aldiv,w
  4203  0769  06AA               	xorwf	___aldiv@sign,f
  4204  076A                     l2786:	
  4205  076A  3000               	movlw	0
  4206  076B  00AE               	movwf	___aldiv@quotient+3
  4207  076C  3000               	movlw	0
  4208  076D  00AD               	movwf	___aldiv@quotient+2
  4209  076E  3000               	movlw	0
  4210  076F  00AC               	movwf	___aldiv@quotient+1
  4211  0770  3000               	movlw	0
  4212  0771  00AB               	movwf	___aldiv@quotient
  4213  0772                     l2788:	
  4214  0772  0823               	movf	___aldiv@divisor+3,w
  4215  0773  0422               	iorwf	___aldiv@divisor+2,w
  4216  0774  0421               	iorwf	___aldiv@divisor+1,w
  4217  0775  0420               	iorwf	___aldiv@divisor,w
  4218  0776  1903               	skipnz
  4219  0777  2F79               	goto	u2851
  4220  0778  2F7A               	goto	u2850
  4221  0779                     u2851:	
  4222  0779  2FC7               	goto	l2808
  4223  077A                     u2850:	
  4224  077A                     l2790:	
  4225  077A  01A9               	clrf	___aldiv@counter
  4226  077B  0AA9               	incf	___aldiv@counter,f
  4227  077C  2F8A               	goto	l2794
  4228  077D                     l2792:	
  4229  077D  3001               	movlw	1
  4230  077E  00A8               	movwf	??___aldiv
  4231  077F                     u2865:	
  4232  077F  1003               	clrc
  4233  0780  0DA0               	rlf	___aldiv@divisor,f
  4234  0781  0DA1               	rlf	___aldiv@divisor+1,f
  4235  0782  0DA2               	rlf	___aldiv@divisor+2,f
  4236  0783  0DA3               	rlf	___aldiv@divisor+3,f
  4237  0784  0BA8               	decfsz	??___aldiv,f
  4238  0785  2F7F               	goto	u2865
  4239  0786  3001               	movlw	1
  4240  0787  00A8               	movwf	??___aldiv
  4241  0788  0828               	movf	??___aldiv,w
  4242  0789  07A9               	addwf	___aldiv@counter,f
  4243  078A                     l2794:	
  4244  078A  1FA3               	btfss	___aldiv@divisor+3,7
  4245  078B  2F8D               	goto	u2871
  4246  078C  2F8E               	goto	u2870
  4247  078D                     u2871:	
  4248  078D  2F7D               	goto	l2792
  4249  078E                     u2870:	
  4250  078E                     l2796:	
  4251  078E  3001               	movlw	1
  4252  078F  00A8               	movwf	??___aldiv
  4253  0790                     u2885:	
  4254  0790  1003               	clrc
  4255  0791  0DAB               	rlf	___aldiv@quotient,f
  4256  0792  0DAC               	rlf	___aldiv@quotient+1,f
  4257  0793  0DAD               	rlf	___aldiv@quotient+2,f
  4258  0794  0DAE               	rlf	___aldiv@quotient+3,f
  4259  0795  0BA8               	decfsz	??___aldiv,f
  4260  0796  2F90               	goto	u2885
  4261  0797                     l2798:	
  4262  0797  0823               	movf	___aldiv@divisor+3,w
  4263  0798  0227               	subwf	___aldiv@dividend+3,w
  4264  0799  1D03               	skipz
  4265  079A  2FA5               	goto	u2895
  4266  079B  0822               	movf	___aldiv@divisor+2,w
  4267  079C  0226               	subwf	___aldiv@dividend+2,w
  4268  079D  1D03               	skipz
  4269  079E  2FA5               	goto	u2895
  4270  079F  0821               	movf	___aldiv@divisor+1,w
  4271  07A0  0225               	subwf	___aldiv@dividend+1,w
  4272  07A1  1D03               	skipz
  4273  07A2  2FA5               	goto	u2895
  4274  07A3  0820               	movf	___aldiv@divisor,w
  4275  07A4  0224               	subwf	___aldiv@dividend,w
  4276  07A5                     u2895:	
  4277  07A5  1C03               	skipc
  4278  07A6  2FA8               	goto	u2891
  4279  07A7  2FA9               	goto	u2890
  4280  07A8                     u2891:	
  4281  07A8  2FB8               	goto	l2804
  4282  07A9                     u2890:	
  4283  07A9                     l2800:	
  4284  07A9  0820               	movf	___aldiv@divisor,w
  4285  07AA  02A4               	subwf	___aldiv@dividend,f
  4286  07AB  0821               	movf	___aldiv@divisor+1,w
  4287  07AC  1C03               	skipc
  4288  07AD  0F21               	incfsz	___aldiv@divisor+1,w
  4289  07AE  02A5               	subwf	___aldiv@dividend+1,f
  4290  07AF  0822               	movf	___aldiv@divisor+2,w
  4291  07B0  1C03               	skipc
  4292  07B1  0F22               	incfsz	___aldiv@divisor+2,w
  4293  07B2  02A6               	subwf	___aldiv@dividend+2,f
  4294  07B3  0823               	movf	___aldiv@divisor+3,w
  4295  07B4  1C03               	skipc
  4296  07B5  0F23               	incfsz	___aldiv@divisor+3,w
  4297  07B6  02A7               	subwf	___aldiv@dividend+3,f
  4298  07B7                     l2802:	
  4299  07B7  142B               	bsf	___aldiv@quotient,0
  4300  07B8                     l2804:	
  4301  07B8  3001               	movlw	1
  4302  07B9                     u2905:	
  4303  07B9  1003               	clrc
  4304  07BA  0CA3               	rrf	___aldiv@divisor+3,f
  4305  07BB  0CA2               	rrf	___aldiv@divisor+2,f
  4306  07BC  0CA1               	rrf	___aldiv@divisor+1,f
  4307  07BD  0CA0               	rrf	___aldiv@divisor,f
  4308  07BE  3EFF               	addlw	-1
  4309  07BF  1D03               	skipz
  4310  07C0  2FB9               	goto	u2905
  4311  07C1                     l2806:	
  4312  07C1  3001               	movlw	1
  4313  07C2  02A9               	subwf	___aldiv@counter,f
  4314  07C3  1D03               	btfss	3,2
  4315  07C4  2FC6               	goto	u2911
  4316  07C5  2FC7               	goto	u2910
  4317  07C6                     u2911:	
  4318  07C6  2F8E               	goto	l2796
  4319  07C7                     u2910:	
  4320  07C7                     l2808:	
  4321  07C7  082A               	movf	___aldiv@sign,w
  4322  07C8  1903               	btfsc	3,2
  4323  07C9  2FCB               	goto	u2921
  4324  07CA  2FCC               	goto	u2920
  4325  07CB                     u2921:	
  4326  07CB  2FD7               	goto	l2812
  4327  07CC                     u2920:	
  4328  07CC                     l2810:	
  4329  07CC  09AB               	comf	___aldiv@quotient,f
  4330  07CD  09AC               	comf	___aldiv@quotient+1,f
  4331  07CE  09AD               	comf	___aldiv@quotient+2,f
  4332  07CF  09AE               	comf	___aldiv@quotient+3,f
  4333  07D0  0AAB               	incf	___aldiv@quotient,f
  4334  07D1  1903               	skipnz
  4335  07D2  0AAC               	incf	___aldiv@quotient+1,f
  4336  07D3  1903               	skipnz
  4337  07D4  0AAD               	incf	___aldiv@quotient+2,f
  4338  07D5  1903               	skipnz
  4339  07D6  0AAE               	incf	___aldiv@quotient+3,f
  4340  07D7                     l2812:	
  4341  07D7  082E               	movf	___aldiv@quotient+3,w
  4342  07D8  00A3               	movwf	?___aldiv+3
  4343  07D9  082D               	movf	___aldiv@quotient+2,w
  4344  07DA  00A2               	movwf	?___aldiv+2
  4345  07DB  082C               	movf	___aldiv@quotient+1,w
  4346  07DC  00A1               	movwf	?___aldiv+1
  4347  07DD  082B               	movf	___aldiv@quotient,w
  4348  07DE  00A0               	movwf	?___aldiv
  4349  07DF                     l517:	
  4350  07DF  0008               	return
  4351  07E0                     __end_of___aldiv:	
  4352                           
  4353                           	psect	text12
  4354  0B9E                     __ptext12:	
  4355 ;; *************** function _SetDisplay *****************
  4356 ;; Defined at:
  4357 ;;		line 448 in file "main.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;  d1              1    wreg     unsigned char 
  4360 ;;  d2              1    0[BANK0 ] unsigned char 
  4361 ;;  d3              1    1[BANK0 ] unsigned char 
  4362 ;;  value           1    2[BANK0 ] unsigned char 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  d1              1    3[BANK0 ] unsigned char 
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  1    wreg      void 
  4367 ;; Registers used:
  4368 ;;		wreg, status,0
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4374 ;;      Params:         0       3       0       0       0
  4375 ;;      Locals:         0       1       0       0       0
  4376 ;;      Temps:          0       0       0       0       0
  4377 ;;      Totals:         0       4       0       0       0
  4378 ;;Total ram usage:        4 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    2
  4381 ;; This function calls:
  4382 ;;		Nothing
  4383 ;; This function is called by:
  4384 ;;		_main
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function _SetDisplay
  4390  0B9E                     _SetDisplay:	
  4391                           
  4392                           ;incstack = 0
  4393                           ; Regs used in _SetDisplay: [wreg+status,0]
  4394                           ;SetDisplay@d1 stored from wreg
  4395  0B9E  1283               	bcf	3,5	;RP0=0, select bank0
  4396  0B9F  1303               	bcf	3,6	;RP1=0, select bank0
  4397  0BA0  00A3               	movwf	SetDisplay@d1
  4398  0BA1                     l3030:	
  4399                           
  4400                           ;main.c: 448: void SetDisplay(char d1, char d2, char d3, char value);main.c: 449: {;main
      +                          .c: 450:     PORTAbits.RA2 = d1;
  4401  0BA1  0C23               	rrf	SetDisplay@d1,w
  4402  0BA2  1C03               	skipc
  4403  0BA3  1105               	bcf	5,2	;volatile
  4404  0BA4  1803               	skipnc
  4405  0BA5  1505               	bsf	5,2	;volatile
  4406                           
  4407                           ;main.c: 451:     PORTAbits.RA3 = d2;
  4408  0BA6  0C20               	rrf	SetDisplay@d2,w
  4409  0BA7  1C03               	skipc
  4410  0BA8  1185               	bcf	5,3	;volatile
  4411  0BA9  1803               	skipnc
  4412  0BAA  1585               	bsf	5,3	;volatile
  4413                           
  4414                           ;main.c: 452:     PORTAbits.RA4 = d3;
  4415  0BAB  0C21               	rrf	SetDisplay@d3,w
  4416  0BAC  1C03               	skipc
  4417  0BAD  1205               	bcf	5,4	;volatile
  4418  0BAE  1803               	skipnc
  4419  0BAF  1605               	bsf	5,4	;volatile
  4420  0BB0                     l3032:	
  4421                           
  4422                           ;main.c: 453:     PORTD = value;
  4423  0BB0  0822               	movf	SetDisplay@value,w
  4424  0BB1  0088               	movwf	8	;volatile
  4425  0BB2                     l307:	
  4426  0BB2  0008               	return
  4427  0BB3                     __end_of_SetDisplay:	
  4428                           
  4429                           	psect	text13
  4430  0EAE                     __ptext13:	
  4431 ;; *************** function _SetDefaultTimers *****************
  4432 ;; Defined at:
  4433 ;;		line 456 in file "main.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  rosso           2    0[BANK0 ] int 
  4436 ;;  verde           2    2[BANK0 ] int 
  4437 ;;  giallo          2    4[BANK0 ] int 
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;  i               1   13[BANK0 ] unsigned char 
  4440 ;;  l               1   12[BANK0 ] unsigned char 
  4441 ;; Return value:  Size  Location     Type
  4442 ;;                  1    wreg      void 
  4443 ;; Registers used:
  4444 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4450 ;;      Params:         0       6       0       0       0
  4451 ;;      Locals:         0       2       0       0       0
  4452 ;;      Temps:          0       6       0       0       0
  4453 ;;      Totals:         0      14       0       0       0
  4454 ;;Total ram usage:       14 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    2
  4457 ;; This function calls:
  4458 ;;		Nothing
  4459 ;; This function is called by:
  4460 ;;		_main
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           
  4465                           ;psect for function _SetDefaultTimers
  4466  0EAE                     _SetDefaultTimers:	
  4467  0EAE                     l2972:	
  4468                           ;incstack = 0
  4469                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4470                           
  4471                           
  4472                           ;main.c: 456: void SetDefaultTimers(int rosso, int verde, int giallo);main.c: 457: {;mai
      +                          n.c: 458:     for (unsigned char l = 0; l < 16; l++)
  4473  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  4474  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  4475  0EB0  01AC               	clrf	SetDefaultTimers@l
  4476  0EB1                     l2978:	
  4477                           
  4478                           ;main.c: 459:     {;main.c: 460:         for (unsigned char i = 0; i < 3; i++)
  4479  0EB1  01AD               	clrf	SetDefaultTimers@i
  4480  0EB2  2F10               	goto	l2992
  4481  0EB3                     l2984:	
  4482                           
  4483                           ;main.c: 465:                 (*(Semafori[l])).new_times[i] = rosso;
  4484  0EB3  082C               	movf	SetDefaultTimers@l,w
  4485  0EB4  00A6               	movwf	??_SetDefaultTimers
  4486  0EB5  0726               	addwf	??_SetDefaultTimers,w
  4487  0EB6  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4488  0EB7  0084               	movwf	4
  4489  0EB8  1383               	bcf	3,7	;select IRP bank1
  4490  0EB9  0800               	movf	0,w
  4491  0EBA  00A7               	movwf	??_SetDefaultTimers+1
  4492  0EBB  0A84               	incf	4,f
  4493  0EBC  0800               	movf	0,w
  4494  0EBD  00A8               	movwf	??_SetDefaultTimers+2
  4495  0EBE  082D               	movf	SetDefaultTimers@i,w
  4496  0EBF  00A9               	movwf	??_SetDefaultTimers+3
  4497  0EC0  0729               	addwf	??_SetDefaultTimers+3,w
  4498  0EC1  0727               	addwf	??_SetDefaultTimers+1,w
  4499  0EC2  00AA               	movwf	??_SetDefaultTimers+4
  4500  0EC3  0828               	movf	??_SetDefaultTimers+2,w
  4501  0EC4  1803               	skipnc
  4502  0EC5  3E01               	addlw	1
  4503  0EC6  00AB               	movwf	??_SetDefaultTimers+5
  4504  0EC7  082A               	movf	??_SetDefaultTimers+4,w
  4505  0EC8  0084               	movwf	4
  4506  0EC9  1783               	bsf	3,7
  4507  0ECA  1C2B               	btfss	??_SetDefaultTimers+5,0
  4508  0ECB  1383               	bcf	3,7
  4509  0ECC  0820               	movf	SetDefaultTimers@rosso,w
  4510  0ECD  0080               	movwf	0
  4511  0ECE  0A84               	incf	4,f
  4512  0ECF  0821               	movf	SetDefaultTimers@rosso+1,w
  4513  0ED0  0080               	movwf	0
  4514                           
  4515                           ;main.c: 466:                 break;
  4516  0ED1  2F23               	goto	l2994
  4517  0ED2                     l2986:	
  4518                           
  4519                           ;main.c: 468:                 (*(Semafori[l])).new_times[i] = verde;
  4520  0ED2  082C               	movf	SetDefaultTimers@l,w
  4521  0ED3  00A6               	movwf	??_SetDefaultTimers
  4522  0ED4  0726               	addwf	??_SetDefaultTimers,w
  4523  0ED5  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4524  0ED6  0084               	movwf	4
  4525  0ED7  1383               	bcf	3,7	;select IRP bank1
  4526  0ED8  0800               	movf	0,w
  4527  0ED9  00A7               	movwf	??_SetDefaultTimers+1
  4528  0EDA  0A84               	incf	4,f
  4529  0EDB  0800               	movf	0,w
  4530  0EDC  00A8               	movwf	??_SetDefaultTimers+2
  4531  0EDD  082D               	movf	SetDefaultTimers@i,w
  4532  0EDE  00A9               	movwf	??_SetDefaultTimers+3
  4533  0EDF  0729               	addwf	??_SetDefaultTimers+3,w
  4534  0EE0  0727               	addwf	??_SetDefaultTimers+1,w
  4535  0EE1  00AA               	movwf	??_SetDefaultTimers+4
  4536  0EE2  0828               	movf	??_SetDefaultTimers+2,w
  4537  0EE3  1803               	skipnc
  4538  0EE4  3E01               	addlw	1
  4539  0EE5  00AB               	movwf	??_SetDefaultTimers+5
  4540  0EE6  082A               	movf	??_SetDefaultTimers+4,w
  4541  0EE7  0084               	movwf	4
  4542  0EE8  1783               	bsf	3,7
  4543  0EE9  1C2B               	btfss	??_SetDefaultTimers+5,0
  4544  0EEA  1383               	bcf	3,7
  4545  0EEB  0822               	movf	SetDefaultTimers@verde,w
  4546  0EEC  0080               	movwf	0
  4547  0EED  0A84               	incf	4,f
  4548  0EEE  0823               	movf	SetDefaultTimers@verde+1,w
  4549  0EEF  0080               	movwf	0
  4550                           
  4551                           ;main.c: 469:                 break;
  4552  0EF0  2F23               	goto	l2994
  4553  0EF1                     l2988:	
  4554                           
  4555                           ;main.c: 471:                 (*(Semafori[l])).new_times[i] = giallo;
  4556  0EF1  082C               	movf	SetDefaultTimers@l,w
  4557  0EF2  00A6               	movwf	??_SetDefaultTimers
  4558  0EF3  0726               	addwf	??_SetDefaultTimers,w
  4559  0EF4  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4560  0EF5  0084               	movwf	4
  4561  0EF6  1383               	bcf	3,7	;select IRP bank1
  4562  0EF7  0800               	movf	0,w
  4563  0EF8  00A7               	movwf	??_SetDefaultTimers+1
  4564  0EF9  0A84               	incf	4,f
  4565  0EFA  0800               	movf	0,w
  4566  0EFB  00A8               	movwf	??_SetDefaultTimers+2
  4567  0EFC  082D               	movf	SetDefaultTimers@i,w
  4568  0EFD  00A9               	movwf	??_SetDefaultTimers+3
  4569  0EFE  0729               	addwf	??_SetDefaultTimers+3,w
  4570  0EFF  0727               	addwf	??_SetDefaultTimers+1,w
  4571  0F00  00AA               	movwf	??_SetDefaultTimers+4
  4572  0F01  0828               	movf	??_SetDefaultTimers+2,w
  4573  0F02  1803               	skipnc
  4574  0F03  3E01               	addlw	1
  4575  0F04  00AB               	movwf	??_SetDefaultTimers+5
  4576  0F05  082A               	movf	??_SetDefaultTimers+4,w
  4577  0F06  0084               	movwf	4
  4578  0F07  1783               	bsf	3,7
  4579  0F08  1C2B               	btfss	??_SetDefaultTimers+5,0
  4580  0F09  1383               	bcf	3,7
  4581  0F0A  0824               	movf	SetDefaultTimers@giallo,w
  4582  0F0B  0080               	movwf	0
  4583  0F0C  0A84               	incf	4,f
  4584  0F0D  0825               	movf	SetDefaultTimers@giallo+1,w
  4585  0F0E  0080               	movwf	0
  4586                           
  4587                           ;main.c: 472:                 break;
  4588  0F0F  2F23               	goto	l2994
  4589  0F10                     l2992:	
  4590  0F10  082D               	movf	SetDefaultTimers@i,w
  4591  0F11  00A6               	movwf	??_SetDefaultTimers
  4592  0F12  01A7               	clrf	??_SetDefaultTimers+1
  4593                           
  4594                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4595                           ; Switch size 1, requested type "simple"
  4596                           ; Number of cases is 1, Range of values is 0 to 0
  4597                           ; switch strategies available:
  4598                           ; Name         Instructions Cycles
  4599                           ; simple_byte            4     3 (average)
  4600                           ; direct_byte           11     8 (fixed)
  4601                           ; jumptable            260     6 (fixed)
  4602                           ;	Chosen strategy is simple_byte
  4603  0F13  0827               	movf	??_SetDefaultTimers+1,w
  4604  0F14  3A00               	xorlw	0	; case 0
  4605  0F15  1903               	skipnz
  4606  0F16  2F18               	goto	l3418
  4607  0F17  2F23               	goto	l2994
  4608  0F18                     l3418:	
  4609                           
  4610                           ; Switch size 1, requested type "simple"
  4611                           ; Number of cases is 3, Range of values is 0 to 2
  4612                           ; switch strategies available:
  4613                           ; Name         Instructions Cycles
  4614                           ; simple_byte           10     6 (average)
  4615                           ; direct_byte           17     8 (fixed)
  4616                           ; jumptable            260     6 (fixed)
  4617                           ;	Chosen strategy is simple_byte
  4618  0F18  0826               	movf	??_SetDefaultTimers,w
  4619  0F19  3A00               	xorlw	0	; case 0
  4620  0F1A  1903               	skipnz
  4621  0F1B  2EB3               	goto	l2984
  4622  0F1C  3A01               	xorlw	1	; case 1
  4623  0F1D  1903               	skipnz
  4624  0F1E  2ED2               	goto	l2986
  4625  0F1F  3A03               	xorlw	3	; case 2
  4626  0F20  1903               	skipnz
  4627  0F21  2EF1               	goto	l2988
  4628  0F22  2F23               	goto	l2994
  4629  0F23                     l2994:	
  4630                           
  4631                           ;main.c: 474:         }
  4632  0F23  3001               	movlw	1
  4633  0F24  00A6               	movwf	??_SetDefaultTimers
  4634  0F25  0826               	movf	??_SetDefaultTimers,w
  4635  0F26  07AD               	addwf	SetDefaultTimers@i,f
  4636  0F27                     l2996:	
  4637  0F27  3003               	movlw	3
  4638  0F28  022D               	subwf	SetDefaultTimers@i,w
  4639  0F29  1C03               	skipc
  4640  0F2A  2F2C               	goto	u3221
  4641  0F2B  2F2D               	goto	u3220
  4642  0F2C                     u3221:	
  4643  0F2C  2F10               	goto	l2992
  4644  0F2D                     u3220:	
  4645  0F2D                     l2998:	
  4646                           
  4647                           ;main.c: 475:     }
  4648  0F2D  3001               	movlw	1
  4649  0F2E  00A6               	movwf	??_SetDefaultTimers
  4650  0F2F  0826               	movf	??_SetDefaultTimers,w
  4651  0F30  07AC               	addwf	SetDefaultTimers@l,f
  4652  0F31                     l3000:	
  4653  0F31  3010               	movlw	16
  4654  0F32  022C               	subwf	SetDefaultTimers@l,w
  4655  0F33  1C03               	skipc
  4656  0F34  2F36               	goto	u3231
  4657  0F35  2F37               	goto	u3230
  4658  0F36                     u3231:	
  4659  0F36  2EB1               	goto	l2978
  4660  0F37                     u3230:	
  4661  0F37                     l319:	
  4662  0F37  0008               	return
  4663  0F38                     __end_of_SetDefaultTimers:	
  4664                           
  4665                           	psect	text14
  4666  0CE5                     __ptext14:	
  4667 ;; *************** function _GetTime *****************
  4668 ;; Defined at:
  4669 ;;		line 422 in file "main.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;  index           1    wreg     unsigned char 
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;  index           1    4[BANK0 ] unsigned char 
  4674 ;;  time            2    6[BANK0 ] int 
  4675 ;;  shortInt        1    5[BANK0 ] struct .
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  2    0[BANK0 ] int 
  4678 ;; Registers used:
  4679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4685 ;;      Params:         0       2       0       0       0
  4686 ;;      Locals:         0       4       0       0       0
  4687 ;;      Temps:          0       2       0       0       0
  4688 ;;      Totals:         0       8       0       0       0
  4689 ;;Total ram usage:        8 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    2
  4692 ;; This function calls:
  4693 ;;		Nothing
  4694 ;; This function is called by:
  4695 ;;		_main
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           
  4700                           ;psect for function _GetTime
  4701  0CE5                     _GetTime:	
  4702                           
  4703                           ;incstack = 0
  4704                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4705                           ;GetTime@index stored from wreg
  4706  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  4707  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  4708  0CE7  00A4               	movwf	GetTime@index
  4709  0CE8                     l3006:	
  4710                           
  4711                           ;main.c: 422: int GetTime(unsigned char index);main.c: 423: {;main.c: 424:     int time;
      +                          ;main.c: 428:     } shortInt;;main.c: 430:     shortInt.Val = dataFromGateway[index + 3]
      +                           & 0x7F;
  4712  0CE8  0824               	movf	GetTime@index,w
  4713  0CE9  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4714  0CEA  0084               	movwf	4
  4715  0CEB  307F               	movlw	127
  4716  0CEC  1383               	bcf	3,7	;select IRP bank1
  4717  0CED  0500               	andwf	0,w
  4718  0CEE  00A2               	movwf	??_GetTime
  4719  0CEF  0825               	movf	GetTime@shortInt,w
  4720  0CF0  0622               	xorwf	??_GetTime,w
  4721  0CF1  3980               	andlw	-128
  4722  0CF2  0622               	xorwf	??_GetTime,w
  4723  0CF3  00A5               	movwf	GetTime@shortInt
  4724  0CF4                     l3008:	
  4725                           
  4726                           ;main.c: 431:     time = shortInt.Val;
  4727  0CF4  0825               	movf	GetTime@shortInt,w
  4728  0CF5  397F               	andlw	127
  4729  0CF6  00A2               	movwf	??_GetTime
  4730  0CF7  01A3               	clrf	??_GetTime+1
  4731  0CF8  0822               	movf	??_GetTime,w
  4732  0CF9  00A6               	movwf	GetTime@time
  4733  0CFA  0823               	movf	??_GetTime+1,w
  4734  0CFB  00A7               	movwf	GetTime@time+1
  4735  0CFC                     l3010:	
  4736                           
  4737                           ;main.c: 432:     time = (time << 7) & 0x80;
  4738  0CFC  0827               	movf	GetTime@time+1,w
  4739  0CFD  00A3               	movwf	??_GetTime+1
  4740  0CFE  0826               	movf	GetTime@time,w
  4741  0CFF  00A2               	movwf	??_GetTime
  4742  0D00  3007               	movlw	7
  4743  0D01  00FF               	movwf	btemp+1
  4744  0D02                     u3245:	
  4745  0D02  1003               	clrc
  4746  0D03  0DA2               	rlf	??_GetTime,f
  4747  0D04  0DA3               	rlf	??_GetTime+1,f
  4748  0D05  0BFF               	decfsz	btemp+1,f
  4749  0D06  2D02               	goto	u3245
  4750  0D07  3080               	movlw	128
  4751  0D08  0522               	andwf	??_GetTime,w
  4752  0D09  00A6               	movwf	GetTime@time
  4753  0D0A  3000               	movlw	0
  4754  0D0B  0523               	andwf	??_GetTime+1,w
  4755  0D0C  00A7               	movwf	GetTime@time+1
  4756  0D0D                     l3012:	
  4757                           
  4758                           ;main.c: 434:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4759  0D0D  0824               	movf	GetTime@index,w
  4760  0D0E  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4761  0D0F  0084               	movwf	4
  4762  0D10  307F               	movlw	127
  4763  0D11  0500               	andwf	0,w
  4764  0D12  00A2               	movwf	??_GetTime
  4765  0D13  0825               	movf	GetTime@shortInt,w
  4766  0D14  0622               	xorwf	??_GetTime,w
  4767  0D15  3980               	andlw	-128
  4768  0D16  0622               	xorwf	??_GetTime,w
  4769  0D17  00A5               	movwf	GetTime@shortInt
  4770  0D18                     l3014:	
  4771                           
  4772                           ;main.c: 435:     time = time | shortInt.Val;
  4773  0D18  0825               	movf	GetTime@shortInt,w
  4774  0D19  397F               	andlw	127
  4775  0D1A  00A2               	movwf	??_GetTime
  4776  0D1B  0826               	movf	GetTime@time,w
  4777  0D1C  0422               	iorwf	??_GetTime,w
  4778  0D1D  00A6               	movwf	GetTime@time
  4779  0D1E  0827               	movf	GetTime@time+1,w
  4780  0D1F  00A7               	movwf	GetTime@time+1
  4781  0D20                     l3016:	
  4782                           
  4783                           ;main.c: 437:     return time;
  4784  0D20  0827               	movf	GetTime@time+1,w
  4785  0D21  00A1               	movwf	?_GetTime+1
  4786  0D22  0826               	movf	GetTime@time,w
  4787  0D23  00A0               	movwf	?_GetTime
  4788  0D24                     l301:	
  4789  0D24  0008               	return
  4790  0D25                     __end_of_GetTime:	
  4791                           
  4792                           	psect	text15
  4793  0E43                     __ptext15:	
  4794 ;; *************** function _GetDigits *****************
  4795 ;; Defined at:
  4796 ;;		line 440 in file "main.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  Time            2   16[BANK0 ] int 
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;		None
  4801 ;; Return value:  Size  Location     Type
  4802 ;;                  1    wreg      void 
  4803 ;; Registers used:
  4804 ;;		wreg, status,2, status,0, pclath, cstack
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4810 ;;      Params:         0       2       0       0       0
  4811 ;;      Locals:         0       2       0       0       0
  4812 ;;      Temps:          0       3       0       0       0
  4813 ;;      Totals:         0       7       0       0       0
  4814 ;;Total ram usage:        7 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    3
  4817 ;; This function calls:
  4818 ;;		___awdiv
  4819 ;;		___awmod
  4820 ;; This function is called by:
  4821 ;;		_main
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           
  4826                           ;psect for function _GetDigits
  4827  0E43                     _GetDigits:	
  4828  0E43                     l3020:	
  4829                           ;incstack = 0
  4830                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  4831                           
  4832                           
  4833                           ;main.c: 440: void GetDigits(int Time);main.c: 441: {;main.c: 442:     countdown = Time;
  4834  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  4835  0E44  1303               	bcf	3,6	;RP1=0, select bank0
  4836  0E45  0830               	movf	GetDigits@Time,w
  4837  0E46  00B2               	movwf	??_GetDigits
  4838  0E47  0832               	movf	??_GetDigits,w
  4839  0E48  00DA               	movwf	_countdown
  4840  0E49                     l3022:	
  4841                           
  4842                           ;main.c: 443:     centinaia = countdown / 100;
  4843  0E49  3064               	movlw	100
  4844  0E4A  00A7               	movwf	___awdiv@divisor
  4845  0E4B  3000               	movlw	0
  4846  0E4C  00A8               	movwf	___awdiv@divisor+1
  4847  0E4D  085A               	movf	_countdown,w
  4848  0E4E  00B2               	movwf	??_GetDigits
  4849  0E4F  01B3               	clrf	??_GetDigits+1
  4850  0E50  0832               	movf	??_GetDigits,w
  4851  0E51  00A9               	movwf	___awdiv@dividend
  4852  0E52  0833               	movf	??_GetDigits+1,w
  4853  0E53  00AA               	movwf	___awdiv@dividend+1
  4854  0E54  120A  158A  25DA  120A  158A  	fcall	___awdiv
  4855  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  4856  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  4857  0E5B  0827               	movf	?___awdiv,w
  4858  0E5C  00B4               	movwf	??_GetDigits+2
  4859  0E5D  0834               	movf	??_GetDigits+2,w
  4860  0E5E  00DD               	movwf	_centinaia
  4861  0E5F                     l3024:	
  4862                           
  4863                           ;main.c: 444:     decine = (countdown % 100) / 10;
  4864  0E5F  300A               	movlw	10
  4865  0E60  00A7               	movwf	___awdiv@divisor
  4866  0E61  3000               	movlw	0
  4867  0E62  00A8               	movwf	___awdiv@divisor+1
  4868  0E63  085A               	movf	_countdown,w
  4869  0E64  00B2               	movwf	??_GetDigits
  4870  0E65  01B3               	clrf	??_GetDigits+1
  4871  0E66  0832               	movf	??_GetDigits,w
  4872  0E67  00A2               	movwf	___awmod@dividend
  4873  0E68  0833               	movf	??_GetDigits+1,w
  4874  0E69  00A3               	movwf	___awmod@dividend+1
  4875  0E6A  3064               	movlw	100
  4876  0E6B  00A0               	movwf	___awmod@divisor
  4877  0E6C  3000               	movlw	0
  4878  0E6D  00A1               	movwf	___awmod@divisor+1
  4879  0E6E  120A  158A  257F  120A  158A  	fcall	___awmod
  4880  0E73  1283               	bcf	3,5	;RP0=0, select bank0
  4881  0E74  1303               	bcf	3,6	;RP1=0, select bank0
  4882  0E75  0821               	movf	?___awmod+1,w
  4883  0E76  00AA               	movwf	___awdiv@dividend+1
  4884  0E77  0820               	movf	?___awmod,w
  4885  0E78  00A9               	movwf	___awdiv@dividend
  4886  0E79  120A  158A  25DA  120A  158A  	fcall	___awdiv
  4887  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  4888  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  4889  0E80  0827               	movf	?___awdiv,w
  4890  0E81  00B4               	movwf	??_GetDigits+2
  4891  0E82  0834               	movf	??_GetDigits+2,w
  4892  0E83  00DE               	movwf	_decine
  4893  0E84                     l3026:	
  4894                           
  4895                           ;main.c: 445:     unita = (countdown % 100) % 10;
  4896  0E84  085A               	movf	_countdown,w
  4897  0E85  00B2               	movwf	??_GetDigits
  4898  0E86  01B3               	clrf	??_GetDigits+1
  4899  0E87  0832               	movf	??_GetDigits,w
  4900  0E88  00A2               	movwf	___awmod@dividend
  4901  0E89  0833               	movf	??_GetDigits+1,w
  4902  0E8A  00A3               	movwf	___awmod@dividend+1
  4903  0E8B  3064               	movlw	100
  4904  0E8C  00A0               	movwf	___awmod@divisor
  4905  0E8D  3000               	movlw	0
  4906  0E8E  00A1               	movwf	___awmod@divisor+1
  4907  0E8F  120A  158A  257F  120A  158A  	fcall	___awmod
  4908  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  4909  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  4910  0E96  0821               	movf	?___awmod+1,w
  4911  0E97  00B6               	movwf	_GetDigits$1151+1
  4912  0E98  0820               	movf	?___awmod,w
  4913  0E99  00B5               	movwf	_GetDigits$1151
  4914  0E9A                     l3028:	
  4915                           
  4916                           ;main.c: 445:     unita = (countdown % 100) % 10;
  4917  0E9A  300A               	movlw	10
  4918  0E9B  00A0               	movwf	___awmod@divisor
  4919  0E9C  3000               	movlw	0
  4920  0E9D  00A1               	movwf	___awmod@divisor+1
  4921  0E9E  0836               	movf	_GetDigits$1151+1,w
  4922  0E9F  00A3               	movwf	___awmod@dividend+1
  4923  0EA0  0835               	movf	_GetDigits$1151,w
  4924  0EA1  00A2               	movwf	___awmod@dividend
  4925  0EA2  120A  158A  257F  120A  158A  	fcall	___awmod
  4926  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  4927  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  4928  0EA9  0820               	movf	?___awmod,w
  4929  0EAA  00B2               	movwf	??_GetDigits
  4930  0EAB  0832               	movf	??_GetDigits,w
  4931  0EAC  00DF               	movwf	_unita
  4932  0EAD                     l304:	
  4933  0EAD  0008               	return
  4934  0EAE                     __end_of_GetDigits:	
  4935                           
  4936                           	psect	text16
  4937  0D7F                     __ptext16:	
  4938 ;; *************** function ___awmod *****************
  4939 ;; Defined at:
  4940 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  divisor         2    0[BANK0 ] int 
  4943 ;;  dividend        2    2[BANK0 ] int 
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;  sign            1    6[BANK0 ] unsigned char 
  4946 ;;  counter         1    5[BANK0 ] unsigned char 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;                  2    0[BANK0 ] int 
  4949 ;; Registers used:
  4950 ;;		wreg, status,2, status,0
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4956 ;;      Params:         0       4       0       0       0
  4957 ;;      Locals:         0       2       0       0       0
  4958 ;;      Temps:          0       1       0       0       0
  4959 ;;      Totals:         0       7       0       0       0
  4960 ;;Total ram usage:        7 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; Hardware stack levels required when called:    2
  4963 ;; This function calls:
  4964 ;;		Nothing
  4965 ;; This function is called by:
  4966 ;;		_main
  4967 ;;		_GetDigits
  4968 ;;		_intToString
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972                           
  4973                           ;psect for function ___awmod
  4974  0D7F                     ___awmod:	
  4975  0D7F                     l2860:	
  4976                           ;incstack = 0
  4977                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4978                           
  4979  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  4980  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  4981  0D81  01A6               	clrf	___awmod@sign
  4982  0D82                     l2862:	
  4983  0D82  1FA3               	btfss	___awmod@dividend+1,7
  4984  0D83  2D85               	goto	u3031
  4985  0D84  2D86               	goto	u3030
  4986  0D85                     u3031:	
  4987  0D85  2D8D               	goto	l2868
  4988  0D86                     u3030:	
  4989  0D86                     l2864:	
  4990  0D86  09A2               	comf	___awmod@dividend,f
  4991  0D87  09A3               	comf	___awmod@dividend+1,f
  4992  0D88  0AA2               	incf	___awmod@dividend,f
  4993  0D89  1903               	skipnz
  4994  0D8A  0AA3               	incf	___awmod@dividend+1,f
  4995  0D8B                     l2866:	
  4996  0D8B  01A6               	clrf	___awmod@sign
  4997  0D8C  0AA6               	incf	___awmod@sign,f
  4998  0D8D                     l2868:	
  4999  0D8D  1FA1               	btfss	___awmod@divisor+1,7
  5000  0D8E  2D90               	goto	u3041
  5001  0D8F  2D91               	goto	u3040
  5002  0D90                     u3041:	
  5003  0D90  2D96               	goto	l2872
  5004  0D91                     u3040:	
  5005  0D91                     l2870:	
  5006  0D91  09A0               	comf	___awmod@divisor,f
  5007  0D92  09A1               	comf	___awmod@divisor+1,f
  5008  0D93  0AA0               	incf	___awmod@divisor,f
  5009  0D94  1903               	skipnz
  5010  0D95  0AA1               	incf	___awmod@divisor+1,f
  5011  0D96                     l2872:	
  5012  0D96  0820               	movf	___awmod@divisor,w
  5013  0D97  0421               	iorwf	___awmod@divisor+1,w
  5014  0D98  1903               	btfsc	3,2
  5015  0D99  2D9B               	goto	u3051
  5016  0D9A  2D9C               	goto	u3050
  5017  0D9B                     u3051:	
  5018  0D9B  2DCB               	goto	l2890
  5019  0D9C                     u3050:	
  5020  0D9C                     l2874:	
  5021  0D9C  01A5               	clrf	___awmod@counter
  5022  0D9D  0AA5               	incf	___awmod@counter,f
  5023  0D9E  2DAA               	goto	l2880
  5024  0D9F                     l2876:	
  5025  0D9F  3001               	movlw	1
  5026  0DA0                     u3065:	
  5027  0DA0  1003               	clrc
  5028  0DA1  0DA0               	rlf	___awmod@divisor,f
  5029  0DA2  0DA1               	rlf	___awmod@divisor+1,f
  5030  0DA3  3EFF               	addlw	-1
  5031  0DA4  1D03               	skipz
  5032  0DA5  2DA0               	goto	u3065
  5033  0DA6                     l2878:	
  5034  0DA6  3001               	movlw	1
  5035  0DA7  00A4               	movwf	??___awmod
  5036  0DA8  0824               	movf	??___awmod,w
  5037  0DA9  07A5               	addwf	___awmod@counter,f
  5038  0DAA                     l2880:	
  5039  0DAA  1FA1               	btfss	___awmod@divisor+1,7
  5040  0DAB  2DAD               	goto	u3071
  5041  0DAC  2DAE               	goto	u3070
  5042  0DAD                     u3071:	
  5043  0DAD  2D9F               	goto	l2876
  5044  0DAE                     u3070:	
  5045  0DAE                     l2882:	
  5046  0DAE  0821               	movf	___awmod@divisor+1,w
  5047  0DAF  0223               	subwf	___awmod@dividend+1,w
  5048  0DB0  1D03               	skipz
  5049  0DB1  2DB4               	goto	u3085
  5050  0DB2  0820               	movf	___awmod@divisor,w
  5051  0DB3  0222               	subwf	___awmod@dividend,w
  5052  0DB4                     u3085:	
  5053  0DB4  1C03               	skipc
  5054  0DB5  2DB7               	goto	u3081
  5055  0DB6  2DB8               	goto	u3080
  5056  0DB7                     u3081:	
  5057  0DB7  2DBE               	goto	l2886
  5058  0DB8                     u3080:	
  5059  0DB8                     l2884:	
  5060  0DB8  0820               	movf	___awmod@divisor,w
  5061  0DB9  02A2               	subwf	___awmod@dividend,f
  5062  0DBA  0821               	movf	___awmod@divisor+1,w
  5063  0DBB  1C03               	skipc
  5064  0DBC  03A3               	decf	___awmod@dividend+1,f
  5065  0DBD  02A3               	subwf	___awmod@dividend+1,f
  5066  0DBE                     l2886:	
  5067  0DBE  3001               	movlw	1
  5068  0DBF                     u3095:	
  5069  0DBF  1003               	clrc
  5070  0DC0  0CA1               	rrf	___awmod@divisor+1,f
  5071  0DC1  0CA0               	rrf	___awmod@divisor,f
  5072  0DC2  3EFF               	addlw	-1
  5073  0DC3  1D03               	skipz
  5074  0DC4  2DBF               	goto	u3095
  5075  0DC5                     l2888:	
  5076  0DC5  3001               	movlw	1
  5077  0DC6  02A5               	subwf	___awmod@counter,f
  5078  0DC7  1D03               	btfss	3,2
  5079  0DC8  2DCA               	goto	u3101
  5080  0DC9  2DCB               	goto	u3100
  5081  0DCA                     u3101:	
  5082  0DCA  2DAE               	goto	l2882
  5083  0DCB                     u3100:	
  5084  0DCB                     l2890:	
  5085  0DCB  0826               	movf	___awmod@sign,w
  5086  0DCC  1903               	btfsc	3,2
  5087  0DCD  2DCF               	goto	u3111
  5088  0DCE  2DD0               	goto	u3110
  5089  0DCF                     u3111:	
  5090  0DCF  2DD5               	goto	l2894
  5091  0DD0                     u3110:	
  5092  0DD0                     l2892:	
  5093  0DD0  09A2               	comf	___awmod@dividend,f
  5094  0DD1  09A3               	comf	___awmod@dividend+1,f
  5095  0DD2  0AA2               	incf	___awmod@dividend,f
  5096  0DD3  1903               	skipnz
  5097  0DD4  0AA3               	incf	___awmod@dividend+1,f
  5098  0DD5                     l2894:	
  5099  0DD5  0823               	movf	___awmod@dividend+1,w
  5100  0DD6  00A1               	movwf	?___awmod+1
  5101  0DD7  0822               	movf	___awmod@dividend,w
  5102  0DD8  00A0               	movwf	?___awmod
  5103  0DD9                     l608:	
  5104  0DD9  0008               	return
  5105  0DDA                     __end_of___awmod:	
  5106                           
  5107                           	psect	text17
  5108  0DDA                     __ptext17:	
  5109 ;; *************** function ___awdiv *****************
  5110 ;; Defined at:
  5111 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;  divisor         2    7[BANK0 ] int 
  5114 ;;  dividend        2    9[BANK0 ] int 
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;  quotient        2   14[BANK0 ] int 
  5117 ;;  sign            1   13[BANK0 ] unsigned char 
  5118 ;;  counter         1   12[BANK0 ] unsigned char 
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  2    7[BANK0 ] int 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2, status,0
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5128 ;;      Params:         0       4       0       0       0
  5129 ;;      Locals:         0       4       0       0       0
  5130 ;;      Temps:          0       1       0       0       0
  5131 ;;      Totals:         0       9       0       0       0
  5132 ;;Total ram usage:        9 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    2
  5135 ;; This function calls:
  5136 ;;		Nothing
  5137 ;; This function is called by:
  5138 ;;		_map
  5139 ;;		_GetDigits
  5140 ;;		_intToString
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           
  5145                           ;psect for function ___awdiv
  5146  0DDA                     ___awdiv:	
  5147  0DDA                     l2816:	
  5148                           ;incstack = 0
  5149                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5150                           
  5151  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  5152  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  5153  0DDC  01AD               	clrf	___awdiv@sign
  5154  0DDD                     l2818:	
  5155  0DDD  1FA8               	btfss	___awdiv@divisor+1,7
  5156  0DDE  2DE0               	goto	u2931
  5157  0DDF  2DE1               	goto	u2930
  5158  0DE0                     u2931:	
  5159  0DE0  2DE8               	goto	l2824
  5160  0DE1                     u2930:	
  5161  0DE1                     l2820:	
  5162  0DE1  09A7               	comf	___awdiv@divisor,f
  5163  0DE2  09A8               	comf	___awdiv@divisor+1,f
  5164  0DE3  0AA7               	incf	___awdiv@divisor,f
  5165  0DE4  1903               	skipnz
  5166  0DE5  0AA8               	incf	___awdiv@divisor+1,f
  5167  0DE6                     l2822:	
  5168  0DE6  01AD               	clrf	___awdiv@sign
  5169  0DE7  0AAD               	incf	___awdiv@sign,f
  5170  0DE8                     l2824:	
  5171  0DE8  1FAA               	btfss	___awdiv@dividend+1,7
  5172  0DE9  2DEB               	goto	u2941
  5173  0DEA  2DEC               	goto	u2940
  5174  0DEB                     u2941:	
  5175  0DEB  2DF5               	goto	l2830
  5176  0DEC                     u2940:	
  5177  0DEC                     l2826:	
  5178  0DEC  09A9               	comf	___awdiv@dividend,f
  5179  0DED  09AA               	comf	___awdiv@dividend+1,f
  5180  0DEE  0AA9               	incf	___awdiv@dividend,f
  5181  0DEF  1903               	skipnz
  5182  0DF0  0AAA               	incf	___awdiv@dividend+1,f
  5183  0DF1                     l2828:	
  5184  0DF1  3001               	movlw	1
  5185  0DF2  00AB               	movwf	??___awdiv
  5186  0DF3  082B               	movf	??___awdiv,w
  5187  0DF4  06AD               	xorwf	___awdiv@sign,f
  5188  0DF5                     l2830:	
  5189  0DF5  01AE               	clrf	___awdiv@quotient
  5190  0DF6  01AF               	clrf	___awdiv@quotient+1
  5191  0DF7                     l2832:	
  5192  0DF7  0827               	movf	___awdiv@divisor,w
  5193  0DF8  0428               	iorwf	___awdiv@divisor+1,w
  5194  0DF9  1903               	btfsc	3,2
  5195  0DFA  2DFC               	goto	u2951
  5196  0DFB  2DFD               	goto	u2950
  5197  0DFC                     u2951:	
  5198  0DFC  2E34               	goto	l2852
  5199  0DFD                     u2950:	
  5200  0DFD                     l2834:	
  5201  0DFD  01AC               	clrf	___awdiv@counter
  5202  0DFE  0AAC               	incf	___awdiv@counter,f
  5203  0DFF  2E0B               	goto	l2840
  5204  0E00                     l2836:	
  5205  0E00  3001               	movlw	1
  5206  0E01                     u2965:	
  5207  0E01  1003               	clrc
  5208  0E02  0DA7               	rlf	___awdiv@divisor,f
  5209  0E03  0DA8               	rlf	___awdiv@divisor+1,f
  5210  0E04  3EFF               	addlw	-1
  5211  0E05  1D03               	skipz
  5212  0E06  2E01               	goto	u2965
  5213  0E07                     l2838:	
  5214  0E07  3001               	movlw	1
  5215  0E08  00AB               	movwf	??___awdiv
  5216  0E09  082B               	movf	??___awdiv,w
  5217  0E0A  07AC               	addwf	___awdiv@counter,f
  5218  0E0B                     l2840:	
  5219  0E0B  1FA8               	btfss	___awdiv@divisor+1,7
  5220  0E0C  2E0E               	goto	u2971
  5221  0E0D  2E0F               	goto	u2970
  5222  0E0E                     u2971:	
  5223  0E0E  2E00               	goto	l2836
  5224  0E0F                     u2970:	
  5225  0E0F                     l2842:	
  5226  0E0F  3001               	movlw	1
  5227  0E10                     u2985:	
  5228  0E10  1003               	clrc
  5229  0E11  0DAE               	rlf	___awdiv@quotient,f
  5230  0E12  0DAF               	rlf	___awdiv@quotient+1,f
  5231  0E13  3EFF               	addlw	-1
  5232  0E14  1D03               	skipz
  5233  0E15  2E10               	goto	u2985
  5234  0E16  0828               	movf	___awdiv@divisor+1,w
  5235  0E17  022A               	subwf	___awdiv@dividend+1,w
  5236  0E18  1D03               	skipz
  5237  0E19  2E1C               	goto	u2995
  5238  0E1A  0827               	movf	___awdiv@divisor,w
  5239  0E1B  0229               	subwf	___awdiv@dividend,w
  5240  0E1C                     u2995:	
  5241  0E1C  1C03               	skipc
  5242  0E1D  2E1F               	goto	u2991
  5243  0E1E  2E20               	goto	u2990
  5244  0E1F                     u2991:	
  5245  0E1F  2E27               	goto	l2848
  5246  0E20                     u2990:	
  5247  0E20                     l2844:	
  5248  0E20  0827               	movf	___awdiv@divisor,w
  5249  0E21  02A9               	subwf	___awdiv@dividend,f
  5250  0E22  0828               	movf	___awdiv@divisor+1,w
  5251  0E23  1C03               	skipc
  5252  0E24  03AA               	decf	___awdiv@dividend+1,f
  5253  0E25  02AA               	subwf	___awdiv@dividend+1,f
  5254  0E26                     l2846:	
  5255  0E26  142E               	bsf	___awdiv@quotient,0
  5256  0E27                     l2848:	
  5257  0E27  3001               	movlw	1
  5258  0E28                     u3005:	
  5259  0E28  1003               	clrc
  5260  0E29  0CA8               	rrf	___awdiv@divisor+1,f
  5261  0E2A  0CA7               	rrf	___awdiv@divisor,f
  5262  0E2B  3EFF               	addlw	-1
  5263  0E2C  1D03               	skipz
  5264  0E2D  2E28               	goto	u3005
  5265  0E2E                     l2850:	
  5266  0E2E  3001               	movlw	1
  5267  0E2F  02AC               	subwf	___awdiv@counter,f
  5268  0E30  1D03               	btfss	3,2
  5269  0E31  2E33               	goto	u3011
  5270  0E32  2E34               	goto	u3010
  5271  0E33                     u3011:	
  5272  0E33  2E0F               	goto	l2842
  5273  0E34                     u3010:	
  5274  0E34                     l2852:	
  5275  0E34  082D               	movf	___awdiv@sign,w
  5276  0E35  1903               	btfsc	3,2
  5277  0E36  2E38               	goto	u3021
  5278  0E37  2E39               	goto	u3020
  5279  0E38                     u3021:	
  5280  0E38  2E3E               	goto	l2856
  5281  0E39                     u3020:	
  5282  0E39                     l2854:	
  5283  0E39  09AE               	comf	___awdiv@quotient,f
  5284  0E3A  09AF               	comf	___awdiv@quotient+1,f
  5285  0E3B  0AAE               	incf	___awdiv@quotient,f
  5286  0E3C  1903               	skipnz
  5287  0E3D  0AAF               	incf	___awdiv@quotient+1,f
  5288  0E3E                     l2856:	
  5289  0E3E  082F               	movf	___awdiv@quotient+1,w
  5290  0E3F  00A8               	movwf	?___awdiv+1
  5291  0E40  082E               	movf	___awdiv@quotient,w
  5292  0E41  00A7               	movwf	?___awdiv
  5293  0E42                     l595:	
  5294  0E42  0008               	return
  5295  0E43                     __end_of___awdiv:	
  5296                           
  5297                           	psect	text18
  5298  0BCA                     __ptext18:	
  5299 ;; *************** function _ADC_Read *****************
  5300 ;; Defined at:
  5301 ;;		line 364 in file "main.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;  canale          1    wreg     unsigned char 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  canale          1    3[BANK0 ] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  2    0[BANK0 ] int 
  5308 ;; Registers used:
  5309 ;;		wreg, status,2, status,0
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5315 ;;      Params:         0       2       0       0       0
  5316 ;;      Locals:         0       1       0       0       0
  5317 ;;      Temps:          0       1       0       0       0
  5318 ;;      Totals:         0       4       0       0       0
  5319 ;;Total ram usage:        4 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    2
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_main
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           
  5330                           ;psect for function _ADC_Read
  5331  0BCA                     _ADC_Read:	
  5332                           
  5333                           ;incstack = 0
  5334                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5335                           ;ADC_Read@canale stored from wreg
  5336  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
  5337  0BCB  1303               	bcf	3,6	;RP1=0, select bank0
  5338  0BCC  00A3               	movwf	ADC_Read@canale
  5339  0BCD                     l3050:	
  5340                           
  5341                           ;main.c: 364: int ADC_Read(char canale);main.c: 365: {;main.c: 366:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  5342  0BCD  0823               	movf	ADC_Read@canale,w
  5343  0BCE  00A2               	movwf	??_ADC_Read
  5344  0BCF  3002               	movlw	2
  5345  0BD0                     u3265:	
  5346  0BD0  1003               	clrc
  5347  0BD1  0DA2               	rlf	??_ADC_Read,f
  5348  0BD2  3EFF               	addlw	-1
  5349  0BD3  1D03               	skipz
  5350  0BD4  2BD0               	goto	u3265
  5351  0BD5  1003               	clrc
  5352  0BD6  0D22               	rlf	??_ADC_Read,w
  5353  0BD7  3801               	iorlw	1
  5354  0BD8  009F               	movwf	31	;volatile
  5355  0BD9                     l3052:	
  5356                           
  5357                           ;main.c: 367:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5358  0BD9  3004               	movlw	4
  5359  0BDA  1283               	bcf	3,5	;RP0=0, select bank0
  5360  0BDB  1303               	bcf	3,6	;RP1=0, select bank0
  5361  0BDC  00A2               	movwf	??_ADC_Read
  5362  0BDD                     u3687:	
  5363  0BDD  0BA2               	decfsz	??_ADC_Read,f
  5364  0BDE  2BDD               	goto	u3687
  5365  0BDF  0000               	nop
  5366  0BE0                     l3054:	
  5367                           
  5368                           ;main.c: 368:     GO_nDONE = 1;
  5369  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  5370  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  5371  0BE2  151F               	bsf	31,2	;volatile
  5372  0BE3                     l269:	
  5373                           ;main.c: 370:         ;
  5374                           
  5375                           
  5376                           ;main.c: 369:     while (GO_nDONE)
  5377  0BE3  191F               	btfsc	31,2	;volatile
  5378  0BE4  2BE6               	goto	u3271
  5379  0BE5  2BE7               	goto	u3270
  5380  0BE6                     u3271:	
  5381  0BE6  2BE3               	goto	l269
  5382  0BE7                     u3270:	
  5383  0BE7                     l3056:	
  5384                           
  5385                           ;main.c: 371:     return ADRESL + (ADRESH << 8);
  5386  0BE7  081E               	movf	30,w	;volatile
  5387  0BE8  00A1               	movwf	?_ADC_Read+1
  5388  0BE9  1683               	bsf	3,5	;RP0=1, select bank1
  5389  0BEA  1303               	bcf	3,6	;RP1=0, select bank1
  5390  0BEB  081E               	movf	30,w	;volatile
  5391  0BEC  1283               	bcf	3,5	;RP0=0, select bank0
  5392  0BED  1303               	bcf	3,6	;RP1=0, select bank0
  5393  0BEE  00A0               	movwf	?_ADC_Read
  5394  0BEF                     l272:	
  5395  0BEF  0008               	return
  5396  0BF0                     __end_of_ADC_Read:	
  5397                           
  5398                           	psect	text19
  5399  0D25                     __ptext19:	
  5400 ;; *************** function _ISR *****************
  5401 ;; Defined at:
  5402 ;;		line 566 in file "main.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;		None
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;		None
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  1    wreg      void 
  5409 ;; Registers used:
  5410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5416 ;;      Params:         0       0       0       0       0
  5417 ;;      Locals:         0       0       0       0       0
  5418 ;;      Temps:          4       0       0       0       0
  5419 ;;      Totals:         4       0       0       0       0
  5420 ;;Total ram usage:        4 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    1
  5423 ;; This function calls:
  5424 ;;		_UART_Read
  5425 ;;		_conteggioVeicoli
  5426 ;; This function is called by:
  5427 ;;		Interrupt level 1
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           
  5432                           ;psect for function _ISR
  5433  0D25                     _ISR:	
  5434  0D25                     i1l2554:	
  5435                           
  5436                           ;main.c: 569:     if (RCIF && readGateway.Bit == 0)
  5437  0D25  1283               	bcf	3,5	;RP0=0, select bank0
  5438  0D26  1303               	bcf	3,6	;RP1=0, select bank0
  5439  0D27  1E8C               	btfss	12,5	;volatile
  5440  0D28  2D2A               	goto	u257_21
  5441  0D29  2D2B               	goto	u257_20
  5442  0D2A                     u257_21:	
  5443  0D2A  2D34               	goto	i1l2562
  5444  0D2B                     u257_20:	
  5445  0D2B                     i1l2556:	
  5446  0D2B  1862               	btfsc	_readGateway,0
  5447  0D2C  2D2E               	goto	u258_21
  5448  0D2D  2D2F               	goto	u258_20
  5449  0D2E                     u258_21:	
  5450  0D2E  2D34               	goto	i1l2562
  5451  0D2F                     u258_20:	
  5452  0D2F                     i1l2558:	
  5453                           
  5454                           ;main.c: 570:     {;main.c: 571:         readGateway.Bit = 1;
  5455  0D2F  1462               	bsf	_readGateway,0
  5456                           
  5457                           ;main.c: 572:         readGatewayDone.Bit = 0;
  5458  0D30  1063               	bcf	_readGatewayDone,0
  5459                           
  5460                           ;main.c: 573:         readGatewayDone.Timeout = 0;
  5461  0D31  10E3               	bcf	_readGatewayDone,1
  5462  0D32                     i1l2560:	
  5463                           
  5464                           ;main.c: 574:         dataFromGatewayIndex = 0;
  5465  0D32  01D9               	clrf	_dataFromGatewayIndex
  5466                           
  5467                           ;main.c: 575:         timerReadFromGateway = 0;
  5468  0D33  01D8               	clrf	_timerReadFromGateway
  5469  0D34                     i1l2562:	
  5470                           
  5471                           ;main.c: 577:     if (RCIF && readGateway.Bit == 1)
  5472  0D34  1E8C               	btfss	12,5	;volatile
  5473  0D35  2D37               	goto	u259_21
  5474  0D36  2D38               	goto	u259_20
  5475  0D37                     u259_21:	
  5476  0D37  2D4F               	goto	i1l2572
  5477  0D38                     u259_20:	
  5478  0D38                     i1l2564:	
  5479  0D38  1C62               	btfss	_readGateway,0
  5480  0D39  2D3B               	goto	u260_21
  5481  0D3A  2D3C               	goto	u260_20
  5482  0D3B                     u260_21:	
  5483  0D3B  2D4F               	goto	i1l2572
  5484  0D3C                     u260_20:	
  5485  0D3C                     i1l2566:	
  5486                           
  5487                           ;main.c: 578:     {;main.c: 579:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  5488  0D3C  120A  158A  2364  120A  158A  	fcall	_UART_Read
  5489  0D41  00F6               	movwf	??_ISR
  5490  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  5491  0D43  1303               	bcf	3,6	;RP1=0, select bank0
  5492  0D44  0859               	movf	_dataFromGatewayIndex,w
  5493  0D45  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  5494  0D46  0084               	movwf	4
  5495  0D47  0876               	movf	??_ISR,w
  5496  0D48  1383               	bcf	3,7	;select IRP bank1
  5497  0D49  0080               	movwf	0
  5498  0D4A                     i1l2568:	
  5499                           
  5500                           ;main.c: 580:         dataFromGatewayIndex++;
  5501  0D4A  3001               	movlw	1
  5502  0D4B  00F6               	movwf	??_ISR
  5503  0D4C  0876               	movf	??_ISR,w
  5504  0D4D  07D9               	addwf	_dataFromGatewayIndex,f
  5505  0D4E                     i1l2570:	
  5506                           
  5507                           ;main.c: 581:         timerReadFromGateway = 0;
  5508  0D4E  01D8               	clrf	_timerReadFromGateway
  5509  0D4F                     i1l2572:	
  5510                           
  5511                           ;main.c: 586:     if (TMR0IF)
  5512  0D4F  1D0B               	btfss	11,2	;volatile
  5513  0D50  2D52               	goto	u261_21
  5514  0D51  2D53               	goto	u261_20
  5515  0D52                     u261_21:	
  5516  0D52  2D5D               	goto	i1l2580
  5517  0D53                     u261_20:	
  5518  0D53                     i1l2574:	
  5519                           
  5520                           ;main.c: 587:     {;main.c: 588:         TMR0IF = 0;
  5521  0D53  110B               	bcf	11,2	;volatile
  5522  0D54                     i1l2576:	
  5523                           
  5524                           ;main.c: 589:         conteggioVeicoli();
  5525  0D54  120A  118A  2597  120A  158A  	fcall	_conteggioVeicoli
  5526  0D59                     i1l2578:	
  5527                           
  5528                           ;main.c: 590:         TMR0 = 6;
  5529  0D59  3006               	movlw	6
  5530  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  5531  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  5532  0D5C  0081               	movwf	1	;volatile
  5533  0D5D                     i1l2580:	
  5534                           
  5535                           ;main.c: 593:     if (TMR1IF)
  5536  0D5D  1C0C               	btfss	12,0	;volatile
  5537  0D5E  2D60               	goto	u262_21
  5538  0D5F  2D61               	goto	u262_20
  5539  0D60                     u262_21:	
  5540  0D60  2D76               	goto	i1l356
  5541  0D61                     u262_20:	
  5542  0D61                     i1l2582:	
  5543                           
  5544                           ;main.c: 594:     {;main.c: 595:         TMR1IF = 0;
  5545  0D61  100C               	bcf	12,0	;volatile
  5546  0D62                     i1l2584:	
  5547                           
  5548                           ;main.c: 596:         count_lux++;
  5549  0D62  3001               	movlw	1
  5550  0D63  00F6               	movwf	??_ISR
  5551  0D64  0876               	movf	??_ISR,w
  5552  0D65  07F4               	addwf	_count_lux,f
  5553  0D66                     i1l2586:	
  5554                           
  5555                           ;main.c: 598:         if (count_lux >= 20)
  5556  0D66  3014               	movlw	20
  5557  0D67  0274               	subwf	_count_lux,w
  5558  0D68  1C03               	skipc
  5559  0D69  2D6B               	goto	u263_21
  5560  0D6A  2D6C               	goto	u263_20
  5561  0D6B                     u263_21:	
  5562  0D6B  2D72               	goto	i1l2594
  5563  0D6C                     u263_20:	
  5564  0D6C                     i1l2588:	
  5565                           
  5566                           ;main.c: 599:         {;main.c: 600:             secondPassed.Bit = 1;
  5567  0D6C  1461               	bsf	_secondPassed,0
  5568  0D6D                     i1l2590:	
  5569                           
  5570                           ;main.c: 601:             count_lux = 0;
  5571  0D6D  01F4               	clrf	_count_lux
  5572  0D6E                     i1l2592:	
  5573                           
  5574                           ;main.c: 602:             timerReadFromGateway++;
  5575  0D6E  3001               	movlw	1
  5576  0D6F  00F6               	movwf	??_ISR
  5577  0D70  0876               	movf	??_ISR,w
  5578  0D71  07D8               	addwf	_timerReadFromGateway,f
  5579  0D72                     i1l2594:	
  5580                           
  5581                           ;main.c: 605:         TMR1H = 60;
  5582  0D72  303C               	movlw	60
  5583  0D73  008F               	movwf	15	;volatile
  5584  0D74                     i1l2596:	
  5585                           
  5586                           ;main.c: 606:         TMR1L = 176;
  5587  0D74  30B0               	movlw	176
  5588  0D75  008E               	movwf	14	;volatile
  5589  0D76                     i1l356:	
  5590  0D76  0879               	movf	??_ISR+3,w
  5591  0D77  008A               	movwf	10
  5592  0D78  0878               	movf	??_ISR+2,w
  5593  0D79  0084               	movwf	4
  5594  0D7A  0E77               	swapf	(??_ISR+1)^(0+4294967168),w
  5595  0D7B  0083               	movwf	3
  5596  0D7C  0EFE               	swapf	btemp,f
  5597  0D7D  0E7E               	swapf	btemp,w
  5598  0D7E  0009               	retfie
  5599  0D7F                     __end_of_ISR:	
  5600                           
  5601                           	psect	intentry
  5602  0004                     __pintentry:	
  5603                           ;incstack = 0
  5604                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5605                           
  5606  0004                     interrupt_function:	
  5607  007E                     saved_w	set	btemp
  5608  0004  00FE               	movwf	btemp
  5609  0005  0E03               	swapf	3,w
  5610  0006  00F7               	movwf	??_ISR+1
  5611  0007  0804               	movf	4,w
  5612  0008  00F8               	movwf	??_ISR+2
  5613  0009  080A               	movf	10,w
  5614  000A  00F9               	movwf	??_ISR+3
  5615  000B  120A  158A  2D25   	ljmp	_ISR
  5616                           
  5617                           	psect	text20
  5618  0597                     __ptext20:	
  5619 ;; *************** function _conteggioVeicoli *****************
  5620 ;; Defined at:
  5621 ;;		line 478 in file "main.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;		None
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;		None
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      void 
  5628 ;; Registers used:
  5629 ;;		wreg, status,2, status,0
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5635 ;;      Params:         0       0       0       0       0
  5636 ;;      Locals:         0       0       0       0       0
  5637 ;;      Temps:          1       0       0       0       0
  5638 ;;      Totals:         1       0       0       0       0
  5639 ;;Total ram usage:        1 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; This function calls:
  5642 ;;		Nothing
  5643 ;; This function is called by:
  5644 ;;		_ISR
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function _conteggioVeicoli
  5650  0597                     _conteggioVeicoli:	
  5651  0597                     i1l2208:	
  5652                           ;incstack = 0
  5653                           ; Regs used in _conteggioVeicoli: [wreg+status,2+status,0]
  5654                           
  5655                           
  5656                           ;main.c: 481:     if (!PORTBbits.RB3)
  5657  0597  1283               	bcf	3,5	;RP0=0, select bank0
  5658  0598  1303               	bcf	3,6	;RP1=0, select bank0
  5659  0599  1986               	btfsc	6,3	;volatile
  5660  059A  2D9C               	goto	u198_21
  5661  059B  2D9D               	goto	u198_20
  5662  059C                     u198_21:	
  5663  059C  2DA4               	goto	i1l322
  5664  059D                     u198_20:	
  5665  059D                     i1l2210:	
  5666                           
  5667                           ;main.c: 482:     {;main.c: 483:         count++;
  5668  059D  3001               	movlw	1
  5669  059E  07F0               	addwf	_count,f
  5670  059F  1803               	skipnc
  5671  05A0  0AF1               	incf	_count+1,f
  5672  05A1  3000               	movlw	0
  5673  05A2  07F1               	addwf	_count+1,f
  5674                           
  5675                           ;main.c: 484:     }
  5676  05A3  2DD1               	goto	i1l2226
  5677  05A4                     i1l322:	
  5678                           ;main.c: 485:     else if (PORTBbits.RB3)
  5679                           
  5680  05A4  1D86               	btfss	6,3	;volatile
  5681  05A5  2DA7               	goto	u199_21
  5682  05A6  2DA8               	goto	u199_20
  5683  05A7                     u199_21:	
  5684  05A7  2DD1               	goto	i1l2226
  5685  05A8                     u199_20:	
  5686  05A8                     i1l2212:	
  5687                           
  5688                           ;main.c: 486:     {;main.c: 487:         if (count >= 500)
  5689  05A8  3001               	movlw	1
  5690  05A9  0271               	subwf	_count+1,w
  5691  05AA  30F4               	movlw	244
  5692  05AB  1903               	skipnz
  5693  05AC  0270               	subwf	_count,w
  5694  05AD  1C03               	skipc
  5695  05AE  2DB0               	goto	u200_21
  5696  05AF  2DB1               	goto	u200_20
  5697  05B0                     u200_21:	
  5698  05B0  2DB5               	goto	i1l2216
  5699  05B1                     u200_20:	
  5700  05B1                     i1l2214:	
  5701                           
  5702                           ;main.c: 488:         {;main.c: 489:             motorcycle[0]++;
  5703  05B1  3001               	movlw	1
  5704  05B2  00F5               	movwf	??_conteggioVeicoli
  5705  05B3  0875               	movf	??_conteggioVeicoli,w
  5706  05B4  07D4               	addwf	_motorcycle,f
  5707  05B5                     i1l2216:	
  5708                           
  5709                           ;main.c: 491:         if (count >= 1500)
  5710  05B5  3005               	movlw	5
  5711  05B6  0271               	subwf	_count+1,w
  5712  05B7  30DC               	movlw	220
  5713  05B8  1903               	skipnz
  5714  05B9  0270               	subwf	_count,w
  5715  05BA  1C03               	skipc
  5716  05BB  2DBD               	goto	u201_21
  5717  05BC  2DBE               	goto	u201_20
  5718  05BD                     u201_21:	
  5719  05BD  2DC2               	goto	i1l2220
  5720  05BE                     u201_20:	
  5721  05BE                     i1l2218:	
  5722                           
  5723                           ;main.c: 492:         {;main.c: 493:             car[0]++;
  5724  05BE  3001               	movlw	1
  5725  05BF  00F5               	movwf	??_conteggioVeicoli
  5726  05C0  0875               	movf	??_conteggioVeicoli,w
  5727  05C1  07D0               	addwf	_car,f
  5728  05C2                     i1l2220:	
  5729                           
  5730                           ;main.c: 495:         if (count >= 3000)
  5731  05C2  300B               	movlw	11
  5732  05C3  0271               	subwf	_count+1,w
  5733  05C4  30B8               	movlw	184
  5734  05C5  1903               	skipnz
  5735  05C6  0270               	subwf	_count,w
  5736  05C7  1C03               	skipc
  5737  05C8  2DCA               	goto	u202_21
  5738  05C9  2DCB               	goto	u202_20
  5739  05CA                     u202_21:	
  5740  05CA  2DCF               	goto	i1l2224
  5741  05CB                     u202_20:	
  5742  05CB                     i1l2222:	
  5743                           
  5744                           ;main.c: 496:         {;main.c: 497:             truck[0]++;
  5745  05CB  3001               	movlw	1
  5746  05CC  00F5               	movwf	??_conteggioVeicoli
  5747  05CD  0875               	movf	??_conteggioVeicoli,w
  5748  05CE  07CC               	addwf	_truck,f
  5749  05CF                     i1l2224:	
  5750                           
  5751                           ;main.c: 499:         count = 0;
  5752  05CF  01F0               	clrf	_count
  5753  05D0  01F1               	clrf	_count+1
  5754  05D1                     i1l2226:	
  5755                           
  5756                           ;main.c: 502:     if (!PORTBbits.RB4)
  5757  05D1  1A06               	btfsc	6,4	;volatile
  5758  05D2  2DD4               	goto	u203_21
  5759  05D3  2DD5               	goto	u203_20
  5760  05D4                     u203_21:	
  5761  05D4  2DDC               	goto	i1l328
  5762  05D5                     u203_20:	
  5763  05D5                     i1l2228:	
  5764                           
  5765                           ;main.c: 503:     {;main.c: 504:         count++;
  5766  05D5  3001               	movlw	1
  5767  05D6  07F0               	addwf	_count,f
  5768  05D7  1803               	skipnc
  5769  05D8  0AF1               	incf	_count+1,f
  5770  05D9  3000               	movlw	0
  5771  05DA  07F1               	addwf	_count+1,f
  5772                           
  5773                           ;main.c: 505:     }
  5774  05DB  2E09               	goto	i1l2244
  5775  05DC                     i1l328:	
  5776                           ;main.c: 506:     else if (PORTBbits.RB4)
  5777                           
  5778  05DC  1E06               	btfss	6,4	;volatile
  5779  05DD  2DDF               	goto	u204_21
  5780  05DE  2DE0               	goto	u204_20
  5781  05DF                     u204_21:	
  5782  05DF  2E09               	goto	i1l2244
  5783  05E0                     u204_20:	
  5784  05E0                     i1l2230:	
  5785                           
  5786                           ;main.c: 507:     {;main.c: 508:         if (count >= 500)
  5787  05E0  3001               	movlw	1
  5788  05E1  0271               	subwf	_count+1,w
  5789  05E2  30F4               	movlw	244
  5790  05E3  1903               	skipnz
  5791  05E4  0270               	subwf	_count,w
  5792  05E5  1C03               	skipc
  5793  05E6  2DE8               	goto	u205_21
  5794  05E7  2DE9               	goto	u205_20
  5795  05E8                     u205_21:	
  5796  05E8  2DED               	goto	i1l2234
  5797  05E9                     u205_20:	
  5798  05E9                     i1l2232:	
  5799                           
  5800                           ;main.c: 509:         {;main.c: 510:             motorcycle[1]++;
  5801  05E9  3001               	movlw	1
  5802  05EA  00F5               	movwf	??_conteggioVeicoli
  5803  05EB  0875               	movf	??_conteggioVeicoli,w
  5804  05EC  07D5               	addwf	_motorcycle+1,f
  5805  05ED                     i1l2234:	
  5806                           
  5807                           ;main.c: 512:         if (count >= 1500)
  5808  05ED  3005               	movlw	5
  5809  05EE  0271               	subwf	_count+1,w
  5810  05EF  30DC               	movlw	220
  5811  05F0  1903               	skipnz
  5812  05F1  0270               	subwf	_count,w
  5813  05F2  1C03               	skipc
  5814  05F3  2DF5               	goto	u206_21
  5815  05F4  2DF6               	goto	u206_20
  5816  05F5                     u206_21:	
  5817  05F5  2DFA               	goto	i1l2238
  5818  05F6                     u206_20:	
  5819  05F6                     i1l2236:	
  5820                           
  5821                           ;main.c: 513:         {;main.c: 514:             car[1]++;
  5822  05F6  3001               	movlw	1
  5823  05F7  00F5               	movwf	??_conteggioVeicoli
  5824  05F8  0875               	movf	??_conteggioVeicoli,w
  5825  05F9  07D1               	addwf	_car+1,f
  5826  05FA                     i1l2238:	
  5827                           
  5828                           ;main.c: 516:         if (count >= 3000)
  5829  05FA  300B               	movlw	11
  5830  05FB  0271               	subwf	_count+1,w
  5831  05FC  30B8               	movlw	184
  5832  05FD  1903               	skipnz
  5833  05FE  0270               	subwf	_count,w
  5834  05FF  1C03               	skipc
  5835  0600  2E02               	goto	u207_21
  5836  0601  2E03               	goto	u207_20
  5837  0602                     u207_21:	
  5838  0602  2E07               	goto	i1l2242
  5839  0603                     u207_20:	
  5840  0603                     i1l2240:	
  5841                           
  5842                           ;main.c: 517:         {;main.c: 518:             truck[1]++;
  5843  0603  3001               	movlw	1
  5844  0604  00F5               	movwf	??_conteggioVeicoli
  5845  0605  0875               	movf	??_conteggioVeicoli,w
  5846  0606  07CD               	addwf	_truck+1,f
  5847  0607                     i1l2242:	
  5848                           
  5849                           ;main.c: 520:         count = 0;
  5850  0607  01F0               	clrf	_count
  5851  0608  01F1               	clrf	_count+1
  5852  0609                     i1l2244:	
  5853                           
  5854                           ;main.c: 523:     if (!PORTBbits.RB5)
  5855  0609  1A86               	btfsc	6,5	;volatile
  5856  060A  2E0C               	goto	u208_21
  5857  060B  2E0D               	goto	u208_20
  5858  060C                     u208_21:	
  5859  060C  2E14               	goto	i1l334
  5860  060D                     u208_20:	
  5861  060D                     i1l2246:	
  5862                           
  5863                           ;main.c: 524:     {;main.c: 525:         count++;
  5864  060D  3001               	movlw	1
  5865  060E  07F0               	addwf	_count,f
  5866  060F  1803               	skipnc
  5867  0610  0AF1               	incf	_count+1,f
  5868  0611  3000               	movlw	0
  5869  0612  07F1               	addwf	_count+1,f
  5870                           
  5871                           ;main.c: 526:     }
  5872  0613  2E41               	goto	i1l2262
  5873  0614                     i1l334:	
  5874                           ;main.c: 527:     else if (PORTBbits.RB5)
  5875                           
  5876  0614  1E86               	btfss	6,5	;volatile
  5877  0615  2E17               	goto	u209_21
  5878  0616  2E18               	goto	u209_20
  5879  0617                     u209_21:	
  5880  0617  2E41               	goto	i1l2262
  5881  0618                     u209_20:	
  5882  0618                     i1l2248:	
  5883                           
  5884                           ;main.c: 528:     {;main.c: 529:         if (count >= 500)
  5885  0618  3001               	movlw	1
  5886  0619  0271               	subwf	_count+1,w
  5887  061A  30F4               	movlw	244
  5888  061B  1903               	skipnz
  5889  061C  0270               	subwf	_count,w
  5890  061D  1C03               	skipc
  5891  061E  2E20               	goto	u210_21
  5892  061F  2E21               	goto	u210_20
  5893  0620                     u210_21:	
  5894  0620  2E25               	goto	i1l2252
  5895  0621                     u210_20:	
  5896  0621                     i1l2250:	
  5897                           
  5898                           ;main.c: 530:         {;main.c: 531:             motorcycle[2]++;
  5899  0621  3001               	movlw	1
  5900  0622  00F5               	movwf	??_conteggioVeicoli
  5901  0623  0875               	movf	??_conteggioVeicoli,w
  5902  0624  07D6               	addwf	_motorcycle+2,f
  5903  0625                     i1l2252:	
  5904                           
  5905                           ;main.c: 533:         if (count >= 1500)
  5906  0625  3005               	movlw	5
  5907  0626  0271               	subwf	_count+1,w
  5908  0627  30DC               	movlw	220
  5909  0628  1903               	skipnz
  5910  0629  0270               	subwf	_count,w
  5911  062A  1C03               	skipc
  5912  062B  2E2D               	goto	u211_21
  5913  062C  2E2E               	goto	u211_20
  5914  062D                     u211_21:	
  5915  062D  2E32               	goto	i1l2256
  5916  062E                     u211_20:	
  5917  062E                     i1l2254:	
  5918                           
  5919                           ;main.c: 534:         {;main.c: 535:             car[2]++;
  5920  062E  3001               	movlw	1
  5921  062F  00F5               	movwf	??_conteggioVeicoli
  5922  0630  0875               	movf	??_conteggioVeicoli,w
  5923  0631  07D2               	addwf	_car+2,f
  5924  0632                     i1l2256:	
  5925                           
  5926                           ;main.c: 537:         if (count >= 3000)
  5927  0632  300B               	movlw	11
  5928  0633  0271               	subwf	_count+1,w
  5929  0634  30B8               	movlw	184
  5930  0635  1903               	skipnz
  5931  0636  0270               	subwf	_count,w
  5932  0637  1C03               	skipc
  5933  0638  2E3A               	goto	u212_21
  5934  0639  2E3B               	goto	u212_20
  5935  063A                     u212_21:	
  5936  063A  2E3F               	goto	i1l2260
  5937  063B                     u212_20:	
  5938  063B                     i1l2258:	
  5939                           
  5940                           ;main.c: 538:         {;main.c: 539:             truck[2]++;
  5941  063B  3001               	movlw	1
  5942  063C  00F5               	movwf	??_conteggioVeicoli
  5943  063D  0875               	movf	??_conteggioVeicoli,w
  5944  063E  07CE               	addwf	_truck+2,f
  5945  063F                     i1l2260:	
  5946                           
  5947                           ;main.c: 541:         count = 0;
  5948  063F  01F0               	clrf	_count
  5949  0640  01F1               	clrf	_count+1
  5950  0641                     i1l2262:	
  5951                           
  5952                           ;main.c: 544:     if (!PORTAbits.RA5)
  5953  0641  1A85               	btfsc	5,5	;volatile
  5954  0642  2E44               	goto	u213_21
  5955  0643  2E45               	goto	u213_20
  5956  0644                     u213_21:	
  5957  0644  2E4C               	goto	i1l340
  5958  0645                     u213_20:	
  5959  0645                     i1l2264:	
  5960                           
  5961                           ;main.c: 545:     {;main.c: 546:         count++;
  5962  0645  3001               	movlw	1
  5963  0646  07F0               	addwf	_count,f
  5964  0647  1803               	skipnc
  5965  0648  0AF1               	incf	_count+1,f
  5966  0649  3000               	movlw	0
  5967  064A  07F1               	addwf	_count+1,f
  5968                           
  5969                           ;main.c: 547:     }
  5970  064B  2E79               	goto	i1l346
  5971  064C                     i1l340:	
  5972                           ;main.c: 548:     else if (PORTAbits.RA5)
  5973                           
  5974  064C  1E85               	btfss	5,5	;volatile
  5975  064D  2E4F               	goto	u214_21
  5976  064E  2E50               	goto	u214_20
  5977  064F                     u214_21:	
  5978  064F  2E79               	goto	i1l346
  5979  0650                     u214_20:	
  5980  0650                     i1l2266:	
  5981                           
  5982                           ;main.c: 549:     {;main.c: 550:         if (count >= 500)
  5983  0650  3001               	movlw	1
  5984  0651  0271               	subwf	_count+1,w
  5985  0652  30F4               	movlw	244
  5986  0653  1903               	skipnz
  5987  0654  0270               	subwf	_count,w
  5988  0655  1C03               	skipc
  5989  0656  2E58               	goto	u215_21
  5990  0657  2E59               	goto	u215_20
  5991  0658                     u215_21:	
  5992  0658  2E5D               	goto	i1l2270
  5993  0659                     u215_20:	
  5994  0659                     i1l2268:	
  5995                           
  5996                           ;main.c: 551:         {;main.c: 552:             motorcycle[3]++;
  5997  0659  3001               	movlw	1
  5998  065A  00F5               	movwf	??_conteggioVeicoli
  5999  065B  0875               	movf	??_conteggioVeicoli,w
  6000  065C  07D7               	addwf	_motorcycle+3,f
  6001  065D                     i1l2270:	
  6002                           
  6003                           ;main.c: 554:         if (count >= 1500)
  6004  065D  3005               	movlw	5
  6005  065E  0271               	subwf	_count+1,w
  6006  065F  30DC               	movlw	220
  6007  0660  1903               	skipnz
  6008  0661  0270               	subwf	_count,w
  6009  0662  1C03               	skipc
  6010  0663  2E65               	goto	u216_21
  6011  0664  2E66               	goto	u216_20
  6012  0665                     u216_21:	
  6013  0665  2E6A               	goto	i1l2274
  6014  0666                     u216_20:	
  6015  0666                     i1l2272:	
  6016                           
  6017                           ;main.c: 555:         {;main.c: 556:             car[3]++;
  6018  0666  3001               	movlw	1
  6019  0667  00F5               	movwf	??_conteggioVeicoli
  6020  0668  0875               	movf	??_conteggioVeicoli,w
  6021  0669  07D3               	addwf	_car+3,f
  6022  066A                     i1l2274:	
  6023                           
  6024                           ;main.c: 558:         if (count >= 3000)
  6025  066A  300B               	movlw	11
  6026  066B  0271               	subwf	_count+1,w
  6027  066C  30B8               	movlw	184
  6028  066D  1903               	skipnz
  6029  066E  0270               	subwf	_count,w
  6030  066F  1C03               	skipc
  6031  0670  2E72               	goto	u217_21
  6032  0671  2E73               	goto	u217_20
  6033  0672                     u217_21:	
  6034  0672  2E77               	goto	i1l2278
  6035  0673                     u217_20:	
  6036  0673                     i1l2276:	
  6037                           
  6038                           ;main.c: 559:         {;main.c: 560:             truck[3]++;
  6039  0673  3001               	movlw	1
  6040  0674  00F5               	movwf	??_conteggioVeicoli
  6041  0675  0875               	movf	??_conteggioVeicoli,w
  6042  0676  07CF               	addwf	_truck+3,f
  6043  0677                     i1l2278:	
  6044                           
  6045                           ;main.c: 562:         count = 0;
  6046  0677  01F0               	clrf	_count
  6047  0678  01F1               	clrf	_count+1
  6048  0679                     i1l346:	
  6049  0679  0008               	return
  6050  067A                     __end_of_conteggioVeicoli:	
  6051                           
  6052                           	psect	text21
  6053  0B64                     __ptext21:	
  6054 ;; *************** function _UART_Read *****************
  6055 ;; Defined at:
  6056 ;;		line 403 in file "main.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;		None
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;		None
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      unsigned char 
  6063 ;; Registers used:
  6064 ;;		wreg
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6070 ;;      Params:         0       0       0       0       0
  6071 ;;      Locals:         0       0       0       0       0
  6072 ;;      Temps:          0       0       0       0       0
  6073 ;;      Totals:         0       0       0       0       0
  6074 ;;Total ram usage:        0 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_ISR
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function _UART_Read
  6085  0B64                     _UART_Read:	
  6086  0B64                     i1l2202:	
  6087                           ;incstack = 0
  6088                           ; Regs used in _UART_Read: [wreg]
  6089                           
  6090  0B64                     i1l290:	
  6091                           ;main.c: 406:         ;
  6092                           
  6093                           
  6094                           ;main.c: 405:     while (!RCIF)
  6095  0B64  1283               	bcf	3,5	;RP0=0, select bank0
  6096  0B65  1303               	bcf	3,6	;RP1=0, select bank0
  6097  0B66  1E8C               	btfss	12,5	;volatile
  6098  0B67  2B69               	goto	u197_21
  6099  0B68  2B6A               	goto	u197_20
  6100  0B69                     u197_21:	
  6101  0B69  2B64               	goto	i1l290
  6102  0B6A                     u197_20:	
  6103  0B6A                     i1l292:	
  6104                           
  6105                           ;main.c: 407:     RCIF = 0;
  6106  0B6A  128C               	bcf	12,5	;volatile
  6107  0B6B                     i1l2204:	
  6108                           
  6109                           ;main.c: 408:     return RCREG;
  6110  0B6B  081A               	movf	26,w	;volatile
  6111  0B6C                     i1l293:	
  6112  0B6C  0008               	return
  6113  0B6D                     __end_of_UART_Read:	
  6114  007E                     btemp	set	126	;btemp
  6115  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        33
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     44      69
    BANK1            80      0      71
    BANK3            96      0      96
    BANK2            96     20      92

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   16740
                                             28 BANK0     16    16      0
                                              0 BANK2     20    20      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                          _bitParita
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    2444
                                             20 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1135
                                              0 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4368
                                             16 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1636
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1113
                                              4 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     276
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             15 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3    1204
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    14     8      6     716
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              8     6      2     232
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             16 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              1 COMMON     4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   _bitParita
     _bitChange
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     14      5C      11       95.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     152      12        0.0%
ABS                  0      0     152       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Jun 20 15:29:36 2020

                        pc 0002             ___bmul@product 0022                __CFG_CP$OFF 0000  
                       l83 0CAA                         l98 0C75               ___awdiv@sign 002D  
                       _s0 00BB                         _s1 00AF                         _s2 01E4  
                       _s3 01D8                         _s4 01CC                         _s5 01C0  
                       _s6 01B4                         _s7 01A8                         _s8 019C  
                       _s9 0190                         fsr 0004        ___wmul@multiplicand 0022  
           _GetDigits$1151 0035                __CFG_LVP$ON 0000                        l110 0701  
                      l111 070D                        l113 0742                        l105 06B1  
                      l106 06BD                        l220 0161                        l212 00C6  
                      l301 0D24                        l125 0FD7                        l214 009B  
                      l119 0F86                        l304 0EAD                        l128 0FFF  
                      l225 0258                        l307 0BB2                        l319 0F37  
                      l272 0BEF                        l280 0B74                        l281 0B77  
                      l249 03C4                        l266 0B8A                        l442 0BFE  
                      l507 0757                        l275 0CE4                        l444 0C16  
                      l269 0BE3                        l517 07DF                        l278 0B70  
                      l608 0DD9                        l298 0C44                        l468 0BC9  
                      l595 0E42               __CFG_CPD$OFF 0000                        _ISR 0D25  
                      _s10 014C                        _s11 0140                        _s12 0134  
                      _s13 0128                        _s14 011C                        _s15 0110  
                      _car 0050                        _map 0C76                        fsr0 0004  
                      indf 0000               ___awmod@sign 0026               __CFG_FOSC$HS 0000  
                     ?_ISR 0075                main@colorId 0159                       l3000 0F31  
                     l3010 0CFC                       l3020 0E43                       l3012 0D0D  
                     l3100 0063                       l3022 0E49                       l3014 0D18  
                     l3006 0CE8                       l3030 0BA1                       l3110 008C  
                     l3102 0068                       l3024 0E5F                       l3016 0D20  
                     l3008 0CF4                       l3032 0BB0                       l3200 0253  
                     l3120 0092                       l3112 008F                       l3104 0073  
                     l3050 0BCD                       l3026 0E84                       l3042 0C2E  
                     l3034 0C1A                       l3210 02A3                       l3202 025D  
                     l3130 00A7                       l3122 0095                       l3114 0092  
                     l3106 0086                       l3052 0BD9                       l3028 0E9A  
                     l3060 0BB6                       l3044 0C34                       l3036 0C2D  
                     l3300 056B                       l3212 02A6                       l3204 0261  
                     l3220 031E                       l3140 00CB                       l3132 00AD  
                     l3116 0092                       l3108 008A                       l3054 0BE0  
                     l3070 0BC8                       l3062 0BB7                       l3046 0C3A  
                     l3310 058B                       l3302 057C                       l3230 0349  
                     l3222 0326                       l3214 02AE                       l3206 0269  
                     l3150 00DA                       l3142 00CC                       l3126 009E  
                     l3118 0092                       l3056 0BE7                       l3064 0BBB  
                     l3048 0C3E                       l3304 057F                       l3232 034E  
                     l3224 032B                       l3240 038C                       l3216 02E1  
                     l3208 026A                       l3160 0105                       l3152 00DD  
                     l3144 00CE                       l3128 00A4                       l3136 00B1  
                     l3066 0BBF                       l3250 03C8                       l3234 0363  
                     l3226 0330                       l3242 03A2                       l3218 02E4  
                     l3162 0111                       l3146 00D2                       l3138 00CA  
                     l3090 0057                       l3068 0BC1                       l3308 0586  
                     l3252 03CC                       l3244 03BA                       l3236 0378  
                     l3228 0344                       l3180 0170                       l3172 0167  
                     l3164 011C                       l3156 00E4                       l3148 00D4  
                     l3092 0059                       l2710 0F5F                       l3270 046C  
                     l3262 03EC                       l3254 03CD                       l3246 03BE  
                     l3174 0168                       l3166 012E                       l3158 00F9  
                     l3414 00BE                       l3094 005B                       l3086 0050  
                     l2800 07A9                       l2712 0F73                       l2704 0F5B  
                     l3280 0490                       l3264 045F                       l3256 03DA  
                     l3248 03C2                       l3416 0394                       l3192 0220  
                     l3184 0177                       l3168 015A                       l3096 005D  
                     l3088 0056                       l3418 0F18                       l2810 07CC  
                     l2802 07B7                       l2722 0F95                       l2714 0F79  
                     l3282 0493                       l3274 047A                       l3258 03DE  
                     l3186 01CC                       l3178 016F                       l3098 0061  
                     l2820 0DE1                       l2812 07D7                       l2804 07B8  
                     l2740 0FC4                       l2732 0FAC                       l2724 0F9B  
                     l2716 0F8C                       l3276 0489                       l3268 0468  
                     l3292 04A8                       l3188 0219                       l3196 0229  
                     l2830 0DF5                       l2822 0DE6                       l2806 07C1  
                     l2902 067D                       l2750 0FEB                       l2742 0FCA  
                     l2726 0FA8                       l2718 0F94                       l3294 04B5  
                     l3286 049A                       l3198 0230                       l2840 0E0B  
                     l2832 0DF7                       l2824 0DE8                       l2816 0DDA  
                     l2808 07C7                       l2680 0C57                       l2920 06B7  
                     l2752 0FF1                       l2744 0FDD                       l2760 0B75  
                     l3296 0549                       l3288 049F                       l2850 0E2E  
                     l2842 0E0F                       l2834 0DFD                       l2826 0DEC  
                     l2818 0DDD                       l2922 06B9                       l2914 0688  
                     l2770 0C0C                       l2762 0BF0                       l2754 0FFE  
                     l2746 0FEA                       l2738 0FB0                       l2690 0F3B  
                     l3298 055A                       l2844 0E20                       l2836 0E00  
                     l2852 0E34                       l2828 0DF1                       l2860 0D7F  
                     l2780 074A                       l2940 06EE                       l2932 06D4  
                     l2924 06C3                       l2916 069E                       l2908 0684  
                     l2772 0C12                       l2764 0BF4                       l2692 0F4A  
                     l2854 0E39                       l2846 0E26                       l2838 0E07  
                     l2870 0D91                       l2862 0D82                       l2790 077A  
                     l2782 075B                       l2686 0C66                       l2678 0C48  
                     l2950 0720                       l2942 06F4                       l2926 06D0  
                     l2918 06A4                       l2766 0BF8                       l2694 0F57  
                     l2758 0B70                       ?_map 0030                       l2856 0E3E  
                     l2848 0E27                       l2880 0DAA                       l2872 0D96  
                     l2864 0D86                       l2792 077D                       l2784 0766  
                     l2776 0743                       l2952 0727                       l2944 0707  
                     l2960 0B83                       l2768 0C05                       l2696 0F58  
                     l2882 0DAE                       l2874 0D9C                       l2890 0DCB  
                     l2866 0D8B                       l2794 078A                       l2786 076A  
                     l2778 0746                       l2970 0CE3                       l2962 0CAB  
                     l2946 0709                       l2938 06D8                       l2954 0B78  
                     l2698 0F59                       l2892 0DD0                       l2884 0DB8  
                     l2876 0D9F                       l2868 0D8D                       l2972 0EAE  
                     l2796 078E                       l2788 0772                       l2964 0CB3  
                     l2948 0713                       l2956 0B7C                       l2894 0DD5  
                     l2886 0DBE                       l2878 0DA6                       l2798 0797  
                     l2966 0CE1                       l2958 0B7F                       l2888 0DC5  
                     l2984 0EB3                       l2992 0F10                       l2968 0CE2  
                     l2986 0ED2                       l2994 0F23                       l2978 0EB1  
                     l2898 0C76                       l2996 0F27                       l2988 0EF1  
                     l2998 0F2D                       u3010 0E34                       u3011 0E33  
                     u3020 0E39                       u3100 0DCB                       u3021 0E38  
                     u3005 0E28                       u3101 0DCA                       u3110 0DD0  
                     u3030 0D86                       u3111 0DCF                       u3031 0D85  
                     u3040 0D91                       u3200 0727                       u3041 0D90  
                     u3201 0726                       u3050 0D9C                       u3210 0CC2  
                     u3130 06B1                       u3051 0D9B                       u3131 06B0  
                     u3220 0F2D                       u3140 06B7                       u3124 0696  
                     u3221 0F2C                       u3141 06B6                       u3125 0694  
                     u3070 0DAE                       u3230 0F37                       u3150 06D0  
                     u3310 009A                       u3071 0DAD                       u3231 0F36  
                     u3215 0CBD                       u3151 06CF                       u3135 06AD  
                     u3311 0099                       u3080 0DB8                       u3400 0176  
                     u3320 00A4                       u3081 0DB7                       u3065 0DA0  
                     u3401 0175                       u3321 00A3                       u3170 0701  
                     u3250 0C44                       u3410 01CC                       u3330 00AD  
                     u3171 0700                       u3155 06CC                       u3251 0C43  
                     u3411 01CB                       u3331 00AC                       u3180 0707  
                     u3164 06E6                       u2700 0F86                       u3500 0330  
                     u3420 0253                       u3340 00CA                       u3085 0DB4  
                     u3245 0D02                       u3181 0706                       u3165 06E4  
                     u2701 0F85                       u3501 032F                       u3421 0252  
                     u3341 00C9                       u3270 0BE7                       u3190 0720  
                     u2710 0F8C                       u3510 0349                       u3430 0258  
                     u3350 00D2                       u3271 0BE6                       u3095 0DBF  
                     u3191 071F                       u3175 06FD                       u2711 0F8B  
                     u3511 0348                       u3431 0257                       u3415 01C8  
                     u3351 00D1                       u3280 0BBB                       u2720 0FA8  
                     u3520 034E                       u3440 025D                       u3360 00E3  
                     u3265 0BD0                       u3281 0BBA                       u2721 0FA7  
                     u2705 0F82                       u3521 034D                       u3441 025C  
                     u3361 00E2                       u3290 0BC8                       u2650 0C57  
                     u3530 03BE                       u3450 0261                       u3291 0BC7  
                     u2651 0C56                       u3195 071C                       u3531 03BD  
                     u3451 0260                       u2644 0C4E                       u2820 0C12  
                     u2740 0FD7                       u3620 0479                       u3604 042F  
                     u3540 03C2                       u3460 02A3                       u3380 0167  
                     u2645 0C4C                       u2821 0C11                       u2805 0BFF  
                     u2741 0FD6                       u2725 0FA4                       u3621 0478  
                     u3605 042D                       u3541 03C1                       u3461 02A2  
                     u3381 0166                       u2910 07C7                       u2830 074A  
                     u2750 0FDD                       u2734 0FBC                       u3630 0499  
                     u3614 0456                       u3550 03C8                       u3470 02AE  
                     u3390 016E                       u2911 07C6                       u2831 0749  
                     u2815 0C06                       u2751 0FDC                       u2735 0FBA  
                     u3631 0498                       u3615 0454                       u3551 03C7  
                     u3471 02AD                       u3391 016D                       u3375 0121  
                     u2920 07CC                       u2840 075B                       u2664 0C5D  
                     u3640 04B5                       u3560 03CC                       u3480 02E1  
                     u2921 07CB                       u2905 07B9                       u2841 075A  
                     u2665 0C5B                       u2745 0FD3                       u3641 04B4  
                     u3625 0475                       u3561 03CB                       u3481 02E0  
                     u2930 0DE1                       u2850 077A                       u2674 0C6C  
                     u2770 0FFE                       u3650 0585                       u3570 03DA  
                     u3490 0326                       u2931 0DE0                       u2851 0779  
                     u2675 0C6A                       u2771 0FFD                       u3651 0584  
                     u3571 03D9                       u3491 0325                       u2940 0DEC  
                     u2764 0FE3                       u2780 0B74                       u3580 03EB  
                     u2941 0DEB                       u2765 0FE1                       u2685 0F4D  
                     u2781 0B73                       u3581 03EA                       u3485 02DD  
                     u2950 0DFD                       u2870 078E                       u2790 0BF8  
                     u2694 0F6B                       u2951 0DFC                       u2871 078D  
                     u2791 0BF7                       u2775 0FFA                       u2695 0F69  
                     u2865 077F                       u3585 03E7                       u2970 0E0F  
                     u2890 07A9                       u3594 0408                       u2971 0E0E  
                     u2891 07A8                       u3595 0406                       _RCIF 0065  
                     u2965 0E01                       u2885 0790                       u3677 0B87  
                     u2990 0E20                       u3687 0BDD                       u2991 0E1F  
                     u2895 07A5                       u2985 0E10                       u2995 0E1C  
                     _TMR0 0001                       _TXIF 0064               __CFG_WRT$OFF 0000  
                     _disp 005B                       _main 0050                       _time 0072  
                     map@x 0030                       btemp 007E           __end_of_ADC_Read 0BF0  
            __CFG_BOREN$ON 0000                main@umidita 015B                       start 000E  
          __end_of_GetTime 0D25          ___bmul@multiplier 0023               main@endCiclo 015D  
                    ??_ISR 0076  __size_of_conteggioVeicoli 00E3                      ??_map 003A  
          __end_of___aldiv 07E0                      ?_main 0075            __end_of___awdiv 0E43  
            __CFG_WDTE$OFF 0000            __end_of___awmod 0DDA            ___awdiv@divisor 0027  
                    _T1CON 0010       bitParita@errorColumn 002A                      i1l322 05A4  
                    i1l340 064C                      i1l334 0614                      i1l328 05DC  
                    i1l290 0B64                      i1l346 0679                      i1l292 0B6A  
                    i1l356 0D76                      i1l293 0B6C            ___awdiv@counter 002C  
                    _RCREG 001A                      _TMR1H 000F                      _TMR1L 000E  
                    _SPBRG 0099                      _PORTD 0008                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087                      _TRISD 0088  
                    _TRISE 0089                      _TXREG 0019              __CFG_PWRTE$ON 0000  
       __size_of_UART_Init 003A         __size_of_UART_Read 0009            __end_of_display 0811  
                    _count 0070                      _unita 005F                      main@i 0163  
                    main@l 0168                      _truck 004C                      pclath 000A  
                    status 0003                      wtemp0 007E            __initialization 0011  
             __end_of_main 0597         __size_of_GetDigits 006B                     ??_main 003C  
        SetDefaultTimers@i 002D          SetDefaultTimers@l 002C         __size_of_BuildByte 00C8  
               _SetDisplay 0B9E              bitChange@dato 0023                     _ADCON0 001F  
                   _ADCON1 009F                     _ADRESH 001E                     _ADRESL 009E  
         ___awdiv@dividend 0029                     i1l2202 0B64                     i1l2210 059D  
                   i1l2204 0B6B                     i1l2220 05C2                     i1l2212 05A8  
                   i1l2230 05E0                     i1l2222 05CB                     i1l2214 05B1  
                   i1l2240 0603                     i1l2232 05E9                     i1l2224 05CF  
                   i1l2216 05B5                     u200_20 05B1                     i1l2208 0597  
                   u200_21 05B0                     i1l2250 0621                     i1l2242 0607  
                   i1l2234 05ED                     i1l2218 05BE                     i1l2226 05D1  
                   i1l2260 063F                     i1l2252 0625                     i1l2236 05F6  
                   i1l2244 0609                     i1l2228 05D5                     i1l2270 065D  
                   i1l2254 062E                     i1l2262 0641                     i1l2246 060D  
                   i1l2238 05FA                     i1l2272 0666                     i1l2264 0645  
                   i1l2256 0632                     i1l2248 0618                     u201_20 05BE  
                   u201_21 05BD                     i1l2274 066A                     i1l2266 0650  
                   i1l2258 063B                     i1l2276 0673                     i1l2268 0659  
                   i1l2278 0677                     u210_20 0621                     u202_20 05CB  
                   i1l2560 0D32                     u210_21 0620                     u202_21 05CA  
                   i1l2570 0D4E                     i1l2562 0D34                     i1l2554 0D25  
                   i1l2580 0D5D                     i1l2564 0D38                     i1l2572 0D4F  
                   i1l2556 0D2B                     i1l2590 0D6D                     i1l2582 0D61  
                   i1l2574 0D53                     i1l2566 0D3C                     i1l2558 0D2F  
                   u211_20 062E                     u203_20 05D5                     i1l2592 0D6E  
                   i1l2584 0D62                     i1l2576 0D54                     i1l2568 0D4A  
                   u211_21 062D                     u203_21 05D4                     i1l2594 0D72  
                   i1l2586 0D66                     i1l2578 0D59                     i1l2596 0D74  
                   i1l2588 0D6C                     u212_20 063B                     u204_20 05E0  
                   u212_21 063A                     u204_21 05DF                     u213_20 0645  
                   u205_20 05E9                     u213_21 0644                     u205_21 05E8  
                   u214_20 0650                     u206_20 05F6                     u214_21 064F  
                   u206_21 05F5                     u215_20 0659                     u207_20 0603  
                   u215_21 0658                     u207_21 0602                     u216_20 0666  
                   u208_20 060D                     u216_21 0665                     u208_21 060C  
                   u217_20 0673                     u209_20 0618                     _INTCON 000B  
                   u217_21 0672                     u209_21 0617                     u260_20 0D3C  
                   u260_21 0D3B                     u261_20 0D53                     u261_21 0D52  
                   u262_20 0D61                     u262_21 0D60                     u263_20 0D6C  
                   u263_21 0D6B                     u257_20 0D2B                     u257_21 0D2A  
                   u258_20 0D2F                     u258_21 0D2E                     u259_20 0D38  
                   u259_21 0D37                     u197_20 0B6A                     u197_21 0B69  
                   u198_20 059D                     u198_21 059C                     u199_20 05A8  
                   u199_21 05A7                     _TMR0IF 005A                     _TMR1IF 0060  
                ??_GetTime 0022               ?_UART_TxChar 0075          __end_of_UART_Init 0CE5  
        __end_of_UART_Read 0B6D                     ___bmul 0BB3                  ??___aldiv 0028  
          GetTime@shortInt 0025                     ___wmul 0BF0                  ??___awdiv 002B  
                   _decine 005E                  ??___awmod 0024           __end_of_init_ADC 0B8B  
                   _cycled 0060           ___awdiv@quotient 002E            ___awmod@divisor 0020  
          ___awmod@counter 0025           __end_of_sendByte 0C45              main@pressione 015C  
                ?_ADC_Read 0020                     saved_w 007E    __end_of__initialization 004C  
        __end_of_GetDigits 0EAE       bitParita@sommaColumn 0029  __size_of_SetDefaultTimers 008A  
      ___bmul@multiplicand 0020             __pcstackCOMMON 0075          __end_of_BuildByte 1000  
             __pidataBANK0 0003               __pidataBANK1 07E0         __size_of_bitChange 0031  
         _conteggioVeicoli 0597         __size_of_bitParita 00C9                 ??_ADC_Read 0022  
   SetDefaultTimers@giallo 0024                ?_SetDisplay 0020              GetDigits@Time 0030  
     _dataFromGatewayIndex 0059       _timerReadFromGateway 0058                 __pbssBANK0 004C  
               __pbssBANK1 00A0                 __pbssBANK2 0110                 __pbssBANK3 0190  
               __pmaintext 0050                    ?___bmul 0020                    ?___wmul 0020  
            sendByte@byte0 0039              sendByte@byte1 0034                 __pintentry 0004  
        __end_of_bitChange 0C76                 __stringtab 0800          __end_of_bitParita 0743  
                ?_init_ADC 0075                    _GetTime 0CE5            BuildByte@valore 0021  
          BuildByte@txByte 0025                  ?_sendByte 0034                 bitChange@n 0020  
               _n_semafori 0064       __size_of_UART_TxChar 000B                    ___aldiv 0743  
          __size_of___bmul 0017                    ___awdiv 0DDA                    ___awmod 0D7F  
      __size_of_SetDisplay 0015            __size_of___wmul 0027                    __ptext1 0C17  
                  __ptext2 0B6D                    __ptext3 0F38                    __ptext4 0C76  
                  __ptext5 0BF0                    __ptext6 0B78                    __ptext7 067A  
                  __ptext8 0C45                    __ptext9 0BB3             main@semaforoId 0158  
                  _comando 0073                    _display 0806               __size_of_ISR 005A  
               bitParita@i 0032                 bitParita@y 002D               __size_of_map 0035  
         ___awmod@dividend 0022           ___aldiv@dividend 0024       BuildByte@sommaColumn 002B  
                  clrloop0 0B5D                    main@tmp 015E       end_of_initialization 004C  
               ??_init_ADC 0020             main@lux_select 0161                 ??_sendByte 0036  
         _SetDefaultTimers 0EAE                  _RCSTAbits 0018           ___aldiv@quotient 002B  
               _motorcycle 0054                  _UART_Init 0CAB                  _UART_Read 0B64  
                _PORTAbits 0005                  _PORTBbits 0006               SetDisplay@d1 0023  
             SetDisplay@d2 0020               SetDisplay@d3 0021                  _TRISCbits 0087  
        __size_of_ADC_Read 0026   __end_of_conteggioVeicoli 067A                 map@out_max 0038  
        bitParita@errorRow 002C                 map@out_min 0036                  _TXSTAbits 0098  
                _GetDigits 0E43          bitParita@sommaRow 0028             __end_of___bmul 0BCA  
           __end_of___wmul 0C17                 ?_UART_Init 002F                 ?_UART_Read 0075  
                _BuildByte 0F38          BuildByte@sommaRow 002A        start_initialization 0011  
              __end_of_ISR 0D7F               ??_SetDisplay 0023                __end_of_map 0CAB  
               ?_GetDigits 0030                   ??___bmul 0021             ADC_Read@canale 0023  
                 ??___wmul 0024                 init_fetch0 0B8B                __pdataBANK0 0064  
              __pdataBANK1 00C7         __end_of_SetDisplay 0BB3                 ?_BuildByte 0020  
              __pbssCOMMON 0070                  ___latbits 0002              __pcstackBANK0 0020  
            __pcstackBANK2 0158                   ?_GetTime 0020                  _bitChange 0C45  
    SetDefaultTimers@verde 0022      SetDefaultTimers@rosso 0020          __size_of_init_ADC 0013  
                _bitParita 067A                  _centinaia 005D          __size_of_sendByte 002E  
                 ?___aldiv 0020                   ?___awdiv 0027                   ?___awmod 0020  
              ??_UART_Init 0031                ??_UART_Read 0075             BuildByte@i_342 0032  
                __pstrings 0800             BuildByte@y_343 002E             sendByte@valore 0035  
           sendByte@txByte 003A             BuildByte@byte0 0024             BuildByte@byte1 0020  
 __end_of_SetDefaultTimers 0F38                   _ADC_Read 0BCA                  _count_lux 0074  
                _countdown 005A              UART_TxChar@ch 0020            ___aldiv@divisor 0020  
        interrupt_function 0004            ___aldiv@counter 0029                 ?_bitChange 0020  
           ___wmul@product 0024                  clear_ram0 0B5C                   _PIE1bits 008C  
            ??_UART_TxChar 0020                 ?_bitParita 0075                ??_GetDigits 0032  
                 _GO_nDONE 00FA          UART_Init@baudrate 002F                ??_BuildByte 0022  
                map@in_max 0034                  map@in_min 0032                __stringbase 0805  
                main@i_444 0169                  main@i_445 016A                  main@i_446 0166  
                main@i_447 0164                  main@i_449 0165          ___wmul@multiplier 0020  
                main@index 0162               GetTime@index 0024          ?_conteggioVeicoli 0075  
             _secondPassed 0061         ??_conteggioVeicoli 0075           __size_of_GetTime 0040  
                 _Semafori 00C7             bitParita@i_330 0034                _readGateway 0062  
           bitParita@y_331 002F           __size_of___aldiv 009D        __end_of_UART_TxChar 0B78  
         __size_of___awdiv 0069           __size_of___awmod 005B             bitParita@error 002B  
       __end_of__stringtab 0806                  sendByte@i 003B                   __ptext10 0CAB  
                 __ptext11 0743                   __ptext20 0597                   __ptext12 0B9E  
                 __ptext21 0B64                   __ptext13 0EAE                   __ptext14 0CE5  
                 __ptext15 0E43                   __ptext16 0D7F                   __ptext17 0DDA  
                 __ptext18 0BCA                   __ptext19 0D25                   _init_ADC 0B78  
              bitParita@rx 0031                ??_bitChange 0021              __size_of_main 0547  
          _dataFromGateway 00A0                   _old_disp 005C                ??_bitParita 0024  
                 _sendByte 0C17                   main@temp 015A                   main@time 015F  
              GetTime@time 0026                 _INTCONbits 000B                   init_ram0 0B8F  
                 intlevel1 0000            _readGatewayDone 0063                  stringcode 0800  
              _UART_TxChar 0B6D                 _OPTION_REG 0081            SetDisplay@value 0022  
                 stringdir 0800                   stringtab 0800          ?_SetDefaultTimers 0020  
             ___aldiv@sign 002A         ??_SetDefaultTimers 0026                 BuildByte@i 0030  
               BuildByte@y 002C  
