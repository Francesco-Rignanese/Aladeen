

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Jun 20 15:23:42 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataBANK0
   201  07FD                     __pidataBANK0:	
   202                           
   203                           ;initializer for _n_semafori
   204  07FD  340F               	retlw	15
   205                           
   206                           	psect	idataBANK1
   207  07DD                     __pidataBANK1:	
   208                           
   209                           ;initializer for _Semafori
   210  07DD  34BB               	retlw	low (_s0| 0)
   211  07DE  3400               	retlw	high (_s0| 0)
   212  07DF  34AF               	retlw	low (_s1| 0)
   213  07E0  3400               	retlw	high (_s1| 0)
   214  07E1  34E4               	retlw	low (_s2| (0+256))
   215  07E2  3401               	retlw	high (_s2| (0+256))
   216  07E3  34D8               	retlw	low (_s3| (0+256))
   217  07E4  3401               	retlw	high (_s3| (0+256))
   218  07E5  34CC               	retlw	low (_s4| (0+256))
   219  07E6  3401               	retlw	high (_s4| (0+256))
   220  07E7  34C0               	retlw	low (_s5| (0+256))
   221  07E8  3401               	retlw	high (_s5| (0+256))
   222  07E9  34B4               	retlw	low (_s6| (0+256))
   223  07EA  3401               	retlw	high (_s6| (0+256))
   224  07EB  34A8               	retlw	low (_s7| (0+256))
   225  07EC  3401               	retlw	high (_s7| (0+256))
   226  07ED  349C               	retlw	low (_s8| (0+256))
   227  07EE  3401               	retlw	high (_s8| (0+256))
   228  07EF  3490               	retlw	low (_s9| (0+256))
   229  07F0  3401               	retlw	high (_s9| (0+256))
   230  07F1  344C               	retlw	low (_s10| (0+256))
   231  07F2  3401               	retlw	high (_s10| (0+256))
   232  07F3  3440               	retlw	low (_s11| (0+256))
   233  07F4  3401               	retlw	high (_s11| (0+256))
   234  07F5  3434               	retlw	low (_s12| (0+256))
   235  07F6  3401               	retlw	high (_s12| (0+256))
   236  07F7  3428               	retlw	low (_s13| (0+256))
   237  07F8  3401               	retlw	high (_s13| (0+256))
   238  07F9  341C               	retlw	low (_s14| (0+256))
   239  07FA  3401               	retlw	high (_s14| (0+256))
   240  07FB  3410               	retlw	low (_s15| (0+256))
   241  07FC  3401               	retlw	high (_s15| (0+256))
   242                           
   243                           	psect	strings
   244  0800                     __pstrings:	
   245  0800                     stringtab:	
   246  0800                     __stringtab:	
   247  0800                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250  0800                     stringdir:	
   251  0800  3008               	movlw	high stringdir
   252  0801  008A               	movwf	10
   253  0802  0804               	movf	4,w
   254  0803  0A84               	incf	4,f
   255  0804  0782               	addwf	2,f
   256  0805                     __stringbase:	
   257  0805  3400               	retlw	0
   258  0806                     __end_of__stringtab:	
   259  0806                     _display:	
   260  0806  343F               	retlw	63
   261  0807  3406               	retlw	6
   262  0808  345B               	retlw	91
   263  0809  344F               	retlw	79
   264  080A  3466               	retlw	102
   265  080B  346D               	retlw	109
   266  080C  347D               	retlw	125
   267  080D  3407               	retlw	7
   268  080E  347F               	retlw	127
   269  080F  346F               	retlw	111
   270  0810  3400               	retlw	0
   271  0811                     __end_of_display:	
   272  0006                     _PORTBbits	set	6
   273  0008                     _PORTD	set	8
   274  0005                     _PORTAbits	set	5
   275  001A                     _RCREG	set	26
   276  0019                     _TXREG	set	25
   277  000B                     _INTCONbits	set	11
   278  0018                     _RCSTAbits	set	24
   279  001E                     _ADRESH	set	30
   280  001F                     _ADCON0	set	31
   281  000E                     _TMR1L	set	14
   282  000F                     _TMR1H	set	15
   283  0010                     _T1CON	set	16
   284  0001                     _TMR0	set	1
   285  000B                     _INTCON	set	11
   286  0060                     _TMR1IF	set	96
   287  005A                     _TMR0IF	set	90
   288  0065                     _RCIF	set	101
   289  0064                     _TXIF	set	100
   290  00FA                     _GO_nDONE	set	250
   291  008C                     _PIE1bits	set	140
   292  0099                     _SPBRG	set	153
   293  0098                     _TXSTAbits	set	152
   294  0087                     _TRISCbits	set	135
   295  009E                     _ADRESL	set	158
   296  009F                     _ADCON1	set	159
   297  0085                     _TRISA	set	133
   298  0081                     _OPTION_REG	set	129
   299  0089                     _TRISE	set	137
   300  0088                     _TRISD	set	136
   301  0087                     _TRISC	set	135
   302  0086                     _TRISB	set	134
   303                           
   304                           ; #config settings
   305  0000                     
   306                           	psect	cinit
   307  0011                     start_initialization:	
   308  0011                     __initialization:	
   309                           
   310                           ; Initialize objects allocated to BANK1
   311  0011  1383               	bcf	3,7	;select IRP bank0
   312  0012  30E7               	movlw	low (__pdataBANK1+32)
   313  0013  00FD               	movwf	btemp+-1
   314  0014  3007               	movlw	high __pidataBANK1
   315  0015  00FE               	movwf	btemp
   316  0016  30DD               	movlw	low __pidataBANK1
   317  0017  00FF               	movwf	btemp+1
   318  0018  30C7               	movlw	low __pdataBANK1
   319  0019  0084               	movwf	4
   320  001A  120A  158A  23BA  120A  118A  	fcall	init_ram0
   321                           
   322                           ; Initialize objects allocated to BANK0
   323  001F  120A  118A  27FD  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   324  0024  00E4               	movwf	__pdataBANK0& (0+127)
   325                           
   326                           ; Clear objects allocated to BANK3
   327  0025  1783               	bsf	3,7	;select IRP bank2
   328  0026  3090               	movlw	low __pbssBANK3
   329  0027  0084               	movwf	4
   330  0028  30F0               	movlw	low (__pbssBANK3+96)
   331  0029  120A  158A  2387  120A  118A  	fcall	clear_ram0
   332                           
   333                           ; Clear objects allocated to BANK2
   334  002E  3010               	movlw	low __pbssBANK2
   335  002F  0084               	movwf	4
   336  0030  3058               	movlw	low (__pbssBANK2+72)
   337  0031  120A  158A  2387  120A  118A  	fcall	clear_ram0
   338                           
   339                           ; Clear objects allocated to BANK1
   340  0036  1383               	bcf	3,7	;select IRP bank0
   341  0037  30A0               	movlw	low __pbssBANK1
   342  0038  0084               	movwf	4
   343  0039  30C7               	movlw	low (__pbssBANK1+39)
   344  003A  120A  158A  2387  120A  118A  	fcall	clear_ram0
   345                           
   346                           ; Clear objects allocated to BANK0
   347  003F  304C               	movlw	low __pbssBANK0
   348  0040  0084               	movwf	4
   349  0041  3064               	movlw	low (__pbssBANK0+24)
   350  0042  120A  158A  2387  120A  118A  	fcall	clear_ram0
   351                           
   352                           ; Clear objects allocated to COMMON
   353  0047  01F0               	clrf	__pbssCOMMON& (0+127)
   354  0048  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   355  0049  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   356  004A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   357  004B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   358  004C                     end_of_initialization:	
   359                           ;End of C runtime variable initialization code
   360                           
   361  004C                     __end_of__initialization:	
   362  004C  0183               	clrf	3
   363  004D  120A  118A  2850   	ljmp	_main	;jump to C main() function
   364                           
   365                           	psect	bssCOMMON
   366  0070                     __pbssCOMMON:	
   367  0070                     _count:	
   368  0070                     	ds	2
   369  0072                     _time:	
   370  0072                     	ds	1
   371  0073                     _comando:	
   372  0073                     	ds	1
   373  0074                     _count_lux:	
   374  0074                     	ds	1
   375                           
   376                           	psect	bssBANK0
   377  004C                     __pbssBANK0:	
   378  004C                     _truck:	
   379  004C                     	ds	4
   380  0050                     _car:	
   381  0050                     	ds	4
   382  0054                     _motorcycle:	
   383  0054                     	ds	4
   384  0058                     _timerReadFromGateway:	
   385  0058                     	ds	1
   386  0059                     _dataFromGatewayIndex:	
   387  0059                     	ds	1
   388  005A                     _countdown:	
   389  005A                     	ds	1
   390  005B                     _disp:	
   391  005B                     	ds	1
   392  005C                     _old_disp:	
   393  005C                     	ds	1
   394  005D                     _centinaia:	
   395  005D                     	ds	1
   396  005E                     _decine:	
   397  005E                     	ds	1
   398  005F                     _unita:	
   399  005F                     	ds	1
   400  0060                     _cycled:	
   401  0060                     	ds	1
   402  0061                     _secondPassed:	
   403  0061                     	ds	1
   404  0062                     _readGateway:	
   405  0062                     	ds	1
   406  0063                     _readGatewayDone:	
   407  0063                     	ds	1
   408                           
   409                           	psect	dataBANK0
   410  0064                     __pdataBANK0:	
   411  0064                     _n_semafori:	
   412  0064                     	ds	1
   413                           
   414                           	psect	bssBANK1
   415  00A0                     __pbssBANK1:	
   416  00A0                     _dataFromGateway:	
   417  00A0                     	ds	15
   418  00AF                     _s1:	
   419  00AF                     	ds	12
   420  00BB                     _s0:	
   421  00BB                     	ds	12
   422                           
   423                           	psect	dataBANK1
   424  00C7                     __pdataBANK1:	
   425  00C7                     _Semafori:	
   426  00C7                     	ds	32
   427                           
   428                           	psect	bssBANK3
   429  0190                     __pbssBANK3:	
   430  0190                     _s9:	
   431  0190                     	ds	12
   432  019C                     _s8:	
   433  019C                     	ds	12
   434  01A8                     _s7:	
   435  01A8                     	ds	12
   436  01B4                     _s6:	
   437  01B4                     	ds	12
   438  01C0                     _s5:	
   439  01C0                     	ds	12
   440  01CC                     _s4:	
   441  01CC                     	ds	12
   442  01D8                     _s3:	
   443  01D8                     	ds	12
   444  01E4                     _s2:	
   445  01E4                     	ds	12
   446                           
   447                           	psect	bssBANK2
   448  0110                     __pbssBANK2:	
   449  0110                     _s15:	
   450  0110                     	ds	12
   451  011C                     _s14:	
   452  011C                     	ds	12
   453  0128                     _s13:	
   454  0128                     	ds	12
   455  0134                     _s12:	
   456  0134                     	ds	12
   457  0140                     _s11:	
   458  0140                     	ds	12
   459  014C                     _s10:	
   460  014C                     	ds	12
   461                           
   462                           	psect	inittext
   463  0BB6                     init_fetch0:	
   464                           ;	Called with low address in FSR and high address in W
   465                           
   466  0BB6  087E               	movf	btemp,w
   467  0BB7  008A               	movwf	10
   468  0BB8  087F               	movf	btemp+1,w
   469  0BB9  0082               	movwf	2
   470  0BBA                     init_ram0:	
   471                           ;Called with:
   472                           ;	high address of idata address in btemp 
   473                           ;	low address of idata address in btemp+1 
   474                           ;	low address of data in FSR
   475                           ;	high address + 1 of data in btemp-1
   476                           
   477  0BBA  120A  158A  23B6  120A  158A  	fcall	init_fetch0
   478  0BBF  0080               	movwf	0
   479  0BC0  0A84               	incf	4,f
   480  0BC1  0804               	movf	4,w
   481  0BC2  067D               	xorwf	btemp+-1,w
   482  0BC3  1903               	btfsc	3,2
   483  0BC4  3400               	retlw	0
   484  0BC5  0AFF               	incf	btemp+1,f
   485  0BC6  1903               	btfsc	3,2
   486  0BC7  0AFE               	incf	btemp,f
   487  0BC8  2BBA               	goto	init_ram0
   488                           
   489                           	psect	clrtext
   490  0B87                     clear_ram0:	
   491                           ;	Called with FSR containing the base address, and
   492                           ;	W with the last address+1
   493                           
   494  0B87  0064               	clrwdt	;clear the watchdog before getting into this loop
   495  0B88                     clrloop0:	
   496  0B88  0180               	clrf	0	;clear RAM location pointed to by FSR
   497  0B89  0A84               	incf	4,f	;increment pointer
   498  0B8A  0604               	xorwf	4,w	;XOR with final address
   499  0B8B  1903               	btfsc	3,2	;have we reached the end yet?
   500  0B8C  3400               	retlw	0	;all done for this memory range, return
   501  0B8D  0604               	xorwf	4,w	;XOR again to restore value
   502  0B8E  2B88               	goto	clrloop0	;do the next byte
   503                           
   504                           	psect	cstackBANK2
   505  0158                     __pcstackBANK2:	
   506  0158                     main@semaforoId:	
   507                           
   508                           ; 1 bytes @ 0x0
   509  0158                     	ds	1
   510  0159                     main@colorId:	
   511                           
   512                           ; 1 bytes @ 0x1
   513  0159                     	ds	1
   514  015A                     main@temp:	
   515                           
   516                           ; 1 bytes @ 0x2
   517  015A                     	ds	1
   518  015B                     main@umidita:	
   519                           
   520                           ; 1 bytes @ 0x3
   521  015B                     	ds	1
   522  015C                     main@pressione:	
   523                           
   524                           ; 1 bytes @ 0x4
   525  015C                     	ds	1
   526  015D                     main@endCiclo:	
   527                           
   528                           ; 1 bytes @ 0x5
   529  015D                     	ds	1
   530  015E                     main@tmp:	
   531                           
   532                           ; 1 bytes @ 0x6
   533  015E                     	ds	1
   534  015F                     main@time:	
   535                           
   536                           ; 2 bytes @ 0x7
   537  015F                     	ds	2
   538  0161                     main@lux_select:	
   539                           
   540                           ; 1 bytes @ 0x9
   541  0161                     	ds	1
   542  0162                     main@index:	
   543                           
   544                           ; 1 bytes @ 0xA
   545  0162                     	ds	1
   546  0163                     main@i:	
   547                           
   548                           ; 1 bytes @ 0xB
   549  0163                     	ds	1
   550  0164                     main@i_446:	
   551                           
   552                           ; 2 bytes @ 0xC
   553  0164                     	ds	2
   554  0166                     main@l:	
   555                           
   556                           ; 1 bytes @ 0xE
   557  0166                     	ds	1
   558  0167                     main@i_444:	
   559                           
   560                           ; 1 bytes @ 0xF
   561  0167                     	ds	1
   562  0168                     main@i_445:	
   563                           
   564                           ; 2 bytes @ 0x10
   565  0168                     	ds	2
   566                           
   567                           	psect	cstackCOMMON
   568  0075                     __pcstackCOMMON:	
   569  0075                     ?_init_ADC:	
   570  0075                     ?_bitParita:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0075                     ?_main:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0075                     ?_UART_TxChar:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0075                     ?_UART_Read:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0075                     ??_UART_Read:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0075                     ?_conteggioVeicoli:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0075                     ??_conteggioVeicoli:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0075                     ?_ISR:	
   592                           ; 1 bytes @ 0x0
   593                           
   594                           
   595                           ; 1 bytes @ 0x0
   596  0075                     	ds	1
   597  0076                     ??_ISR:	
   598                           
   599                           ; 1 bytes @ 0x1
   600  0076                     	ds	4
   601                           
   602                           	psect	cstackBANK0
   603  0020                     __pcstackBANK0:	
   604  0020                     ??_init_ADC:	
   605  0020                     ?_SetDefaultTimers:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0020                     ?_SetDisplay:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0020                     ?_BuildByte:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0020                     ?_bitChange:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0020                     ??_UART_TxChar:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0020                     ?___bmul:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0020                     ?_GetTime:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0020                     ?_ADC_Read:	
   627                           ; 2 bytes @ 0x0
   628                           
   629  0020                     ?___wmul:	
   630                           ; 2 bytes @ 0x0
   631                           
   632  0020                     ?___awmod:	
   633                           ; 2 bytes @ 0x0
   634                           
   635  0020                     ?___aldiv:	
   636                           ; 2 bytes @ 0x0
   637                           
   638  0020                     bitChange@n:	
   639                           ; 4 bytes @ 0x0
   640                           
   641  0020                     BuildByte@byte1:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0020                     UART_TxChar@ch:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0020                     SetDisplay@d2:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0020                     ___bmul@multiplicand:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0020                     SetDefaultTimers@rosso:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0020                     ___wmul@multiplier:	
   657                           ; 2 bytes @ 0x0
   658                           
   659  0020                     ___awmod@divisor:	
   660                           ; 2 bytes @ 0x0
   661                           
   662  0020                     ___aldiv@divisor:	
   663                           ; 2 bytes @ 0x0
   664                           
   665                           
   666                           ; 4 bytes @ 0x0
   667  0020                     	ds	1
   668  0021                     ??_bitChange:	
   669  0021                     ??___bmul:	
   670                           ; 1 bytes @ 0x1
   671                           
   672  0021                     BuildByte@valore:	
   673                           ; 1 bytes @ 0x1
   674                           
   675  0021                     SetDisplay@d3:	
   676                           ; 1 bytes @ 0x1
   677                           
   678                           
   679                           ; 1 bytes @ 0x1
   680  0021                     	ds	1
   681  0022                     ??_GetTime:	
   682  0022                     ??_ADC_Read:	
   683                           ; 1 bytes @ 0x2
   684                           
   685  0022                     ??_BuildByte:	
   686                           ; 1 bytes @ 0x2
   687                           
   688  0022                     SetDisplay@value:	
   689                           ; 1 bytes @ 0x2
   690                           
   691  0022                     ___bmul@product:	
   692                           ; 1 bytes @ 0x2
   693                           
   694  0022                     SetDefaultTimers@verde:	
   695                           ; 1 bytes @ 0x2
   696                           
   697  0022                     ___wmul@multiplicand:	
   698                           ; 2 bytes @ 0x2
   699                           
   700  0022                     ___awmod@dividend:	
   701                           ; 2 bytes @ 0x2
   702                           
   703                           
   704                           ; 2 bytes @ 0x2
   705  0022                     	ds	1
   706  0023                     ??_SetDisplay:	
   707  0023                     bitChange@dato:	
   708                           ; 1 bytes @ 0x3
   709                           
   710  0023                     ADC_Read@canale:	
   711                           ; 1 bytes @ 0x3
   712                           
   713  0023                     SetDisplay@d1:	
   714                           ; 1 bytes @ 0x3
   715                           
   716  0023                     ___bmul@multiplier:	
   717                           ; 1 bytes @ 0x3
   718                           
   719                           
   720                           ; 1 bytes @ 0x3
   721  0023                     	ds	1
   722  0024                     ??_bitParita:	
   723  0024                     ??___wmul:	
   724                           ; 1 bytes @ 0x4
   725                           
   726  0024                     ??___awmod:	
   727                           ; 1 bytes @ 0x4
   728                           
   729  0024                     BuildByte@byte0:	
   730                           ; 1 bytes @ 0x4
   731                           
   732  0024                     GetTime@index:	
   733                           ; 1 bytes @ 0x4
   734                           
   735  0024                     SetDefaultTimers@giallo:	
   736                           ; 1 bytes @ 0x4
   737                           
   738  0024                     ___wmul@product:	
   739                           ; 2 bytes @ 0x4
   740                           
   741  0024                     ___aldiv@dividend:	
   742                           ; 2 bytes @ 0x4
   743                           
   744                           
   745                           ; 4 bytes @ 0x4
   746  0024                     	ds	1
   747  0025                     GetTime@shortInt:	
   748  0025                     ___awmod@counter:	
   749                           ; 1 bytes @ 0x5
   750                           
   751  0025                     BuildByte@txByte:	
   752                           ; 1 bytes @ 0x5
   753                           
   754                           
   755                           ; 5 bytes @ 0x5
   756  0025                     	ds	1
   757  0026                     ??_SetDefaultTimers:	
   758  0026                     ___awmod@sign:	
   759                           ; 1 bytes @ 0x6
   760                           
   761  0026                     GetTime@time:	
   762                           ; 1 bytes @ 0x6
   763                           
   764                           
   765                           ; 2 bytes @ 0x6
   766  0026                     	ds	1
   767  0027                     ?___awdiv:	
   768  0027                     ___awdiv@divisor:	
   769                           ; 2 bytes @ 0x7
   770                           
   771                           
   772                           ; 2 bytes @ 0x7
   773  0027                     	ds	1
   774  0028                     ??___aldiv:	
   775  0028                     bitParita@sommaRow:	
   776                           ; 1 bytes @ 0x8
   777                           
   778                           
   779                           ; 1 bytes @ 0x8
   780  0028                     	ds	1
   781  0029                     bitParita@sommaColumn:	
   782  0029                     ___aldiv@counter:	
   783                           ; 1 bytes @ 0x9
   784                           
   785  0029                     ___awdiv@dividend:	
   786                           ; 1 bytes @ 0x9
   787                           
   788                           
   789                           ; 2 bytes @ 0x9
   790  0029                     	ds	1
   791  002A                     bitParita@errorColumn:	
   792  002A                     BuildByte@sommaRow:	
   793                           ; 1 bytes @ 0xA
   794                           
   795  002A                     ___aldiv@sign:	
   796                           ; 1 bytes @ 0xA
   797                           
   798                           
   799                           ; 1 bytes @ 0xA
   800  002A                     	ds	1
   801  002B                     ??___awdiv:	
   802  002B                     bitParita@error:	
   803                           ; 1 bytes @ 0xB
   804                           
   805  002B                     BuildByte@sommaColumn:	
   806                           ; 1 bytes @ 0xB
   807                           
   808  002B                     ___aldiv@quotient:	
   809                           ; 1 bytes @ 0xB
   810                           
   811                           
   812                           ; 4 bytes @ 0xB
   813  002B                     	ds	1
   814  002C                     bitParita@errorRow:	
   815  002C                     SetDefaultTimers@l:	
   816                           ; 1 bytes @ 0xC
   817                           
   818  002C                     ___awdiv@counter:	
   819                           ; 1 bytes @ 0xC
   820                           
   821  002C                     BuildByte@y:	
   822                           ; 1 bytes @ 0xC
   823                           
   824                           
   825                           ; 2 bytes @ 0xC
   826  002C                     	ds	1
   827  002D                     SetDefaultTimers@i:	
   828  002D                     ___awdiv@sign:	
   829                           ; 1 bytes @ 0xD
   830                           
   831  002D                     bitParita@y:	
   832                           ; 1 bytes @ 0xD
   833                           
   834                           
   835                           ; 2 bytes @ 0xD
   836  002D                     	ds	1
   837  002E                     BuildByte@y_343:	
   838  002E                     ___awdiv@quotient:	
   839                           ; 2 bytes @ 0xE
   840                           
   841                           
   842                           ; 2 bytes @ 0xE
   843  002E                     	ds	1
   844  002F                     ?_UART_Init:	
   845  002F                     bitParita@y_331:	
   846                           ; 1 bytes @ 0xF
   847                           
   848  002F                     UART_Init@baudrate:	
   849                           ; 2 bytes @ 0xF
   850                           
   851                           
   852                           ; 2 bytes @ 0xF
   853  002F                     	ds	1
   854  0030                     ?_GetDigits:	
   855  0030                     ?_map:	
   856                           ; 1 bytes @ 0x10
   857                           
   858  0030                     map@x:	
   859                           ; 2 bytes @ 0x10
   860                           
   861  0030                     BuildByte@i:	
   862                           ; 2 bytes @ 0x10
   863                           
   864  0030                     GetDigits@Time:	
   865                           ; 2 bytes @ 0x10
   866                           
   867                           
   868                           ; 2 bytes @ 0x10
   869  0030                     	ds	1
   870  0031                     ??_UART_Init:	
   871  0031                     bitParita@rx:	
   872                           ; 1 bytes @ 0x11
   873                           
   874                           
   875                           ; 1 bytes @ 0x11
   876  0031                     	ds	1
   877  0032                     ??_GetDigits:	
   878  0032                     map@in_min:	
   879                           ; 1 bytes @ 0x12
   880                           
   881  0032                     bitParita@i:	
   882                           ; 2 bytes @ 0x12
   883                           
   884  0032                     BuildByte@i_342:	
   885                           ; 2 bytes @ 0x12
   886                           
   887                           
   888                           ; 2 bytes @ 0x12
   889  0032                     	ds	2
   890  0034                     ?_sendByte:	
   891  0034                     sendByte@byte1:	
   892                           ; 1 bytes @ 0x14
   893                           
   894  0034                     map@in_max:	
   895                           ; 1 bytes @ 0x14
   896                           
   897  0034                     bitParita@i_330:	
   898                           ; 2 bytes @ 0x14
   899                           
   900                           
   901                           ; 2 bytes @ 0x14
   902  0034                     	ds	1
   903  0035                     sendByte@valore:	
   904  0035                     _GetDigits$1149:	
   905                           ; 1 bytes @ 0x15
   906                           
   907                           
   908                           ; 2 bytes @ 0x15
   909  0035                     	ds	1
   910  0036                     ??_sendByte:	
   911  0036                     map@out_min:	
   912                           ; 1 bytes @ 0x16
   913                           
   914                           
   915                           ; 2 bytes @ 0x16
   916  0036                     	ds	2
   917  0038                     map@out_max:	
   918                           
   919                           ; 2 bytes @ 0x18
   920  0038                     	ds	1
   921  0039                     sendByte@byte0:	
   922                           
   923                           ; 1 bytes @ 0x19
   924  0039                     	ds	1
   925  003A                     ??_map:	
   926  003A                     sendByte@txByte:	
   927                           ; 1 bytes @ 0x1A
   928                           
   929                           
   930                           ; 1 bytes @ 0x1A
   931  003A                     	ds	1
   932  003B                     sendByte@i:	
   933                           
   934                           ; 1 bytes @ 0x1B
   935  003B                     	ds	1
   936  003C                     ??_main:	
   937                           
   938                           ; 1 bytes @ 0x1C
   939  003C                     	ds	16
   940                           
   941                           	psect	maintext
   942  0050                     __pmaintext:	
   943 ;;
   944 ;;Main: autosize = 0, tempsize = 16, incstack = 0, save=0
   945 ;;
   946 ;; *************** function _main *****************
   947 ;; Defined at:
   948 ;;		line 129 in file "main.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;		None
   951 ;; Auto vars:     Size  Location     Type
   952 ;;  i               1   15[BANK2 ] unsigned char 
   953 ;;  index           1   10[BANK2 ] unsigned char 
   954 ;;  colorId         1    1[BANK2 ] unsigned char 
   955 ;;  semaforoId      1    0[BANK2 ] unsigned char 
   956 ;;  i               1   11[BANK2 ] unsigned char 
   957 ;;  i               2   12[BANK2 ] int 
   958 ;;  i               2   16[BANK2 ] int 
   959 ;;  l               1   14[BANK2 ] unsigned char 
   960 ;;  tmp             1    6[BANK2 ] unsigned char 
   961 ;;  time            2    7[BANK2 ] int 
   962 ;;  lux_select      1    9[BANK2 ] unsigned char 
   963 ;;  endCiclo        1    5[BANK2 ] struct .
   964 ;;  pressione       1    4[BANK2 ] unsigned char 
   965 ;;  umidita         1    3[BANK2 ] unsigned char 
   966 ;;  temp            1    2[BANK2 ] unsigned char 
   967 ;; Return value:  Size  Location     Type
   968 ;;                  1    wreg      void 
   969 ;; Registers used:
   970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   971 ;; Tracked objects:
   972 ;;		On entry : B00/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   976 ;;      Params:         0       0       0       0       0
   977 ;;      Locals:         0       0       0       0      18
   978 ;;      Temps:          0      16       0       0       0
   979 ;;      Totals:         0      16       0       0      18
   980 ;;Total ram usage:       34 bytes
   981 ;; Hardware stack levels required when called:    4
   982 ;; This function calls:
   983 ;;		_ADC_Read
   984 ;;		_GetDigits
   985 ;;		_GetTime
   986 ;;		_SetDefaultTimers
   987 ;;		_SetDisplay
   988 ;;		_UART_Init
   989 ;;		___awmod
   990 ;;		___bmul
   991 ;;		_bitParita
   992 ;;		_init_ADC
   993 ;;		_map
   994 ;;		_sendByte
   995 ;; This function is called by:
   996 ;;		Startup code after reset
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           
  1001                           ;psect for function _main
  1002  0050                     _main:	
  1003  0050                     l3034:	
  1004                           ;incstack = 0
  1005                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1006                           
  1007                           
  1008                           ;main.c: 131:     TRISB = 0x1F;
  1009  0050  301F               	movlw	31
  1010  0051  1683               	bsf	3,5	;RP0=1, select bank1
  1011  0052  1303               	bcf	3,6	;RP1=0, select bank1
  1012  0053  0086               	movwf	6	;volatile
  1013                           
  1014                           ;main.c: 132:     TRISC = 0x80;
  1015  0054  3080               	movlw	128
  1016  0055  0087               	movwf	7	;volatile
  1017  0056                     l3036:	
  1018                           
  1019                           ;main.c: 133:     TRISD = 0x00;
  1020  0056  0188               	clrf	8	;volatile
  1021  0057                     l3038:	
  1022                           
  1023                           ;main.c: 134:     TRISE = 0x01;
  1024  0057  3001               	movlw	1
  1025  0058  0089               	movwf	9	;volatile
  1026  0059                     l3040:	
  1027                           
  1028                           ;main.c: 135:     INTCON = 0xE0;
  1029  0059  30E0               	movlw	224
  1030  005A  008B               	movwf	11	;volatile
  1031  005B                     l3042:	
  1032                           
  1033                           ;main.c: 136:     OPTION_REG = 0x04;
  1034  005B  3004               	movlw	4
  1035  005C  0081               	movwf	1	;volatile
  1036  005D                     l3044:	
  1037                           
  1038                           ;main.c: 137:     TMR0 = 6;
  1039  005D  3006               	movlw	6
  1040  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1041  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1042  0060  0081               	movwf	1	;volatile
  1043  0061                     l3046:	
  1044                           
  1045                           ;main.c: 138:     T1CON = 0x31;
  1046  0061  3031               	movlw	49
  1047  0062  0090               	movwf	16	;volatile
  1048  0063                     l3048:	
  1049                           
  1050                           ;main.c: 144:     init_ADC();
  1051  0063  120A  158A  23A3  120A  118A  	fcall	_init_ADC
  1052  0068                     l3050:	
  1053                           
  1054                           ;main.c: 145:     UART_Init(9600);
  1055  0068  3080               	movlw	128
  1056  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1057  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1058  006B  00AF               	movwf	UART_Init@baudrate
  1059  006C  3025               	movlw	37
  1060  006D  00B0               	movwf	UART_Init@baudrate+1
  1061  006E  120A  158A  24D6  120A  118A  	fcall	_UART_Init
  1062  0073                     l3052:	
  1063                           
  1064                           ;main.c: 146:     SetDefaultTimers(2, 2, 2);
  1065  0073  3002               	movlw	2
  1066  0074  1283               	bcf	3,5	;RP0=0, select bank0
  1067  0075  1303               	bcf	3,6	;RP1=0, select bank0
  1068  0076  00A0               	movwf	SetDefaultTimers@rosso
  1069  0077  3000               	movlw	0
  1070  0078  00A1               	movwf	SetDefaultTimers@rosso+1
  1071  0079  3002               	movlw	2
  1072  007A  00A2               	movwf	SetDefaultTimers@verde
  1073  007B  3000               	movlw	0
  1074  007C  00A3               	movwf	SetDefaultTimers@verde+1
  1075  007D  3002               	movlw	2
  1076  007E  00A4               	movwf	SetDefaultTimers@giallo
  1077  007F  3000               	movlw	0
  1078  0080  00A5               	movwf	SetDefaultTimers@giallo+1
  1079  0081  120A  158A  26D9  120A  118A  	fcall	_SetDefaultTimers
  1080  0086                     l3054:	
  1081                           
  1082                           ;main.c: 148:     TMR1H = 60;
  1083  0086  303C               	movlw	60
  1084  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1085  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1086  0089  008F               	movwf	15	;volatile
  1087  008A                     l3056:	
  1088                           
  1089                           ;main.c: 149:     TMR1L = 176;
  1090  008A  30B0               	movlw	176
  1091  008B  008E               	movwf	14	;volatile
  1092  008C                     l3058:	
  1093                           
  1094                           ;main.c: 151:     int time;;main.c: 152:     unsigned char lux_select = 0;
  1095  008C  1283               	bcf	3,5	;RP0=0, select bank2
  1096  008D  1703               	bsf	3,6	;RP1=1, select bank2
  1097  008E  01E1               	clrf	main@lux_select^(0+256)
  1098  008F                     l3060:	
  1099                           
  1100                           ;main.c: 153:     disp = 0;
  1101  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1102  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1103  0091  01DB               	clrf	_disp
  1104  0092                     l3062:	
  1105  0092                     l3064:	
  1106  0092                     l3066:	
  1107  0092                     l3068:	
  1108                           
  1109                           ;main.c: 157:     Bit endCiclo;;main.c: 158:     endCiclo.Bit = 1;
  1110  0092  1283               	bcf	3,5	;RP0=0, select bank2
  1111  0093  1703               	bsf	3,6	;RP1=1, select bank2
  1112  0094  145D               	bsf	main@endCiclo^(0+256),0
  1113  0095                     l3070:	
  1114                           
  1115                           ;main.c: 161:     {;main.c: 163:         if (readGateway.Bit)
  1116  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1117  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1118  0097  1C62               	btfss	_readGateway,0
  1119  0098  289A               	goto	u3271
  1120  0099  289B               	goto	u3270
  1121  009A                     u3271:	
  1122  009A  28C7               	goto	l212
  1123  009B                     u3270:	
  1124  009B  28B2               	goto	l3084
  1125  009C                     l214:	
  1126                           ;main.c: 166:             {;main.c: 167:             case 0x08:
  1127                           
  1128                           
  1129                           ;main.c: 168:                 readGatewayDone.Bit = 1;
  1130  009C  1463               	bsf	_readGatewayDone,0
  1131                           
  1132                           ;main.c: 169:                 readGateway.Bit = 0;
  1133  009D  1062               	bcf	_readGateway,0
  1134                           
  1135                           ;main.c: 170:                 break;
  1136  009E  28C7               	goto	l212
  1137  009F                     l3074:	
  1138                           
  1139                           ;main.c: 177:                 if (timerReadFromGateway >= 4)
  1140  009F  3004               	movlw	4
  1141  00A0  0258               	subwf	_timerReadFromGateway,w
  1142  00A1  1C03               	skipc
  1143  00A2  28A4               	goto	u3281
  1144  00A3  28A5               	goto	u3280
  1145  00A4                     u3281:	
  1146  00A4  28A8               	goto	l3078
  1147  00A5                     u3280:	
  1148  00A5                     l3076:	
  1149                           
  1150                           ;main.c: 178:                 {;main.c: 179:                     readGatewayDone.Bit = 1
      +                          ;
  1151  00A5  1463               	bsf	_readGatewayDone,0
  1152                           
  1153                           ;main.c: 180:                     readGatewayDone.Timeout = 1;
  1154  00A6  14E3               	bsf	_readGatewayDone,1
  1155                           
  1156                           ;main.c: 181:                     readGateway.Bit = 0;
  1157  00A7  1062               	bcf	_readGateway,0
  1158  00A8                     l3078:	
  1159                           
  1160                           ;main.c: 184:                 if (dataFromGatewayIndex >= 15)
  1161  00A8  300F               	movlw	15
  1162  00A9  0259               	subwf	_dataFromGatewayIndex,w
  1163  00AA  1C03               	skipc
  1164  00AB  28AD               	goto	u3291
  1165  00AC  28AE               	goto	u3290
  1166  00AD                     u3291:	
  1167  00AD  28C7               	goto	l212
  1168  00AE                     u3290:	
  1169  00AE                     l3080:	
  1170                           
  1171                           ;main.c: 185:                 {;main.c: 186:                     readGatewayDone.Bit = 1
      +                          ;
  1172  00AE  1463               	bsf	_readGatewayDone,0
  1173                           
  1174                           ;main.c: 187:                     readGatewayDone.Timeout = 0;
  1175  00AF  10E3               	bcf	_readGatewayDone,1
  1176                           
  1177                           ;main.c: 188:                     readGateway.Bit = 0;
  1178  00B0  1062               	bcf	_readGateway,0
  1179  00B1  28C7               	goto	l212
  1180  00B2                     l3084:	
  1181  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  1182  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  1183  00B4  0820               	movf	_dataFromGateway^(0+128),w
  1184  00B5  397F               	andlw	127
  1185  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1186  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  1187  00B8  00BC               	movwf	??_main
  1188  00B9  01BD               	clrf	??_main+1
  1189                           
  1190                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1191                           ; Switch size 1, requested type "simple"
  1192                           ; Number of cases is 1, Range of values is 0 to 0
  1193                           ; switch strategies available:
  1194                           ; Name         Instructions Cycles
  1195                           ; simple_byte            4     3 (average)
  1196                           ; direct_byte           11     8 (fixed)
  1197                           ; jumptable            260     6 (fixed)
  1198                           ;	Chosen strategy is simple_byte
  1199  00BA  083D               	movf	??_main+1,w
  1200  00BB  3A00               	xorlw	0	; case 0
  1201  00BC  1903               	skipnz
  1202  00BD  28BF               	goto	l3338
  1203  00BE  289F               	goto	l3074
  1204  00BF                     l3338:	
  1205                           
  1206                           ; Switch size 1, requested type "simple"
  1207                           ; Number of cases is 2, Range of values is 8 to 10
  1208                           ; switch strategies available:
  1209                           ; Name         Instructions Cycles
  1210                           ; simple_byte            7     4 (average)
  1211                           ; direct_byte           20    11 (fixed)
  1212                           ; jumptable            263     9 (fixed)
  1213                           ;	Chosen strategy is simple_byte
  1214  00BF  083C               	movf	??_main,w
  1215  00C0  3A08               	xorlw	8	; case 8
  1216  00C1  1903               	skipnz
  1217  00C2  289C               	goto	l214
  1218  00C3  3A02               	xorlw	2	; case 10
  1219  00C4  1903               	skipnz
  1220  00C5  289C               	goto	l214
  1221  00C6  289F               	goto	l3074
  1222  00C7                     l212:	
  1223                           ;main.c: 192:         }
  1224                           
  1225                           
  1226                           ;main.c: 195:         if (readGatewayDone.Bit)
  1227  00C7  1C63               	btfss	_readGatewayDone,0
  1228  00C8  28CA               	goto	u3301
  1229  00C9  28CB               	goto	u3300
  1230  00CA                     u3301:	
  1231  00CA  2962               	goto	l220
  1232  00CB                     u3300:	
  1233  00CB                     l3086:	
  1234                           
  1235                           ;main.c: 196:         {;main.c: 198:             readGateway.Bit = 0;
  1236  00CB  1062               	bcf	_readGateway,0
  1237  00CC                     l3088:	
  1238                           
  1239                           ;main.c: 199:             dataFromGatewayIndex = 0;
  1240  00CC  01D9               	clrf	_dataFromGatewayIndex
  1241  00CD                     l3090:	
  1242                           
  1243                           ;main.c: 200:             readGatewayDone.Bit = 0;
  1244  00CD  1063               	bcf	_readGatewayDone,0
  1245                           
  1246                           ;main.c: 201:             timerReadFromGateway = 0;
  1247  00CE  01D8               	clrf	_timerReadFromGateway
  1248  00CF                     l3092:	
  1249                           
  1250                           ;main.c: 204:             if (readGatewayDone.Timeout)
  1251  00CF  1CE3               	btfss	_readGatewayDone,1
  1252  00D0  28D2               	goto	u3311
  1253  00D1  28D3               	goto	u3310
  1254  00D2                     u3311:	
  1255  00D2  28D5               	goto	l3096
  1256  00D3                     u3310:	
  1257  00D3                     l3094:	
  1258                           
  1259                           ;main.c: 205:             {;main.c: 206:                 readGatewayDone.Timeout = 0;
  1260  00D3  10E3               	bcf	_readGatewayDone,1
  1261                           
  1262                           ;main.c: 207:             }
  1263  00D4  2962               	goto	l220
  1264  00D5                     l3096:	
  1265                           
  1266                           ;main.c: 210:             {;main.c: 211:                 bitParita(dataFromGateway);
  1267  00D5  30A0               	movlw	(low (_dataFromGateway| 0))& (0+255)
  1268  00D6  120A  118A  264C  120A  118A  	fcall	_bitParita
  1269  00DB                     l3098:	
  1270                           
  1271                           ;main.c: 212:                 unsigned char tmp;;main.c: 213:                 for (unsig
      +                          ned char i = 0; i < 3; i++)
  1272  00DB  1283               	bcf	3,5	;RP0=0, select bank2
  1273  00DC  1703               	bsf	3,6	;RP1=1, select bank2
  1274  00DD  01E3               	clrf	main@i^(0+256)
  1275  00DE                     l3100:	
  1276  00DE  3003               	movlw	3
  1277  00DF  0263               	subwf	main@i^(0+256),w
  1278  00E0  1C03               	skipc
  1279  00E1  28E3               	goto	u3321
  1280  00E2  28E4               	goto	u3320
  1281  00E3                     u3321:	
  1282  00E3  28E5               	goto	l3104
  1283  00E4                     u3320:	
  1284  00E4  2962               	goto	l220
  1285  00E5                     l3104:	
  1286                           
  1287                           ;main.c: 214:                 {;main.c: 215:                     unsigned char index = i
      +                           * 5;
  1288  00E5  3005               	movlw	5
  1289  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  1290  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  1291  00E8  00BC               	movwf	??_main
  1292  00E9  083C               	movf	??_main,w
  1293  00EA  00A0               	movwf	___bmul@multiplicand
  1294  00EB  1283               	bcf	3,5	;RP0=0, select bank2
  1295  00EC  1703               	bsf	3,6	;RP1=1, select bank2
  1296  00ED  0863               	movf	main@i^(0+256),w
  1297  00EE  120A  158A  23DE  120A  118A  	fcall	___bmul
  1298  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1299  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1300  00F5  00BD               	movwf	??_main+1
  1301  00F6  083D               	movf	??_main+1,w
  1302  00F7  1283               	bcf	3,5	;RP0=0, select bank2
  1303  00F8  1703               	bsf	3,6	;RP1=1, select bank2
  1304  00F9  00E2               	movwf	main@index^(0+256)
  1305  00FA                     l3106:	
  1306                           
  1307                           ;main.c: 216:                     tmp = dataFromGateway[index];
  1308  00FA  0862               	movf	main@index^(0+256),w
  1309  00FB  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1310  00FC  0084               	movwf	4
  1311  00FD  1383               	bcf	3,7	;select IRP bank1
  1312  00FE  0800               	movf	0,w
  1313  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1314  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1315  0101  00BC               	movwf	??_main
  1316  0102  083C               	movf	??_main,w
  1317  0103  1283               	bcf	3,5	;RP0=0, select bank2
  1318  0104  1703               	bsf	3,6	;RP1=1, select bank2
  1319  0105  00DE               	movwf	main@tmp^(0+256)
  1320  0106                     l3108:	
  1321                           
  1322                           ;main.c: 217:                     unsigned char semaforoId = (tmp >> 1) & 0x0F;
  1323  0106  085E               	movf	main@tmp^(0+256),w
  1324  0107  1283               	bcf	3,5	;RP0=0, select bank0
  1325  0108  1303               	bcf	3,6	;RP1=0, select bank0
  1326  0109  00BC               	movwf	??_main
  1327  010A  1003               	clrc
  1328  010B  0C3C               	rrf	??_main,w
  1329  010C  390F               	andlw	15
  1330  010D  00BD               	movwf	??_main+1
  1331  010E  083D               	movf	??_main+1,w
  1332  010F  1283               	bcf	3,5	;RP0=0, select bank2
  1333  0110  1703               	bsf	3,6	;RP1=1, select bank2
  1334  0111  00D8               	movwf	main@semaforoId^(0+256)
  1335  0112                     l3110:	
  1336                           
  1337                           ;main.c: 218:                     tmp = dataFromGateway[index];
  1338  0112  0862               	movf	main@index^(0+256),w
  1339  0113  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  1340  0114  0084               	movwf	4
  1341  0115  0800               	movf	0,w
  1342  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1343  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1344  0118  00BC               	movwf	??_main
  1345  0119  083C               	movf	??_main,w
  1346  011A  1283               	bcf	3,5	;RP0=0, select bank2
  1347  011B  1703               	bsf	3,6	;RP1=1, select bank2
  1348  011C  00DE               	movwf	main@tmp^(0+256)
  1349  011D                     l3112:	
  1350                           
  1351                           ;main.c: 219:                     unsigned char colorId = ((tmp >> 5) & 0x03) - 1;
  1352  011D  085E               	movf	main@tmp^(0+256),w
  1353  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1354  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0120  00BC               	movwf	??_main
  1356  0121  3005               	movlw	5
  1357  0122                     u3335:	
  1358  0122  1003               	clrc
  1359  0123  0CBC               	rrf	??_main,f
  1360  0124  3EFF               	addlw	-1
  1361  0125  1D03               	skipz
  1362  0126  2922               	goto	u3335
  1363  0127  083C               	movf	??_main,w
  1364  0128  3903               	andlw	3
  1365  0129  3EFF               	addlw	255
  1366  012A  00BD               	movwf	??_main+1
  1367  012B  083D               	movf	??_main+1,w
  1368  012C  1283               	bcf	3,5	;RP0=0, select bank2
  1369  012D  1703               	bsf	3,6	;RP1=1, select bank2
  1370  012E  00D9               	movwf	main@colorId^(0+256)
  1371  012F                     l3114:	
  1372                           
  1373                           ;main.c: 221:                     (*(Semafori[semaforoId])).new_times[colorId] = GetTime
      +                          (index);
  1374  012F  0862               	movf	main@index^(0+256),w
  1375  0130  120A  158A  2510  120A  118A  	fcall	_GetTime
  1376  0135  1283               	bcf	3,5	;RP0=0, select bank2
  1377  0136  1703               	bsf	3,6	;RP1=1, select bank2
  1378  0137  0858               	movf	main@semaforoId^(0+256),w
  1379  0138  1283               	bcf	3,5	;RP0=0, select bank0
  1380  0139  1303               	bcf	3,6	;RP1=0, select bank0
  1381  013A  00BC               	movwf	??_main
  1382  013B  073C               	addwf	??_main,w
  1383  013C  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1384  013D  0084               	movwf	4
  1385  013E  1383               	bcf	3,7	;select IRP bank1
  1386  013F  0800               	movf	0,w
  1387  0140  00BD               	movwf	??_main+1
  1388  0141  0A84               	incf	4,f
  1389  0142  0800               	movf	0,w
  1390  0143  00BE               	movwf	??_main+2
  1391  0144  1283               	bcf	3,5	;RP0=0, select bank2
  1392  0145  1703               	bsf	3,6	;RP1=1, select bank2
  1393  0146  0859               	movf	main@colorId^(0+256),w
  1394  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1395  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1396  0149  00BF               	movwf	??_main+3
  1397  014A  073F               	addwf	??_main+3,w
  1398  014B  073D               	addwf	??_main+1,w
  1399  014C  00C0               	movwf	??_main+4
  1400  014D  083E               	movf	??_main+2,w
  1401  014E  1803               	skipnc
  1402  014F  3E01               	addlw	1
  1403  0150  00C1               	movwf	??_main+5
  1404  0151  0840               	movf	??_main+4,w
  1405  0152  0084               	movwf	4
  1406  0153  1783               	bsf	3,7
  1407  0154  1C41               	btfss	??_main+5,0
  1408  0155  1383               	bcf	3,7
  1409  0156  0820               	movf	?_GetTime,w
  1410  0157  0080               	movwf	0
  1411  0158  0A84               	incf	4,f
  1412  0159  0821               	movf	?_GetTime+1,w
  1413  015A  0080               	movwf	0
  1414  015B                     l3116:	
  1415                           
  1416                           ;main.c: 222:                 }
  1417  015B  3001               	movlw	1
  1418  015C  00BC               	movwf	??_main
  1419  015D  083C               	movf	??_main,w
  1420  015E  1283               	bcf	3,5	;RP0=0, select bank2
  1421  015F  1703               	bsf	3,6	;RP1=1, select bank2
  1422  0160  07E3               	addwf	main@i^(0+256),f
  1423  0161  28DE               	goto	l3100
  1424  0162                     l220:	
  1425                           ;main.c: 224:         }
  1426                           
  1427                           
  1428                           ;main.c: 228:         if (endCiclo.Bit)
  1429  0162  1283               	bcf	3,5	;RP0=0, select bank2
  1430  0163  1703               	bsf	3,6	;RP1=1, select bank2
  1431  0164  1C5D               	btfss	main@endCiclo^(0+256),0
  1432  0165  2967               	goto	u3341
  1433  0166  2968               	goto	u3340
  1434  0167                     u3341:	
  1435  0167  2A59               	goto	l225
  1436  0168                     u3340:	
  1437  0168                     l3120:	
  1438                           
  1439                           ;main.c: 229:         {;main.c: 231:             for (unsigned char l = 0; l < 16; l++)
  1440  0168  01E6               	clrf	main@l^(0+256)
  1441  0169                     l3122:	
  1442  0169  3010               	movlw	16
  1443  016A  0266               	subwf	main@l^(0+256),w
  1444  016B  1C03               	skipc
  1445  016C  296E               	goto	u3351
  1446  016D  296F               	goto	u3350
  1447  016E                     u3351:	
  1448  016E  2970               	goto	l3126
  1449  016F                     u3350:	
  1450  016F  2A2A               	goto	l3144
  1451  0170                     l3126:	
  1452                           
  1453                           ;main.c: 232:             {;main.c: 233:                 for (unsigned char i = 0; i < 3
      +                          ; i++)
  1454  0170  01E7               	clrf	main@i_444^(0+256)
  1455  0171                     l3128:	
  1456  0171  3003               	movlw	3
  1457  0172  0267               	subwf	main@i_444^(0+256),w
  1458  0173  1C03               	skipc
  1459  0174  2976               	goto	u3361
  1460  0175  2977               	goto	u3360
  1461  0176                     u3361:	
  1462  0176  2978               	goto	l3132
  1463  0177                     u3360:	
  1464  0177  2A21               	goto	l3140
  1465  0178                     l3132:	
  1466                           
  1467                           ;main.c: 234:                 {;main.c: 235:                     if ((*(Semafori[l])).ti
      +                          mes[i] != (*(Semafori[l])).new_times[i])
  1468  0178  0866               	movf	main@l^(0+256),w
  1469  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1470  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1471  017B  00BC               	movwf	??_main
  1472  017C  073C               	addwf	??_main,w
  1473  017D  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1474  017E  0084               	movwf	4
  1475  017F  1383               	bcf	3,7	;select IRP bank1
  1476  0180  0800               	movf	0,w
  1477  0181  00BD               	movwf	??_main+1
  1478  0182  0A84               	incf	4,f
  1479  0183  0800               	movf	0,w
  1480  0184  00BE               	movwf	??_main+2
  1481  0185  1283               	bcf	3,5	;RP0=0, select bank2
  1482  0186  1703               	bsf	3,6	;RP1=1, select bank2
  1483  0187  0867               	movf	main@i_444^(0+256),w
  1484  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1485  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1486  018A  00BF               	movwf	??_main+3
  1487  018B  073F               	addwf	??_main+3,w
  1488  018C  073D               	addwf	??_main+1,w
  1489  018D  00C0               	movwf	??_main+4
  1490  018E  083E               	movf	??_main+2,w
  1491  018F  1803               	skipnc
  1492  0190  3E01               	addlw	1
  1493  0191  00C1               	movwf	??_main+5
  1494  0192  0840               	movf	??_main+4,w
  1495  0193  0084               	movwf	4
  1496  0194  1783               	bsf	3,7
  1497  0195  1C41               	btfss	??_main+5,0
  1498  0196  1383               	bcf	3,7
  1499  0197  0800               	movf	0,w
  1500  0198  00C2               	movwf	??_main+6
  1501  0199  0A84               	incf	4,f
  1502  019A  0800               	movf	0,w
  1503  019B  00C3               	movwf	??_main+7
  1504  019C  1283               	bcf	3,5	;RP0=0, select bank2
  1505  019D  1703               	bsf	3,6	;RP1=1, select bank2
  1506  019E  0866               	movf	main@l^(0+256),w
  1507  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1508  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1509  01A1  00C4               	movwf	??_main+8
  1510  01A2  0744               	addwf	??_main+8,w
  1511  01A3  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1512  01A4  0084               	movwf	4
  1513  01A5  1383               	bcf	3,7	;select IRP bank1
  1514  01A6  0800               	movf	0,w
  1515  01A7  00C5               	movwf	??_main+9
  1516  01A8  0A84               	incf	4,f
  1517  01A9  0800               	movf	0,w
  1518  01AA  00C6               	movwf	??_main+10
  1519  01AB  1283               	bcf	3,5	;RP0=0, select bank2
  1520  01AC  1703               	bsf	3,6	;RP1=1, select bank2
  1521  01AD  0867               	movf	main@i_444^(0+256),w
  1522  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1523  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1524  01B0  00C7               	movwf	??_main+11
  1525  01B1  0747               	addwf	??_main+11,w
  1526  01B2  3E06               	addlw	6
  1527  01B3  0745               	addwf	??_main+9,w
  1528  01B4  00C8               	movwf	??_main+12
  1529  01B5  0846               	movf	??_main+10,w
  1530  01B6  1803               	skipnc
  1531  01B7  3E01               	addlw	1
  1532  01B8  00C9               	movwf	??_main+13
  1533  01B9  0848               	movf	??_main+12,w
  1534  01BA  0084               	movwf	4
  1535  01BB  1783               	bsf	3,7
  1536  01BC  1C49               	btfss	??_main+13,0
  1537  01BD  1383               	bcf	3,7
  1538  01BE  0800               	movf	0,w
  1539  01BF  00CA               	movwf	??_main+14
  1540  01C0  0A84               	incf	4,f
  1541  01C1  0800               	movf	0,w
  1542  01C2  00CB               	movwf	??_main+15
  1543  01C3  0843               	movf	??_main+7,w
  1544  01C4  064B               	xorwf	??_main+15,w
  1545  01C5  1D03               	skipz
  1546  01C6  29C9               	goto	u3375
  1547  01C7  0842               	movf	??_main+6,w
  1548  01C8  064A               	xorwf	??_main+14,w
  1549  01C9                     u3375:	
  1550  01C9  1903               	skipnz
  1551  01CA  29CC               	goto	u3371
  1552  01CB  29CD               	goto	u3370
  1553  01CC                     u3371:	
  1554  01CC  2A1A               	goto	l3136
  1555  01CD                     u3370:	
  1556  01CD                     l3134:	
  1557                           
  1558                           ;main.c: 236:                     {;main.c: 237:                         (*(Semafori[l])
      +                          ).times[i] = (*(Semafori[l])).new_times[i];
  1559  01CD  1283               	bcf	3,5	;RP0=0, select bank2
  1560  01CE  1703               	bsf	3,6	;RP1=1, select bank2
  1561  01CF  0866               	movf	main@l^(0+256),w
  1562  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1563  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1564  01D2  00BC               	movwf	??_main
  1565  01D3  073C               	addwf	??_main,w
  1566  01D4  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1567  01D5  0084               	movwf	4
  1568  01D6  1383               	bcf	3,7	;select IRP bank1
  1569  01D7  0800               	movf	0,w
  1570  01D8  00BD               	movwf	??_main+1
  1571  01D9  0A84               	incf	4,f
  1572  01DA  0800               	movf	0,w
  1573  01DB  00BE               	movwf	??_main+2
  1574  01DC  1283               	bcf	3,5	;RP0=0, select bank2
  1575  01DD  1703               	bsf	3,6	;RP1=1, select bank2
  1576  01DE  0867               	movf	main@i_444^(0+256),w
  1577  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1578  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  1579  01E1  00BF               	movwf	??_main+3
  1580  01E2  073F               	addwf	??_main+3,w
  1581  01E3  073D               	addwf	??_main+1,w
  1582  01E4  00C0               	movwf	??_main+4
  1583  01E5  083E               	movf	??_main+2,w
  1584  01E6  1803               	skipnc
  1585  01E7  3E01               	addlw	1
  1586  01E8  00C1               	movwf	??_main+5
  1587  01E9  0840               	movf	??_main+4,w
  1588  01EA  0084               	movwf	4
  1589  01EB  1783               	bsf	3,7
  1590  01EC  1C41               	btfss	??_main+5,0
  1591  01ED  1383               	bcf	3,7
  1592  01EE  0800               	movf	0,w
  1593  01EF  00C2               	movwf	??_main+6
  1594  01F0  0A84               	incf	4,f
  1595  01F1  0800               	movf	0,w
  1596  01F2  00C3               	movwf	??_main+7
  1597  01F3  1283               	bcf	3,5	;RP0=0, select bank2
  1598  01F4  1703               	bsf	3,6	;RP1=1, select bank2
  1599  01F5  0866               	movf	main@l^(0+256),w
  1600  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  1601  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  1602  01F8  00C4               	movwf	??_main+8
  1603  01F9  0744               	addwf	??_main+8,w
  1604  01FA  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1605  01FB  0084               	movwf	4
  1606  01FC  1383               	bcf	3,7	;select IRP bank1
  1607  01FD  0800               	movf	0,w
  1608  01FE  00C5               	movwf	??_main+9
  1609  01FF  0A84               	incf	4,f
  1610  0200  0800               	movf	0,w
  1611  0201  00C6               	movwf	??_main+10
  1612  0202  1283               	bcf	3,5	;RP0=0, select bank2
  1613  0203  1703               	bsf	3,6	;RP1=1, select bank2
  1614  0204  0867               	movf	main@i_444^(0+256),w
  1615  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1616  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1617  0207  00C7               	movwf	??_main+11
  1618  0208  0747               	addwf	??_main+11,w
  1619  0209  3E06               	addlw	6
  1620  020A  0745               	addwf	??_main+9,w
  1621  020B  00C8               	movwf	??_main+12
  1622  020C  0846               	movf	??_main+10,w
  1623  020D  1803               	skipnc
  1624  020E  3E01               	addlw	1
  1625  020F  00C9               	movwf	??_main+13
  1626  0210  0848               	movf	??_main+12,w
  1627  0211  0084               	movwf	4
  1628  0212  1783               	bsf	3,7
  1629  0213  1C49               	btfss	??_main+13,0
  1630  0214  1383               	bcf	3,7
  1631  0215  0842               	movf	??_main+6,w
  1632  0216  0080               	movwf	0
  1633  0217  0A84               	incf	4,f
  1634  0218  0843               	movf	??_main+7,w
  1635  0219  0080               	movwf	0
  1636  021A                     l3136:	
  1637                           
  1638                           ;main.c: 239:                 }
  1639  021A  3001               	movlw	1
  1640  021B  00BC               	movwf	??_main
  1641  021C  083C               	movf	??_main,w
  1642  021D  1283               	bcf	3,5	;RP0=0, select bank2
  1643  021E  1703               	bsf	3,6	;RP1=1, select bank2
  1644  021F  07E7               	addwf	main@i_444^(0+256),f
  1645  0220  2971               	goto	l3128
  1646  0221                     l3140:	
  1647                           
  1648                           ;main.c: 240:             }
  1649  0221  3001               	movlw	1
  1650  0222  1283               	bcf	3,5	;RP0=0, select bank0
  1651  0223  1303               	bcf	3,6	;RP1=0, select bank0
  1652  0224  00BC               	movwf	??_main
  1653  0225  083C               	movf	??_main,w
  1654  0226  1283               	bcf	3,5	;RP0=0, select bank2
  1655  0227  1703               	bsf	3,6	;RP1=1, select bank2
  1656  0228  07E6               	addwf	main@l^(0+256),f
  1657  0229  2969               	goto	l3122
  1658  022A                     l3144:	
  1659                           
  1660                           ;main.c: 244:             {;main.c: 245:                 n_semafori = (n_semafori + 1) %
      +                           16;
  1661  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1662  022B  0864               	movf	_n_semafori,w
  1663  022C  3E01               	addlw	1
  1664  022D  390F               	andlw	15
  1665  022E  00BC               	movwf	??_main
  1666  022F  083C               	movf	??_main,w
  1667  0230  00E4               	movwf	_n_semafori
  1668  0231                     l3146:	
  1669                           
  1670                           ;main.c: 246:             } while ((*(Semafori[n_semafori])).times[0] == 0 && n_semafori
      +                           > 0);
  1671  0231  0864               	movf	_n_semafori,w
  1672  0232  00BC               	movwf	??_main
  1673  0233  073C               	addwf	??_main,w
  1674  0234  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1675  0235  0084               	movwf	4
  1676  0236  1383               	bcf	3,7	;select IRP bank1
  1677  0237  0800               	movf	0,w
  1678  0238  00BD               	movwf	??_main+1
  1679  0239  0A84               	incf	4,f
  1680  023A  0800               	movf	0,w
  1681  023B  00BE               	movwf	??_main+2
  1682  023C  083D               	movf	??_main+1,w
  1683  023D  3E06               	addlw	6
  1684  023E  00BF               	movwf	??_main+3
  1685  023F  083E               	movf	??_main+2,w
  1686  0240  1803               	skipnc
  1687  0241  3E01               	addlw	1
  1688  0242  3E00               	addlw	0
  1689  0243  00C0               	movwf	??_main+4
  1690  0244  083F               	movf	??_main+3,w
  1691  0245  0084               	movwf	4
  1692  0246  1783               	bsf	3,7
  1693  0247  1C40               	btfss	??_main+4,0
  1694  0248  1383               	bcf	3,7
  1695  0249  0800               	movf	0,w
  1696  024A  00C1               	movwf	??_main+5
  1697  024B  0A84               	incf	4,f
  1698  024C  0800               	movf	0,w
  1699  024D  00C2               	movwf	??_main+6
  1700  024E  0841               	movf	??_main+5,w
  1701  024F  0442               	iorwf	??_main+6,w
  1702  0250  1D03               	btfss	3,2
  1703  0251  2A53               	goto	u3381
  1704  0252  2A54               	goto	u3380
  1705  0253                     u3381:	
  1706  0253  2A59               	goto	l225
  1707  0254                     u3380:	
  1708  0254                     l3148:	
  1709  0254  0864               	movf	_n_semafori,w
  1710  0255  1D03               	btfss	3,2
  1711  0256  2A58               	goto	u3391
  1712  0257  2A59               	goto	u3390
  1713  0258                     u3391:	
  1714  0258  2A2A               	goto	l3144
  1715  0259                     u3390:	
  1716  0259                     l225:	
  1717                           ;main.c: 247:         }
  1718                           
  1719                           
  1720                           ;main.c: 251:         if (secondPassed.Bit && cycled.Bit)
  1721  0259  1303               	bcf	3,6	;RP1=0, select bank0
  1722  025A  1C61               	btfss	_secondPassed,0
  1723  025B  2A5D               	goto	u3401
  1724  025C  2A5E               	goto	u3400
  1725  025D                     u3401:	
  1726  025D  2B1F               	goto	l3168
  1727  025E                     u3400:	
  1728  025E                     l3150:	
  1729  025E  1C60               	btfss	_cycled,0
  1730  025F  2A61               	goto	u3411
  1731  0260  2A62               	goto	u3410
  1732  0261                     u3411:	
  1733  0261  2B1F               	goto	l3168
  1734  0262                     u3410:	
  1735  0262                     l3152:	
  1736                           
  1737                           ;main.c: 252:         {;main.c: 253:             time++;
  1738  0262  3001               	movlw	1
  1739  0263  1283               	bcf	3,5	;RP0=0, select bank2
  1740  0264  1703               	bsf	3,6	;RP1=1, select bank2
  1741  0265  07DF               	addwf	main@time^(0+256),f
  1742  0266  1803               	skipnc
  1743  0267  0AE0               	incf	(main@time+1)^(0+256),f
  1744  0268  3000               	movlw	0
  1745  0269  07E0               	addwf	(main@time+1)^(0+256),f
  1746  026A                     l3154:	
  1747                           
  1748                           ;main.c: 254:             endCiclo.Bit = 0;
  1749  026A  105D               	bcf	main@endCiclo^(0+256),0
  1750  026B                     l3156:	
  1751                           
  1752                           ;main.c: 256:             if ((*Semafori[n_semafori]).times[lux_select] - time < 0)
  1753  026B  1283               	bcf	3,5	;RP0=0, select bank0
  1754  026C  1303               	bcf	3,6	;RP1=0, select bank0
  1755  026D  0864               	movf	_n_semafori,w
  1756  026E  00BC               	movwf	??_main
  1757  026F  073C               	addwf	??_main,w
  1758  0270  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1759  0271  0084               	movwf	4
  1760  0272  1383               	bcf	3,7	;select IRP bank1
  1761  0273  0800               	movf	0,w
  1762  0274  00BD               	movwf	??_main+1
  1763  0275  0A84               	incf	4,f
  1764  0276  0800               	movf	0,w
  1765  0277  00BE               	movwf	??_main+2
  1766  0278  1283               	bcf	3,5	;RP0=0, select bank2
  1767  0279  1703               	bsf	3,6	;RP1=1, select bank2
  1768  027A  0861               	movf	main@lux_select^(0+256),w
  1769  027B  1283               	bcf	3,5	;RP0=0, select bank0
  1770  027C  1303               	bcf	3,6	;RP1=0, select bank0
  1771  027D  00BF               	movwf	??_main+3
  1772  027E  073F               	addwf	??_main+3,w
  1773  027F  3E06               	addlw	6
  1774  0280  073D               	addwf	??_main+1,w
  1775  0281  00C0               	movwf	??_main+4
  1776  0282  083E               	movf	??_main+2,w
  1777  0283  1803               	skipnc
  1778  0284  3E01               	addlw	1
  1779  0285  00C1               	movwf	??_main+5
  1780  0286  0840               	movf	??_main+4,w
  1781  0287  0084               	movwf	4
  1782  0288  1783               	bsf	3,7
  1783  0289  1C41               	btfss	??_main+5,0
  1784  028A  1383               	bcf	3,7
  1785  028B  0800               	movf	0,w
  1786  028C  00C2               	movwf	??_main+6
  1787  028D  0A84               	incf	4,f
  1788  028E  0800               	movf	0,w
  1789  028F  00C3               	movwf	??_main+7
  1790  0290  1283               	bcf	3,5	;RP0=0, select bank2
  1791  0291  1703               	bsf	3,6	;RP1=1, select bank2
  1792  0292  085F               	movf	main@time^(0+256),w
  1793  0293  1283               	bcf	3,5	;RP0=0, select bank0
  1794  0294  1303               	bcf	3,6	;RP1=0, select bank0
  1795  0295  0242               	subwf	??_main+6,w
  1796  0296  00C4               	movwf	??_main+8
  1797  0297  1283               	bcf	3,5	;RP0=0, select bank2
  1798  0298  1703               	bsf	3,6	;RP1=1, select bank2
  1799  0299  0860               	movf	(main@time+1)^(0+256),w
  1800  029A  1C03               	skipc
  1801  029B  0A60               	incf	(main@time+1)^(0+256),w
  1802  029C  1283               	bcf	3,5	;RP0=0, select bank0
  1803  029D  1303               	bcf	3,6	;RP1=0, select bank0
  1804  029E  0243               	subwf	??_main+7,w
  1805  029F  00C5               	movwf	??_main+9
  1806  02A0  1FC5               	btfss	??_main+9,7
  1807  02A1  2AA3               	goto	u3421
  1808  02A2  2AA4               	goto	u3420
  1809  02A3                     u3421:	
  1810  02A3  2AA7               	goto	l3160
  1811  02A4                     u3420:	
  1812  02A4                     l3158:	
  1813                           
  1814                           ;main.c: 257:             {;main.c: 258:                 endCiclo.Bit = 1;
  1815  02A4  1283               	bcf	3,5	;RP0=0, select bank2
  1816  02A5  1703               	bsf	3,6	;RP1=1, select bank2
  1817  02A6  145D               	bsf	main@endCiclo^(0+256),0
  1818  02A7                     l3160:	
  1819                           
  1820                           ;main.c: 261:             if (lux_select == 2 && time >= (*Semafori[n_semafori]).times[2
      +                          ])
  1821  02A7  3002               	movlw	2
  1822  02A8  1283               	bcf	3,5	;RP0=0, select bank2
  1823  02A9  1703               	bsf	3,6	;RP1=1, select bank2
  1824  02AA  0661               	xorwf	main@lux_select^(0+256),w
  1825  02AB  1D03               	btfss	3,2
  1826  02AC  2AAE               	goto	u3431
  1827  02AD  2AAF               	goto	u3430
  1828  02AE                     u3431:	
  1829  02AE  2AE5               	goto	l3166
  1830  02AF                     u3430:	
  1831  02AF                     l3162:	
  1832  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  1833  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  1834  02B1  0864               	movf	_n_semafori,w
  1835  02B2  00BC               	movwf	??_main
  1836  02B3  073C               	addwf	??_main,w
  1837  02B4  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1838  02B5  0084               	movwf	4
  1839  02B6  1383               	bcf	3,7	;select IRP bank1
  1840  02B7  0800               	movf	0,w
  1841  02B8  00BD               	movwf	??_main+1
  1842  02B9  0A84               	incf	4,f
  1843  02BA  0800               	movf	0,w
  1844  02BB  00BE               	movwf	??_main+2
  1845  02BC  083D               	movf	??_main+1,w
  1846  02BD  3E0A               	addlw	10
  1847  02BE  00BF               	movwf	??_main+3
  1848  02BF  083E               	movf	??_main+2,w
  1849  02C0  1803               	skipnc
  1850  02C1  3E01               	addlw	1
  1851  02C2  3E00               	addlw	0
  1852  02C3  00C0               	movwf	??_main+4
  1853  02C4  083F               	movf	??_main+3,w
  1854  02C5  0084               	movwf	4
  1855  02C6  1783               	bsf	3,7
  1856  02C7  1C40               	btfss	??_main+4,0
  1857  02C8  1383               	bcf	3,7
  1858  02C9  0800               	movf	0,w
  1859  02CA  00C1               	movwf	??_main+5
  1860  02CB  0A84               	incf	4,f
  1861  02CC  0800               	movf	0,w
  1862  02CD  00C2               	movwf	??_main+6
  1863  02CE  1283               	bcf	3,5	;RP0=0, select bank2
  1864  02CF  1703               	bsf	3,6	;RP1=1, select bank2
  1865  02D0  0860               	movf	(main@time+1)^(0+256),w
  1866  02D1  3A80               	xorlw	128
  1867  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  1868  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  1869  02D4  00C3               	movwf	??_main+7
  1870  02D5  0842               	movf	??_main+6,w
  1871  02D6  3A80               	xorlw	128
  1872  02D7  0243               	subwf	??_main+7,w
  1873  02D8  1D03               	skipz
  1874  02D9  2ADE               	goto	u3445
  1875  02DA  0841               	movf	??_main+5,w
  1876  02DB  1283               	bcf	3,5	;RP0=0, select bank2
  1877  02DC  1703               	bsf	3,6	;RP1=1, select bank2
  1878  02DD  025F               	subwf	main@time^(0+256),w
  1879  02DE                     u3445:	
  1880  02DE  1C03               	skipc
  1881  02DF  2AE1               	goto	u3441
  1882  02E0  2AE2               	goto	u3440
  1883  02E1                     u3441:	
  1884  02E1  2AE5               	goto	l3166
  1885  02E2                     u3440:	
  1886  02E2                     l3164:	
  1887                           
  1888                           ;main.c: 262:             {;main.c: 263:                 endCiclo.Bit = 1;
  1889  02E2  1283               	bcf	3,5	;RP0=0, select bank2
  1890  02E3  1703               	bsf	3,6	;RP1=1, select bank2
  1891  02E4  145D               	bsf	main@endCiclo^(0+256),0
  1892  02E5                     l3166:	
  1893                           
  1894                           ;main.c: 266:             GetDigits((*Semafori[n_semafori]).times[lux_select] - time);
  1895  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  1896  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  1897  02E7  0864               	movf	_n_semafori,w
  1898  02E8  00BC               	movwf	??_main
  1899  02E9  073C               	addwf	??_main,w
  1900  02EA  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  1901  02EB  0084               	movwf	4
  1902  02EC  1383               	bcf	3,7	;select IRP bank1
  1903  02ED  0800               	movf	0,w
  1904  02EE  00BD               	movwf	??_main+1
  1905  02EF  0A84               	incf	4,f
  1906  02F0  0800               	movf	0,w
  1907  02F1  00BE               	movwf	??_main+2
  1908  02F2  1283               	bcf	3,5	;RP0=0, select bank2
  1909  02F3  1703               	bsf	3,6	;RP1=1, select bank2
  1910  02F4  0861               	movf	main@lux_select^(0+256),w
  1911  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  1912  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  1913  02F7  00BF               	movwf	??_main+3
  1914  02F8  073F               	addwf	??_main+3,w
  1915  02F9  3E06               	addlw	6
  1916  02FA  073D               	addwf	??_main+1,w
  1917  02FB  00C0               	movwf	??_main+4
  1918  02FC  083E               	movf	??_main+2,w
  1919  02FD  1803               	skipnc
  1920  02FE  3E01               	addlw	1
  1921  02FF  00C1               	movwf	??_main+5
  1922  0300  0840               	movf	??_main+4,w
  1923  0301  0084               	movwf	4
  1924  0302  1783               	bsf	3,7
  1925  0303  1C41               	btfss	??_main+5,0
  1926  0304  1383               	bcf	3,7
  1927  0305  0800               	movf	0,w
  1928  0306  00C2               	movwf	??_main+6
  1929  0307  0A84               	incf	4,f
  1930  0308  0800               	movf	0,w
  1931  0309  00C3               	movwf	??_main+7
  1932  030A  1283               	bcf	3,5	;RP0=0, select bank2
  1933  030B  1703               	bsf	3,6	;RP1=1, select bank2
  1934  030C  085F               	movf	main@time^(0+256),w
  1935  030D  1283               	bcf	3,5	;RP0=0, select bank0
  1936  030E  1303               	bcf	3,6	;RP1=0, select bank0
  1937  030F  0242               	subwf	??_main+6,w
  1938  0310  00B0               	movwf	GetDigits@Time
  1939  0311  1283               	bcf	3,5	;RP0=0, select bank2
  1940  0312  1703               	bsf	3,6	;RP1=1, select bank2
  1941  0313  0860               	movf	(main@time+1)^(0+256),w
  1942  0314  1C03               	skipc
  1943  0315  0A60               	incf	(main@time+1)^(0+256),w
  1944  0316  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0317  1303               	bcf	3,6	;RP1=0, select bank0
  1946  0318  0243               	subwf	??_main+7,w
  1947  0319  00B1               	movwf	GetDigits@Time+1
  1948  031A  120A  158A  266E  120A  118A  	fcall	_GetDigits
  1949  031F                     l3168:	
  1950                           
  1951                           ;main.c: 270:         if (disp != old_disp)
  1952  031F  1283               	bcf	3,5	;RP0=0, select bank0
  1953  0320  1303               	bcf	3,6	;RP1=0, select bank0
  1954  0321  085B               	movf	_disp,w
  1955  0322  065C               	xorwf	_old_disp,w
  1956  0323  1903               	skipnz
  1957  0324  2B26               	goto	u3451
  1958  0325  2B27               	goto	u3450
  1959  0326                     u3451:	
  1960  0326  2BA3               	goto	l3190
  1961  0327                     u3450:	
  1962  0327                     l3170:	
  1963                           
  1964                           ;main.c: 271:         {;main.c: 272:             old_disp = disp;
  1965  0327  085B               	movf	_disp,w
  1966  0328  00BC               	movwf	??_main
  1967  0329  083C               	movf	??_main,w
  1968  032A  00DC               	movwf	_old_disp
  1969                           
  1970                           ;main.c: 273:             switch (disp)
  1971  032B  2B8D               	goto	l3188
  1972  032C                     l3172:	
  1973                           
  1974                           ;main.c: 276:                 if (centinaia > 0)
  1975  032C  085D               	movf	_centinaia,w
  1976  032D  1903               	btfsc	3,2
  1977  032E  2B30               	goto	u3461
  1978  032F  2B31               	goto	u3460
  1979  0330                     u3461:	
  1980  0330  2BA3               	goto	l3190
  1981  0331                     u3460:	
  1982  0331                     l3174:	
  1983                           
  1984                           ;main.c: 277:                 {;main.c: 278:                     SetDisplay(1, 0, 0, dis
      +                          play[centinaia]);
  1985  0331  01A0               	clrf	SetDisplay@d2
  1986  0332  01A1               	clrf	SetDisplay@d3
  1987  0333  085D               	movf	_centinaia,w
  1988  0334  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  1989  0335  0084               	movwf	4
  1990  0336  120A  158A  2000  120A  118A  	fcall	stringdir
  1991  033B  00BC               	movwf	??_main
  1992  033C  083C               	movf	??_main,w
  1993  033D  00A2               	movwf	SetDisplay@value
  1994  033E  3001               	movlw	1
  1995  033F  120A  158A  23C9  120A  118A  	fcall	_SetDisplay
  1996  0344  2BA3               	goto	l3190
  1997  0345                     l3176:	
  1998                           
  1999                           ;main.c: 282:                 if (decine > 0 || centinaia > 0)
  2000  0345  085E               	movf	_decine,w
  2001  0346  1D03               	btfss	3,2
  2002  0347  2B49               	goto	u3471
  2003  0348  2B4A               	goto	u3470
  2004  0349                     u3471:	
  2005  0349  2B4F               	goto	l3180
  2006  034A                     u3470:	
  2007  034A                     l3178:	
  2008  034A  085D               	movf	_centinaia,w
  2009  034B  1903               	btfsc	3,2
  2010  034C  2B4E               	goto	u3481
  2011  034D  2B4F               	goto	u3480
  2012  034E                     u3481:	
  2013  034E  2BA3               	goto	l3190
  2014  034F                     u3480:	
  2015  034F                     l3180:	
  2016                           
  2017                           ;main.c: 283:                 {;main.c: 284:                     SetDisplay(0, 1, 0, dis
      +                          play[decine]);
  2018  034F  01A0               	clrf	SetDisplay@d2
  2019  0350  0AA0               	incf	SetDisplay@d2,f
  2020  0351  01A1               	clrf	SetDisplay@d3
  2021  0352  085E               	movf	_decine,w
  2022  0353  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2023  0354  0084               	movwf	4
  2024  0355  120A  158A  2000  120A  118A  	fcall	stringdir
  2025  035A  00BC               	movwf	??_main
  2026  035B  083C               	movf	??_main,w
  2027  035C  00A2               	movwf	SetDisplay@value
  2028  035D  3000               	movlw	0
  2029  035E  120A  158A  23C9  120A  118A  	fcall	_SetDisplay
  2030  0363  2BA3               	goto	l3190
  2031  0364                     l3182:	
  2032                           
  2033                           ;main.c: 288:                 SetDisplay(0, 0, 1, display[unita]);
  2034  0364  01A0               	clrf	SetDisplay@d2
  2035  0365  01A1               	clrf	SetDisplay@d3
  2036  0366  0AA1               	incf	SetDisplay@d3,f
  2037  0367  085F               	movf	_unita,w
  2038  0368  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2039  0369  0084               	movwf	4
  2040  036A  120A  158A  2000  120A  118A  	fcall	stringdir
  2041  036F  00BC               	movwf	??_main
  2042  0370  083C               	movf	??_main,w
  2043  0371  00A2               	movwf	SetDisplay@value
  2044  0372  3000               	movlw	0
  2045  0373  120A  158A  23C9  120A  118A  	fcall	_SetDisplay
  2046                           
  2047                           ;main.c: 289:                 break;
  2048  0378  2BA3               	goto	l3190
  2049  0379                     l3184:	
  2050                           
  2051                           ;main.c: 291:                 SetDisplay(1, 0, 0, display[n_semafori]);
  2052  0379  01A0               	clrf	SetDisplay@d2
  2053  037A  01A1               	clrf	SetDisplay@d3
  2054  037B  0864               	movf	_n_semafori,w
  2055  037C  3E01               	addlw	low ((_display-__stringbase)| (0+32768))
  2056  037D  0084               	movwf	4
  2057  037E  120A  158A  2000  120A  118A  	fcall	stringdir
  2058  0383  00BC               	movwf	??_main
  2059  0384  083C               	movf	??_main,w
  2060  0385  00A2               	movwf	SetDisplay@value
  2061  0386  3001               	movlw	1
  2062  0387  120A  158A  23C9  120A  118A  	fcall	_SetDisplay
  2063                           
  2064                           ;main.c: 292:                 break;
  2065  038C  2BA3               	goto	l3190
  2066  038D                     l3188:	
  2067  038D  085B               	movf	_disp,w
  2068  038E  00BC               	movwf	??_main
  2069  038F  01BD               	clrf	??_main+1
  2070                           
  2071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2072                           ; Switch size 1, requested type "simple"
  2073                           ; Number of cases is 1, Range of values is 0 to 0
  2074                           ; switch strategies available:
  2075                           ; Name         Instructions Cycles
  2076                           ; simple_byte            4     3 (average)
  2077                           ; direct_byte           11     8 (fixed)
  2078                           ; jumptable            260     6 (fixed)
  2079                           ;	Chosen strategy is simple_byte
  2080  0390  083D               	movf	??_main+1,w
  2081  0391  3A00               	xorlw	0	; case 0
  2082  0392  1903               	skipnz
  2083  0393  2B95               	goto	l3340
  2084  0394  2BA3               	goto	l3190
  2085  0395                     l3340:	
  2086                           
  2087                           ; Switch size 1, requested type "simple"
  2088                           ; Number of cases is 4, Range of values is 0 to 3
  2089                           ; switch strategies available:
  2090                           ; Name         Instructions Cycles
  2091                           ; simple_byte           13     7 (average)
  2092                           ; direct_byte           20     8 (fixed)
  2093                           ; jumptable            260     6 (fixed)
  2094                           ;	Chosen strategy is simple_byte
  2095  0395  083C               	movf	??_main,w
  2096  0396  3A00               	xorlw	0	; case 0
  2097  0397  1903               	skipnz
  2098  0398  2B2C               	goto	l3172
  2099  0399  3A01               	xorlw	1	; case 1
  2100  039A  1903               	skipnz
  2101  039B  2B45               	goto	l3176
  2102  039C  3A03               	xorlw	3	; case 2
  2103  039D  1903               	skipnz
  2104  039E  2B64               	goto	l3182
  2105  039F  3A01               	xorlw	1	; case 3
  2106  03A0  1903               	skipnz
  2107  03A1  2B79               	goto	l3184
  2108  03A2  2BA3               	goto	l3190
  2109  03A3                     l3190:	
  2110                           
  2111                           ;main.c: 295:         disp = (disp + 1) % 3;
  2112  03A3  3003               	movlw	3
  2113  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  2114  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  2115  03A6  00A0               	movwf	___awmod@divisor
  2116  03A7  3000               	movlw	0
  2117  03A8  00A1               	movwf	___awmod@divisor+1
  2118  03A9  085B               	movf	_disp,w
  2119  03AA  3E01               	addlw	1
  2120  03AB  00A2               	movwf	___awmod@dividend
  2121  03AC  3000               	movlw	0
  2122  03AD  1803               	skipnc
  2123  03AE  3001               	movlw	1
  2124  03AF  00A3               	movwf	___awmod@dividend+1
  2125  03B0  120A  158A  25AA  120A  118A  	fcall	___awmod
  2126  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  2127  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  2128  03B7  0820               	movf	?___awmod,w
  2129  03B8  00BC               	movwf	??_main
  2130  03B9  083C               	movf	??_main,w
  2131  03BA  00DB               	movwf	_disp
  2132  03BB                     l3192:	
  2133                           
  2134                           ;main.c: 301:         if (secondPassed.Bit && cycled.Bit)
  2135  03BB  1C61               	btfss	_secondPassed,0
  2136  03BC  2BBE               	goto	u3491
  2137  03BD  2BBF               	goto	u3490
  2138  03BE                     u3491:	
  2139  03BE  2BC5               	goto	l249
  2140  03BF                     u3490:	
  2141  03BF                     l3194:	
  2142  03BF  1C60               	btfss	_cycled,0
  2143  03C0  2BC2               	goto	u3501
  2144  03C1  2BC3               	goto	u3500
  2145  03C2                     u3501:	
  2146  03C2  2BC5               	goto	l249
  2147  03C3                     u3500:	
  2148  03C3                     l3196:	
  2149                           
  2150                           ;main.c: 302:         {;main.c: 303:             secondPassed.Bit = 0;
  2151  03C3  1061               	bcf	_secondPassed,0
  2152                           
  2153                           ;main.c: 304:             cycled.Bit = 0;
  2154  03C4  1060               	bcf	_cycled,0
  2155  03C5                     l249:	
  2156                           ;main.c: 305:         }
  2157                           
  2158                           
  2159                           ;main.c: 307:         if (secondPassed.Bit && !cycled.Bit)
  2160  03C5  1C61               	btfss	_secondPassed,0
  2161  03C6  2BC8               	goto	u3511
  2162  03C7  2BC9               	goto	u3510
  2163  03C8                     u3511:	
  2164  03C8  2BCE               	goto	l3202
  2165  03C9                     u3510:	
  2166  03C9                     l3198:	
  2167  03C9  1860               	btfsc	_cycled,0
  2168  03CA  2BCC               	goto	u3521
  2169  03CB  2BCD               	goto	u3520
  2170  03CC                     u3521:	
  2171  03CC  2BCE               	goto	l3202
  2172  03CD                     u3520:	
  2173  03CD                     l3200:	
  2174                           
  2175                           ;main.c: 308:         {;main.c: 309:             cycled.Bit = 1;
  2176  03CD  1460               	bsf	_cycled,0
  2177  03CE                     l3202:	
  2178                           
  2179                           ;main.c: 313:         if ((dataFromGateway[0] & 0x7F) == 0x08)
  2180  03CE  307F               	movlw	127
  2181  03CF  1683               	bsf	3,5	;RP0=1, select bank1
  2182  03D0  1303               	bcf	3,6	;RP1=0, select bank1
  2183  03D1  0520               	andwf	_dataFromGateway^(0+128),w
  2184  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  2185  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  2186  03D4  00BC               	movwf	??_main
  2187  03D5  3008               	movlw	8
  2188  03D6  063C               	xorwf	??_main,w
  2189  03D7  1D03               	btfss	3,2
  2190  03D8  2BDA               	goto	u3531
  2191  03D9  2BDB               	goto	u3530
  2192  03DA                     u3531:	
  2193  03DA  2C91               	goto	l3228
  2194  03DB                     u3530:	
  2195  03DB                     l3204:	
  2196                           
  2197                           ;main.c: 314:         {;main.c: 315:             for (int i = 0; i < 4; i++)
  2198  03DB  1283               	bcf	3,5	;RP0=0, select bank2
  2199  03DC  1703               	bsf	3,6	;RP1=1, select bank2
  2200  03DD  01E8               	clrf	main@i_445^(0+256)
  2201  03DE  01E9               	clrf	(main@i_445+1)^(0+256)
  2202  03DF                     l3206:	
  2203  03DF  0869               	movf	(main@i_445+1)^(0+256),w
  2204  03E0  3A80               	xorlw	128
  2205  03E1  00FF               	movwf	btemp+1
  2206  03E2  3080               	movlw	128
  2207  03E3  027F               	subwf	btemp+1,w
  2208  03E4  1D03               	skipz
  2209  03E5  2BE8               	goto	u3545
  2210  03E6  3004               	movlw	4
  2211  03E7  0268               	subwf	main@i_445^(0+256),w
  2212  03E8                     u3545:	
  2213  03E8  1C03               	skipc
  2214  03E9  2BEB               	goto	u3541
  2215  03EA  2BEC               	goto	u3540
  2216  03EB                     u3541:	
  2217  03EB  2BED               	goto	l3210
  2218  03EC                     u3540:	
  2219  03EC  2C69               	goto	l3216
  2220  03ED                     l3210:	
  2221                           
  2222                           ;main.c: 316:             {;main.c: 317:                 sendByte((0x01 << (i + 1)), 0x0
      +                          1, motorcycle[i]);
  2223  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2224  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  2225  03EF  01B4               	clrf	sendByte@byte1
  2226  03F0  0AB4               	incf	sendByte@byte1,f
  2227  03F1  1283               	bcf	3,5	;RP0=0, select bank2
  2228  03F2  1703               	bsf	3,6	;RP1=1, select bank2
  2229  03F3  0868               	movf	main@i_445^(0+256),w
  2230  03F4  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  2231  03F5  0084               	movwf	4
  2232  03F6  1383               	bcf	3,7	;select IRP bank0
  2233  03F7  0800               	movf	0,w
  2234  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  2235  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  2236  03FA  00BC               	movwf	??_main
  2237  03FB  083C               	movf	??_main,w
  2238  03FC  00B5               	movwf	sendByte@valore
  2239  03FD  3001               	movlw	1
  2240  03FE  00BD               	movwf	??_main+1
  2241  03FF  1283               	bcf	3,5	;RP0=0, select bank2
  2242  0400  1703               	bsf	3,6	;RP1=1, select bank2
  2243  0401  0868               	movf	main@i_445^(0+256),w
  2244  0402  3E01               	addlw	1
  2245  0403  3E01               	addlw	1
  2246  0404  1283               	bcf	3,5	;RP0=0, select bank0
  2247  0405  1303               	bcf	3,6	;RP1=0, select bank0
  2248  0406  2C09               	goto	u3554
  2249  0407                     u3555:	
  2250  0407  1003               	clrc
  2251  0408  0DBD               	rlf	??_main+1,f
  2252  0409                     u3554:	
  2253  0409  3EFF               	addlw	-1
  2254  040A  1D03               	skipz
  2255  040B  2C07               	goto	u3555
  2256  040C  083D               	movf	??_main+1,w
  2257  040D  120A  158A  2442  120A  118A  	fcall	_sendByte
  2258                           
  2259                           ;main.c: 318:                 sendByte((0x01 << (i + 1)), 0x10, car[i]);
  2260  0412  3010               	movlw	16
  2261  0413  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0414  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0415  00BC               	movwf	??_main
  2264  0416  083C               	movf	??_main,w
  2265  0417  00B4               	movwf	sendByte@byte1
  2266  0418  1283               	bcf	3,5	;RP0=0, select bank2
  2267  0419  1703               	bsf	3,6	;RP1=1, select bank2
  2268  041A  0868               	movf	main@i_445^(0+256),w
  2269  041B  3E50               	addlw	(low (_car| 0))& (0+255)
  2270  041C  0084               	movwf	4
  2271  041D  1383               	bcf	3,7	;select IRP bank0
  2272  041E  0800               	movf	0,w
  2273  041F  1283               	bcf	3,5	;RP0=0, select bank0
  2274  0420  1303               	bcf	3,6	;RP1=0, select bank0
  2275  0421  00BD               	movwf	??_main+1
  2276  0422  083D               	movf	??_main+1,w
  2277  0423  00B5               	movwf	sendByte@valore
  2278  0424  3001               	movlw	1
  2279  0425  00BE               	movwf	??_main+2
  2280  0426  1283               	bcf	3,5	;RP0=0, select bank2
  2281  0427  1703               	bsf	3,6	;RP1=1, select bank2
  2282  0428  0868               	movf	main@i_445^(0+256),w
  2283  0429  3E01               	addlw	1
  2284  042A  3E01               	addlw	1
  2285  042B  1283               	bcf	3,5	;RP0=0, select bank0
  2286  042C  1303               	bcf	3,6	;RP1=0, select bank0
  2287  042D  2C30               	goto	u3564
  2288  042E                     u3565:	
  2289  042E  1003               	clrc
  2290  042F  0DBE               	rlf	??_main+2,f
  2291  0430                     u3564:	
  2292  0430  3EFF               	addlw	-1
  2293  0431  1D03               	skipz
  2294  0432  2C2E               	goto	u3565
  2295  0433  083E               	movf	??_main+2,w
  2296  0434  120A  158A  2442  120A  118A  	fcall	_sendByte
  2297                           
  2298                           ;main.c: 319:                 sendByte((0x01 << (i + 1)), 0x11, truck[i]);
  2299  0439  3011               	movlw	17
  2300  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2301  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2302  043C  00BC               	movwf	??_main
  2303  043D  083C               	movf	??_main,w
  2304  043E  00B4               	movwf	sendByte@byte1
  2305  043F  1283               	bcf	3,5	;RP0=0, select bank2
  2306  0440  1703               	bsf	3,6	;RP1=1, select bank2
  2307  0441  0868               	movf	main@i_445^(0+256),w
  2308  0442  3E4C               	addlw	(low (_truck| 0))& (0+255)
  2309  0443  0084               	movwf	4
  2310  0444  1383               	bcf	3,7	;select IRP bank0
  2311  0445  0800               	movf	0,w
  2312  0446  1283               	bcf	3,5	;RP0=0, select bank0
  2313  0447  1303               	bcf	3,6	;RP1=0, select bank0
  2314  0448  00BD               	movwf	??_main+1
  2315  0449  083D               	movf	??_main+1,w
  2316  044A  00B5               	movwf	sendByte@valore
  2317  044B  3001               	movlw	1
  2318  044C  00BE               	movwf	??_main+2
  2319  044D  1283               	bcf	3,5	;RP0=0, select bank2
  2320  044E  1703               	bsf	3,6	;RP1=1, select bank2
  2321  044F  0868               	movf	main@i_445^(0+256),w
  2322  0450  3E01               	addlw	1
  2323  0451  3E01               	addlw	1
  2324  0452  1283               	bcf	3,5	;RP0=0, select bank0
  2325  0453  1303               	bcf	3,6	;RP1=0, select bank0
  2326  0454  2C57               	goto	u3574
  2327  0455                     u3575:	
  2328  0455  1003               	clrc
  2329  0456  0DBE               	rlf	??_main+2,f
  2330  0457                     u3574:	
  2331  0457  3EFF               	addlw	-1
  2332  0458  1D03               	skipz
  2333  0459  2C55               	goto	u3575
  2334  045A  083E               	movf	??_main+2,w
  2335  045B  120A  158A  2442  120A  118A  	fcall	_sendByte
  2336  0460                     l3212:	
  2337                           
  2338                           ;main.c: 320:             }
  2339  0460  3001               	movlw	1
  2340  0461  1283               	bcf	3,5	;RP0=0, select bank2
  2341  0462  1703               	bsf	3,6	;RP1=1, select bank2
  2342  0463  07E8               	addwf	main@i_445^(0+256),f
  2343  0464  1803               	skipnc
  2344  0465  0AE9               	incf	(main@i_445+1)^(0+256),f
  2345  0466  3000               	movlw	0
  2346  0467  07E9               	addwf	(main@i_445+1)^(0+256),f
  2347  0468  2BDF               	goto	l3206
  2348  0469                     l3216:	
  2349                           
  2350                           ;main.c: 321:             for (int i = 0; i < 4; i++)
  2351  0469  1283               	bcf	3,5	;RP0=0, select bank2
  2352  046A  1703               	bsf	3,6	;RP1=1, select bank2
  2353  046B  01E4               	clrf	main@i_446^(0+256)
  2354  046C  01E5               	clrf	(main@i_446+1)^(0+256)
  2355  046D                     l3218:	
  2356  046D  0865               	movf	(main@i_446+1)^(0+256),w
  2357  046E  3A80               	xorlw	128
  2358  046F  00FF               	movwf	btemp+1
  2359  0470  3080               	movlw	128
  2360  0471  027F               	subwf	btemp+1,w
  2361  0472  1D03               	skipz
  2362  0473  2C76               	goto	u3585
  2363  0474  3004               	movlw	4
  2364  0475  0264               	subwf	main@i_446^(0+256),w
  2365  0476                     u3585:	
  2366  0476  1C03               	skipc
  2367  0477  2C79               	goto	u3581
  2368  0478  2C7A               	goto	u3580
  2369  0479                     u3581:	
  2370  0479  2C7B               	goto	l3222
  2371  047A                     u3580:	
  2372  047A  2C91               	goto	l3228
  2373  047B                     l3222:	
  2374                           
  2375                           ;main.c: 322:             {;main.c: 323:                 motorcycle[i] = 0;
  2376  047B  1283               	bcf	3,5	;RP0=0, select bank2
  2377  047C  1703               	bsf	3,6	;RP1=1, select bank2
  2378  047D  0864               	movf	main@i_446^(0+256),w
  2379  047E  3E54               	addlw	(low (_motorcycle| 0))& (0+255)
  2380  047F  0084               	movwf	4
  2381  0480  1383               	bcf	3,7	;select IRP bank0
  2382  0481  0180               	clrf	0
  2383                           
  2384                           ;main.c: 324:                 car[i] = 0;
  2385  0482  0864               	movf	main@i_446^(0+256),w
  2386  0483  3E50               	addlw	(low (_car| 0))& (0+255)
  2387  0484  0084               	movwf	4
  2388  0485  0180               	clrf	0
  2389                           
  2390                           ;main.c: 325:                 truck[i] = 0;
  2391  0486  0864               	movf	main@i_446^(0+256),w
  2392  0487  3E4C               	addlw	(low (_truck| 0))& (0+255)
  2393  0488  0084               	movwf	4
  2394  0489  0180               	clrf	0
  2395  048A                     l3224:	
  2396                           
  2397                           ;main.c: 326:             }
  2398  048A  3001               	movlw	1
  2399  048B  07E4               	addwf	main@i_446^(0+256),f
  2400  048C  1803               	skipnc
  2401  048D  0AE5               	incf	(main@i_446+1)^(0+256),f
  2402  048E  3000               	movlw	0
  2403  048F  07E5               	addwf	(main@i_446+1)^(0+256),f
  2404  0490  2C6D               	goto	l3218
  2405  0491                     l3228:	
  2406                           
  2407                           ;main.c: 335:         if ((dataFromGateway[0] & 0x7F) == 0x0A)
  2408  0491  307F               	movlw	127
  2409  0492  1683               	bsf	3,5	;RP0=1, select bank1
  2410  0493  1303               	bcf	3,6	;RP1=0, select bank1
  2411  0494  0520               	andwf	_dataFromGateway^(0+128),w
  2412  0495  1283               	bcf	3,5	;RP0=0, select bank0
  2413  0496  1303               	bcf	3,6	;RP1=0, select bank0
  2414  0497  00BC               	movwf	??_main
  2415  0498  300A               	movlw	10
  2416  0499  063C               	xorwf	??_main,w
  2417  049A  1D03               	btfss	3,2
  2418  049B  2C9D               	goto	u3591
  2419  049C  2C9E               	goto	u3590
  2420  049D                     u3591:	
  2421  049D  2895               	goto	l3070
  2422  049E                     u3590:	
  2423  049E                     l3230:	
  2424                           
  2425                           ;main.c: 336:         {;main.c: 337:             temp = (char)map((ADC_Read(0) >> 2), 0,
      +                           255, -20, 60);
  2426  049E  3000               	movlw	0
  2427  049F  120A  158A  23F5  120A  118A  	fcall	_ADC_Read
  2428  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2429  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2430  04A6  0820               	movf	?_ADC_Read,w
  2431  04A7  00BC               	movwf	??_main
  2432  04A8  0821               	movf	?_ADC_Read+1,w
  2433  04A9  00BD               	movwf	??_main+1
  2434  04AA  0D3D               	rlf	??_main+1,w
  2435  04AB  0CBD               	rrf	??_main+1,f
  2436  04AC  0CBC               	rrf	??_main,f
  2437  04AD  0D3D               	rlf	??_main+1,w
  2438  04AE  0CBD               	rrf	??_main+1,f
  2439  04AF  0CBC               	rrf	??_main,f
  2440  04B0  083C               	movf	??_main,w
  2441  04B1  00B0               	movwf	map@x
  2442  04B2  083D               	movf	??_main+1,w
  2443  04B3  00B1               	movwf	map@x+1
  2444  04B4  3000               	movlw	0
  2445  04B5  00B2               	movwf	map@in_min
  2446  04B6  00B3               	movwf	map@in_min+1
  2447  04B7  30FF               	movlw	255
  2448  04B8  00B4               	movwf	map@in_max
  2449  04B9  3000               	movlw	0
  2450  04BA  00B5               	movwf	map@in_max+1
  2451  04BB  30EC               	movlw	236
  2452  04BC  00B6               	movwf	map@out_min
  2453  04BD  30FF               	movlw	255
  2454  04BE  00B7               	movwf	map@out_min+1
  2455  04BF  303C               	movlw	60
  2456  04C0  00B8               	movwf	map@out_max
  2457  04C1  3000               	movlw	0
  2458  04C2  00B9               	movwf	map@out_max+1
  2459  04C3  120A  158A  24A1  120A  118A  	fcall	_map
  2460  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2461  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  2462  04CA  0830               	movf	?_map,w
  2463  04CB  00BE               	movwf	??_main+2
  2464  04CC  083E               	movf	??_main+2,w
  2465  04CD  1283               	bcf	3,5	;RP0=0, select bank2
  2466  04CE  1703               	bsf	3,6	;RP1=1, select bank2
  2467  04CF  00DA               	movwf	main@temp^(0+256)
  2468                           
  2469                           ;main.c: 338:             umidita = (char)map((ADC_Read(1) >> 2), 0, 255, 0, 100);
  2470  04D0  3001               	movlw	1
  2471  04D1  120A  158A  23F5  120A  118A  	fcall	_ADC_Read
  2472  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2473  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2474  04D8  0820               	movf	?_ADC_Read,w
  2475  04D9  00BC               	movwf	??_main
  2476  04DA  0821               	movf	?_ADC_Read+1,w
  2477  04DB  00BD               	movwf	??_main+1
  2478  04DC  0D3D               	rlf	??_main+1,w
  2479  04DD  0CBD               	rrf	??_main+1,f
  2480  04DE  0CBC               	rrf	??_main,f
  2481  04DF  0D3D               	rlf	??_main+1,w
  2482  04E0  0CBD               	rrf	??_main+1,f
  2483  04E1  0CBC               	rrf	??_main,f
  2484  04E2  083C               	movf	??_main,w
  2485  04E3  00B0               	movwf	map@x
  2486  04E4  083D               	movf	??_main+1,w
  2487  04E5  00B1               	movwf	map@x+1
  2488  04E6  3000               	movlw	0
  2489  04E7  00B2               	movwf	map@in_min
  2490  04E8  00B3               	movwf	map@in_min+1
  2491  04E9  30FF               	movlw	255
  2492  04EA  00B4               	movwf	map@in_max
  2493  04EB  3000               	movlw	0
  2494  04EC  00B5               	movwf	map@in_max+1
  2495  04ED  3000               	movlw	0
  2496  04EE  00B6               	movwf	map@out_min
  2497  04EF  00B7               	movwf	map@out_min+1
  2498  04F0  3064               	movlw	100
  2499  04F1  00B8               	movwf	map@out_max
  2500  04F2  3000               	movlw	0
  2501  04F3  00B9               	movwf	map@out_max+1
  2502  04F4  120A  158A  24A1  120A  118A  	fcall	_map
  2503  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  2504  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  2505  04FB  0830               	movf	?_map,w
  2506  04FC  00BE               	movwf	??_main+2
  2507  04FD  083E               	movf	??_main+2,w
  2508  04FE  1283               	bcf	3,5	;RP0=0, select bank2
  2509  04FF  1703               	bsf	3,6	;RP1=1, select bank2
  2510  0500  00DB               	movwf	main@umidita^(0+256)
  2511                           
  2512                           ;main.c: 339:             pressione = (char)map((ADC_Read(5) >> 2), 0, 255, 0, 100);
  2513  0501  3005               	movlw	5
  2514  0502  120A  158A  23F5  120A  118A  	fcall	_ADC_Read
  2515  0507  1283               	bcf	3,5	;RP0=0, select bank0
  2516  0508  1303               	bcf	3,6	;RP1=0, select bank0
  2517  0509  0820               	movf	?_ADC_Read,w
  2518  050A  00BC               	movwf	??_main
  2519  050B  0821               	movf	?_ADC_Read+1,w
  2520  050C  00BD               	movwf	??_main+1
  2521  050D  0D3D               	rlf	??_main+1,w
  2522  050E  0CBD               	rrf	??_main+1,f
  2523  050F  0CBC               	rrf	??_main,f
  2524  0510  0D3D               	rlf	??_main+1,w
  2525  0511  0CBD               	rrf	??_main+1,f
  2526  0512  0CBC               	rrf	??_main,f
  2527  0513  083C               	movf	??_main,w
  2528  0514  00B0               	movwf	map@x
  2529  0515  083D               	movf	??_main+1,w
  2530  0516  00B1               	movwf	map@x+1
  2531  0517  3000               	movlw	0
  2532  0518  00B2               	movwf	map@in_min
  2533  0519  00B3               	movwf	map@in_min+1
  2534  051A  30FF               	movlw	255
  2535  051B  00B4               	movwf	map@in_max
  2536  051C  3000               	movlw	0
  2537  051D  00B5               	movwf	map@in_max+1
  2538  051E  3000               	movlw	0
  2539  051F  00B6               	movwf	map@out_min
  2540  0520  00B7               	movwf	map@out_min+1
  2541  0521  3064               	movlw	100
  2542  0522  00B8               	movwf	map@out_max
  2543  0523  3000               	movlw	0
  2544  0524  00B9               	movwf	map@out_max+1
  2545  0525  120A  158A  24A1  120A  118A  	fcall	_map
  2546  052A  1283               	bcf	3,5	;RP0=0, select bank0
  2547  052B  1303               	bcf	3,6	;RP1=0, select bank0
  2548  052C  0830               	movf	?_map,w
  2549  052D  00BE               	movwf	??_main+2
  2550  052E  083E               	movf	??_main+2,w
  2551  052F  1283               	bcf	3,5	;RP0=0, select bank2
  2552  0530  1703               	bsf	3,6	;RP1=1, select bank2
  2553  0531  00DC               	movwf	main@pressione^(0+256)
  2554  0532                     l3232:	
  2555                           
  2556                           ;main.c: 340:             sendByte(0x02, 0x00, temp);
  2557  0532  1283               	bcf	3,5	;RP0=0, select bank0
  2558  0533  1303               	bcf	3,6	;RP1=0, select bank0
  2559  0534  01B4               	clrf	sendByte@byte1
  2560  0535  1283               	bcf	3,5	;RP0=0, select bank2
  2561  0536  1703               	bsf	3,6	;RP1=1, select bank2
  2562  0537  085A               	movf	main@temp^(0+256),w
  2563  0538  1283               	bcf	3,5	;RP0=0, select bank0
  2564  0539  1303               	bcf	3,6	;RP1=0, select bank0
  2565  053A  00BC               	movwf	??_main
  2566  053B  083C               	movf	??_main,w
  2567  053C  00B5               	movwf	sendByte@valore
  2568  053D  3002               	movlw	2
  2569  053E  120A  158A  2442  120A  118A  	fcall	_sendByte
  2570  0543                     l3234:	
  2571                           
  2572                           ;main.c: 341:             sendByte(0x04, 0x00, umidita);
  2573  0543  1283               	bcf	3,5	;RP0=0, select bank0
  2574  0544  1303               	bcf	3,6	;RP1=0, select bank0
  2575  0545  01B4               	clrf	sendByte@byte1
  2576  0546  1283               	bcf	3,5	;RP0=0, select bank2
  2577  0547  1703               	bsf	3,6	;RP1=1, select bank2
  2578  0548  085B               	movf	main@umidita^(0+256),w
  2579  0549  1283               	bcf	3,5	;RP0=0, select bank0
  2580  054A  1303               	bcf	3,6	;RP1=0, select bank0
  2581  054B  00BC               	movwf	??_main
  2582  054C  083C               	movf	??_main,w
  2583  054D  00B5               	movwf	sendByte@valore
  2584  054E  3004               	movlw	4
  2585  054F  120A  158A  2442  120A  118A  	fcall	_sendByte
  2586  0554                     l3236:	
  2587                           
  2588                           ;main.c: 342:             sendByte(0x06, 0x00, pressione);
  2589  0554  1283               	bcf	3,5	;RP0=0, select bank0
  2590  0555  1303               	bcf	3,6	;RP1=0, select bank0
  2591  0556  01B4               	clrf	sendByte@byte1
  2592  0557  1283               	bcf	3,5	;RP0=0, select bank2
  2593  0558  1703               	bsf	3,6	;RP1=1, select bank2
  2594  0559  085C               	movf	main@pressione^(0+256),w
  2595  055A  1283               	bcf	3,5	;RP0=0, select bank0
  2596  055B  1303               	bcf	3,6	;RP1=0, select bank0
  2597  055C  00BC               	movwf	??_main
  2598  055D  083C               	movf	??_main,w
  2599  055E  00B5               	movwf	sendByte@valore
  2600  055F  3006               	movlw	6
  2601  0560  120A  158A  2442  120A  118A  	fcall	_sendByte
  2602  0565  2895               	goto	l3070
  2603  0566  120A  118A  280E   	ljmp	start
  2604  0569                     __end_of_main:	
  2605                           
  2606                           	psect	text1
  2607  0C42                     __ptext1:	
  2608 ;; *************** function _sendByte *****************
  2609 ;; Defined at:
  2610 ;;		line 411 in file "main.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;  byte0           1    wreg     unsigned char 
  2613 ;;  byte1           1   20[BANK0 ] unsigned char 
  2614 ;;  valore          1   21[BANK0 ] unsigned char 
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  byte0           1   25[BANK0 ] unsigned char 
  2617 ;;  i               1   27[BANK0 ] unsigned char 
  2618 ;;  txByte          1   26[BANK0 ] PTR unsigned char 
  2619 ;;		 -> BuildByte@txByte(5), 
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2629 ;;      Params:         0       2       0       0       0
  2630 ;;      Locals:         0       3       0       0       0
  2631 ;;      Temps:          0       3       0       0       0
  2632 ;;      Totals:         0       8       0       0       0
  2633 ;;Total ram usage:        8 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    3
  2636 ;; This function calls:
  2637 ;;		_BuildByte
  2638 ;;		_UART_TxChar
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           
  2645                           ;psect for function _sendByte
  2646  0C42                     _sendByte:	
  2647                           
  2648                           ;incstack = 0
  2649                           ; Regs used in _sendByte: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2650                           ;sendByte@byte0 stored from wreg
  2651  0C42  1283               	bcf	3,5	;RP0=0, select bank0
  2652  0C43  1303               	bcf	3,6	;RP1=0, select bank0
  2653  0C44  00B9               	movwf	sendByte@byte0
  2654  0C45                     l2982:	
  2655                           
  2656                           ;main.c: 411: void sendByte(char byte0, char byte1, char valore);main.c: 412: {;main.c: 
      +                          413:     char *txByte;;main.c: 414:     txByte = BuildByte(byte0, byte1, valore);
  2657  0C45  0834               	movf	sendByte@byte1,w
  2658  0C46  00B6               	movwf	??_sendByte
  2659  0C47  0836               	movf	??_sendByte,w
  2660  0C48  00A0               	movwf	BuildByte@byte1
  2661  0C49  0835               	movf	sendByte@valore,w
  2662  0C4A  00B7               	movwf	??_sendByte+1
  2663  0C4B  0837               	movf	??_sendByte+1,w
  2664  0C4C  00A1               	movwf	BuildByte@valore
  2665  0C4D  0839               	movf	sendByte@byte0,w
  2666  0C4E  120A  118A  2715  120A  158A  	fcall	_BuildByte
  2667  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  2668  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  2669  0C55  00B8               	movwf	??_sendByte+2
  2670  0C56  0838               	movf	??_sendByte+2,w
  2671  0C57  00BA               	movwf	sendByte@txByte
  2672  0C58                     l2984:	
  2673                           
  2674                           ;main.c: 416:     for (unsigned char i = 0; i < 5; i++)
  2675  0C58  01BB               	clrf	sendByte@i
  2676  0C59                     l2990:	
  2677                           
  2678                           ;main.c: 417:     {;main.c: 418:         UART_TxChar(txByte++);
  2679  0C59  083A               	movf	sendByte@txByte,w
  2680  0C5A  120A  158A  2398  120A  158A  	fcall	_UART_TxChar
  2681  0C5F                     l2992:	
  2682  0C5F  3001               	movlw	1
  2683  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  2684  0C61  1303               	bcf	3,6	;RP1=0, select bank0
  2685  0C62  00B6               	movwf	??_sendByte
  2686  0C63  0836               	movf	??_sendByte,w
  2687  0C64  07BA               	addwf	sendByte@txByte,f
  2688  0C65                     l2994:	
  2689                           
  2690                           ;main.c: 419:     }
  2691  0C65  3001               	movlw	1
  2692  0C66  00B6               	movwf	??_sendByte
  2693  0C67  0836               	movf	??_sendByte,w
  2694  0C68  07BB               	addwf	sendByte@i,f
  2695  0C69                     l2996:	
  2696  0C69  3005               	movlw	5
  2697  0C6A  023B               	subwf	sendByte@i,w
  2698  0C6B  1C03               	skipc
  2699  0C6C  2C6E               	goto	u3211
  2700  0C6D  2C6F               	goto	u3210
  2701  0C6E                     u3211:	
  2702  0C6E  2C59               	goto	l2990
  2703  0C6F                     u3210:	
  2704  0C6F                     l294:	
  2705  0C6F  0008               	return
  2706  0C70                     __end_of_sendByte:	
  2707                           
  2708                           	psect	text2
  2709  0B98                     __ptext2:	
  2710 ;; *************** function _UART_TxChar *****************
  2711 ;; Defined at:
  2712 ;;		line 386 in file "main.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  ch              1    wreg     unsigned char 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  ch              1    0[BANK0 ] unsigned char 
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2726 ;;      Params:         0       0       0       0       0
  2727 ;;      Locals:         0       1       0       0       0
  2728 ;;      Temps:          0       0       0       0       0
  2729 ;;      Totals:         0       1       0       0       0
  2730 ;;Total ram usage:        1 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    2
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_sendByte
  2737 ;;		_UART_Write_Text
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           
  2742                           ;psect for function _UART_TxChar
  2743  0B98                     _UART_TxChar:	
  2744                           
  2745                           ;incstack = 0
  2746                           ; Regs used in _UART_TxChar: [wreg]
  2747                           ;UART_TxChar@ch stored from wreg
  2748  0B98  1283               	bcf	3,5	;RP0=0, select bank0
  2749  0B99  1303               	bcf	3,6	;RP1=0, select bank0
  2750  0B9A  00A0               	movwf	UART_TxChar@ch
  2751  0B9B                     l2706:	
  2752  0B9B                     l274:	
  2753                           ;main.c: 389:         ;
  2754                           
  2755                           
  2756                           ;main.c: 388:     while (!TXIF)
  2757  0B9B  1E0C               	btfss	12,4	;volatile
  2758  0B9C  2B9E               	goto	u2741
  2759  0B9D  2B9F               	goto	u2740
  2760  0B9E                     u2741:	
  2761  0B9E  2B9B               	goto	l274
  2762  0B9F                     u2740:	
  2763  0B9F                     l276:	
  2764                           
  2765                           ;main.c: 390:     TXIF = 0;
  2766  0B9F  120C               	bcf	12,4	;volatile
  2767  0BA0                     l2708:	
  2768                           
  2769                           ;main.c: 391:     TXREG = ch;
  2770  0BA0  0820               	movf	UART_TxChar@ch,w
  2771  0BA1  0099               	movwf	25	;volatile
  2772  0BA2                     l277:	
  2773  0BA2  0008               	return
  2774  0BA3                     __end_of_UART_TxChar:	
  2775                           
  2776                           	psect	text3
  2777  0715                     __ptext3:	
  2778 ;; *************** function _BuildByte *****************
  2779 ;; Defined at:
  2780 ;;		line 2 in file "./CustomLib/Serial.h"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  byte0           1    wreg     unsigned char 
  2783 ;;  byte1           1    0[BANK0 ] unsigned char 
  2784 ;;  valore          1    1[BANK0 ] unsigned char 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  byte0           1    4[BANK0 ] unsigned char 
  2787 ;;  y               2   14[BANK0 ] int 
  2788 ;;  y               2   12[BANK0 ] int 
  2789 ;;  i               2   18[BANK0 ] int 
  2790 ;;  i               2   16[BANK0 ] int 
  2791 ;;  txByte          5    5[BANK0 ] unsigned char [5]
  2792 ;;  sommaColumn     1   11[BANK0 ] unsigned char 
  2793 ;;  sommaRow        1   10[BANK0 ] unsigned char 
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      PTR unsigned char 
  2796 ;; Registers used:
  2797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2803 ;;      Params:         0       2       0       0       0
  2804 ;;      Locals:         0      16       0       0       0
  2805 ;;      Temps:          0       2       0       0       0
  2806 ;;      Totals:         0      20       0       0       0
  2807 ;;Total ram usage:       20 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    2
  2810 ;; This function calls:
  2811 ;;		Nothing
  2812 ;; This function is called by:
  2813 ;;		_sendByte
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           
  2818                           ;psect for function _BuildByte
  2819  0715                     _BuildByte:	
  2820                           
  2821                           ;incstack = 0
  2822                           ; Regs used in _BuildByte: [wreg-fsr0h+status,2+status,0+btemp+1]
  2823                           ;BuildByte@byte0 stored from wreg
  2824  0715  1283               	bcf	3,5	;RP0=0, select bank0
  2825  0716  1303               	bcf	3,6	;RP1=0, select bank0
  2826  0717  00A4               	movwf	BuildByte@byte0
  2827  0718                     l2638:	
  2828                           
  2829                           ;./CustomLib/Serial.h: 2: char *BuildByte(char byte0, char byte1, char valore);./CustomL
      +                          ib/Serial.h: 3: {;./CustomLib/Serial.h: 4:     char txByte[5];;./CustomLib/Serial.h: 6: 
      +                              txByte[0] = byte0 & 0x7F;
  2830  0718  0824               	movf	BuildByte@byte0,w
  2831  0719  397F               	andlw	127
  2832  071A  00A2               	movwf	??_BuildByte
  2833  071B  0822               	movf	??_BuildByte,w
  2834  071C  00A5               	movwf	BuildByte@txByte
  2835                           
  2836                           ;./CustomLib/Serial.h: 7:     txByte[1] = byte1 & 0x7F;
  2837  071D  0820               	movf	BuildByte@byte1,w
  2838  071E  397F               	andlw	127
  2839  071F  00A2               	movwf	??_BuildByte
  2840  0720  0822               	movf	??_BuildByte,w
  2841  0721  00A6               	movwf	BuildByte@txByte+1
  2842                           
  2843                           ;./CustomLib/Serial.h: 8:     txByte[2] = valore & 0x7F;
  2844  0722  0821               	movf	BuildByte@valore,w
  2845  0723  397F               	andlw	127
  2846  0724  00A2               	movwf	??_BuildByte
  2847  0725  0822               	movf	??_BuildByte,w
  2848  0726  00A7               	movwf	BuildByte@txByte+2
  2849  0727                     l2640:	
  2850                           
  2851                           ;./CustomLib/Serial.h: 9:     txByte[3] = (valore >> 7) & 0x7F;
  2852  0727  0821               	movf	BuildByte@valore,w
  2853  0728  00A2               	movwf	??_BuildByte
  2854  0729  3007               	movlw	7
  2855  072A                     u2645:	
  2856  072A  1003               	clrc
  2857  072B  0CA2               	rrf	??_BuildByte,f
  2858  072C  3EFF               	addlw	-1
  2859  072D  1D03               	skipz
  2860  072E  2F2A               	goto	u2645
  2861  072F  0822               	movf	??_BuildByte,w
  2862  0730  397F               	andlw	127
  2863  0731  00A3               	movwf	??_BuildByte+1
  2864  0732  0823               	movf	??_BuildByte+1,w
  2865  0733  00A8               	movwf	BuildByte@txByte+3
  2866  0734                     l2642:	
  2867                           
  2868                           ;./CustomLib/Serial.h: 10:     char sommaRow = 0;
  2869  0734  01AA               	clrf	BuildByte@sommaRow
  2870  0735                     l2644:	
  2871                           
  2872                           ;./CustomLib/Serial.h: 11:     char sommaColumn = 0;
  2873  0735  01AB               	clrf	BuildByte@sommaColumn
  2874  0736                     l2646:	
  2875                           
  2876                           ;./CustomLib/Serial.h: 13:     for (int i = 0; i < 4; i++)
  2877  0736  01B0               	clrf	BuildByte@i
  2878  0737  01B1               	clrf	BuildByte@i+1
  2879  0738                     l2652:	
  2880                           
  2881                           ;./CustomLib/Serial.h: 14:     {;./CustomLib/Serial.h: 15:         for (int y = 0; y < 8
      +                          ; y++)
  2882  0738  1283               	bcf	3,5	;RP0=0, select bank0
  2883  0739  1303               	bcf	3,6	;RP1=0, select bank0
  2884  073A  01AC               	clrf	BuildByte@y
  2885  073B  01AD               	clrf	BuildByte@y+1
  2886  073C                     l2658:	
  2887                           
  2888                           ;./CustomLib/Serial.h: 16:         {;./CustomLib/Serial.h: 17:             sommaRow += (
      +                          txByte[i] >> y) & 1;
  2889  073C  1283               	bcf	3,5	;RP0=0, select bank0
  2890  073D  1303               	bcf	3,6	;RP1=0, select bank0
  2891  073E  0830               	movf	BuildByte@i,w
  2892  073F  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2893  0740  0084               	movwf	4
  2894  0741  1383               	bcf	3,7	;select IRP bank0
  2895  0742  0800               	movf	0,w
  2896  0743  00A2               	movwf	??_BuildByte
  2897  0744  0A2C               	incf	BuildByte@y,w
  2898  0745  2F48               	goto	u2654
  2899  0746                     u2655:	
  2900  0746  1003               	clrc
  2901  0747  0CA2               	rrf	??_BuildByte,f
  2902  0748                     u2654:	
  2903  0748  3EFF               	addlw	-1
  2904  0749  1D03               	skipz
  2905  074A  2F46               	goto	u2655
  2906  074B  0822               	movf	??_BuildByte,w
  2907  074C  3901               	andlw	1
  2908  074D  00A3               	movwf	??_BuildByte+1
  2909  074E  0823               	movf	??_BuildByte+1,w
  2910  074F  07AA               	addwf	BuildByte@sommaRow,f
  2911  0750                     l2660:	
  2912                           
  2913                           ;./CustomLib/Serial.h: 18:         }
  2914  0750  3001               	movlw	1
  2915  0751  07AC               	addwf	BuildByte@y,f
  2916  0752  1803               	skipnc
  2917  0753  0AAD               	incf	BuildByte@y+1,f
  2918  0754  3000               	movlw	0
  2919  0755  07AD               	addwf	BuildByte@y+1,f
  2920  0756                     l2662:	
  2921  0756  082D               	movf	BuildByte@y+1,w
  2922  0757  3A80               	xorlw	128
  2923  0758  00FF               	movwf	btemp+1
  2924  0759  3080               	movlw	128
  2925  075A  027F               	subwf	btemp+1,w
  2926  075B  1D03               	skipz
  2927  075C  2F5F               	goto	u2665
  2928  075D  3008               	movlw	8
  2929  075E  022C               	subwf	BuildByte@y,w
  2930  075F                     u2665:	
  2931  075F  1C03               	skipc
  2932  0760  2F62               	goto	u2661
  2933  0761  2F63               	goto	u2660
  2934  0762                     u2661:	
  2935  0762  2F3C               	goto	l2658
  2936  0763                     u2660:	
  2937  0763                     l119:	
  2938                           
  2939                           ;./CustomLib/Serial.h: 19:         if (sommaRow % 2 == 1)
  2940  0763  1283               	bcf	3,5	;RP0=0, select bank0
  2941  0764  1303               	bcf	3,6	;RP1=0, select bank0
  2942  0765  1C2A               	btfss	BuildByte@sommaRow,0
  2943  0766  2F68               	goto	u2671
  2944  0767  2F69               	goto	u2670
  2945  0768                     u2671:	
  2946  0768  2F71               	goto	l2666
  2947  0769                     u2670:	
  2948  0769                     l2664:	
  2949                           
  2950                           ;./CustomLib/Serial.h: 20:         {;./CustomLib/Serial.h: 21:             txByte[i] += 
      +                          0x01 << 7;
  2951  0769  3080               	movlw	128
  2952  076A  00A2               	movwf	??_BuildByte
  2953  076B  0830               	movf	BuildByte@i,w
  2954  076C  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  2955  076D  0084               	movwf	4
  2956  076E  0822               	movf	??_BuildByte,w
  2957  076F  1383               	bcf	3,7	;select IRP bank0
  2958  0770  0780               	addwf	0,f
  2959  0771                     l2666:	
  2960                           
  2961                           ;./CustomLib/Serial.h: 22:             sommaRow = 0;
  2962  0771  01AA               	clrf	BuildByte@sommaRow
  2963  0772                     l2670:	
  2964                           ;./CustomLib/Serial.h: 23:         }
  2965                           
  2966                           
  2967                           ;./CustomLib/Serial.h: 28:     }
  2968  0772  3001               	movlw	1
  2969  0773  07B0               	addwf	BuildByte@i,f
  2970  0774  1803               	skipnc
  2971  0775  0AB1               	incf	BuildByte@i+1,f
  2972  0776  3000               	movlw	0
  2973  0777  07B1               	addwf	BuildByte@i+1,f
  2974  0778                     l2672:	
  2975  0778  0831               	movf	BuildByte@i+1,w
  2976  0779  3A80               	xorlw	128
  2977  077A  00FF               	movwf	btemp+1
  2978  077B  3080               	movlw	128
  2979  077C  027F               	subwf	btemp+1,w
  2980  077D  1D03               	skipz
  2981  077E  2F81               	goto	u2685
  2982  077F  3004               	movlw	4
  2983  0780  0230               	subwf	BuildByte@i,w
  2984  0781                     u2685:	
  2985  0781  1C03               	skipc
  2986  0782  2F84               	goto	u2681
  2987  0783  2F85               	goto	u2680
  2988  0784                     u2681:	
  2989  0784  2F38               	goto	l2652
  2990  0785                     u2680:	
  2991  0785                     l2674:	
  2992                           
  2993                           ;./CustomLib/Serial.h: 30:     for (int i = 0; i < 8; i++)
  2994  0785  1283               	bcf	3,5	;RP0=0, select bank0
  2995  0786  1303               	bcf	3,6	;RP1=0, select bank0
  2996  0787  01B2               	clrf	BuildByte@i_342
  2997  0788  01B3               	clrf	BuildByte@i_342+1
  2998  0789                     l2680:	
  2999                           
  3000                           ;./CustomLib/Serial.h: 31:     {;./CustomLib/Serial.h: 32:         for (int y = 0; y < 4
      +                          ; y++)
  3001  0789  1283               	bcf	3,5	;RP0=0, select bank0
  3002  078A  1303               	bcf	3,6	;RP1=0, select bank0
  3003  078B  01AE               	clrf	BuildByte@y_343
  3004  078C  01AF               	clrf	BuildByte@y_343+1
  3005  078D                     l2686:	
  3006                           
  3007                           ;./CustomLib/Serial.h: 34:         {;./CustomLib/Serial.h: 35:             sommaColumn +
      +                          = (txByte[y] >> i) & 1;
  3008  078D  1283               	bcf	3,5	;RP0=0, select bank0
  3009  078E  1303               	bcf	3,6	;RP1=0, select bank0
  3010  078F  082E               	movf	BuildByte@y_343,w
  3011  0790  3E25               	addlw	(low (BuildByte@txByte| 0))& (0+255)
  3012  0791  0084               	movwf	4
  3013  0792  1383               	bcf	3,7	;select IRP bank0
  3014  0793  0800               	movf	0,w
  3015  0794  00A2               	movwf	??_BuildByte
  3016  0795  0A32               	incf	BuildByte@i_342,w
  3017  0796  2F99               	goto	u2694
  3018  0797                     u2695:	
  3019  0797  1003               	clrc
  3020  0798  0CA2               	rrf	??_BuildByte,f
  3021  0799                     u2694:	
  3022  0799  3EFF               	addlw	-1
  3023  079A  1D03               	skipz
  3024  079B  2F97               	goto	u2695
  3025  079C  0822               	movf	??_BuildByte,w
  3026  079D  3901               	andlw	1
  3027  079E  00A3               	movwf	??_BuildByte+1
  3028  079F  0823               	movf	??_BuildByte+1,w
  3029  07A0  07AB               	addwf	BuildByte@sommaColumn,f
  3030  07A1                     l2688:	
  3031                           
  3032                           ;./CustomLib/Serial.h: 36:         }
  3033  07A1  3001               	movlw	1
  3034  07A2  07AE               	addwf	BuildByte@y_343,f
  3035  07A3  1803               	skipnc
  3036  07A4  0AAF               	incf	BuildByte@y_343+1,f
  3037  07A5  3000               	movlw	0
  3038  07A6  07AF               	addwf	BuildByte@y_343+1,f
  3039  07A7                     l2690:	
  3040  07A7  082F               	movf	BuildByte@y_343+1,w
  3041  07A8  3A80               	xorlw	128
  3042  07A9  00FF               	movwf	btemp+1
  3043  07AA  3080               	movlw	128
  3044  07AB  027F               	subwf	btemp+1,w
  3045  07AC  1D03               	skipz
  3046  07AD  2FB0               	goto	u2705
  3047  07AE  3004               	movlw	4
  3048  07AF  022E               	subwf	BuildByte@y_343,w
  3049  07B0                     u2705:	
  3050  07B0  1C03               	skipc
  3051  07B1  2FB3               	goto	u2701
  3052  07B2  2FB4               	goto	u2700
  3053  07B3                     u2701:	
  3054  07B3  2F8D               	goto	l2686
  3055  07B4                     u2700:	
  3056  07B4                     l125:	
  3057                           
  3058                           ;./CustomLib/Serial.h: 37:         if (sommaColumn % 2 == 1)
  3059  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  3060  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  3061  07B6  1C2B               	btfss	BuildByte@sommaColumn,0
  3062  07B7  2FB9               	goto	u2711
  3063  07B8  2FBA               	goto	u2710
  3064  07B9                     u2711:	
  3065  07B9  2FC7               	goto	l2694
  3066  07BA                     u2710:	
  3067  07BA                     l2692:	
  3068                           
  3069                           ;./CustomLib/Serial.h: 38:         {;./CustomLib/Serial.h: 39:             txByte[4] += 
      +                          0x01 << i;
  3070  07BA  3001               	movlw	1
  3071  07BB  00A2               	movwf	??_BuildByte
  3072  07BC  0A32               	incf	BuildByte@i_342,w
  3073  07BD  2FC0               	goto	u2724
  3074  07BE                     u2725:	
  3075  07BE  1003               	clrc
  3076  07BF  0DA2               	rlf	??_BuildByte,f
  3077  07C0                     u2724:	
  3078  07C0  3EFF               	addlw	-1
  3079  07C1  1D03               	skipz
  3080  07C2  2FBE               	goto	u2725
  3081  07C3  0822               	movf	??_BuildByte,w
  3082  07C4  00A3               	movwf	??_BuildByte+1
  3083  07C5  0823               	movf	??_BuildByte+1,w
  3084  07C6  07A9               	addwf	BuildByte@txByte+4,f
  3085  07C7                     l2694:	
  3086                           
  3087                           ;./CustomLib/Serial.h: 40:             sommaColumn = 0;
  3088  07C7  01AB               	clrf	BuildByte@sommaColumn
  3089  07C8                     l2698:	
  3090                           ;./CustomLib/Serial.h: 41:         }
  3091                           
  3092                           
  3093                           ;./CustomLib/Serial.h: 46:     }
  3094  07C8  3001               	movlw	1
  3095  07C9  07B2               	addwf	BuildByte@i_342,f
  3096  07CA  1803               	skipnc
  3097  07CB  0AB3               	incf	BuildByte@i_342+1,f
  3098  07CC  3000               	movlw	0
  3099  07CD  07B3               	addwf	BuildByte@i_342+1,f
  3100  07CE                     l2700:	
  3101  07CE  0833               	movf	BuildByte@i_342+1,w
  3102  07CF  3A80               	xorlw	128
  3103  07D0  00FF               	movwf	btemp+1
  3104  07D1  3080               	movlw	128
  3105  07D2  027F               	subwf	btemp+1,w
  3106  07D3  1D03               	skipz
  3107  07D4  2FD7               	goto	u2735
  3108  07D5  3008               	movlw	8
  3109  07D6  0232               	subwf	BuildByte@i_342,w
  3110  07D7                     u2735:	
  3111  07D7  1C03               	skipc
  3112  07D8  2FDA               	goto	u2731
  3113  07D9  2FDB               	goto	u2730
  3114  07DA                     u2731:	
  3115  07DA  2F89               	goto	l2680
  3116  07DB                     u2730:	
  3117  07DB                     l2702:	
  3118                           
  3119                           ;./CustomLib/Serial.h: 48:     return txByte;
  3120  07DB  3025               	movlw	(low (BuildByte@txByte| 0))& (0+255)
  3121  07DC                     l128:	
  3122  07DC  0008               	return
  3123  07DD                     __end_of_BuildByte:	
  3124                           
  3125                           	psect	text4
  3126  0CA1                     __ptext4:	
  3127 ;; *************** function _map *****************
  3128 ;; Defined at:
  3129 ;;		line 1 in file "./CustomLib/Conversions.h"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;  x               2   16[BANK0 ] int 
  3132 ;;  in_min          2   18[BANK0 ] int 
  3133 ;;  in_max          2   20[BANK0 ] int 
  3134 ;;  out_min         2   22[BANK0 ] int 
  3135 ;;  out_max         2   24[BANK0 ] int 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;		None
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  2   16[BANK0 ] int 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0, pclath, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3147 ;;      Params:         0      10       0       0       0
  3148 ;;      Locals:         0       0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0
  3150 ;;      Totals:         0      10       0       0       0
  3151 ;;Total ram usage:       10 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    3
  3154 ;; This function calls:
  3155 ;;		___awdiv
  3156 ;;		___wmul
  3157 ;; This function is called by:
  3158 ;;		_main
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           
  3163                           ;psect for function _map
  3164  0CA1                     _map:	
  3165  0CA1                     l2846:	
  3166                           ;incstack = 0
  3167                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3168                           
  3169                           
  3170                           ;./CustomLib/Conversions.h: 1: int map(int x, int in_min, int in_max, int out_min, int o
      +                          ut_max);./CustomLib/Conversions.h: 2: {;./CustomLib/Conversions.h: 3:     return (x - in
      +                          _min) * (out_max - out_min) / (in_max - in_min) + out_min;
  3171  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  3172  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  3173  0CA3  0832               	movf	map@in_min,w
  3174  0CA4  0234               	subwf	map@in_max,w
  3175  0CA5  00A7               	movwf	___awdiv@divisor
  3176  0CA6  0833               	movf	map@in_min+1,w
  3177  0CA7  1C03               	skipc
  3178  0CA8  0A33               	incf	map@in_min+1,w
  3179  0CA9  0235               	subwf	map@in_max+1,w
  3180  0CAA  00A8               	movwf	___awdiv@divisor+1
  3181  0CAB  0832               	movf	map@in_min,w
  3182  0CAC  0230               	subwf	map@x,w
  3183  0CAD  00A0               	movwf	___wmul@multiplier
  3184  0CAE  0833               	movf	map@in_min+1,w
  3185  0CAF  1C03               	skipc
  3186  0CB0  0A33               	incf	map@in_min+1,w
  3187  0CB1  0231               	subwf	map@x+1,w
  3188  0CB2  00A1               	movwf	___wmul@multiplier+1
  3189  0CB3  0836               	movf	map@out_min,w
  3190  0CB4  0238               	subwf	map@out_max,w
  3191  0CB5  00A2               	movwf	___wmul@multiplicand
  3192  0CB6  0837               	movf	map@out_min+1,w
  3193  0CB7  1C03               	skipc
  3194  0CB8  0A37               	incf	map@out_min+1,w
  3195  0CB9  0239               	subwf	map@out_max+1,w
  3196  0CBA  00A3               	movwf	___wmul@multiplicand+1
  3197  0CBB  120A  158A  241B  120A  158A  	fcall	___wmul
  3198  0CC0  1283               	bcf	3,5	;RP0=0, select bank0
  3199  0CC1  1303               	bcf	3,6	;RP1=0, select bank0
  3200  0CC2  0821               	movf	?___wmul+1,w
  3201  0CC3  00AA               	movwf	___awdiv@dividend+1
  3202  0CC4  0820               	movf	?___wmul,w
  3203  0CC5  00A9               	movwf	___awdiv@dividend
  3204  0CC6  120A  158A  2605  120A  158A  	fcall	___awdiv
  3205  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  3206  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  3207  0CCD  0836               	movf	map@out_min,w
  3208  0CCE  0727               	addwf	?___awdiv,w
  3209  0CCF  00B0               	movwf	?_map
  3210  0CD0  0837               	movf	map@out_min+1,w
  3211  0CD1  1803               	skipnc
  3212  0CD2  0A37               	incf	map@out_min+1,w
  3213  0CD3  0728               	addwf	?___awdiv+1,w
  3214  0CD4  00B1               	movwf	?_map+1
  3215  0CD5                     l83:	
  3216  0CD5  0008               	return
  3217  0CD6                     __end_of_map:	
  3218                           
  3219                           	psect	text5
  3220  0C1B                     __ptext5:	
  3221 ;; *************** function ___wmul *****************
  3222 ;; Defined at:
  3223 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3226 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  product         2    4[BANK0 ] unsigned int 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  2    0[BANK0 ] unsigned int 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3238 ;;      Params:         0       4       0       0       0
  3239 ;;      Locals:         0       2       0       0       0
  3240 ;;      Temps:          0       0       0       0       0
  3241 ;;      Totals:         0       6       0       0       0
  3242 ;;Total ram usage:        6 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    2
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		_map
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           
  3253                           ;psect for function ___wmul
  3254  0C1B                     ___wmul:	
  3255  0C1B                     l2710:	
  3256                           ;incstack = 0
  3257                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3258                           
  3259  0C1B  1283               	bcf	3,5	;RP0=0, select bank0
  3260  0C1C  1303               	bcf	3,6	;RP1=0, select bank0
  3261  0C1D  01A4               	clrf	___wmul@product
  3262  0C1E  01A5               	clrf	___wmul@product+1
  3263  0C1F                     l2712:	
  3264  0C1F  1C20               	btfss	___wmul@multiplier,0
  3265  0C20  2C22               	goto	u2751
  3266  0C21  2C23               	goto	u2750
  3267  0C22                     u2751:	
  3268  0C22  2C29               	goto	l438
  3269  0C23                     u2750:	
  3270  0C23                     l2714:	
  3271  0C23  0822               	movf	___wmul@multiplicand,w
  3272  0C24  07A4               	addwf	___wmul@product,f
  3273  0C25  1803               	skipnc
  3274  0C26  0AA5               	incf	___wmul@product+1,f
  3275  0C27  0823               	movf	___wmul@multiplicand+1,w
  3276  0C28  07A5               	addwf	___wmul@product+1,f
  3277  0C29                     l438:	
  3278  0C29  3001               	movlw	1
  3279  0C2A                     u2765:	
  3280  0C2A  1003               	clrc
  3281  0C2B  0DA2               	rlf	___wmul@multiplicand,f
  3282  0C2C  0DA3               	rlf	___wmul@multiplicand+1,f
  3283  0C2D  3EFF               	addlw	-1
  3284  0C2E  1D03               	skipz
  3285  0C2F  2C2A               	goto	u2765
  3286  0C30                     l2716:	
  3287  0C30  3001               	movlw	1
  3288  0C31                     u2775:	
  3289  0C31  1003               	clrc
  3290  0C32  0CA1               	rrf	___wmul@multiplier+1,f
  3291  0C33  0CA0               	rrf	___wmul@multiplier,f
  3292  0C34  3EFF               	addlw	-1
  3293  0C35  1D03               	skipz
  3294  0C36  2C31               	goto	u2775
  3295  0C37                     l2718:	
  3296  0C37  0820               	movf	___wmul@multiplier,w
  3297  0C38  0421               	iorwf	___wmul@multiplier+1,w
  3298  0C39  1D03               	btfss	3,2
  3299  0C3A  2C3C               	goto	u2781
  3300  0C3B  2C3D               	goto	u2780
  3301  0C3C                     u2781:	
  3302  0C3C  2C1F               	goto	l2712
  3303  0C3D                     u2780:	
  3304  0C3D                     l2720:	
  3305  0C3D  0825               	movf	___wmul@product+1,w
  3306  0C3E  00A1               	movwf	?___wmul+1
  3307  0C3F  0824               	movf	___wmul@product,w
  3308  0C40  00A0               	movwf	?___wmul
  3309  0C41                     l440:	
  3310  0C41  0008               	return
  3311  0C42                     __end_of___wmul:	
  3312                           
  3313                           	psect	text6
  3314  0BA3                     __ptext6:	
  3315 ;; *************** function _init_ADC *****************
  3316 ;; Defined at:
  3317 ;;		line 355 in file "main.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3331 ;;      Params:         0       0       0       0       0
  3332 ;;      Locals:         0       0       0       0       0
  3333 ;;      Temps:          0       1       0       0       0
  3334 ;;      Totals:         0       1       0       0       0
  3335 ;;Total ram usage:        1 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    2
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_main
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           
  3346                           ;psect for function _init_ADC
  3347  0BA3                     _init_ADC:	
  3348  0BA3                     l2902:	
  3349                           ;incstack = 0
  3350                           ; Regs used in _init_ADC: [wreg+status,2]
  3351                           
  3352                           
  3353                           ;main.c: 357:     TRISA = 0xE3;
  3354  0BA3  30E3               	movlw	227
  3355  0BA4  1683               	bsf	3,5	;RP0=1, select bank1
  3356  0BA5  1303               	bcf	3,6	;RP1=0, select bank1
  3357  0BA6  0085               	movwf	5	;volatile
  3358  0BA7                     l2904:	
  3359                           
  3360                           ;main.c: 358:     ADCON0 = 0x00;
  3361  0BA7  1283               	bcf	3,5	;RP0=0, select bank0
  3362  0BA8  1303               	bcf	3,6	;RP1=0, select bank0
  3363  0BA9  019F               	clrf	31	;volatile
  3364  0BAA                     l2906:	
  3365                           
  3366                           ;main.c: 359:     ADCON1 = 0x80;
  3367  0BAA  3080               	movlw	128
  3368  0BAB  1683               	bsf	3,5	;RP0=1, select bank1
  3369  0BAC  1303               	bcf	3,6	;RP1=0, select bank1
  3370  0BAD  009F               	movwf	31	;volatile
  3371  0BAE                     l2908:	
  3372                           
  3373                           ;main.c: 360:     _delay((unsigned long)((10)*(32000000/4000000.0)));
  3374  0BAE  3019               	movlw	25
  3375  0BAF  1283               	bcf	3,5	;RP0=0, select bank0
  3376  0BB0  1303               	bcf	3,6	;RP1=0, select bank0
  3377  0BB1  00A0               	movwf	??_init_ADC
  3378  0BB2                     u3617:	
  3379  0BB2  0BA0               	decfsz	??_init_ADC,f
  3380  0BB3  2BB2               	goto	u3617
  3381  0BB4  2BB5               	nop2
  3382  0BB5                     l262:	
  3383  0BB5  0008               	return
  3384  0BB6                     __end_of_init_ADC:	
  3385                           
  3386                           	psect	text7
  3387  064C                     __ptext7:	
  3388 ;; *************** function _bitParita *****************
  3389 ;; Defined at:
  3390 ;;		line 14 in file "./CustomLib/BitsFlow.h"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  rx              1    wreg     PTR unsigned char 
  3393 ;;		 -> dataFromGateway(15), 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  rx              1   17[BANK0 ] PTR unsigned char 
  3396 ;;		 -> dataFromGateway(15), 
  3397 ;;  y               2   15[BANK0 ] int 
  3398 ;;  y               2   13[BANK0 ] int 
  3399 ;;  i               2   20[BANK0 ] int 
  3400 ;;  i               2   18[BANK0 ] int 
  3401 ;;  errorRow        1   12[BANK0 ] unsigned char 
  3402 ;;  error           1   11[BANK0 ] unsigned char 
  3403 ;;  errorColumn     1   10[BANK0 ] unsigned char 
  3404 ;;  sommaColumn     1    9[BANK0 ] unsigned char 
  3405 ;;  sommaRow        1    8[BANK0 ] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3415 ;;      Params:         0       0       0       0       0
  3416 ;;      Locals:         0      14       0       0       0
  3417 ;;      Temps:          0       4       0       0       0
  3418 ;;      Totals:         0      18       0       0       0
  3419 ;;Total ram usage:       18 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    3
  3422 ;; This function calls:
  3423 ;;		_bitChange
  3424 ;; This function is called by:
  3425 ;;		_main
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           
  3430                           ;psect for function _bitParita
  3431  064C                     _bitParita:	
  3432                           
  3433                           ;incstack = 0
  3434                           ; Regs used in _bitParita: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3435                           ;bitParita@rx stored from wreg
  3436  064C  1283               	bcf	3,5	;RP0=0, select bank0
  3437  064D  1303               	bcf	3,6	;RP1=0, select bank0
  3438  064E  00B1               	movwf	bitParita@rx
  3439  064F                     l2850:	
  3440                           
  3441                           ;./CustomLib/BitsFlow.h: 14: void bitParita(char *rx);./CustomLib/BitsFlow.h: 15: {;./Cu
      +                          stomLib/BitsFlow.h: 16:     char error = 0;
  3442  064F  01AB               	clrf	bitParita@error
  3443                           
  3444                           ;./CustomLib/BitsFlow.h: 17:     char sommaRow = 0;
  3445  0650  01A8               	clrf	bitParita@sommaRow
  3446                           
  3447                           ;./CustomLib/BitsFlow.h: 18:     char errorRow = 0;
  3448  0651  01AC               	clrf	bitParita@errorRow
  3449                           
  3450                           ;./CustomLib/BitsFlow.h: 19:     char sommaColumn = 0;
  3451  0652  01A9               	clrf	bitParita@sommaColumn
  3452                           
  3453                           ;./CustomLib/BitsFlow.h: 20:     char errorColumn = 0;
  3454  0653  01AA               	clrf	bitParita@errorColumn
  3455                           
  3456                           ;./CustomLib/BitsFlow.h: 21:     for (int i = 0; i < 5; i++)
  3457  0654  01B2               	clrf	bitParita@i
  3458  0655  01B3               	clrf	bitParita@i+1
  3459  0656                     l2856:	
  3460                           
  3461                           ;./CustomLib/BitsFlow.h: 22:     {;./CustomLib/BitsFlow.h: 23:         for (int y = 0; y
      +                           < 8; y++)
  3462  0656  1283               	bcf	3,5	;RP0=0, select bank0
  3463  0657  1303               	bcf	3,6	;RP1=0, select bank0
  3464  0658  01AD               	clrf	bitParita@y
  3465  0659  01AE               	clrf	bitParita@y+1
  3466  065A                     l2862:	
  3467                           
  3468                           ;./CustomLib/BitsFlow.h: 24:         {;./CustomLib/BitsFlow.h: 25:             sommaRow 
      +                          += (rx[i] >> y) & 1;
  3469  065A  1283               	bcf	3,5	;RP0=0, select bank0
  3470  065B  1303               	bcf	3,6	;RP1=0, select bank0
  3471  065C  0832               	movf	bitParita@i,w
  3472  065D  0731               	addwf	bitParita@rx,w
  3473  065E  00A4               	movwf	??_bitParita
  3474  065F  0824               	movf	??_bitParita,w
  3475  0660  0084               	movwf	4
  3476  0661  1383               	bcf	3,7	;select IRP bank0
  3477  0662  0800               	movf	0,w
  3478  0663  00A5               	movwf	??_bitParita+1
  3479  0664  0A2D               	incf	bitParita@y,w
  3480  0665  2E68               	goto	u3084
  3481  0666                     u3085:	
  3482  0666  1003               	clrc
  3483  0667  0CA5               	rrf	??_bitParita+1,f
  3484  0668                     u3084:	
  3485  0668  3EFF               	addlw	-1
  3486  0669  1D03               	skipz
  3487  066A  2E66               	goto	u3085
  3488  066B  0825               	movf	??_bitParita+1,w
  3489  066C  3901               	andlw	1
  3490  066D  00A6               	movwf	??_bitParita+2
  3491  066E  0826               	movf	??_bitParita+2,w
  3492  066F  07A8               	addwf	bitParita@sommaRow,f
  3493  0670                     l2864:	
  3494                           
  3495                           ;./CustomLib/BitsFlow.h: 26:         }
  3496  0670  3001               	movlw	1
  3497  0671  07AD               	addwf	bitParita@y,f
  3498  0672  1803               	skipnc
  3499  0673  0AAE               	incf	bitParita@y+1,f
  3500  0674  3000               	movlw	0
  3501  0675  07AE               	addwf	bitParita@y+1,f
  3502  0676                     l2866:	
  3503  0676  082E               	movf	bitParita@y+1,w
  3504  0677  3A80               	xorlw	128
  3505  0678  00FF               	movwf	btemp+1
  3506  0679  3080               	movlw	128
  3507  067A  027F               	subwf	btemp+1,w
  3508  067B  1D03               	skipz
  3509  067C  2E7F               	goto	u3095
  3510  067D  3008               	movlw	8
  3511  067E  022D               	subwf	bitParita@y,w
  3512  067F                     u3095:	
  3513  067F  1C03               	skipc
  3514  0680  2E82               	goto	u3091
  3515  0681  2E83               	goto	u3090
  3516  0682                     u3091:	
  3517  0682  2E5A               	goto	l2862
  3518  0683                     u3090:	
  3519  0683                     l105:	
  3520                           
  3521                           ;./CustomLib/BitsFlow.h: 27:         if (sommaRow % 2 == 1)
  3522  0683  1283               	bcf	3,5	;RP0=0, select bank0
  3523  0684  1303               	bcf	3,6	;RP1=0, select bank0
  3524  0685  1C28               	btfss	bitParita@sommaRow,0
  3525  0686  2E88               	goto	u3101
  3526  0687  2E89               	goto	u3100
  3527  0688                     u3101:	
  3528  0688  2E8F               	goto	l106
  3529  0689                     u3100:	
  3530  0689                     l2868:	
  3531                           
  3532                           ;./CustomLib/BitsFlow.h: 28:         {;./CustomLib/BitsFlow.h: 29:             error = 1
      +                          ;
  3533  0689  01AB               	clrf	bitParita@error
  3534  068A  0AAB               	incf	bitParita@error,f
  3535  068B                     l2870:	
  3536                           
  3537                           ;./CustomLib/BitsFlow.h: 30:             errorRow = i;
  3538  068B  0832               	movf	bitParita@i,w
  3539  068C  00A4               	movwf	??_bitParita
  3540  068D  0824               	movf	??_bitParita,w
  3541  068E  00AC               	movwf	bitParita@errorRow
  3542  068F                     l106:	
  3543                           ;./CustomLib/BitsFlow.h: 31:         }
  3544                           
  3545                           
  3546                           ;./CustomLib/BitsFlow.h: 32:     }
  3547  068F  3001               	movlw	1
  3548  0690  07B2               	addwf	bitParita@i,f
  3549  0691  1803               	skipnc
  3550  0692  0AB3               	incf	bitParita@i+1,f
  3551  0693  3000               	movlw	0
  3552  0694  07B3               	addwf	bitParita@i+1,f
  3553  0695                     l2872:	
  3554  0695  0833               	movf	bitParita@i+1,w
  3555  0696  3A80               	xorlw	128
  3556  0697  00FF               	movwf	btemp+1
  3557  0698  3080               	movlw	128
  3558  0699  027F               	subwf	btemp+1,w
  3559  069A  1D03               	skipz
  3560  069B  2E9E               	goto	u3115
  3561  069C  3005               	movlw	5
  3562  069D  0232               	subwf	bitParita@i,w
  3563  069E                     u3115:	
  3564  069E  1C03               	skipc
  3565  069F  2EA1               	goto	u3111
  3566  06A0  2EA2               	goto	u3110
  3567  06A1                     u3111:	
  3568  06A1  2E56               	goto	l2856
  3569  06A2                     u3110:	
  3570  06A2                     l2874:	
  3571                           
  3572                           ;./CustomLib/BitsFlow.h: 33:     for (int i = 0; i < 8; i++)
  3573  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  3574  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  3575  06A4  01B4               	clrf	bitParita@i_330
  3576  06A5  01B5               	clrf	bitParita@i_330+1
  3577  06A6                     l2880:	
  3578                           
  3579                           ;./CustomLib/BitsFlow.h: 34:     {;./CustomLib/BitsFlow.h: 35:         for (int y = 0; y
      +                           < 4; y++)
  3580  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  3581  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  3582  06A8  01AF               	clrf	bitParita@y_331
  3583  06A9  01B0               	clrf	bitParita@y_331+1
  3584  06AA                     l2886:	
  3585                           
  3586                           ;./CustomLib/BitsFlow.h: 37:         {;./CustomLib/BitsFlow.h: 38:             sommaColu
      +                          mn += (rx[y] >> i) & 1;
  3587  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  3588  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  3589  06AC  082F               	movf	bitParita@y_331,w
  3590  06AD  0731               	addwf	bitParita@rx,w
  3591  06AE  00A4               	movwf	??_bitParita
  3592  06AF  0824               	movf	??_bitParita,w
  3593  06B0  0084               	movwf	4
  3594  06B1  1383               	bcf	3,7	;select IRP bank0
  3595  06B2  0800               	movf	0,w
  3596  06B3  00A5               	movwf	??_bitParita+1
  3597  06B4  0A34               	incf	bitParita@i_330,w
  3598  06B5  2EB8               	goto	u3124
  3599  06B6                     u3125:	
  3600  06B6  1003               	clrc
  3601  06B7  0CA5               	rrf	??_bitParita+1,f
  3602  06B8                     u3124:	
  3603  06B8  3EFF               	addlw	-1
  3604  06B9  1D03               	skipz
  3605  06BA  2EB6               	goto	u3125
  3606  06BB  0825               	movf	??_bitParita+1,w
  3607  06BC  3901               	andlw	1
  3608  06BD  00A6               	movwf	??_bitParita+2
  3609  06BE  0826               	movf	??_bitParita+2,w
  3610  06BF  07A9               	addwf	bitParita@sommaColumn,f
  3611  06C0                     l2888:	
  3612                           
  3613                           ;./CustomLib/BitsFlow.h: 39:         }
  3614  06C0  3001               	movlw	1
  3615  06C1  07AF               	addwf	bitParita@y_331,f
  3616  06C2  1803               	skipnc
  3617  06C3  0AB0               	incf	bitParita@y_331+1,f
  3618  06C4  3000               	movlw	0
  3619  06C5  07B0               	addwf	bitParita@y_331+1,f
  3620  06C6                     l2890:	
  3621  06C6  0830               	movf	bitParita@y_331+1,w
  3622  06C7  3A80               	xorlw	128
  3623  06C8  00FF               	movwf	btemp+1
  3624  06C9  3080               	movlw	128
  3625  06CA  027F               	subwf	btemp+1,w
  3626  06CB  1D03               	skipz
  3627  06CC  2ECF               	goto	u3135
  3628  06CD  3004               	movlw	4
  3629  06CE  022F               	subwf	bitParita@y_331,w
  3630  06CF                     u3135:	
  3631  06CF  1C03               	skipc
  3632  06D0  2ED2               	goto	u3131
  3633  06D1  2ED3               	goto	u3130
  3634  06D2                     u3131:	
  3635  06D2  2EAA               	goto	l2886
  3636  06D3                     u3130:	
  3637  06D3                     l110:	
  3638                           
  3639                           ;./CustomLib/BitsFlow.h: 40:         if (sommaColumn % 2 == 1)
  3640  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  3641  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  3642  06D5  1C29               	btfss	bitParita@sommaColumn,0
  3643  06D6  2ED8               	goto	u3141
  3644  06D7  2ED9               	goto	u3140
  3645  06D8                     u3141:	
  3646  06D8  2EDF               	goto	l111
  3647  06D9                     u3140:	
  3648  06D9                     l2892:	
  3649                           
  3650                           ;./CustomLib/BitsFlow.h: 41:         {;./CustomLib/BitsFlow.h: 42:             error = 1
      +                          ;
  3651  06D9  01AB               	clrf	bitParita@error
  3652  06DA  0AAB               	incf	bitParita@error,f
  3653  06DB                     l2894:	
  3654                           
  3655                           ;./CustomLib/BitsFlow.h: 43:             errorColumn = i;
  3656  06DB  0834               	movf	bitParita@i_330,w
  3657  06DC  00A4               	movwf	??_bitParita
  3658  06DD  0824               	movf	??_bitParita,w
  3659  06DE  00AA               	movwf	bitParita@errorColumn
  3660  06DF                     l111:	
  3661                           ;./CustomLib/BitsFlow.h: 44:         }
  3662                           
  3663                           
  3664                           ;./CustomLib/BitsFlow.h: 45:     }
  3665  06DF  3001               	movlw	1
  3666  06E0  07B4               	addwf	bitParita@i_330,f
  3667  06E1  1803               	skipnc
  3668  06E2  0AB5               	incf	bitParita@i_330+1,f
  3669  06E3  3000               	movlw	0
  3670  06E4  07B5               	addwf	bitParita@i_330+1,f
  3671  06E5                     l2896:	
  3672  06E5  0835               	movf	bitParita@i_330+1,w
  3673  06E6  3A80               	xorlw	128
  3674  06E7  00FF               	movwf	btemp+1
  3675  06E8  3080               	movlw	128
  3676  06E9  027F               	subwf	btemp+1,w
  3677  06EA  1D03               	skipz
  3678  06EB  2EEE               	goto	u3155
  3679  06EC  3008               	movlw	8
  3680  06ED  0234               	subwf	bitParita@i_330,w
  3681  06EE                     u3155:	
  3682  06EE  1C03               	skipc
  3683  06EF  2EF1               	goto	u3151
  3684  06F0  2EF2               	goto	u3150
  3685  06F1                     u3151:	
  3686  06F1  2EA6               	goto	l2880
  3687  06F2                     u3150:	
  3688  06F2                     l2898:	
  3689                           
  3690                           ;./CustomLib/BitsFlow.h: 46:     if (error != 0)
  3691  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  3692  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  3693  06F4  082B               	movf	bitParita@error,w
  3694  06F5  1903               	btfsc	3,2
  3695  06F6  2EF8               	goto	u3161
  3696  06F7  2EF9               	goto	u3160
  3697  06F8                     u3161:	
  3698  06F8  2F14               	goto	l113
  3699  06F9                     u3160:	
  3700  06F9                     l2900:	
  3701                           
  3702                           ;./CustomLib/BitsFlow.h: 47:     {;./CustomLib/BitsFlow.h: 50:         rx[errorRow] = bi
      +                          tChange(rx[errorRow], errorColumn);
  3703  06F9  082A               	movf	bitParita@errorColumn,w
  3704  06FA  00A4               	movwf	??_bitParita
  3705  06FB  0824               	movf	??_bitParita,w
  3706  06FC  00A0               	movwf	bitChange@n
  3707  06FD  082C               	movf	bitParita@errorRow,w
  3708  06FE  0731               	addwf	bitParita@rx,w
  3709  06FF  00A5               	movwf	??_bitParita+1
  3710  0700  0825               	movf	??_bitParita+1,w
  3711  0701  0084               	movwf	4
  3712  0702  1383               	bcf	3,7	;select IRP bank0
  3713  0703  0800               	movf	0,w
  3714  0704  120A  158A  2470  120A  118A  	fcall	_bitChange
  3715  0709  1283               	bcf	3,5	;RP0=0, select bank0
  3716  070A  1303               	bcf	3,6	;RP1=0, select bank0
  3717  070B  00A6               	movwf	??_bitParita+2
  3718  070C  082C               	movf	bitParita@errorRow,w
  3719  070D  0731               	addwf	bitParita@rx,w
  3720  070E  00A7               	movwf	??_bitParita+3
  3721  070F  0827               	movf	??_bitParita+3,w
  3722  0710  0084               	movwf	4
  3723  0711  0826               	movf	??_bitParita+2,w
  3724  0712  1383               	bcf	3,7	;select IRP bank0
  3725  0713  0080               	movwf	0
  3726  0714                     l113:	
  3727  0714  0008               	return
  3728  0715                     __end_of_bitParita:	
  3729                           
  3730                           	psect	text8
  3731  0C70                     __ptext8:	
  3732 ;; *************** function _bitChange *****************
  3733 ;; Defined at:
  3734 ;;		line 1 in file "./CustomLib/BitsFlow.h"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  dato            1    wreg     unsigned char 
  3737 ;;  n               1    0[BANK0 ] unsigned char 
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;  dato            1    3[BANK0 ] unsigned char 
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      unsigned char 
  3742 ;; Registers used:
  3743 ;;		wreg, status,2, status,0
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3749 ;;      Params:         0       1       0       0       0
  3750 ;;      Locals:         0       1       0       0       0
  3751 ;;      Temps:          0       2       0       0       0
  3752 ;;      Totals:         0       4       0       0       0
  3753 ;;Total ram usage:        4 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:    2
  3756 ;; This function calls:
  3757 ;;		Nothing
  3758 ;; This function is called by:
  3759 ;;		_bitParita
  3760 ;; This function uses a non-reentrant model
  3761 ;;
  3762                           
  3763                           
  3764                           ;psect for function _bitChange
  3765  0C70                     _bitChange:	
  3766                           
  3767                           ;incstack = 0
  3768                           ; Regs used in _bitChange: [wreg+status,2+status,0]
  3769                           ;bitChange@dato stored from wreg
  3770  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  3771  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  3772  0C72  00A3               	movwf	bitChange@dato
  3773  0C73                     l2626:	
  3774                           
  3775                           ;./CustomLib/BitsFlow.h: 1: char bitChange(char dato, char n);./CustomLib/BitsFlow.h: 2:
      +                           {;./CustomLib/BitsFlow.h: 3:     if (dato & (1 << (n)))
  3776  0C73  3001               	movlw	1
  3777  0C74  00A1               	movwf	??_bitChange
  3778  0C75  0A20               	incf	bitChange@n,w
  3779  0C76  2C79               	goto	u2604
  3780  0C77                     u2605:	
  3781  0C77  1003               	clrc
  3782  0C78  0DA1               	rlf	??_bitChange,f
  3783  0C79                     u2604:	
  3784  0C79  3EFF               	addlw	-1
  3785  0C7A  1D03               	skipz
  3786  0C7B  2C77               	goto	u2605
  3787  0C7C  0821               	movf	??_bitChange,w
  3788  0C7D  0523               	andwf	bitChange@dato,w
  3789  0C7E  1903               	btfsc	3,2
  3790  0C7F  2C81               	goto	u2611
  3791  0C80  2C82               	goto	u2610
  3792  0C81                     u2611:	
  3793  0C81  2C91               	goto	l2634
  3794  0C82                     u2610:	
  3795  0C82                     l2628:	
  3796                           
  3797                           ;./CustomLib/BitsFlow.h: 4:     {;./CustomLib/BitsFlow.h: 5:         return dato |= (1 <
      +                          < (n));
  3798  0C82  3001               	movlw	1
  3799  0C83  00A1               	movwf	??_bitChange
  3800  0C84  0A20               	incf	bitChange@n,w
  3801  0C85  2C88               	goto	u2624
  3802  0C86                     u2625:	
  3803  0C86  1003               	clrc
  3804  0C87  0DA1               	rlf	??_bitChange,f
  3805  0C88                     u2624:	
  3806  0C88  3EFF               	addlw	-1
  3807  0C89  1D03               	skipz
  3808  0C8A  2C86               	goto	u2625
  3809  0C8B  0821               	movf	??_bitChange,w
  3810  0C8C  00A2               	movwf	??_bitChange+1
  3811  0C8D  0822               	movf	??_bitChange+1,w
  3812  0C8E  04A3               	iorwf	bitChange@dato,f
  3813  0C8F  0823               	movf	bitChange@dato,w
  3814  0C90  2CA0               	goto	l98
  3815  0C91                     l2634:	
  3816                           
  3817                           ;./CustomLib/BitsFlow.h: 8:     {;./CustomLib/BitsFlow.h: 9:         return dato &= ~(1 
      +                          << (n));
  3818  0C91  3001               	movlw	1
  3819  0C92  00A1               	movwf	??_bitChange
  3820  0C93  0A20               	incf	bitChange@n,w
  3821  0C94  2C97               	goto	u2634
  3822  0C95                     u2635:	
  3823  0C95  1003               	clrc
  3824  0C96  0DA1               	rlf	??_bitChange,f
  3825  0C97                     u2634:	
  3826  0C97  3EFF               	addlw	-1
  3827  0C98  1D03               	skipz
  3828  0C99  2C95               	goto	u2635
  3829  0C9A  0821               	movf	??_bitChange,w
  3830  0C9B  3AFF               	xorlw	255
  3831  0C9C  00A2               	movwf	??_bitChange+1
  3832  0C9D  0822               	movf	??_bitChange+1,w
  3833  0C9E  05A3               	andwf	bitChange@dato,f
  3834  0C9F  0823               	movf	bitChange@dato,w
  3835  0CA0                     l98:	
  3836  0CA0  0008               	return
  3837  0CA1                     __end_of_bitChange:	
  3838                           
  3839                           	psect	text9
  3840  0BDE                     __ptext9:	
  3841 ;; *************** function ___bmul *****************
  3842 ;; Defined at:
  3843 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  multiplier      1    wreg     unsigned char 
  3846 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3849 ;;  product         1    2[BANK0 ] unsigned char 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  1    wreg      unsigned char 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2, status,0
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3859 ;;      Params:         0       1       0       0       0
  3860 ;;      Locals:         0       2       0       0       0
  3861 ;;      Temps:          0       1       0       0       0
  3862 ;;      Totals:         0       4       0       0       0
  3863 ;;Total ram usage:        4 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    2
  3866 ;; This function calls:
  3867 ;;		Nothing
  3868 ;; This function is called by:
  3869 ;;		_main
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           
  3874                           ;psect for function ___bmul
  3875  0BDE                     ___bmul:	
  3876                           
  3877                           ;incstack = 0
  3878                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3879                           ;___bmul@multiplier stored from wreg
  3880  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  3881  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  3882  0BE0  00A3               	movwf	___bmul@multiplier
  3883  0BE1                     l3008:	
  3884  0BE1  01A2               	clrf	___bmul@product
  3885  0BE2                     l3010:	
  3886  0BE2  1C23               	btfss	___bmul@multiplier,0
  3887  0BE3  2BE5               	goto	u3241
  3888  0BE4  2BE6               	goto	u3240
  3889  0BE5                     u3241:	
  3890  0BE5  2BEA               	goto	l3014
  3891  0BE6                     u3240:	
  3892  0BE6                     l3012:	
  3893  0BE6  0820               	movf	___bmul@multiplicand,w
  3894  0BE7  00A1               	movwf	??___bmul
  3895  0BE8  0821               	movf	??___bmul,w
  3896  0BE9  07A2               	addwf	___bmul@product,f
  3897  0BEA                     l3014:	
  3898  0BEA  1003               	clrc
  3899  0BEB  0DA0               	rlf	___bmul@multiplicand,f
  3900  0BEC                     l3016:	
  3901  0BEC  1003               	clrc
  3902  0BED  0CA3               	rrf	___bmul@multiplier,f
  3903  0BEE  0823               	movf	___bmul@multiplier,w
  3904  0BEF  1D03               	btfss	3,2
  3905  0BF0  2BF2               	goto	u3251
  3906  0BF1  2BF3               	goto	u3250
  3907  0BF2                     u3251:	
  3908  0BF2  2BE2               	goto	l3010
  3909  0BF3                     u3250:	
  3910  0BF3                     l3018:	
  3911  0BF3  0822               	movf	___bmul@product,w
  3912  0BF4                     l464:	
  3913  0BF4  0008               	return
  3914  0BF5                     __end_of___bmul:	
  3915                           
  3916                           	psect	text10
  3917  0CD6                     __ptext10:	
  3918 ;; *************** function _UART_Init *****************
  3919 ;; Defined at:
  3920 ;;		line 374 in file "main.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  baudrate        2   15[BANK0 ] int 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;		None
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0, pclath, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3934 ;;      Params:         0       2       0       0       0
  3935 ;;      Locals:         0       0       0       0       0
  3936 ;;      Temps:          0       4       0       0       0
  3937 ;;      Totals:         0       6       0       0       0
  3938 ;;Total ram usage:        6 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    3
  3941 ;; This function calls:
  3942 ;;		___aldiv
  3943 ;; This function is called by:
  3944 ;;		_main
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           
  3949                           ;psect for function _UART_Init
  3950  0CD6                     _UART_Init:	
  3951  0CD6                     l2910:	
  3952                           ;incstack = 0
  3953                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3954                           
  3955                           
  3956                           ;main.c: 374: void UART_Init(int baudrate);main.c: 375: {;main.c: 376:     TRISCbits.TRI
      +                          SC6 = 0;
  3957  0CD6  1683               	bsf	3,5	;RP0=1, select bank1
  3958  0CD7  1303               	bcf	3,6	;RP1=0, select bank1
  3959  0CD8  1307               	bcf	7,6	;volatile
  3960                           
  3961                           ;main.c: 377:     TXSTAbits.TXEN = 1;
  3962  0CD9  1698               	bsf	24,5	;volatile
  3963                           
  3964                           ;main.c: 378:     RCSTAbits.SPEN = 1;
  3965  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  3966  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  3967  0CDC  1798               	bsf	24,7	;volatile
  3968                           
  3969                           ;main.c: 379:     RCSTAbits.CREN = 1;
  3970  0CDD  1618               	bsf	24,4	;volatile
  3971  0CDE                     l2912:	
  3972                           
  3973                           ;main.c: 380:     SPBRG = (32000000 / (long)(64UL * baudrate)) - 1;
  3974  0CDE  082F               	movf	UART_Init@baudrate,w
  3975  0CDF  00B1               	movwf	??_UART_Init
  3976  0CE0  0830               	movf	UART_Init@baudrate+1,w
  3977  0CE1  00B2               	movwf	??_UART_Init+1
  3978  0CE2  3000               	movlw	0
  3979  0CE3  1BB2               	btfsc	??_UART_Init+1,7
  3980  0CE4  30FF               	movlw	255
  3981  0CE5  00B3               	movwf	??_UART_Init+2
  3982  0CE6  00B4               	movwf	??_UART_Init+3
  3983  0CE7  3006               	movlw	6
  3984  0CE8                     u3175:	
  3985  0CE8  1003               	clrc
  3986  0CE9  0DB1               	rlf	??_UART_Init,f
  3987  0CEA  0DB2               	rlf	??_UART_Init+1,f
  3988  0CEB  0DB3               	rlf	??_UART_Init+2,f
  3989  0CEC  0DB4               	rlf	??_UART_Init+3,f
  3990  0CED                     u3170:	
  3991  0CED  3EFF               	addlw	-1
  3992  0CEE  1D03               	skipz
  3993  0CEF  2CE8               	goto	u3175
  3994  0CF0  0834               	movf	??_UART_Init+3,w
  3995  0CF1  00A3               	movwf	___aldiv@divisor+3
  3996  0CF2  0833               	movf	??_UART_Init+2,w
  3997  0CF3  00A2               	movwf	___aldiv@divisor+2
  3998  0CF4  0832               	movf	??_UART_Init+1,w
  3999  0CF5  00A1               	movwf	___aldiv@divisor+1
  4000  0CF6  0831               	movf	??_UART_Init,w
  4001  0CF7  00A0               	movwf	___aldiv@divisor
  4002  0CF8  3001               	movlw	1
  4003  0CF9  00A7               	movwf	___aldiv@dividend+3
  4004  0CFA  30E8               	movlw	232
  4005  0CFB  00A6               	movwf	___aldiv@dividend+2
  4006  0CFC  3048               	movlw	72
  4007  0CFD  00A5               	movwf	___aldiv@dividend+1
  4008  0CFE  3000               	movlw	0
  4009  0CFF  00A4               	movwf	___aldiv@dividend
  4010  0D00  120A  158A  2763  120A  158A  	fcall	___aldiv
  4011  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0D06  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0D07  0820               	movf	?___aldiv,w
  4014  0D08  3EFF               	addlw	255
  4015  0D09  1683               	bsf	3,5	;RP0=1, select bank1
  4016  0D0A  1303               	bcf	3,6	;RP1=0, select bank1
  4017  0D0B  0099               	movwf	25	;volatile
  4018  0D0C                     l2914:	
  4019                           
  4020                           ;main.c: 381:     INTCONbits.GIE = 1;
  4021  0D0C  178B               	bsf	11,7	;volatile
  4022  0D0D                     l2916:	
  4023                           
  4024                           ;main.c: 382:     INTCONbits.PEIE = 1;
  4025  0D0D  170B               	bsf	11,6	;volatile
  4026  0D0E                     l2918:	
  4027                           
  4028                           ;main.c: 383:     PIE1bits.RCIE = 1;
  4029  0D0E  168C               	bsf	12,5	;volatile
  4030  0D0F                     l271:	
  4031  0D0F  0008               	return
  4032  0D10                     __end_of_UART_Init:	
  4033                           
  4034                           	psect	text11
  4035  0F63                     __ptext11:	
  4036 ;; *************** function ___aldiv *****************
  4037 ;; Defined at:
  4038 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  divisor         4    0[BANK0 ] long 
  4041 ;;  dividend        4    4[BANK0 ] long 
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;  quotient        4   11[BANK0 ] long 
  4044 ;;  sign            1   10[BANK0 ] unsigned char 
  4045 ;;  counter         1    9[BANK0 ] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  4    0[BANK0 ] long 
  4048 ;; Registers used:
  4049 ;;		wreg, status,2, status,0
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4055 ;;      Params:         0       8       0       0       0
  4056 ;;      Locals:         0       6       0       0       0
  4057 ;;      Temps:          0       1       0       0       0
  4058 ;;      Totals:         0      15       0       0       0
  4059 ;;Total ram usage:       15 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    2
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_UART_Init
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           
  4070                           ;psect for function ___aldiv
  4071  0F63                     ___aldiv:	
  4072  0F63                     l2724:	
  4073                           ;incstack = 0
  4074                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4075                           
  4076  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  4077  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  4078  0F65  01AA               	clrf	___aldiv@sign
  4079  0F66                     l2726:	
  4080  0F66  1FA3               	btfss	___aldiv@divisor+3,7
  4081  0F67  2F69               	goto	u2791
  4082  0F68  2F6A               	goto	u2790
  4083  0F69                     u2791:	
  4084  0F69  2F77               	goto	l503
  4085  0F6A                     u2790:	
  4086  0F6A                     l2728:	
  4087  0F6A  09A0               	comf	___aldiv@divisor,f
  4088  0F6B  09A1               	comf	___aldiv@divisor+1,f
  4089  0F6C  09A2               	comf	___aldiv@divisor+2,f
  4090  0F6D  09A3               	comf	___aldiv@divisor+3,f
  4091  0F6E  0AA0               	incf	___aldiv@divisor,f
  4092  0F6F  1903               	skipnz
  4093  0F70  0AA1               	incf	___aldiv@divisor+1,f
  4094  0F71  1903               	skipnz
  4095  0F72  0AA2               	incf	___aldiv@divisor+2,f
  4096  0F73  1903               	skipnz
  4097  0F74  0AA3               	incf	___aldiv@divisor+3,f
  4098  0F75  01AA               	clrf	___aldiv@sign
  4099  0F76  0AAA               	incf	___aldiv@sign,f
  4100  0F77                     l503:	
  4101  0F77  1FA7               	btfss	___aldiv@dividend+3,7
  4102  0F78  2F7A               	goto	u2801
  4103  0F79  2F7B               	goto	u2800
  4104  0F7A                     u2801:	
  4105  0F7A  2F8A               	goto	l2734
  4106  0F7B                     u2800:	
  4107  0F7B                     l2730:	
  4108  0F7B  09A4               	comf	___aldiv@dividend,f
  4109  0F7C  09A5               	comf	___aldiv@dividend+1,f
  4110  0F7D  09A6               	comf	___aldiv@dividend+2,f
  4111  0F7E  09A7               	comf	___aldiv@dividend+3,f
  4112  0F7F  0AA4               	incf	___aldiv@dividend,f
  4113  0F80  1903               	skipnz
  4114  0F81  0AA5               	incf	___aldiv@dividend+1,f
  4115  0F82  1903               	skipnz
  4116  0F83  0AA6               	incf	___aldiv@dividend+2,f
  4117  0F84  1903               	skipnz
  4118  0F85  0AA7               	incf	___aldiv@dividend+3,f
  4119  0F86                     l2732:	
  4120  0F86  3001               	movlw	1
  4121  0F87  00A8               	movwf	??___aldiv
  4122  0F88  0828               	movf	??___aldiv,w
  4123  0F89  06AA               	xorwf	___aldiv@sign,f
  4124  0F8A                     l2734:	
  4125  0F8A  3000               	movlw	0
  4126  0F8B  00AE               	movwf	___aldiv@quotient+3
  4127  0F8C  3000               	movlw	0
  4128  0F8D  00AD               	movwf	___aldiv@quotient+2
  4129  0F8E  3000               	movlw	0
  4130  0F8F  00AC               	movwf	___aldiv@quotient+1
  4131  0F90  3000               	movlw	0
  4132  0F91  00AB               	movwf	___aldiv@quotient
  4133  0F92                     l2736:	
  4134  0F92  0823               	movf	___aldiv@divisor+3,w
  4135  0F93  0422               	iorwf	___aldiv@divisor+2,w
  4136  0F94  0421               	iorwf	___aldiv@divisor+1,w
  4137  0F95  0420               	iorwf	___aldiv@divisor,w
  4138  0F96  1903               	skipnz
  4139  0F97  2F99               	goto	u2811
  4140  0F98  2F9A               	goto	u2810
  4141  0F99                     u2811:	
  4142  0F99  2FE7               	goto	l2756
  4143  0F9A                     u2810:	
  4144  0F9A                     l2738:	
  4145  0F9A  01A9               	clrf	___aldiv@counter
  4146  0F9B  0AA9               	incf	___aldiv@counter,f
  4147  0F9C  2FAA               	goto	l2742
  4148  0F9D                     l2740:	
  4149  0F9D  3001               	movlw	1
  4150  0F9E  00A8               	movwf	??___aldiv
  4151  0F9F                     u2825:	
  4152  0F9F  1003               	clrc
  4153  0FA0  0DA0               	rlf	___aldiv@divisor,f
  4154  0FA1  0DA1               	rlf	___aldiv@divisor+1,f
  4155  0FA2  0DA2               	rlf	___aldiv@divisor+2,f
  4156  0FA3  0DA3               	rlf	___aldiv@divisor+3,f
  4157  0FA4  0BA8               	decfsz	??___aldiv,f
  4158  0FA5  2F9F               	goto	u2825
  4159  0FA6  3001               	movlw	1
  4160  0FA7  00A8               	movwf	??___aldiv
  4161  0FA8  0828               	movf	??___aldiv,w
  4162  0FA9  07A9               	addwf	___aldiv@counter,f
  4163  0FAA                     l2742:	
  4164  0FAA  1FA3               	btfss	___aldiv@divisor+3,7
  4165  0FAB  2FAD               	goto	u2831
  4166  0FAC  2FAE               	goto	u2830
  4167  0FAD                     u2831:	
  4168  0FAD  2F9D               	goto	l2740
  4169  0FAE                     u2830:	
  4170  0FAE                     l2744:	
  4171  0FAE  3001               	movlw	1
  4172  0FAF  00A8               	movwf	??___aldiv
  4173  0FB0                     u2845:	
  4174  0FB0  1003               	clrc
  4175  0FB1  0DAB               	rlf	___aldiv@quotient,f
  4176  0FB2  0DAC               	rlf	___aldiv@quotient+1,f
  4177  0FB3  0DAD               	rlf	___aldiv@quotient+2,f
  4178  0FB4  0DAE               	rlf	___aldiv@quotient+3,f
  4179  0FB5  0BA8               	decfsz	??___aldiv,f
  4180  0FB6  2FB0               	goto	u2845
  4181  0FB7                     l2746:	
  4182  0FB7  0823               	movf	___aldiv@divisor+3,w
  4183  0FB8  0227               	subwf	___aldiv@dividend+3,w
  4184  0FB9  1D03               	skipz
  4185  0FBA  2FC5               	goto	u2855
  4186  0FBB  0822               	movf	___aldiv@divisor+2,w
  4187  0FBC  0226               	subwf	___aldiv@dividend+2,w
  4188  0FBD  1D03               	skipz
  4189  0FBE  2FC5               	goto	u2855
  4190  0FBF  0821               	movf	___aldiv@divisor+1,w
  4191  0FC0  0225               	subwf	___aldiv@dividend+1,w
  4192  0FC1  1D03               	skipz
  4193  0FC2  2FC5               	goto	u2855
  4194  0FC3  0820               	movf	___aldiv@divisor,w
  4195  0FC4  0224               	subwf	___aldiv@dividend,w
  4196  0FC5                     u2855:	
  4197  0FC5  1C03               	skipc
  4198  0FC6  2FC8               	goto	u2851
  4199  0FC7  2FC9               	goto	u2850
  4200  0FC8                     u2851:	
  4201  0FC8  2FD8               	goto	l2752
  4202  0FC9                     u2850:	
  4203  0FC9                     l2748:	
  4204  0FC9  0820               	movf	___aldiv@divisor,w
  4205  0FCA  02A4               	subwf	___aldiv@dividend,f
  4206  0FCB  0821               	movf	___aldiv@divisor+1,w
  4207  0FCC  1C03               	skipc
  4208  0FCD  0F21               	incfsz	___aldiv@divisor+1,w
  4209  0FCE  02A5               	subwf	___aldiv@dividend+1,f
  4210  0FCF  0822               	movf	___aldiv@divisor+2,w
  4211  0FD0  1C03               	skipc
  4212  0FD1  0F22               	incfsz	___aldiv@divisor+2,w
  4213  0FD2  02A6               	subwf	___aldiv@dividend+2,f
  4214  0FD3  0823               	movf	___aldiv@divisor+3,w
  4215  0FD4  1C03               	skipc
  4216  0FD5  0F23               	incfsz	___aldiv@divisor+3,w
  4217  0FD6  02A7               	subwf	___aldiv@dividend+3,f
  4218  0FD7                     l2750:	
  4219  0FD7  142B               	bsf	___aldiv@quotient,0
  4220  0FD8                     l2752:	
  4221  0FD8  3001               	movlw	1
  4222  0FD9                     u2865:	
  4223  0FD9  1003               	clrc
  4224  0FDA  0CA3               	rrf	___aldiv@divisor+3,f
  4225  0FDB  0CA2               	rrf	___aldiv@divisor+2,f
  4226  0FDC  0CA1               	rrf	___aldiv@divisor+1,f
  4227  0FDD  0CA0               	rrf	___aldiv@divisor,f
  4228  0FDE  3EFF               	addlw	-1
  4229  0FDF  1D03               	skipz
  4230  0FE0  2FD9               	goto	u2865
  4231  0FE1                     l2754:	
  4232  0FE1  3001               	movlw	1
  4233  0FE2  02A9               	subwf	___aldiv@counter,f
  4234  0FE3  1D03               	btfss	3,2
  4235  0FE4  2FE6               	goto	u2871
  4236  0FE5  2FE7               	goto	u2870
  4237  0FE6                     u2871:	
  4238  0FE6  2FAE               	goto	l2744
  4239  0FE7                     u2870:	
  4240  0FE7                     l2756:	
  4241  0FE7  082A               	movf	___aldiv@sign,w
  4242  0FE8  1903               	btfsc	3,2
  4243  0FE9  2FEB               	goto	u2881
  4244  0FEA  2FEC               	goto	u2880
  4245  0FEB                     u2881:	
  4246  0FEB  2FF7               	goto	l2760
  4247  0FEC                     u2880:	
  4248  0FEC                     l2758:	
  4249  0FEC  09AB               	comf	___aldiv@quotient,f
  4250  0FED  09AC               	comf	___aldiv@quotient+1,f
  4251  0FEE  09AD               	comf	___aldiv@quotient+2,f
  4252  0FEF  09AE               	comf	___aldiv@quotient+3,f
  4253  0FF0  0AAB               	incf	___aldiv@quotient,f
  4254  0FF1  1903               	skipnz
  4255  0FF2  0AAC               	incf	___aldiv@quotient+1,f
  4256  0FF3  1903               	skipnz
  4257  0FF4  0AAD               	incf	___aldiv@quotient+2,f
  4258  0FF5  1903               	skipnz
  4259  0FF6  0AAE               	incf	___aldiv@quotient+3,f
  4260  0FF7                     l2760:	
  4261  0FF7  082E               	movf	___aldiv@quotient+3,w
  4262  0FF8  00A3               	movwf	?___aldiv+3
  4263  0FF9  082D               	movf	___aldiv@quotient+2,w
  4264  0FFA  00A2               	movwf	?___aldiv+2
  4265  0FFB  082C               	movf	___aldiv@quotient+1,w
  4266  0FFC  00A1               	movwf	?___aldiv+1
  4267  0FFD  082B               	movf	___aldiv@quotient,w
  4268  0FFE  00A0               	movwf	?___aldiv
  4269  0FFF                     l513:	
  4270  0FFF  0008               	return
  4271  1000                     __end_of___aldiv:	
  4272                           
  4273                           	psect	text12
  4274  0BC9                     __ptext12:	
  4275 ;; *************** function _SetDisplay *****************
  4276 ;; Defined at:
  4277 ;;		line 448 in file "main.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;  d1              1    wreg     unsigned char 
  4280 ;;  d2              1    0[BANK0 ] unsigned char 
  4281 ;;  d3              1    1[BANK0 ] unsigned char 
  4282 ;;  value           1    2[BANK0 ] unsigned char 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  d1              1    3[BANK0 ] unsigned char 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1    wreg      void 
  4287 ;; Registers used:
  4288 ;;		wreg, status,0
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4294 ;;      Params:         0       3       0       0       0
  4295 ;;      Locals:         0       1       0       0       0
  4296 ;;      Temps:          0       0       0       0       0
  4297 ;;      Totals:         0       4       0       0       0
  4298 ;;Total ram usage:        4 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    2
  4301 ;; This function calls:
  4302 ;;		Nothing
  4303 ;; This function is called by:
  4304 ;;		_main
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           
  4309                           ;psect for function _SetDisplay
  4310  0BC9                     _SetDisplay:	
  4311                           
  4312                           ;incstack = 0
  4313                           ; Regs used in _SetDisplay: [wreg+status,0]
  4314                           ;SetDisplay@d1 stored from wreg
  4315  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  4316  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  4317  0BCB  00A3               	movwf	SetDisplay@d1
  4318  0BCC                     l2978:	
  4319                           
  4320                           ;main.c: 448: void SetDisplay(char d1, char d2, char d3, char value);main.c: 449: {;main
      +                          .c: 450:     PORTAbits.RA2 = d1;
  4321  0BCC  0C23               	rrf	SetDisplay@d1,w
  4322  0BCD  1C03               	skipc
  4323  0BCE  1105               	bcf	5,2	;volatile
  4324  0BCF  1803               	skipnc
  4325  0BD0  1505               	bsf	5,2	;volatile
  4326                           
  4327                           ;main.c: 451:     PORTAbits.RA3 = d2;
  4328  0BD1  0C20               	rrf	SetDisplay@d2,w
  4329  0BD2  1C03               	skipc
  4330  0BD3  1185               	bcf	5,3	;volatile
  4331  0BD4  1803               	skipnc
  4332  0BD5  1585               	bsf	5,3	;volatile
  4333                           
  4334                           ;main.c: 452:     PORTAbits.RA4 = d3;
  4335  0BD6  0C21               	rrf	SetDisplay@d3,w
  4336  0BD7  1C03               	skipc
  4337  0BD8  1205               	bcf	5,4	;volatile
  4338  0BD9  1803               	skipnc
  4339  0BDA  1605               	bsf	5,4	;volatile
  4340  0BDB                     l2980:	
  4341                           
  4342                           ;main.c: 453:     PORTD = value;
  4343  0BDB  0822               	movf	SetDisplay@value,w
  4344  0BDC  0088               	movwf	8	;volatile
  4345  0BDD                     l303:	
  4346  0BDD  0008               	return
  4347  0BDE                     __end_of_SetDisplay:	
  4348                           
  4349                           	psect	text13
  4350  0ED9                     __ptext13:	
  4351 ;; *************** function _SetDefaultTimers *****************
  4352 ;; Defined at:
  4353 ;;		line 456 in file "main.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  rosso           2    0[BANK0 ] int 
  4356 ;;  verde           2    2[BANK0 ] int 
  4357 ;;  giallo          2    4[BANK0 ] int 
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;  i               1   13[BANK0 ] unsigned char 
  4360 ;;  l               1   12[BANK0 ] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  1    wreg      void 
  4363 ;; Registers used:
  4364 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4370 ;;      Params:         0       6       0       0       0
  4371 ;;      Locals:         0       2       0       0       0
  4372 ;;      Temps:          0       6       0       0       0
  4373 ;;      Totals:         0      14       0       0       0
  4374 ;;Total ram usage:       14 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    2
  4377 ;; This function calls:
  4378 ;;		Nothing
  4379 ;; This function is called by:
  4380 ;;		_main
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           
  4385                           ;psect for function _SetDefaultTimers
  4386  0ED9                     _SetDefaultTimers:	
  4387  0ED9                     l2920:	
  4388                           ;incstack = 0
  4389                           ; Regs used in _SetDefaultTimers: [wreg-fsr0h+status,2+status,0]
  4390                           
  4391                           
  4392                           ;main.c: 456: void SetDefaultTimers(int rosso, int verde, int giallo);main.c: 457: {;mai
      +                          n.c: 458:     for (unsigned char l = 0; l < 16; l++)
  4393  0ED9  1283               	bcf	3,5	;RP0=0, select bank0
  4394  0EDA  1303               	bcf	3,6	;RP1=0, select bank0
  4395  0EDB  01AC               	clrf	SetDefaultTimers@l
  4396  0EDC                     l2926:	
  4397                           
  4398                           ;main.c: 459:     {;main.c: 460:         for (unsigned char i = 0; i < 3; i++)
  4399  0EDC  01AD               	clrf	SetDefaultTimers@i
  4400  0EDD  2F3B               	goto	l2940
  4401  0EDE                     l2932:	
  4402                           
  4403                           ;main.c: 465:                 (*(Semafori[l])).new_times[i] = rosso;
  4404  0EDE  082C               	movf	SetDefaultTimers@l,w
  4405  0EDF  00A6               	movwf	??_SetDefaultTimers
  4406  0EE0  0726               	addwf	??_SetDefaultTimers,w
  4407  0EE1  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4408  0EE2  0084               	movwf	4
  4409  0EE3  1383               	bcf	3,7	;select IRP bank1
  4410  0EE4  0800               	movf	0,w
  4411  0EE5  00A7               	movwf	??_SetDefaultTimers+1
  4412  0EE6  0A84               	incf	4,f
  4413  0EE7  0800               	movf	0,w
  4414  0EE8  00A8               	movwf	??_SetDefaultTimers+2
  4415  0EE9  082D               	movf	SetDefaultTimers@i,w
  4416  0EEA  00A9               	movwf	??_SetDefaultTimers+3
  4417  0EEB  0729               	addwf	??_SetDefaultTimers+3,w
  4418  0EEC  0727               	addwf	??_SetDefaultTimers+1,w
  4419  0EED  00AA               	movwf	??_SetDefaultTimers+4
  4420  0EEE  0828               	movf	??_SetDefaultTimers+2,w
  4421  0EEF  1803               	skipnc
  4422  0EF0  3E01               	addlw	1
  4423  0EF1  00AB               	movwf	??_SetDefaultTimers+5
  4424  0EF2  082A               	movf	??_SetDefaultTimers+4,w
  4425  0EF3  0084               	movwf	4
  4426  0EF4  1783               	bsf	3,7
  4427  0EF5  1C2B               	btfss	??_SetDefaultTimers+5,0
  4428  0EF6  1383               	bcf	3,7
  4429  0EF7  0820               	movf	SetDefaultTimers@rosso,w
  4430  0EF8  0080               	movwf	0
  4431  0EF9  0A84               	incf	4,f
  4432  0EFA  0821               	movf	SetDefaultTimers@rosso+1,w
  4433  0EFB  0080               	movwf	0
  4434                           
  4435                           ;main.c: 466:                 break;
  4436  0EFC  2F4E               	goto	l2942
  4437  0EFD                     l2934:	
  4438                           
  4439                           ;main.c: 468:                 (*(Semafori[l])).new_times[i] = verde;
  4440  0EFD  082C               	movf	SetDefaultTimers@l,w
  4441  0EFE  00A6               	movwf	??_SetDefaultTimers
  4442  0EFF  0726               	addwf	??_SetDefaultTimers,w
  4443  0F00  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4444  0F01  0084               	movwf	4
  4445  0F02  1383               	bcf	3,7	;select IRP bank1
  4446  0F03  0800               	movf	0,w
  4447  0F04  00A7               	movwf	??_SetDefaultTimers+1
  4448  0F05  0A84               	incf	4,f
  4449  0F06  0800               	movf	0,w
  4450  0F07  00A8               	movwf	??_SetDefaultTimers+2
  4451  0F08  082D               	movf	SetDefaultTimers@i,w
  4452  0F09  00A9               	movwf	??_SetDefaultTimers+3
  4453  0F0A  0729               	addwf	??_SetDefaultTimers+3,w
  4454  0F0B  0727               	addwf	??_SetDefaultTimers+1,w
  4455  0F0C  00AA               	movwf	??_SetDefaultTimers+4
  4456  0F0D  0828               	movf	??_SetDefaultTimers+2,w
  4457  0F0E  1803               	skipnc
  4458  0F0F  3E01               	addlw	1
  4459  0F10  00AB               	movwf	??_SetDefaultTimers+5
  4460  0F11  082A               	movf	??_SetDefaultTimers+4,w
  4461  0F12  0084               	movwf	4
  4462  0F13  1783               	bsf	3,7
  4463  0F14  1C2B               	btfss	??_SetDefaultTimers+5,0
  4464  0F15  1383               	bcf	3,7
  4465  0F16  0822               	movf	SetDefaultTimers@verde,w
  4466  0F17  0080               	movwf	0
  4467  0F18  0A84               	incf	4,f
  4468  0F19  0823               	movf	SetDefaultTimers@verde+1,w
  4469  0F1A  0080               	movwf	0
  4470                           
  4471                           ;main.c: 469:                 break;
  4472  0F1B  2F4E               	goto	l2942
  4473  0F1C                     l2936:	
  4474                           
  4475                           ;main.c: 471:                 (*(Semafori[l])).new_times[i] = giallo;
  4476  0F1C  082C               	movf	SetDefaultTimers@l,w
  4477  0F1D  00A6               	movwf	??_SetDefaultTimers
  4478  0F1E  0726               	addwf	??_SetDefaultTimers,w
  4479  0F1F  3EC7               	addlw	(low (_Semafori| 0))& (0+255)
  4480  0F20  0084               	movwf	4
  4481  0F21  1383               	bcf	3,7	;select IRP bank1
  4482  0F22  0800               	movf	0,w
  4483  0F23  00A7               	movwf	??_SetDefaultTimers+1
  4484  0F24  0A84               	incf	4,f
  4485  0F25  0800               	movf	0,w
  4486  0F26  00A8               	movwf	??_SetDefaultTimers+2
  4487  0F27  082D               	movf	SetDefaultTimers@i,w
  4488  0F28  00A9               	movwf	??_SetDefaultTimers+3
  4489  0F29  0729               	addwf	??_SetDefaultTimers+3,w
  4490  0F2A  0727               	addwf	??_SetDefaultTimers+1,w
  4491  0F2B  00AA               	movwf	??_SetDefaultTimers+4
  4492  0F2C  0828               	movf	??_SetDefaultTimers+2,w
  4493  0F2D  1803               	skipnc
  4494  0F2E  3E01               	addlw	1
  4495  0F2F  00AB               	movwf	??_SetDefaultTimers+5
  4496  0F30  082A               	movf	??_SetDefaultTimers+4,w
  4497  0F31  0084               	movwf	4
  4498  0F32  1783               	bsf	3,7
  4499  0F33  1C2B               	btfss	??_SetDefaultTimers+5,0
  4500  0F34  1383               	bcf	3,7
  4501  0F35  0824               	movf	SetDefaultTimers@giallo,w
  4502  0F36  0080               	movwf	0
  4503  0F37  0A84               	incf	4,f
  4504  0F38  0825               	movf	SetDefaultTimers@giallo+1,w
  4505  0F39  0080               	movwf	0
  4506                           
  4507                           ;main.c: 472:                 break;
  4508  0F3A  2F4E               	goto	l2942
  4509  0F3B                     l2940:	
  4510  0F3B  082D               	movf	SetDefaultTimers@i,w
  4511  0F3C  00A6               	movwf	??_SetDefaultTimers
  4512  0F3D  01A7               	clrf	??_SetDefaultTimers+1
  4513                           
  4514                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4515                           ; Switch size 1, requested type "simple"
  4516                           ; Number of cases is 1, Range of values is 0 to 0
  4517                           ; switch strategies available:
  4518                           ; Name         Instructions Cycles
  4519                           ; simple_byte            4     3 (average)
  4520                           ; direct_byte           11     8 (fixed)
  4521                           ; jumptable            260     6 (fixed)
  4522                           ;	Chosen strategy is simple_byte
  4523  0F3E  0827               	movf	??_SetDefaultTimers+1,w
  4524  0F3F  3A00               	xorlw	0	; case 0
  4525  0F40  1903               	skipnz
  4526  0F41  2F43               	goto	l3342
  4527  0F42  2F4E               	goto	l2942
  4528  0F43                     l3342:	
  4529                           
  4530                           ; Switch size 1, requested type "simple"
  4531                           ; Number of cases is 3, Range of values is 0 to 2
  4532                           ; switch strategies available:
  4533                           ; Name         Instructions Cycles
  4534                           ; simple_byte           10     6 (average)
  4535                           ; direct_byte           17     8 (fixed)
  4536                           ; jumptable            260     6 (fixed)
  4537                           ;	Chosen strategy is simple_byte
  4538  0F43  0826               	movf	??_SetDefaultTimers,w
  4539  0F44  3A00               	xorlw	0	; case 0
  4540  0F45  1903               	skipnz
  4541  0F46  2EDE               	goto	l2932
  4542  0F47  3A01               	xorlw	1	; case 1
  4543  0F48  1903               	skipnz
  4544  0F49  2EFD               	goto	l2934
  4545  0F4A  3A03               	xorlw	3	; case 2
  4546  0F4B  1903               	skipnz
  4547  0F4C  2F1C               	goto	l2936
  4548  0F4D  2F4E               	goto	l2942
  4549  0F4E                     l2942:	
  4550                           
  4551                           ;main.c: 474:         }
  4552  0F4E  3001               	movlw	1
  4553  0F4F  00A6               	movwf	??_SetDefaultTimers
  4554  0F50  0826               	movf	??_SetDefaultTimers,w
  4555  0F51  07AD               	addwf	SetDefaultTimers@i,f
  4556  0F52                     l2944:	
  4557  0F52  3003               	movlw	3
  4558  0F53  022D               	subwf	SetDefaultTimers@i,w
  4559  0F54  1C03               	skipc
  4560  0F55  2F57               	goto	u3181
  4561  0F56  2F58               	goto	u3180
  4562  0F57                     u3181:	
  4563  0F57  2F3B               	goto	l2940
  4564  0F58                     u3180:	
  4565  0F58                     l2946:	
  4566                           
  4567                           ;main.c: 475:     }
  4568  0F58  3001               	movlw	1
  4569  0F59  00A6               	movwf	??_SetDefaultTimers
  4570  0F5A  0826               	movf	??_SetDefaultTimers,w
  4571  0F5B  07AC               	addwf	SetDefaultTimers@l,f
  4572  0F5C                     l2948:	
  4573  0F5C  3010               	movlw	16
  4574  0F5D  022C               	subwf	SetDefaultTimers@l,w
  4575  0F5E  1C03               	skipc
  4576  0F5F  2F61               	goto	u3191
  4577  0F60  2F62               	goto	u3190
  4578  0F61                     u3191:	
  4579  0F61  2EDC               	goto	l2926
  4580  0F62                     u3190:	
  4581  0F62                     l315:	
  4582  0F62  0008               	return
  4583  0F63                     __end_of_SetDefaultTimers:	
  4584                           
  4585                           	psect	text14
  4586  0D10                     __ptext14:	
  4587 ;; *************** function _GetTime *****************
  4588 ;; Defined at:
  4589 ;;		line 422 in file "main.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;  index           1    wreg     unsigned char 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  index           1    4[BANK0 ] unsigned char 
  4594 ;;  time            2    6[BANK0 ] int 
  4595 ;;  shortInt        1    5[BANK0 ] struct .
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  2    0[BANK0 ] int 
  4598 ;; Registers used:
  4599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4605 ;;      Params:         0       2       0       0       0
  4606 ;;      Locals:         0       4       0       0       0
  4607 ;;      Temps:          0       2       0       0       0
  4608 ;;      Totals:         0       8       0       0       0
  4609 ;;Total ram usage:        8 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    2
  4612 ;; This function calls:
  4613 ;;		Nothing
  4614 ;; This function is called by:
  4615 ;;		_main
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           
  4620                           ;psect for function _GetTime
  4621  0D10                     _GetTime:	
  4622                           
  4623                           ;incstack = 0
  4624                           ; Regs used in _GetTime: [wreg-fsr0h+status,2+status,0+btemp+1]
  4625                           ;GetTime@index stored from wreg
  4626  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0D11  1303               	bcf	3,6	;RP1=0, select bank0
  4628  0D12  00A4               	movwf	GetTime@index
  4629  0D13                     l2954:	
  4630                           
  4631                           ;main.c: 422: int GetTime(unsigned char index);main.c: 423: {;main.c: 424:     int time;
      +                          ;main.c: 428:     } shortInt;;main.c: 430:     shortInt.Val = dataFromGateway[index + 3]
      +                           & 0x7F;
  4632  0D13  0824               	movf	GetTime@index,w
  4633  0D14  3EA3               	addlw	(low ((_dataFromGateway| 0+3)))& (0+255)
  4634  0D15  0084               	movwf	4
  4635  0D16  307F               	movlw	127
  4636  0D17  1383               	bcf	3,7	;select IRP bank1
  4637  0D18  0500               	andwf	0,w
  4638  0D19  00A2               	movwf	??_GetTime
  4639  0D1A  0825               	movf	GetTime@shortInt,w
  4640  0D1B  0622               	xorwf	??_GetTime,w
  4641  0D1C  3980               	andlw	-128
  4642  0D1D  0622               	xorwf	??_GetTime,w
  4643  0D1E  00A5               	movwf	GetTime@shortInt
  4644  0D1F                     l2956:	
  4645                           
  4646                           ;main.c: 431:     time = shortInt.Val;
  4647  0D1F  0825               	movf	GetTime@shortInt,w
  4648  0D20  397F               	andlw	127
  4649  0D21  00A2               	movwf	??_GetTime
  4650  0D22  01A3               	clrf	??_GetTime+1
  4651  0D23  0822               	movf	??_GetTime,w
  4652  0D24  00A6               	movwf	GetTime@time
  4653  0D25  0823               	movf	??_GetTime+1,w
  4654  0D26  00A7               	movwf	GetTime@time+1
  4655  0D27                     l2958:	
  4656                           
  4657                           ;main.c: 432:     time = (time << 7) & 0x80;
  4658  0D27  0827               	movf	GetTime@time+1,w
  4659  0D28  00A3               	movwf	??_GetTime+1
  4660  0D29  0826               	movf	GetTime@time,w
  4661  0D2A  00A2               	movwf	??_GetTime
  4662  0D2B  3007               	movlw	7
  4663  0D2C  00FF               	movwf	btemp+1
  4664  0D2D                     u3205:	
  4665  0D2D  1003               	clrc
  4666  0D2E  0DA2               	rlf	??_GetTime,f
  4667  0D2F  0DA3               	rlf	??_GetTime+1,f
  4668  0D30  0BFF               	decfsz	btemp+1,f
  4669  0D31  2D2D               	goto	u3205
  4670  0D32  3080               	movlw	128
  4671  0D33  0522               	andwf	??_GetTime,w
  4672  0D34  00A6               	movwf	GetTime@time
  4673  0D35  3000               	movlw	0
  4674  0D36  0523               	andwf	??_GetTime+1,w
  4675  0D37  00A7               	movwf	GetTime@time+1
  4676  0D38                     l2960:	
  4677                           
  4678                           ;main.c: 434:     shortInt.Val = dataFromGateway[index + 2] & 0x7F;
  4679  0D38  0824               	movf	GetTime@index,w
  4680  0D39  3EA2               	addlw	(low ((_dataFromGateway| 0+2)))& (0+255)
  4681  0D3A  0084               	movwf	4
  4682  0D3B  307F               	movlw	127
  4683  0D3C  0500               	andwf	0,w
  4684  0D3D  00A2               	movwf	??_GetTime
  4685  0D3E  0825               	movf	GetTime@shortInt,w
  4686  0D3F  0622               	xorwf	??_GetTime,w
  4687  0D40  3980               	andlw	-128
  4688  0D41  0622               	xorwf	??_GetTime,w
  4689  0D42  00A5               	movwf	GetTime@shortInt
  4690  0D43                     l2962:	
  4691                           
  4692                           ;main.c: 435:     time = time | shortInt.Val;
  4693  0D43  0825               	movf	GetTime@shortInt,w
  4694  0D44  397F               	andlw	127
  4695  0D45  00A2               	movwf	??_GetTime
  4696  0D46  0826               	movf	GetTime@time,w
  4697  0D47  0422               	iorwf	??_GetTime,w
  4698  0D48  00A6               	movwf	GetTime@time
  4699  0D49  0827               	movf	GetTime@time+1,w
  4700  0D4A  00A7               	movwf	GetTime@time+1
  4701  0D4B                     l2964:	
  4702                           
  4703                           ;main.c: 437:     return time;
  4704  0D4B  0827               	movf	GetTime@time+1,w
  4705  0D4C  00A1               	movwf	?_GetTime+1
  4706  0D4D  0826               	movf	GetTime@time,w
  4707  0D4E  00A0               	movwf	?_GetTime
  4708  0D4F                     l297:	
  4709  0D4F  0008               	return
  4710  0D50                     __end_of_GetTime:	
  4711                           
  4712                           	psect	text15
  4713  0E6E                     __ptext15:	
  4714 ;; *************** function _GetDigits *****************
  4715 ;; Defined at:
  4716 ;;		line 440 in file "main.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  Time            2   16[BANK0 ] int 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;		None
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  1    wreg      void 
  4723 ;; Registers used:
  4724 ;;		wreg, status,2, status,0, pclath, cstack
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4730 ;;      Params:         0       2       0       0       0
  4731 ;;      Locals:         0       2       0       0       0
  4732 ;;      Temps:          0       3       0       0       0
  4733 ;;      Totals:         0       7       0       0       0
  4734 ;;Total ram usage:        7 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    3
  4737 ;; This function calls:
  4738 ;;		___awdiv
  4739 ;;		___awmod
  4740 ;; This function is called by:
  4741 ;;		_main
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           
  4746                           ;psect for function _GetDigits
  4747  0E6E                     _GetDigits:	
  4748  0E6E                     l2968:	
  4749                           ;incstack = 0
  4750                           ; Regs used in _GetDigits: [wreg+status,2+status,0+pclath+cstack]
  4751                           
  4752                           
  4753                           ;main.c: 440: void GetDigits(int Time);main.c: 441: {;main.c: 442:     countdown = Time;
  4754  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
  4755  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
  4756  0E70  0830               	movf	GetDigits@Time,w
  4757  0E71  00B2               	movwf	??_GetDigits
  4758  0E72  0832               	movf	??_GetDigits,w
  4759  0E73  00DA               	movwf	_countdown
  4760  0E74                     l2970:	
  4761                           
  4762                           ;main.c: 443:     centinaia = countdown / 100;
  4763  0E74  3064               	movlw	100
  4764  0E75  00A7               	movwf	___awdiv@divisor
  4765  0E76  3000               	movlw	0
  4766  0E77  00A8               	movwf	___awdiv@divisor+1
  4767  0E78  085A               	movf	_countdown,w
  4768  0E79  00B2               	movwf	??_GetDigits
  4769  0E7A  01B3               	clrf	??_GetDigits+1
  4770  0E7B  0832               	movf	??_GetDigits,w
  4771  0E7C  00A9               	movwf	___awdiv@dividend
  4772  0E7D  0833               	movf	??_GetDigits+1,w
  4773  0E7E  00AA               	movwf	___awdiv@dividend+1
  4774  0E7F  120A  158A  2605  120A  158A  	fcall	___awdiv
  4775  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  4776  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  4777  0E86  0827               	movf	?___awdiv,w
  4778  0E87  00B4               	movwf	??_GetDigits+2
  4779  0E88  0834               	movf	??_GetDigits+2,w
  4780  0E89  00DD               	movwf	_centinaia
  4781  0E8A                     l2972:	
  4782                           
  4783                           ;main.c: 444:     decine = (countdown % 100) / 10;
  4784  0E8A  300A               	movlw	10
  4785  0E8B  00A7               	movwf	___awdiv@divisor
  4786  0E8C  3000               	movlw	0
  4787  0E8D  00A8               	movwf	___awdiv@divisor+1
  4788  0E8E  085A               	movf	_countdown,w
  4789  0E8F  00B2               	movwf	??_GetDigits
  4790  0E90  01B3               	clrf	??_GetDigits+1
  4791  0E91  0832               	movf	??_GetDigits,w
  4792  0E92  00A2               	movwf	___awmod@dividend
  4793  0E93  0833               	movf	??_GetDigits+1,w
  4794  0E94  00A3               	movwf	___awmod@dividend+1
  4795  0E95  3064               	movlw	100
  4796  0E96  00A0               	movwf	___awmod@divisor
  4797  0E97  3000               	movlw	0
  4798  0E98  00A1               	movwf	___awmod@divisor+1
  4799  0E99  120A  158A  25AA  120A  158A  	fcall	___awmod
  4800  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  4801  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  4802  0EA0  0821               	movf	?___awmod+1,w
  4803  0EA1  00AA               	movwf	___awdiv@dividend+1
  4804  0EA2  0820               	movf	?___awmod,w
  4805  0EA3  00A9               	movwf	___awdiv@dividend
  4806  0EA4  120A  158A  2605  120A  158A  	fcall	___awdiv
  4807  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  4808  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  4809  0EAB  0827               	movf	?___awdiv,w
  4810  0EAC  00B4               	movwf	??_GetDigits+2
  4811  0EAD  0834               	movf	??_GetDigits+2,w
  4812  0EAE  00DE               	movwf	_decine
  4813  0EAF                     l2974:	
  4814                           
  4815                           ;main.c: 445:     unita = (countdown % 100) % 10;
  4816  0EAF  085A               	movf	_countdown,w
  4817  0EB0  00B2               	movwf	??_GetDigits
  4818  0EB1  01B3               	clrf	??_GetDigits+1
  4819  0EB2  0832               	movf	??_GetDigits,w
  4820  0EB3  00A2               	movwf	___awmod@dividend
  4821  0EB4  0833               	movf	??_GetDigits+1,w
  4822  0EB5  00A3               	movwf	___awmod@dividend+1
  4823  0EB6  3064               	movlw	100
  4824  0EB7  00A0               	movwf	___awmod@divisor
  4825  0EB8  3000               	movlw	0
  4826  0EB9  00A1               	movwf	___awmod@divisor+1
  4827  0EBA  120A  158A  25AA  120A  158A  	fcall	___awmod
  4828  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  4829  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  4830  0EC1  0821               	movf	?___awmod+1,w
  4831  0EC2  00B6               	movwf	_GetDigits$1149+1
  4832  0EC3  0820               	movf	?___awmod,w
  4833  0EC4  00B5               	movwf	_GetDigits$1149
  4834  0EC5                     l2976:	
  4835                           
  4836                           ;main.c: 445:     unita = (countdown % 100) % 10;
  4837  0EC5  300A               	movlw	10
  4838  0EC6  00A0               	movwf	___awmod@divisor
  4839  0EC7  3000               	movlw	0
  4840  0EC8  00A1               	movwf	___awmod@divisor+1
  4841  0EC9  0836               	movf	_GetDigits$1149+1,w
  4842  0ECA  00A3               	movwf	___awmod@dividend+1
  4843  0ECB  0835               	movf	_GetDigits$1149,w
  4844  0ECC  00A2               	movwf	___awmod@dividend
  4845  0ECD  120A  158A  25AA  120A  158A  	fcall	___awmod
  4846  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  4847  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  4848  0ED4  0820               	movf	?___awmod,w
  4849  0ED5  00B2               	movwf	??_GetDigits
  4850  0ED6  0832               	movf	??_GetDigits,w
  4851  0ED7  00DF               	movwf	_unita
  4852  0ED8                     l300:	
  4853  0ED8  0008               	return
  4854  0ED9                     __end_of_GetDigits:	
  4855                           
  4856                           	psect	text16
  4857  0DAA                     __ptext16:	
  4858 ;; *************** function ___awmod *****************
  4859 ;; Defined at:
  4860 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;  divisor         2    0[BANK0 ] int 
  4863 ;;  dividend        2    2[BANK0 ] int 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;  sign            1    6[BANK0 ] unsigned char 
  4866 ;;  counter         1    5[BANK0 ] unsigned char 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  2    0[BANK0 ] int 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4876 ;;      Params:         0       4       0       0       0
  4877 ;;      Locals:         0       2       0       0       0
  4878 ;;      Temps:          0       1       0       0       0
  4879 ;;      Totals:         0       7       0       0       0
  4880 ;;Total ram usage:        7 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    2
  4883 ;; This function calls:
  4884 ;;		Nothing
  4885 ;; This function is called by:
  4886 ;;		_main
  4887 ;;		_GetDigits
  4888 ;;		_intToString
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           
  4893                           ;psect for function ___awmod
  4894  0DAA                     ___awmod:	
  4895  0DAA                     l2808:	
  4896                           ;incstack = 0
  4897                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4898                           
  4899  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  4900  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  4901  0DAC  01A6               	clrf	___awmod@sign
  4902  0DAD                     l2810:	
  4903  0DAD  1FA3               	btfss	___awmod@dividend+1,7
  4904  0DAE  2DB0               	goto	u2991
  4905  0DAF  2DB1               	goto	u2990
  4906  0DB0                     u2991:	
  4907  0DB0  2DB8               	goto	l2816
  4908  0DB1                     u2990:	
  4909  0DB1                     l2812:	
  4910  0DB1  09A2               	comf	___awmod@dividend,f
  4911  0DB2  09A3               	comf	___awmod@dividend+1,f
  4912  0DB3  0AA2               	incf	___awmod@dividend,f
  4913  0DB4  1903               	skipnz
  4914  0DB5  0AA3               	incf	___awmod@dividend+1,f
  4915  0DB6                     l2814:	
  4916  0DB6  01A6               	clrf	___awmod@sign
  4917  0DB7  0AA6               	incf	___awmod@sign,f
  4918  0DB8                     l2816:	
  4919  0DB8  1FA1               	btfss	___awmod@divisor+1,7
  4920  0DB9  2DBB               	goto	u3001
  4921  0DBA  2DBC               	goto	u3000
  4922  0DBB                     u3001:	
  4923  0DBB  2DC1               	goto	l2820
  4924  0DBC                     u3000:	
  4925  0DBC                     l2818:	
  4926  0DBC  09A0               	comf	___awmod@divisor,f
  4927  0DBD  09A1               	comf	___awmod@divisor+1,f
  4928  0DBE  0AA0               	incf	___awmod@divisor,f
  4929  0DBF  1903               	skipnz
  4930  0DC0  0AA1               	incf	___awmod@divisor+1,f
  4931  0DC1                     l2820:	
  4932  0DC1  0820               	movf	___awmod@divisor,w
  4933  0DC2  0421               	iorwf	___awmod@divisor+1,w
  4934  0DC3  1903               	btfsc	3,2
  4935  0DC4  2DC6               	goto	u3011
  4936  0DC5  2DC7               	goto	u3010
  4937  0DC6                     u3011:	
  4938  0DC6  2DF6               	goto	l2838
  4939  0DC7                     u3010:	
  4940  0DC7                     l2822:	
  4941  0DC7  01A5               	clrf	___awmod@counter
  4942  0DC8  0AA5               	incf	___awmod@counter,f
  4943  0DC9  2DD5               	goto	l2828
  4944  0DCA                     l2824:	
  4945  0DCA  3001               	movlw	1
  4946  0DCB                     u3025:	
  4947  0DCB  1003               	clrc
  4948  0DCC  0DA0               	rlf	___awmod@divisor,f
  4949  0DCD  0DA1               	rlf	___awmod@divisor+1,f
  4950  0DCE  3EFF               	addlw	-1
  4951  0DCF  1D03               	skipz
  4952  0DD0  2DCB               	goto	u3025
  4953  0DD1                     l2826:	
  4954  0DD1  3001               	movlw	1
  4955  0DD2  00A4               	movwf	??___awmod
  4956  0DD3  0824               	movf	??___awmod,w
  4957  0DD4  07A5               	addwf	___awmod@counter,f
  4958  0DD5                     l2828:	
  4959  0DD5  1FA1               	btfss	___awmod@divisor+1,7
  4960  0DD6  2DD8               	goto	u3031
  4961  0DD7  2DD9               	goto	u3030
  4962  0DD8                     u3031:	
  4963  0DD8  2DCA               	goto	l2824
  4964  0DD9                     u3030:	
  4965  0DD9                     l2830:	
  4966  0DD9  0821               	movf	___awmod@divisor+1,w
  4967  0DDA  0223               	subwf	___awmod@dividend+1,w
  4968  0DDB  1D03               	skipz
  4969  0DDC  2DDF               	goto	u3045
  4970  0DDD  0820               	movf	___awmod@divisor,w
  4971  0DDE  0222               	subwf	___awmod@dividend,w
  4972  0DDF                     u3045:	
  4973  0DDF  1C03               	skipc
  4974  0DE0  2DE2               	goto	u3041
  4975  0DE1  2DE3               	goto	u3040
  4976  0DE2                     u3041:	
  4977  0DE2  2DE9               	goto	l2834
  4978  0DE3                     u3040:	
  4979  0DE3                     l2832:	
  4980  0DE3  0820               	movf	___awmod@divisor,w
  4981  0DE4  02A2               	subwf	___awmod@dividend,f
  4982  0DE5  0821               	movf	___awmod@divisor+1,w
  4983  0DE6  1C03               	skipc
  4984  0DE7  03A3               	decf	___awmod@dividend+1,f
  4985  0DE8  02A3               	subwf	___awmod@dividend+1,f
  4986  0DE9                     l2834:	
  4987  0DE9  3001               	movlw	1
  4988  0DEA                     u3055:	
  4989  0DEA  1003               	clrc
  4990  0DEB  0CA1               	rrf	___awmod@divisor+1,f
  4991  0DEC  0CA0               	rrf	___awmod@divisor,f
  4992  0DED  3EFF               	addlw	-1
  4993  0DEE  1D03               	skipz
  4994  0DEF  2DEA               	goto	u3055
  4995  0DF0                     l2836:	
  4996  0DF0  3001               	movlw	1
  4997  0DF1  02A5               	subwf	___awmod@counter,f
  4998  0DF2  1D03               	btfss	3,2
  4999  0DF3  2DF5               	goto	u3061
  5000  0DF4  2DF6               	goto	u3060
  5001  0DF5                     u3061:	
  5002  0DF5  2DD9               	goto	l2830
  5003  0DF6                     u3060:	
  5004  0DF6                     l2838:	
  5005  0DF6  0826               	movf	___awmod@sign,w
  5006  0DF7  1903               	btfsc	3,2
  5007  0DF8  2DFA               	goto	u3071
  5008  0DF9  2DFB               	goto	u3070
  5009  0DFA                     u3071:	
  5010  0DFA  2E00               	goto	l2842
  5011  0DFB                     u3070:	
  5012  0DFB                     l2840:	
  5013  0DFB  09A2               	comf	___awmod@dividend,f
  5014  0DFC  09A3               	comf	___awmod@dividend+1,f
  5015  0DFD  0AA2               	incf	___awmod@dividend,f
  5016  0DFE  1903               	skipnz
  5017  0DFF  0AA3               	incf	___awmod@dividend+1,f
  5018  0E00                     l2842:	
  5019  0E00  0823               	movf	___awmod@dividend+1,w
  5020  0E01  00A1               	movwf	?___awmod+1
  5021  0E02  0822               	movf	___awmod@dividend,w
  5022  0E03  00A0               	movwf	?___awmod
  5023  0E04                     l604:	
  5024  0E04  0008               	return
  5025  0E05                     __end_of___awmod:	
  5026                           
  5027                           	psect	text17
  5028  0E05                     __ptext17:	
  5029 ;; *************** function ___awdiv *****************
  5030 ;; Defined at:
  5031 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;  divisor         2    7[BANK0 ] int 
  5034 ;;  dividend        2    9[BANK0 ] int 
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;  quotient        2   14[BANK0 ] int 
  5037 ;;  sign            1   13[BANK0 ] unsigned char 
  5038 ;;  counter         1   12[BANK0 ] unsigned char 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  2    7[BANK0 ] int 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2, status,0
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5048 ;;      Params:         0       4       0       0       0
  5049 ;;      Locals:         0       4       0       0       0
  5050 ;;      Temps:          0       1       0       0       0
  5051 ;;      Totals:         0       9       0       0       0
  5052 ;;Total ram usage:        9 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    2
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_map
  5059 ;;		_GetDigits
  5060 ;;		_intToString
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           
  5065                           ;psect for function ___awdiv
  5066  0E05                     ___awdiv:	
  5067  0E05                     l2764:	
  5068                           ;incstack = 0
  5069                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5070                           
  5071  0E05  1283               	bcf	3,5	;RP0=0, select bank0
  5072  0E06  1303               	bcf	3,6	;RP1=0, select bank0
  5073  0E07  01AD               	clrf	___awdiv@sign
  5074  0E08                     l2766:	
  5075  0E08  1FA8               	btfss	___awdiv@divisor+1,7
  5076  0E09  2E0B               	goto	u2891
  5077  0E0A  2E0C               	goto	u2890
  5078  0E0B                     u2891:	
  5079  0E0B  2E13               	goto	l2772
  5080  0E0C                     u2890:	
  5081  0E0C                     l2768:	
  5082  0E0C  09A7               	comf	___awdiv@divisor,f
  5083  0E0D  09A8               	comf	___awdiv@divisor+1,f
  5084  0E0E  0AA7               	incf	___awdiv@divisor,f
  5085  0E0F  1903               	skipnz
  5086  0E10  0AA8               	incf	___awdiv@divisor+1,f
  5087  0E11                     l2770:	
  5088  0E11  01AD               	clrf	___awdiv@sign
  5089  0E12  0AAD               	incf	___awdiv@sign,f
  5090  0E13                     l2772:	
  5091  0E13  1FAA               	btfss	___awdiv@dividend+1,7
  5092  0E14  2E16               	goto	u2901
  5093  0E15  2E17               	goto	u2900
  5094  0E16                     u2901:	
  5095  0E16  2E20               	goto	l2778
  5096  0E17                     u2900:	
  5097  0E17                     l2774:	
  5098  0E17  09A9               	comf	___awdiv@dividend,f
  5099  0E18  09AA               	comf	___awdiv@dividend+1,f
  5100  0E19  0AA9               	incf	___awdiv@dividend,f
  5101  0E1A  1903               	skipnz
  5102  0E1B  0AAA               	incf	___awdiv@dividend+1,f
  5103  0E1C                     l2776:	
  5104  0E1C  3001               	movlw	1
  5105  0E1D  00AB               	movwf	??___awdiv
  5106  0E1E  082B               	movf	??___awdiv,w
  5107  0E1F  06AD               	xorwf	___awdiv@sign,f
  5108  0E20                     l2778:	
  5109  0E20  01AE               	clrf	___awdiv@quotient
  5110  0E21  01AF               	clrf	___awdiv@quotient+1
  5111  0E22                     l2780:	
  5112  0E22  0827               	movf	___awdiv@divisor,w
  5113  0E23  0428               	iorwf	___awdiv@divisor+1,w
  5114  0E24  1903               	btfsc	3,2
  5115  0E25  2E27               	goto	u2911
  5116  0E26  2E28               	goto	u2910
  5117  0E27                     u2911:	
  5118  0E27  2E5F               	goto	l2800
  5119  0E28                     u2910:	
  5120  0E28                     l2782:	
  5121  0E28  01AC               	clrf	___awdiv@counter
  5122  0E29  0AAC               	incf	___awdiv@counter,f
  5123  0E2A  2E36               	goto	l2788
  5124  0E2B                     l2784:	
  5125  0E2B  3001               	movlw	1
  5126  0E2C                     u2925:	
  5127  0E2C  1003               	clrc
  5128  0E2D  0DA7               	rlf	___awdiv@divisor,f
  5129  0E2E  0DA8               	rlf	___awdiv@divisor+1,f
  5130  0E2F  3EFF               	addlw	-1
  5131  0E30  1D03               	skipz
  5132  0E31  2E2C               	goto	u2925
  5133  0E32                     l2786:	
  5134  0E32  3001               	movlw	1
  5135  0E33  00AB               	movwf	??___awdiv
  5136  0E34  082B               	movf	??___awdiv,w
  5137  0E35  07AC               	addwf	___awdiv@counter,f
  5138  0E36                     l2788:	
  5139  0E36  1FA8               	btfss	___awdiv@divisor+1,7
  5140  0E37  2E39               	goto	u2931
  5141  0E38  2E3A               	goto	u2930
  5142  0E39                     u2931:	
  5143  0E39  2E2B               	goto	l2784
  5144  0E3A                     u2930:	
  5145  0E3A                     l2790:	
  5146  0E3A  3001               	movlw	1
  5147  0E3B                     u2945:	
  5148  0E3B  1003               	clrc
  5149  0E3C  0DAE               	rlf	___awdiv@quotient,f
  5150  0E3D  0DAF               	rlf	___awdiv@quotient+1,f
  5151  0E3E  3EFF               	addlw	-1
  5152  0E3F  1D03               	skipz
  5153  0E40  2E3B               	goto	u2945
  5154  0E41  0828               	movf	___awdiv@divisor+1,w
  5155  0E42  022A               	subwf	___awdiv@dividend+1,w
  5156  0E43  1D03               	skipz
  5157  0E44  2E47               	goto	u2955
  5158  0E45  0827               	movf	___awdiv@divisor,w
  5159  0E46  0229               	subwf	___awdiv@dividend,w
  5160  0E47                     u2955:	
  5161  0E47  1C03               	skipc
  5162  0E48  2E4A               	goto	u2951
  5163  0E49  2E4B               	goto	u2950
  5164  0E4A                     u2951:	
  5165  0E4A  2E52               	goto	l2796
  5166  0E4B                     u2950:	
  5167  0E4B                     l2792:	
  5168  0E4B  0827               	movf	___awdiv@divisor,w
  5169  0E4C  02A9               	subwf	___awdiv@dividend,f
  5170  0E4D  0828               	movf	___awdiv@divisor+1,w
  5171  0E4E  1C03               	skipc
  5172  0E4F  03AA               	decf	___awdiv@dividend+1,f
  5173  0E50  02AA               	subwf	___awdiv@dividend+1,f
  5174  0E51                     l2794:	
  5175  0E51  142E               	bsf	___awdiv@quotient,0
  5176  0E52                     l2796:	
  5177  0E52  3001               	movlw	1
  5178  0E53                     u2965:	
  5179  0E53  1003               	clrc
  5180  0E54  0CA8               	rrf	___awdiv@divisor+1,f
  5181  0E55  0CA7               	rrf	___awdiv@divisor,f
  5182  0E56  3EFF               	addlw	-1
  5183  0E57  1D03               	skipz
  5184  0E58  2E53               	goto	u2965
  5185  0E59                     l2798:	
  5186  0E59  3001               	movlw	1
  5187  0E5A  02AC               	subwf	___awdiv@counter,f
  5188  0E5B  1D03               	btfss	3,2
  5189  0E5C  2E5E               	goto	u2971
  5190  0E5D  2E5F               	goto	u2970
  5191  0E5E                     u2971:	
  5192  0E5E  2E3A               	goto	l2790
  5193  0E5F                     u2970:	
  5194  0E5F                     l2800:	
  5195  0E5F  082D               	movf	___awdiv@sign,w
  5196  0E60  1903               	btfsc	3,2
  5197  0E61  2E63               	goto	u2981
  5198  0E62  2E64               	goto	u2980
  5199  0E63                     u2981:	
  5200  0E63  2E69               	goto	l2804
  5201  0E64                     u2980:	
  5202  0E64                     l2802:	
  5203  0E64  09AE               	comf	___awdiv@quotient,f
  5204  0E65  09AF               	comf	___awdiv@quotient+1,f
  5205  0E66  0AAE               	incf	___awdiv@quotient,f
  5206  0E67  1903               	skipnz
  5207  0E68  0AAF               	incf	___awdiv@quotient+1,f
  5208  0E69                     l2804:	
  5209  0E69  082F               	movf	___awdiv@quotient+1,w
  5210  0E6A  00A8               	movwf	?___awdiv+1
  5211  0E6B  082E               	movf	___awdiv@quotient,w
  5212  0E6C  00A7               	movwf	?___awdiv
  5213  0E6D                     l591:	
  5214  0E6D  0008               	return
  5215  0E6E                     __end_of___awdiv:	
  5216                           
  5217                           	psect	text18
  5218  0BF5                     __ptext18:	
  5219 ;; *************** function _ADC_Read *****************
  5220 ;; Defined at:
  5221 ;;		line 364 in file "main.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  canale          1    wreg     unsigned char 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  canale          1    3[BANK0 ] unsigned char 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  2    0[BANK0 ] int 
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5235 ;;      Params:         0       2       0       0       0
  5236 ;;      Locals:         0       1       0       0       0
  5237 ;;      Temps:          0       1       0       0       0
  5238 ;;      Totals:         0       4       0       0       0
  5239 ;;Total ram usage:        4 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    2
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_main
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           
  5250                           ;psect for function _ADC_Read
  5251  0BF5                     _ADC_Read:	
  5252                           
  5253                           ;incstack = 0
  5254                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5255                           ;ADC_Read@canale stored from wreg
  5256  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  5257  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  5258  0BF7  00A3               	movwf	ADC_Read@canale
  5259  0BF8                     l2998:	
  5260                           
  5261                           ;main.c: 364: int ADC_Read(char canale);main.c: 365: {;main.c: 366:     ADCON0 = (1 << 0
      +                          ) | (canale << 3);
  5262  0BF8  0823               	movf	ADC_Read@canale,w
  5263  0BF9  00A2               	movwf	??_ADC_Read
  5264  0BFA  3002               	movlw	2
  5265  0BFB                     u3225:	
  5266  0BFB  1003               	clrc
  5267  0BFC  0DA2               	rlf	??_ADC_Read,f
  5268  0BFD  3EFF               	addlw	-1
  5269  0BFE  1D03               	skipz
  5270  0BFF  2BFB               	goto	u3225
  5271  0C00  1003               	clrc
  5272  0C01  0D22               	rlf	??_ADC_Read,w
  5273  0C02  3801               	iorlw	1
  5274  0C03  009F               	movwf	31	;volatile
  5275  0C04                     l3000:	
  5276                           
  5277                           ;main.c: 367:     _delay((unsigned long)((2)*(32000000/4000000.0)));
  5278  0C04  3004               	movlw	4
  5279  0C05  1283               	bcf	3,5	;RP0=0, select bank0
  5280  0C06  1303               	bcf	3,6	;RP1=0, select bank0
  5281  0C07  00A2               	movwf	??_ADC_Read
  5282  0C08                     u3627:	
  5283  0C08  0BA2               	decfsz	??_ADC_Read,f
  5284  0C09  2C08               	goto	u3627
  5285  0C0A  0000               	nop
  5286  0C0B                     l3002:	
  5287                           
  5288                           ;main.c: 368:     GO_nDONE = 1;
  5289  0C0B  1283               	bcf	3,5	;RP0=0, select bank0
  5290  0C0C  1303               	bcf	3,6	;RP1=0, select bank0
  5291  0C0D  151F               	bsf	31,2	;volatile
  5292  0C0E                     l265:	
  5293                           ;main.c: 370:         ;
  5294                           
  5295                           
  5296                           ;main.c: 369:     while (GO_nDONE)
  5297  0C0E  191F               	btfsc	31,2	;volatile
  5298  0C0F  2C11               	goto	u3231
  5299  0C10  2C12               	goto	u3230
  5300  0C11                     u3231:	
  5301  0C11  2C0E               	goto	l265
  5302  0C12                     u3230:	
  5303  0C12                     l3004:	
  5304                           
  5305                           ;main.c: 371:     return ADRESL + (ADRESH << 8);
  5306  0C12  081E               	movf	30,w	;volatile
  5307  0C13  00A1               	movwf	?_ADC_Read+1
  5308  0C14  1683               	bsf	3,5	;RP0=1, select bank1
  5309  0C15  1303               	bcf	3,6	;RP1=0, select bank1
  5310  0C16  081E               	movf	30,w	;volatile
  5311  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  5312  0C18  1303               	bcf	3,6	;RP1=0, select bank0
  5313  0C19  00A0               	movwf	?_ADC_Read
  5314  0C1A                     l268:	
  5315  0C1A  0008               	return
  5316  0C1B                     __end_of_ADC_Read:	
  5317                           
  5318                           	psect	text19
  5319  0D50                     __ptext19:	
  5320 ;; *************** function _ISR *****************
  5321 ;; Defined at:
  5322 ;;		line 566 in file "main.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;		None
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;		None
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  1    wreg      void 
  5329 ;; Registers used:
  5330 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5336 ;;      Params:         0       0       0       0       0
  5337 ;;      Locals:         0       0       0       0       0
  5338 ;;      Temps:          4       0       0       0       0
  5339 ;;      Totals:         4       0       0       0       0
  5340 ;;Total ram usage:        4 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    1
  5343 ;; This function calls:
  5344 ;;		_UART_Read
  5345 ;;		_conteggioVeicoli
  5346 ;; This function is called by:
  5347 ;;		Interrupt level 1
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           
  5352                           ;psect for function _ISR
  5353  0D50                     _ISR:	
  5354  0D50                     i1l2502:	
  5355                           
  5356                           ;main.c: 569:     if (RCIF && readGateway.Bit == 0)
  5357  0D50  1283               	bcf	3,5	;RP0=0, select bank0
  5358  0D51  1303               	bcf	3,6	;RP1=0, select bank0
  5359  0D52  1E8C               	btfss	12,5	;volatile
  5360  0D53  2D55               	goto	u253_21
  5361  0D54  2D56               	goto	u253_20
  5362  0D55                     u253_21:	
  5363  0D55  2D5F               	goto	i1l2510
  5364  0D56                     u253_20:	
  5365  0D56                     i1l2504:	
  5366  0D56  1862               	btfsc	_readGateway,0
  5367  0D57  2D59               	goto	u254_21
  5368  0D58  2D5A               	goto	u254_20
  5369  0D59                     u254_21:	
  5370  0D59  2D5F               	goto	i1l2510
  5371  0D5A                     u254_20:	
  5372  0D5A                     i1l2506:	
  5373                           
  5374                           ;main.c: 570:     {;main.c: 571:         readGateway.Bit = 1;
  5375  0D5A  1462               	bsf	_readGateway,0
  5376                           
  5377                           ;main.c: 572:         readGatewayDone.Bit = 0;
  5378  0D5B  1063               	bcf	_readGatewayDone,0
  5379                           
  5380                           ;main.c: 573:         readGatewayDone.Timeout = 0;
  5381  0D5C  10E3               	bcf	_readGatewayDone,1
  5382  0D5D                     i1l2508:	
  5383                           
  5384                           ;main.c: 574:         dataFromGatewayIndex = 0;
  5385  0D5D  01D9               	clrf	_dataFromGatewayIndex
  5386                           
  5387                           ;main.c: 575:         timerReadFromGateway = 0;
  5388  0D5E  01D8               	clrf	_timerReadFromGateway
  5389  0D5F                     i1l2510:	
  5390                           
  5391                           ;main.c: 577:     if (RCIF && readGateway.Bit == 1)
  5392  0D5F  1E8C               	btfss	12,5	;volatile
  5393  0D60  2D62               	goto	u255_21
  5394  0D61  2D63               	goto	u255_20
  5395  0D62                     u255_21:	
  5396  0D62  2D7A               	goto	i1l2520
  5397  0D63                     u255_20:	
  5398  0D63                     i1l2512:	
  5399  0D63  1C62               	btfss	_readGateway,0
  5400  0D64  2D66               	goto	u256_21
  5401  0D65  2D67               	goto	u256_20
  5402  0D66                     u256_21:	
  5403  0D66  2D7A               	goto	i1l2520
  5404  0D67                     u256_20:	
  5405  0D67                     i1l2514:	
  5406                           
  5407                           ;main.c: 578:     {;main.c: 579:         dataFromGateway[dataFromGatewayIndex] = UART_Re
      +                          ad();
  5408  0D67  120A  158A  238F  120A  158A  	fcall	_UART_Read
  5409  0D6C  00F6               	movwf	??_ISR
  5410  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  5411  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  5412  0D6F  0859               	movf	_dataFromGatewayIndex,w
  5413  0D70  3EA0               	addlw	(low (_dataFromGateway| 0))& (0+255)
  5414  0D71  0084               	movwf	4
  5415  0D72  0876               	movf	??_ISR,w
  5416  0D73  1383               	bcf	3,7	;select IRP bank1
  5417  0D74  0080               	movwf	0
  5418  0D75                     i1l2516:	
  5419                           
  5420                           ;main.c: 580:         dataFromGatewayIndex++;
  5421  0D75  3001               	movlw	1
  5422  0D76  00F6               	movwf	??_ISR
  5423  0D77  0876               	movf	??_ISR,w
  5424  0D78  07D9               	addwf	_dataFromGatewayIndex,f
  5425  0D79                     i1l2518:	
  5426                           
  5427                           ;main.c: 581:         timerReadFromGateway = 0;
  5428  0D79  01D8               	clrf	_timerReadFromGateway
  5429  0D7A                     i1l2520:	
  5430                           
  5431                           ;main.c: 586:     if (TMR0IF)
  5432  0D7A  1D0B               	btfss	11,2	;volatile
  5433  0D7B  2D7D               	goto	u257_21
  5434  0D7C  2D7E               	goto	u257_20
  5435  0D7D                     u257_21:	
  5436  0D7D  2D88               	goto	i1l2528
  5437  0D7E                     u257_20:	
  5438  0D7E                     i1l2522:	
  5439                           
  5440                           ;main.c: 587:     {;main.c: 588:         TMR0IF = 0;
  5441  0D7E  110B               	bcf	11,2	;volatile
  5442  0D7F                     i1l2524:	
  5443                           
  5444                           ;main.c: 589:         conteggioVeicoli();
  5445  0D7F  120A  118A  2569  120A  158A  	fcall	_conteggioVeicoli
  5446  0D84                     i1l2526:	
  5447                           
  5448                           ;main.c: 590:         TMR0 = 6;
  5449  0D84  3006               	movlw	6
  5450  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  5451  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  5452  0D87  0081               	movwf	1	;volatile
  5453  0D88                     i1l2528:	
  5454                           
  5455                           ;main.c: 593:     if (TMR1IF)
  5456  0D88  1C0C               	btfss	12,0	;volatile
  5457  0D89  2D8B               	goto	u258_21
  5458  0D8A  2D8C               	goto	u258_20
  5459  0D8B                     u258_21:	
  5460  0D8B  2DA1               	goto	i1l352
  5461  0D8C                     u258_20:	
  5462  0D8C                     i1l2530:	
  5463                           
  5464                           ;main.c: 594:     {;main.c: 595:         TMR1IF = 0;
  5465  0D8C  100C               	bcf	12,0	;volatile
  5466  0D8D                     i1l2532:	
  5467                           
  5468                           ;main.c: 596:         count_lux++;
  5469  0D8D  3001               	movlw	1
  5470  0D8E  00F6               	movwf	??_ISR
  5471  0D8F  0876               	movf	??_ISR,w
  5472  0D90  07F4               	addwf	_count_lux,f
  5473  0D91                     i1l2534:	
  5474                           
  5475                           ;main.c: 598:         if (count_lux >= 20)
  5476  0D91  3014               	movlw	20
  5477  0D92  0274               	subwf	_count_lux,w
  5478  0D93  1C03               	skipc
  5479  0D94  2D96               	goto	u259_21
  5480  0D95  2D97               	goto	u259_20
  5481  0D96                     u259_21:	
  5482  0D96  2D9D               	goto	i1l2542
  5483  0D97                     u259_20:	
  5484  0D97                     i1l2536:	
  5485                           
  5486                           ;main.c: 599:         {;main.c: 600:             secondPassed.Bit = 1;
  5487  0D97  1461               	bsf	_secondPassed,0
  5488  0D98                     i1l2538:	
  5489                           
  5490                           ;main.c: 601:             count_lux = 0;
  5491  0D98  01F4               	clrf	_count_lux
  5492  0D99                     i1l2540:	
  5493                           
  5494                           ;main.c: 602:             timerReadFromGateway++;
  5495  0D99  3001               	movlw	1
  5496  0D9A  00F6               	movwf	??_ISR
  5497  0D9B  0876               	movf	??_ISR,w
  5498  0D9C  07D8               	addwf	_timerReadFromGateway,f
  5499  0D9D                     i1l2542:	
  5500                           
  5501                           ;main.c: 605:         TMR1H = 60;
  5502  0D9D  303C               	movlw	60
  5503  0D9E  008F               	movwf	15	;volatile
  5504  0D9F                     i1l2544:	
  5505                           
  5506                           ;main.c: 606:         TMR1L = 176;
  5507  0D9F  30B0               	movlw	176
  5508  0DA0  008E               	movwf	14	;volatile
  5509  0DA1                     i1l352:	
  5510  0DA1  0879               	movf	??_ISR+3,w
  5511  0DA2  008A               	movwf	10
  5512  0DA3  0878               	movf	??_ISR+2,w
  5513  0DA4  0084               	movwf	4
  5514  0DA5  0E77               	swapf	(??_ISR+1)^(0+4294967168),w
  5515  0DA6  0083               	movwf	3
  5516  0DA7  0EFE               	swapf	btemp,f
  5517  0DA8  0E7E               	swapf	btemp,w
  5518  0DA9  0009               	retfie
  5519  0DAA                     __end_of_ISR:	
  5520                           
  5521                           	psect	intentry
  5522  0004                     __pintentry:	
  5523                           ;incstack = 0
  5524                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5525                           
  5526  0004                     interrupt_function:	
  5527  007E                     saved_w	set	btemp
  5528  0004  00FE               	movwf	btemp
  5529  0005  0E03               	swapf	3,w
  5530  0006  00F7               	movwf	??_ISR+1
  5531  0007  0804               	movf	4,w
  5532  0008  00F8               	movwf	??_ISR+2
  5533  0009  080A               	movf	10,w
  5534  000A  00F9               	movwf	??_ISR+3
  5535  000B  120A  158A  2D50   	ljmp	_ISR
  5536                           
  5537                           	psect	text20
  5538  0569                     __ptext20:	
  5539 ;; *************** function _conteggioVeicoli *****************
  5540 ;; Defined at:
  5541 ;;		line 478 in file "main.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;		None
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;		None
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5555 ;;      Params:         0       0       0       0       0
  5556 ;;      Locals:         0       0       0       0       0
  5557 ;;      Temps:          1       0       0       0       0
  5558 ;;      Totals:         1       0       0       0       0
  5559 ;;Total ram usage:        1 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; This function calls:
  5562 ;;		Nothing
  5563 ;; This function is called by:
  5564 ;;		_ISR
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           
  5569                           ;psect for function _conteggioVeicoli
  5570  0569                     _conteggioVeicoli:	
  5571  0569                     i1l2180:	
  5572                           ;incstack = 0
  5573                           ; Regs used in _conteggioVeicoli: [wreg+status,2+status,0]
  5574                           
  5575                           
  5576                           ;main.c: 481:     if (!PORTBbits.RB3)
  5577  0569  1283               	bcf	3,5	;RP0=0, select bank0
  5578  056A  1303               	bcf	3,6	;RP1=0, select bank0
  5579  056B  1986               	btfsc	6,3	;volatile
  5580  056C  2D6E               	goto	u196_21
  5581  056D  2D6F               	goto	u196_20
  5582  056E                     u196_21:	
  5583  056E  2D76               	goto	i1l318
  5584  056F                     u196_20:	
  5585  056F                     i1l2182:	
  5586                           
  5587                           ;main.c: 482:     {;main.c: 483:         count++;
  5588  056F  3001               	movlw	1
  5589  0570  07F0               	addwf	_count,f
  5590  0571  1803               	skipnc
  5591  0572  0AF1               	incf	_count+1,f
  5592  0573  3000               	movlw	0
  5593  0574  07F1               	addwf	_count+1,f
  5594                           
  5595                           ;main.c: 484:     }
  5596  0575  2DA3               	goto	i1l2198
  5597  0576                     i1l318:	
  5598                           ;main.c: 485:     else if (PORTBbits.RB3)
  5599                           
  5600  0576  1D86               	btfss	6,3	;volatile
  5601  0577  2D79               	goto	u197_21
  5602  0578  2D7A               	goto	u197_20
  5603  0579                     u197_21:	
  5604  0579  2DA3               	goto	i1l2198
  5605  057A                     u197_20:	
  5606  057A                     i1l2184:	
  5607                           
  5608                           ;main.c: 486:     {;main.c: 487:         if (count >= 500)
  5609  057A  3001               	movlw	1
  5610  057B  0271               	subwf	_count+1,w
  5611  057C  30F4               	movlw	244
  5612  057D  1903               	skipnz
  5613  057E  0270               	subwf	_count,w
  5614  057F  1C03               	skipc
  5615  0580  2D82               	goto	u198_21
  5616  0581  2D83               	goto	u198_20
  5617  0582                     u198_21:	
  5618  0582  2D87               	goto	i1l2188
  5619  0583                     u198_20:	
  5620  0583                     i1l2186:	
  5621                           
  5622                           ;main.c: 488:         {;main.c: 489:             motorcycle[0]++;
  5623  0583  3001               	movlw	1
  5624  0584  00F5               	movwf	??_conteggioVeicoli
  5625  0585  0875               	movf	??_conteggioVeicoli,w
  5626  0586  07D4               	addwf	_motorcycle,f
  5627  0587                     i1l2188:	
  5628                           
  5629                           ;main.c: 491:         if (count >= 1500)
  5630  0587  3005               	movlw	5
  5631  0588  0271               	subwf	_count+1,w
  5632  0589  30DC               	movlw	220
  5633  058A  1903               	skipnz
  5634  058B  0270               	subwf	_count,w
  5635  058C  1C03               	skipc
  5636  058D  2D8F               	goto	u199_21
  5637  058E  2D90               	goto	u199_20
  5638  058F                     u199_21:	
  5639  058F  2D94               	goto	i1l2192
  5640  0590                     u199_20:	
  5641  0590                     i1l2190:	
  5642                           
  5643                           ;main.c: 492:         {;main.c: 493:             car[0]++;
  5644  0590  3001               	movlw	1
  5645  0591  00F5               	movwf	??_conteggioVeicoli
  5646  0592  0875               	movf	??_conteggioVeicoli,w
  5647  0593  07D0               	addwf	_car,f
  5648  0594                     i1l2192:	
  5649                           
  5650                           ;main.c: 495:         if (count >= 3000)
  5651  0594  300B               	movlw	11
  5652  0595  0271               	subwf	_count+1,w
  5653  0596  30B8               	movlw	184
  5654  0597  1903               	skipnz
  5655  0598  0270               	subwf	_count,w
  5656  0599  1C03               	skipc
  5657  059A  2D9C               	goto	u200_21
  5658  059B  2D9D               	goto	u200_20
  5659  059C                     u200_21:	
  5660  059C  2DA1               	goto	i1l2196
  5661  059D                     u200_20:	
  5662  059D                     i1l2194:	
  5663                           
  5664                           ;main.c: 496:         {;main.c: 497:             truck[0]++;
  5665  059D  3001               	movlw	1
  5666  059E  00F5               	movwf	??_conteggioVeicoli
  5667  059F  0875               	movf	??_conteggioVeicoli,w
  5668  05A0  07CC               	addwf	_truck,f
  5669  05A1                     i1l2196:	
  5670                           
  5671                           ;main.c: 499:         count = 0;
  5672  05A1  01F0               	clrf	_count
  5673  05A2  01F1               	clrf	_count+1
  5674  05A3                     i1l2198:	
  5675                           
  5676                           ;main.c: 502:     if (!PORTBbits.RB4)
  5677  05A3  1A06               	btfsc	6,4	;volatile
  5678  05A4  2DA6               	goto	u201_21
  5679  05A5  2DA7               	goto	u201_20
  5680  05A6                     u201_21:	
  5681  05A6  2DAE               	goto	i1l324
  5682  05A7                     u201_20:	
  5683  05A7                     i1l2200:	
  5684                           
  5685                           ;main.c: 503:     {;main.c: 504:         count++;
  5686  05A7  3001               	movlw	1
  5687  05A8  07F0               	addwf	_count,f
  5688  05A9  1803               	skipnc
  5689  05AA  0AF1               	incf	_count+1,f
  5690  05AB  3000               	movlw	0
  5691  05AC  07F1               	addwf	_count+1,f
  5692                           
  5693                           ;main.c: 505:     }
  5694  05AD  2DDB               	goto	i1l2216
  5695  05AE                     i1l324:	
  5696                           ;main.c: 506:     else if (PORTBbits.RB4)
  5697                           
  5698  05AE  1E06               	btfss	6,4	;volatile
  5699  05AF  2DB1               	goto	u202_21
  5700  05B0  2DB2               	goto	u202_20
  5701  05B1                     u202_21:	
  5702  05B1  2DDB               	goto	i1l2216
  5703  05B2                     u202_20:	
  5704  05B2                     i1l2202:	
  5705                           
  5706                           ;main.c: 507:     {;main.c: 508:         if (count >= 500)
  5707  05B2  3001               	movlw	1
  5708  05B3  0271               	subwf	_count+1,w
  5709  05B4  30F4               	movlw	244
  5710  05B5  1903               	skipnz
  5711  05B6  0270               	subwf	_count,w
  5712  05B7  1C03               	skipc
  5713  05B8  2DBA               	goto	u203_21
  5714  05B9  2DBB               	goto	u203_20
  5715  05BA                     u203_21:	
  5716  05BA  2DBF               	goto	i1l2206
  5717  05BB                     u203_20:	
  5718  05BB                     i1l2204:	
  5719                           
  5720                           ;main.c: 509:         {;main.c: 510:             motorcycle[1]++;
  5721  05BB  3001               	movlw	1
  5722  05BC  00F5               	movwf	??_conteggioVeicoli
  5723  05BD  0875               	movf	??_conteggioVeicoli,w
  5724  05BE  07D5               	addwf	_motorcycle+1,f
  5725  05BF                     i1l2206:	
  5726                           
  5727                           ;main.c: 512:         if (count >= 1500)
  5728  05BF  3005               	movlw	5
  5729  05C0  0271               	subwf	_count+1,w
  5730  05C1  30DC               	movlw	220
  5731  05C2  1903               	skipnz
  5732  05C3  0270               	subwf	_count,w
  5733  05C4  1C03               	skipc
  5734  05C5  2DC7               	goto	u204_21
  5735  05C6  2DC8               	goto	u204_20
  5736  05C7                     u204_21:	
  5737  05C7  2DCC               	goto	i1l2210
  5738  05C8                     u204_20:	
  5739  05C8                     i1l2208:	
  5740                           
  5741                           ;main.c: 513:         {;main.c: 514:             car[1]++;
  5742  05C8  3001               	movlw	1
  5743  05C9  00F5               	movwf	??_conteggioVeicoli
  5744  05CA  0875               	movf	??_conteggioVeicoli,w
  5745  05CB  07D1               	addwf	_car+1,f
  5746  05CC                     i1l2210:	
  5747                           
  5748                           ;main.c: 516:         if (count >= 3000)
  5749  05CC  300B               	movlw	11
  5750  05CD  0271               	subwf	_count+1,w
  5751  05CE  30B8               	movlw	184
  5752  05CF  1903               	skipnz
  5753  05D0  0270               	subwf	_count,w
  5754  05D1  1C03               	skipc
  5755  05D2  2DD4               	goto	u205_21
  5756  05D3  2DD5               	goto	u205_20
  5757  05D4                     u205_21:	
  5758  05D4  2DD9               	goto	i1l2214
  5759  05D5                     u205_20:	
  5760  05D5                     i1l2212:	
  5761                           
  5762                           ;main.c: 517:         {;main.c: 518:             truck[1]++;
  5763  05D5  3001               	movlw	1
  5764  05D6  00F5               	movwf	??_conteggioVeicoli
  5765  05D7  0875               	movf	??_conteggioVeicoli,w
  5766  05D8  07CD               	addwf	_truck+1,f
  5767  05D9                     i1l2214:	
  5768                           
  5769                           ;main.c: 520:         count = 0;
  5770  05D9  01F0               	clrf	_count
  5771  05DA  01F1               	clrf	_count+1
  5772  05DB                     i1l2216:	
  5773                           
  5774                           ;main.c: 523:     if (!PORTBbits.RB5)
  5775  05DB  1A86               	btfsc	6,5	;volatile
  5776  05DC  2DDE               	goto	u206_21
  5777  05DD  2DDF               	goto	u206_20
  5778  05DE                     u206_21:	
  5779  05DE  2DE6               	goto	i1l330
  5780  05DF                     u206_20:	
  5781  05DF                     i1l2218:	
  5782                           
  5783                           ;main.c: 524:     {;main.c: 525:         count++;
  5784  05DF  3001               	movlw	1
  5785  05E0  07F0               	addwf	_count,f
  5786  05E1  1803               	skipnc
  5787  05E2  0AF1               	incf	_count+1,f
  5788  05E3  3000               	movlw	0
  5789  05E4  07F1               	addwf	_count+1,f
  5790                           
  5791                           ;main.c: 526:     }
  5792  05E5  2E13               	goto	i1l2234
  5793  05E6                     i1l330:	
  5794                           ;main.c: 527:     else if (PORTBbits.RB5)
  5795                           
  5796  05E6  1E86               	btfss	6,5	;volatile
  5797  05E7  2DE9               	goto	u207_21
  5798  05E8  2DEA               	goto	u207_20
  5799  05E9                     u207_21:	
  5800  05E9  2E13               	goto	i1l2234
  5801  05EA                     u207_20:	
  5802  05EA                     i1l2220:	
  5803                           
  5804                           ;main.c: 528:     {;main.c: 529:         if (count >= 500)
  5805  05EA  3001               	movlw	1
  5806  05EB  0271               	subwf	_count+1,w
  5807  05EC  30F4               	movlw	244
  5808  05ED  1903               	skipnz
  5809  05EE  0270               	subwf	_count,w
  5810  05EF  1C03               	skipc
  5811  05F0  2DF2               	goto	u208_21
  5812  05F1  2DF3               	goto	u208_20
  5813  05F2                     u208_21:	
  5814  05F2  2DF7               	goto	i1l2224
  5815  05F3                     u208_20:	
  5816  05F3                     i1l2222:	
  5817                           
  5818                           ;main.c: 530:         {;main.c: 531:             motorcycle[2]++;
  5819  05F3  3001               	movlw	1
  5820  05F4  00F5               	movwf	??_conteggioVeicoli
  5821  05F5  0875               	movf	??_conteggioVeicoli,w
  5822  05F6  07D6               	addwf	_motorcycle+2,f
  5823  05F7                     i1l2224:	
  5824                           
  5825                           ;main.c: 533:         if (count >= 1500)
  5826  05F7  3005               	movlw	5
  5827  05F8  0271               	subwf	_count+1,w
  5828  05F9  30DC               	movlw	220
  5829  05FA  1903               	skipnz
  5830  05FB  0270               	subwf	_count,w
  5831  05FC  1C03               	skipc
  5832  05FD  2DFF               	goto	u209_21
  5833  05FE  2E00               	goto	u209_20
  5834  05FF                     u209_21:	
  5835  05FF  2E04               	goto	i1l2228
  5836  0600                     u209_20:	
  5837  0600                     i1l2226:	
  5838                           
  5839                           ;main.c: 534:         {;main.c: 535:             car[2]++;
  5840  0600  3001               	movlw	1
  5841  0601  00F5               	movwf	??_conteggioVeicoli
  5842  0602  0875               	movf	??_conteggioVeicoli,w
  5843  0603  07D2               	addwf	_car+2,f
  5844  0604                     i1l2228:	
  5845                           
  5846                           ;main.c: 537:         if (count >= 3000)
  5847  0604  300B               	movlw	11
  5848  0605  0271               	subwf	_count+1,w
  5849  0606  30B8               	movlw	184
  5850  0607  1903               	skipnz
  5851  0608  0270               	subwf	_count,w
  5852  0609  1C03               	skipc
  5853  060A  2E0C               	goto	u210_21
  5854  060B  2E0D               	goto	u210_20
  5855  060C                     u210_21:	
  5856  060C  2E11               	goto	i1l2232
  5857  060D                     u210_20:	
  5858  060D                     i1l2230:	
  5859                           
  5860                           ;main.c: 538:         {;main.c: 539:             truck[2]++;
  5861  060D  3001               	movlw	1
  5862  060E  00F5               	movwf	??_conteggioVeicoli
  5863  060F  0875               	movf	??_conteggioVeicoli,w
  5864  0610  07CE               	addwf	_truck+2,f
  5865  0611                     i1l2232:	
  5866                           
  5867                           ;main.c: 541:         count = 0;
  5868  0611  01F0               	clrf	_count
  5869  0612  01F1               	clrf	_count+1
  5870  0613                     i1l2234:	
  5871                           
  5872                           ;main.c: 544:     if (!PORTAbits.RA5)
  5873  0613  1A85               	btfsc	5,5	;volatile
  5874  0614  2E16               	goto	u211_21
  5875  0615  2E17               	goto	u211_20
  5876  0616                     u211_21:	
  5877  0616  2E1E               	goto	i1l336
  5878  0617                     u211_20:	
  5879  0617                     i1l2236:	
  5880                           
  5881                           ;main.c: 545:     {;main.c: 546:         count++;
  5882  0617  3001               	movlw	1
  5883  0618  07F0               	addwf	_count,f
  5884  0619  1803               	skipnc
  5885  061A  0AF1               	incf	_count+1,f
  5886  061B  3000               	movlw	0
  5887  061C  07F1               	addwf	_count+1,f
  5888                           
  5889                           ;main.c: 547:     }
  5890  061D  2E4B               	goto	i1l342
  5891  061E                     i1l336:	
  5892                           ;main.c: 548:     else if (PORTAbits.RA5)
  5893                           
  5894  061E  1E85               	btfss	5,5	;volatile
  5895  061F  2E21               	goto	u212_21
  5896  0620  2E22               	goto	u212_20
  5897  0621                     u212_21:	
  5898  0621  2E4B               	goto	i1l342
  5899  0622                     u212_20:	
  5900  0622                     i1l2238:	
  5901                           
  5902                           ;main.c: 549:     {;main.c: 550:         if (count >= 500)
  5903  0622  3001               	movlw	1
  5904  0623  0271               	subwf	_count+1,w
  5905  0624  30F4               	movlw	244
  5906  0625  1903               	skipnz
  5907  0626  0270               	subwf	_count,w
  5908  0627  1C03               	skipc
  5909  0628  2E2A               	goto	u213_21
  5910  0629  2E2B               	goto	u213_20
  5911  062A                     u213_21:	
  5912  062A  2E2F               	goto	i1l2242
  5913  062B                     u213_20:	
  5914  062B                     i1l2240:	
  5915                           
  5916                           ;main.c: 551:         {;main.c: 552:             motorcycle[3]++;
  5917  062B  3001               	movlw	1
  5918  062C  00F5               	movwf	??_conteggioVeicoli
  5919  062D  0875               	movf	??_conteggioVeicoli,w
  5920  062E  07D7               	addwf	_motorcycle+3,f
  5921  062F                     i1l2242:	
  5922                           
  5923                           ;main.c: 554:         if (count >= 1500)
  5924  062F  3005               	movlw	5
  5925  0630  0271               	subwf	_count+1,w
  5926  0631  30DC               	movlw	220
  5927  0632  1903               	skipnz
  5928  0633  0270               	subwf	_count,w
  5929  0634  1C03               	skipc
  5930  0635  2E37               	goto	u214_21
  5931  0636  2E38               	goto	u214_20
  5932  0637                     u214_21:	
  5933  0637  2E3C               	goto	i1l2246
  5934  0638                     u214_20:	
  5935  0638                     i1l2244:	
  5936                           
  5937                           ;main.c: 555:         {;main.c: 556:             car[3]++;
  5938  0638  3001               	movlw	1
  5939  0639  00F5               	movwf	??_conteggioVeicoli
  5940  063A  0875               	movf	??_conteggioVeicoli,w
  5941  063B  07D3               	addwf	_car+3,f
  5942  063C                     i1l2246:	
  5943                           
  5944                           ;main.c: 558:         if (count >= 3000)
  5945  063C  300B               	movlw	11
  5946  063D  0271               	subwf	_count+1,w
  5947  063E  30B8               	movlw	184
  5948  063F  1903               	skipnz
  5949  0640  0270               	subwf	_count,w
  5950  0641  1C03               	skipc
  5951  0642  2E44               	goto	u215_21
  5952  0643  2E45               	goto	u215_20
  5953  0644                     u215_21:	
  5954  0644  2E49               	goto	i1l2250
  5955  0645                     u215_20:	
  5956  0645                     i1l2248:	
  5957                           
  5958                           ;main.c: 559:         {;main.c: 560:             truck[3]++;
  5959  0645  3001               	movlw	1
  5960  0646  00F5               	movwf	??_conteggioVeicoli
  5961  0647  0875               	movf	??_conteggioVeicoli,w
  5962  0648  07CF               	addwf	_truck+3,f
  5963  0649                     i1l2250:	
  5964                           
  5965                           ;main.c: 562:         count = 0;
  5966  0649  01F0               	clrf	_count
  5967  064A  01F1               	clrf	_count+1
  5968  064B                     i1l342:	
  5969  064B  0008               	return
  5970  064C                     __end_of_conteggioVeicoli:	
  5971                           
  5972                           	psect	text21
  5973  0B8F                     __ptext21:	
  5974 ;; *************** function _UART_Read *****************
  5975 ;; Defined at:
  5976 ;;		line 403 in file "main.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;		None
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;		None
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  1    wreg      unsigned char 
  5983 ;; Registers used:
  5984 ;;		wreg
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5990 ;;      Params:         0       0       0       0       0
  5991 ;;      Locals:         0       0       0       0       0
  5992 ;;      Temps:          0       0       0       0       0
  5993 ;;      Totals:         0       0       0       0       0
  5994 ;;Total ram usage:        0 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; This function calls:
  5997 ;;		Nothing
  5998 ;; This function is called by:
  5999 ;;		_ISR
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           
  6004                           ;psect for function _UART_Read
  6005  0B8F                     _UART_Read:	
  6006  0B8F                     i1l2174:	
  6007                           ;incstack = 0
  6008                           ; Regs used in _UART_Read: [wreg]
  6009                           
  6010  0B8F                     i1l286:	
  6011                           ;main.c: 406:         ;
  6012                           
  6013                           
  6014                           ;main.c: 405:     while (!RCIF)
  6015  0B8F  1283               	bcf	3,5	;RP0=0, select bank0
  6016  0B90  1303               	bcf	3,6	;RP1=0, select bank0
  6017  0B91  1E8C               	btfss	12,5	;volatile
  6018  0B92  2B94               	goto	u195_21
  6019  0B93  2B95               	goto	u195_20
  6020  0B94                     u195_21:	
  6021  0B94  2B8F               	goto	i1l286
  6022  0B95                     u195_20:	
  6023  0B95                     i1l288:	
  6024                           
  6025                           ;main.c: 407:     RCIF = 0;
  6026  0B95  128C               	bcf	12,5	;volatile
  6027  0B96                     i1l2176:	
  6028                           
  6029                           ;main.c: 408:     return RCREG;
  6030  0B96  081A               	movf	26,w	;volatile
  6031  0B97                     i1l289:	
  6032  0B97  0008               	return
  6033  0B98                     __end_of_UART_Read:	
  6034  007E                     btemp	set	126	;btemp
  6035  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    11
    Data        33
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     44      69
    BANK1            80      0      71
    BANK3            96      0      96
    BANK2            96     18      90

Pointer List with Targets:

    sendByte@txByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    Semafori	PTR struct .[16] size(2) Largest target is 12
		 -> s15(BANK2[12]), s14(BANK2[12]), s13(BANK2[12]), s12(BANK2[12]), 
		 -> s11(BANK2[12]), s10(BANK2[12]), s9(BANK3[12]), s8(BANK3[12]), 
		 -> s7(BANK3[12]), s6(BANK3[12]), s5(BANK3[12]), s4(BANK3[12]), 
		 -> s3(BANK3[12]), s2(BANK3[12]), s1(BANK1[12]), s0(BANK1[12]), 

    sp__BuildByte	PTR unsigned char  size(1) Largest target is 5
		 -> BuildByte@txByte(BANK0[5]), 

    bitParita@rx	PTR unsigned char  size(1) Largest target is 15
		 -> dataFromGateway(BANK1[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_conteggioVeicoli

Critical Paths under _main in BANK0

    _main->_sendByte
    _sendByte->_BuildByte
    _map->___awdiv
    _bitParita->_bitChange
    _UART_Init->___aldiv
    _GetDigits->___awdiv
    ___awdiv->___awmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0   16542
                                             28 BANK0     16    16      0
                                              0 BANK2     18    18      0
                           _ADC_Read
                          _GetDigits
                            _GetTime
                   _SetDefaultTimers
                         _SetDisplay
                          _UART_Init
                            ___awmod
                             ___bmul
                          _bitParita
                           _init_ADC
                                _map
                           _sendByte
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             8     6      2    2444
                                             20 BANK0      8     6      2
                          _BuildByte
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BuildByte                                           20    18      2    1135
                                              0 BANK0     20    18      2
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    4368
                                             16 BANK0     10     0     10
                           _ADC_Read (ARG)
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1636
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bitParita                                           18    18      0    1113
                                              4 BANK0     18    18      0
                          _bitChange
 ---------------------------------------------------------------------------------
 (2) _bitChange                                            4     3      1     276
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            6     4      2     746
                                             15 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _SetDisplay                                           4     1      3    1204
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SetDefaultTimers                                    14     8      6     716
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              8     6      2     232
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _GetDigits                                            7     5      2    2653
                                             16 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1333
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              1 COMMON     4     4      0
                          _UART_Read
                   _conteggioVeicoli
 ---------------------------------------------------------------------------------
 (4) _conteggioVeicoli                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _GetDigits
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _GetTime
   _SetDefaultTimers
   _SetDisplay
   _UART_Init
     ___aldiv
   ___awmod
   ___bmul
   _bitParita
     _bitChange
   _init_ADC
   _map
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _sendByte
     _BuildByte
     _UART_TxChar

 _ISR (ROOT)
   _UART_Read
   _conteggioVeicoli

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     12      5A      11       93.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      47       7       88.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     150      12        0.0%
ABS                  0      0     150       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Jun 20 15:23:42 2020

                        pc 0002             ___bmul@product 0022                __CFG_CP$OFF 0000  
                       l83 0CD5                         l98 0CA0               ___awdiv@sign 002D  
                       _s0 00BB                         _s1 00AF                         _s2 01E4  
                       _s3 01D8                         _s4 01CC                         _s5 01C0  
                       _s6 01B4                         _s7 01A8                         _s8 019C  
                       _s9 0190                         fsr 0004        ___wmul@multiplicand 0022  
           _GetDigits$1149 0035                __CFG_LVP$ON 0000                        l110 06D3  
                      l111 06DF                        l113 0714                        l105 0683  
                      l106 068F                        l300 0ED8                        l220 0162  
                      l212 00C7                        l125 07B4                        l214 009C  
                      l303 0BDD                        l119 0763                        l128 07DC  
                      l225 0259                        l315 0F62                        l262 0BB5  
                      l503 0F77                        l271 0D0F                        l440 0C41  
                      l265 0C0E                        l513 0FFF                        l249 03C5  
                      l274 0B9B                        l268 0C1A                        l604 0E04  
                      l276 0B9F                        l277 0BA2                        l438 0C29  
                      l294 0C6F                        l464 0BF4                        l297 0D4F  
                      l591 0E6D               __CFG_CPD$OFF 0000                        _ISR 0D50  
                      _s10 014C                        _s11 0140                        _s12 0134  
                      _s13 0128                        _s14 011C                        _s15 0110  
                      _car 0050                        _map 0CA1                        fsr0 0004  
                      indf 0000               ___awmod@sign 0026               __CFG_FOSC$HS 0000  
                     ?_ISR 0075                main@colorId 0159                       l3000 0C04  
                     l3002 0C0B                       l3010 0BE2                       l3004 0C12  
                     l3012 0BE6                       l3100 00DE                       l3014 0BEA  
                     l3110 0112                       l3016 0BEC                       l3008 0BE1  
                     l3200 03CD                       l3120 0168                       l3112 011D  
                     l3104 00E5                       l3040 0059                       l3018 0BF3  
                     l3210 03ED                       l3202 03CE                       l3122 0169  
                     l3114 012F                       l3106 00FA                       l3050 0068  
                     l3042 005B                       l3034 0050                       l3212 0460  
                     l3204 03DB                       l3140 0221                       l3132 0178  
                     l3116 015B                       l3108 0106                       l3060 008F  
                     l3052 0073                       l3044 005D                       l3036 0056  
                     l3230 049E                       l3222 047B                       l3206 03DF  
                     l3150 025E                       l3134 01CD                       l3126 0170  
                     l3070 0095                       l3062 0092                       l3054 0086  
                     l3046 0061                       l3038 0057                       l3232 0532  
                     l3224 048A                       l3216 0469                       l3160 02A7  
                     l3152 0262                       l3136 021A                       l3128 0171  
                     l3144 022A                       l3080 00AE                       l3064 0092  
                     l3056 008A                       l3048 0063                       l3234 0543  
                     l3218 046D                       l3170 0327                       l3162 02AF  
                     l3154 026A                       l3146 0231                       l3090 00CD  
                     l3074 009F                       l3066 0092                       l3058 008C  
                     l2700 07CE                       l3236 0554                       l3228 0491  
                     l3340 0395                       l3180 034F                       l3172 032C  
                     l3164 02E2                       l3156 026B                       l3148 0254  
                     l3092 00CF                       l3076 00A5                       l3084 00B2  
                     l3068 0092                       l3342 0F43                       l2710 0C1B  
                     l2702 07DB                       l3182 0364                       l3174 0331  
                     l3190 03A3                       l3166 02E5                       l3158 02A4  
                     l3094 00D3                       l3086 00CB                       l3078 00A8  
                     l2800 0E5F                       l2720 0C3D                       l2712 0C1F  
                     l2640 0727                       l3192 03BB                       l3184 0379  
                     l3176 0345                       l3168 031F                       l3096 00D5  
                     l3088 00CC                       l2802 0E64                       l2810 0DAD  
                     l2730 0F7B                       l2634 0C91                       l2626 0C73  
                     l2714 0C23                       l2642 0734                       l2706 0B9B  
                     l3194 03BF                       l3178 034A                       l3098 00DB  
                     l3338 00BF                       l2804 0E69                       l2820 0DC1  
                     l2812 0DB1                       l2740 0F9D                       l2732 0F86  
                     l2724 0F63                       l2628 0C82                       l2900 06F9  
                     l2716 0C30                       l2660 0750                       l2652 0738  
                     l2644 0735                       l2708 0BA0                       l3196 03C3  
                     l3188 038D                       l2830 0DD9                       l2822 0DC7  
                     l2814 0DB6                       l2750 0FD7                       l2742 0FAA  
                     l2734 0F8A                       l2726 0F66                       l2910 0CD6  
                     l2902 0BA3                       l2718 0C37                       l2670 0772  
                     l2662 0756                       l2646 0736                       l2638 0718  
                     l3198 03C9                       l2840 0DFB                       l2832 0DE3  
                     l2824 0DCA                       l2816 0DB8                       l2808 0DAA  
                     l2920 0ED9                       l2760 0FF7                       l2752 0FD8  
                     l2744 0FAE                       l2736 0F92                       l2728 0F6A  
                     l2912 0CDE                       l2904 0BA7                       l2680 0789  
                     l2672 0778                       l2664 0769                       l2770 0E11  
                     l2842 0E00                       l2834 0DE9                       l2826 0DD1  
                     l2818 0DBC                       l2754 0FE1                       l2746 0FB7  
                     l2738 0F9A                       l2914 0D0C                       l2850 064F  
                     l2906 0BAA                       l2690 07A7                       l2674 0785  
                     l2666 0771                       l2658 073C                       l2780 0E22  
                     l2772 0E13                       l2764 0E05                       l2836 0DF0  
                     l2828 0DD5                       l2932 0EDE                       l2940 0F3B  
                     l2748 0FC9                       l2756 0FE7                       l2916 0D0D  
                     l2908 0BAE                       l2692 07BA                       l2790 0E3A  
                     l2782 0E28                       l2774 0E17                       l2766 0E08  
                     l2838 0DF6                       l2934 0EFD                       l2942 0F4E  
                     l2926 0EDC                       l2758 0FEC                       l2918 0D0E  
                     l2870 068B                       l2862 065A                       l2846 0CA1  
                     l2694 07C7                       l2686 078D                       ?_map 0030  
                     l2792 0E4B                       l2784 0E2B                       l2776 0E1C  
                     l2768 0E0C                       l2960 0D38                       l2944 0F52  
                     l2936 0F1C                       l2880 06A6                       l2872 0695  
                     l2864 0670                       l2856 0656                       l2688 07A1  
                     l2794 0E51                       l2786 0E32                       l2778 0E20  
                     l2970 0E74                       l2962 0D43                       l2954 0D13  
                     l2946 0F58                       l2890 06C6                       l2874 06A2  
                     l2866 0676                       l2698 07C8                       l2796 0E52  
                     l2788 0E36                       l2972 0E8A                       l2964 0D4B  
                     l2956 0D1F                       l2948 0F5C                       l2980 0BDB  
                     l2892 06D9                       l2868 0689                       l2798 0E59  
                     l2974 0EAF                       l2958 0D27                       l2894 06DB  
                     l2886 06AA                       l2990 0C59                       l2982 0C45  
                     l2976 0EC5                       l2968 0E6E                       l2896 06E5  
                     l2888 06C0                       l2992 0C5F                       l2984 0C58  
                     l2978 0BCC                       l2898 06F2                       l2994 0C65  
                     l2996 0C69                       l2998 0BF8                       u3000 0DBC  
                     u3001 0DBB                       u3010 0DC7                       u3011 0DC6  
                     u3100 0689                       u3101 0688                       u3030 0DD9  
                     u3110 06A2                       u3031 0DD8                       u3111 06A1  
                     u3040 0DE3                       u3041 0DE2                       u3025 0DCB  
                     u3130 06D3                       u3210 0C6F                       u3131 06D2  
                     u3115 069E                       u3211 0C6E                       u3060 0DF6  
                     u3140 06D9                       u3124 06B8                       u3300 00CB  
                     u3061 0DF5                       u3045 0DDF                       u3205 0D2D  
                     u3141 06D8                       u3125 06B6                       u3301 00CA  
                     u3230 0C12                       u3070 0DFB                       u3150 06F2  
                     u3310 00D3                       u3231 0C11                       u3071 0DFA  
                     u3055 0DEA                       u3151 06F1                       u3135 06CF  
                     u3311 00D2                       u3240 0BE6                       u3160 06F9  
                     u3400 025E                       u3320 00E4                       u3225 0BFB  
                     u3241 0BE5                       u3161 06F8                       u3401 025D  
                     u3321 00E3                       u3170 0CED                       u3250 0BF3  
                     u2610 0C82                       u3090 0683                       u3410 0262  
                     u3251 0BF2                       u2611 0C81                       u3155 06EE  
                     u3091 0682                       u3411 0261                       u3180 0F58  
                     u2604 0C79                       u3084 0668                       u2700 07B4  
                     u3500 03C3                       u3420 02A4                       u3340 0168  
                     u3181 0F57                       u2605 0C77                       u3085 0666  
                     u2701 07B3                       u3501 03C2                       u3421 02A3  
                     u3341 0167                       u3190 0F62                       u2710 07BA  
                     u3510 03C9                       u3430 02AF                       u3350 016F  
                     u3270 009B                       u3191 0F61                       u3175 0CE8  
                     u3095 067F                       u2711 07B9                       u3511 03C8  
                     u3431 02AE                       u3351 016E                       u3335 0122  
                     u3271 009A                       u2800 0F7B                       u2624 0C88  
                     u3520 03CD                       u3440 02E2                       u3360 0177  
                     u3280 00A5                       u2801 0F7A                       u2625 0C86  
                     u2705 07B0                       u3521 03CC                       u3441 02E1  
                     u3361 0176                       u3281 00A4                       u2810 0F9A  
                     u2634 0C97                       u2730 07DB                       u3530 03DB  
                     u3450 0327                       u3370 01CD                       u3290 00AE  
                     u2811 0F99                       u2635 0C95                       u2731 07DA  
                     u3531 03DA                       u3451 0326                       u3371 01CC  
                     u3291 00AD                       u2900 0E17                       u2724 07C0  
                     u2660 0763                       u2740 0B9F                       u3540 03EC  
                     u3460 0331                       u3380 0254                       u2901 0E16  
                     u2725 07BE                       u2661 0762                       u2645 072A  
                     u2741 0B9E                       u3541 03EB                       u3461 0330  
                     u3445 02DE                       u3381 0253                       u2910 0E28  
                     u2830 0FAE                       u2750 0C23                       u2670 0769  
                     u2654 0748                       u3470 034A                       u3390 0259  
                     u2911 0E27                       u2831 0FAD                       u2751 0C22  
                     u2735 07D7                       u2671 0768                       u2655 0746  
                     u3471 0349                       u3391 0258                       u3375 01C9  
                     u2680 0785                       u3480 034F                       u2825 0F9F  
                     u3617 0BB2                       u2681 0784                       u2665 075F  
                     u3545 03E8                       u3481 034E                       u2930 0E3A  
                     u2850 0FC9                       u3554 0409                       u3490 03BF  
                     u3627 0C08                       u2931 0E39                       u2851 0FC8  
                     u3555 0407                       u3491 03BE                       u2780 0C3D  
                     u3580 047A                       u3564 0430                       u2925 0E2C  
                     u2845 0FB0                       u2781 0C3C                       u2765 0C2A  
                     u2685 0781                       u3581 0479                       u3565 042E  
                     u2950 0E4B                       u2870 0FE7                       u2790 0F6A  
                     u2694 0799                       u3590 049E                       u3574 0457  
                     u2951 0E4A                       u2871 0FE6                       u2855 0FC5  
                     u2791 0F69                       u2775 0C31                       u2695 0797  
                     u3591 049D                       u3575 0455                       u2880 0FEC  
                     u2945 0E3B                       u2881 0FEB                       u2865 0FD9  
                     u3585 0476                       u2970 0E5F                       u2890 0E0C  
                     u2971 0E5E                       u2955 0E47                       u2891 0E0B  
                     u2980 0E64                       _RCIF 0065                       u2981 0E63  
                     u2965 0E53                       u2990 0DB1                       u2991 0DB0  
                     _TMR0 0001                       _TXIF 0064               __CFG_WRT$OFF 0000  
                     _disp 005B                       _main 0050                       _time 0072  
                     map@x 0030                       btemp 007E           __end_of_ADC_Read 0C1B  
            __CFG_BOREN$ON 0000                main@umidita 015B                       start 000E  
          __end_of_GetTime 0D50          ___bmul@multiplier 0023               main@endCiclo 015D  
                    ??_ISR 0076  __size_of_conteggioVeicoli 00E3                      ??_map 003A  
          __end_of___aldiv 1000                      ?_main 0075            __end_of___awdiv 0E6E  
            __CFG_WDTE$OFF 0000            __end_of___awmod 0E05            ___awdiv@divisor 0027  
                    _T1CON 0010       bitParita@errorColumn 002A                      i1l330 05E6  
                    i1l324 05AE                      i1l342 064B                      i1l318 0576  
                    i1l336 061E                      i1l352 0DA1                      i1l286 0B8F  
                    i1l288 0B95                      i1l289 0B97            ___awdiv@counter 002C  
                    _RCREG 001A                      _TMR1H 000F                      _TMR1L 000E  
                    _SPBRG 0099                      _PORTD 0008                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087                      _TRISD 0088  
                    _TRISE 0089                      _TXREG 0019              __CFG_PWRTE$ON 0000  
       __size_of_UART_Init 003A         __size_of_UART_Read 0009            __end_of_display 0811  
                    _count 0070                      _unita 005F                      main@i 0163  
                    main@l 0166                      _truck 004C                      pclath 000A  
                    status 0003                      wtemp0 007E            __initialization 0011  
             __end_of_main 0569         __size_of_GetDigits 006B                     ??_main 003C  
        SetDefaultTimers@i 002D          SetDefaultTimers@l 002C         __size_of_BuildByte 00C8  
               _SetDisplay 0BC9              bitChange@dato 0023                     _ADCON0 001F  
                   _ADCON1 009F                     _ADRESH 001E                     _ADRESL 009E  
         ___awdiv@dividend 0029                     i1l2200 05A7                     i1l2210 05CC  
                   i1l2202 05B2                     i1l2220 05EA                     i1l2212 05D5  
                   i1l2204 05BB                     i1l2230 060D                     i1l2222 05F3  
                   i1l2214 05D9                     i1l2206 05BF                     i1l2240 062B  
                   i1l2232 0611                     i1l2224 05F7                     i1l2208 05C8  
                   i1l2216 05DB                     u200_20 059D                     u200_21 059C  
                   i1l2250 0649                     i1l2242 062F                     i1l2226 0600  
                   i1l2234 0613                     i1l2218 05DF                     i1l2244 0638  
                   i1l2236 0617                     i1l2228 0604                     i1l2180 0569  
                   i1l2174 0B8F                     i1l2246 063C                     i1l2238 0622  
                   i1l2190 0590                     i1l2182 056F                     i1l2510 0D5F  
                   i1l2502 0D50                     i1l2176 0B96                     i1l2248 0645  
                   u201_20 05A7                     i1l2192 0594                     i1l2184 057A  
                   i1l2512 0D63                     i1l2520 0D7A                     i1l2504 0D56  
                   u201_21 05A6                     i1l2194 059D                     i1l2186 0583  
                   i1l2530 0D8C                     i1l2522 0D7E                     i1l2514 0D67  
                   i1l2506 0D5A                     i1l2196 05A1                     i1l2188 0587  
                   i1l2540 0D99                     i1l2532 0D8D                     i1l2524 0D7F  
                   i1l2516 0D75                     i1l2508 0D5D                     i1l2198 05A3  
                   i1l2542 0D9D                     i1l2534 0D91                     i1l2526 0D84  
                   i1l2518 0D79                     u210_20 060D                     u202_20 05B2  
                   i1l2544 0D9F                     i1l2536 0D97                     i1l2528 0D88  
                   u210_21 060C                     u202_21 05B1                     i1l2538 0D98  
                   u211_20 0617                     u203_20 05BB                     u211_21 0616  
                   u203_21 05BA                     u212_20 0622                     u204_20 05C8  
                   u212_21 0621                     u204_21 05C7                     u213_20 062B  
                   u205_20 05D5                     u213_21 062A                     u205_21 05D4  
                   u214_20 0638                     u206_20 05DF                     u214_21 0637  
                   u206_21 05DE                     u215_20 0645                     u207_20 05EA  
                   u215_21 0644                     u207_21 05E9                     u208_20 05F3  
                   u208_21 05F2                     u209_20 0600                     _INTCON 000B  
                   u209_21 05FF                     u253_20 0D56                     u253_21 0D55  
                   u254_20 0D5A                     u254_21 0D59                     u255_20 0D63  
                   u255_21 0D62                     u256_20 0D67                     u256_21 0D66  
                   u257_20 0D7E                     u257_21 0D7D                     u258_20 0D8C  
                   u258_21 0D8B                     u195_20 0B95                     u259_20 0D97  
                   u195_21 0B94                     u259_21 0D96                     u196_20 056F  
                   u196_21 056E                     u197_20 057A                     u197_21 0579  
                   u198_20 0583                     u198_21 0582                     u199_20 0590  
                   u199_21 058F                     _TMR0IF 005A                     _TMR1IF 0060  
                ??_GetTime 0022               ?_UART_TxChar 0075          __end_of_UART_Init 0D10  
        __end_of_UART_Read 0B98                     ___bmul 0BDE                  ??___aldiv 0028  
          GetTime@shortInt 0025                     ___wmul 0C1B                  ??___awdiv 002B  
                   _decine 005E                  ??___awmod 0024           __end_of_init_ADC 0BB6  
                   _cycled 0060           ___awdiv@quotient 002E            ___awmod@divisor 0020  
          ___awmod@counter 0025           __end_of_sendByte 0C70              main@pressione 015C  
                ?_ADC_Read 0020                     saved_w 007E    __end_of__initialization 004C  
        __end_of_GetDigits 0ED9       bitParita@sommaColumn 0029  __size_of_SetDefaultTimers 008A  
      ___bmul@multiplicand 0020             __pcstackCOMMON 0075          __end_of_BuildByte 07DD  
             __pidataBANK0 07FD               __pidataBANK1 07DD         __size_of_bitChange 0031  
         _conteggioVeicoli 0569         __size_of_bitParita 00C9                 ??_ADC_Read 0022  
   SetDefaultTimers@giallo 0024                ?_SetDisplay 0020              GetDigits@Time 0030  
     _dataFromGatewayIndex 0059       _timerReadFromGateway 0058                 __pbssBANK0 004C  
               __pbssBANK1 00A0                 __pbssBANK2 0110                 __pbssBANK3 0190  
               __pmaintext 0050                    ?___bmul 0020                    ?___wmul 0020  
            sendByte@byte0 0039              sendByte@byte1 0034                 __pintentry 0004  
        __end_of_bitChange 0CA1                 __stringtab 0800          __end_of_bitParita 0715  
                ?_init_ADC 0075                    _GetTime 0D10            BuildByte@valore 0021  
          BuildByte@txByte 0025                  ?_sendByte 0034                 bitChange@n 0020  
               _n_semafori 0064       __size_of_UART_TxChar 000B                    ___aldiv 0F63  
          __size_of___bmul 0017                    ___awdiv 0E05                    ___awmod 0DAA  
      __size_of_SetDisplay 0015            __size_of___wmul 0027                    __ptext1 0C42  
                  __ptext2 0B98                    __ptext3 0715                    __ptext4 0CA1  
                  __ptext5 0C1B                    __ptext6 0BA3                    __ptext7 064C  
                  __ptext8 0C70                    __ptext9 0BDE             main@semaforoId 0158  
                  _comando 0073                    _display 0806               __size_of_ISR 005A  
               bitParita@i 0032                 bitParita@y 002D               __size_of_map 0035  
         ___awmod@dividend 0022           ___aldiv@dividend 0024       BuildByte@sommaColumn 002B  
                  clrloop0 0B88                    main@tmp 015E       end_of_initialization 004C  
               ??_init_ADC 0020             main@lux_select 0161                 ??_sendByte 0036  
         _SetDefaultTimers 0ED9                  _RCSTAbits 0018           ___aldiv@quotient 002B  
               _motorcycle 0054                  _UART_Init 0CD6                  _UART_Read 0B8F  
                _PORTAbits 0005                  _PORTBbits 0006               SetDisplay@d1 0023  
             SetDisplay@d2 0020               SetDisplay@d3 0021                  _TRISCbits 0087  
        __size_of_ADC_Read 0026   __end_of_conteggioVeicoli 064C                 map@out_max 0038  
        bitParita@errorRow 002C                 map@out_min 0036                  _TXSTAbits 0098  
                _GetDigits 0E6E          bitParita@sommaRow 0028             __end_of___bmul 0BF5  
           __end_of___wmul 0C42                 ?_UART_Init 002F                 ?_UART_Read 0075  
                _BuildByte 0715          BuildByte@sommaRow 002A        start_initialization 0011  
              __end_of_ISR 0DAA               ??_SetDisplay 0023                __end_of_map 0CD6  
               ?_GetDigits 0030                   ??___bmul 0021             ADC_Read@canale 0023  
                 ??___wmul 0024                 init_fetch0 0BB6                __pdataBANK0 0064  
              __pdataBANK1 00C7         __end_of_SetDisplay 0BDE                 ?_BuildByte 0020  
              __pbssCOMMON 0070                  ___latbits 0002              __pcstackBANK0 0020  
            __pcstackBANK2 0158                   ?_GetTime 0020                  _bitChange 0C70  
    SetDefaultTimers@verde 0022      SetDefaultTimers@rosso 0020          __size_of_init_ADC 0013  
                _bitParita 064C                  _centinaia 005D          __size_of_sendByte 002E  
                 ?___aldiv 0020                   ?___awdiv 0027                   ?___awmod 0020  
              ??_UART_Init 0031                ??_UART_Read 0075             BuildByte@i_342 0032  
                __pstrings 0800             BuildByte@y_343 002E             sendByte@valore 0035  
           sendByte@txByte 003A             BuildByte@byte0 0024             BuildByte@byte1 0020  
 __end_of_SetDefaultTimers 0F63                   _ADC_Read 0BF5                  _count_lux 0074  
                _countdown 005A              UART_TxChar@ch 0020            ___aldiv@divisor 0020  
        interrupt_function 0004            ___aldiv@counter 0029                 ?_bitChange 0020  
           ___wmul@product 0024                  clear_ram0 0B87                   _PIE1bits 008C  
            ??_UART_TxChar 0020                 ?_bitParita 0075                ??_GetDigits 0032  
                 _GO_nDONE 00FA          UART_Init@baudrate 002F                ??_BuildByte 0022  
                map@in_max 0034                  map@in_min 0032                __stringbase 0805  
                main@i_444 0167                  main@i_445 0168                  main@i_446 0164  
        ___wmul@multiplier 0020                  main@index 0162               GetTime@index 0024  
        ?_conteggioVeicoli 0075               _secondPassed 0061         ??_conteggioVeicoli 0075  
         __size_of_GetTime 0040                   _Semafori 00C7             bitParita@i_330 0034  
              _readGateway 0062             bitParita@y_331 002F           __size_of___aldiv 009D  
      __end_of_UART_TxChar 0BA3           __size_of___awdiv 0069           __size_of___awmod 005B  
           bitParita@error 002B         __end_of__stringtab 0806                  sendByte@i 003B  
                 __ptext10 0CD6                   __ptext11 0F63                   __ptext20 0569  
                 __ptext12 0BC9                   __ptext21 0B8F                   __ptext13 0ED9  
                 __ptext14 0D10                   __ptext15 0E6E                   __ptext16 0DAA  
                 __ptext17 0E05                   __ptext18 0BF5                   __ptext19 0D50  
                 _init_ADC 0BA3                bitParita@rx 0031                ??_bitChange 0021  
            __size_of_main 0519            _dataFromGateway 00A0                   _old_disp 005C  
              ??_bitParita 0024                   _sendByte 0C42                   main@temp 015A  
                 main@time 015F                GetTime@time 0026                 _INTCONbits 000B  
                 init_ram0 0BBA                   intlevel1 0000            _readGatewayDone 0063  
                stringcode 0800                _UART_TxChar 0B98                 _OPTION_REG 0081  
          SetDisplay@value 0022                   stringdir 0800                   stringtab 0800  
        ?_SetDefaultTimers 0020               ___aldiv@sign 002A         ??_SetDefaultTimers 0026  
               BuildByte@i 0030                 BuildByte@y 002C  
